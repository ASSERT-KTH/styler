{
    "project_name": "graphfoundation-ongdb",
    "error_id": "715",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "289",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "85",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "323",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "85",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "351",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/715/LogFilesBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/715/LogFilesBuilder.java\nindex feef1625658..f183fcac9af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/715/LogFilesBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/715/LogFilesBuilder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.files;\n \n import java.io.File;\n@@ -56,304 +57,304 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.logical_log_rotati\n  */\n public class LogFilesBuilder\n {\n-    private boolean readOnly;\n-    private PageCache pageCache;\n-    private File storeDirectory;\n-    private File logsDirectory;\n-    private Config config;\n-    private Long rotationThreshold;\n-    private LogEntryReader logEntryReader;\n-    private LogFileCreationMonitor logFileCreationMonitor;\n-    private Dependencies dependencies;\n-    private FileSystemAbstraction fileSystem;\n-    private LogVersionRepository logVersionRepository;\n-    private TransactionIdStore transactionIdStore;\n-    private LongSupplier lastCommittedTransactionIdSupplier;\n-    private String logFileName = TransactionLogFiles.DEFAULT_NAME;\n-    private boolean fileBasedOperationsOnly;\n+  private boolean readOnly;\n+  private PageCache pageCache;\n+  private File storeDirectory;\n+  private File logsDirectory;\n+  private Config config;\n+  private Long rotationThreshold;\n+  private LogEntryReader logEntryReader;\n+  private LogFileCreationMonitor logFileCreationMonitor;\n+  private Dependencies dependencies;\n+  private FileSystemAbstraction fileSystem;\n+  private LogVersionRepository logVersionRepository;\n+  private TransactionIdStore transactionIdStore;\n+  private LongSupplier lastCommittedTransactionIdSupplier;\n+  private String logFileName = TransactionLogFiles.DEFAULT_NAME;\n+  private boolean fileBasedOperationsOnly;\n \n-    /**\n-     * Builder for fully functional transactional log files.\n-     * Log files will be able to access store and external components information, perform rotations, etc.\n-     * @param storeDirectory store directory\n-     * @param fileSystem log files filesystem\n-     */\n-    public static LogFilesBuilder builder( File storeDirectory, FileSystemAbstraction fileSystem )\n-    {\n-        LogFilesBuilder filesBuilder = new LogFilesBuilder();\n-        filesBuilder.storeDirectory = storeDirectory;\n-        filesBuilder.fileSystem = fileSystem;\n-        return filesBuilder;\n-    }\n+  /**\n+   * Builder for fully functional transactional log files.\n+   * Log files will be able to access store and external components information, perform rotations, etc.\n+   *\n+   * @param storeDirectory store directory\n+   * @param fileSystem     log files filesystem\n+   */\n+  public static LogFilesBuilder builder(File storeDirectory, FileSystemAbstraction fileSystem)\n+  {\n+    LogFilesBuilder filesBuilder = new LogFilesBuilder();\n+    filesBuilder.storeDirectory = storeDirectory;\n+    filesBuilder.fileSystem = fileSystem;\n+    return filesBuilder;\n+  }\n \n-    /**\n-     * Build log files that can access and operate only on active set of log files without ability to\n-     * rotate and create any new one. Appending to current log file still possible.\n-     * Store and external components access available in read only mode.\n-     * @param storeDirectory store directory\n-     * @param fileSystem log file system\n-     * @param pageCache page cache for read only store info access\n-     */\n-    public static LogFilesBuilder activeFilesBuilder( File storeDirectory, FileSystemAbstraction fileSystem, PageCache pageCache )\n-    {\n-        LogFilesBuilder builder = builder( storeDirectory, fileSystem );\n-        builder.pageCache = pageCache;\n-        builder.readOnly = true;\n-        return builder;\n-    }\n+  /**\n+   * Build log files that can access and operate only on active set of log files without ability to\n+   * rotate and create any new one. Appending to current log file still possible.\n+   * Store and external components access available in read only mode.\n+   *\n+   * @param storeDirectory store directory\n+   * @param fileSystem     log file system\n+   * @param pageCache      page cache for read only store info access\n+   */\n+  public static LogFilesBuilder activeFilesBuilder(File storeDirectory, FileSystemAbstraction fileSystem, PageCache pageCache)\n+  {\n+    LogFilesBuilder builder = builder(storeDirectory, fileSystem);\n+    builder.pageCache = pageCache;\n+    builder.readOnly = true;\n+    return builder;\n+  }\n \n-    /**\n-     * Build log files that will be able to perform only operations on a log files directly.\n-     * Any operation that will require access to a store or other parts of runtime will fail.\n-     * Should be mainly used only for testing purposes or when only file based operations will be performed\n-     * @param logsDirectory log files directory\n-     * @param fileSystem file system\n-     */\n-    public static LogFilesBuilder logFilesBasedOnlyBuilder( File logsDirectory, FileSystemAbstraction fileSystem )\n-    {\n-        LogFilesBuilder builder = new LogFilesBuilder();\n-        builder.logsDirectory = logsDirectory;\n-        builder.fileSystem = fileSystem;\n-        builder.fileBasedOperationsOnly = true;\n-        return builder;\n-    }\n+  /**\n+   * Build log files that will be able to perform only operations on a log files directly.\n+   * Any operation that will require access to a store or other parts of runtime will fail.\n+   * Should be mainly used only for testing purposes or when only file based operations will be performed\n+   *\n+   * @param logsDirectory log files directory\n+   * @param fileSystem    file system\n+   */\n+  public static LogFilesBuilder logFilesBasedOnlyBuilder(File logsDirectory, FileSystemAbstraction fileSystem)\n+  {\n+    LogFilesBuilder builder = new LogFilesBuilder();\n+    builder.logsDirectory = logsDirectory;\n+    builder.fileSystem = fileSystem;\n+    builder.fileBasedOperationsOnly = true;\n+    return builder;\n+  }\n \n-    LogFilesBuilder withLogFileName( String name )\n-    {\n-        this.logFileName = name;\n-        return this;\n-    }\n+  LogFilesBuilder withLogFileName(String name)\n+  {\n+    this.logFileName = name;\n+    return this;\n+  }\n+\n+  public LogFilesBuilder withLogVersionRepository(LogVersionRepository logVersionRepository)\n+  {\n+    this.logVersionRepository = logVersionRepository;\n+    return this;\n+  }\n \n-    public LogFilesBuilder withLogVersionRepository( LogVersionRepository logVersionRepository )\n+  public LogFilesBuilder withTransactionIdStore(TransactionIdStore transactionIdStore)\n+  {\n+    this.transactionIdStore = transactionIdStore;\n+    return this;\n+  }\n+\n+  public LogFilesBuilder withLastCommittedTransactionIdSupplier(LongSupplier transactionIdSupplier)\n+  {\n+    this.lastCommittedTransactionIdSupplier = transactionIdSupplier;\n+    return this;\n+  }\n+\n+  public LogFilesBuilder withLogEntryReader(LogEntryReader logEntryReader)\n+  {\n+    this.logEntryReader = logEntryReader;\n+    return this;\n+  }\n+\n+  public LogFilesBuilder withLogFileMonitor(LogFileCreationMonitor logFileCreationMonitor)\n+  {\n+    this.logFileCreationMonitor = logFileCreationMonitor;\n+    return this;\n+  }\n+\n+  public LogFilesBuilder withConfig(Config config)\n+  {\n+    this.config = config;\n+    return this;\n+  }\n+\n+  public LogFilesBuilder withRotationThreshold(long rotationThreshold)\n+  {\n+    this.rotationThreshold = rotationThreshold;\n+    return this;\n+  }\n+\n+  public LogFilesBuilder withDependencies(Dependencies dependencies)\n+  {\n+    this.dependencies = dependencies;\n+    return this;\n+  }\n+\n+  public LogFiles build() throws IOException\n+  {\n+    TransactionLogFilesContext filesContext = buildContext();\n+    File logsDirectory = getLogsDirectory();\n+    filesContext.getFileSystem().mkdirs(logsDirectory);\n+    return new TransactionLogFiles(logsDirectory, logFileName, filesContext);\n+  }\n+\n+  private File getLogsDirectory()\n+  {\n+    if (logsDirectory != null)\n     {\n-        this.logVersionRepository = logVersionRepository;\n-        return this;\n+      return logsDirectory;\n     }\n-\n-    public LogFilesBuilder withTransactionIdStore( TransactionIdStore transactionIdStore )\n+    if (config != null)\n     {\n-        this.transactionIdStore = transactionIdStore;\n-        return this;\n+      File neo4jHome = config.get(GraphDatabaseSettings.neo4j_home);\n+      File databasePath = config.get(database_path);\n+      File logicalLogsLocation = config.get(GraphDatabaseSettings.logical_logs_location);\n+      if (storeDirectory.equals(neo4jHome) && databasePath.equals(logicalLogsLocation))\n+      {\n+        return storeDirectory;\n+      }\n+      if (logicalLogsLocation.isAbsolute())\n+      {\n+        return logicalLogsLocation;\n+      }\n+      if (neo4jHome == null || !storeDirectory.equals(databasePath))\n+      {\n+        Path relativeLogicalLogPath = databasePath.toPath().relativize(logicalLogsLocation.toPath());\n+        return new File(storeDirectory, relativeLogicalLogPath.toString());\n+      }\n+      return logicalLogsLocation;\n     }\n+    return storeDirectory;\n+  }\n \n-    public LogFilesBuilder withLastCommittedTransactionIdSupplier( LongSupplier transactionIdSupplier )\n+  TransactionLogFilesContext buildContext() throws IOException\n+  {\n+    if (logEntryReader == null)\n     {\n-        this.lastCommittedTransactionIdSupplier = transactionIdSupplier;\n-        return this;\n+      logEntryReader = new VersionAwareLogEntryReader();\n     }\n-\n-    public LogFilesBuilder withLogEntryReader( LogEntryReader logEntryReader )\n+    if (logFileCreationMonitor == null)\n     {\n-        this.logEntryReader = logEntryReader;\n-        return this;\n+      logFileCreationMonitor = LogFileCreationMonitor.NO_MONITOR;\n     }\n+    requireNonNull(fileSystem);\n+    Supplier<LogVersionRepository> logVersionRepositorySupplier = getLogVersionRepositorySupplier();\n+    LongSupplier lastCommittedIdSupplier = lastCommittedIdSupplier();\n+    LongSupplier committingTransactionIdSupplier = committingIdSupplier();\n+\n+    // Register listener for rotation threshold\n+    AtomicLong rotationThreshold = getRotationThresholdAndRegisterForUpdates();\n+\n+    return new TransactionLogFilesContext(rotationThreshold, logEntryReader,\n+        lastCommittedIdSupplier, committingTransactionIdSupplier, logFileCreationMonitor, logVersionRepositorySupplier, fileSystem);\n+  }\n \n-    public LogFilesBuilder withLogFileMonitor( LogFileCreationMonitor logFileCreationMonitor )\n+  private AtomicLong getRotationThresholdAndRegisterForUpdates()\n+  {\n+    if (rotationThreshold != null)\n     {\n-        this.logFileCreationMonitor = logFileCreationMonitor;\n-        return this;\n+      return new AtomicLong(rotationThreshold);\n     }\n-\n-    public LogFilesBuilder withConfig( Config config )\n+    if (readOnly)\n     {\n-        this.config = config;\n-        return this;\n+      return new AtomicLong(Long.MAX_VALUE);\n     }\n-\n-    public LogFilesBuilder withRotationThreshold( long rotationThreshold )\n+    if (config == null)\n     {\n-        this.rotationThreshold = rotationThreshold;\n-        return this;\n+      config = Config.defaults();\n     }\n+    AtomicLong configThreshold = new AtomicLong(config.get(logical_log_rotation_threshold));\n+    config.registerDynamicUpdateListener(logical_log_rotation_threshold, (prev, update) -> configThreshold.set(update));\n+    return configThreshold;\n+  }\n \n-    public LogFilesBuilder withDependencies( Dependencies dependencies )\n+  private Supplier<LogVersionRepository> getLogVersionRepositorySupplier() throws IOException\n+  {\n+    if (logVersionRepository != null)\n     {\n-        this.dependencies = dependencies;\n-        return this;\n+      return () -> logVersionRepository;\n     }\n-\n-    public LogFiles build() throws IOException\n+    if (fileBasedOperationsOnly)\n     {\n-        TransactionLogFilesContext filesContext = buildContext();\n-        File logsDirectory = getLogsDirectory();\n-        filesContext.getFileSystem().mkdirs( logsDirectory );\n-        return new TransactionLogFiles( logsDirectory, logFileName, filesContext );\n+      return () ->\n+      {\n+        throw new UnsupportedOperationException(\"Current version of log files can't perform any \" +\n+            \"operation that require availability of log version repository. Please build full version of log \" +\n+            \"files. Please build full version of log files to be able to use them.\");\n+      };\n     }\n-\n-    private File getLogsDirectory()\n+    if (readOnly)\n     {\n-        if ( logsDirectory != null )\n-        {\n-            return logsDirectory;\n-        }\n-        if ( config != null )\n-        {\n-            File neo4jHome = config.get( GraphDatabaseSettings.neo4j_home );\n-            File databasePath = config.get( database_path );\n-            File logicalLogsLocation = config.get( GraphDatabaseSettings.logical_logs_location );\n-            if ( storeDirectory.equals( neo4jHome ) && databasePath.equals( logicalLogsLocation ) )\n-            {\n-                return storeDirectory;\n-            }\n-            if ( logicalLogsLocation.isAbsolute() )\n-            {\n-                return logicalLogsLocation;\n-            }\n-            if ( neo4jHome == null || !storeDirectory.equals( databasePath ) )\n-            {\n-                Path relativeLogicalLogPath = databasePath.toPath().relativize( logicalLogsLocation.toPath() );\n-                return new File( storeDirectory, relativeLogicalLogPath.toString() );\n-            }\n-            return logicalLogsLocation;\n-        }\n-        return storeDirectory;\n+      requireNonNull(pageCache, \"Read only log files require page cache to be able to read current log version.\");\n+      requireNonNull(storeDirectory, \"Store directory is required.\");\n+      ReadOnlyLogVersionRepository logVersionRepository =\n+          new ReadOnlyLogVersionRepository(pageCache, storeDirectory);\n+      return () -> logVersionRepository;\n+    } else\n+    {\n+      requireNonNull(dependencies, LogVersionRepository.class.getSimpleName() + \" is required. \" +\n+          \"Please provide an instance or a dependencies where it can be found.\");\n+      return getSupplier(LogVersionRepository.class);\n     }\n+  }\n \n-    TransactionLogFilesContext buildContext() throws IOException\n+  private LongSupplier lastCommittedIdSupplier() throws IOException\n+  {\n+    if (lastCommittedTransactionIdSupplier != null)\n     {\n-        if ( logEntryReader == null )\n-        {\n-            logEntryReader = new VersionAwareLogEntryReader();\n-        }\n-        if ( logFileCreationMonitor == null )\n-        {\n-            logFileCreationMonitor = LogFileCreationMonitor.NO_MONITOR;\n-        }\n-        requireNonNull( fileSystem );\n-        Supplier<LogVersionRepository> logVersionRepositorySupplier = getLogVersionRepositorySupplier();\n-        LongSupplier lastCommittedIdSupplier = lastCommittedIdSupplier();\n-        LongSupplier committingTransactionIdSupplier = committingIdSupplier();\n-\n-        // Register listener for rotation threshold\n-        AtomicLong rotationThreshold = getRotationThresholdAndRegisterForUpdates();\n-\n-        return new TransactionLogFilesContext( rotationThreshold, logEntryReader,\n-                lastCommittedIdSupplier, committingTransactionIdSupplier, logFileCreationMonitor, logVersionRepositorySupplier, fileSystem );\n+      return lastCommittedTransactionIdSupplier;\n     }\n-\n-    private AtomicLong getRotationThresholdAndRegisterForUpdates()\n+    if (transactionIdStore != null)\n     {\n-        if ( rotationThreshold != null )\n-        {\n-            return new AtomicLong( rotationThreshold );\n-        }\n-        if ( readOnly )\n-        {\n-            return new AtomicLong( Long.MAX_VALUE );\n-        }\n-        if ( config == null )\n-        {\n-            config = Config.defaults();\n-        }\n-        AtomicLong configThreshold = new AtomicLong( config.get( logical_log_rotation_threshold ) );\n-        config.registerDynamicUpdateListener( logical_log_rotation_threshold, ( prev, update ) -> configThreshold.set( update ) );\n-        return configThreshold;\n+      return transactionIdStore::getLastCommittedTransactionId;\n     }\n-\n-    private Supplier<LogVersionRepository> getLogVersionRepositorySupplier() throws IOException\n+    if (fileBasedOperationsOnly)\n     {\n-        if ( logVersionRepository != null )\n-        {\n-            return () -> logVersionRepository;\n-        }\n-        if ( fileBasedOperationsOnly )\n-        {\n-            return () ->\n-            {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                    \"operation that require availability of log version repository. Please build full version of log \" +\n-                    \"files. Please build full version of log files to be able to use them.\" );\n-            };\n-        }\n-        if ( readOnly )\n-        {\n-            requireNonNull( pageCache, \"Read only log files require page cache to be able to read current log version.\" );\n-            requireNonNull( storeDirectory,\"Store directory is required.\");\n-            ReadOnlyLogVersionRepository logVersionRepository =\n-                    new ReadOnlyLogVersionRepository( pageCache, storeDirectory );\n-            return () -> logVersionRepository;\n-        }\n-        else\n-        {\n-            requireNonNull( dependencies, LogVersionRepository.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n-            return getSupplier( LogVersionRepository.class );\n-        }\n+      return () ->\n+      {\n+        throw new UnsupportedOperationException(\"Current version of log files can't perform any \" +\n+            \"operation that require availability of transaction id store. Please build full version of log files \" +\n+            \"to be able to use them.\");\n+      };\n     }\n-\n-    private LongSupplier lastCommittedIdSupplier() throws IOException\n+    if (readOnly)\n+    {\n+      requireNonNull(pageCache, \"Read only log files require page cache to be able to read commited \" +\n+          \"transaction info from store store.\");\n+      requireNonNull(storeDirectory, \"Store directory is required.\");\n+      ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore(pageCache, storeDirectory);\n+      return transactionIdStore::getLastCommittedTransactionId;\n+    } else\n     {\n-        if ( lastCommittedTransactionIdSupplier != null )\n-        {\n-            return lastCommittedTransactionIdSupplier;\n-        }\n-        if ( transactionIdStore != null )\n-        {\n-            return transactionIdStore::getLastCommittedTransactionId;\n-        }\n-        if ( fileBasedOperationsOnly )\n-        {\n-            return () ->\n-            {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                        \"operation that require availability of transaction id store. Please build full version of log files \" +\n-                        \"to be able to use them.\" );\n-            };\n-        }\n-        if ( readOnly )\n-        {\n-            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" +\n-                    \"transaction info from store store.\" );\n-            requireNonNull( storeDirectory, \"Store directory is required.\" );\n-            ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDirectory );\n-            return transactionIdStore::getLastCommittedTransactionId;\n-        }\n-        else\n-        {\n-            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n-            return () -> resolveDependency( TransactionIdStore.class ).getLastCommittedTransactionId();\n-        }\n+      requireNonNull(dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n+          \"Please provide an instance or a dependencies where it can be found.\");\n+      return () -> resolveDependency(TransactionIdStore.class).getLastCommittedTransactionId();\n     }\n+  }\n \n-    private LongSupplier committingIdSupplier() throws IOException\n+  private LongSupplier committingIdSupplier() throws IOException\n+  {\n+    if (transactionIdStore != null)\n     {\n-        if ( transactionIdStore != null )\n-        {\n-            return transactionIdStore::committingTransactionId;\n-        }\n-        if ( fileBasedOperationsOnly )\n-        {\n-            return () ->\n-            {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                        \"operation that require availability of transaction id store. Please build full version of log files \" +\n-                        \"to be able to use them.\" );\n-            };\n-        }\n-        if ( readOnly )\n-        {\n-            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" +\n-                    \"transaction info from store store.\" );\n-            requireNonNull( storeDirectory, \"Store directory is required.\" );\n-            ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDirectory );\n-            return transactionIdStore::committingTransactionId;\n-        }\n-        else\n-        {\n-            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n-            return () -> resolveDependency( TransactionIdStore.class ).committingTransactionId();\n-        }\n+      return transactionIdStore::committingTransactionId;\n     }\n-\n-    private <T> Supplier<T> getSupplier( Class<T> clazz )\n+    if (fileBasedOperationsOnly)\n     {\n-        return () -> resolveDependency( clazz );\n+      return () ->\n+      {\n+        throw new UnsupportedOperationException(\"Current version of log files can't perform any \" +\n+            \"operation that require availability of transaction id store. Please build full version of log files \" +\n+            \"to be able to use them.\");\n+      };\n     }\n-\n-    private <T> T resolveDependency( Class<T> clazz )\n+    if (readOnly)\n+    {\n+      requireNonNull(pageCache, \"Read only log files require page cache to be able to read commited \" +\n+          \"transaction info from store store.\");\n+      requireNonNull(storeDirectory, \"Store directory is required.\");\n+      ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore(pageCache, storeDirectory);\n+      return transactionIdStore::committingTransactionId;\n+    } else\n     {\n-        return dependencies.resolveDependency( clazz );\n+      requireNonNull(dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n+          \"Please provide an instance or a dependencies where it can be found.\");\n+      return () -> resolveDependency(TransactionIdStore.class).committingTransactionId();\n     }\n+  }\n+\n+  private <T> Supplier<T> getSupplier(Class<T> clazz)\n+  {\n+    return () -> resolveDependency(clazz);\n+  }\n+\n+  private <T> T resolveDependency(Class<T> clazz)\n+  {\n+    return dependencies.resolveDependency(clazz);\n+  }\n }\n",
            "diff_size": 394
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "273",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 284).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "307",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "320",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "336",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "349",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/715/LogFilesBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/715/LogFilesBuilder.java\nindex feef1625658..8161d6e16ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/715/LogFilesBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/715/LogFilesBuilder.java\n@@ -186,7 +186,8 @@ public class LogFilesBuilder\n         {\n             return logsDirectory;\n         }\n-        if ( config != null )\n+\n+if ( config != null )\n         {\n             File neo4jHome = config.get( GraphDatabaseSettings.neo4j_home );\n             File databasePath = config.get( database_path );\n@@ -195,18 +196,22 @@ public class LogFilesBuilder\n             {\n                 return storeDirectory;\n             }\n-            if ( logicalLogsLocation.isAbsolute() )\n+\n+if ( logicalLogsLocation.isAbsolute() )\n             {\n                 return logicalLogsLocation;\n             }\n-            if ( neo4jHome == null || !storeDirectory.equals( databasePath ) )\n+\n+if ( neo4jHome == null || !storeDirectory.equals( databasePath ) )\n             {\n                 Path relativeLogicalLogPath = databasePath.toPath().relativize( logicalLogsLocation.toPath() );\n                 return new File( storeDirectory, relativeLogicalLogPath.toString() );\n             }\n-            return logicalLogsLocation;\n+\n+return logicalLogsLocation;\n         }\n-        return storeDirectory;\n+\n+return storeDirectory;\n     }\n \n     TransactionLogFilesContext buildContext() throws IOException\n@@ -215,19 +220,20 @@ public class LogFilesBuilder\n         {\n             logEntryReader = new VersionAwareLogEntryReader();\n         }\n-        if ( logFileCreationMonitor == null )\n+\n+if ( logFileCreationMonitor == null )\n         {\n             logFileCreationMonitor = LogFileCreationMonitor.NO_MONITOR;\n         }\n-        requireNonNull( fileSystem );\n+\n+requireNonNull( fileSystem );\n         Supplier<LogVersionRepository> logVersionRepositorySupplier = getLogVersionRepositorySupplier();\n         LongSupplier lastCommittedIdSupplier = lastCommittedIdSupplier();\n         LongSupplier committingTransactionIdSupplier = committingIdSupplier();\n \n         // Register listener for rotation threshold\n         AtomicLong rotationThreshold = getRotationThresholdAndRegisterForUpdates();\n-\n-        return new TransactionLogFilesContext( rotationThreshold, logEntryReader,\n+return new TransactionLogFilesContext( rotationThreshold, logEntryReader,\n                 lastCommittedIdSupplier, committingTransactionIdSupplier, logFileCreationMonitor, logVersionRepositorySupplier, fileSystem );\n     }\n \n@@ -237,15 +243,18 @@ public class LogFilesBuilder\n         {\n             return new AtomicLong( rotationThreshold );\n         }\n-        if ( readOnly )\n+\n+if ( readOnly )\n         {\n             return new AtomicLong( Long.MAX_VALUE );\n         }\n-        if ( config == null )\n+\n+if ( config == null )\n         {\n             config = Config.defaults();\n         }\n-        AtomicLong configThreshold = new AtomicLong( config.get( logical_log_rotation_threshold ) );\n+\n+AtomicLong configThreshold = new AtomicLong( config.get( logical_log_rotation_threshold ) );\n         config.registerDynamicUpdateListener( logical_log_rotation_threshold, ( prev, update ) -> configThreshold.set( update ) );\n         return configThreshold;\n     }\n@@ -256,28 +265,26 @@ public class LogFilesBuilder\n         {\n             return () -> logVersionRepository;\n         }\n-        if ( fileBasedOperationsOnly )\n+\n+if ( fileBasedOperationsOnly )\n         {\n             return () ->\n             {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                    \"operation that require availability of log version repository. Please build full version of log \" +\n-                    \"files. Please build full version of log files to be able to use them.\" );\n-            };\n+                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" + \"operation that require availability of log version repository. Please build full version of log \" + \"files. Please build full version of log files to be able to use them.\" );\n+    };\n         }\n-        if ( readOnly )\n+\n+if ( readOnly )\n         {\n             requireNonNull( pageCache, \"Read only log files require page cache to be able to read current log version.\" );\n-            requireNonNull( storeDirectory,\"Store directory is required.\");\n-            ReadOnlyLogVersionRepository logVersionRepository =\n-                    new ReadOnlyLogVersionRepository( pageCache, storeDirectory );\n-            return () -> logVersionRepository;\n+            requireNonNull( storeDirectory, \"Store directory is required.\");\n+            ReadOnlyLogVersionRepository logVersionRepository = new ReadOnlyLogVersionRepository( pageCache, storeDirectory );\n+return () -> logVersionRepository;\n         }\n         else\n         {\n-            requireNonNull( dependencies, LogVersionRepository.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n-            return getSupplier( LogVersionRepository.class );\n+            requireNonNull( dependencies, LogVersionRepository.class.getSimpleName() + \" is required. \" + \"Please provide an instance or a dependencies where it can be found.\" );\n+return getSupplier( LogVersionRepository.class );\n         }\n     }\n \n@@ -287,32 +294,31 @@ public class LogFilesBuilder\n         {\n             return lastCommittedTransactionIdSupplier;\n         }\n-        if ( transactionIdStore != null )\n+\n+if ( transactionIdStore != null )\n         {\n             return transactionIdStore::getLastCommittedTransactionId;\n         }\n-        if ( fileBasedOperationsOnly )\n+\n+if ( fileBasedOperationsOnly )\n         {\n             return () ->\n             {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                        \"operation that require availability of transaction id store. Please build full version of log files \" +\n-                        \"to be able to use them.\" );\n-            };\n+                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" + \"operation that require availability of transaction id store. Please build full version of log files \" + \"to be able to use them.\" );\n+    };\n         }\n-        if ( readOnly )\n+\n+if ( readOnly )\n         {\n-            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" +\n-                    \"transaction info from store store.\" );\n-            requireNonNull( storeDirectory, \"Store directory is required.\" );\n+            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" + \"transaction info from store store.\" );\n+requireNonNull( storeDirectory, \"Store directory is required.\" );\n             ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDirectory );\n             return transactionIdStore::getLastCommittedTransactionId;\n         }\n         else\n         {\n-            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n-            return () -> resolveDependency( TransactionIdStore.class ).getLastCommittedTransactionId();\n+            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" + \"Please provide an instance or a dependencies where it can be found.\" );\n+return () -> resolveDependency( TransactionIdStore.class ).getLastCommittedTransactionId();\n         }\n     }\n \n@@ -322,28 +328,26 @@ public class LogFilesBuilder\n         {\n             return transactionIdStore::committingTransactionId;\n         }\n-        if ( fileBasedOperationsOnly )\n+\n+if ( fileBasedOperationsOnly )\n         {\n             return () ->\n             {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                        \"operation that require availability of transaction id store. Please build full version of log files \" +\n-                        \"to be able to use them.\" );\n-            };\n+                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" + \"operation that require availability of transaction id store. Please build full version of log files \" + \"to be able to use them.\" );\n+    };\n         }\n-        if ( readOnly )\n+\n+if ( readOnly )\n         {\n-            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" +\n-                    \"transaction info from store store.\" );\n-            requireNonNull( storeDirectory, \"Store directory is required.\" );\n+            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" + \"transaction info from store store.\" );\n+requireNonNull( storeDirectory, \"Store directory is required.\" );\n             ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDirectory );\n             return transactionIdStore::committingTransactionId;\n         }\n         else\n         {\n-            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n-            return () -> resolveDependency( TransactionIdStore.class ).committingTransactionId();\n+            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" + \"Please provide an instance or a dependencies where it can be found.\" );\n+return () -> resolveDependency( TransactionIdStore.class ).committingTransactionId();\n         }\n     }\n \n@@ -356,4 +360,4 @@ public class LogFilesBuilder\n     {\n         return dependencies.resolveDependency( clazz );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "199",
                    "column": "52",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "209",
                    "column": "35",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "276",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 291).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 249).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "323",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "339",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 249).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "352",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/715/LogFilesBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/715/LogFilesBuilder.java\nindex feef1625658..4322078c657 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/715/LogFilesBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/715/LogFilesBuilder.java\n@@ -25,7 +25,6 @@ import java.nio.file.Path;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.function.LongSupplier;\n import java.util.function.Supplier;\n-\n import org.neo4j.graphdb.factory.GraphDatabaseSettings;\n import org.neo4j.io.fs.FileSystemAbstraction;\n import org.neo4j.io.pagecache.PageCache;\n@@ -37,9 +36,10 @@ import org.neo4j.kernel.impl.transaction.log.TransactionIdStore;\n import org.neo4j.kernel.impl.transaction.log.entry.LogEntryReader;\n import org.neo4j.kernel.impl.transaction.log.entry.VersionAwareLogEntryReader;\n import org.neo4j.kernel.impl.util.Dependencies;\n-\n import static java.util.Objects.requireNonNull;\n+\n import static org.neo4j.graphdb.factory.GraphDatabaseSettings.database_path;\n+\n import static org.neo4j.graphdb.factory.GraphDatabaseSettings.logical_log_rotation_threshold;\n \n /**\n@@ -54,6 +54,7 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.logical_log_rotati\n  * For example: provided rotation threshold will\n  * be used in precedence of value that can be specified in provided config.\n  */\n+\n public class LogFilesBuilder\n {\n     private boolean readOnly;\n@@ -78,6 +79,7 @@ public class LogFilesBuilder\n      * @param storeDirectory store directory\n      * @param fileSystem log files filesystem\n      */\n+\n     public static LogFilesBuilder builder( File storeDirectory, FileSystemAbstraction fileSystem )\n     {\n         LogFilesBuilder filesBuilder = new LogFilesBuilder();\n@@ -94,6 +96,7 @@ public class LogFilesBuilder\n      * @param fileSystem log file system\n      * @param pageCache page cache for read only store info access\n      */\n+\n     public static LogFilesBuilder activeFilesBuilder( File storeDirectory, FileSystemAbstraction fileSystem, PageCache pageCache )\n     {\n         LogFilesBuilder builder = builder( storeDirectory, fileSystem );\n@@ -109,6 +112,7 @@ public class LogFilesBuilder\n      * @param logsDirectory log files directory\n      * @param fileSystem file system\n      */\n+\n     public static LogFilesBuilder logFilesBasedOnlyBuilder( File logsDirectory, FileSystemAbstraction fileSystem )\n     {\n         LogFilesBuilder builder = new LogFilesBuilder();\n@@ -186,26 +190,31 @@ public class LogFilesBuilder\n         {\n             return logsDirectory;\n         }\n+\n         if ( config != null )\n         {\n             File neo4jHome = config.get( GraphDatabaseSettings.neo4j_home );\n             File databasePath = config.get( database_path );\n             File logicalLogsLocation = config.get( GraphDatabaseSettings.logical_logs_location );\n-            if ( storeDirectory.equals( neo4jHome ) && databasePath.equals( logicalLogsLocation ) )\n+            if ( storeDirectory.equals( neo4jHome )&& databasePath.equals( logicalLogsLocation ) )\n             {\n                 return storeDirectory;\n             }\n+\n             if ( logicalLogsLocation.isAbsolute() )\n             {\n                 return logicalLogsLocation;\n             }\n-            if ( neo4jHome == null || !storeDirectory.equals( databasePath ) )\n+\n+            if ( neo4jHome == null|| ! storeDirectory.equals( databasePath ) )\n             {\n                 Path relativeLogicalLogPath = databasePath.toPath().relativize( logicalLogsLocation.toPath() );\n                 return new File( storeDirectory, relativeLogicalLogPath.toString() );\n             }\n+\n             return logicalLogsLocation;\n         }\n+\n         return storeDirectory;\n     }\n \n@@ -215,10 +224,12 @@ public class LogFilesBuilder\n         {\n             logEntryReader = new VersionAwareLogEntryReader();\n         }\n+\n         if ( logFileCreationMonitor == null )\n         {\n             logFileCreationMonitor = LogFileCreationMonitor.NO_MONITOR;\n         }\n+\n         requireNonNull( fileSystem );\n         Supplier<LogVersionRepository> logVersionRepositorySupplier = getLogVersionRepositorySupplier();\n         LongSupplier lastCommittedIdSupplier = lastCommittedIdSupplier();\n@@ -226,9 +237,7 @@ public class LogFilesBuilder\n \n         // Register listener for rotation threshold\n         AtomicLong rotationThreshold = getRotationThresholdAndRegisterForUpdates();\n-\n-        return new TransactionLogFilesContext( rotationThreshold, logEntryReader,\n-                lastCommittedIdSupplier, committingTransactionIdSupplier, logFileCreationMonitor, logVersionRepositorySupplier, fileSystem );\n+        return new TransactionLogFilesContext( rotationThreshold, logEntryReader, lastCommittedIdSupplier, committingTransactionIdSupplier, logFileCreationMonitor, logVersionRepositorySupplier, fileSystem );\n     }\n \n     private AtomicLong getRotationThresholdAndRegisterForUpdates()\n@@ -237,14 +246,17 @@ public class LogFilesBuilder\n         {\n             return new AtomicLong( rotationThreshold );\n         }\n+\n         if ( readOnly )\n         {\n             return new AtomicLong( Long.MAX_VALUE );\n         }\n+\n         if ( config == null )\n         {\n             config = Config.defaults();\n         }\n+\n         AtomicLong configThreshold = new AtomicLong( config.get( logical_log_rotation_threshold ) );\n         config.registerDynamicUpdateListener( logical_log_rotation_threshold, ( prev, update ) -> configThreshold.set( update ) );\n         return configThreshold;\n@@ -256,27 +268,25 @@ public class LogFilesBuilder\n         {\n             return () -> logVersionRepository;\n         }\n+\n         if ( fileBasedOperationsOnly )\n         {\n             return () ->\n-            {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                    \"operation that require availability of log version repository. Please build full version of log \" +\n-                    \"files. Please build full version of log files to be able to use them.\" );\n-            };\n+                   {\n+                       throw new UnsupportedOperationException( \"Current version of log files can't perform any \" + \"operation that require availability of log version repository. Please build full version of log \" + \"files. Please build full version of log files to be able to use them.\" );\n+                   };\n         }\n+\n         if ( readOnly )\n         {\n             requireNonNull( pageCache, \"Read only log files require page cache to be able to read current log version.\" );\n-            requireNonNull( storeDirectory,\"Store directory is required.\");\n-            ReadOnlyLogVersionRepository logVersionRepository =\n-                    new ReadOnlyLogVersionRepository( pageCache, storeDirectory );\n+            requireNonNull( storeDirectory, \"Store directory is required.\" );\n+            ReadOnlyLogVersionRepository logVersionRepository = new ReadOnlyLogVersionRepository( pageCache, storeDirectory );\n             return () -> logVersionRepository;\n         }\n         else\n         {\n-            requireNonNull( dependencies, LogVersionRepository.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n+            requireNonNull( dependencies, LogVersionRepository.class.getSimpleName() + \" is required. \" + \"Please provide an instance or a dependencies where it can be found.\" );\n             return getSupplier( LogVersionRepository.class );\n         }\n     }\n@@ -287,31 +297,30 @@ public class LogFilesBuilder\n         {\n             return lastCommittedTransactionIdSupplier;\n         }\n+\n         if ( transactionIdStore != null )\n         {\n             return transactionIdStore::getLastCommittedTransactionId;\n         }\n+\n         if ( fileBasedOperationsOnly )\n         {\n             return () ->\n-            {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                        \"operation that require availability of transaction id store. Please build full version of log files \" +\n-                        \"to be able to use them.\" );\n-            };\n+                   {\n+                       throw new UnsupportedOperationException( \"Current version of log files can't perform any \" + \"operation that require availability of transaction id store. Please build full version of log files \" + \"to be able to use them.\" );\n+                   };\n         }\n+\n         if ( readOnly )\n         {\n-            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" +\n-                    \"transaction info from store store.\" );\n+            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" + \"transaction info from store store.\" );\n             requireNonNull( storeDirectory, \"Store directory is required.\" );\n             ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDirectory );\n             return transactionIdStore::getLastCommittedTransactionId;\n         }\n         else\n         {\n-            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n+            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" + \"Please provide an instance or a dependencies where it can be found.\" );\n             return () -> resolveDependency( TransactionIdStore.class ).getLastCommittedTransactionId();\n         }\n     }\n@@ -322,27 +331,25 @@ public class LogFilesBuilder\n         {\n             return transactionIdStore::committingTransactionId;\n         }\n+\n         if ( fileBasedOperationsOnly )\n         {\n             return () ->\n-            {\n-                throw new UnsupportedOperationException( \"Current version of log files can't perform any \" +\n-                        \"operation that require availability of transaction id store. Please build full version of log files \" +\n-                        \"to be able to use them.\" );\n-            };\n+                   {\n+                       throw new UnsupportedOperationException( \"Current version of log files can't perform any \" + \"operation that require availability of transaction id store. Please build full version of log files \" + \"to be able to use them.\" );\n+                   };\n         }\n+\n         if ( readOnly )\n         {\n-            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" +\n-                    \"transaction info from store store.\" );\n+            requireNonNull( pageCache, \"Read only log files require page cache to be able to read commited \" + \"transaction info from store store.\" );\n             requireNonNull( storeDirectory, \"Store directory is required.\" );\n             ReadOnlyTransactionIdStore transactionIdStore = new ReadOnlyTransactionIdStore( pageCache, storeDirectory );\n             return transactionIdStore::committingTransactionId;\n         }\n         else\n         {\n-            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" +\n-                    \"Please provide an instance or a dependencies where it can be found.\" );\n+            requireNonNull( dependencies, TransactionIdStore.class.getSimpleName() + \" is required. \" + \"Please provide an instance or a dependencies where it can be found.\" );\n             return () -> resolveDependency( TransactionIdStore.class ).committingTransactionId();\n         }\n     }\n@@ -356,4 +363,4 @@ public class LogFilesBuilder\n     {\n         return dependencies.resolveDependency( clazz );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}