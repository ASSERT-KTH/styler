{
    "project_name": "neo4j-neo4j",
    "error_id": "1797",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1797/PropertyTraverser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1797/PropertyTraverser.java\nindex f926871596a..b103f016eae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1797/PropertyTraverser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1797/PropertyTraverser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import java.util.Arrays;\n@@ -35,7 +36,7 @@ public class PropertyTraverser\n {\n     private final PageCursorTracer cursorTracer;\n \n-    public PropertyTraverser( PageCursorTracer cursorTracer )\n+    public PropertyTraverser(PageCursorTracer cursorTracer)\n     {\n         this.cursorTracer = cursorTracer;\n     }\n@@ -45,91 +46,91 @@ public class PropertyTraverser\n      * If none is found and {@code strict} is {@code true} then {@link IllegalStateException} is thrown,\n      * otherwise id value of {@link Record#NO_NEXT_PROPERTY} is returned.\n      *\n-     * @param primitive {@link PrimitiveRecord} which is the owner of the chain.\n-     * @param propertyKey property key token id to look for.\n+     * @param primitive       {@link PrimitiveRecord} which is the owner of the chain.\n+     * @param propertyKey     property key token id to look for.\n      * @param propertyRecords access to records.\n-     * @param strict dictates behavior on property key not found. If {@code true} then {@link IllegalStateException}\n-     * is thrown, otherwise value of {@link Record#NO_NEXT_PROPERTY} is returned.\n+     * @param strict          dictates behavior on property key not found. If {@code true} then {@link IllegalStateException}\n+     *                        is thrown, otherwise value of {@link Record#NO_NEXT_PROPERTY} is returned.\n      * @return property record id containing property with the given {@code propertyKey}, otherwise if\n      * {@code strict} is false value of {@link Record#NO_NEXT_PROPERTY}.\n      */\n-    public long findPropertyRecordContaining( PrimitiveRecord primitive, int propertyKey,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords, boolean strict )\n+    public long findPropertyRecordContaining(PrimitiveRecord primitive, int propertyKey,\n+                                             RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords, boolean strict)\n     {\n         long propertyRecordId = primitive.getNextProp();\n-        while ( !Record.NO_NEXT_PROPERTY.is( propertyRecordId ) )\n+        while (!Record.NO_NEXT_PROPERTY.is(propertyRecordId))\n         {\n             PropertyRecord propertyRecord =\n-                    propertyRecords.getOrLoad( propertyRecordId, primitive, cursorTracer ).forReadingLinkage();\n-            if ( propertyRecord.getPropertyBlock( propertyKey ) != null )\n+              propertyRecords.getOrLoad(propertyRecordId, primitive, cursorTracer).forReadingLinkage();\n+            if (propertyRecord.getPropertyBlock(propertyKey) != null)\n             {\n                 return propertyRecordId;\n             }\n             propertyRecordId = propertyRecord.getNextProp();\n         }\n \n-        if ( strict )\n+        if (strict)\n         {\n-            throw new IllegalStateException( \"No property record in property chain for \" + primitive +\n-                    \" contained property with key \" + propertyKey );\n+            throw new IllegalStateException(\"No property record in property chain for \" + primitive +\n+              \" contained property with key \" + propertyKey);\n         }\n \n         return Record.NO_NEXT_PROPERTY.intValue();\n     }\n \n-    public void getPropertyChain( long nextProp,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n-            Consumer<PropertyBlock> collector )\n+    public void getPropertyChain(long nextProp,\n+                                 RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n+                                 Consumer<PropertyBlock> collector)\n     {\n-        while ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n+        while (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n         {\n-            PropertyRecord propRecord = propertyRecords.getOrLoad( nextProp, null, cursorTracer ).forReadingData();\n-            for ( PropertyBlock propBlock : propRecord )\n+            PropertyRecord propRecord = propertyRecords.getOrLoad(nextProp, null, cursorTracer).forReadingData();\n+            for (PropertyBlock propBlock : propRecord)\n             {\n-                collector.accept( propBlock );\n+                collector.accept(propBlock);\n             }\n             nextProp = propRecord.getNextProp();\n         }\n     }\n \n-    public boolean assertPropertyChain( PrimitiveRecord primitive,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+    public boolean assertPropertyChain(PrimitiveRecord primitive,\n+                                       RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n     {\n         List<PropertyRecord> toCheck = new LinkedList<>();\n         long nextIdToFetch = primitive.getNextProp();\n-        while ( nextIdToFetch != Record.NO_NEXT_PROPERTY.intValue() )\n+        while (nextIdToFetch != Record.NO_NEXT_PROPERTY.intValue())\n         {\n-            PropertyRecord propRecord = propertyRecords.getOrLoad( nextIdToFetch, primitive, cursorTracer ).forReadingLinkage();\n-            toCheck.add( propRecord );\n+            PropertyRecord propRecord = propertyRecords.getOrLoad(nextIdToFetch, primitive, cursorTracer).forReadingLinkage();\n+            toCheck.add(propRecord);\n             assert propRecord.inUse() : primitive + \"->\"\n-                                        + Arrays.toString( toCheck.toArray() );\n+              + Arrays.toString(toCheck.toArray());\n             assert propRecord.size() <= PropertyType.getPayloadSize() : propRecord + \" size \" + propRecord.size();\n             nextIdToFetch = propRecord.getNextProp();\n         }\n-        if ( toCheck.isEmpty() )\n+        if (toCheck.isEmpty())\n         {\n             assert primitive.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive;\n             return true;\n         }\n-        PropertyRecord first = toCheck.get( 0 );\n-        PropertyRecord last = toCheck.get( toCheck.size() - 1 );\n+        PropertyRecord first = toCheck.get(0);\n+        PropertyRecord last = toCheck.get(toCheck.size() - 1);\n         assert first.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : primitive\n-                                                                               + \"->\"\n-                                                                               + Arrays.toString( toCheck.toArray() );\n+          + \"->\"\n+          + Arrays.toString(toCheck.toArray());\n         assert last.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive\n-                                                                          + \"->\"\n-                                                                          + Arrays.toString( toCheck.toArray() );\n+          + \"->\"\n+          + Arrays.toString(toCheck.toArray());\n         PropertyRecord current;\n         PropertyRecord previous = first;\n-        for ( int i = 1; i < toCheck.size(); i++ )\n+        for (int i = 1; i < toCheck.size(); i++)\n         {\n-            current = toCheck.get( i );\n+            current = toCheck.get(i);\n             assert current.getPrevProp() == previous.getId() : primitive\n-                                                               + \"->\"\n-                                                               + Arrays.toString( toCheck.toArray() );\n+              + \"->\"\n+              + Arrays.toString(toCheck.toArray());\n             assert previous.getNextProp() == current.getId() : primitive\n-                                                               + \"->\"\n-                                                               + Arrays.toString( toCheck.toArray() );\n+              + \"->\"\n+              + Arrays.toString(toCheck.toArray());\n             previous = current;\n         }\n         return true;\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}