{
    "project_name": "Activiti-Activiti",
    "error_id": "83",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.delegate;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/83/BpmnMessagePayloadMappingProviderFactory.java\nindex e9d78e83f6f..67251cc5574 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/83/BpmnMessagePayloadMappingProviderFactory.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.delegate;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/83/BpmnMessagePayloadMappingProviderFactory.java\nindex e9d78e83f6f..cb512a8fee4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/83/BpmnMessagePayloadMappingProviderFactory.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.delegate;\n \n import java.util.ArrayList;\n@@ -27,31 +28,31 @@ import org.apache.commons.lang3.StringUtils;\n public class BpmnMessagePayloadMappingProviderFactory implements MessagePayloadMappingProviderFactory {\n \n     @Override\n-    public MessagePayloadMappingProvider create(Event bpmnEvent, \n+    public MessagePayloadMappingProvider create(Event bpmnEvent,\n                                                 MessageEventDefinition messageEventDefinition,\n                                                 ExpressionManager expressionManager) {\n-        \n+\n         List<FieldDeclaration> fieldDeclarations = createFieldDeclarations(messageEventDefinition.getFieldExtensions(),\n-                                                                           expressionManager);\n-        \n+                expressionManager);\n+\n         return new BpmnMessagePayloadMappingProvider(fieldDeclarations);\n     }\n-    \n-    public List<FieldDeclaration> createFieldDeclarations(List<FieldExtension> fieldList, \n+\n+    public List<FieldDeclaration> createFieldDeclarations(List<FieldExtension> fieldList,\n                                                           ExpressionManager expressionManager) {\n         List<FieldDeclaration> fieldDeclarations = new ArrayList<FieldDeclaration>();\n \n         for (FieldExtension fieldExtension : fieldList) {\n-          FieldDeclaration fieldDeclaration = null;\n-          if (StringUtils.isNotEmpty(fieldExtension.getExpression())) {\n-            fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), expressionManager.createExpression(fieldExtension.getExpression()));\n-          } else {\n-            fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), new FixedValue(fieldExtension.getStringValue()));\n-          }\n-\n-          fieldDeclarations.add(fieldDeclaration);\n+            FieldDeclaration fieldDeclaration = null;\n+            if (StringUtils.isNotEmpty(fieldExtension.getExpression())) {\n+                fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), expressionManager.createExpression(fieldExtension.getExpression()));\n+            } else {\n+                fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), new FixedValue(fieldExtension.getStringValue()));\n+            }\n+\n+            fieldDeclarations.add(fieldDeclaration);\n         }\n         return fieldDeclarations;\n-      }    \n+    }\n \n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/83/BpmnMessagePayloadMappingProviderFactory.java\nindex e9d78e83f6f..cc7b777703d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/83/BpmnMessagePayloadMappingProviderFactory.java\n@@ -14,7 +14,6 @@ package org.activiti.engine.impl.delegate;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.activiti.bpmn.model.Event;\n import org.activiti.bpmn.model.FieldExtension;\n import org.activiti.bpmn.model.MessageEventDefinition;\n@@ -24,34 +23,27 @@ import org.activiti.engine.impl.el.ExpressionManager;\n import org.activiti.engine.impl.el.FixedValue;\n import org.apache.commons.lang3.StringUtils;\n \n-public class BpmnMessagePayloadMappingProviderFactory implements MessagePayloadMappingProviderFactory {\n \n-    @Override\n-    public MessagePayloadMappingProvider create(Event bpmnEvent, \n-                                                MessageEventDefinition messageEventDefinition,\n-                                                ExpressionManager expressionManager) {\n-        \n-        List<FieldDeclaration> fieldDeclarations = createFieldDeclarations(messageEventDefinition.getFieldExtensions(),\n-                                                                           expressionManager);\n-        \n-        return new BpmnMessagePayloadMappingProvider(fieldDeclarations);\n-    }\n-    \n-    public List<FieldDeclaration> createFieldDeclarations(List<FieldExtension> fieldList, \n-                                                          ExpressionManager expressionManager) {\n-        List<FieldDeclaration> fieldDeclarations = new ArrayList<FieldDeclaration>();\n+public class BpmnMessagePayloadMappingProviderFactory implements MessagePayloadMappingProviderFactory {\n \n-        for (FieldExtension fieldExtension : fieldList) {\n-          FieldDeclaration fieldDeclaration = null;\n-          if (StringUtils.isNotEmpty(fieldExtension.getExpression())) {\n-            fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), expressionManager.createExpression(fieldExtension.getExpression()));\n-          } else {\n-            fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), new FixedValue(fieldExtension.getStringValue()));\n-          }\n+  @Override\n+  public MessagePayloadMappingProvider create(Event bpmnEvent, MessageEventDefinition messageEventDefinition, ExpressionManager expressionManager) {\n+    List<FieldDeclaration> fieldDeclarations = createFieldDeclarations(messageEventDefinition.getFieldExtensions(),\n+                                                                       expressionManager);\n+    return new BpmnMessagePayloadMappingProvider(fieldDeclarations);\n+  }\n \n-          fieldDeclarations.add(fieldDeclaration);\n+  public List<FieldDeclaration> createFieldDeclarations(List<FieldExtension> fieldList, ExpressionManager expressionManager) {\n+    List<FieldDeclaration> fieldDeclarations = new ArrayList<FieldDeclaration>();\n+    for (FieldExtension fieldExtension : fieldList) {\n+        FieldDeclaration fieldDeclaration = null;\n+        if (StringUtils.isNotEmpty(fieldExtension.getExpression())) {\n+          fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), expressionManager.createExpression(fieldExtension.getExpression()));\n+        } else {\n+          fieldDeclaration = new FieldDeclaration(fieldExtension.getFieldName(), Expression.class.getName(), new FixedValue(fieldExtension.getStringValue()));\n         }\n-        return fieldDeclarations;\n-      }    \n-\n-}\n+        fieldDeclarations.add(fieldDeclaration);\n+    }\n+    return fieldDeclarations;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/83/BpmnMessagePayloadMappingProviderFactory.java\nindex e9d78e83f6f..67251cc5574 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/83/BpmnMessagePayloadMappingProviderFactory.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.delegate;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/83/BpmnMessagePayloadMappingProviderFactory.java\nindex e9d78e83f6f..67251cc5574 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/83/BpmnMessagePayloadMappingProviderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/83/BpmnMessagePayloadMappingProviderFactory.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.delegate;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}