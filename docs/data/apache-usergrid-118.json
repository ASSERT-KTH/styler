{
    "project_name": "apache-usergrid",
    "error_id": "118",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "warning",
                "message": "Use of @author javadoc keyword is prohibited.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * Parser for reading uuid connections from ENTITY_COMPOSITE_DICTIONARIES and DICTIONARY_CONNECTED_ENTITIES type\n *\n * @author tnine\n */\npublic class ConnectionIndexSliceParser implements SliceParser {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "33",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "39",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "38",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "42",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/118/ConnectionIndexSliceParser.java\nindex 33822f51bab..1c8aeb0cdaa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/118/ConnectionIndexSliceParser.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.query.ir.result;\n \n \n@@ -35,8 +36,10 @@ public class ConnectionIndexSliceParser implements SliceParser {\n     private final String connectedEntityType;\n \n \n-    /** @param connectedEntityType Could be null if we want to return all types */\n-    public ConnectionIndexSliceParser( String connectedEntityType ) {\n+    /**\n+     * @param connectedEntityType Could be null if we want to return all types\n+     */\n+    public ConnectionIndexSliceParser(String connectedEntityType) {\n         this.connectedEntityType = connectedEntityType;\n     }\n \n@@ -45,24 +48,24 @@ public class ConnectionIndexSliceParser implements SliceParser {\n      * @see org.apache.usergrid.persistence.query.ir.result.SliceParser#parse(java.nio.ByteBuffer)\n      */\n     @Override\n-    public ScanColumn parse( ByteBuffer buff ) {\n-        DynamicComposite composite = DynamicComposite.fromByteBuffer( buff.duplicate() );\n+    public ScanColumn parse(ByteBuffer buff) {\n+        DynamicComposite composite = DynamicComposite.fromByteBuffer(buff.duplicate());\n \n-        String connectedType = ( String ) composite.get( 1 );\n+        String connectedType = (String) composite.get(1);\n \n \n         //connection type has been defined and it doesn't match, skip it\n-        if ( connectedEntityType != null && !connectedEntityType.equals( connectedType ) ) {\n+        if (connectedEntityType != null && !connectedEntityType.equals(connectedType)) {\n             return null;\n         }\n \n         //we're checking a loopback and it wasn't specified, skip it\n-        if ( ( connectedEntityType != null && !connectedEntityType.equalsIgnoreCase( connectedType ) ) || Schema\n-                .TYPE_CONNECTION.equalsIgnoreCase( connectedType ) ) {\n+        if ((connectedEntityType != null && !connectedEntityType.equalsIgnoreCase(connectedType)) || Schema\n+            .TYPE_CONNECTION.equalsIgnoreCase(connectedType)) {\n             return null;\n         }\n \n-        return new ConnectionColumn( ( UUID ) composite.get( 0 ), connectedType, buff );\n+        return new ConnectionColumn((UUID) composite.get(0), connectedType, buff);\n         //    return composite;\n         //    return null;\n     }\n@@ -73,13 +76,15 @@ public class ConnectionIndexSliceParser implements SliceParser {\n         private final String connectedType;\n \n \n-        public ConnectionColumn( UUID uuid, String connectedType, ByteBuffer column ) {\n-            super( uuid, column );\n+        public ConnectionColumn(UUID uuid, String connectedType, ByteBuffer column) {\n+            super(uuid, column);\n             this.connectedType = connectedType;\n         }\n \n \n-        /** Get the target type from teh column */\n+        /**\n+         * Get the target type from teh column\n+         */\n         public String getTargetType() {\n             return connectedType;\n         }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/118/ConnectionIndexSliceParser.java\nindex 33822f51bab..7bc6538b034 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/118/ConnectionIndexSliceParser.java\n@@ -50,8 +50,7 @@ public class ConnectionIndexSliceParser implements SliceParser {\n \n         String connectedType = ( String ) composite.get( 1 );\n \n-\n-        //connection type has been defined and it doesn't match, skip it\n+//connection type has been defined and it doesn't match, skip it\n         if ( connectedEntityType != null && !connectedEntityType.equals( connectedType ) ) {\n             return null;\n         }\n@@ -59,7 +58,7 @@ public class ConnectionIndexSliceParser implements SliceParser {\n         //we're checking a loopback and it wasn't specified, skip it\n         if ( ( connectedEntityType != null && !connectedEntityType.equalsIgnoreCase( connectedType ) ) || Schema\n                 .TYPE_CONNECTION.equalsIgnoreCase( connectedType ) ) {\n-            return null;\n+    return null;\n         }\n \n         return new ConnectionColumn( ( UUID ) composite.get( 0 ), connectedType, buff );\n@@ -84,4 +83,4 @@ public class ConnectionIndexSliceParser implements SliceParser {\n             return connectedType;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/118/ConnectionIndexSliceParser.java\nindex 33822f51bab..dcb18936627 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/118/ConnectionIndexSliceParser.java\n@@ -19,9 +19,7 @@ package org.apache.usergrid.persistence.query.ir.result;\n \n import java.nio.ByteBuffer;\n import java.util.UUID;\n-\n import org.apache.usergrid.persistence.Schema;\n-\n import me.prettyprint.hector.api.beans.DynamicComposite;\n \n \n@@ -30,12 +28,16 @@ import me.prettyprint.hector.api.beans.DynamicComposite;\n  *\n  * @author tnine\n  */\n+\n+\n public class ConnectionIndexSliceParser implements SliceParser {\n \n     private final String connectedEntityType;\n \n \n     /** @param connectedEntityType Could be null if we want to return all types */\n+\n+\n     public ConnectionIndexSliceParser( String connectedEntityType ) {\n         this.connectedEntityType = connectedEntityType;\n     }\n@@ -44,10 +46,11 @@ public class ConnectionIndexSliceParser implements SliceParser {\n     /* (non-Javadoc)\n      * @see org.apache.usergrid.persistence.query.ir.result.SliceParser#parse(java.nio.ByteBuffer)\n      */\n+\n+\n     @Override\n     public ScanColumn parse( ByteBuffer buff ) {\n         DynamicComposite composite = DynamicComposite.fromByteBuffer( buff.duplicate() );\n-\n         String connectedType = ( String ) composite.get( 1 );\n \n \n@@ -57,11 +60,9 @@ public class ConnectionIndexSliceParser implements SliceParser {\n         }\n \n         //we're checking a loopback and it wasn't specified, skip it\n-        if ( ( connectedEntityType != null && !connectedEntityType.equalsIgnoreCase( connectedType ) ) || Schema\n-                .TYPE_CONNECTION.equalsIgnoreCase( connectedType ) ) {\n+        if ( ( connectedEntityType != null && !connectedEntityType.equalsIgnoreCase( connectedType ) ) || Schema.TYPE_CONNECTION.equalsIgnoreCase( connectedType ) ) {\n             return null;\n         }\n-\n         return new ConnectionColumn( ( UUID ) composite.get( 0 ), connectedType, buff );\n         //    return composite;\n         //    return null;\n@@ -80,8 +81,10 @@ public class ConnectionIndexSliceParser implements SliceParser {\n \n \n         /** Get the target type from teh column */\n+\n+\n         public String getTargetType() {\n             return connectedType;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/118/ConnectionIndexSliceParser.java\nindex 33822f51bab..87856f17598 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/118/ConnectionIndexSliceParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/118/ConnectionIndexSliceParser.java\n@@ -24,7 +24,6 @@ import org.apache.usergrid.persistence.Schema;\n \n import me.prettyprint.hector.api.beans.DynamicComposite;\n \n-\n /**\n  * Parser for reading uuid connections from ENTITY_COMPOSITE_DICTIONARIES and DICTIONARY_CONNECTED_ENTITIES type\n  *\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}