{
    "project_name": "graphfoundation-ongdb",
    "error_id": "933",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/933/NodeLabelRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/933/NodeLabelRange.java\nindex 315d298c36f..abbde6982b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/933/NodeLabelRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/933/NodeLabelRange.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.labelscan;\n \n import org.neo4j.collection.primitive.Primitive;\n@@ -32,127 +33,126 @@ import static org.neo4j.collection.primitive.PrimitiveLongCollections.EMPTY_LONG\n  */\n public class NodeLabelRange\n {\n-    private final long idRange;\n-    private final long[] nodes;\n-    private final long[][] labels;\n+  private final long idRange;\n+  private final long[] nodes;\n+  private final long[][] labels;\n \n-    /**\n-     * @param idRange node id range, e.g. in which id span the nodes are.\n-     * @param labels long[][] where first dimension is relative node id in this range, i.e. 0-rangeSize\n-     * and second the label ids for that node, potentially empty if there are none for that node.\n-     * The first dimension must be the size of the range.\n-     */\n-    public NodeLabelRange( long idRange, long[][] labels )\n-    {\n-        this.idRange = idRange;\n-        this.labels = labels;\n-        int rangeSize = labels.length;\n-        long baseNodeId = idRange * rangeSize;\n+  /**\n+   * @param idRange node id range, e.g. in which id span the nodes are.\n+   * @param labels  long[][] where first dimension is relative node id in this range, i.e. 0-rangeSize\n+   *                and second the label ids for that node, potentially empty if there are none for that node.\n+   *                The first dimension must be the size of the range.\n+   */\n+  public NodeLabelRange(long idRange, long[][] labels)\n+  {\n+    this.idRange = idRange;\n+    this.labels = labels;\n+    int rangeSize = labels.length;\n+    long baseNodeId = idRange * rangeSize;\n \n-        this.nodes = new long[rangeSize];\n-        for ( int i = 0; i < rangeSize; i++ )\n-        {\n-            nodes[i] = baseNodeId + i;\n-        }\n-    }\n-\n-    /**\n-     * @return the range id of this range. This is the base node id divided by range size.\n-     * Example: A store with nodes 1,3,20,22 and a range size of 16 would return ranges:\n-     * - rangeId=0, nodes=1,3\n-     * - rangeId=1, nodes=20,22\n-     */\n-    public long id()\n+    this.nodes = new long[rangeSize];\n+    for (int i = 0; i < rangeSize; i++)\n     {\n-        return idRange;\n+      nodes[i] = baseNodeId + i;\n     }\n+  }\n \n-    /**\n-     * @return node ids in this range, the nodes in this array may or may not have {@link #labels(long) labels}\n-     * attached to it.\n-     */\n-    public long[] nodes()\n-    {\n-        return nodes;\n-    }\n+  /**\n+   * @return the range id of this range. This is the base node id divided by range size.\n+   * Example: A store with nodes 1,3,20,22 and a range size of 16 would return ranges:\n+   * - rangeId=0, nodes=1,3\n+   * - rangeId=1, nodes=20,22\n+   */\n+  public long id()\n+  {\n+    return idRange;\n+  }\n \n-    /**\n-     * Returns the label ids (as longs) for the given node id. The {@code nodeId} must be one of the ids\n-     * from {@link #nodes()}.\n-     *\n-     * @param nodeId the node id to return labels for.\n-     * @return label ids for the given {@code nodeId}.\n-     */\n-    public long[] labels( long nodeId )\n-    {\n-        long firstNodeId = idRange * labels.length;\n-        int index = toIntExact( nodeId - firstNodeId );\n-        assert index >= 0 && index < labels.length : \"nodeId:\" + nodeId + \", idRange:\" + idRange;\n-        return labels[index] != null ? labels[index] : EMPTY_LONG_ARRAY;\n-    }\n+  /**\n+   * @return node ids in this range, the nodes in this array may or may not have {@link #labels(long) labels}\n+   * attached to it.\n+   */\n+  public long[] nodes()\n+  {\n+    return nodes;\n+  }\n+\n+  /**\n+   * Returns the label ids (as longs) for the given node id. The {@code nodeId} must be one of the ids\n+   * from {@link #nodes()}.\n+   *\n+   * @param nodeId the node id to return labels for.\n+   * @return label ids for the given {@code nodeId}.\n+   */\n+  public long[] labels(long nodeId)\n+  {\n+    long firstNodeId = idRange * labels.length;\n+    int index = toIntExact(nodeId - firstNodeId);\n+    assert index >= 0 && index < labels.length : \"nodeId:\" + nodeId + \", idRange:\" + idRange;\n+    return labels[index] != null ? labels[index] : EMPTY_LONG_ARRAY;\n+  }\n \n-    private static String toString( String prefix, long[] nodes, long[][] labels )\n+  private static String toString(String prefix, long[] nodes, long[][] labels)\n+  {\n+    StringBuilder result = new StringBuilder(prefix);\n+    result.append(\"; {\");\n+    for (int i = 0; i < nodes.length; i++)\n     {\n-        StringBuilder result = new StringBuilder( prefix );\n-        result.append( \"; {\" );\n-        for ( int i = 0; i < nodes.length; i++ )\n+      if (i != 0)\n+      {\n+        result.append(\", \");\n+      }\n+      result.append(\"Node[\").append(nodes[i]).append(\"]: Labels[\");\n+      String sep = \"\";\n+      if (labels[i] != null)\n+      {\n+        for (long labelId : labels[i])\n         {\n-            if ( i != 0 )\n-            {\n-                result.append( \", \" );\n-            }\n-            result.append( \"Node[\" ).append( nodes[i] ).append( \"]: Labels[\" );\n-            String sep = \"\";\n-            if ( labels[i] != null )\n-            {\n-                for ( long labelId : labels[i] )\n-                {\n-                    result.append( sep ).append( labelId );\n-                    sep = \", \";\n-                }\n-            }\n-            else\n-            {\n-                result.append( \"null\" );\n-            }\n-            result.append( ']' );\n+          result.append(sep).append(labelId);\n+          sep = \", \";\n         }\n-        return result.append( \"}]\" ).toString();\n+      } else\n+      {\n+        result.append(\"null\");\n+      }\n+      result.append(']');\n     }\n+    return result.append(\"}]\").toString();\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        String rangeString = idRange * labels.length + \"-\" + (idRange + 1) * labels.length;\n-        String prefix = \"NodeLabelRange[idRange=\" + rangeString;\n-        return toString( prefix, nodes, labels );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    String rangeString = idRange * labels.length + \"-\" + (idRange + 1) * labels.length;\n+    String prefix = \"NodeLabelRange[idRange=\" + rangeString;\n+    return toString(prefix, nodes, labels);\n+  }\n \n-    public static void readBitmap( long bitmap, long labelId, PrimitiveLongList[] labelsPerNode )\n+  public static void readBitmap(long bitmap, long labelId, PrimitiveLongList[] labelsPerNode)\n+  {\n+    while (bitmap != 0)\n     {\n-        while ( bitmap != 0 )\n-        {\n-            int relativeNodeId = Long.numberOfTrailingZeros( bitmap );\n-            if ( labelsPerNode[relativeNodeId] == null )\n-            {\n-                labelsPerNode[relativeNodeId] = Primitive.longList();\n-            }\n-            labelsPerNode[relativeNodeId].add( labelId );\n-            bitmap &= bitmap - 1;\n-        }\n+      int relativeNodeId = Long.numberOfTrailingZeros(bitmap);\n+      if (labelsPerNode[relativeNodeId] == null)\n+      {\n+        labelsPerNode[relativeNodeId] = Primitive.longList();\n+      }\n+      labelsPerNode[relativeNodeId].add(labelId);\n+      bitmap &= bitmap - 1;\n     }\n+  }\n \n-    public static long[][] convertState( PrimitiveLongList[] state )\n+  public static long[][] convertState(PrimitiveLongList[] state)\n+  {\n+    long[][] labelIdsByNodeIndex = new long[state.length][];\n+    for (int i = 0; i < state.length; i++)\n     {\n-        long[][] labelIdsByNodeIndex = new long[state.length][];\n-        for ( int i = 0; i < state.length; i++ )\n-        {\n-            PrimitiveLongList labelIdList = state[i];\n-            if ( labelIdList != null )\n-            {\n-                labelIdsByNodeIndex[i] = labelIdList.toArray();\n-            }\n-        }\n-        return labelIdsByNodeIndex;\n+      PrimitiveLongList labelIdList = state[i];\n+      if (labelIdList != null)\n+      {\n+        labelIdsByNodeIndex[i] = labelIdList.toArray();\n+      }\n     }\n+    return labelIdsByNodeIndex;\n+  }\n }\n",
            "diff_size": 142
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/933/NodeLabelRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/933/NodeLabelRange.java\nindex 315d298c36f..30afcf04dfe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/933/NodeLabelRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/933/NodeLabelRange.java\n@@ -48,8 +48,7 @@ public class NodeLabelRange\n         this.labels = labels;\n         int rangeSize = labels.length;\n         long baseNodeId = idRange * rangeSize;\n-\n-        this.nodes = new long[rangeSize];\n+this.nodes = new long[rangeSize];\n         for ( int i = 0; i < rangeSize; i++ )\n         {\n             nodes[i] = baseNodeId + i;\n@@ -117,13 +116,14 @@ public class NodeLabelRange\n             }\n             result.append( ']' );\n         }\n-        return result.append( \"}]\" ).toString();\n+\n+return result.append( \"}]\" ).toString();\n     }\n \n     @Override\n     public String toString()\n     {\n-        String rangeString = idRange * labels.length + \"-\" + (idRange + 1) * labels.length;\n+        String rangeString = idRange * labels.length + \"-\" + (idRange + 1 ) * labels.length;\n         String prefix = \"NodeLabelRange[idRange=\" + rangeString;\n         return toString( prefix, nodes, labels );\n     }\n@@ -137,7 +137,8 @@ public class NodeLabelRange\n             {\n                 labelsPerNode[relativeNodeId] = Primitive.longList();\n             }\n-            labelsPerNode[relativeNodeId].add( labelId );\n+\n+labelsPerNode[relativeNodeId].add( labelId );\n             bitmap &= bitmap - 1;\n         }\n     }\n@@ -155,4 +156,4 @@ public class NodeLabelRange\n         }\n         return labelIdsByNodeIndex;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "34",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "92",
                    "column": "35",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "94",
                    "column": "26",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "94",
                    "column": "50",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "94",
                    "column": "70",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "113",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "37",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "75",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "140",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "140",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/933/NodeLabelRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/933/NodeLabelRange.java\nindex 315d298c36f..2b1aa50f7d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/933/NodeLabelRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/933/NodeLabelRange.java\n@@ -21,8 +21,8 @@ package org.neo4j.kernel.api.labelscan;\n \n import org.neo4j.collection.primitive.Primitive;\n import org.neo4j.collection.primitive.PrimitiveLongList;\n-\n import static java.lang.Math.toIntExact;\n+\n import static org.neo4j.collection.primitive.PrimitiveLongCollections.EMPTY_LONG_ARRAY;\n \n /**\n@@ -30,6 +30,7 @@ import static org.neo4j.collection.primitive.PrimitiveLongCollections.EMPTY_LONG\n  * {@link #nodes() nodes array}, but not all node ids will have corresponding {@link #labels(long) labels},\n  * where an empty long[] will be returned instead.\n  */\n+\n public class NodeLabelRange\n {\n     private final long idRange;\n@@ -42,13 +43,13 @@ public class NodeLabelRange\n      * and second the label ids for that node, potentially empty if there are none for that node.\n      * The first dimension must be the size of the range.\n      */\n+\n     public NodeLabelRange( long idRange, long[][] labels )\n     {\n         this.idRange = idRange;\n         this.labels = labels;\n         int rangeSize = labels.length;\n-        long baseNodeId = idRange * rangeSize;\n-\n+        long baseNodeId = idRange* rangeSize;\n         this.nodes = new long[rangeSize];\n         for ( int i = 0; i < rangeSize; i++ )\n         {\n@@ -62,6 +63,7 @@ public class NodeLabelRange\n      * - rangeId=0, nodes=1,3\n      * - rangeId=1, nodes=20,22\n      */\n+\n     public long id()\n     {\n         return idRange;\n@@ -71,6 +73,7 @@ public class NodeLabelRange\n      * @return node ids in this range, the nodes in this array may or may not have {@link #labels(long) labels}\n      * attached to it.\n      */\n+\n     public long[] nodes()\n     {\n         return nodes;\n@@ -83,12 +86,13 @@ public class NodeLabelRange\n      * @param nodeId the node id to return labels for.\n      * @return label ids for the given {@code nodeId}.\n      */\n+\n     public long[] labels( long nodeId )\n     {\n-        long firstNodeId = idRange * labels.length;\n+        long firstNodeId = idRange* labels.length;\n         int index = toIntExact( nodeId - firstNodeId );\n-        assert index >= 0 && index < labels.length : \"nodeId:\" + nodeId + \", idRange:\" + idRange;\n-        return labels[index] != null ? labels[index] : EMPTY_LONG_ARRAY;\n+        assert index >= 0&& index < labels.length: \"nodeId:\" + nodeId+ \", idRange:\" + idRange;\n+        return labels[ index] != null ? labels[ index] : EMPTY_LONG_ARRAY;\n     }\n \n     private static String toString( String prefix, long[] nodes, long[][] labels )\n@@ -101,11 +105,12 @@ public class NodeLabelRange\n             {\n                 result.append( \", \" );\n             }\n-            result.append( \"Node[\" ).append( nodes[i] ).append( \"]: Labels[\" );\n+\n+            result.append( \"Node[\" ).append( nodes[ i] ).append( \"]: Labels[\" );\n             String sep = \"\";\n-            if ( labels[i] != null )\n+            if ( labels[ i] != null )\n             {\n-                for ( long labelId : labels[i] )\n+                for( long labelId : labels[ i] )\n                 {\n                     result.append( sep ).append( labelId );\n                     sep = \", \";\n@@ -115,29 +120,32 @@ public class NodeLabelRange\n             {\n                 result.append( \"null\" );\n             }\n+\n             result.append( ']' );\n         }\n+\n         return result.append( \"}]\" ).toString();\n     }\n \n     @Override\n     public String toString()\n     {\n-        String rangeString = idRange * labels.length + \"-\" + (idRange + 1) * labels.length;\n+        String rangeString = idRange* labels.length + \"-\" + ( idRange + 1)* labels.length;\n         String prefix = \"NodeLabelRange[idRange=\" + rangeString;\n         return toString( prefix, nodes, labels );\n     }\n \n     public static void readBitmap( long bitmap, long labelId, PrimitiveLongList[] labelsPerNode )\n     {\n-        while ( bitmap != 0 )\n+        while( bitmap != 0)\n         {\n             int relativeNodeId = Long.numberOfTrailingZeros( bitmap );\n-            if ( labelsPerNode[relativeNodeId] == null )\n+            if ( labelsPerNode[ relativeNodeId] == null )\n             {\n                 labelsPerNode[relativeNodeId] = Primitive.longList();\n             }\n-            labelsPerNode[relativeNodeId].add( labelId );\n+\n+            labelsPerNode[ relativeNodeId].add( labelId );\n             bitmap &= bitmap - 1;\n         }\n     }\n@@ -147,12 +155,13 @@ public class NodeLabelRange\n         long[][] labelIdsByNodeIndex = new long[state.length][];\n         for ( int i = 0; i < state.length; i++ )\n         {\n-            PrimitiveLongList labelIdList = state[i];\n+            PrimitiveLongList labelIdList = state[ i];\n             if ( labelIdList != null )\n             {\n                 labelIdsByNodeIndex[i] = labelIdList.toArray();\n             }\n         }\n+\n         return labelIdsByNodeIndex;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}