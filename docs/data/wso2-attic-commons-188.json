{
    "project_name": "wso2-attic-commons",
    "error_id": "188",
    "information": {
        "errors": [
            {
                "line": "128",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    }\n                    \n                    Attr attribute = ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\n                    if (attribute == null) {\n                    \tattribute = document.createAttributeNS(childName.getNamespaceURI(), childName.getLocalPart());\n                    \t((Element) contextNode).setAttributeNode(attribute);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/188/XPath20ExpressionModifier.java\nindex 857c93edcc0..7a55ee8f53d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/188/XPath20ExpressionModifier.java\n@@ -124,8 +124,9 @@ public class XPath20ExpressionModifier {\n                     if (NodeKindTest.ATTRIBUTE.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n                         break;\r\n                     }\r\n-                    \r\n-                    Attr attribute = ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n+\r\n+                    Attr attribute = ((Element) contextNode).getAttributeNodeNS\r\n+                        (childName.getNamespaceURI(), childName.getLocalPart());\r\n                     if (attribute == null) {\r\n                     \tattribute = document.createAttributeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n                     \t((Element) contextNode).setAttributeNode(attribute);\r\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/188/XPath20ExpressionModifier.java\nindex 857c93edcc0..8e93ce077e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/188/XPath20ExpressionModifier.java\n@@ -33,167 +33,166 @@ import org.w3c.dom.NodeList;\n  * to be reusable across the XPath and XQuery runtimes.\r\n  */\r\n public class XPath20ExpressionModifier {\r\n-    private NSContext contextUris;\r\n-    private NamePool namePool;\r\n-\r\n-    /**\r\n-     * Creates a new XPath20ExpressionModifier object.\r\n-     *\r\n-     * @param contextUris \r\n-     * @param namePool \r\n-     */\r\n-    public XPath20ExpressionModifier(NSContext contextUris, NamePool namePool) {\r\n-        this.contextUris = contextUris;\r\n-        this.namePool = namePool;\r\n+  private NSContext contextUris;\r\n+  private NamePool namePool;\r\n+\r\n+  /**\r\n+   * Creates a new XPath20ExpressionModifier object.\r\n+   *\r\n+   * @param contextUris\r\n+   * @param namePool\r\n+   */\r\n+  public XPath20ExpressionModifier(NSContext contextUris, NamePool namePool) {\r\n+    this.contextUris = contextUris;\r\n+    this.namePool = namePool;\r\n+  }\r\n+\r\n+  /**\r\n+   * Insert nodes into the specified XPath expression wherever\r\n+   * required To be precise, an node is added to its parent if:\r\n+   * a) the node is an element...\r\n+   * b) that corresponds to an step...\r\n+   * c) that has a child axis...\r\n+   * d) whose parent had no children with its name...\r\n+   * e) and all preceding steps are element name tests.\r\n+   *\r\n+   * @param xpathExpr\r\n+   * @param namePool\r\n+   * @throws DOMException\r\n+   * @throws TransformerException\r\n+   */\r\n+  @SuppressWarnings(\"unchecked\")\r\n+  public void insertMissingData(XPathExpression xpathExpr, Node contextNode)\r\n+    throws DOMException, TransformerException {\r\n+    if ((contextNode == null) || !(contextNode instanceof Element) ||\r\n+      !(xpathExpr instanceof XPathExpressionImpl)) {\r\n+      return;\r\n     }\r\n \r\n-    /**\r\n-     * Insert nodes into the specified XPath expression wherever\r\n-     * required To be precise, an node is added to its parent if: \r\n-     * a) the node is an element... \r\n-     * b) that corresponds to an step... \r\n-     * c) that has a child axis... \r\n-     * d) whose parent had no children with its name... \r\n-     * e) and all preceding steps are element name tests.\r\n-     *\r\n-     * @param xpathExpr\r\n-     * @param namePool\r\n-     *\r\n-     * @throws DOMException\r\n-     * @throws TransformerException\r\n-     */\r\n-    @SuppressWarnings(\"unchecked\")\r\n-    public void insertMissingData(XPathExpression xpathExpr, Node contextNode)\r\n-        throws DOMException, TransformerException {\r\n-        if ((contextNode == null) || !(contextNode instanceof Element) ||\r\n-                !(xpathExpr instanceof XPathExpressionImpl)) {\r\n-            return;\r\n-        }\r\n+    Expression expression = ((XPathExpressionImpl) xpathExpr).getInternalExpression();\r\n+    Iterator<Expression> subExpressions = (Iterator<Expression>) expression.iterateSubExpressions();\r\n+\r\n+    if (!subExpressions.hasNext()) {\r\n+      return;\r\n+    }\r\n \r\n-        Expression expression = ((XPathExpressionImpl) xpathExpr).getInternalExpression();\r\n-        Iterator<Expression> subExpressions = (Iterator<Expression>) expression.iterateSubExpressions();\r\n+    Expression subExpr = (Expression) subExpressions.next();\r\n \r\n-        if (!subExpressions.hasNext()) {\r\n-            return;\r\n-        }\r\n+    if (!(subExpr instanceof PathExpression)) {\r\n+      return;\r\n+    }\r\n \r\n-        Expression subExpr = (Expression) subExpressions.next();\r\n+    //Document document = DOMUtils.toDOMDocument(contextNode);\r\n+    Document document = contextNode.getOwnerDocument();\r\n+    PathExpression pathExpr = (PathExpression) subExpr;\r\n+    Expression step = pathExpr.getFirstStep();\r\n \r\n-        if (!(subExpr instanceof PathExpression)) {\r\n-            return;\r\n-        }\r\n+    while (step != null) {\r\n+      if (step instanceof AxisExpression) {\r\n+        AxisExpression axisExpr = (AxisExpression) step;\r\n \r\n-        //Document document = DOMUtils.toDOMDocument(contextNode);\r\n-        Document document = contextNode.getOwnerDocument();\r\n-        PathExpression pathExpr = (PathExpression) subExpr;\r\n-        Expression step = pathExpr.getFirstStep();\r\n-\r\n-        while (step != null) {\r\n-            if (step instanceof AxisExpression) {\r\n-                AxisExpression axisExpr = (AxisExpression) step;\r\n-\r\n-                NodeTest nodeTest = axisExpr.getNodeTest();\r\n-\r\n-                if (!(nodeTest instanceof NameTest)) {\r\n-                    break;\r\n-                }\r\n-\r\n-                NameTest nameTest = (NameTest) nodeTest;\r\n-\r\n-                QName childName = getQualifiedName(nameTest.getFingerprint(),\r\n-                        namePool, contextUris);\r\n-                \r\n-                if (Axis.CHILD == axisExpr.getAxis()) {\r\n-                    if (NodeKindTest.ELEMENT.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n-                        break;\r\n-                    }\r\n-                \t\r\n-                    NodeList children = ((Element) contextNode).getElementsByTagNameNS(childName.getNamespaceURI(),\r\n-                            childName.getLocalPart());\r\n-                    if ((children == null) || (children.getLength() == 0)) {\r\n-                        Node child = document.createElementNS(childName.getNamespaceURI(),\r\n-                                DOMUtils.getQualifiedName(childName));\r\n-                        contextNode.appendChild(child);\r\n-                        contextNode = child;\r\n-                    } else if (children.getLength() == 1) {\r\n-                        contextNode = children.item(0);\r\n-                    } else {\r\n-                        break;\r\n-                    }\r\n-                } else if (Axis.ATTRIBUTE == axisExpr.getAxis()) {\r\n-                    if (NodeKindTest.ATTRIBUTE.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n-                        break;\r\n-                    }\r\n-                    \r\n-                    Attr attribute = ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n-                    if (attribute == null) {\r\n-                    \tattribute = document.createAttributeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n-                    \t((Element) contextNode).setAttributeNode(attribute);\r\n-                    \tcontextNode = attribute;\r\n-                    } else {\r\n-                    \tbreak;\r\n-                    }\r\n-                \t\r\n-                } else {\r\n-                \tbreak;\r\n-                }\r\n-\r\n-\r\n-            } else if (step instanceof ItemChecker) {\r\n-                ItemChecker itemChecker = (ItemChecker) step;\r\n-                Expression baseExpr = itemChecker.getBaseExpression();\r\n-\r\n-                if (!(baseExpr instanceof VariableReference)) {\r\n-                    break;\r\n-                }\r\n-            } else {\r\n-                break;\r\n-            }\r\n-\r\n-            if (pathExpr != null) {\r\n-                Expression remainingSteps = pathExpr.getRemainingSteps();\r\n-\r\n-                if (remainingSteps instanceof PathExpression) {\r\n-                    pathExpr = (PathExpression) remainingSteps;\r\n-                    step = pathExpr.getFirstStep();\r\n-                } else if (remainingSteps instanceof AxisExpression) {\r\n-                    pathExpr = null;\r\n-                    step = (AxisExpression) remainingSteps;\r\n-                }\r\n-            } else {\r\n-                break;\r\n-            }\r\n+        NodeTest nodeTest = axisExpr.getNodeTest();\r\n+\r\n+        if (!(nodeTest instanceof NameTest)) {\r\n+          break;\r\n         }\r\n-    }\r\n \r\n-    /**\r\n-     * Create the QName by running the given finger print against the\r\n-     * given context\r\n-     *\r\n-     * @param fingerprint\r\n-     * @param namePool\r\n-     * @param nsContext\r\n-     *\r\n-     * @return The QName corresponding to the finger print\r\n-     */\r\n-    private QName getQualifiedName(int fingerprint, NamePool namePool,\r\n-        NSContext nsContext) {\r\n-        String localName = namePool.getLocalName(fingerprint);\r\n-        String prefix = namePool.getPrefix(fingerprint);\r\n-        String uri = namePool.getURI(fingerprint);\r\n-\r\n-        // Unfortunately, NSContext.getPrefix(String URI) doesn't always work\r\n-        // So, we need to find the prefix for the URI the hard way\r\n-        if ((prefix == null) || \"\".equals(prefix)) {\r\n-            for (String nsPrefix : nsContext.getPrefixes()) {\r\n-                String nsUri = nsContext.getNamespaceURI(nsPrefix);\r\n-\r\n-                if (nsUri.equals(uri)) {\r\n-                    prefix = nsPrefix;\r\n-                }\r\n-            }\r\n+        NameTest nameTest = (NameTest) nodeTest;\r\n+\r\n+        QName childName = getQualifiedName(nameTest.getFingerprint(),\r\n+          namePool, contextUris);\r\n+\r\n+        if (Axis.CHILD == axisExpr.getAxis()) {\r\n+          if (NodeKindTest.ELEMENT.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n+            break;\r\n+          }\r\n+\r\n+          NodeList children = ((Element) contextNode).getElementsByTagNameNS(childName.getNamespaceURI(),\r\n+            childName.getLocalPart());\r\n+          if ((children == null) || (children.getLength() == 0)) {\r\n+            Node child = document.createElementNS(childName.getNamespaceURI(),\r\n+              DOMUtils.getQualifiedName(childName));\r\n+            contextNode.appendChild(child);\r\n+            contextNode = child;\r\n+          } else if (children.getLength() == 1) {\r\n+            contextNode = children.item(0);\r\n+          } else {\r\n+            break;\r\n+          }\r\n+        } else if (Axis.ATTRIBUTE == axisExpr.getAxis()) {\r\n+          if (NodeKindTest.ATTRIBUTE.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n+            break;\r\n+          }\r\n+\r\n+          Attr attribute =\r\n+            ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n+          if (attribute == null) {\r\n+            attribute = document.createAttributeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n+            ((Element) contextNode).setAttributeNode(attribute);\r\n+            contextNode = attribute;\r\n+          } else {\r\n+            break;\r\n+          }\r\n+\r\n+        } else {\r\n+          break;\r\n         }\r\n \r\n-        return new QName(uri, localName, prefix);\r\n+\r\n+      } else if (step instanceof ItemChecker) {\r\n+        ItemChecker itemChecker = (ItemChecker) step;\r\n+        Expression baseExpr = itemChecker.getBaseExpression();\r\n+\r\n+        if (!(baseExpr instanceof VariableReference)) {\r\n+          break;\r\n+        }\r\n+      } else {\r\n+        break;\r\n+      }\r\n+\r\n+      if (pathExpr != null) {\r\n+        Expression remainingSteps = pathExpr.getRemainingSteps();\r\n+\r\n+        if (remainingSteps instanceof PathExpression) {\r\n+          pathExpr = (PathExpression) remainingSteps;\r\n+          step = pathExpr.getFirstStep();\r\n+        } else if (remainingSteps instanceof AxisExpression) {\r\n+          pathExpr = null;\r\n+          step = (AxisExpression) remainingSteps;\r\n+        }\r\n+      } else {\r\n+        break;\r\n+      }\r\n     }\r\n+  }\r\n+\r\n+  /**\r\n+   * Create the QName by running the given finger print against the\r\n+   * given context\r\n+   *\r\n+   * @param fingerprint\r\n+   * @param namePool\r\n+   * @param nsContext\r\n+   * @return The QName corresponding to the finger print\r\n+   */\r\n+  private QName getQualifiedName(int fingerprint, NamePool namePool,\r\n+                                 NSContext nsContext) {\r\n+    String localName = namePool.getLocalName(fingerprint);\r\n+    String prefix = namePool.getPrefix(fingerprint);\r\n+    String uri = namePool.getURI(fingerprint);\r\n+\r\n+    // Unfortunately, NSContext.getPrefix(String URI) doesn't always work\r\n+    // So, we need to find the prefix for the URI the hard way\r\n+    if ((prefix == null) || \"\".equals(prefix)) {\r\n+      for (String nsPrefix : nsContext.getPrefixes()) {\r\n+        String nsUri = nsContext.getNamespaceURI(nsPrefix);\r\n+\r\n+        if (nsUri.equals(uri)) {\r\n+          prefix = nsPrefix;\r\n+        }\r\n+      }\r\n+    }\r\n+\r\n+    return new QName(uri, localName, prefix);\r\n+  }\r\n }\r\n",
            "diff_size": 244
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/188/XPath20ExpressionModifier.java\nindex 857c93edcc0..a5ac2c5c6e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/188/XPath20ExpressionModifier.java\n@@ -103,13 +103,12 @@ public class XPath20ExpressionModifier {\n                 QName childName = getQualifiedName(nameTest.getFingerprint(),\r\n                         namePool, contextUris);\r\n                 \r\n-                if (Axis.CHILD == axisExpr.getAxis()) {\r\n-                    if (NodeKindTest.ELEMENT.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n+                if (Axis.CHILD == axisExpr.getAxis()) {\n+    if (NodeKindTest.ELEMENT.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n                         break;\r\n-                    }\r\n-                \t\r\n-                    NodeList children = ((Element) contextNode).getElementsByTagNameNS(childName.getNamespaceURI(),\r\n-                            childName.getLocalPart());\r\n+                    }\n+\n+NodeList children = ((Element) contextNode).getElementsByTagNameNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n                     if ((children == null) || (children.getLength() == 0)) {\r\n                         Node child = document.createElementNS(childName.getNamespaceURI(),\r\n                                 DOMUtils.getQualifiedName(childName));\r\n@@ -125,21 +124,18 @@ public class XPath20ExpressionModifier {\n                         break;\r\n                     }\r\n                     \r\n-                    Attr attribute = ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n-                    if (attribute == null) {\r\n+                    Attr attribute = ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\n+if (attribute == null) {\r\n                     \tattribute = document.createAttributeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n                     \t((Element) contextNode).setAttributeNode(attribute);\r\n                     \tcontextNode = attribute;\r\n                     } else {\r\n                     \tbreak;\r\n-                    }\r\n-                \t\r\n-                } else {\r\n-                \tbreak;\r\n-                }\r\n-\r\n-\r\n-            } else if (step instanceof ItemChecker) {\r\n+                    }\n+    } else {\n+    break;\n+    }\n+    } else if (step instanceof ItemChecker) {\r\n                 ItemChecker itemChecker = (ItemChecker) step;\r\n                 Expression baseExpr = itemChecker.getBaseExpression();\r\n \r\n@@ -196,4 +192,4 @@ public class XPath20ExpressionModifier {\n \r\n         return new QName(uri, localName, prefix);\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/188/XPath20ExpressionModifier.java\nindex 857c93edcc0..08762774b82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/188/XPath20ExpressionModifier.java\n@@ -124,7 +124,7 @@ public class XPath20ExpressionModifier {\n                     if (NodeKindTest.ATTRIBUTE.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n                         break;\r\n                     }\r\n-                    \r\n+\r\n                     Attr attribute = ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n                     if (attribute == null) {\r\n                     \tattribute = document.createAttributeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/188/XPath20ExpressionModifier.java\nindex 857c93edcc0..7a55ee8f53d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/188/XPath20ExpressionModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/188/XPath20ExpressionModifier.java\n@@ -124,8 +124,9 @@ public class XPath20ExpressionModifier {\n                     if (NodeKindTest.ATTRIBUTE.getNodeKindMask() != nameTest.getNodeKindMask()) {\r\n                         break;\r\n                     }\r\n-                    \r\n-                    Attr attribute = ((Element) contextNode).getAttributeNodeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n+\r\n+                    Attr attribute = ((Element) contextNode).getAttributeNodeNS\r\n+                        (childName.getNamespaceURI(), childName.getLocalPart());\r\n                     if (attribute == null) {\r\n                     \tattribute = document.createAttributeNS(childName.getNamespaceURI(), childName.getLocalPart());\r\n                     \t((Element) contextNode).setAttributeNode(attribute);\r\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}