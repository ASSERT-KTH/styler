{
    "project_name": "CESNET-perun",
    "error_id": "180",
    "information": {
        "errors": [
            {
                "line": "68",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t * @param perunSession perun session\n\t * @param consumerName consumer to get messages for\n\t * @param lastProcessedId id of the last message \n\t * @return List of audit messages\n\t * @throws InternalErrorException When implementation fails\n\t * @throws PrivilegeException When you are not authorized to poll messages",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/180/AuditMessagesManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/180/AuditMessagesManager.java\nindex 1597a16417a..a13a5edf8f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/180/AuditMessagesManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/180/AuditMessagesManager.java\n@@ -15,143 +15,143 @@ import java.util.Map;\n  */\n public interface AuditMessagesManager {\n \n-\tInteger COUNTOFMESSAGES = 100;\n-\n-\t/**\n-\t * Returns 100 newest audit messages from audit log. If there is a less messages than 100,\n-\t * then all of them are returned.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return List of 100 newest audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns exact number of newest audit messages defined by 'count' param (disregarding message IDs).\n-\t * If there is less messages present, then all of them are returned.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count        Count of returned messages.\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all messages with IDs within the range from max(ID) to (max(ID)-count), where number of returned messages\n-\t * is equal or less than 'count' param, because some IDs could be skipped in the sequence.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count Number of IDs to subtract from max(ID)\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tList<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll messages\n-\t */\n-\tList<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId given.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @param lastProcessedId id of the last message \n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll messages\n-\t */\n-\tList<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll events\n-\t */\n-\tList<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @param lastProcessedId id of the last event\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll events\n-\t */\n-\tList<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Creates new auditer consumer with last processed id which equals current auditer log max id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName new name for consumer\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to create auditer consumer\n-\t */\n-\tvoid createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Log arbitrary audit message.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param message      message to be logged\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to log arbitrary message\n-\t */\n-\tvoid log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get all registered auditer consumers as map name(String)=lastProcessedId(Integer).\n-\t *\n-\t * @param perunSession perun session\n-\t * @return Mapping of auditer consumer names to their last processed ID.\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tMap<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Get ID of last (newest) message in audit log (max_id).\n-\t *\n-\t * @param perunSession perun session\n-\t * @return ID of last (newest) message.\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tint getLastMessageId(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Set ID of last processed message for specified consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName    name of consumer\n-\t * @param lastProcessedId id of last processed message in consumer\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to set last processed id\n-\t */\n-\t@Deprecated\n-\tvoid setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get count of all messages in audit log.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return Count of all messages in audit log\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tint getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException;\n+    Integer COUNTOFMESSAGES = 100;\n+\n+    /**\n+     * Returns 100 newest audit messages from audit log. If there is a less messages than 100,\n+     * then all of them are returned.\n+     *\n+     * @param perunSession perun session\n+     * @return List of 100 newest audit messages\n+     * @throws InternalErrorException When implementation fails\n+     */\n+    List<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n+\n+    /**\n+     * Returns exact number of newest audit messages defined by 'count' param (disregarding message IDs).\n+     * If there is less messages present, then all of them are returned.\n+     *\n+     * @param perunSession perun session\n+     * @param count        Count of returned messages.\n+     * @return List of audit messages\n+     * @throws InternalErrorException When implementation fails\n+     */\n+    List<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+    /**\n+     * Returns all messages with IDs within the range from max(ID) to (max(ID)-count), where number of returned messages\n+     * is equal or less than 'count' param, because some IDs could be skipped in the sequence.\n+     *\n+     * @param perunSession perun session\n+     * @param count        Number of IDs to subtract from max(ID)\n+     * @return List of audit messages\n+     * @throws InternalErrorException When implementation fails\n+     */\n+    List<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName consumer to get messages for\n+     * @return List of audit messages\n+     * @throws InternalErrorException When implementation fails\n+     * @throws PrivilegeException     When you are not authorized to poll messages\n+     */\n+    List<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId given.\n+     *\n+     * @param perunSession    perun session\n+     * @param consumerName    consumer to get messages for\n+     * @param lastProcessedId id of the last message\n+     * @return List of audit messages\n+     * @throws InternalErrorException When implementation fails\n+     * @throws PrivilegeException     When you are not authorized to poll messages\n+     */\n+    List<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName consumer to get messages for\n+     * @return List of audit messages\n+     * @throws InternalErrorException When implementation fails\n+     * @throws PrivilegeException     When you are not authorized to poll events\n+     */\n+    List<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n+     *\n+     * @param perunSession    perun session\n+     * @param consumerName    consumer to get messages for\n+     * @param lastProcessedId id of the last event\n+     * @return List of audit messages\n+     * @throws InternalErrorException When implementation fails\n+     * @throws PrivilegeException     When you are not authorized to poll events\n+     */\n+    List<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Creates new auditer consumer with last processed id which equals current auditer log max id.\n+     *\n+     * @param perunSession perun session\n+     * @param consumerName new name for consumer\n+     * @throws InternalErrorException When implementation fails\n+     * @throws PrivilegeException     When you are not authorized to create auditer consumer\n+     */\n+    void createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Log arbitrary audit message.\n+     *\n+     * @param perunSession perun session\n+     * @param message      message to be logged\n+     * @throws InternalErrorException When implementation fails\n+     * @throws PrivilegeException     When you are not authorized to log arbitrary message\n+     */\n+    void log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Get all registered auditer consumers as map name(String)=lastProcessedId(Integer).\n+     *\n+     * @param perunSession perun session\n+     * @return Mapping of auditer consumer names to their last processed ID.\n+     * @throws InternalErrorException When implementation fails\n+     */\n+    Map<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException;\n+\n+    /**\n+     * Get ID of last (newest) message in audit log (max_id).\n+     *\n+     * @param perunSession perun session\n+     * @return ID of last (newest) message.\n+     * @throws InternalErrorException When implementation fails\n+     */\n+    int getLastMessageId(PerunSession perunSession) throws InternalErrorException;\n+\n+    /**\n+     * Set ID of last processed message for specified consumer.\n+     *\n+     * @param perunSession    perun session\n+     * @param consumerName    name of consumer\n+     * @param lastProcessedId id of last processed message in consumer\n+     * @throws InternalErrorException When implementation fails\n+     * @throws PrivilegeException     When you are not authorized to set last processed id\n+     */\n+    @Deprecated\n+    void setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+    /**\n+     * Get count of all messages in audit log.\n+     *\n+     * @param perunSession perun session\n+     * @return Count of all messages in audit log\n+     * @throws InternalErrorException When implementation fails\n+     */\n+    int getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException;\n \n }\n",
            "diff_size": 138
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/180/AuditMessagesManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/180/AuditMessagesManager.java\nindex 1597a16417a..e54f38c837b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/180/AuditMessagesManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/180/AuditMessagesManager.java\n@@ -3,7 +3,6 @@ package cz.metacentrum.perun.core.api;\n import cz.metacentrum.perun.audit.events.AuditEvent;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.core.api.exceptions.PrivilegeException;\n-\n import java.util.List;\n import java.util.Map;\n \n@@ -13,145 +12,172 @@ import java.util.Map;\n  * @author Michal Stava\n  * @author Pavel Zl\u00e1mal\n  */\n+\n+\n public interface AuditMessagesManager {\n \n-\tInteger COUNTOFMESSAGES = 100;\n-\n-\t/**\n-\t * Returns 100 newest audit messages from audit log. If there is a less messages than 100,\n-\t * then all of them are returned.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return List of 100 newest audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns exact number of newest audit messages defined by 'count' param (disregarding message IDs).\n-\t * If there is less messages present, then all of them are returned.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count        Count of returned messages.\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tList<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all messages with IDs within the range from max(ID) to (max(ID)-count), where number of returned messages\n-\t * is equal or less than 'count' param, because some IDs could be skipped in the sequence.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param count Number of IDs to subtract from max(ID)\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tList<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll messages\n-\t */\n-\tList<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId given.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @param lastProcessedId id of the last message \n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll messages\n-\t */\n-\tList<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll events\n-\t */\n-\tList<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName consumer to get messages for\n-\t * @param lastProcessedId id of the last event\n-\t * @return List of audit messages\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to poll events\n-\t */\n-\tList<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Creates new auditer consumer with last processed id which equals current auditer log max id.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName new name for consumer\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to create auditer consumer\n-\t */\n-\tvoid createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Log arbitrary audit message.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param message      message to be logged\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to log arbitrary message\n-\t */\n-\tvoid log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get all registered auditer consumers as map name(String)=lastProcessedId(Integer).\n-\t *\n-\t * @param perunSession perun session\n-\t * @return Mapping of auditer consumer names to their last processed ID.\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tMap<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Get ID of last (newest) message in audit log (max_id).\n-\t *\n-\t * @param perunSession perun session\n-\t * @return ID of last (newest) message.\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tint getLastMessageId(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Set ID of last processed message for specified consumer.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param consumerName    name of consumer\n-\t * @param lastProcessedId id of last processed message in consumer\n-\t * @throws InternalErrorException When implementation fails\n-\t * @throws PrivilegeException When you are not authorized to set last processed id\n-\t */\n-\t@Deprecated\n-\tvoid setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n-\n-\t/**\n-\t * Get count of all messages in audit log.\n-\t *\n-\t * @param perunSession perun session\n-\t * @return Count of all messages in audit log\n-\t * @throws InternalErrorException When implementation fails\n-\t */\n-\tint getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException;\n-\n-}\n+ Integer COUNTOFMESSAGES = 100;\n+\n+ /**\n+  * Returns 100 newest audit messages from audit log. If there is a less messages than 100,\n+  * then all of them are returned.\n+  *\n+  * @param perunSession perun session\n+  * @return List of 100 newest audit messages\n+  * @throws InternalErrorException When implementation fails\n+  */\n+\n+\n+ List<AuditMessage> getMessages(PerunSession perunSession) throws InternalErrorException;\n+\n+ /**\n+  * Returns exact number of newest audit messages defined by 'count' param (disregarding message IDs).\n+  * If there is less messages present, then all of them are returned.\n+  *\n+  * @param perunSession perun session\n+  * @param count        Count of returned messages.\n+  * @return List of audit messages\n+  * @throws InternalErrorException When implementation fails\n+  */\n+\n+\n+ List<AuditMessage> getMessages(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+ /**\n+  * Returns all messages with IDs within the range from max(ID) to (max(ID)-count), where number of returned messages\n+  * is equal or less than 'count' param, because some IDs could be skipped in the sequence.\n+  *\n+  * @param perunSession perun session\n+  * @param count Number of IDs to subtract from max(ID)\n+  * @return List of audit messages\n+  * @throws InternalErrorException When implementation fails\n+  */\n+\n+\n+ List<AuditMessage> getMessagesByCount(PerunSession perunSession, int count) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @return List of audit messages\n+  * @throws InternalErrorException When implementation fails\n+  * @throws PrivilegeException When you are not authorized to poll messages\n+  */\n+\n+\n+ List<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Returns list of <b>AuditMessages</b> from audit log with IDs > lastProcessedId given.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @param lastProcessedId id of the last message \n+  * @return List of audit messages\n+  * @throws InternalErrorException When implementation fails\n+  * @throws PrivilegeException When you are not authorized to poll messages\n+  */\n+\n+\n+ List<AuditMessage> pollConsumerMessages(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @return List of audit messages\n+  * @throws InternalErrorException When implementation fails\n+  * @throws PrivilegeException When you are not authorized to poll events\n+  */\n+\n+\n+ List<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Returns list of <b>AuditEvents</b> from audit log with IDs > lastProcessedId for registered auditer consumer.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName consumer to get messages for\n+  * @param lastProcessedId id of the last event\n+  * @return List of audit messages\n+  * @throws InternalErrorException When implementation fails\n+  * @throws PrivilegeException When you are not authorized to poll events\n+  */\n+\n+\n+ List<AuditEvent> pollConsumerEvents(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Creates new auditer consumer with last processed id which equals current auditer log max id.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName new name for consumer\n+  * @throws InternalErrorException When implementation fails\n+  * @throws PrivilegeException When you are not authorized to create auditer consumer\n+  */\n+\n+\n+ void createAuditerConsumer(PerunSession perunSession, String consumerName) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Log arbitrary audit message.\n+  *\n+  * @param perunSession perun session\n+  * @param message      message to be logged\n+  * @throws InternalErrorException When implementation fails\n+  * @throws PrivilegeException When you are not authorized to log arbitrary message\n+  */\n+\n+\n+ void log(PerunSession perunSession, String message) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Get all registered auditer consumers as map name(String)=lastProcessedId(Integer).\n+  *\n+  * @param perunSession perun session\n+  * @return Mapping of auditer consumer names to their last processed ID.\n+  * @throws InternalErrorException When implementation fails\n+  */\n+\n+\n+ Map<String, Integer> getAllAuditerConsumers(PerunSession perunSession) throws InternalErrorException;\n+\n+ /**\n+  * Get ID of last (newest) message in audit log (max_id).\n+  *\n+  * @param perunSession perun session\n+  * @return ID of last (newest) message.\n+  * @throws InternalErrorException When implementation fails\n+  */\n+\n+\n+ int getLastMessageId(PerunSession perunSession) throws InternalErrorException;\n+\n+ /**\n+  * Set ID of last processed message for specified consumer.\n+  *\n+  * @param perunSession perun session\n+  * @param consumerName    name of consumer\n+  * @param lastProcessedId id of last processed message in consumer\n+  * @throws InternalErrorException When implementation fails\n+  * @throws PrivilegeException When you are not authorized to set last processed id\n+  */\n+\n+ @Deprecated\n+ void setLastProcessedId(PerunSession perunSession, String consumerName, int lastProcessedId) throws InternalErrorException, PrivilegeException;\n+\n+ /**\n+  * Get count of all messages in audit log.\n+  *\n+  * @param perunSession perun session\n+  * @return Count of all messages in audit log\n+  * @throws InternalErrorException When implementation fails\n+  */\n+\n+\n+ int getAuditerMessagesCount(PerunSession perunSession) throws InternalErrorException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 168
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}