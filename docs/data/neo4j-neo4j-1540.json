{
    "project_name": "neo4j-neo4j",
    "error_id": "1540",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "89",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "457",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "513",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1540/PageList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1540/PageList.java\nindex 126c41a502c..595bfd4bc78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1540/PageList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1540/PageList.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.impl.muninn;\n \n import java.io.IOException;\n@@ -50,7 +51,7 @@ import static org.neo4j.util.FeatureToggles.flag;\n  */\n class PageList\n {\n-    private static final boolean forceSlowMemoryClear = flag( PageList.class, \"forceSlowMemoryClear\", false );\n+    private static final boolean forceSlowMemoryClear = flag(PageList.class, \"forceSlowMemoryClear\", false);\n \n     static final int META_DATA_BYTES_PER_PAGE = 32;\n     static final long MAX_PAGES = Integer.MAX_VALUE;\n@@ -85,8 +86,8 @@ class PageList\n     private final long baseAddress;\n     private final long bufferAlignment;\n \n-    PageList( int pageCount, int cachePageSize, MemoryAllocator memoryAllocator, SwapperSet swappers,\n-              long victimPageAddress, long bufferAlignment )\n+    PageList(int pageCount, int cachePageSize, MemoryAllocator memoryAllocator, SwapperSet swappers,\n+             long victimPageAddress, long bufferAlignment)\n     {\n         this.pageCount = pageCount;\n         this.cachePageSize = cachePageSize;\n@@ -94,9 +95,9 @@ class PageList\n         this.swappers = swappers;\n         this.victimPageAddress = victimPageAddress;\n         long bytes = ((long) pageCount) * META_DATA_BYTES_PER_PAGE;\n-        this.baseAddress = memoryAllocator.allocateAligned( bytes, Long.BYTES );\n+        this.baseAddress = memoryAllocator.allocateAligned(bytes, Long.BYTES);\n         this.bufferAlignment = bufferAlignment;\n-        clearMemory( baseAddress, pageCount );\n+        clearMemory(baseAddress, pageCount);\n     }\n \n     /**\n@@ -107,7 +108,7 @@ class PageList\n      *\n      * @param pageList The {@code PageList} instance whose state to copy.\n      */\n-    PageList( PageList pageList )\n+    PageList(PageList pageList)\n     {\n         this.pageCount = pageList.pageCount;\n         this.cachePageSize = pageList.cachePageSize;\n@@ -118,49 +119,48 @@ class PageList\n         this.bufferAlignment = pageList.bufferAlignment;\n     }\n \n-    private void clearMemory( long baseAddress, long pageCount )\n+    private void clearMemory(long baseAddress, long pageCount)\n     {\n         long memcpyChunkSize = UnsafeUtil.pageSize();\n         long metaDataEntriesPerChunk = memcpyChunkSize / META_DATA_BYTES_PER_PAGE;\n-        if ( pageCount < metaDataEntriesPerChunk || forceSlowMemoryClear )\n+        if (pageCount < metaDataEntriesPerChunk || forceSlowMemoryClear)\n         {\n-            clearMemorySimple( baseAddress, pageCount );\n-        }\n-        else\n+            clearMemorySimple(baseAddress, pageCount);\n+        } else\n         {\n-            clearMemoryFast( baseAddress, pageCount, memcpyChunkSize, metaDataEntriesPerChunk );\n+            clearMemoryFast(baseAddress, pageCount, memcpyChunkSize, metaDataEntriesPerChunk);\n         }\n         UnsafeUtil.fullFence(); // Guarantee the visibility of the cleared memory.\n     }\n \n-    private void clearMemorySimple( long baseAddress, long pageCount )\n+    private void clearMemorySimple(long baseAddress, long pageCount)\n     {\n         long address = baseAddress - Long.BYTES;\n         long initialLockWord = OffHeapPageLock.initialLockWordWithExclusiveLock();\n-        for ( long i = 0; i < pageCount; i++ )\n+        for (long i = 0; i < pageCount; i++)\n         {\n-            UnsafeUtil.putLong( address += Long.BYTES, initialLockWord ); // lock word\n-            UnsafeUtil.putLong( address += Long.BYTES, 0 ); // pointer\n-            UnsafeUtil.putLong( address += Long.BYTES, 0 ); // last tx id\n-            UnsafeUtil.putLong( address += Long.BYTES, UNBOUND_PAGE_BINDING );\n+            UnsafeUtil.putLong(address += Long.BYTES, initialLockWord); // lock word\n+            UnsafeUtil.putLong(address += Long.BYTES, 0); // pointer\n+            UnsafeUtil.putLong(address += Long.BYTES, 0); // last tx id\n+            UnsafeUtil.putLong(address += Long.BYTES, UNBOUND_PAGE_BINDING);\n         }\n     }\n \n-    private void clearMemoryFast( long baseAddress, long pageCount, long memcpyChunkSize, long metaDataEntriesPerChunk )\n+    private void clearMemoryFast(long baseAddress, long pageCount, long memcpyChunkSize, long metaDataEntriesPerChunk)\n     {\n         // Initialise one chunk worth of data.\n-        clearMemorySimple( baseAddress, metaDataEntriesPerChunk );\n+        clearMemorySimple(baseAddress, metaDataEntriesPerChunk);\n         // Since all entries contain the same data, we can now copy this chunk over and over.\n         long chunkCopies = pageCount / metaDataEntriesPerChunk - 1;\n         long address = baseAddress + memcpyChunkSize;\n-        for ( int i = 0; i < chunkCopies; i++ )\n+        for (int i = 0; i < chunkCopies; i++)\n         {\n-            UnsafeUtil.copyMemory( baseAddress, address, memcpyChunkSize );\n+            UnsafeUtil.copyMemory(baseAddress, address, memcpyChunkSize);\n             address += memcpyChunkSize;\n         }\n         // Finally fill in the tail.\n         long tailCount = pageCount % metaDataEntriesPerChunk;\n-        clearMemorySimple( address, tailCount );\n+        clearMemorySimple(address, tailCount);\n     }\n \n     /**\n@@ -184,102 +184,102 @@ class PageList\n      * @return A {@code pageRef} which is an opaque, internal and direct pointer to the meta-data of the given memory\n      * page.\n      */\n-    long deref( int pageId )\n+    long deref(int pageId)\n     {\n         //noinspection UnnecessaryLocalVariable\n         long id = pageId; // convert to long to avoid int multiplication\n         return baseAddress + (id * META_DATA_BYTES_PER_PAGE);\n     }\n \n-    int toId( long pageRef )\n+    int toId(long pageRef)\n     {\n         // >> 5 is equivalent to dividing by 32, META_DATA_BYTES_PER_PAGE.\n         return (int) ((pageRef - baseAddress) >> 5);\n     }\n \n-    private long offLastModifiedTransactionId( long pageRef )\n+    private long offLastModifiedTransactionId(long pageRef)\n     {\n         return pageRef + OFFSET_LAST_TX_ID;\n     }\n \n-    private long offLock( long pageRef )\n+    private long offLock(long pageRef)\n     {\n         return pageRef + OFFSET_LOCK_WORD;\n     }\n \n-    private long offAddress( long pageRef )\n+    private long offAddress(long pageRef)\n     {\n         return pageRef + OFFSET_ADDRESS;\n     }\n \n-    private long offPageBinding( long pageRef )\n+    private long offPageBinding(long pageRef)\n     {\n         return pageRef + OFFSET_PAGE_BINDING;\n     }\n \n-    long tryOptimisticReadLock( long pageRef )\n+    long tryOptimisticReadLock(long pageRef)\n     {\n-        return OffHeapPageLock.tryOptimisticReadLock( offLock( pageRef ) );\n+        return OffHeapPageLock.tryOptimisticReadLock(offLock(pageRef));\n     }\n \n-    boolean validateReadLock( long pageRef, long stamp )\n+    boolean validateReadLock(long pageRef, long stamp)\n     {\n-        return OffHeapPageLock.validateReadLock( offLock( pageRef ), stamp );\n+        return OffHeapPageLock.validateReadLock(offLock(pageRef), stamp);\n     }\n \n-    boolean isModified( long pageRef )\n+    boolean isModified(long pageRef)\n     {\n-        return OffHeapPageLock.isModified( offLock( pageRef ) );\n+        return OffHeapPageLock.isModified(offLock(pageRef));\n     }\n \n-    boolean isExclusivelyLocked( long pageRef )\n+    boolean isExclusivelyLocked(long pageRef)\n     {\n-        return OffHeapPageLock.isExclusivelyLocked( offLock( pageRef ) );\n+        return OffHeapPageLock.isExclusivelyLocked(offLock(pageRef));\n     }\n \n-    boolean tryWriteLock( long pageRef )\n+    boolean tryWriteLock(long pageRef)\n     {\n-        return OffHeapPageLock.tryWriteLock( offLock( pageRef ) );\n+        return OffHeapPageLock.tryWriteLock(offLock(pageRef));\n     }\n \n-    void unlockWrite( long pageRef )\n+    void unlockWrite(long pageRef)\n     {\n-        OffHeapPageLock.unlockWrite( offLock( pageRef ) );\n+        OffHeapPageLock.unlockWrite(offLock(pageRef));\n     }\n \n-    long unlockWriteAndTryTakeFlushLock( long pageRef )\n+    long unlockWriteAndTryTakeFlushLock(long pageRef)\n     {\n-        return OffHeapPageLock.unlockWriteAndTryTakeFlushLock( offLock( pageRef ) );\n+        return OffHeapPageLock.unlockWriteAndTryTakeFlushLock(offLock(pageRef));\n     }\n \n-    boolean tryExclusiveLock( long pageRef )\n+    boolean tryExclusiveLock(long pageRef)\n     {\n-        return OffHeapPageLock.tryExclusiveLock( offLock( pageRef ) );\n+        return OffHeapPageLock.tryExclusiveLock(offLock(pageRef));\n     }\n \n-    long unlockExclusive( long pageRef )\n+    long unlockExclusive(long pageRef)\n     {\n-        return OffHeapPageLock.unlockExclusive( offLock( pageRef ) );\n+        return OffHeapPageLock.unlockExclusive(offLock(pageRef));\n     }\n \n-    void unlockExclusiveAndTakeWriteLock( long pageRef )\n+    void unlockExclusiveAndTakeWriteLock(long pageRef)\n     {\n-        OffHeapPageLock.unlockExclusiveAndTakeWriteLock( offLock( pageRef ) );\n+        OffHeapPageLock.unlockExclusiveAndTakeWriteLock(offLock(pageRef));\n     }\n \n-    long tryFlushLock( long pageRef )\n+    long tryFlushLock(long pageRef)\n     {\n-        return OffHeapPageLock.tryFlushLock( offLock( pageRef ) );\n+        return OffHeapPageLock.tryFlushLock(offLock(pageRef));\n     }\n \n-    void unlockFlush( long pageRef, long stamp, boolean success )\n+    void unlockFlush(long pageRef, long stamp, boolean success)\n     {\n-        OffHeapPageLock.unlockFlush( offLock( pageRef ), stamp, success );\n+        OffHeapPageLock.unlockFlush(offLock(pageRef), stamp, success);\n     }\n \n-    void explicitlyMarkPageUnmodifiedUnderExclusiveLock( long pageRef )\n+    void explicitlyMarkPageUnmodifiedUnderExclusiveLock(long pageRef)\n     {\n-        OffHeapPageLock.explicitlyMarkPageUnmodifiedUnderExclusiveLock( offLock( pageRef ) );\n+        OffHeapPageLock.explicitlyMarkPageUnmodifiedUnderExclusiveLock(offLock(pageRef));\n     }\n \n     int getCachePageSize()\n@@ -287,35 +287,35 @@ class PageList\n         return cachePageSize;\n     }\n \n-    long getAddress( long pageRef )\n+    long getAddress(long pageRef)\n     {\n-        return UnsafeUtil.getLong( offAddress( pageRef ) );\n+        return UnsafeUtil.getLong(offAddress(pageRef));\n     }\n \n-    void initBuffer( long pageRef )\n+    void initBuffer(long pageRef)\n     {\n-        if ( getAddress( pageRef ) == 0L )\n+        if (getAddress(pageRef) == 0L)\n         {\n-            long addr = memoryAllocator.allocateAligned( getCachePageSize(), bufferAlignment );\n-            UnsafeUtil.putLong( offAddress( pageRef ), addr );\n+            long addr = memoryAllocator.allocateAligned(getCachePageSize(), bufferAlignment);\n+            UnsafeUtil.putLong(offAddress(pageRef), addr);\n         }\n     }\n \n-    private byte getUsageCounter( long pageRef )\n+    private byte getUsageCounter(long pageRef)\n     {\n-        return (byte) (UnsafeUtil.getLongVolatile( offPageBinding( pageRef ) ) & MASK_USAGE_COUNT);\n+        return (byte) (UnsafeUtil.getLongVolatile(offPageBinding(pageRef)) & MASK_USAGE_COUNT);\n     }\n \n     /**\n      * Increment the usage stamp to at most 4.\n      **/\n-    void incrementUsage( long pageRef )\n+    void incrementUsage(long pageRef)\n     {\n         // This is intentionally left benignly racy for performance.\n-        long address = offPageBinding( pageRef );\n-        long value = UnsafeUtil.getLongVolatile( address );\n+        long address = offPageBinding(pageRef);\n+        long value = UnsafeUtil.getLongVolatile(address);\n         long usage = value & MASK_USAGE_COUNT;\n-        if ( usage < MAX_USAGE_COUNT ) // avoid cache sloshing by not doing a write if counter is already maxed out\n+        if (usage < MAX_USAGE_COUNT) // avoid cache sloshing by not doing a write if counter is already maxed out\n         {\n             long update = value + 1;\n             // Use compareAndSwapLong to only actually store the updated count if nothing else changed\n@@ -323,105 +323,105 @@ class PageList\n             // Those fields are updated under guard of the exclusive lock, but we *might* race with\n             // that here, and in that case we would never want a usage counter update to clobber a page\n             // binding update.\n-            UnsafeUtil.compareAndSwapLong( null, address, value, update );\n+            UnsafeUtil.compareAndSwapLong(null, address, value, update);\n         }\n     }\n \n     /**\n      * Decrement the usage stamp. Returns true if it reaches 0.\n      **/\n-    boolean decrementUsage( long pageRef )\n+    boolean decrementUsage(long pageRef)\n     {\n         // This is intentionally left benignly racy for performance.\n-        long address = offPageBinding( pageRef );\n-        long value = UnsafeUtil.getLongVolatile( address );\n+        long address = offPageBinding(pageRef);\n+        long value = UnsafeUtil.getLongVolatile(address);\n         long usage = value & MASK_USAGE_COUNT;\n-        if ( usage > 0 )\n+        if (usage > 0)\n         {\n             long update = value - 1;\n             // See `incrementUsage` about why we use `compareAndSwapLong`.\n-            UnsafeUtil.compareAndSwapLong( null, address, value, update );\n+            UnsafeUtil.compareAndSwapLong(null, address, value, update);\n         }\n         return usage <= 1;\n     }\n \n-    long getFilePageId( long pageRef )\n+    long getFilePageId(long pageRef)\n     {\n-        long filePageId = UnsafeUtil.getLong( offPageBinding( pageRef ) ) >>> SHIFT_FILE_PAGE_ID;\n+        long filePageId = UnsafeUtil.getLong(offPageBinding(pageRef)) >>> SHIFT_FILE_PAGE_ID;\n         return filePageId == MAX_FILE_PAGE_ID ? PageCursor.UNBOUND_PAGE_ID : filePageId;\n     }\n \n-    private void setFilePageId( long pageRef, long filePageId )\n+    private void setFilePageId(long pageRef, long filePageId)\n     {\n-        if ( filePageId > MAX_FILE_PAGE_ID )\n+        if (filePageId > MAX_FILE_PAGE_ID)\n         {\n             throw new IllegalArgumentException(\n-                    format( \"File page id: %s is bigger then max supported value %s.\", filePageId, MAX_FILE_PAGE_ID ) );\n+              format(\"File page id: %s is bigger then max supported value %s.\", filePageId, MAX_FILE_PAGE_ID));\n         }\n-        long address = offPageBinding( pageRef );\n-        long v = UnsafeUtil.getLong( address );\n+        long address = offPageBinding(pageRef);\n+        long v = UnsafeUtil.getLong(address);\n         filePageId = (filePageId << SHIFT_FILE_PAGE_ID) + (v & MASK_NOT_FILE_PAGE_ID);\n-        UnsafeUtil.putLong( address, filePageId );\n+        UnsafeUtil.putLong(address, filePageId);\n     }\n \n-    long getLastModifiedTxId( long pageRef )\n+    long getLastModifiedTxId(long pageRef)\n     {\n-        return UnsafeUtil.getLongVolatile( offLastModifiedTransactionId( pageRef ) );\n+        return UnsafeUtil.getLongVolatile(offLastModifiedTransactionId(pageRef));\n     }\n \n     /**\n      * @return return last modifier transaction id and resets it to {@link #UNBOUND_LAST_MODIFIED_TX_ID}\n      */\n-    long getAndResetLastModifiedTransactionId( long pageRef )\n+    long getAndResetLastModifiedTransactionId(long pageRef)\n     {\n-        return UnsafeUtil.getAndSetLong( null, offLastModifiedTransactionId( pageRef ), UNBOUND_LAST_MODIFIED_TX_ID );\n+        return UnsafeUtil.getAndSetLong(null, offLastModifiedTransactionId(pageRef), UNBOUND_LAST_MODIFIED_TX_ID);\n     }\n \n-    void setLastModifiedTxId( long pageRef, long modifierTxId )\n+    void setLastModifiedTxId(long pageRef, long modifierTxId)\n     {\n-        UnsafeUtil.compareAndSetMaxLong( null, offLastModifiedTransactionId( pageRef ), modifierTxId );\n+        UnsafeUtil.compareAndSetMaxLong(null, offLastModifiedTransactionId(pageRef), modifierTxId);\n     }\n \n-    int getSwapperId( long pageRef )\n+    int getSwapperId(long pageRef)\n     {\n-        long v = UnsafeUtil.getLong( offPageBinding( pageRef ) ) >>> SHIFT_SWAPPER_ID;\n+        long v = UnsafeUtil.getLong(offPageBinding(pageRef)) >>> SHIFT_SWAPPER_ID;\n         return (int) (v & MASK_SHIFTED_SWAPPER_ID); // 21 bits.\n     }\n \n-    private void setSwapperId( long pageRef, int swapperId )\n+    private void setSwapperId(long pageRef, int swapperId)\n     {\n         swapperId = swapperId << SHIFT_SWAPPER_ID;\n-        long address = offPageBinding( pageRef );\n-        long v = UnsafeUtil.getLong( address ) & MASK_NOT_SWAPPER_ID;\n-        UnsafeUtil.putLong( address, v + swapperId );\n+        long address = offPageBinding(pageRef);\n+        long v = UnsafeUtil.getLong(address) & MASK_NOT_SWAPPER_ID;\n+        UnsafeUtil.putLong(address, v + swapperId);\n     }\n \n-    boolean isLoaded( long pageRef )\n+    boolean isLoaded(long pageRef)\n     {\n-        return getFilePageId( pageRef ) != PageCursor.UNBOUND_PAGE_ID;\n+        return getFilePageId(pageRef) != PageCursor.UNBOUND_PAGE_ID;\n     }\n \n-    boolean isBoundTo( long pageRef, int swapperId, long filePageId )\n+    boolean isBoundTo(long pageRef, int swapperId, long filePageId)\n     {\n-        long address = offPageBinding( pageRef );\n+        long address = offPageBinding(pageRef);\n         long expectedBinding = (filePageId << SHIFT_PARTIAL_FILE_PAGE_ID) + swapperId;\n-        long actualBinding = UnsafeUtil.getLong( address ) >>> SHIFT_SWAPPER_ID;\n+        long actualBinding = UnsafeUtil.getLong(address) >>> SHIFT_SWAPPER_ID;\n         return expectedBinding == actualBinding;\n     }\n \n-    void fault( long pageRef, PageSwapper swapper, int swapperId, long filePageId, PageFaultEvent event )\n-            throws IOException\n+    void fault(long pageRef, PageSwapper swapper, int swapperId, long filePageId, PageFaultEvent event)\n+      throws IOException\n     {\n-        if ( swapper == null )\n+        if (swapper == null)\n         {\n             throw swapperCannotBeNull();\n         }\n-        int currentSwapper = getSwapperId( pageRef );\n-        long currentFilePageId = getFilePageId( pageRef );\n-        if ( filePageId == PageCursor.UNBOUND_PAGE_ID || !isExclusivelyLocked( pageRef )\n-             || currentSwapper != 0 || currentFilePageId != PageCursor.UNBOUND_PAGE_ID )\n+        int currentSwapper = getSwapperId(pageRef);\n+        long currentFilePageId = getFilePageId(pageRef);\n+        if (filePageId == PageCursor.UNBOUND_PAGE_ID || !isExclusivelyLocked(pageRef)\n+          || currentSwapper != 0 || currentFilePageId != PageCursor.UNBOUND_PAGE_ID)\n         {\n-            throw cannotFaultException( pageRef, swapper, swapperId, filePageId, currentSwapper, currentFilePageId );\n+            throw cannotFaultException(pageRef, swapper, swapperId, filePageId, currentSwapper, currentFilePageId);\n         }\n         // Note: It is important that we assign the filePageId before we swap\n         // the page in. If the swapping fails, the page will be considered\n@@ -430,108 +430,107 @@ class PageList\n         // swapping-in has succeeded, the page will not be considered bound to\n         // the file page, so any subsequent thread that finds the page in their\n         // translation table will re-do the page fault.\n-        setFilePageId( pageRef, filePageId ); // Page now considered isLoaded()\n-        long bytesRead = swapper.read( filePageId, getAddress( pageRef ) );\n-        event.addBytesRead( bytesRead );\n-        event.setCachePageId( toId( pageRef ) );\n-        setSwapperId( pageRef, swapperId ); // Page now considered isBoundTo( swapper, filePageId )\n+        setFilePageId(pageRef, filePageId); // Page now considered isLoaded()\n+        long bytesRead = swapper.read(filePageId, getAddress(pageRef));\n+        event.addBytesRead(bytesRead);\n+        event.setCachePageId(toId(pageRef));\n+        setSwapperId(pageRef, swapperId); // Page now considered isBoundTo( swapper, filePageId )\n     }\n \n     private static IllegalArgumentException swapperCannotBeNull()\n     {\n-        return new IllegalArgumentException( \"swapper cannot be null\" );\n+        return new IllegalArgumentException(\"swapper cannot be null\");\n     }\n \n-    private static IllegalStateException cannotFaultException( long pageRef, PageSwapper swapper, int swapperId,\n-                                                               long filePageId, int currentSwapper,\n-                                                               long currentFilePageId )\n+    private static IllegalStateException cannotFaultException(long pageRef, PageSwapper swapper, int swapperId,\n+                                                              long filePageId, int currentSwapper,\n+                                                              long currentFilePageId)\n     {\n         String msg = format(\n-                \"Cannot fault page {filePageId = %s, swapper = %s (swapper id = %s)} into \" +\n-                \"cache page %s. Already bound to {filePageId = \" +\n-                \"%s, swapper id = %s}.\",\n-                filePageId, swapper, swapperId, pageRef, currentFilePageId, currentSwapper );\n-        return new IllegalStateException( msg );\n+          \"Cannot fault page {filePageId = %s, swapper = %s (swapper id = %s)} into \" +\n+            \"cache page %s. Already bound to {filePageId = \" +\n+            \"%s, swapper id = %s}.\",\n+          filePageId, swapper, swapperId, pageRef, currentFilePageId, currentSwapper);\n+        return new IllegalStateException(msg);\n     }\n \n-    boolean tryEvict( long pageRef, EvictionEventOpportunity evictionOpportunity ) throws IOException\n+    boolean tryEvict(long pageRef, EvictionEventOpportunity evictionOpportunity) throws IOException\n     {\n-        if ( tryExclusiveLock( pageRef ) )\n+        if (tryExclusiveLock(pageRef))\n         {\n-            if ( isLoaded( pageRef ) )\n+            if (isLoaded(pageRef))\n             {\n-                try ( EvictionEvent evictionEvent = evictionOpportunity.beginEviction() )\n+                try (EvictionEvent evictionEvent = evictionOpportunity.beginEviction())\n                 {\n-                    evict( pageRef, evictionEvent );\n+                    evict(pageRef, evictionEvent);\n                     return true;\n                 }\n             }\n-            unlockExclusive( pageRef );\n+            unlockExclusive(pageRef);\n         }\n         return false;\n     }\n \n-    private void evict( long pageRef, EvictionEvent evictionEvent ) throws IOException\n+    private void evict(long pageRef, EvictionEvent evictionEvent) throws IOException\n     {\n-        long filePageId = getFilePageId( pageRef );\n-        evictionEvent.setFilePageId( filePageId );\n-        evictionEvent.setCachePageId( pageRef );\n-        int swapperId = getSwapperId( pageRef );\n-        if ( swapperId != 0 )\n+        long filePageId = getFilePageId(pageRef);\n+        evictionEvent.setFilePageId(filePageId);\n+        evictionEvent.setCachePageId(pageRef);\n+        int swapperId = getSwapperId(pageRef);\n+        if (swapperId != 0)\n         {\n             // If the swapper id is non-zero, then the page was not only loaded, but also bound, and possibly modified.\n-            SwapperSet.SwapperMapping swapperMapping = swappers.getAllocation( swapperId );\n-            if ( swapperMapping != null )\n+            SwapperSet.SwapperMapping swapperMapping = swappers.getAllocation(swapperId);\n+            if (swapperMapping != null)\n             {\n                 // The allocation can be null if the file has been unmapped, but there are still pages\n                 // lingering in the cache that were bound to file page in that file.\n                 PageSwapper swapper = swapperMapping.swapper;\n-                evictionEvent.setSwapper( swapper );\n+                evictionEvent.setSwapper(swapper);\n \n-                if ( isModified( pageRef ) )\n+                if (isModified(pageRef))\n                 {\n-                    flushModifiedPage( pageRef, evictionEvent, filePageId, swapper );\n+                    flushModifiedPage(pageRef, evictionEvent, filePageId, swapper);\n                 }\n-                swapper.evicted( filePageId );\n+                swapper.evicted(filePageId);\n             }\n         }\n-        clearBinding( pageRef );\n+        clearBinding(pageRef);\n     }\n \n-    private void flushModifiedPage( long pageRef, EvictionEvent evictionEvent, long filePageId, PageSwapper swapper )\n-            throws IOException\n+    private void flushModifiedPage(long pageRef, EvictionEvent evictionEvent, long filePageId, PageSwapper swapper)\n+      throws IOException\n     {\n-        FlushEvent flushEvent = evictionEvent.flushEventOpportunity().beginFlush( filePageId, pageRef, swapper, 1, 0 );\n+        FlushEvent flushEvent = evictionEvent.flushEventOpportunity().beginFlush(filePageId, pageRef, swapper, 1, 0);\n         try\n         {\n-            long address = getAddress( pageRef );\n-            long bytesWritten = swapper.write( filePageId, address );\n-            explicitlyMarkPageUnmodifiedUnderExclusiveLock( pageRef );\n-            flushEvent.addBytesWritten( bytesWritten );\n-            flushEvent.addPagesFlushed( 1 );\n+            long address = getAddress(pageRef);\n+            long bytesWritten = swapper.write(filePageId, address);\n+            explicitlyMarkPageUnmodifiedUnderExclusiveLock(pageRef);\n+            flushEvent.addBytesWritten(bytesWritten);\n+            flushEvent.addPagesFlushed(1);\n             flushEvent.done();\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            unlockExclusive( pageRef );\n-            flushEvent.done( e );\n-            evictionEvent.threwException( e );\n+            unlockExclusive(pageRef);\n+            flushEvent.done(e);\n+            evictionEvent.threwException(e);\n             throw e;\n         }\n     }\n \n-    private void clearBinding( long pageRef )\n+    private void clearBinding(long pageRef)\n     {\n-        UnsafeUtil.putLong( offPageBinding( pageRef ), UNBOUND_PAGE_BINDING );\n+        UnsafeUtil.putLong(offPageBinding(pageRef), UNBOUND_PAGE_BINDING);\n     }\n \n-    void toString( long pageRef, StringBuilder sb )\n+    void toString(long pageRef, StringBuilder sb)\n     {\n-        sb.append( \"Page[ id = \" ).append( toId( pageRef ) );\n-        sb.append( \", address = \" ).append( getAddress( pageRef ) );\n-        sb.append( \", filePageId = \" ).append( getFilePageId( pageRef ) );\n-        sb.append( \", swapperId = \" ).append( getSwapperId( pageRef ) );\n-        sb.append( \", usageCounter = \" ).append( getUsageCounter( pageRef ) );\n-        sb.append( \" ] \" ).append( OffHeapPageLock.toString( offLock( pageRef ) ) );\n+        sb.append(\"Page[ id = \").append(toId(pageRef));\n+        sb.append(\", address = \").append(getAddress(pageRef));\n+        sb.append(\", filePageId = \").append(getFilePageId(pageRef));\n+        sb.append(\", swapperId = \").append(getSwapperId(pageRef));\n+        sb.append(\", usageCounter = \").append(getUsageCounter(pageRef));\n+        sb.append(\" ] \").append(OffHeapPageLock.toString(offLock(pageRef)));\n     }\n }\n",
            "diff_size": 162
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1540/PageList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1540/PageList.java\nindex 126c41a502c..0942e4b8730 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1540/PageList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1540/PageList.java\n@@ -85,9 +85,8 @@ class PageList\n     private final long baseAddress;\n     private final long bufferAlignment;\n \n-    PageList( int pageCount, int cachePageSize, MemoryAllocator memoryAllocator, SwapperSet swappers,\n-              long victimPageAddress, long bufferAlignment )\n-    {\n+    PageList( int pageCount, int cachePageSize, MemoryAllocator memoryAllocator, SwapperSet swappers, long victimPageAddress, long bufferAlignment )\n+{\n         this.pageCount = pageCount;\n         this.cachePageSize = cachePageSize;\n         this.memoryAllocator = memoryAllocator;\n@@ -442,10 +441,9 @@ class PageList\n         return new IllegalArgumentException( \"swapper cannot be null\" );\n     }\n \n-    private static IllegalStateException cannotFaultException( long pageRef, PageSwapper swapper, int swapperId,\n-                                                               long filePageId, int currentSwapper,\n+    private static IllegalStateException cannotFaultException( long pageRef, PageSwapper swapper, int swapperId, long filePageId, int currentSwapper,\n                                                                long currentFilePageId )\n-    {\n+{\n         String msg = format(\n                 \"Cannot fault page {filePageId = %s, swapper = %s (swapper id = %s)} into \" +\n                 \"cache page %s. Already bound to {filePageId = \" +\n@@ -534,4 +532,4 @@ class PageList\n         sb.append( \", usageCounter = \" ).append( getUsageCounter( pageRef ) );\n         sb.append( \" ] \" ).append( OffHeapPageLock.toString( offLock( pageRef ) ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}