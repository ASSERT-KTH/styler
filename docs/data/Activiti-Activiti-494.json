{
    "project_name": "Activiti-Activiti",
    "error_id": "494",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.persistence.entity;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/494/JobEntityManagerImpl.java\nindex af7515221f5..de7f2c3cdbb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/494/JobEntityManagerImpl.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/494/JobEntityManagerImpl.java\nindex af7515221f5..d290fc426c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/494/JobEntityManagerImpl.java\n@@ -49,14 +49,14 @@ public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> imple\n     @Override\n     public boolean insertJobEntity(JobEntity timerJobEntity) {\n         return doInsert(timerJobEntity,\n-                        true);\n+                true);\n     }\n \n     @Override\n     public void insert(JobEntity jobEntity,\n                        boolean fireCreateEvent) {\n         doInsert(jobEntity,\n-                 fireCreateEvent);\n+                fireCreateEvent);\n     }\n \n     protected boolean doInsert(JobEntity jobEntity,\n@@ -82,7 +82,7 @@ public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> imple\n         }\n \n         super.insert(jobEntity,\n-                     fireCreateEvent);\n+                fireCreateEvent);\n         return true;\n     }\n \n@@ -104,7 +104,7 @@ public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> imple\n     public List<JobEntity> findJobsByTypeAndProcessDefinitionId(String jobTypeTimer,\n                                                                 String id) {\n         return jobDataManager.findJobsByTypeAndProcessDefinitionId(jobTypeTimer,\n-                                                                   id);\n+                id);\n     }\n \n     @Override\n@@ -126,7 +126,7 @@ public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> imple\n     public List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery,\n                                              Page page) {\n         return jobDataManager.findJobsByQueryCriteria(jobQuery,\n-                                                      page);\n+                page);\n     }\n \n     @Override\n@@ -138,7 +138,7 @@ public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> imple\n     public void updateJobTenantIdForDeployment(String deploymentId,\n                                                String newTenantId) {\n         jobDataManager.updateJobTenantIdForDeployment(deploymentId,\n-                                                      newTenantId);\n+                newTenantId);\n     }\n \n     @Override\n@@ -152,7 +152,7 @@ public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> imple\n         // Send event\n         if (getEventDispatcher().isEnabled()) {\n             getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED,\n-                                                                                      this));\n+                    this));\n         }\n     }\n \n@@ -166,7 +166,7 @@ public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> imple\n             }\n         }\n         super.delete(entity,\n-                     fireDeleteEvent);\n+                fireDeleteEvent);\n     }\n \n     /**\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 60.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 8, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 138.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 160.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 174.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/494/JobEntityManagerImpl.java\nindex af7515221f5..ce714fb91fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/494/JobEntityManagerImpl.java\n@@ -18,7 +18,6 @@\n package org.activiti.engine.impl.persistence.entity;\n \n import java.util.List;\n-\n import org.activiti.engine.delegate.event.ActivitiEventType;\n import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;\n import org.activiti.engine.impl.JobQueryImpl;\n@@ -31,173 +30,159 @@ import org.activiti.engine.runtime.Job;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public class JobEntityManagerImpl extends AbstractEntityManager<JobEntity> implements JobEntityManager {\n \n-    protected JobDataManager jobDataManager;\n+  protected JobDataManager jobDataManager;\n \n-    public JobEntityManagerImpl(ProcessEngineConfigurationImpl processEngineConfiguration,\n-                                JobDataManager jobDataManager) {\n-        super(processEngineConfiguration);\n-        this.jobDataManager = jobDataManager;\n-    }\n+  public JobEntityManagerImpl(ProcessEngineConfigurationImpl processEngineConfiguration, JobDataManager jobDataManager) {\n+    super(processEngineConfiguration);\n+    this.jobDataManager = jobDataManager;\n+  }\n \n-    @Override\n-    protected DataManager<JobEntity> getDataManager() {\n-        return jobDataManager;\n-    }\n+  @Override\n+  protected DataManager<JobEntity> getDataManager() {\n+    return jobDataManager;\n+  }\n \n-    @Override\n-    public boolean insertJobEntity(JobEntity timerJobEntity) {\n-        return doInsert(timerJobEntity,\n-                        true);\n-    }\n+  @Override\n+  public boolean insertJobEntity(JobEntity timerJobEntity) {\n+    return doInsert(timerJobEntity, true);\n+  }\n \n-    @Override\n-    public void insert(JobEntity jobEntity,\n-                       boolean fireCreateEvent) {\n-        doInsert(jobEntity,\n-                 fireCreateEvent);\n-    }\n+  @Override\n+  public void insert(JobEntity jobEntity, boolean fireCreateEvent) {\n+    doInsert(jobEntity, fireCreateEvent);\n+  }\n \n-    protected boolean doInsert(JobEntity jobEntity,\n-                               boolean fireCreateEvent) {\n+  protected boolean doInsert(JobEntity jobEntity, boolean fireCreateEvent) {\n         // add link to execution\n-        if (jobEntity.getExecutionId() != null) {\n-            ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n-            if (execution != null) {\n-                execution.getJobs().add(jobEntity);\n+    if (jobEntity.getExecutionId() != null) {\n+      ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n+      if (execution != null) {\n+        execution.getJobs().add(jobEntity);\n \n                 // Inherit tenant if (if applicable)\n-                if (execution.getTenantId() != null) {\n-                    jobEntity.setTenantId(execution.getTenantId());\n-                }\n-\n-                if (isExecutionRelatedEntityCountEnabled(execution)) {\n-                    CountingExecutionEntity countingExecutionEntity = (CountingExecutionEntity) execution;\n-                    countingExecutionEntity.setJobCount(countingExecutionEntity.getJobCount() + 1);\n-                }\n-            } else {\n-                return false;\n-            }\n+        if (execution.getTenantId() != null) {\n+          jobEntity.setTenantId(execution.getTenantId());\n         }\n-\n-        super.insert(jobEntity,\n-                     fireCreateEvent);\n-        return true;\n-    }\n-\n-    public List<JobEntity> findJobsToExecute(Page page) {\n-        return jobDataManager.findJobsToExecute(page);\n-    }\n-\n-    @Override\n-    public List<JobEntity> findJobsByExecutionId(String executionId) {\n-        return jobDataManager.findJobsByExecutionId(executionId);\n-    }\n-\n-    @Override\n-    public List<JobEntity> findJobsByProcessDefinitionId(String processDefinitionId) {\n-        return jobDataManager.findJobsByProcessDefinitionId(processDefinitionId);\n-    }\n-\n-    @Override\n-    public List<JobEntity> findJobsByTypeAndProcessDefinitionId(String jobTypeTimer,\n-                                                                String id) {\n-        return jobDataManager.findJobsByTypeAndProcessDefinitionId(jobTypeTimer,\n-                                                                   id);\n-    }\n-\n-    @Override\n-    public List<JobEntity> findJobsByProcessInstanceId(String processInstanceId) {\n-        return jobDataManager.findJobsByProcessInstanceId(processInstanceId);\n-    }\n-\n-    @Override\n-    public List<JobEntity> findExpiredJobs(Page page) {\n-        return jobDataManager.findExpiredJobs(page);\n-    }\n-\n-    @Override\n-    public void resetExpiredJob(String jobId) {\n-        jobDataManager.resetExpiredJob(jobId);\n-    }\n-\n-    @Override\n-    public List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery,\n-                                             Page page) {\n-        return jobDataManager.findJobsByQueryCriteria(jobQuery,\n-                                                      page);\n-    }\n-\n-    @Override\n-    public long findJobCountByQueryCriteria(JobQueryImpl jobQuery) {\n-        return jobDataManager.findJobCountByQueryCriteria(jobQuery);\n-    }\n-\n-    @Override\n-    public void updateJobTenantIdForDeployment(String deploymentId,\n-                                               String newTenantId) {\n-        jobDataManager.updateJobTenantIdForDeployment(deploymentId,\n-                                                      newTenantId);\n-    }\n-\n-    @Override\n-    public void delete(JobEntity jobEntity) {\n-        super.delete(jobEntity);\n-\n-        deleteExceptionByteArrayRef(jobEntity);\n-\n-        removeExecutionLink(jobEntity);\n+        if (isExecutionRelatedEntityCountEnabled(execution)) {\n+          CountingExecutionEntity countingExecutionEntity = (CountingExecutionEntity) execution;\n+          countingExecutionEntity.setJobCount(countingExecutionEntity.getJobCount() + 1);\n+        }\n+      } else {\n+        return false;\n+      }\n+    }\n+\n+    super.insert(jobEntity, fireCreateEvent);\n+    return true;\n+  }\n+\n+  public List<JobEntity> findJobsToExecute(Page page) {\n+    return jobDataManager.findJobsToExecute(page);\n+  }\n+\n+  @Override\n+  public List<JobEntity> findJobsByExecutionId(String executionId) {\n+    return jobDataManager.findJobsByExecutionId(executionId);\n+  }\n+\n+  @Override\n+  public List<JobEntity> findJobsByProcessDefinitionId(String processDefinitionId) {\n+    return jobDataManager.findJobsByProcessDefinitionId(processDefinitionId);\n+  }\n+\n+  @Override\n+  public List<JobEntity> findJobsByTypeAndProcessDefinitionId(String jobTypeTimer, String id) {\n+    return jobDataManager.findJobsByTypeAndProcessDefinitionId(jobTypeTimer, id);\n+  }\n+\n+  @Override\n+  public List<JobEntity> findJobsByProcessInstanceId(String processInstanceId) {\n+    return jobDataManager.findJobsByProcessInstanceId(processInstanceId);\n+  }\n+\n+  @Override\n+  public List<JobEntity> findExpiredJobs(Page page) {\n+    return jobDataManager.findExpiredJobs(page);\n+  }\n+\n+  @Override\n+  public void resetExpiredJob(String jobId) {\n+    jobDataManager.resetExpiredJob(jobId);\n+  }\n+\n+  @Override\n+  public List<Job> findJobsByQueryCriteria(JobQueryImpl jobQuery, Page page) {\n+    return jobDataManager.findJobsByQueryCriteria(jobQuery, page);\n+  }\n+\n+  @Override\n+  public long findJobCountByQueryCriteria(JobQueryImpl jobQuery) {\n+    return jobDataManager.findJobCountByQueryCriteria(jobQuery);\n+  }\n+\n+  @Override\n+  public void updateJobTenantIdForDeployment(String deploymentId, String newTenantId) {\n+    jobDataManager.updateJobTenantIdForDeployment(deploymentId, newTenantId);\n+  }\n+\n+  @Override\n+  public void delete(JobEntity jobEntity) {\n+    super.delete(jobEntity);\n+    deleteExceptionByteArrayRef(jobEntity);\n+    removeExecutionLink(jobEntity);\n \n         // Send event\n-        if (getEventDispatcher().isEnabled()) {\n-            getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED,\n-                                                                                      this));\n-        }\n+    if (getEventDispatcher().isEnabled()) {\n+      getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED, this));\n     }\n+  }\n \n-    @Override\n-    public void delete(JobEntity entity,\n-                       boolean fireDeleteEvent) {\n-        if (entity.getExecutionId() != null && isExecutionRelatedEntityCountEnabledGlobally()) {\n-            CountingExecutionEntity executionEntity = (CountingExecutionEntity) getExecutionEntityManager().findById(entity.getExecutionId());\n-            if (isExecutionRelatedEntityCountEnabled(executionEntity)) {\n-                executionEntity.setJobCount(executionEntity.getJobCount() - 1);\n-            }\n-        }\n-        super.delete(entity,\n-                     fireDeleteEvent);\n+  @Override\n+  public void delete(JobEntity entity, boolean fireDeleteEvent) {\n+    if (entity.getExecutionId() != null && isExecutionRelatedEntityCountEnabledGlobally()) {\n+      CountingExecutionEntity executionEntity = (CountingExecutionEntity) getExecutionEntityManager().findById(entity.getExecutionId());\n+      if (isExecutionRelatedEntityCountEnabled(executionEntity)) {\n+        executionEntity.setJobCount(executionEntity.getJobCount() - 1);\n+      }\n     }\n \n+    super.delete(entity, fireDeleteEvent);\n+  }\n+\n     /**\n      * Removes the job's execution's reference to this job, if the job has an associated execution.\n      * Subclasses may override to provide custom implementations.\n      */\n-    protected void removeExecutionLink(JobEntity jobEntity) {\n-        if (jobEntity.getExecutionId() != null) {\n-            ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n-            if (execution != null) {\n-                execution.getJobs().remove(jobEntity);\n-            }\n-        }\n+\n+  protected void removeExecutionLink(JobEntity jobEntity) {\n+    if (jobEntity.getExecutionId() != null) {\n+      ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n+      if (execution != null) {\n+        execution.getJobs().remove(jobEntity);\n+      }\n     }\n+  }\n \n     /**\n      * Deletes a the byte array used to store the exception information.  Subclasses may override\n      * to provide custom implementations.\n      */\n-    protected void deleteExceptionByteArrayRef(JobEntity jobEntity) {\n-        ByteArrayRef exceptionByteArrayRef = jobEntity.getExceptionByteArrayRef();\n-        if (exceptionByteArrayRef != null) {\n-            exceptionByteArrayRef.delete();\n-        }\n-    }\n \n-    public JobDataManager getJobDataManager() {\n-        return jobDataManager;\n+  protected void deleteExceptionByteArrayRef(JobEntity jobEntity) {\n+    ByteArrayRef exceptionByteArrayRef = jobEntity.getExceptionByteArrayRef();\n+    if (exceptionByteArrayRef != null) {\n+      exceptionByteArrayRef.delete();\n     }\n+  }\n \n-    public void setJobDataManager(JobDataManager jobDataManager) {\n-        this.jobDataManager = jobDataManager;\n-    }\n-}\n+  public JobDataManager getJobDataManager() {\n+    return jobDataManager;\n+  }\n+\n+  public void setJobDataManager(JobDataManager jobDataManager) {\n+    this.jobDataManager = jobDataManager;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 154
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/494/JobEntityManagerImpl.java\nindex af7515221f5..de7f2c3cdbb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/494/JobEntityManagerImpl.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/494/JobEntityManagerImpl.java\nindex af7515221f5..de7f2c3cdbb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/494/JobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/494/JobEntityManagerImpl.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}