{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2093",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2093/VersionAwareLogEntryReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2093/VersionAwareLogEntryReader.java\nindex 034205fd68f..ad93b32d456 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2093/VersionAwareLogEntryReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2093/VersionAwareLogEntryReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.entry;\n \n import java.io.IOException;\n@@ -38,97 +39,94 @@ import static org.neo4j.kernel.impl.transaction.log.entry.LogEntryVersion.byVers\n  * Version aware implementation of LogEntryReader\n  * Starting with Neo4j version 2.1, log entries are prefixed with a version. This allows for Neo4j instances of\n  * different versions to exchange transaction data, either directly or via logical logs.\n- *\n+ * <p>\n  * Read all about it at {@link LogEntryVersion}.\n  */\n public class VersionAwareLogEntryReader<SOURCE extends ReadableClosablePositionAwareChannel> implements LogEntryReader<SOURCE>\n {\n-    private final CommandReaderFactory commandReaderFactory;\n-    private final InvalidLogEntryHandler invalidLogEntryHandler;\n+  private final CommandReaderFactory commandReaderFactory;\n+  private final InvalidLogEntryHandler invalidLogEntryHandler;\n \n-    public VersionAwareLogEntryReader()\n-    {\n-        this( new RecordStorageCommandReaderFactory(), InvalidLogEntryHandler.STRICT );\n-    }\n+  public VersionAwareLogEntryReader()\n+  {\n+    this(new RecordStorageCommandReaderFactory(), InvalidLogEntryHandler.STRICT);\n+  }\n \n-    public VersionAwareLogEntryReader( CommandReaderFactory commandReaderFactory,\n-            InvalidLogEntryHandler invalidLogEntryHandler )\n-    {\n-        this.commandReaderFactory = commandReaderFactory;\n-        this.invalidLogEntryHandler = invalidLogEntryHandler;\n-    }\n+  public VersionAwareLogEntryReader(CommandReaderFactory commandReaderFactory,\n+                                    InvalidLogEntryHandler invalidLogEntryHandler)\n+  {\n+    this.commandReaderFactory = commandReaderFactory;\n+    this.invalidLogEntryHandler = invalidLogEntryHandler;\n+  }\n \n-    @Override\n-    public LogEntry readLogEntry( SOURCE channel ) throws IOException\n+  @Override\n+  public LogEntry readLogEntry(SOURCE channel) throws IOException\n+  {\n+    try\n     {\n+      LogPositionMarker positionMarker = new LogPositionMarker();\n+      long skipped = 0;\n+      while (true)\n+      {\n+        channel.getCurrentPosition(positionMarker);\n+\n+        byte versionCode = channel.get();\n+        byte typeCode = channel.get();\n+\n+        LogEntryVersion version = null;\n+        LogEntryParser<LogEntry> entryReader;\n+        LogEntry entry;\n         try\n         {\n-            LogPositionMarker positionMarker = new LogPositionMarker();\n-            long skipped = 0;\n-            while ( true )\n+          version = byVersion(versionCode);\n+          entryReader = version.entryParser(typeCode);\n+          entry = entryReader.parse(version, channel, positionMarker, commandReaderFactory);\n+          if (entry != null && skipped > 0)\n+          {\n+            // Take extra care when reading an entry in a bad section. Just because entry reading\n+            // didn't throw exception doesn't mean that it's a sane entry.\n+            if (!logEntryMakesSense(entry))\n             {\n-                channel.getCurrentPosition( positionMarker );\n-\n-                byte versionCode = channel.get();\n-                byte typeCode = channel.get();\n-\n-                LogEntryVersion version = null;\n-                LogEntryParser<LogEntry> entryReader;\n-                LogEntry entry;\n-                try\n-                {\n-                    version = byVersion( versionCode );\n-                    entryReader = version.entryParser( typeCode );\n-                    entry = entryReader.parse( version, channel, positionMarker, commandReaderFactory );\n-                    if ( entry != null && skipped > 0 )\n-                    {\n-                        // Take extra care when reading an entry in a bad section. Just because entry reading\n-                        // didn't throw exception doesn't mean that it's a sane entry.\n-                        if ( !logEntryMakesSense( entry ) )\n-                        {\n-                            throw new IllegalArgumentException( \"Log entry \" + entry + \" which was read after \" +\n-                                    \"a bad section of \" + skipped + \" bytes was read successfully, but \" +\n-                                    \"its contents is unrealistic, so treating as part of bad section\" );\n-                        }\n-                        invalidLogEntryHandler.bytesSkipped( skipped );\n-                        skipped = 0;\n-                    }\n-                }\n-                catch ( ReadPastEndException e )\n-                {   // Make these exceptions slip by straight out to the outer handler\n-                    throw e;\n-                }\n-                catch ( Exception e )\n-                {   // Tag all other exceptions with log position and other useful information\n-                    LogPosition position = positionMarker.newPosition();\n-                    e = withMessage( e, e.getMessage() + \". At position \" + position +\n-                            \" and entry version \" + version );\n-\n-                    if ( channelSupportsPositioning( channel ) &&\n-                            invalidLogEntryHandler.handleInvalidEntry( e, position ) )\n-                    {\n-                        ((PositionableChannel)channel).setCurrentPosition( positionMarker.getByteOffset() + 1 );\n-                        skipped++;\n-                        continue;\n-                    }\n-                    throwIfInstanceOf( e, UnsupportedLogVersionException.class );\n-                    throw new IOException( e );\n-                }\n-\n-                if ( !entryReader.skip() )\n-                {\n-                    return entry;\n-                }\n+              throw new IllegalArgumentException(\"Log entry \" + entry + \" which was read after \" +\n+                  \"a bad section of \" + skipped + \" bytes was read successfully, but \" +\n+                  \"its contents is unrealistic, so treating as part of bad section\");\n             }\n+            invalidLogEntryHandler.bytesSkipped(skipped);\n+            skipped = 0;\n+          }\n+        } catch (ReadPastEndException e)\n+        {   // Make these exceptions slip by straight out to the outer handler\n+          throw e;\n+        } catch (Exception e)\n+        {   // Tag all other exceptions with log position and other useful information\n+          LogPosition position = positionMarker.newPosition();\n+          e = withMessage(e, e.getMessage() + \". At position \" + position +\n+              \" and entry version \" + version);\n+\n+          if (channelSupportsPositioning(channel) &&\n+              invalidLogEntryHandler.handleInvalidEntry(e, position))\n+          {\n+            ((PositionableChannel) channel).setCurrentPosition(positionMarker.getByteOffset() + 1);\n+            skipped++;\n+            continue;\n+          }\n+          throwIfInstanceOf(e, UnsupportedLogVersionException.class);\n+          throw new IOException(e);\n         }\n-        catch ( ReadPastEndException e )\n+\n+        if (!entryReader.skip())\n         {\n-            return null;\n+          return entry;\n         }\n-    }\n-\n-    private boolean channelSupportsPositioning( SOURCE channel )\n+      }\n+    } catch (ReadPastEndException e)\n     {\n-        return channel instanceof PositionableChannel;\n+      return null;\n     }\n+  }\n+\n+  private boolean channelSupportsPositioning(SOURCE channel)\n+  {\n+    return channel instanceof PositionableChannel;\n+  }\n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 253).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "column": "44",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2093/VersionAwareLogEntryReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2093/VersionAwareLogEntryReader.java\nindex 034205fd68f..90f00996170 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2093/VersionAwareLogEntryReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2093/VersionAwareLogEntryReader.java\n@@ -71,8 +71,7 @@ public class VersionAwareLogEntryReader<SOURCE extends ReadableClosablePositionA\n \n                 byte versionCode = channel.get();\n                 byte typeCode = channel.get();\n-\n-                LogEntryVersion version = null;\n+LogEntryVersion version = null;\n                 LogEntryParser<LogEntry> entryReader;\n                 LogEntry entry;\n                 try\n@@ -86,32 +85,30 @@ public class VersionAwareLogEntryReader<SOURCE extends ReadableClosablePositionA\n                         // didn't throw exception doesn't mean that it's a sane entry.\n                         if ( !logEntryMakesSense( entry ) )\n                         {\n-                            throw new IllegalArgumentException( \"Log entry \" + entry + \" which was read after \" +\n-                                    \"a bad section of \" + skipped + \" bytes was read successfully, but \" +\n-                                    \"its contents is unrealistic, so treating as part of bad section\" );\n+                            throw new IllegalArgumentException( \"Log entry \" + entry + \" which was read after \" + \"a bad section of \" + skipped + \" bytes was read successfully, but \" + \"its contents is unrealistic, so treating as part of bad section\" );\n                         }\n                         invalidLogEntryHandler.bytesSkipped( skipped );\n                         skipped = 0;\n                     }\n                 }\n                 catch ( ReadPastEndException e )\n-                {   // Make these exceptions slip by straight out to the outer handler\n+                {\n+    // Make these exceptions slip by straight out to the outer handler\n                     throw e;\n                 }\n                 catch ( Exception e )\n-                {   // Tag all other exceptions with log position and other useful information\n+                {\n+    // Tag all other exceptions with log position and other useful information\n                     LogPosition position = positionMarker.newPosition();\n-                    e = withMessage( e, e.getMessage() + \". At position \" + position +\n-                            \" and entry version \" + version );\n-\n-                    if ( channelSupportsPositioning( channel ) &&\n-                            invalidLogEntryHandler.handleInvalidEntry( e, position ) )\n-                    {\n-                        ((PositionableChannel)channel).setCurrentPosition( positionMarker.getByteOffset() + 1 );\n+                    e = withMessage( e, e.getMessage() + \". At position \" + position + \" and entry version \" + version );\n+if ( channelSupportsPositioning( channel ) &&invalidLogEntryHandler.handleInvalidEntry( e, position ) )\n+{\n+                        ((PositionableChannel) channel).setCurrentPosition( positionMarker.getByteOffset() + 1 );\n                         skipped++;\n                         continue;\n                     }\n-                    throwIfInstanceOf( e, UnsupportedLogVersionException.class );\n+\n+throwIfInstanceOf( e, UnsupportedLogVersionException.class );\n                     throw new IOException( e );\n                 }\n \n@@ -131,4 +128,4 @@ public class VersionAwareLogEntryReader<SOURCE extends ReadableClosablePositionA\n     {\n         return channel instanceof PositionableChannel;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}