{
    "project_name": "Angel-ML-angel",
    "error_id": "608",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/608/LongLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/608/LongLongVectorStorage.java\nindex 5d836b1e86a..283ec35c22e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/608/LongLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/608/LongLongVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.storage;\n \n import com.tencent.angel.common.ByteBufSerdeUtils;\n@@ -85,14 +84,11 @@ public class LongLongVectorStorage extends LongLongStorage {\n       case T_LONG_SPARSE_LONGKEY:\n         updateUseLongLongSparse(buf, op);\n         break;\n-\n-      case T_INT_SPARSE_LONGKEY:\n+  case T_INT_SPARSE_LONGKEY:\n         updateUseLongIntSparse(buf, op);\n         break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n   }\n@@ -219,8 +215,7 @@ public class LongLongVectorStorage extends LongLongStorage {\n         }\n       }\n       break;\n-\n-      default:\n+  default:\n         throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n     }\n   }\n@@ -261,7 +256,7 @@ public class LongLongVectorStorage extends LongLongStorage {\n       return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(),\n           vector.getStorage().getIndices(),\n           vector.getStorage().getValues()), indexOffset);\n-    } else {\n+  } else {\n       return this;\n     }\n   }\n@@ -282,4 +277,4 @@ public class LongLongVectorStorage extends LongLongStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "259",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/608/LongLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/608/LongLongVectorStorage.java\nindex 5d836b1e86a..068ffa98d05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/608/LongLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/608/LongLongVectorStorage.java\n@@ -33,12 +33,14 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * A long key long value storage: use a LongVector as storage\n  */\n+\n public class LongLongVectorStorage extends LongLongStorage {\n \n   /**\n    * A vector storage: it can be LongLongVector or IntLongVector and can use DENSE,SPARSE and SORTED\n    * storage type\n    */\n+\n   private LongLongVector vector;\n \n   public LongLongVectorStorage(LongLongVector vector, long indexOffset) {\n@@ -59,7 +61,8 @@ public class LongLongVectorStorage extends LongLongStorage {\n   }\n \n   @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (func != null) {\n       if (keyType == KeyType.INT) {\n         throw new UnsupportedOperationException(\"Only support long index for Long key storage\");\n@@ -80,24 +83,22 @@ public class LongLongVectorStorage extends LongLongStorage {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     switch (updateType) {\n       case T_LONG_SPARSE_LONGKEY:\n         updateUseLongLongSparse(buf, op);\n         break;\n-\n       case T_INT_SPARSE_LONGKEY:\n         updateUseLongIntSparse(buf, op);\n         break;\n-\n       default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n+\n     }\n   }\n \n-\n   private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n     int size = ByteBufSerdeUtils.deserializeInt(buf);\n     if (op == UpdateOp.PLUS) {\n@@ -144,7 +145,6 @@ public class LongLongVectorStorage extends LongLongStorage {\n     for (int i = 0; i < indices.length; i++) {\n       values[i] = get(indices[i]);\n     }\n-\n     return values;\n   }\n \n@@ -210,16 +210,14 @@ public class LongLongVectorStorage extends LongLongStorage {\n     switch (method) {\n       case SPARSE: {\n         // Attention: Only update exist element\n-        ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage()\n-            .entryIterator();\n+        ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage().entryIterator();\n         Long2LongMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n           entry.setValue(func.update());\n         }\n       }\n-      break;\n-\n+                   break;\n       default:\n         throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n     }\n@@ -258,9 +256,7 @@ public class LongLongVectorStorage extends LongLongStorage {\n   @Override\n   public LongLongVectorStorage adaptiveClone() {\n     if (isSparse()) {\n-      return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(),\n-          vector.getStorage().getIndices(),\n-          vector.getStorage().getValues()), indexOffset);\n+      return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(), vector.getStorage().getIndices(), vector.getStorage().getValues()), indexOffset);\n     } else {\n       return this;\n     }\n@@ -282,4 +278,5 @@ public class LongLongVectorStorage extends LongLongStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}