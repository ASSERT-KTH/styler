{
    "project_name": "IQSS-dataverse",
    "error_id": "114",
    "information": {
        "errors": [
            {
                "line": "219",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    }\n\n\tpublic boolean hasStorageIdentifier() {\n\t\treturn ((storageIdentifier!=null)&&(!storageIdentifier.isEmpty()));\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "220",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/114/OptionalFileParams.java\nindex cc75375f979..60b97b12211 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/114/OptionalFileParams.java\n@@ -216,7 +216,7 @@ public class OptionalFileParams {\n         return true;\n     }\n \n-\tpublic boolean hasStorageIdentifier() {\n+    public boolean hasStorageIdentifier() {\n \t\treturn ((storageIdentifier!=null)&&(!storageIdentifier.isEmpty()));\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/114/OptionalFileParams.java\nindex cc75375f979..8016120dd37 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/114/OptionalFileParams.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse.datasetutility;\n \n import com.google.gson.Gson;\n@@ -27,603 +28,610 @@ import java.util.stream.Collectors;\n \n /**\n  * This is used in conjunction with the AddReplaceFileHelper\n- * \n+ * <p>\n  * It encapsulates these optional parameters:\n- * \n- *  - description\n- *  - file tags (can be custom)\n- *  - tabular tags (controlled vocabulary)\n- * \n+ * <p>\n+ * - description\n+ * - file tags (can be custom)\n+ * - tabular tags (controlled vocabulary)\n+ * <p>\n  * Future params:\n- *  - Provenance related information\n- * \n+ * - Provenance related information\n+ *\n  * @author rmp553\n  */\n public class OptionalFileParams {\n \n-    private static final Logger logger = Logger.getLogger(OptionalFileParams.class.getName());\n-\n-    private String description;\n-    public static final String DESCRIPTION_ATTR_NAME = \"description\";\n-    \n-    private String label;\n-    public static final String LABEL_ATTR_NAME = \"label\";\n-    \n-    private String directoryLabel;\n-    public static final String DIRECTORY_LABEL_ATTR_NAME = \"directoryLabel\";\n-\n-    private List<String> categories;\n-    public static final String CATEGORIES_ATTR_NAME = \"categories\";\n-    \n-    private List<String> dataFileTags;\n-    public static final String FILE_DATA_TAGS_ATTR_NAME = \"dataFileTags\";\n-    \n-    private String provFreeForm;\n-    public static final String PROVENANCE_FREEFORM_ATTR_NAME = \"provFreeForm\";\n-    \n-    private boolean restrict = false;\n-    public static final String RESTRICT_ATTR_NAME = \"restrict\";\n-    \n-    private String storageIdentifier;\n-    public static final String STORAGE_IDENTIFIER_ATTR_NAME = \"storageIdentifier\";\n-    private String fileName;\n-    public static final String FILE_NAME_ATTR_NAME = \"fileName\";\n-    private String mimeType;\n-    public static final String MIME_TYPE_ATTR_NAME = \"mimeType\";\n-    private String checkSumValue;\n-    private ChecksumType checkSumType;\n-    public static final String LEGACY_CHECKSUM_ATTR_NAME = \"md5Hash\";\n-    public static final String CHECKSUM_OBJECT_NAME = \"checksum\";\n-    public static final String CHECKSUM_OBJECT_TYPE = \"@type\";\n-    public static final String CHECKSUM_OBJECT_VALUE = \"@value\";\n-\n-    public OptionalFileParams() {\n-    }\n-    \n-    public OptionalFileParams(String jsonData) throws DataFileTagException{\n-        \n-        if (jsonData != null){\n-            loadParamsFromJson(jsonData);\n-        }\n-    }\n+  private static final Logger logger = Logger.getLogger(OptionalFileParams.class.getName());\n \n-    \n-    public OptionalFileParams(String description,\n-                    List<String> newCategories, \n-                    List<String> potentialFileDataTags)  throws DataFileTagException{\n-        \n-        this.description = description;\n-        setCategories(newCategories);\n-        this.addFileDataTags(potentialFileDataTags);\n-    }\n+  private String description;\n+  public static final String DESCRIPTION_ATTR_NAME = \"description\";\n+\n+  private String label;\n+  public static final String LABEL_ATTR_NAME = \"label\";\n+\n+  private String directoryLabel;\n+  public static final String DIRECTORY_LABEL_ATTR_NAME = \"directoryLabel\";\n+\n+  private List<String> categories;\n+  public static final String CATEGORIES_ATTR_NAME = \"categories\";\n \n+  private List<String> dataFileTags;\n+  public static final String FILE_DATA_TAGS_ATTR_NAME = \"dataFileTags\";\n+\n+  private String provFreeForm;\n+  public static final String PROVENANCE_FREEFORM_ATTR_NAME = \"provFreeForm\";\n+\n+  private boolean restrict = false;\n+  public static final String RESTRICT_ATTR_NAME = \"restrict\";\n+\n+  private String storageIdentifier;\n+  public static final String STORAGE_IDENTIFIER_ATTR_NAME = \"storageIdentifier\";\n+  private String fileName;\n+  public static final String FILE_NAME_ATTR_NAME = \"fileName\";\n+  private String mimeType;\n+  public static final String MIME_TYPE_ATTR_NAME = \"mimeType\";\n+  private String checkSumValue;\n+  private ChecksumType checkSumType;\n+  public static final String LEGACY_CHECKSUM_ATTR_NAME = \"md5Hash\";\n+  public static final String CHECKSUM_OBJECT_NAME = \"checksum\";\n+  public static final String CHECKSUM_OBJECT_TYPE = \"@type\";\n+  public static final String CHECKSUM_OBJECT_VALUE = \"@value\";\n+\n+  public OptionalFileParams() {\n+  }\n+\n+  public OptionalFileParams(String jsonData) throws DataFileTagException {\n \n-    \n-    public OptionalFileParams(String description,\n-            List<String> newCategories,\n-            List<String> potentialFileDataTags, \n-            boolean restrict) throws DataFileTagException {\n+    if (jsonData != null) {\n+      loadParamsFromJson(jsonData);\n+    }\n+  }\n \n-        this.description = description;\n-        setCategories(newCategories);\n-        this.addFileDataTags(potentialFileDataTags);\n-        this.restrict = restrict;\n-    }\n \n-    //For use in replace operations - load the file metadata from the file being replaced so it can be applied to the new file\n-    //checksum and mimetype aren't needed\n-    public OptionalFileParams(DataFile df) throws DataFileTagException {\n-        FileMetadata fm = df.getFileMetadata();\n+  public OptionalFileParams(String description,\n+                            List<String> newCategories,\n+                            List<String> potentialFileDataTags) throws DataFileTagException {\n+\n+    this.description = description;\n+    setCategories(newCategories);\n+    this.addFileDataTags(potentialFileDataTags);\n+  }\n+\n+\n+  public OptionalFileParams(String description,\n+                            List<String> newCategories,\n+                            List<String> potentialFileDataTags,\n+                            boolean restrict) throws DataFileTagException {\n+\n+    this.description = description;\n+    setCategories(newCategories);\n+    this.addFileDataTags(potentialFileDataTags);\n+    this.restrict = restrict;\n+  }\n+\n+  //For use in replace operations - load the file metadata from the file being replaced so it can be applied to the new file\n+  //checksum and mimetype aren't needed\n+  public OptionalFileParams(DataFile df) throws DataFileTagException {\n+    FileMetadata fm = df.getFileMetadata();\n+\n+    this.description = fm.getDescription();\n+    setCategories(fm.getCategoriesByName());\n+    this.addFileDataTags(df.getTagLabels());\n+    this.restrict = fm.isRestricted();\n+    //Explicitly do not replace the file name - replaces with -force may change the mimetype and extension\n+    //this.label = fm.getLabel();\n+    this.directoryLabel = fm.getDirectoryLabel();\n+    this.provFreeForm = fm.getProvFreeForm();\n+  }\n+\n+\n+  /**\n+   * Set description\n+   *\n+   * @param description\n+   */\n+  public void setDescription(String description) {\n+    this.description = description;\n+  }\n+\n+  /**\n+   * Get for description\n+   *\n+   * @return String\n+   */\n+  public String getDescription() {\n+    return this.description;\n+  }\n \n-        this.description = fm.getDescription();\n-        setCategories(fm.getCategoriesByName());\n-        this.addFileDataTags(df.getTagLabels());\n-        this.restrict = fm.isRestricted();\n-        //Explicitly do not replace the file name - replaces with -force may change the mimetype and extension\n-        //this.label = fm.getLabel(); \n-        this.directoryLabel = fm.getDirectoryLabel();\n-        this.provFreeForm = fm.getProvFreeForm();\n+  public String getLabel() {\n+    return label;\n+  }\n+\n+  public void setLabel(String label) {\n+    this.label = label;\n+  }\n+\n+  public String getDirectoryLabel() {\n+    return directoryLabel;\n+  }\n+\n+  public void setDirectoryLabel(String directoryLabel) {\n+    this.directoryLabel = directoryLabel;\n+  }\n+\n+  public String getProvFreeform() {\n+    return provFreeForm;\n+  }\n+\n+  public void setProvFreeform(String provFreeForm) {\n+    this.provFreeForm = provFreeForm;\n+  }\n+\n+  public void setRestriction(boolean restrict) {\n+    this.restrict = restrict;\n+  }\n+\n+  public boolean getRestriction() {\n+    return this.restrict;\n+  }\n+\n+  public boolean hasCategories() {\n+    if ((categories == null) || (this.categories.isEmpty())) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean hasFileDataTags() {\n+    if ((dataFileTags == null) || (this.dataFileTags.isEmpty())) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean hasDescription() {\n+    if ((description == null) || (this.description.isEmpty())) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean hasDirectoryLabel() {\n+    if ((directoryLabel == null) || (this.directoryLabel.isEmpty())) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean hasLabel() {\n+    if ((label == null) || (this.label.isEmpty())) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean hasProvFreeform() {\n+    if ((provFreeForm == null) || (this.provFreeForm.isEmpty())) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  public boolean hasStorageIdentifier() {\n+    return ((storageIdentifier != null) && (!storageIdentifier.isEmpty()));\n+  }\n+\n+  public String getStorageIdentifier() {\n+    return storageIdentifier;\n+  }\n+\n+  public boolean hasFileName() {\n+    return ((fileName != null) && (!fileName.isEmpty()));\n+  }\n+\n+  public String getFileName() {\n+    return fileName;\n+  }\n+\n+  public boolean hasMimetype() {\n+    return ((mimeType != null) && (!mimeType.isEmpty()));\n+  }\n+\n+  public String getMimeType() {\n+    return mimeType;\n+  }\n+\n+  public void setCheckSum(String checkSum, ChecksumType type) {\n+    this.checkSumValue = checkSum;\n+    this.checkSumType = type;\n+  }\n+\n+  public boolean hasCheckSum() {\n+    return ((checkSumValue != null) && (!checkSumValue.isEmpty()));\n+  }\n+\n+  public String getCheckSum() {\n+    return checkSumValue;\n+  }\n+\n+  public ChecksumType getCheckSumType() {\n+    return checkSumType;\n+  }\n+\n+  /**\n+   * Set tags\n+   *\n+   * @param tags\n+   */\n+  public void setCategories(List<String> newCategories) {\n+\n+    if (newCategories != null) {\n+      newCategories = Util.removeDuplicatesNullsEmptyStrings(newCategories);\n+      if (newCategories.isEmpty()) {\n+        newCategories = null;\n+      }\n+    }\n+\n+    this.categories = newCategories;\n+  }\n+\n+  /**\n+   * Get for tags\n+   *\n+   * @return List<String>\n+   */\n+  public List<String> getCategories() {\n+    return this.categories;\n+  }\n+\n+\n+  /**\n+   * Set dataFileTags\n+   *\n+   * @param dataFileTags\n+   */\n+  public void setDataFileTags(List<String> dataFileTags) {\n+    this.dataFileTags = dataFileTags;\n+  }\n+\n+  /**\n+   * Get for dataFileTags\n+   *\n+   * @return List<String>\n+   */\n+  public List<String> getDataFileTags() {\n+    return this.dataFileTags;\n+  }\n+\n+  private void loadParamsFromJson(String jsonData) throws DataFileTagException {\n+\n+    msgt(\"jsonData: \" + jsonData);\n+    if (jsonData == null || jsonData.isEmpty()) {\n+      return;\n+//            logger.log(Level.SEVERE, \"jsonData is null\");\n     }\n+    JsonObject jsonObj;\n+    jsonObj = new Gson().fromJson(jsonData, JsonObject.class);\n \n+    // -------------------------------\n+    // get description as string\n+    // -------------------------------\n+    if ((jsonObj.has(DESCRIPTION_ATTR_NAME)) && (!jsonObj.get(DESCRIPTION_ATTR_NAME).isJsonNull())) {\n \n-    /**\n-     *  Set description\n-     *  @param description\n-     */\n-    public void setDescription(String description){\n-        this.description = description;\n+      this.description = jsonObj.get(DESCRIPTION_ATTR_NAME).getAsString();\n     }\n \n-    /**\n-     *  Get for description\n-     *  @return String\n-     */\n-    public String getDescription(){\n-        return this.description;\n+    // -------------------------------\n+    // get directory label as string\n+    // -------------------------------\n+    if ((jsonObj.has(DIRECTORY_LABEL_ATTR_NAME)) && (!jsonObj.get(DIRECTORY_LABEL_ATTR_NAME).isJsonNull())) {\n+\n+      this.directoryLabel = jsonObj.get(DIRECTORY_LABEL_ATTR_NAME).getAsString();\n     }\n-    \n-    public String getLabel() {\n-        return label;\n+\n+    // -------------------------------\n+    // get directory label as string\n+    // -------------------------------\n+    if ((jsonObj.has(LABEL_ATTR_NAME)) && (!jsonObj.get(LABEL_ATTR_NAME).isJsonNull())) {\n+\n+      this.label = jsonObj.get(LABEL_ATTR_NAME).getAsString();\n     }\n \n-    public void setLabel(String label) {\n-        this.label = label;\n+    // -------------------------------\n+    // get freeform provenance as string\n+    // -------------------------------\n+    if ((jsonObj.has(PROVENANCE_FREEFORM_ATTR_NAME)) && (!jsonObj.get(PROVENANCE_FREEFORM_ATTR_NAME).isJsonNull())) {\n+\n+      this.provFreeForm = jsonObj.get(PROVENANCE_FREEFORM_ATTR_NAME).getAsString();\n     }\n-    \n-    public String getDirectoryLabel() {\n-        return directoryLabel;\n+\n+    // -------------------------------\n+    // get restriction as boolean\n+    // -------------------------------\n+    if ((jsonObj.has(RESTRICT_ATTR_NAME)) && (!jsonObj.get(RESTRICT_ATTR_NAME).isJsonNull())) {\n+\n+      this.restrict = Boolean.valueOf(jsonObj.get(RESTRICT_ATTR_NAME).getAsString());\n     }\n \n-    public void setDirectoryLabel(String directoryLabel) {\n-        this.directoryLabel = directoryLabel;\n+    // -------------------------------\n+    // get storage identifier as string\n+    // -------------------------------\n+    if ((jsonObj.has(STORAGE_IDENTIFIER_ATTR_NAME)) && (!jsonObj.get(STORAGE_IDENTIFIER_ATTR_NAME).isJsonNull())) {\n+\n+      this.storageIdentifier = jsonObj.get(STORAGE_IDENTIFIER_ATTR_NAME).getAsString();\n     }\n-    \n-    public String getProvFreeform() {\n-        return provFreeForm;\n+\n+    // -------------------------------\n+    // get file name as string\n+    // -------------------------------\n+    if ((jsonObj.has(FILE_NAME_ATTR_NAME)) && (!jsonObj.get(FILE_NAME_ATTR_NAME).isJsonNull())) {\n+\n+      this.fileName = jsonObj.get(FILE_NAME_ATTR_NAME).getAsString();\n     }\n \n-    public void setProvFreeform(String provFreeForm) {\n-        this.provFreeForm = provFreeForm;\n+    // -------------------------------\n+    // get mimetype as string\n+    // -------------------------------\n+    if ((jsonObj.has(MIME_TYPE_ATTR_NAME)) && (!jsonObj.get(MIME_TYPE_ATTR_NAME).isJsonNull())) {\n+\n+      this.mimeType = jsonObj.get(MIME_TYPE_ATTR_NAME).getAsString();\n     }\n \n-    public void setRestriction(boolean restrict){\n-        this.restrict = restrict;\n+    // -------------------------------\n+    // get md5 checkSum as string\n+    // -------------------------------\n+    if ((jsonObj.has(LEGACY_CHECKSUM_ATTR_NAME)) && (!jsonObj.get(LEGACY_CHECKSUM_ATTR_NAME).isJsonNull())) {\n+\n+      this.checkSumValue = jsonObj.get(LEGACY_CHECKSUM_ATTR_NAME).getAsString();\n+      this.checkSumType = ChecksumType.MD5;\n     }\n-    \n-    public boolean getRestriction(){\n-        return this.restrict;\n+    // -------------------------------\n+    // get checkSum type and value\n+    // -------------------------------\n+    else if ((jsonObj.has(CHECKSUM_OBJECT_NAME)) && (!jsonObj.get(CHECKSUM_OBJECT_NAME).isJsonNull())) {\n+\n+      this.checkSumValue = ((JsonObject) jsonObj.get(CHECKSUM_OBJECT_NAME)).get(CHECKSUM_OBJECT_VALUE).getAsString();\n+      this.checkSumType = ChecksumType\n+        .fromString(((JsonObject) jsonObj.get(CHECKSUM_OBJECT_NAME)).get(CHECKSUM_OBJECT_TYPE).getAsString());\n+\n     }\n-    \n-    public boolean hasCategories(){\n-        if ((categories == null)||(this.categories.isEmpty())){\n-            return false;\n+\n+    // -------------------------------\n+    // get tags\n+    // -------------------------------\n+    Gson gson = new Gson();\n+\n+    //Type objType = new TypeToken<List<String[]>>() {}.getType();\n+    Type listType = new TypeToken<List<String>>() {\n+    }.getType();\n+    Type treeType = new TypeToken<List<LinkedTreeMap>>() {\n+    }.getType();\n+    //----------------------\n+    // Load tags\n+    //----------------------\n+    if ((jsonObj.has(CATEGORIES_ATTR_NAME)) && (!jsonObj.get(CATEGORIES_ATTR_NAME).isJsonNull())) {\n+\n+      List<String> catList = new ArrayList();\n+\n+      try {\n+        //We try to parse this as a treeMap if the syntax passed was \"categories\":[{\"name\",\"A Category\"}]\n+        List<LinkedTreeMap> testLinked = gson.fromJson(jsonObj.get(CATEGORIES_ATTR_NAME), treeType);\n+        for (LinkedTreeMap ltm : testLinked) {\n+          catList.add((String) ltm.get(\"name\"));\n         }\n-        return true;\n+      } catch (JsonSyntaxException je) {\n+        //If parsing a treeMap failed we try again with the syntax \"categories\":[\"A Category\"]\n+        catList = gson.fromJson(jsonObj.get(CATEGORIES_ATTR_NAME), listType);\n+      }\n+\n+      this.categories = catList;\n+      setCategories(this.categories);\n     }\n- \n-    public boolean hasFileDataTags(){\n-        if ((dataFileTags == null)||(this.dataFileTags.isEmpty())){\n-            return false;\n-        }\n-        return true;\n+\n+    //----------------------\n+    // Load tabular tags\n+    //----------------------\n+    if ((jsonObj.has(FILE_DATA_TAGS_ATTR_NAME)) && (!jsonObj.get(FILE_DATA_TAGS_ATTR_NAME).isJsonNull())) {\n+\n+      // Get potential tags from JSON\n+      List<String> potentialTags = gson.fromJson(jsonObj.get(FILE_DATA_TAGS_ATTR_NAME), listType);\n+\n+      // Add valid potential tags to the list\n+      addFileDataTags(potentialTags);\n+\n     }\n- \n-    public boolean hasDescription(){\n-        if ((description == null)||(this.description.isEmpty())){\n-            return false;\n-        }\n-        return true;\n+\n+  }\n+\n+  private void addFileDataTags(List<String> potentialTags) throws DataFileTagException {\n+\n+    if (potentialTags == null) {\n+      return;\n     }\n \n-    public boolean hasDirectoryLabel(){\n-        if ((directoryLabel == null)||(this.directoryLabel.isEmpty())){\n-            return false;\n-        }\n-        return true;\n+    potentialTags = Util.removeDuplicatesNullsEmptyStrings(potentialTags);\n+\n+    if (potentialTags.isEmpty()) {\n+      return;\n     }\n-    \n-    public boolean hasLabel(){\n-        if ((label == null)||(this.label.isEmpty())){\n-            return false;\n-        }\n-        return true;\n+\n+    // Make a new list\n+    this.dataFileTags = new ArrayList<>();\n+\n+    // Add valid potential tags to the list\n+    for (String tagToCheck : potentialTags) {\n+      if (DataFileTag.isDataFileTag(tagToCheck)) {\n+        this.dataFileTags.add(tagToCheck);\n+      } else {\n+        String errMsg = BundleUtil.getStringFromBundle(\"file.addreplace.error.invalid_datafile_tag\");\n+        throw new DataFileTagException(\n+          errMsg + \" [\" + tagToCheck + \"]. Please use one of the following: \" + DataFileTag.getListofLabelsAsString());\n+      }\n     }\n-    \n-    public boolean hasProvFreeform(){\n-        if ((provFreeForm == null)||(this.provFreeForm.isEmpty())){\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-\tpublic boolean hasStorageIdentifier() {\n-\t\treturn ((storageIdentifier!=null)&&(!storageIdentifier.isEmpty()));\n-\t}\n-\n-\tpublic String getStorageIdentifier() {\n-\t\treturn storageIdentifier;\n-\t}\n-\n-\tpublic boolean hasFileName() {\n-\t\treturn ((fileName!=null)&&(!fileName.isEmpty()));\n-\t}\n-\n-\tpublic String getFileName() {\n-\t\treturn fileName;\n-\t}\n-\n-\tpublic boolean hasMimetype() {\n-\t\treturn ((mimeType!=null)&&(!mimeType.isEmpty()));\n-\t}\n-\n-\tpublic String getMimeType() {\n-\t\treturn mimeType;\n-\t}\n-\n-\tpublic void setCheckSum(String checkSum, ChecksumType type) {\n-\t\tthis.checkSumValue = checkSum;\n-\t\tthis.checkSumType = type;\n-\t}\n-\t\n-\tpublic boolean hasCheckSum() {\n-\t\treturn ((checkSumValue!=null)&&(!checkSumValue.isEmpty()));\n-\t}\n-\n-\tpublic String getCheckSum() {\n-\t\treturn checkSumValue;\n-\t}\n-\t\n-    public ChecksumType getCheckSumType() {\n-        return checkSumType;\n-    }\n-\n-    /**\n-     *  Set tags\n-     *  @param tags\n-     */\n-    public void setCategories(List<String> newCategories) {\n-\n-        if (newCategories != null) {\n-            newCategories = Util.removeDuplicatesNullsEmptyStrings(newCategories);\n-            if (newCategories.isEmpty()) {\n-                newCategories = null;\n-            }\n-        }\n+    // Shouldn't happen....\n+    if (dataFileTags.isEmpty()) {\n+      dataFileTags = null;\n+    }\n+  }\n+\n+  private void msg(String s) {\n+    System.out.println(s);\n+  }\n \n-        this.categories = newCategories;\n+  private void msgt(String s) {\n+    msg(\"-------------------------------\");\n+    msg(s);\n+    msg(\"-------------------------------\");\n+  }\n+\n+  /**\n+   * Add parameters to a DataFile object\n+   * <p>\n+   * Note that this call may have issues seeing fileMetadata generated before it by Dataset.getEditVersion()\n+   */\n+  public void addOptionalParams(DataFile df) throws DataFileTagException {\n+    if (df == null) {\n+      throw new NullPointerException(\"The datafile cannot be null!\");\n     }\n \n-    /**\n-     *  Get for tags\n-     *  @return List<String>\n-     */\n-    public List<String> getCategories(){\n-        return this.categories;\n+    FileMetadata fm = df.getFileMetadata();\n+\n+    addOptionalParams(fm);\n+  }\n+\n+  public void addOptionalParams(FileMetadata fm) throws DataFileTagException {\n+\n+    // ---------------------------\n+    // Add description\n+    // ---------------------------\n+    if (hasDescription()) {\n+      fm.setDescription(this.getDescription());\n     }\n-    \n \n-    /**\n-     *  Set dataFileTags\n-     *  @param dataFileTags\n-     */\n-    public void setDataFileTags(List<String> dataFileTags){\n-        this.dataFileTags = dataFileTags;\n+    // ---------------------------\n+    // Add directory label (path)\n+    // ---------------------------\n+    if (hasDirectoryLabel()) {\n+      fm.setDirectoryLabel(this.getDirectoryLabel());\n     }\n \n-    /**\n-     *  Get for dataFileTags\n-     *  @return List<String>\n-     */\n-    public List<String> getDataFileTags(){\n-        return this.dataFileTags;\n+    // ---------------------------\n+    // Add directory label (path)\n+    // ---------------------------\n+    if (hasLabel()) {\n+      fm.setLabel(this.getLabel());\n     }\n \n-    private void loadParamsFromJson(String jsonData) throws DataFileTagException{\n-        \n-        msgt(\"jsonData: \" +  jsonData);\n-        if (jsonData == null || jsonData.isEmpty()){\n-            return;\n-//            logger.log(Level.SEVERE, \"jsonData is null\");\n-        }\n-        JsonObject jsonObj;\n-        jsonObj = new Gson().fromJson(jsonData, JsonObject.class);\n-\n-        // -------------------------------\n-        // get description as string\n-        // -------------------------------\n-        if ((jsonObj.has(DESCRIPTION_ATTR_NAME)) && (!jsonObj.get(DESCRIPTION_ATTR_NAME).isJsonNull())){\n-            \n-            this.description = jsonObj.get(DESCRIPTION_ATTR_NAME).getAsString();\n-        }       \n-\n-        // -------------------------------\n-        // get directory label as string\n-        // -------------------------------\n-        if ((jsonObj.has(DIRECTORY_LABEL_ATTR_NAME)) && (!jsonObj.get(DIRECTORY_LABEL_ATTR_NAME).isJsonNull())){\n-\n-            this.directoryLabel = jsonObj.get(DIRECTORY_LABEL_ATTR_NAME).getAsString();\n-        }\n-        \n-        // -------------------------------\n-        // get directory label as string\n-        // -------------------------------\n-        if ((jsonObj.has(LABEL_ATTR_NAME)) && (!jsonObj.get(LABEL_ATTR_NAME).isJsonNull())){\n+    // ---------------------------\n+    // Add freeform provenance\n+    // ---------------------------\n+    if (hasProvFreeform()) {\n+      fm.setProvFreeForm(this.getProvFreeform());\n+    }\n \n-            this.label = jsonObj.get(LABEL_ATTR_NAME).getAsString();\n-        }\n-        \n-        // -------------------------------\n-        // get freeform provenance as string\n-        // -------------------------------\n-        if ((jsonObj.has(PROVENANCE_FREEFORM_ATTR_NAME)) && (!jsonObj.get(PROVENANCE_FREEFORM_ATTR_NAME).isJsonNull())){\n+    // ---------------------------\n+    // Add categories\n+    // ---------------------------\n+    replaceCategoriesInDataFile(fm);\n \n-            this.provFreeForm = jsonObj.get(PROVENANCE_FREEFORM_ATTR_NAME).getAsString();\n-        }\n-        \n-        // -------------------------------\n-        // get restriction as boolean\n-        // -------------------------------\n-        if ((jsonObj.has(RESTRICT_ATTR_NAME)) && (!jsonObj.get(RESTRICT_ATTR_NAME).isJsonNull())){\n-            \n-            this.restrict = Boolean.valueOf(jsonObj.get(RESTRICT_ATTR_NAME).getAsString());\n-        }\n-        \n-        // -------------------------------\n-        // get storage identifier as string\n-        // -------------------------------\n-        if ((jsonObj.has(STORAGE_IDENTIFIER_ATTR_NAME)) && (!jsonObj.get(STORAGE_IDENTIFIER_ATTR_NAME).isJsonNull())){\n \n-            this.storageIdentifier = jsonObj.get(STORAGE_IDENTIFIER_ATTR_NAME).getAsString();\n-        }\n-        \n-        // -------------------------------\n-        // get file name as string\n-        // -------------------------------\n-        if ((jsonObj.has(FILE_NAME_ATTR_NAME)) && (!jsonObj.get(FILE_NAME_ATTR_NAME).isJsonNull())){\n+    // ---------------------------\n+    // Add DataFileTags\n+    // ---------------------------\n+    replaceFileDataTagsInFile(fm.getDataFile());\n \n-            this.fileName = jsonObj.get(FILE_NAME_ATTR_NAME).getAsString();\n-        }\n-        \n-        // -------------------------------\n-        // get mimetype as string\n-        // -------------------------------\n-        if ((jsonObj.has(MIME_TYPE_ATTR_NAME)) && (!jsonObj.get(MIME_TYPE_ATTR_NAME).isJsonNull())){\n+  }\n \n-            this.mimeType = jsonObj.get(MIME_TYPE_ATTR_NAME).getAsString();\n-        }\n-        \n-        // -------------------------------\n-        // get md5 checkSum as string\n-        // -------------------------------\n-        if ((jsonObj.has(LEGACY_CHECKSUM_ATTR_NAME)) && (!jsonObj.get(LEGACY_CHECKSUM_ATTR_NAME).isJsonNull())){\n-\n-            this.checkSumValue = jsonObj.get(LEGACY_CHECKSUM_ATTR_NAME).getAsString();\n-            this.checkSumType= ChecksumType.MD5;\n-        }\n-        // -------------------------------\n-        // get checkSum type and value\n-        // -------------------------------\n-        else if ((jsonObj.has(CHECKSUM_OBJECT_NAME)) && (!jsonObj.get(CHECKSUM_OBJECT_NAME).isJsonNull())){\n \n-            this.checkSumValue = ((JsonObject) jsonObj.get(CHECKSUM_OBJECT_NAME)).get(CHECKSUM_OBJECT_VALUE).getAsString();\n-            this.checkSumType = ChecksumType.fromString(((JsonObject) jsonObj.get(CHECKSUM_OBJECT_NAME)).get(CHECKSUM_OBJECT_TYPE).getAsString());\n+  /**\n+   * Replace Categories in the DataFile.\n+   * <p>\n+   * This previously added the categories to what previously existed on the file metadata, but was switched to replace.\n+   * This was because the add-to functionality was never utilized and replace was needed for file metadata update\n+   */\n+  private void replaceCategoriesInDataFile(FileMetadata fileMetadata) {\n \n-        }\n-        \n-        // -------------------------------\n-        // get tags \n-        // -------------------------------\n-        Gson gson = new Gson();\n-        \n-        //Type objType = new TypeToken<List<String[]>>() {}.getType();\n-        Type listType = new TypeToken<List<String>>() {}.getType();\n-        Type treeType = new TypeToken<List<LinkedTreeMap>>() {}.getType();\n-        //----------------------\n-        // Load tags\n-        //----------------------\n-        if ((jsonObj.has(CATEGORIES_ATTR_NAME)) && (!jsonObj.get(CATEGORIES_ATTR_NAME).isJsonNull())){\n-\n-            List<String> catList = new ArrayList();\n-            \n-            try {\n-                //We try to parse this as a treeMap if the syntax passed was \"categories\":[{\"name\",\"A Category\"}]\n-                List<LinkedTreeMap> testLinked = gson.fromJson(jsonObj.get(CATEGORIES_ATTR_NAME), treeType);\n-                for(LinkedTreeMap ltm : testLinked) {\n-                    catList.add((String) ltm.get(\"name\"));\n-                }\n-            } catch (JsonSyntaxException je){\n-                //If parsing a treeMap failed we try again with the syntax \"categories\":[\"A Category\"]\n-                catList = gson.fromJson(jsonObj.get(CATEGORIES_ATTR_NAME), listType);\n-            }\n-\n-            this.categories = catList;\n-            setCategories(this.categories);\n-        }\n+    if (fileMetadata == null) {\n+      throw new NullPointerException(\"The fileMetadata cannot be null!\");\n+    }\n \n-        //----------------------\n-        // Load tabular tags\n-        //----------------------\n-        if ((jsonObj.has(FILE_DATA_TAGS_ATTR_NAME)) && (!jsonObj.get(FILE_DATA_TAGS_ATTR_NAME).isJsonNull())){\n-            \n-            // Get potential tags from JSON\n-            List<String> potentialTags = gson.fromJson(jsonObj.get(FILE_DATA_TAGS_ATTR_NAME), listType); \n-\n-            // Add valid potential tags to the list\n-            addFileDataTags(potentialTags);            \n-           \n-        }\n-       \n+    // Is there anything to add?\n+    //\n+    if (!hasCategories()) {\n+      return;\n     }\n-  \n-    private void addFileDataTags(List<String> potentialTags) throws DataFileTagException{\n-        \n-        if (potentialTags == null){\n-            return;\n-        }\n \n-        potentialTags = Util.removeDuplicatesNullsEmptyStrings(potentialTags);\n-                \n-        if (potentialTags.isEmpty()){\n-            return;\n-        }\n-        \n-         // Make a new list\n-        this.dataFileTags = new ArrayList<>();\n-           \n-        // Add valid potential tags to the list\n-        for (String tagToCheck : potentialTags){\n-            if (DataFileTag.isDataFileTag(tagToCheck)){\n-                this.dataFileTags.add(tagToCheck);\n-            }else{                    \n-                String errMsg = BundleUtil.getStringFromBundle(\"file.addreplace.error.invalid_datafile_tag\");\n-                throw new DataFileTagException(errMsg + \" [\" + tagToCheck + \"]. Please use one of the following: \" + DataFileTag.getListofLabelsAsString());\n-            }\n-        }\n-         // Shouldn't happen....\n-         if (dataFileTags.isEmpty()){\n-            dataFileTags = null;\n-        }\n+    //List<String> currentCategories = fileMetadata.getCategoriesByName();\n+\n+    // Add categories to the file metadata object\n+    //\n+    fileMetadata.setCategories(new ArrayList()); //clear categories\n+\n+    this.getCategories().stream().forEach((catText) -> {\n+      fileMetadata.addCategoryByName(catText);  // fyi: \"addCategoryByName\" checks for dupes\n+    });\n+  }\n+\n+\n+  /**\n+   * Replace File Data Tags in Tabular File.\n+   * <p>\n+   * This previously added the tags to what previously existed on the file metadata, but was switched to replace.\n+   * This was because the add-to functionality was never utilized and replace was needed for file metadata update\n+   * <p>\n+   * NOTE: DataFile tags can only be added to tabular files\n+   * <p>\n+   * - e.g. The file must already be ingested.\n+   * <p>\n+   * Because of this, these tags cannot be used when \"Adding\" a file via\n+   * the API--e.g. b/c the file will note yet be ingested\n+   *\n+   * @param df\n+   */\n+  private void replaceFileDataTagsInFile(DataFile df) throws DataFileTagException {\n+    if (df == null) {\n+      throw new NullPointerException(\"The DataFile (df) cannot be null!\");\n     }\n-    \n-    private void msg(String s){\n-            System.out.println(s);\n+\n+    // --------------------------------------------------\n+    // Is there anything to add?\n+    // --------------------------------------------------\n+    if (!hasFileDataTags()) {\n+      return;\n     }\n \n-    private void msgt(String s){\n-        msg(\"-------------------------------\");\n-        msg(s);\n-        msg(\"-------------------------------\");\n+    // --------------------------------------------------\n+    // Is this a tabular file?\n+    // --------------------------------------------------\n+    if (!df.isTabularData()) {\n+      String errMsg = BundleUtil.getStringFromBundle(\"file.metadata.datafiletag.not_tabular\");\n+\n+      throw new DataFileTagException(errMsg);\n     }\n \n-    /** \n-     * Add parameters to a DataFile object\n-     * \n-     * Note that this call may have issues seeing fileMetadata generated before it by Dataset.getEditVersion()\n-     */\n-    public void addOptionalParams(DataFile df) throws DataFileTagException {\n-        if (df == null){            \n-            throw new NullPointerException(\"The datafile cannot be null!\");\n-        }\n-        \n-        FileMetadata fm = df.getFileMetadata();\n-        \n-        addOptionalParams(fm);\n-    }\n-    \n-    public void addOptionalParams(FileMetadata fm) throws DataFileTagException{\n-        \n-        // ---------------------------\n-        // Add description\n-        // ---------------------------\n-        if (hasDescription()){\n-            fm.setDescription(this.getDescription());\n-        }\n+    // --------------------------------------------------\n+    // Get existing tag list and convert it to list of strings (labels)\n+    // --------------------------------------------------\n \n-        // ---------------------------\n-        // Add directory label (path)\n-        // ---------------------------\n-        if (hasDirectoryLabel()){\n-            fm.setDirectoryLabel(this.getDirectoryLabel());\n-        }\n-        \n-        // ---------------------------\n-        // Add directory label (path)\n-        // ---------------------------\n-        if (hasLabel()){\n-            fm.setLabel(this.getLabel());\n-        }\n-        \n-        // ---------------------------\n-        // Add freeform provenance\n-        // ---------------------------\n-        if (hasProvFreeform()){\n-            fm.setProvFreeForm(this.getProvFreeform());\n-        }\n-        \n-        // ---------------------------\n-        // Add categories\n-        // ---------------------------\n-        replaceCategoriesInDataFile(fm);\n-       \n-\n-        // ---------------------------\n-        // Add DataFileTags\n-        // ---------------------------\n-        replaceFileDataTagsInFile(fm.getDataFile());\n-       \n-    }\n-    \n-\n-    /**\n-     *  Replace Categories in the DataFile.\n-     *  \n-     * This previously added the categories to what previously existed on the file metadata, but was switched to replace.\n-     * This was because the add-to functionality was never utilized and replace was needed for file metadata update\n-     * \n-     */\n-    private void replaceCategoriesInDataFile(FileMetadata fileMetadata){\n-        \n-        if (fileMetadata == null){            \n-            throw new NullPointerException(\"The fileMetadata cannot be null!\");\n-        }\n-        \n-        // Is there anything to add?\n-        //\n-        if (!hasCategories()){\n-            return;\n-        }\n-        \n-        //List<String> currentCategories = fileMetadata.getCategoriesByName();\n-\n-        // Add categories to the file metadata object\n-        //\n-        fileMetadata.setCategories(new ArrayList()); //clear categories\n-        \n-        this.getCategories().stream().forEach((catText) -> {               \n-            fileMetadata.addCategoryByName(catText);  // fyi: \"addCategoryByName\" checks for dupes\n-        });\n-    }\n-\n-    \n-    /**\n-     * Replace File Data Tags in Tabular File.\n-     * \n-     * This previously added the tags to what previously existed on the file metadata, but was switched to replace.\n-     * This was because the add-to functionality was never utilized and replace was needed for file metadata update\n-     * \n-     * NOTE: DataFile tags can only be added to tabular files\n-     * \n-     *      - e.g. The file must already be ingested.\n-     * \n-     * Because of this, these tags cannot be used when \"Adding\" a file via \n-     * the API--e.g. b/c the file will note yet be ingested\n-     * \n-     * @param df \n-     */\n-    private void replaceFileDataTagsInFile(DataFile df) throws DataFileTagException{\n-        if (df == null){\n-            throw new NullPointerException(\"The DataFile (df) cannot be null!\");\n-        }\n-        \n-        // --------------------------------------------------\n-        // Is there anything to add?\n-        // --------------------------------------------------\n-        if (!hasFileDataTags()){\n-            return;\n-        }\n-        \n-        // --------------------------------------------------\n-        // Is this a tabular file?\n-        // --------------------------------------------------\n-        if (!df.isTabularData()){\n-            String errMsg = BundleUtil.getStringFromBundle(\"file.metadata.datafiletag.not_tabular\");\n-\n-            throw new DataFileTagException(errMsg);\n-        }\n-        \n-        // --------------------------------------------------\n-        // Get existing tag list and convert it to list of strings (labels)\n-        // --------------------------------------------------\n-        \n-        df.setTags(new ArrayList<DataFileTag>()); //MAD: TEST CLEARING TAGS\n-        \n-        \n-\n-        // --------------------------------------------------\n-        // Iterate through and add any new labels\n-        // --------------------------------------------------\n-        DataFileTag newTagObj;\n-        for (String tagLabel : this.getDataFileTags()){    \n-            if (DataFileTag.isDataFileTag(tagLabel)){\n-\n-                newTagObj = new DataFileTag();\n-                newTagObj.setDataFile(df);\n-                newTagObj.setTypeByLabel(tagLabel);\n-                df.addTag(newTagObj);\n-\n-            }\n-        }                \n-        \n+    df.setTags(new ArrayList<DataFileTag>()); //MAD: TEST CLEARING TAGS\n+\n+\n+    // --------------------------------------------------\n+    // Iterate through and add any new labels\n+    // --------------------------------------------------\n+    DataFileTag newTagObj;\n+    for (String tagLabel : this.getDataFileTags()) {\n+      if (DataFileTag.isDataFileTag(tagLabel)) {\n+\n+        newTagObj = new DataFileTag();\n+        newTagObj.setDataFile(df);\n+        newTagObj.setTypeByLabel(tagLabel);\n+        df.addTag(newTagObj);\n+\n+      }\n     }\n \n+  }\n+\n }\n",
            "diff_size": 892
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "220",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/114/OptionalFileParams.java\nindex cc75375f979..60b97b12211 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/114/OptionalFileParams.java\n@@ -216,7 +216,7 @@ public class OptionalFileParams {\n         return true;\n     }\n \n-\tpublic boolean hasStorageIdentifier() {\n+    public boolean hasStorageIdentifier() {\n \t\treturn ((storageIdentifier!=null)&&(!storageIdentifier.isEmpty()));\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "220",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/114/OptionalFileParams.java\nindex cc75375f979..60b97b12211 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/114/OptionalFileParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/114/OptionalFileParams.java\n@@ -216,7 +216,7 @@ public class OptionalFileParams {\n         return true;\n     }\n \n-\tpublic boolean hasStorageIdentifier() {\n+    public boolean hasStorageIdentifier() {\n \t\treturn ((storageIdentifier!=null)&&(!storageIdentifier.isEmpty()));\n \t}\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}