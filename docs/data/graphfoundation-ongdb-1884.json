{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1884",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1884/IdRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1884/IdRange.java\nindex f8585cf5747..346512bcc13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1884/IdRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1884/IdRange.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.id;\n \n import java.util.Arrays;\n@@ -24,74 +25,74 @@ import java.util.Objects;\n \n public class IdRange\n {\n-    private final long[] defragIds;\n-    private final long rangeStart;\n-    private final int rangeLength;\n+  private final long[] defragIds;\n+  private final long rangeStart;\n+  private final int rangeLength;\n \n-    public IdRange( long[] defragIds, long rangeStart, int rangeLength )\n-    {\n-        this.defragIds = defragIds;\n-        this.rangeStart = rangeStart;\n-        this.rangeLength = rangeLength;\n-    }\n+  public IdRange(long[] defragIds, long rangeStart, int rangeLength)\n+  {\n+    this.defragIds = defragIds;\n+    this.rangeStart = rangeStart;\n+    this.rangeLength = rangeLength;\n+  }\n \n-    public long[] getDefragIds()\n-    {\n-        return defragIds;\n-    }\n+  public long[] getDefragIds()\n+  {\n+    return defragIds;\n+  }\n \n-    public long getRangeStart()\n-    {\n-        return rangeStart;\n-    }\n+  public long getRangeStart()\n+  {\n+    return rangeStart;\n+  }\n \n-    public int getRangeLength()\n-    {\n-        return rangeLength;\n-    }\n+  public int getRangeLength()\n+  {\n+    return rangeLength;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return \"IdRange[\" + rangeStart + \"-\" + (rangeStart + rangeLength - 1) + \", defrag \" +\n-                Arrays.toString( defragIds ) + \"]\";\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return \"IdRange[\" + rangeStart + \"-\" + (rangeStart + rangeLength - 1) + \", defrag \" +\n+        Arrays.toString(defragIds) + \"]\";\n+  }\n \n-    public int totalSize()\n-    {\n-        return defragIds.length + rangeLength;\n-    }\n+  public int totalSize()\n+  {\n+    return defragIds.length + rangeLength;\n+  }\n \n-    public IdRangeIterator iterator()\n-    {\n-        return new IdRangeIterator( this );\n-    }\n+  public IdRangeIterator iterator()\n+  {\n+    return new IdRangeIterator(this);\n+  }\n \n-    @Override\n-    public boolean equals( Object o )\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-        IdRange idRange = (IdRange) o;\n-        return rangeStart == idRange.rangeStart &&\n-                rangeLength == idRange.rangeLength &&\n-                Arrays.equals( defragIds, idRange.defragIds );\n+      return true;\n     }\n-\n-    @Override\n-    public int hashCode()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return Objects.hash( Arrays.hashCode( defragIds ), rangeStart, rangeLength );\n+      return false;\n     }\n+    IdRange idRange = (IdRange) o;\n+    return rangeStart == idRange.rangeStart &&\n+        rangeLength == idRange.rangeLength &&\n+        Arrays.equals(defragIds, idRange.defragIds);\n+  }\n \n-    public long getHighId()\n-    {\n-        return rangeStart + rangeLength;\n-    }\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(Arrays.hashCode(defragIds), rangeStart, rangeLength);\n+  }\n+\n+  public long getHighId()\n+  {\n+    return rangeStart + rangeLength;\n+  }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1884/IdRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1884/IdRange.java\nindex f8585cf5747..d3099759b28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1884/IdRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1884/IdRange.java\n@@ -53,8 +53,7 @@ public class IdRange\n     @Override\n     public String toString()\n     {\n-        return \"IdRange[\" + rangeStart + \"-\" + (rangeStart + rangeLength - 1) + \", defrag \" +\n-                Arrays.toString( defragIds ) + \"]\";\n+        return \"IdRange[\" + rangeStart + \"-\" + (rangeStart + rangeLength - 1) + \", defrag \" + Arrays.toString( defragIds ) + \"]\";\n     }\n \n     public int totalSize()\n@@ -74,11 +73,13 @@ public class IdRange\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        IdRange idRange = (IdRange) o;\n+\n+IdRange idRange = (IdRange) o;\n         return rangeStart == idRange.rangeStart &&\n                 rangeLength == idRange.rangeLength &&\n                 Arrays.equals( defragIds, idRange.defragIds );\n@@ -94,4 +95,4 @@ public class IdRange\n     {\n         return rangeStart + rangeLength;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}