{
    "project_name": "kitodo-kitodo-production",
    "error_id": "40",
    "information": {
        "errors": [
            {
                "line": "823",
                "severity": "warning",
                "message": "Line is longer than 140 characters (found 147).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    selectedTreeNode = updateLogicalNodeSelectionRecursive(structure, logicalTree);\n                } else {\n                    selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit(), structure, logicalTree);\n                }\n                if (Objects.nonNull(selectedTreeNode)) {\n                    setSelectedLogicalNode(selectedTreeNode);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "823",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "823",
                    "column": "148",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "823",
                    "column": "148",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "823",
                    "column": "149",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/40/StructurePanel.java\nindex 112670e4717..5f3185f8614 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/40/StructurePanel.java\n@@ -820,9 +820,7 @@ public class StructurePanel implements Serializable {\n                 if (this.isSeparateMedia()) {\n                     selectedTreeNode = updateLogicalNodeSelectionRecursive(structure, logicalTree);\n                 } else {\n-                    selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit(), structure, logicalTree);\n-                }\n-                if (Objects.nonNull(selectedTreeNode)) {\n+                    selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit( ), structure,logicalTree);}if (Objects.nonNull(selectedTreeNode)) {\n                     setSelectedLogicalNode(selectedTreeNode);\n                     try {\n                         dataEditor.switchStructure(selectedTreeNode.getData(), false);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "493",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1105",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1371",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/40/StructurePanel.java\nindex 112670e4717..5be2b483e88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/40/StructurePanel.java\n@@ -107,8 +107,7 @@ public class StructurePanel implements Serializable {\n     /**\n      * Creates a new structure panel.\n      *\n-     * @param dataEditor\n-     *            the master metadata editor\n+     * @param dataEditor the master metadata editor\n      */\n     StructurePanel(DataEditorForm dataEditor) {\n         this.dataEditor = dataEditor;\n@@ -170,7 +169,7 @@ public class StructurePanel implements Serializable {\n             return;\n         }\n         LinkedList<MediaUnit> ancestors = MetadataEditor.getAncestorsOfMediaUnit(selectedMediaUnit.get(),\n-                dataEditor.getWorkpiece().getMediaUnit());\n+            dataEditor.getWorkpiece().getMediaUnit());\n         if (ancestors.isEmpty()) {\n             // The selected element is the root node of the tree.\n             return;\n@@ -192,8 +191,7 @@ public class StructurePanel implements Serializable {\n     /**\n      * Set selected logical TreeNode.\n      *\n-     * @param selected\n-     *          TreeNode that will be selected\n+     * @param selected TreeNode that will be selected\n      */\n     public void setSelectedLogicalNode(TreeNode selected) {\n         if (Objects.nonNull(selected)) {\n@@ -238,8 +236,7 @@ public class StructurePanel implements Serializable {\n     /**\n      * Select given MediaUnit in physical structure tree.\n      *\n-     * @param mediaUnit\n-     *          MediaUnit to be selected in physical structure tree\n+     * @param mediaUnit MediaUnit to be selected in physical structure tree\n      */\n     void selectMediaUnit(MediaUnit mediaUnit) {\n         TreeNode matchingTreeNode = getMatchingTreeNode(getPhysicalTree(), mediaUnit);\n@@ -257,7 +254,7 @@ public class StructurePanel implements Serializable {\n                 if (structureTreeNode.getDataObject() instanceof MediaUnit) {\n                     MediaUnit currentMediaUnit = (MediaUnit) structureTreeNode.getDataObject();\n                     if (Objects.nonNull(currentMediaUnit.getDivId())\n-                            && currentMediaUnit.getDivId().equals(mediaUnit.getDivId())) {\n+                        && currentMediaUnit.getDivId().equals(mediaUnit.getDivId())) {\n                         matchingTreeNode = treeNode;\n                         break;\n                     } else {\n@@ -362,8 +359,7 @@ public class StructurePanel implements Serializable {\n      * Loads the tree(s) into the panel and sets the selected element to the\n      * root element of the structure tree.\n      *\n-     * @param keepSelection\n-     *            if true, keeps the currently selected node(s)\n+     * @param keepSelection if true, keeps the currently selected node(s)\n      */\n     public void show(boolean keepSelection) {\n         if (keepSelection) {\n@@ -430,7 +426,7 @@ public class StructurePanel implements Serializable {\n      * displayed above the tree as separate trees.\n      *\n      * @return the structure tree(s) and the collection of views displayed in\n-     *         the tree\n+     * the tree\n      */\n     private Pair<LinkedList<DefaultTreeNode>, Collection<View>> buildStructureTree() {\n         LinkedList<DefaultTreeNode> result = new LinkedList<>();\n@@ -457,7 +453,7 @@ public class StructurePanel implements Serializable {\n                 try {\n                     String type = ServiceManager.getProcessService().getBaseType(child);\n                     if (child.getId() == ServiceManager.getProcessService()\n-                            .processIdFromUri(structure.getLink().getUri())) {\n+                        .processIdFromUri(structure.getLink().getUri())) {\n                         StructuralElementViewInterface view = dataEditor.getRuleset().getStructuralElementView(\n                             type, dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n                         node = new StructureTreeNode(view.getLabel(), view.isUndefined(), true, structure);\n@@ -485,7 +481,7 @@ public class StructurePanel implements Serializable {\n             }\n         } else {\n             orderChildrenAndViews(new ArrayList<>(structure.getChildren()), new ArrayList<>(structure.getViews()), parent,\n-                    viewsShowingOnAChild);\n+                viewsShowingOnAChild);\n         }\n         return viewsShowingOnAChild;\n     }\n@@ -493,9 +489,10 @@ public class StructurePanel implements Serializable {\n     /**\n      * This method appends IncludedStructuralElement children and assigned views while considering the ORDER attribute to create the\n      * combined tree with the correct order of logical and physical elements.\n-     * @param children List of IncludedStructuralElements which are children of the element represented by the DefaultTreeNode parent\n-     * @param views List of Views assigned to the element represented by the DefaultTreeNode parent\n-     * @param parent DefaultTreeNode representing the logical element where all new elements should be appended\n+     *\n+     * @param children             List of IncludedStructuralElements which are children of the element represented by the DefaultTreeNode parent\n+     * @param views                List of Views assigned to the element represented by the DefaultTreeNode parent\n+     * @param parent               DefaultTreeNode representing the logical element where all new elements should be appended\n      * @param viewsShowingOnAChild Collection of Views displayed in the combined tree\n      */\n     private void orderChildrenAndViews(List<IncludedStructuralElement> children, List<View> views, DefaultTreeNode parent,\n@@ -520,7 +517,7 @@ public class StructurePanel implements Serializable {\n             }\n \n             if (Objects.nonNull(temporaryChild) && Objects.isNull(temporaryView)\n-                    || Objects.nonNull(temporaryChild) && temporaryChild.getOrder() <= temporaryView.getMediaUnit().getOrder()) {\n+                || Objects.nonNull(temporaryChild) && temporaryChild.getOrder() <= temporaryView.getMediaUnit().getOrder()) {\n                 viewsShowingOnAChild.addAll(buildStructureTreeRecursively(temporaryChild, parent));\n                 temporaryChildren.remove(0);\n             } else {\n@@ -546,16 +543,12 @@ public class StructurePanel implements Serializable {\n      * Adds a tree node to the given parent node. The tree node is set to\n      * \u2018expanded\u2019.\n      *\n-     * @param type\n-     *            the internal name of the type of node, to be resolved through\n-     *            the rule set\n-     * @param linked\n-     *            whether the node is a link. If so, it will be marked with a\n-     *            link symbol.\n-     * @param dataObject\n-     *            the internal object represented by the node\n-     * @param parent\n-     *            parent node to which the new node is to be added\n+     * @param type       the internal name of the type of node, to be resolved through\n+     *                   the rule set\n+     * @param linked     whether the node is a link. If so, it will be marked with a\n+     *                   link symbol.\n+     * @param dataObject the internal object represented by the node\n+     * @param parent     parent node to which the new node is to be added\n      * @return the generated node so that you can add children to it\n      */\n     private DefaultTreeNode addTreeNode(String type, boolean linked, Object dataObject, DefaultTreeNode parent) {\n@@ -569,28 +562,23 @@ public class StructurePanel implements Serializable {\n      * Adds a tree node to the given parent node. The tree node is set to\n      * \u2018expanded\u2019.\n      *\n-     * @param label\n-     *            Label of the tree node displayed to the user\n-     * @param undefined\n-     *            whether the given type in the rule set is undefined. If so,\n-     *            the node is highlighted in color and marked with a warning\n-     *            symbol.\n-     * @param linked\n-     *            whether the node is a link. If so, it will be marked with a\n-     *            link symbol.\n-     * @param dataObject\n-     *            the internal object represented by the node\n-     * @param parent\n-     *            parent node to which the new node is to be added\n+     * @param label      Label of the tree node displayed to the user\n+     * @param undefined  whether the given type in the rule set is undefined. If so,\n+     *                   the node is highlighted in color and marked with a warning\n+     *                   symbol.\n+     * @param linked     whether the node is a link. If so, it will be marked with a\n+     *                   link symbol.\n+     * @param dataObject the internal object represented by the node\n+     * @param parent     parent node to which the new node is to be added\n      * @return the generated node so that you can add children to it\n      */\n     private DefaultTreeNode addTreeNode(String label, boolean undefined, boolean linked, Object dataObject,\n-            DefaultTreeNode parent) {\n+                                        DefaultTreeNode parent) {\n         DefaultTreeNode node = new DefaultTreeNode(new StructureTreeNode(label, undefined, linked, dataObject),\n-                parent);\n+            parent);\n         if (dataObject instanceof MediaUnit && nodeStateUnknown(this.previousExpansionStatesPhysicalTree, node)\n-                || dataObject instanceof IncludedStructuralElement\n-                && nodeStateUnknown(this.previousExpansionStatesLogicalTree, node)) {\n+            || dataObject instanceof IncludedStructuralElement\n+            && nodeStateUnknown(this.previousExpansionStatesLogicalTree, node)) {\n             node.setExpanded(true);\n         }\n         return node;\n@@ -603,11 +591,9 @@ public class StructurePanel implements Serializable {\n      * found in the parent process, or I/O error), instead only a link is added\n      * to the process and the warning sign is activated.\n      *\n-     * @param child\n-     *            child process, calling recursion\n-     * @param result\n-     *            list of structure trees, in this list the parent links are\n-     *            inserted on top, therefore LinkedList\n+     * @param child  child process, calling recursion\n+     * @param result list of structure trees, in this list the parent links are\n+     *               inserted on top, therefore LinkedList\n      */\n     private void addParentLinksRecursive(Process child, LinkedList<DefaultTreeNode> result) {\n         Process parent = child.getParent();\n@@ -623,7 +609,7 @@ public class StructurePanel implements Serializable {\n         try {\n             IncludedStructuralElement rootElement = ServiceManager.getMetsService().loadWorkpiece(uri).getRootElement();\n             List<IncludedStructuralElement> includedStructuralElementList\n-                    = determineIncludedStructuralElementPathToChildRecursive(rootElement, child.getId());\n+                = determineIncludedStructuralElementPathToChildRecursive(rootElement, child.getId());\n             DefaultTreeNode parentNode = tree;\n             if (includedStructuralElementList.isEmpty()) {\n                 /*\n@@ -665,20 +651,17 @@ public class StructurePanel implements Serializable {\n      * child. For each level of the root element, the recursion is run through\n      * once, that is for a newspaper year process tree times (year, month, day).\n      *\n-     * @param includedStructuralElement\n-     *            included structural element of the level stage of recursion\n-     *            (starting from the top)\n-     * @param number\n-     *            number of the record of the process of the child\n-     *\n+     * @param includedStructuralElement included structural element of the level stage of recursion\n+     *                                  (starting from the top)\n+     * @param number                    number of the record of the process of the child\n      */\n     private static List<IncludedStructuralElement> determineIncludedStructuralElementPathToChildRecursive(\n-            IncludedStructuralElement includedStructuralElement, int number) {\n+        IncludedStructuralElement includedStructuralElement, int number) {\n \n         if (Objects.nonNull(includedStructuralElement.getLink())) {\n             try {\n                 if (ServiceManager.getProcessService()\n-                        .processIdFromUri(includedStructuralElement.getLink().getUri()) == number) {\n+                    .processIdFromUri(includedStructuralElement.getLink().getUri()) == number) {\n                     LinkedList<IncludedStructuralElement> linkedIncludedStructuralElements = new LinkedList<>();\n                     linkedIncludedStructuralElements.add(includedStructuralElement);\n                     return linkedIncludedStructuralElements;\n@@ -701,8 +684,7 @@ public class StructurePanel implements Serializable {\n     /**\n      * Creates the media tree.\n      *\n-     * @param mediaRoot\n-     *            root of media units to show on the tree\n+     * @param mediaRoot root of media units to show on the tree\n      * @return the media tree\n      */\n     private DefaultTreeNode buildMediaTree(MediaUnit mediaRoot) {\n@@ -716,10 +698,10 @@ public class StructurePanel implements Serializable {\n \n     private void buildMediaTreeRecursively(MediaUnit mediaUnit, DefaultTreeNode parentTreeNode) {\n         StructuralElementViewInterface divisionView = dataEditor.getRuleset().getStructuralElementView(\n-                mediaUnit.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n+            mediaUnit.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n         DefaultTreeNode treeNode = addTreeNode(\"page\".equals(mediaUnit.getType())\n-                        ? divisionView.getLabel().concat(\" \" + mediaUnit.getOrderlabel()) : divisionView.getLabel(),\n-                false, false, mediaUnit, parentTreeNode);\n+                ? divisionView.getLabel().concat(\" \" + mediaUnit.getOrderlabel()) : divisionView.getLabel(),\n+            false, false, mediaUnit, parentTreeNode);\n         if (nodeStateUnknown(this.previousExpansionStatesPhysicalTree, treeNode)) {\n             treeNode.setExpanded(true);\n         }\n@@ -733,8 +715,7 @@ public class StructurePanel implements Serializable {\n     /**\n      * Callback function triggered when a node is selected in the logical structure tree.\n      *\n-     * @param event\n-     *            NodeSelectEvent triggered by logical node being selected\n+     * @param event NodeSelectEvent triggered by logical node being selected\n      */\n     public void treeLogicalSelect(NodeSelectEvent event) {\n         /*\n@@ -753,8 +734,7 @@ public class StructurePanel implements Serializable {\n     /**\n      * Callback function triggered when a node is selected in the physical structure tree.\n      *\n-     * @param event\n-     *            NodeSelectEvent triggered by logical node being selected\n+     * @param event NodeSelectEvent triggered by logical node being selected\n      */\n     public void treePhysicalSelect(NodeSelectEvent event) {\n         /*\n@@ -820,7 +800,8 @@ public class StructurePanel implements Serializable {\n                 if (this.isSeparateMedia()) {\n                     selectedTreeNode = updateLogicalNodeSelectionRecursive(structure, logicalTree);\n                 } else {\n-                    selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit(), structure, logicalTree);\n+                    selectedTreeNode =\n+                        updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit(), structure, logicalTree);\n                 }\n                 if (Objects.nonNull(selectedTreeNode)) {\n                     setSelectedLogicalNode(selectedTreeNode);\n@@ -860,8 +841,9 @@ public class StructurePanel implements Serializable {\n \n     /**\n      * Update the node selection in logical tree.\n+     *\n      * @param structure the IncludedStructuralElement to be selected as a TreeNode\n-     * @param treeNode the logical structure tree\n+     * @param treeNode  the logical structure tree\n      * @return the TreeNode that will be selected\n      */\n     public TreeNode updateLogicalNodeSelectionRecursive(IncludedStructuralElement structure, TreeNode treeNode) {\n@@ -902,10 +884,10 @@ public class StructurePanel implements Serializable {\n         TreeNode matchingTreeNode = null;\n         for (TreeNode currentTreeNode : treeNode.getChildren()) {\n             if (treeNode.getData() instanceof StructureTreeNode\n-                    && ((StructureTreeNode) treeNode.getData()).getDataObject().equals(parentElement)\n-                    && currentTreeNode.getData() instanceof StructureTreeNode\n-                    && ((StructureTreeNode) currentTreeNode.getData()).getDataObject() instanceof View\n-                    && ((View) ((StructureTreeNode) currentTreeNode.getData()).getDataObject()).getMediaUnit().equals(selectedMediaUnit)) {\n+                && ((StructureTreeNode) treeNode.getData()).getDataObject().equals(parentElement)\n+                && currentTreeNode.getData() instanceof StructureTreeNode\n+                && ((StructureTreeNode) currentTreeNode.getData()).getDataObject() instanceof View\n+                && ((View) ((StructureTreeNode) currentTreeNode.getData()).getDataObject()).getMediaUnit().equals(selectedMediaUnit)) {\n                 currentTreeNode.setSelected(true);\n                 matchingTreeNode = currentTreeNode;\n             } else {\n@@ -950,8 +932,7 @@ public class StructurePanel implements Serializable {\n      * Callback function triggered on NodeCollapseEvent. Sets the 'expanded' flag of the corresponding tree node to\n      * 'false' because this is not done automatically by PrimeFaces on a NodeCollapseEvent.\n      *\n-     * @param event\n-     *          the NodeCollapseEvent triggered in the corresponding structure tree\n+     * @param event the NodeCollapseEvent triggered in the corresponding structure tree\n      */\n     public void onNodeCollapse(NodeCollapseEvent event) {\n         if (Objects.nonNull(event) && Objects.nonNull(event.getTreeNode())) {\n@@ -963,8 +944,7 @@ public class StructurePanel implements Serializable {\n      * Callback function triggered on NodeExpandEvent. Sets the 'expanded' flag of the corresponding tree node to\n      * 'true' because this is not done automatically by PrimeFaces on a NodeExpandEvent.\n      *\n-     * @param event\n-     *          the NodeExpandEvent triggered in the corresponding structure tree\n+     * @param event the NodeExpandEvent triggered in the corresponding structure tree\n      */\n     public void onNodeExpand(NodeExpandEvent event) {\n         if (Objects.nonNull(event) && Objects.nonNull(event.getTreeNode())) {\n@@ -991,17 +971,17 @@ public class StructurePanel implements Serializable {\n             StructureTreeNode dropNode = (StructureTreeNode) dropNodeObject;\n             StructureTreeNode dragNode = (StructureTreeNode) dragNodeObject;\n             if (dragNode.getDataObject() instanceof IncludedStructuralElement\n-                    && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n+                && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n                 checkLogicalDragDrop(dragNode, dropNode);\n             } else if (dragNode.getDataObject() instanceof MediaUnit\n-                    && dropNode.getDataObject() instanceof MediaUnit) {\n+                && dropNode.getDataObject() instanceof MediaUnit) {\n                 checkPhysicalDragDrop(dragNode, dropNode);\n             } else if (dragNode.getDataObject() instanceof View\n-                     && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n+                && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n                 movePageNode(event, dropNode, dragNode);\n             } else {\n                 Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\", Arrays.asList(\n-                        dragNode.getLabel(), dropNode.getLabel())));\n+                    dragNode.getLabel(), dropNode.getLabel())));\n                 show();\n             }\n         } catch (Exception exception) {\n@@ -1012,8 +992,7 @@ public class StructurePanel implements Serializable {\n     /**\n      * Determine the IncludedStructuralElement to which the given View is assigned.\n      *\n-     * @param view\n-     *          View for which the IncludedStructuralElement is determined\n+     * @param view View for which the IncludedStructuralElement is determined\n      * @return the IncludedStructuralElement to which the given View is assigned\n      */\n     IncludedStructuralElement getPageStructure(View view, IncludedStructuralElement parent) {\n@@ -1022,7 +1001,7 @@ public class StructurePanel implements Serializable {\n             if (child.getViews().contains(view)) {\n                 resultElement = child;\n             } else {\n-                resultElement =  getPageStructure(view, child);\n+                resultElement = getPageStructure(view, child);\n             }\n             if (Objects.nonNull(resultElement)) {\n                 break;\n@@ -1035,12 +1014,9 @@ public class StructurePanel implements Serializable {\n      * Move page encapsulated in given StructureTreeNode 'dragNode' to Structural Element encapsulated in given\n      * StructureTreeNode 'dropNode' at index encoded in given TreeDragDropEvent 'event'.\n      *\n-     * @param event\n-     *          TreeDragDropEvent triggering 'movePageNode'\n-     * @param dropNode\n-     *          StructureTreeNode containing the Structural Element to which the page is moved\n-     * @param dragNode\n-     *          StructureTreeNode containing the View/Page that is moved\n+     * @param event    TreeDragDropEvent triggering 'movePageNode'\n+     * @param dropNode StructureTreeNode containing the Structural Element to which the page is moved\n+     * @param dragNode StructureTreeNode containing the View/Page that is moved\n      */\n     private void movePageNode(TreeDragDropEvent event, StructureTreeNode dropNode, StructureTreeNode dragNode) throws Exception {\n         TreeNode dragParent = event.getDragNode().getParent();\n@@ -1056,11 +1032,11 @@ public class StructurePanel implements Serializable {\n                 return;\n             } else {\n                 Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\", Arrays.asList(\n-                        dragNode.getLabel(), dropNode.getLabel())));\n+                    dragNode.getLabel(), dropNode.getLabel())));\n             }\n         } else {\n             Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\", Arrays.asList(\n-                    dragNode.getLabel(), dropNode.getLabel())));\n+                dragNode.getLabel(), dropNode.getLabel())));\n         }\n         show();\n     }\n@@ -1068,18 +1044,19 @@ public class StructurePanel implements Serializable {\n     /**\n      * Change the order of the MediaUnits in the workpiece.\n      * When structure is saved to METS this is represented by the order of DIV elements in the physical structMap.\n-     * @param toElement logical element where to which the MediaUnits are assigned\n+     *\n+     * @param toElement         logical element where to which the MediaUnits are assigned\n      * @param elementsToBeMoved List of MediaUnits which are moved\n-     * @param insertionIndex index at which the MediaUnits are added to the existing List of MediaUnits.\n-     *                       The value -1 represents the end of the list.\n+     * @param insertionIndex    index at which the MediaUnits are added to the existing List of MediaUnits.\n+     *                          The value -1 represents the end of the list.\n      */\n     void reorderMediaUnits(IncludedStructuralElement toElement,\n                            List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n                            int insertionIndex) {\n         int physicalInsertionIndex;\n         List<MediaUnit> mediaUnitsToBeMoved = elementsToBeMoved.stream()\n-                .map(e -> e.getLeft().getMediaUnit())\n-                .collect(Collectors.toList());\n+            .map(e -> e.getLeft().getMediaUnit())\n+            .collect(Collectors.toList());\n \n         if (insertionIndex > toElement.getViews().size()) {\n             Helper.setErrorMessage(\"Unsupported drag'n'drop operation: Insertion index exceeds list.\");\n@@ -1104,9 +1081,9 @@ public class StructurePanel implements Serializable {\n         }\n \n         if (physicalInsertionIndex > mediaUnitsToBeMoved.stream()\n-                .map(MediaUnit::getOrder)\n-                .collect(Collectors.summarizingInt(Integer::intValue))\n-                .getMin() - 1) {\n+            .map(MediaUnit::getOrder)\n+            .collect(Collectors.summarizingInt(Integer::intValue))\n+            .getMin() - 1) {\n             int finalInsertionIndex = physicalInsertionIndex;\n             physicalInsertionIndex -= (int) mediaUnitsToBeMoved.stream().filter(m -> m.getOrder() - 1 < finalInsertionIndex).count();\n         }\n@@ -1124,8 +1101,9 @@ public class StructurePanel implements Serializable {\n \n     /**\n      * Change order fields of physical elements. When saved to METS this is represented by the physical structMap divs' \"ORDER\" attribute.\n-     * @param toElement Logical element to which the physical elements are assigned. The physical elements' order follows the order of the\n-     *                  logical elements.\n+     *\n+     * @param toElement         Logical element to which the physical elements are assigned. The physical elements' order follows the order of the\n+     *                          logical elements.\n      * @param elementsToBeMoved List of physical elements to be moved\n      */\n     void changePhysicalOrderFields(IncludedStructuralElement toElement, List<Pair<View, IncludedStructuralElement>> elementsToBeMoved) {\n@@ -1134,14 +1112,15 @@ public class StructurePanel implements Serializable {\n \n     /**\n      * Change the order attribute of the logical elements that are affected by pages around them being moved.\n-     * @param toElement logical element the pages will be assigned to\n+     *\n+     * @param toElement         logical element the pages will be assigned to\n      * @param elementsToBeMoved physical elements which are moved\n      */\n     void changeLogicalOrderFields(IncludedStructuralElement toElement, List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n                                   int insertionIndex) {\n         HashMap<Integer, List<IncludedStructuralElement>> logicalElementsByOrder = new HashMap<>();\n         for (IncludedStructuralElement logicalElement : dataEditor.getWorkpiece().getAllIncludedStructuralElements()) {\n-            if (logicalElementsByOrder.containsKey(logicalElement.getOrder()))  {\n+            if (logicalElementsByOrder.containsKey(logicalElement.getOrder())) {\n                 logicalElementsByOrder.get(logicalElement.getOrder()).add(logicalElement);\n             } else {\n                 logicalElementsByOrder.put(logicalElement.getOrder(), new LinkedList<>(Collections.singletonList(logicalElement)));\n@@ -1171,7 +1150,7 @@ public class StructurePanel implements Serializable {\n             if (entry.getKey() == toElement.getOrder()) {\n                 List<IncludedStructuralElement> beforeToElement = entry.getValue().subList(0, entry.getValue().indexOf(toElement) + 1);\n                 List<IncludedStructuralElement> afterToElement = entry.getValue().subList(entry.getValue().indexOf(toElement) + 1,\n-                        entry.getValue().size());\n+                    entry.getValue().size());\n                 /* toElement at index 0 means we're in an edge case: toElement is the first order which is affected (no pages with smaller\n                 order affected) and its order will not change, nor will other elements with the same order before it. */\n                 if (ordersAffectedByMove.indexOf(toElement.getOrder()) > 0) {\n@@ -1188,12 +1167,12 @@ public class StructurePanel implements Serializable {\n \n     private List<Integer> getOrdersAffectedByMove(List<Pair<View, IncludedStructuralElement>> views, IncludedStructuralElement toElement) {\n         Set<Integer> ordersAffectedByMove = views.stream()\n-                .map(e -> e.getLeft().getMediaUnit().getOrder())\n-                .collect(Collectors.toSet());\n+            .map(e -> e.getLeft().getMediaUnit().getOrder())\n+            .collect(Collectors.toSet());\n         ordersAffectedByMove.add(toElement.getOrder());\n         return ordersAffectedByMove.stream()\n-                .sorted()\n-                .collect(Collectors.toList());\n+            .sorted()\n+            .collect(Collectors.toList());\n     }\n \n     private void updateOrder(List<IncludedStructuralElement> elementsToBeUpdated, int delta) {\n@@ -1206,20 +1185,17 @@ public class StructurePanel implements Serializable {\n      * Move List of elements 'elementsToBeMoved' from IncludedStructuralElement in each Pair to IncludedStructuralElement\n      * 'toElement'.\n      *\n-     * @param toElement\n-     *          IncludedStructuralElement to which View is moved\n-     * @param elementsToBeMoved\n-     *          List of elements to be moved as Pairs of View and IncludedStructuralElement they are attached to\n-     * @param insertionIndex\n-     *          Index where views will be inserted into toElement's views\n+     * @param toElement         IncludedStructuralElement to which View is moved\n+     * @param elementsToBeMoved List of elements to be moved as Pairs of View and IncludedStructuralElement they are attached to\n+     * @param insertionIndex    Index where views will be inserted into toElement's views\n      */\n     void moveViews(IncludedStructuralElement toElement,\n                    List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n                    int insertionIndex) {\n         List<View> views = elementsToBeMoved.stream()\n-                .map(Pair::getKey)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n+            .map(Pair::getKey)\n+            .filter(Objects::nonNull)\n+            .collect(Collectors.toList());\n         if (insertionIndex < 0 || insertionIndex == toElement.getViews().size()) {\n             toElement.getViews().addAll(views);\n         } else {\n@@ -1228,7 +1204,7 @@ public class StructurePanel implements Serializable {\n \n         for (Pair<View, IncludedStructuralElement> elementToBeMoved : elementsToBeMoved) {\n             boolean removeLastOccurrenceOfView = toElement.equals(elementToBeMoved.getValue())\n-                    && insertionIndex < elementToBeMoved.getValue().getViews().lastIndexOf(elementToBeMoved.getKey());\n+                && insertionIndex < elementToBeMoved.getValue().getViews().lastIndexOf(elementToBeMoved.getKey());\n             dataEditor.unassignView(elementToBeMoved.getValue(), elementToBeMoved.getKey(), removeLastOccurrenceOfView);\n             elementToBeMoved.getKey().getMediaUnit().getIncludedStructuralElements().add(toElement);\n         }\n@@ -1240,12 +1216,12 @@ public class StructurePanel implements Serializable {\n         IncludedStructuralElement dropStructure = (IncludedStructuralElement) dropNode.getDataObject();\n \n         StructuralElementViewInterface divisionView = dataEditor.getRuleset().getStructuralElementView(\n-                dropStructure.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n+            dropStructure.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n \n         LinkedList<IncludedStructuralElement> dragParents;\n         if (divisionView.getAllowedSubstructuralElements().containsKey(dragStructure.getType())) {\n             dragParents = MetadataEditor.getAncestorsOfStructure(dragStructure,\n-                    dataEditor.getWorkpiece().getRootElement());\n+                dataEditor.getWorkpiece().getRootElement());\n             if (!dragParents.isEmpty()) {\n                 IncludedStructuralElement parentStructure = dragParents.get(dragParents.size() - 1);\n                 if (parentStructure.getChildren().contains(dragStructure)) {\n@@ -1258,15 +1234,15 @@ public class StructurePanel implements Serializable {\n                     return;\n                 } else {\n                     Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.childNotContainedError\",\n-                            Collections.singletonList(dragNode.getLabel())));\n+                        Collections.singletonList(dragNode.getLabel())));\n                 }\n             } else {\n                 Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.noParentsError\",\n-                        Collections.singletonList(dragNode.getLabel())));\n+                    Collections.singletonList(dragNode.getLabel())));\n             }\n         } else {\n             Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.forbiddenChildElement\",\n-                    Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n+                Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n         }\n         show();\n     }\n@@ -1277,14 +1253,14 @@ public class StructurePanel implements Serializable {\n         MediaUnit dropUnit = (MediaUnit) dropNode.getDataObject();\n \n         StructuralElementViewInterface divisionView = dataEditor.getRuleset().getStructuralElementView(\n-                dropUnit.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n+            dropUnit.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n \n         LinkedList<MediaUnit> dragParents;\n         if (divisionView.getAllowedSubstructuralElements().containsKey(dragUnit.getType())) {\n             dragParents = MetadataEditor.getAncestorsOfMediaUnit(dragUnit, dataEditor.getWorkpiece().getMediaUnit());\n             if (dragParents.isEmpty()) {\n                 Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.noParentsError\",\n-                        Collections.singletonList(dragNode.getLabel())));\n+                    Collections.singletonList(dragNode.getLabel())));\n             } else {\n                 MediaUnit parentUnit = dragParents.get(dragParents.size() - 1);\n                 if (parentUnit.getChildren().contains(dragUnit)) {\n@@ -1292,12 +1268,12 @@ public class StructurePanel implements Serializable {\n                     return;\n                 } else {\n                     Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.childNotContainedError\",\n-                            Collections.singletonList(dragUnit.getType())));\n+                        Collections.singletonList(dragUnit.getType())));\n                 }\n             }\n         } else {\n             Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.forbiddenChildElement\",\n-                    Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n+                Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n         }\n         show();\n     }\n@@ -1354,18 +1330,17 @@ public class StructurePanel implements Serializable {\n      * - type metadata\n      * - separate structure flag = true\n      *\n-     * @return\n-     *          whether metadata structure should be displayed in separate structure trees or not\n+     * @return whether metadata structure should be displayed in separate structure trees or not\n      */\n     public boolean isSeparateMedia() {\n         if (Objects.nonNull(this.dataEditor.getCurrentTask())\n-                && this.dataEditor.getCurrentTask().isTypeMetadata()\n-                && this.dataEditor.getCurrentTask().isSeparateStructure()) {\n+            && this.dataEditor.getCurrentTask().isTypeMetadata()\n+            && this.dataEditor.getCurrentTask().isSeparateStructure()) {\n             SecurityUserDetails authenticatedUser = ServiceManager.getUserService().getAuthenticatedUser();\n             if (Objects.nonNull(authenticatedUser)) {\n                 int userID = authenticatedUser.getId();\n                 return Objects.nonNull(this.dataEditor.getCurrentTask().getProcessingUser())\n-                        && Objects.equals(this.dataEditor.getCurrentTask().getProcessingUser().getId(), userID);\n+                    && Objects.equals(this.dataEditor.getCurrentTask().getProcessingUser().getId(), userID);\n             } else {\n                 return true;\n             }\n@@ -1393,7 +1368,7 @@ public class StructurePanel implements Serializable {\n     }\n \n     private HashMap<IncludedStructuralElement, Boolean> getTreeNodeExpansionStatesRecursively(TreeNode treeNode,\n-            HashMap<IncludedStructuralElement, Boolean> expansionStates) {\n+                                                                                              HashMap<IncludedStructuralElement, Boolean> expansionStates) {\n         if (Objects.nonNull(treeNode)) {\n             IncludedStructuralElement structureData = getTreeNodeStructuralElement(treeNode);\n             if (Objects.nonNull(structureData)) {\n@@ -1456,7 +1431,7 @@ public class StructurePanel implements Serializable {\n      */\n     public int getMultipleAssignmentsIndex(StructureTreeNode treeNode) {\n         if (treeNode.getDataObject() instanceof View\n-                && Objects.nonNull(((View) treeNode.getDataObject()).getMediaUnit())) {\n+            && Objects.nonNull(((View) treeNode.getDataObject()).getMediaUnit())) {\n             return severalAssignments.indexOf(((View) treeNode.getDataObject()).getMediaUnit());\n         }\n         return -1;\n@@ -1468,7 +1443,7 @@ public class StructurePanel implements Serializable {\n      * @return {@code true} when the MediaUnit is assigned to more than one logical element\n      */\n     public boolean isAssignedSeveralTimes() {\n-        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof  StructureTreeNode) {\n+        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof StructureTreeNode) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) selectedLogicalNode.getData();\n             if (structureTreeNode.getDataObject() instanceof View) {\n                 View view = (View) structureTreeNode.getDataObject();\n@@ -1480,10 +1455,11 @@ public class StructurePanel implements Serializable {\n \n     /**\n      * Check if the selected Node's MediaUnit can be assigned to the next logical element in addition to the current assignment.\n+     *\n      * @return {@code true} if the MediaUnit can be assigned to the next IncludedStructuralElement\n      */\n     public boolean isAssignableSeveralTimes() {\n-        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof  StructureTreeNode) {\n+        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof StructureTreeNode) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) selectedLogicalNode.getData();\n             if (structureTreeNode.getDataObject() instanceof View) {\n                 List<TreeNode> logicalNodeSiblings = selectedLogicalNode.getParent().getParent().getChildren();\n@@ -1491,7 +1467,7 @@ public class StructurePanel implements Serializable {\n                 List<TreeNode> viewSiblbings = selectedLogicalNode.getParent().getChildren();\n                 // check for selected node's positions and siblings after selected node's parent\n                 if (viewSiblbings.indexOf(selectedLogicalNode) == viewSiblbings.size() - 1\n-                        && logicalNodeSiblings.size() > logicalNodeIndex + 1) {\n+                    && logicalNodeSiblings.size() > logicalNodeIndex + 1) {\n                     TreeNode nextSibling = logicalNodeSiblings.get(logicalNodeIndex + 1);\n                     if (nextSibling.getData() instanceof StructureTreeNode) {\n                         StructureTreeNode structureTreeNodeSibling = (StructureTreeNode) nextSibling.getData();\n@@ -1536,7 +1512,7 @@ public class StructurePanel implements Serializable {\n                 StructureTreeNode structureTreeNodeParent = (StructureTreeNode) selectedLogicalNode.getParent().getData();\n                 if (structureTreeNodeParent.getDataObject() instanceof IncludedStructuralElement) {\n                     IncludedStructuralElement includedStructuralElement =\n-                            (IncludedStructuralElement) structureTreeNodeParent.getDataObject();\n+                        (IncludedStructuralElement) structureTreeNodeParent.getDataObject();\n                     dataEditor.unassignView(includedStructuralElement, view, false);\n                     if (view.getMediaUnit().getIncludedStructuralElements().size() <= 1) {\n                         severalAssignments.remove(view.getMediaUnit());\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "501",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "502",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "624",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "821",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "898",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "899",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "997",
                    "column": "9",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 8, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "998",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1076",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1137",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1138",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1214",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/40/StructurePanel.java\nindex 112670e4717..285f3c5bfe4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/40/StructurePanel.java\n@@ -498,9 +498,8 @@ public class StructurePanel implements Serializable {\n      * @param parent DefaultTreeNode representing the logical element where all new elements should be appended\n      * @param viewsShowingOnAChild Collection of Views displayed in the combined tree\n      */\n-    private void orderChildrenAndViews(List<IncludedStructuralElement> children, List<View> views, DefaultTreeNode parent,\n-                                       Set<View> viewsShowingOnAChild) {\n-        List<IncludedStructuralElement> temporaryChildren = new ArrayList<>(children);\n+    private void orderChildrenAndViews(List<IncludedStructuralElement> children, List<View> views, DefaultTreeNode parent, Set<View> viewsShowingOnAChild) {\n+    List<IncludedStructuralElement> temporaryChildren = new ArrayList<>(children);\n         List<View> temporaryViews = new ArrayList<>(views);\n         temporaryChildren.removeAll(Collections.singletonList(null));\n         temporaryViews.removeAll(Collections.singletonList(null));\n@@ -622,8 +621,7 @@ public class StructurePanel implements Serializable {\n         }\n         try {\n             IncludedStructuralElement rootElement = ServiceManager.getMetsService().loadWorkpiece(uri).getRootElement();\n-            List<IncludedStructuralElement> includedStructuralElementList\n-                    = determineIncludedStructuralElementPathToChildRecursive(rootElement, child.getId());\n+            List<IncludedStructuralElement> includedStructuralElementList = determineIncludedStructuralElementPathToChildRecursive(rootElement, child.getId());\n             DefaultTreeNode parentNode = tree;\n             if (includedStructuralElementList.isEmpty()) {\n                 /*\n@@ -897,9 +895,8 @@ public class StructurePanel implements Serializable {\n         return matchingTreeNode;\n     }\n \n-    private TreeNode updatePhysSelectionInLogTreeRecursive(MediaUnit selectedMediaUnit, IncludedStructuralElement parentElement,\n-                                                           TreeNode treeNode) {\n-        TreeNode matchingTreeNode = null;\n+    private TreeNode updatePhysSelectionInLogTreeRecursive(MediaUnit selectedMediaUnit, IncludedStructuralElement parentElement, TreeNode treeNode) {\n+    TreeNode matchingTreeNode = null;\n         for (TreeNode currentTreeNode : treeNode.getChildren()) {\n             if (treeNode.getData() instanceof StructureTreeNode\n                     && ((StructureTreeNode) treeNode.getData()).getDataObject().equals(parentElement)\n@@ -997,8 +994,8 @@ public class StructurePanel implements Serializable {\n                     && dropNode.getDataObject() instanceof MediaUnit) {\n                 checkPhysicalDragDrop(dragNode, dropNode);\n             } else if (dragNode.getDataObject() instanceof View\n-                     && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n-                movePageNode(event, dropNode, dragNode);\n+        && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n+    movePageNode(event, dropNode, dragNode);\n             } else {\n                 Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\", Arrays.asList(\n                         dragNode.getLabel(), dropNode.getLabel())));\n@@ -1076,7 +1073,7 @@ public class StructurePanel implements Serializable {\n     void reorderMediaUnits(IncludedStructuralElement toElement,\n                            List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n                            int insertionIndex) {\n-        int physicalInsertionIndex;\n+    int physicalInsertionIndex;\n         List<MediaUnit> mediaUnitsToBeMoved = elementsToBeMoved.stream()\n                 .map(e -> e.getLeft().getMediaUnit())\n                 .collect(Collectors.toList());\n@@ -1137,11 +1134,10 @@ public class StructurePanel implements Serializable {\n      * @param toElement logical element the pages will be assigned to\n      * @param elementsToBeMoved physical elements which are moved\n      */\n-    void changeLogicalOrderFields(IncludedStructuralElement toElement, List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n-                                  int insertionIndex) {\n-        HashMap<Integer, List<IncludedStructuralElement>> logicalElementsByOrder = new HashMap<>();\n+    void changeLogicalOrderFields(IncludedStructuralElement toElement, List<Pair<View, IncludedStructuralElement>> elementsToBeMoved, int insertionIndex) {\n+    HashMap<Integer, List<IncludedStructuralElement>> logicalElementsByOrder = new HashMap<>();\n         for (IncludedStructuralElement logicalElement : dataEditor.getWorkpiece().getAllIncludedStructuralElements()) {\n-            if (logicalElementsByOrder.containsKey(logicalElement.getOrder()))  {\n+            if (logicalElementsByOrder.containsKey(logicalElement.getOrder())) {\n                 logicalElementsByOrder.get(logicalElement.getOrder()).add(logicalElement);\n             } else {\n                 logicalElementsByOrder.put(logicalElement.getOrder(), new LinkedList<>(Collections.singletonList(logicalElement)));\n@@ -1213,10 +1209,9 @@ public class StructurePanel implements Serializable {\n      * @param insertionIndex\n      *          Index where views will be inserted into toElement's views\n      */\n-    void moveViews(IncludedStructuralElement toElement,\n-                   List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n+    void moveViews(IncludedStructuralElement toElement, List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n                    int insertionIndex) {\n-        List<View> views = elementsToBeMoved.stream()\n+    List<View> views = elementsToBeMoved.stream()\n                 .map(Pair::getKey)\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList());\n@@ -1547,4 +1542,4 @@ public class StructurePanel implements Serializable {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "171",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "483",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "525",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "542",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "584",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "615",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "649",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "700",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "713",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "746",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "852",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "933",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "936",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "938",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1028",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1033",
                    "column": "24",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1034",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1035",
                    "column": "24",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1037",
                    "column": "24",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1038",
                    "column": "20",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1137",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1203",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1254",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1392",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1422",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1531",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1578",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/40/StructurePanel.java\nindex 112670e4717..4ef11e07355 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/40/StructurePanel.java\n@@ -28,7 +28,6 @@ import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n@@ -52,8 +51,8 @@ import org.primefaces.model.DefaultTreeNode;\n import org.primefaces.model.TreeNode;\n \n public class StructurePanel implements Serializable {\n-    private static final Logger logger = LogManager.getLogger(StructurePanel.class);\n \n+    private static final Logger logger = LogManager.getLogger(StructurePanel.class);\n     private DataEditorForm dataEditor;\n \n     /**\n@@ -67,11 +66,8 @@ public class StructurePanel implements Serializable {\n      * select action.\n      */\n     private TreeNode previouslySelectedPhysicalNode;\n-\n     private TreeNode selectedLogicalNode;\n-\n     private TreeNode selectedPhysicalNode;\n-\n     private IncludedStructuralElement structure;\n \n     /**\n@@ -110,6 +106,8 @@ public class StructurePanel implements Serializable {\n      * @param dataEditor\n      *            the master metadata editor\n      */\n+\n+\n     StructurePanel(DataEditorForm dataEditor) {\n         this.dataEditor = dataEditor;\n     }\n@@ -117,6 +115,8 @@ public class StructurePanel implements Serializable {\n     /**\n      * Clear content.\n      */\n+\n+\n     public void clear() {\n         logicalTree = null;\n         physicalTree = null;\n@@ -143,17 +143,16 @@ public class StructurePanel implements Serializable {\n             return;\n         }\n         IncludedStructuralElement parent = ancestors.getLast();\n-\n         Collection<View> subViews = new ArrayList<>();\n         subViews = getAllSubViews(selectedStructure.get(), subViews);\n         parent.getViews().addAll(subViews);\n         parent.getViews().sort(Comparator.comparingInt(v -> v.getMediaUnit().getOrder()));\n-\n         parent.getChildren().remove(selectedStructure.get());\n         show();\n         dataEditor.getGalleryPanel().updateStripes();\n     }\n \n+\n     private Collection<View> getAllSubViews(IncludedStructuralElement selectedStructure, Collection<View> views) {\n         if (Objects.nonNull(selectedStructure.getViews())) {\n             views.addAll(selectedStructure.getViews());\n@@ -169,8 +168,7 @@ public class StructurePanel implements Serializable {\n         if (!selectedMediaUnit.isPresent()) {\n             return;\n         }\n-        LinkedList<MediaUnit> ancestors = MetadataEditor.getAncestorsOfMediaUnit(selectedMediaUnit.get(),\n-                dataEditor.getWorkpiece().getMediaUnit());\n+        LinkedList<MediaUnit> ancestors = MetadataEditor.getAncestorsOfMediaUnit(selectedMediaUnit.get(), dataEditor.getWorkpiece().getMediaUnit());\n         if (ancestors.isEmpty()) {\n             // The selected element is the root node of the tree.\n             return;\n@@ -185,6 +183,8 @@ public class StructurePanel implements Serializable {\n      *\n      * @return value of selectedLogicalNode\n      */\n+\n+\n     public TreeNode getSelectedLogicalNode() {\n         return selectedLogicalNode;\n     }\n@@ -195,6 +195,8 @@ public class StructurePanel implements Serializable {\n      * @param selected\n      *          TreeNode that will be selected\n      */\n+\n+\n     public void setSelectedLogicalNode(TreeNode selected) {\n         if (Objects.nonNull(selected)) {\n             this.selectedLogicalNode = selected;\n@@ -207,6 +209,8 @@ public class StructurePanel implements Serializable {\n      *\n      * @return value of selectedPhysicalNode\n      */\n+\n+\n     public TreeNode getSelectedPhysicalNode() {\n         return selectedPhysicalNode;\n     }\n@@ -216,6 +220,8 @@ public class StructurePanel implements Serializable {\n      *\n      * @param selectedPhysicalNode as org.primefaces.model.TreeNode\n      */\n+\n+\n     public void setSelectedPhysicalNode(TreeNode selectedPhysicalNode) {\n         if (Objects.nonNull(selectedPhysicalNode)) {\n             this.selectedPhysicalNode = selectedPhysicalNode;\n@@ -223,12 +229,14 @@ public class StructurePanel implements Serializable {\n         }\n     }\n \n+\n     Optional<IncludedStructuralElement> getSelectedStructure() {\n         StructureTreeNode structureTreeNode = (StructureTreeNode) selectedLogicalNode.getData();\n         Object dataObject = structureTreeNode.getDataObject();\n         return Optional.ofNullable(dataObject instanceof IncludedStructuralElement ? (IncludedStructuralElement) dataObject : null);\n     }\n \n+\n     Optional<MediaUnit> getSelectedMediaUnit() {\n         StructureTreeNode structureTreeNode = (StructureTreeNode) selectedPhysicalNode.getData();\n         Object dataObject = structureTreeNode.getDataObject();\n@@ -241,6 +249,7 @@ public class StructurePanel implements Serializable {\n      * @param mediaUnit\n      *          MediaUnit to be selected in physical structure tree\n      */\n+\n     void selectMediaUnit(MediaUnit mediaUnit) {\n         TreeNode matchingTreeNode = getMatchingTreeNode(getPhysicalTree(), mediaUnit);\n         if (Objects.nonNull(matchingTreeNode)) {\n@@ -249,6 +258,7 @@ public class StructurePanel implements Serializable {\n         }\n     }\n \n+\n     private TreeNode getMatchingTreeNode(TreeNode parent, MediaUnit mediaUnit) {\n         TreeNode matchingTreeNode = null;\n         for (TreeNode treeNode : parent.getChildren()) {\n@@ -256,8 +266,7 @@ public class StructurePanel implements Serializable {\n                 StructureTreeNode structureTreeNode = (StructureTreeNode) treeNode.getData();\n                 if (structureTreeNode.getDataObject() instanceof MediaUnit) {\n                     MediaUnit currentMediaUnit = (MediaUnit) structureTreeNode.getDataObject();\n-                    if (Objects.nonNull(currentMediaUnit.getDivId())\n-                            && currentMediaUnit.getDivId().equals(mediaUnit.getDivId())) {\n+                    if (Objects.nonNull(currentMediaUnit.getDivId()) && currentMediaUnit.getDivId().equals(mediaUnit.getDivId())) {\n                         matchingTreeNode = treeNode;\n                         break;\n                     } else {\n@@ -277,6 +286,8 @@ public class StructurePanel implements Serializable {\n      *\n      * @return value of logicalTree\n      */\n+\n+\n     public DefaultTreeNode getLogicalTree() {\n         return this.logicalTree;\n     }\n@@ -286,6 +297,8 @@ public class StructurePanel implements Serializable {\n      *\n      * @return value of physicalTree\n      */\n+\n+\n     public DefaultTreeNode getPhysicalTree() {\n         return physicalTree;\n     }\n@@ -304,6 +317,8 @@ public class StructurePanel implements Serializable {\n      * the structure tree in their given order. The live structure of the\n      * workpiece which is stored in the root element of the structure tree.\n      */\n+\n+\n     private void preserveLogical() {\n         if (!this.logicalTree.getChildren().isEmpty()) {\n             preserveLogicalRecursive(this.logicalTree.getChildren().get(0));\n@@ -316,13 +331,14 @@ public class StructurePanel implements Serializable {\n      * aren\u2019t structures, {@code null} is returned to skip them on the level\n      * above.\n      */\n+\n+\n     private static IncludedStructuralElement preserveLogicalRecursive(TreeNode treeNode) {\n         StructureTreeNode structureTreeNode = (StructureTreeNode) treeNode.getData();\n         if (Objects.isNull(structureTreeNode) || !(structureTreeNode.getDataObject() instanceof IncludedStructuralElement)) {\n             return null;\n         }\n         IncludedStructuralElement structure = (IncludedStructuralElement) structureTreeNode.getDataObject();\n-\n         List<IncludedStructuralElement> childrenLive = structure.getChildren();\n         childrenLive.clear();\n         for (TreeNode child : treeNode.getChildren()) {\n@@ -334,19 +350,20 @@ public class StructurePanel implements Serializable {\n         return structure;\n     }\n \n+\n     private void preservePhysical() {\n         if (!physicalTree.getChildren().isEmpty()) {\n             preservePhysicalRecursive(physicalTree.getChildren().get(0));\n         }\n     }\n \n+\n     private static MediaUnit preservePhysicalRecursive(TreeNode treeNode) {\n         StructureTreeNode structureTreeNode = (StructureTreeNode) treeNode.getData();\n         if (Objects.isNull(structureTreeNode) || !(structureTreeNode.getDataObject() instanceof MediaUnit)) {\n             return null;\n         }\n         MediaUnit mediaUnit = (MediaUnit) structureTreeNode.getDataObject();\n-\n         List<MediaUnit> childrenLive = mediaUnit.getChildren();\n         childrenLive.clear();\n         for (TreeNode child : treeNode.getChildren()) {\n@@ -365,6 +382,8 @@ public class StructurePanel implements Serializable {\n      * @param keepSelection\n      *            if true, keeps the currently selected node(s)\n      */\n+\n+\n     public void show(boolean keepSelection) {\n         if (keepSelection) {\n             String logicalRowKey = null;\n@@ -395,24 +414,24 @@ public class StructurePanel implements Serializable {\n      * Loads the tree(s) into the panel and sets the selected element to the\n      * root element of the structure tree.\n      */\n+\n+\n     public void show() {\n         this.structure = dataEditor.getWorkpiece().getRootElement();\n         Pair<LinkedList<DefaultTreeNode>, Collection<View>> result = buildStructureTree();\n-\n         this.previousExpansionStatesLogicalTree = getTreeNodeExpansionStates(this.logicalTree);\n         this.logicalTree = result.getLeft().getLast();\n         updateNodeExpansionStates(this.logicalTree, this.previousExpansionStatesLogicalTree);\n-\n         this.previousExpansionStatesPhysicalTree = getTreeNodeExpansionStates(this.getPhysicalTree());\n         this.physicalTree = buildMediaTree(dataEditor.getWorkpiece().getMediaUnit());\n         updateNodeExpansionStates(this.getPhysicalTree(), this.previousExpansionStatesPhysicalTree);\n-\n         this.selectedLogicalNode = logicalTree.getChildren().get(0);\n         this.selectedPhysicalNode = physicalTree.getChildren().get(0);\n         this.previouslySelectedLogicalNode = selectedLogicalNode;\n         this.previouslySelectedPhysicalNode = selectedPhysicalNode;\n     }\n \n+\n     private void restoreSelection(String rowKey, TreeNode parentNode) {\n         for (TreeNode childNode : parentNode.getChildren()) {\n             if (Objects.nonNull(childNode) && rowKey.equals(childNode.getRowKey())) {\n@@ -432,9 +451,10 @@ public class StructurePanel implements Serializable {\n      * @return the structure tree(s) and the collection of views displayed in\n      *         the tree\n      */\n+\n+\n     private Pair<LinkedList<DefaultTreeNode>, Collection<View>> buildStructureTree() {\n         LinkedList<DefaultTreeNode> result = new LinkedList<>();\n-\n         DefaultTreeNode main = new DefaultTreeNode();\n         if (nodeStateUnknown(this.previousExpansionStatesLogicalTree, main)) {\n             main.setExpanded(true);\n@@ -445,21 +465,22 @@ public class StructurePanel implements Serializable {\n         return Pair.of(result, viewsShowingOnAChild);\n     }\n \n+\n     private Collection<View> buildStructureTreeRecursively(IncludedStructuralElement structure, TreeNode result) {\n         StructureTreeNode node;\n         if (Objects.isNull(structure.getLink())) {\n             StructuralElementViewInterface divisionView = dataEditor.getRuleset().getStructuralElementView(\n-                structure.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n+                structure.getType(),\n+                dataEditor.getAcquisitionStage(),\n+                dataEditor.getPriorityList());\n             node = new StructureTreeNode(divisionView.getLabel(), divisionView.isUndefined(), false, structure);\n         } else {\n             node = new StructureTreeNode(structure.getLink().getUri().toString(), true, true, structure);\n             for (Process child : dataEditor.getCurrentChildren()) {\n                 try {\n                     String type = ServiceManager.getProcessService().getBaseType(child);\n-                    if (child.getId() == ServiceManager.getProcessService()\n-                            .processIdFromUri(structure.getLink().getUri())) {\n-                        StructuralElementViewInterface view = dataEditor.getRuleset().getStructuralElementView(\n-                            type, dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n+                    if (child.getId() == ServiceManager.getProcessService().processIdFromUri(structure.getLink().getUri())) {\n+                        StructuralElementViewInterface view = dataEditor.getRuleset().getStructuralElementView(type, dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n                         node = new StructureTreeNode(view.getLabel(), view.isUndefined(), true, structure);\n                     }\n                 } catch (IOException e) {\n@@ -477,15 +498,16 @@ public class StructurePanel implements Serializable {\n         if (nodeStateUnknown(this.previousExpansionStatesLogicalTree, parent)) {\n             parent.setExpanded(true);\n         }\n-\n         Set<View> viewsShowingOnAChild = new HashSet<>();\n         if (this.isSeparateMedia()) {\n             for (IncludedStructuralElement child : structure.getChildren()) {\n                 viewsShowingOnAChild.addAll(buildStructureTreeRecursively(child, parent));\n             }\n         } else {\n-            orderChildrenAndViews(new ArrayList<>(structure.getChildren()), new ArrayList<>(structure.getViews()), parent,\n-                    viewsShowingOnAChild);\n+            orderChildrenAndViews(new ArrayList<>(structure.getChildren()),\n+                new ArrayList<>(structure.getViews()),\n+                parent,\n+                viewsShowingOnAChild);\n         }\n         return viewsShowingOnAChild;\n     }\n@@ -498,8 +520,9 @@ public class StructurePanel implements Serializable {\n      * @param parent DefaultTreeNode representing the logical element where all new elements should be appended\n      * @param viewsShowingOnAChild Collection of Views displayed in the combined tree\n      */\n-    private void orderChildrenAndViews(List<IncludedStructuralElement> children, List<View> views, DefaultTreeNode parent,\n-                                       Set<View> viewsShowingOnAChild) {\n+\n+\n+    private void orderChildrenAndViews(List<IncludedStructuralElement> children, List<View> views, DefaultTreeNode parent, Set<View> viewsShowingOnAChild) {\n         List<IncludedStructuralElement> temporaryChildren = new ArrayList<>(children);\n         List<View> temporaryViews = new ArrayList<>(views);\n         temporaryChildren.removeAll(Collections.singletonList(null));\n@@ -507,20 +530,16 @@ public class StructurePanel implements Serializable {\n         while (temporaryChildren.size() > 0 || temporaryViews.size() > 0) {\n             IncludedStructuralElement temporaryChild = null;\n             View temporaryView = null;\n-\n             if (temporaryChildren.size() > 0) {\n                 temporaryChild = temporaryChildren.get(0);\n             }\n             if (temporaryViews.size() > 0) {\n                 temporaryView = temporaryViews.get(0);\n             }\n-\n             if (Objects.isNull(temporaryChild) && Objects.isNull(temporaryView)) {\n                 break;\n             }\n-\n-            if (Objects.nonNull(temporaryChild) && Objects.isNull(temporaryView)\n-                    || Objects.nonNull(temporaryChild) && temporaryChild.getOrder() <= temporaryView.getMediaUnit().getOrder()) {\n+            if (Objects.nonNull(temporaryChild) && Objects.isNull(temporaryView) || Objects.nonNull(temporaryChild) && temporaryChild.getOrder() <= temporaryView.getMediaUnit().getOrder()) {\n                 viewsShowingOnAChild.addAll(buildStructureTreeRecursively(temporaryChild, parent));\n                 temporaryChildren.remove(0);\n             } else {\n@@ -533,6 +552,7 @@ public class StructurePanel implements Serializable {\n         }\n     }\n \n+\n     private String buildViewLabel(View view) {\n         String order = view.getMediaUnit().getOrder() + \" : \";\n         if (Objects.nonNull(view.getMediaUnit().getOrderlabel())) {\n@@ -558,10 +578,14 @@ public class StructurePanel implements Serializable {\n      *            parent node to which the new node is to be added\n      * @return the generated node so that you can add children to it\n      */\n+\n+\n     private DefaultTreeNode addTreeNode(String type, boolean linked, Object dataObject, DefaultTreeNode parent) {\n-        StructuralElementViewInterface structuralElementView = dataEditor.getRuleset().getStructuralElementView(type,\n-            dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n-        return addTreeNode(structuralElementView.getLabel(), structuralElementView.isUndefined(), linked, dataObject,\n+        StructuralElementViewInterface structuralElementView = dataEditor.getRuleset().getStructuralElementView(type, dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n+        return addTreeNode(structuralElementView.getLabel(),\n+            structuralElementView.isUndefined(),\n+            linked,\n+            dataObject,\n             parent);\n     }\n \n@@ -584,13 +608,11 @@ public class StructurePanel implements Serializable {\n      *            parent node to which the new node is to be added\n      * @return the generated node so that you can add children to it\n      */\n-    private DefaultTreeNode addTreeNode(String label, boolean undefined, boolean linked, Object dataObject,\n-            DefaultTreeNode parent) {\n-        DefaultTreeNode node = new DefaultTreeNode(new StructureTreeNode(label, undefined, linked, dataObject),\n-                parent);\n-        if (dataObject instanceof MediaUnit && nodeStateUnknown(this.previousExpansionStatesPhysicalTree, node)\n-                || dataObject instanceof IncludedStructuralElement\n-                && nodeStateUnknown(this.previousExpansionStatesLogicalTree, node)) {\n+\n+\n+    private DefaultTreeNode addTreeNode(String label, boolean undefined, boolean linked, Object dataObject, DefaultTreeNode parent) {\n+        DefaultTreeNode node = new DefaultTreeNode(new StructureTreeNode(label, undefined, linked, dataObject), parent);\n+        if (dataObject instanceof MediaUnit && nodeStateUnknown(this.previousExpansionStatesPhysicalTree, node) || dataObject instanceof IncludedStructuralElement && nodeStateUnknown(this.previousExpansionStatesLogicalTree, node)) {\n             node.setExpanded(true);\n         }\n         return node;\n@@ -609,6 +631,8 @@ public class StructurePanel implements Serializable {\n      *            list of structure trees, in this list the parent links are\n      *            inserted on top, therefore LinkedList\n      */\n+\n+\n     private void addParentLinksRecursive(Process child, LinkedList<DefaultTreeNode> result) {\n         Process parent = child.getParent();\n         // Termination condition of recursion, if the process has no parent\n@@ -622,8 +646,7 @@ public class StructurePanel implements Serializable {\n         }\n         try {\n             IncludedStructuralElement rootElement = ServiceManager.getMetsService().loadWorkpiece(uri).getRootElement();\n-            List<IncludedStructuralElement> includedStructuralElementList\n-                    = determineIncludedStructuralElementPathToChildRecursive(rootElement, child.getId());\n+            List<IncludedStructuralElement> includedStructuralElementList = determineIncludedStructuralElementPathToChildRecursive(rootElement, child.getId());\n             DefaultTreeNode parentNode = tree;\n             if (includedStructuralElementList.isEmpty()) {\n                 /*\n@@ -672,13 +695,12 @@ public class StructurePanel implements Serializable {\n      *            number of the record of the process of the child\n      *\n      */\n-    private static List<IncludedStructuralElement> determineIncludedStructuralElementPathToChildRecursive(\n-            IncludedStructuralElement includedStructuralElement, int number) {\n \n+\n+    private static List<IncludedStructuralElement> determineIncludedStructuralElementPathToChildRecursive(IncludedStructuralElement includedStructuralElement, int number) {\n         if (Objects.nonNull(includedStructuralElement.getLink())) {\n             try {\n-                if (ServiceManager.getProcessService()\n-                        .processIdFromUri(includedStructuralElement.getLink().getUri()) == number) {\n+                if (ServiceManager.getProcessService().processIdFromUri(includedStructuralElement.getLink().getUri()) == number) {\n                     LinkedList<IncludedStructuralElement> linkedIncludedStructuralElements = new LinkedList<>();\n                     linkedIncludedStructuralElements.add(includedStructuralElement);\n                     return linkedIncludedStructuralElements;\n@@ -688,8 +710,7 @@ public class StructurePanel implements Serializable {\n             }\n         }\n         for (IncludedStructuralElement includedStructuralElementChild : includedStructuralElement.getChildren()) {\n-            List<IncludedStructuralElement> includedStructuralElementList = determineIncludedStructuralElementPathToChildRecursive(\n-                includedStructuralElementChild, number);\n+            List<IncludedStructuralElement> includedStructuralElementList = determineIncludedStructuralElementPathToChildRecursive(includedStructuralElementChild, number);\n             if (!includedStructuralElementList.isEmpty()) {\n                 includedStructuralElementList.add(0, includedStructuralElement);\n                 return includedStructuralElementList;\n@@ -705,6 +726,8 @@ public class StructurePanel implements Serializable {\n      *            root of media units to show on the tree\n      * @return the media tree\n      */\n+\n+\n     private DefaultTreeNode buildMediaTree(MediaUnit mediaRoot) {\n         DefaultTreeNode rootTreeNode = new DefaultTreeNode();\n         if (nodeStateUnknown(this.previousExpansionStatesPhysicalTree, rootTreeNode)) {\n@@ -714,12 +737,13 @@ public class StructurePanel implements Serializable {\n         return rootTreeNode;\n     }\n \n+\n     private void buildMediaTreeRecursively(MediaUnit mediaUnit, DefaultTreeNode parentTreeNode) {\n         StructuralElementViewInterface divisionView = dataEditor.getRuleset().getStructuralElementView(\n-                mediaUnit.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n-        DefaultTreeNode treeNode = addTreeNode(\"page\".equals(mediaUnit.getType())\n-                        ? divisionView.getLabel().concat(\" \" + mediaUnit.getOrderlabel()) : divisionView.getLabel(),\n-                false, false, mediaUnit, parentTreeNode);\n+            mediaUnit.getType(),\n+            dataEditor.getAcquisitionStage(),\n+            dataEditor.getPriorityList());\n+        DefaultTreeNode treeNode = addTreeNode(\"page\".equals(mediaUnit.getType()) ? divisionView.getLabel().concat(\" \" + mediaUnit.getOrderlabel()) : divisionView.getLabel(), false, false, mediaUnit, parentTreeNode);\n         if (nodeStateUnknown(this.previousExpansionStatesPhysicalTree, treeNode)) {\n             treeNode.setExpanded(true);\n         }\n@@ -736,6 +760,8 @@ public class StructurePanel implements Serializable {\n      * @param event\n      *            NodeSelectEvent triggered by logical node being selected\n      */\n+\n+\n     public void treeLogicalSelect(NodeSelectEvent event) {\n         /*\n          * The newly selected element has already been set in 'selectedLogicalNode' by\n@@ -756,6 +782,8 @@ public class StructurePanel implements Serializable {\n      * @param event\n      *            NodeSelectEvent triggered by logical node being selected\n      */\n+\n+\n     public void treePhysicalSelect(NodeSelectEvent event) {\n         /*\n          * The newly selected element has already been set in 'selectedPhysicalNode' by\n@@ -775,6 +803,7 @@ public class StructurePanel implements Serializable {\n         this.updatePhysicalNodeSelection(galleryMediaContent);\n     }\n \n+\n     private void updatePhysicalNodeSelection(TreeNode treeNode) {\n         if (this.isSeparateMedia()) {\n             if (Objects.nonNull(previouslySelectedPhysicalNode)) {\n@@ -864,6 +893,8 @@ public class StructurePanel implements Serializable {\n      * @param treeNode the logical structure tree\n      * @return the TreeNode that will be selected\n      */\n+\n+\n     public TreeNode updateLogicalNodeSelectionRecursive(IncludedStructuralElement structure, TreeNode treeNode) {\n         TreeNode matchingTreeNode = null;\n         for (TreeNode currentTreeNode : treeNode.getChildren()) {\n@@ -880,6 +911,7 @@ public class StructurePanel implements Serializable {\n         return matchingTreeNode;\n     }\n \n+\n     private TreeNode updatePhysicalNodeSelectionRecursive(GalleryMediaContent galleryMediaContent, TreeNode treeNode) {\n         TreeNode matchingTreeNode = null;\n         for (TreeNode currentTreeNode : treeNode.getChildren()) {\n@@ -897,15 +929,13 @@ public class StructurePanel implements Serializable {\n         return matchingTreeNode;\n     }\n \n-    private TreeNode updatePhysSelectionInLogTreeRecursive(MediaUnit selectedMediaUnit, IncludedStructuralElement parentElement,\n-                                                           TreeNode treeNode) {\n+\n+    private TreeNode updatePhysSelectionInLogTreeRecursive(MediaUnit selectedMediaUnit, IncludedStructuralElement parentElement, TreeNode treeNode) {\n         TreeNode matchingTreeNode = null;\n         for (TreeNode currentTreeNode : treeNode.getChildren()) {\n-            if (treeNode.getData() instanceof StructureTreeNode\n-                    && ((StructureTreeNode) treeNode.getData()).getDataObject().equals(parentElement)\n+            if (treeNode.getData() instanceof StructureTreeNode && ((StructureTreeNode) treeNode.getData()).getDataObject().equals(parentElement)\n                     && currentTreeNode.getData() instanceof StructureTreeNode\n-                    && ((StructureTreeNode) currentTreeNode.getData()).getDataObject() instanceof View\n-                    && ((View) ((StructureTreeNode) currentTreeNode.getData()).getDataObject()).getMediaUnit().equals(selectedMediaUnit)) {\n+                    && ((StructureTreeNode) currentTreeNode.getData()).getDataObject() instanceof View && ((View) ((StructureTreeNode) currentTreeNode.getData()).getDataObject()).getMediaUnit().equals(selectedMediaUnit)) {\n                 currentTreeNode.setSelected(true);\n                 matchingTreeNode = currentTreeNode;\n             } else {\n@@ -919,6 +949,7 @@ public class StructurePanel implements Serializable {\n         return matchingTreeNode;\n     }\n \n+\n     private boolean treeNodeMatchesGalleryMediaContent(GalleryMediaContent galleryMediaContent, TreeNode treeNode) {\n         if (treeNode.getData() instanceof StructureTreeNode) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) treeNode.getData();\n@@ -936,6 +967,7 @@ public class StructurePanel implements Serializable {\n         return false;\n     }\n \n+\n     private boolean treeNodeMatchesStructure(IncludedStructuralElement structure, TreeNode treeNode) {\n         if (Objects.nonNull(treeNode) && treeNode.getData() instanceof StructureTreeNode) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) treeNode.getData();\n@@ -953,6 +985,8 @@ public class StructurePanel implements Serializable {\n      * @param event\n      *          the NodeCollapseEvent triggered in the corresponding structure tree\n      */\n+\n+\n     public void onNodeCollapse(NodeCollapseEvent event) {\n         if (Objects.nonNull(event) && Objects.nonNull(event.getTreeNode())) {\n             event.getTreeNode().setExpanded(false);\n@@ -966,6 +1000,8 @@ public class StructurePanel implements Serializable {\n      * @param event\n      *          the NodeExpandEvent triggered in the corresponding structure tree\n      */\n+\n+\n     public void onNodeExpand(NodeExpandEvent event) {\n         if (Objects.nonNull(event) && Objects.nonNull(event.getTreeNode())) {\n             event.getTreeNode().setExpanded(true);\n@@ -980,30 +1016,26 @@ public class StructurePanel implements Serializable {\n      * @param event TreeDragDropEvent\n      *              event triggering this callback function\n      */\n-    public void onDragDrop(TreeDragDropEvent event) {\n \n+\n+    public void onDragDrop(TreeDragDropEvent event) {\n         Object dragNodeObject = event.getDragNode().getData();\n         Object dropNodeObject = event.getDropNode().getData();\n-\n         expandNode(event.getDropNode());\n-\n         try {\n             StructureTreeNode dropNode = (StructureTreeNode) dropNodeObject;\n             StructureTreeNode dragNode = (StructureTreeNode) dragNodeObject;\n-            if (dragNode.getDataObject() instanceof IncludedStructuralElement\n-                    && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n+            if (dragNode.getDataObject() instanceof IncludedStructuralElement && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n                 checkLogicalDragDrop(dragNode, dropNode);\n-            } else if (dragNode.getDataObject() instanceof MediaUnit\n-                    && dropNode.getDataObject() instanceof MediaUnit) {\n+            } else if (dragNode.getDataObject() instanceof MediaUnit && dropNode.getDataObject() instanceof MediaUnit) {\n                 checkPhysicalDragDrop(dragNode, dropNode);\n-            } else if (dragNode.getDataObject() instanceof View\n-                     && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n-                movePageNode(event, dropNode, dragNode);\n-            } else {\n-                Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\", Arrays.asList(\n-                        dragNode.getLabel(), dropNode.getLabel())));\n-                show();\n-            }\n+            } else if (dragNode.getDataObject() instanceof View && dropNode.getDataObject() instanceof IncludedStructuralElement) {\n+                       movePageNode(event, dropNode, dragNode);\n+                   } else {\n+                       Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\",\n+                           Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n+                       show();\n+                   }\n         } catch (Exception exception) {\n             logger.error(exception.getLocalizedMessage());\n         }\n@@ -1016,13 +1048,15 @@ public class StructurePanel implements Serializable {\n      *          View for which the IncludedStructuralElement is determined\n      * @return the IncludedStructuralElement to which the given View is assigned\n      */\n+\n+\n     IncludedStructuralElement getPageStructure(View view, IncludedStructuralElement parent) {\n         IncludedStructuralElement resultElement = null;\n         for (IncludedStructuralElement child : parent.getChildren()) {\n             if (child.getViews().contains(view)) {\n                 resultElement = child;\n             } else {\n-                resultElement =  getPageStructure(view, child);\n+                resultElement = getPageStructure(view, child);\n             }\n             if (Objects.nonNull(resultElement)) {\n                 break;\n@@ -1042,6 +1076,8 @@ public class StructurePanel implements Serializable {\n      * @param dragNode\n      *          StructureTreeNode containing the View/Page that is moved\n      */\n+\n+\n     private void movePageNode(TreeDragDropEvent event, StructureTreeNode dropNode, StructureTreeNode dragNode) throws Exception {\n         TreeNode dragParent = event.getDragNode().getParent();\n         if (dragParent.getData() instanceof StructureTreeNode) {\n@@ -1055,12 +1091,12 @@ public class StructurePanel implements Serializable {\n                 this.dataEditor.getGalleryPanel().updateStripes();\n                 return;\n             } else {\n-                Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\", Arrays.asList(\n-                        dragNode.getLabel(), dropNode.getLabel())));\n+                Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\",\n+                    Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n             }\n         } else {\n-            Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\", Arrays.asList(\n-                    dragNode.getLabel(), dropNode.getLabel())));\n+            Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.dragnDropError\",\n+                Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n         }\n         show();\n     }\n@@ -1073,19 +1109,15 @@ public class StructurePanel implements Serializable {\n      * @param insertionIndex index at which the MediaUnits are added to the existing List of MediaUnits.\n      *                       The value -1 represents the end of the list.\n      */\n+\n     void reorderMediaUnits(IncludedStructuralElement toElement,\n-                           List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n-                           int insertionIndex) {\n+                           List<Pair<View, IncludedStructuralElement>> elementsToBeMoved, int insertionIndex) {\n         int physicalInsertionIndex;\n-        List<MediaUnit> mediaUnitsToBeMoved = elementsToBeMoved.stream()\n-                .map(e -> e.getLeft().getMediaUnit())\n-                .collect(Collectors.toList());\n-\n+        List<MediaUnit> mediaUnitsToBeMoved = elementsToBeMoved.stream().map(e -> e.getLeft().getMediaUnit()).collect(Collectors.toList());\n         if (insertionIndex > toElement.getViews().size()) {\n             Helper.setErrorMessage(\"Unsupported drag'n'drop operation: Insertion index exceeds list.\");\n             insertionIndex = -1;\n         }\n-\n         if (insertionIndex < 0 || toElement.getViews().size() == 0) {\n             // no insertion position was specified or the element does not contain any pages yet\n             physicalInsertionIndex = toElement.getOrder() - 1;\n@@ -1102,11 +1134,7 @@ public class StructurePanel implements Serializable {\n                 physicalInsertionIndex = toElement.getViews().get(insertionIndex).getMediaUnit().getOrder() - 1;\n             }\n         }\n-\n-        if (physicalInsertionIndex > mediaUnitsToBeMoved.stream()\n-                .map(MediaUnit::getOrder)\n-                .collect(Collectors.summarizingInt(Integer::intValue))\n-                .getMin() - 1) {\n+        if (physicalInsertionIndex > mediaUnitsToBeMoved.stream().map(MediaUnit::getOrder).collect(Collectors.summarizingInt(Integer::intValue)).getMin() - 1) {\n             int finalInsertionIndex = physicalInsertionIndex;\n             physicalInsertionIndex -= (int) mediaUnitsToBeMoved.stream().filter(m -> m.getOrder() - 1 < finalInsertionIndex).count();\n         }\n@@ -1128,6 +1156,7 @@ public class StructurePanel implements Serializable {\n      *                  logical elements.\n      * @param elementsToBeMoved List of physical elements to be moved\n      */\n+\n     void changePhysicalOrderFields(IncludedStructuralElement toElement, List<Pair<View, IncludedStructuralElement>> elementsToBeMoved) {\n         ServiceManager.getFileService().renumberMediaUnits(dataEditor.getWorkpiece(), false);\n     }\n@@ -1137,14 +1166,16 @@ public class StructurePanel implements Serializable {\n      * @param toElement logical element the pages will be assigned to\n      * @param elementsToBeMoved physical elements which are moved\n      */\n-    void changeLogicalOrderFields(IncludedStructuralElement toElement, List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n-                                  int insertionIndex) {\n+\n+    void changeLogicalOrderFields(IncludedStructuralElement toElement,\n+                                  List<Pair<View, IncludedStructuralElement>> elementsToBeMoved, int insertionIndex) {\n         HashMap<Integer, List<IncludedStructuralElement>> logicalElementsByOrder = new HashMap<>();\n         for (IncludedStructuralElement logicalElement : dataEditor.getWorkpiece().getAllIncludedStructuralElements()) {\n-            if (logicalElementsByOrder.containsKey(logicalElement.getOrder()))  {\n+            if (logicalElementsByOrder.containsKey(logicalElement.getOrder())) {\n                 logicalElementsByOrder.get(logicalElement.getOrder()).add(logicalElement);\n             } else {\n-                logicalElementsByOrder.put(logicalElement.getOrder(), new LinkedList<>(Collections.singletonList(logicalElement)));\n+                logicalElementsByOrder.put(logicalElement.getOrder(),\n+                    new LinkedList<>(Collections.singletonList(logicalElement)));\n             }\n         }\n \n@@ -1156,7 +1187,6 @@ public class StructurePanel implements Serializable {\n         The Order values of elements located after the target element have to be modified by the size of ordersAffectedByMove - i.\n         (ordersAffectedByMove equals to the number of moved pages + the target element.)\n          */\n-\n         for (Map.Entry<Integer, List<IncludedStructuralElement>> entry : logicalElementsByOrder.entrySet()) {\n             for (int i = 0; i < ordersAffectedByMove.size() - 1; i++) {\n                 if (ordersAffectedByMove.get(i) < entry.getKey() && entry.getKey() < ordersAffectedByMove.get(i + 1)) {\n@@ -1170,8 +1200,7 @@ public class StructurePanel implements Serializable {\n             // check if elements exist with the same order like toElement (the toElememt itself might be affected as well)\n             if (entry.getKey() == toElement.getOrder()) {\n                 List<IncludedStructuralElement> beforeToElement = entry.getValue().subList(0, entry.getValue().indexOf(toElement) + 1);\n-                List<IncludedStructuralElement> afterToElement = entry.getValue().subList(entry.getValue().indexOf(toElement) + 1,\n-                        entry.getValue().size());\n+                List<IncludedStructuralElement> afterToElement = entry.getValue().subList(entry.getValue().indexOf(toElement) + 1, entry.getValue().size());\n                 /* toElement at index 0 means we're in an edge case: toElement is the first order which is affected (no pages with smaller\n                 order affected) and its order will not change, nor will other elements with the same order before it. */\n                 if (ordersAffectedByMove.indexOf(toElement.getOrder()) > 0) {\n@@ -1180,22 +1209,21 @@ public class StructurePanel implements Serializable {\n                 /* Order of elements directly after toElement (with same order) only have to be update if the pages are inserted at the\n                 first position. If they are inserted after any pages, the order of elements in afterToElement will not change. */\n                 if (insertionIndex == 0) {\n-                    updateOrder(afterToElement, elementsToBeMoved.size() - ordersAffectedByMove.indexOf(toElement.getOrder()));\n+                    updateOrder(afterToElement,\n+                        elementsToBeMoved.size() - ordersAffectedByMove.indexOf(toElement.getOrder()));\n                 }\n             }\n         }\n     }\n \n+\n     private List<Integer> getOrdersAffectedByMove(List<Pair<View, IncludedStructuralElement>> views, IncludedStructuralElement toElement) {\n-        Set<Integer> ordersAffectedByMove = views.stream()\n-                .map(e -> e.getLeft().getMediaUnit().getOrder())\n-                .collect(Collectors.toSet());\n+        Set<Integer> ordersAffectedByMove = views.stream().map(e -> e.getLeft().getMediaUnit().getOrder()).collect(Collectors.toSet());\n         ordersAffectedByMove.add(toElement.getOrder());\n-        return ordersAffectedByMove.stream()\n-                .sorted()\n-                .collect(Collectors.toList());\n+        return ordersAffectedByMove.stream().sorted().collect(Collectors.toList());\n     }\n \n+\n     private void updateOrder(List<IncludedStructuralElement> elementsToBeUpdated, int delta) {\n         for (IncludedStructuralElement element : elementsToBeUpdated) {\n             element.setOrder(element.getOrder() + delta);\n@@ -1213,39 +1241,35 @@ public class StructurePanel implements Serializable {\n      * @param insertionIndex\n      *          Index where views will be inserted into toElement's views\n      */\n+\n     void moveViews(IncludedStructuralElement toElement,\n-                   List<Pair<View, IncludedStructuralElement>> elementsToBeMoved,\n-                   int insertionIndex) {\n-        List<View> views = elementsToBeMoved.stream()\n-                .map(Pair::getKey)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n+                   List<Pair<View, IncludedStructuralElement>> elementsToBeMoved, int insertionIndex) {\n+        List<View> views = elementsToBeMoved.stream().map(Pair::getKey).filter(Objects::nonNull).collect(Collectors.toList());\n         if (insertionIndex < 0 || insertionIndex == toElement.getViews().size()) {\n             toElement.getViews().addAll(views);\n         } else {\n             toElement.getViews().addAll(insertionIndex, views);\n         }\n-\n         for (Pair<View, IncludedStructuralElement> elementToBeMoved : elementsToBeMoved) {\n-            boolean removeLastOccurrenceOfView = toElement.equals(elementToBeMoved.getValue())\n-                    && insertionIndex < elementToBeMoved.getValue().getViews().lastIndexOf(elementToBeMoved.getKey());\n-            dataEditor.unassignView(elementToBeMoved.getValue(), elementToBeMoved.getKey(), removeLastOccurrenceOfView);\n+            boolean removeLastOccurrenceOfView = toElement.equals(elementToBeMoved.getValue()) && insertionIndex < elementToBeMoved.getValue().getViews().lastIndexOf(elementToBeMoved.getKey());\n+            dataEditor.unassignView(elementToBeMoved.getValue(),\n+                elementToBeMoved.getKey(),\n+                removeLastOccurrenceOfView);\n             elementToBeMoved.getKey().getMediaUnit().getIncludedStructuralElements().add(toElement);\n         }\n     }\n \n-    private void checkLogicalDragDrop(StructureTreeNode dragNode, StructureTreeNode dropNode) throws Exception {\n \n+    private void checkLogicalDragDrop(StructureTreeNode dragNode, StructureTreeNode dropNode) throws Exception {\n         IncludedStructuralElement dragStructure = (IncludedStructuralElement) dragNode.getDataObject();\n         IncludedStructuralElement dropStructure = (IncludedStructuralElement) dropNode.getDataObject();\n-\n         StructuralElementViewInterface divisionView = dataEditor.getRuleset().getStructuralElementView(\n-                dropStructure.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n-\n+            dropStructure.getType(),\n+            dataEditor.getAcquisitionStage(),\n+            dataEditor.getPriorityList());\n         LinkedList<IncludedStructuralElement> dragParents;\n         if (divisionView.getAllowedSubstructuralElements().containsKey(dragStructure.getType())) {\n-            dragParents = MetadataEditor.getAncestorsOfStructure(dragStructure,\n-                    dataEditor.getWorkpiece().getRootElement());\n+            dragParents = MetadataEditor.getAncestorsOfStructure(dragStructure, dataEditor.getWorkpiece().getRootElement());\n             if (!dragParents.isEmpty()) {\n                 IncludedStructuralElement parentStructure = dragParents.get(dragParents.size() - 1);\n                 if (parentStructure.getChildren().contains(dragStructure)) {\n@@ -1258,33 +1282,31 @@ public class StructurePanel implements Serializable {\n                     return;\n                 } else {\n                     Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.childNotContainedError\",\n-                            Collections.singletonList(dragNode.getLabel())));\n+                        Collections.singletonList(dragNode.getLabel())));\n                 }\n             } else {\n-                Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.noParentsError\",\n-                        Collections.singletonList(dragNode.getLabel())));\n+                Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.noParentsError\", Collections.singletonList(dragNode.getLabel())));\n             }\n         } else {\n             Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.forbiddenChildElement\",\n-                    Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n+                Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n         }\n         show();\n     }\n \n-    private void checkPhysicalDragDrop(StructureTreeNode dragNode, StructureTreeNode dropNode) {\n \n+    private void checkPhysicalDragDrop(StructureTreeNode dragNode, StructureTreeNode dropNode) {\n         MediaUnit dragUnit = (MediaUnit) dragNode.getDataObject();\n         MediaUnit dropUnit = (MediaUnit) dropNode.getDataObject();\n-\n         StructuralElementViewInterface divisionView = dataEditor.getRuleset().getStructuralElementView(\n-                dropUnit.getType(), dataEditor.getAcquisitionStage(), dataEditor.getPriorityList());\n-\n+            dropUnit.getType(),\n+            dataEditor.getAcquisitionStage(),\n+            dataEditor.getPriorityList());\n         LinkedList<MediaUnit> dragParents;\n         if (divisionView.getAllowedSubstructuralElements().containsKey(dragUnit.getType())) {\n             dragParents = MetadataEditor.getAncestorsOfMediaUnit(dragUnit, dataEditor.getWorkpiece().getMediaUnit());\n             if (dragParents.isEmpty()) {\n-                Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.noParentsError\",\n-                        Collections.singletonList(dragNode.getLabel())));\n+                Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.noParentsError\", Collections.singletonList(dragNode.getLabel())));\n             } else {\n                 MediaUnit parentUnit = dragParents.get(dragParents.size() - 1);\n                 if (parentUnit.getChildren().contains(dragUnit)) {\n@@ -1292,16 +1314,17 @@ public class StructurePanel implements Serializable {\n                     return;\n                 } else {\n                     Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.childNotContainedError\",\n-                            Collections.singletonList(dragUnit.getType())));\n+                        Collections.singletonList(dragUnit.getType())));\n                 }\n             }\n         } else {\n             Helper.setErrorMessage(Helper.getTranslation(\"dataEditor.forbiddenChildElement\",\n-                    Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n+                Arrays.asList(dragNode.getLabel(), dropNode.getLabel())));\n         }\n         show();\n     }\n \n+\n     private void preserveLogicalAndPhysical() throws UnknownTreeNodeDataException {\n         if (!this.logicalTree.getChildren().isEmpty()) {\n             order = 1;\n@@ -1313,6 +1336,7 @@ public class StructurePanel implements Serializable {\n         }\n     }\n \n+\n     private IncludedStructuralElement preserveLogicalAndPhysicalRecursive(TreeNode treeNode) throws UnknownTreeNodeDataException {\n         StructureTreeNode structureTreeNode = (StructureTreeNode) treeNode.getData();\n         if (Objects.isNull(structureTreeNode) || !(structureTreeNode.getDataObject() instanceof IncludedStructuralElement)) {\n@@ -1357,15 +1381,15 @@ public class StructurePanel implements Serializable {\n      * @return\n      *          whether metadata structure should be displayed in separate structure trees or not\n      */\n+\n+\n     public boolean isSeparateMedia() {\n-        if (Objects.nonNull(this.dataEditor.getCurrentTask())\n-                && this.dataEditor.getCurrentTask().isTypeMetadata()\n+        if (Objects.nonNull(this.dataEditor.getCurrentTask()) && this.dataEditor.getCurrentTask().isTypeMetadata()\n                 && this.dataEditor.getCurrentTask().isSeparateStructure()) {\n             SecurityUserDetails authenticatedUser = ServiceManager.getUserService().getAuthenticatedUser();\n             if (Objects.nonNull(authenticatedUser)) {\n                 int userID = authenticatedUser.getId();\n-                return Objects.nonNull(this.dataEditor.getCurrentTask().getProcessingUser())\n-                        && Objects.equals(this.dataEditor.getCurrentTask().getProcessingUser().getId(), userID);\n+                return Objects.nonNull(this.dataEditor.getCurrentTask().getProcessingUser()) && Objects.equals(this.dataEditor.getCurrentTask().getProcessingUser().getId(), userID);\n             } else {\n                 return true;\n             }\n@@ -1374,6 +1398,7 @@ public class StructurePanel implements Serializable {\n         }\n     }\n \n+\n     private void expandNode(TreeNode node) {\n         if (Objects.nonNull(node)) {\n             node.setExpanded(true);\n@@ -1381,6 +1406,7 @@ public class StructurePanel implements Serializable {\n         }\n     }\n \n+\n     private HashMap<IncludedStructuralElement, Boolean> getTreeNodeExpansionStates(DefaultTreeNode tree) {\n         if (Objects.nonNull(tree) && tree.getChildCount() == 1) {\n             TreeNode treeRoot = tree.getChildren().get(0);\n@@ -1392,8 +1418,8 @@ public class StructurePanel implements Serializable {\n         return new HashMap<>();\n     }\n \n-    private HashMap<IncludedStructuralElement, Boolean> getTreeNodeExpansionStatesRecursively(TreeNode treeNode,\n-            HashMap<IncludedStructuralElement, Boolean> expansionStates) {\n+\n+    private HashMap<IncludedStructuralElement, Boolean> getTreeNodeExpansionStatesRecursively(TreeNode treeNode, HashMap<IncludedStructuralElement, Boolean> expansionStates) {\n         if (Objects.nonNull(treeNode)) {\n             IncludedStructuralElement structureData = getTreeNodeStructuralElement(treeNode);\n             if (Objects.nonNull(structureData)) {\n@@ -1406,12 +1432,15 @@ public class StructurePanel implements Serializable {\n         return expansionStates;\n     }\n \n+\n     private void updateNodeExpansionStates(DefaultTreeNode tree, HashMap<IncludedStructuralElement, Boolean> expansionStates) {\n-        if (Objects.nonNull(tree) && Objects.nonNull(expansionStates) && !expansionStates.isEmpty()) {\n+        if (Objects.nonNull(tree) && Objects.nonNull(expansionStates)\n+                && !expansionStates.isEmpty()) {\n             updateNodeExpansionStatesRecursively(tree, expansionStates);\n         }\n     }\n \n+\n     private void updateNodeExpansionStatesRecursively(TreeNode treeNode, HashMap<IncludedStructuralElement, Boolean> expansionStates) {\n         IncludedStructuralElement element = getTreeNodeStructuralElement(treeNode);\n         if (Objects.nonNull(element) && expansionStates.containsKey(element)) {\n@@ -1422,11 +1451,13 @@ public class StructurePanel implements Serializable {\n         }\n     }\n \n+\n     private boolean nodeStateUnknown(HashMap<IncludedStructuralElement, Boolean> expansionStates, TreeNode treeNode) {\n         IncludedStructuralElement element = getTreeNodeStructuralElement(treeNode);\n         return !Objects.nonNull(expansionStates) || (Objects.nonNull(element) && !expansionStates.containsKey(element));\n     }\n \n+\n     private IncludedStructuralElement getTreeNodeStructuralElement(TreeNode treeNode) {\n         if (treeNode.getData() instanceof StructureTreeNode) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) treeNode.getData();\n@@ -1442,6 +1473,8 @@ public class StructurePanel implements Serializable {\n      *\n      * @return value of severalAssignments\n      */\n+\n+\n     List<MediaUnit> getSeveralAssignments() {\n         return severalAssignments;\n     }\n@@ -1454,9 +1487,10 @@ public class StructurePanel implements Serializable {\n      * @param treeNode object to find the index for\n      * @return index of the StructureTreeNode's MediaUnit if present in the List of several assignments, or -1 if not present in the list.\n      */\n+\n+\n     public int getMultipleAssignmentsIndex(StructureTreeNode treeNode) {\n-        if (treeNode.getDataObject() instanceof View\n-                && Objects.nonNull(((View) treeNode.getDataObject()).getMediaUnit())) {\n+        if (treeNode.getDataObject() instanceof View && Objects.nonNull(((View) treeNode.getDataObject()).getMediaUnit())) {\n             return severalAssignments.indexOf(((View) treeNode.getDataObject()).getMediaUnit());\n         }\n         return -1;\n@@ -1467,8 +1501,10 @@ public class StructurePanel implements Serializable {\n      *\n      * @return {@code true} when the MediaUnit is assigned to more than one logical element\n      */\n+\n+\n     public boolean isAssignedSeveralTimes() {\n-        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof  StructureTreeNode) {\n+        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof StructureTreeNode) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) selectedLogicalNode.getData();\n             if (structureTreeNode.getDataObject() instanceof View) {\n                 View view = (View) structureTreeNode.getDataObject();\n@@ -1482,16 +1518,17 @@ public class StructurePanel implements Serializable {\n      * Check if the selected Node's MediaUnit can be assigned to the next logical element in addition to the current assignment.\n      * @return {@code true} if the MediaUnit can be assigned to the next IncludedStructuralElement\n      */\n+\n+\n     public boolean isAssignableSeveralTimes() {\n-        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof  StructureTreeNode) {\n+        if (Objects.nonNull(selectedLogicalNode) && selectedLogicalNode.getData() instanceof StructureTreeNode) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) selectedLogicalNode.getData();\n             if (structureTreeNode.getDataObject() instanceof View) {\n                 List<TreeNode> logicalNodeSiblings = selectedLogicalNode.getParent().getParent().getChildren();\n                 int logicalNodeIndex = logicalNodeSiblings.indexOf(selectedLogicalNode.getParent());\n                 List<TreeNode> viewSiblbings = selectedLogicalNode.getParent().getChildren();\n                 // check for selected node's positions and siblings after selected node's parent\n-                if (viewSiblbings.indexOf(selectedLogicalNode) == viewSiblbings.size() - 1\n-                        && logicalNodeSiblings.size() > logicalNodeIndex + 1) {\n+                if (viewSiblbings.indexOf(selectedLogicalNode) == viewSiblbings.size() - 1 && logicalNodeSiblings.size() > logicalNodeIndex + 1) {\n                     TreeNode nextSibling = logicalNodeSiblings.get(logicalNodeIndex + 1);\n                     if (nextSibling.getData() instanceof StructureTreeNode) {\n                         StructureTreeNode structureTreeNodeSibling = (StructureTreeNode) nextSibling.getData();\n@@ -1500,13 +1537,14 @@ public class StructurePanel implements Serializable {\n                 }\n             }\n         }\n-\n         return false;\n     }\n \n     /**\n      * Assign selected Node's MediaUnit to the next IncludedStructuralElement.\n      */\n+\n+\n     public void assign() {\n         if (isAssignableSeveralTimes()) {\n             View view = (View) ((StructureTreeNode) selectedLogicalNode.getData()).getDataObject();\n@@ -1528,6 +1566,8 @@ public class StructurePanel implements Serializable {\n      * Unassign the selected Node's MediaUnit from the IncludedStructuralElement parent at the selected position.\n      * This does not remove it from other IncludedStructuralElements.\n      */\n+\n+\n     public void unassign() {\n         if (isAssignedSeveralTimes()) {\n             StructureTreeNode structureTreeNode = (StructureTreeNode) selectedLogicalNode.getData();\n@@ -1535,8 +1575,7 @@ public class StructurePanel implements Serializable {\n             if (selectedLogicalNode.getParent().getData() instanceof StructureTreeNode) {\n                 StructureTreeNode structureTreeNodeParent = (StructureTreeNode) selectedLogicalNode.getParent().getData();\n                 if (structureTreeNodeParent.getDataObject() instanceof IncludedStructuralElement) {\n-                    IncludedStructuralElement includedStructuralElement =\n-                            (IncludedStructuralElement) structureTreeNodeParent.getDataObject();\n+                    IncludedStructuralElement includedStructuralElement = (IncludedStructuralElement) structureTreeNodeParent.getDataObject();\n                     dataEditor.unassignView(includedStructuralElement, view, false);\n                     if (view.getMediaUnit().getIncludedStructuralElements().size() <= 1) {\n                         severalAssignments.remove(view.getMediaUnit());\n@@ -1547,4 +1586,4 @@ public class StructurePanel implements Serializable {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 260
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "823",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "823",
                    "column": "148",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "823",
                    "column": "148",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "823",
                    "column": "149",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/40/StructurePanel.java\nindex 112670e4717..5f3185f8614 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/40/StructurePanel.java\n@@ -820,9 +820,7 @@ public class StructurePanel implements Serializable {\n                 if (this.isSeparateMedia()) {\n                     selectedTreeNode = updateLogicalNodeSelectionRecursive(structure, logicalTree);\n                 } else {\n-                    selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit(), structure, logicalTree);\n-                }\n-                if (Objects.nonNull(selectedTreeNode)) {\n+                    selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit( ), structure,logicalTree);}if (Objects.nonNull(selectedTreeNode)) {\n                     setSelectedLogicalNode(selectedTreeNode);\n                     try {\n                         dataEditor.switchStructure(selectedTreeNode.getData(), false);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "822",
                    "column": "24",
                    "severity": "warning",
                    "message": "WhitespaceAround: '{' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "822",
                    "column": "25",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 16, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "824",
                    "column": "17",
                    "severity": "warning",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                },
                {
                    "line": "825",
                    "column": "13",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "826",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/40/StructurePanel.java\nindex 112670e4717..182a6ea0209 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/40/StructurePanel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/40/StructurePanel.java\n@@ -819,10 +819,11 @@ public class StructurePanel implements Serializable {\n                 TreeNode selectedTreeNode;\n                 if (this.isSeparateMedia()) {\n                     selectedTreeNode = updateLogicalNodeSelectionRecursive(structure, logicalTree);\n-                } else {\n-                    selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView().getMediaUnit(), structure, logicalTree);\n-                }\n-                if (Objects.nonNull(selectedTreeNode)) {\n+                } else {selectedTreeNode = updatePhysSelectionInLogTreeRecursive(galleryMediaContent.getView( ).getMediaUnit(\n+            )\n+                , structure, logicalTree);\n+            }\n+            if (Objects.nonNull(selectedTreeNode)) {\n                     setSelectedLogicalNode(selectedTreeNode);\n                     try {\n                         dataEditor.switchStructure(selectedTreeNode.getData(), false);\n",
            "diff_size": 5
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}