{
    "project_name": "neo4j-neo4j",
    "error_id": "678",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/678/GeometryArrayType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/678/GeometryArrayType.java\nindex 96a70c1d424..640a0906509 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/678/GeometryArrayType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/678/GeometryArrayType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -43,7 +44,7 @@ import static org.neo4j.kernel.impl.index.schema.GeometryType.readCrs;\n \n /**\n  * Handles {@link PointValue[]}.\n- *\n+ * <p>\n  * Note about lazy initialization of {@link GenericKey} data structures: a point type is special in that it contains a {@link CoordinateReferenceSystem},\n  * which dictates how much space it will occupy. When serializing a {@link PointArray} into {@link GenericKey} (via the logic in this class)\n  * the {@link CoordinateReferenceSystem} isn't known at initialization, where only the type and array length is known.\n@@ -58,44 +59,44 @@ class GeometryArrayType extends AbstractArrayType<PointValue>\n     // long2 (coordinate reference system code)\n     // long3 (dimensions)\n \n-    GeometryArrayType( byte typeId )\n+    GeometryArrayType(byte typeId)\n     {\n-        super( ValueGroup.GEOMETRY_ARRAY, typeId, ( o1, o2, i ) -> GeometryType.compare(\n-                        // intentional long1 and long2 - not the array versions\n-                o1.long0Array[i], o1.long1, o1.long2, o1.long3, o1.long1Array, (int) o1.long3 * i,\n-                o2.long0Array[i], o2.long1, o2.long2, o2.long3, o2.long1Array, (int) o2.long3 * i ),\n-                null, null, null, null, null );\n+        super(ValueGroup.GEOMETRY_ARRAY, typeId, (o1, o2, i) -> GeometryType.compare(\n+          // intentional long1 and long2 - not the array versions\n+          o1.long0Array[i], o1.long1, o1.long2, o1.long3, o1.long1Array, (int) o1.long3 * i,\n+          o2.long0Array[i], o2.long1, o2.long2, o2.long3, o2.long1Array, (int) o2.long3 * i),\n+          null, null, null, null, null);\n     }\n \n     @Override\n-    int valueSize( GenericKey state )\n+    int valueSize(GenericKey state)\n     {\n         return GenericKey.SIZE_GEOMETRY_HEADER +\n-                arrayKeySize( state, GenericKey.SIZE_GEOMETRY + dimensions( state ) * GenericKey.SIZE_GEOMETRY_COORDINATE );\n+          arrayKeySize(state, GenericKey.SIZE_GEOMETRY + dimensions(state) * GenericKey.SIZE_GEOMETRY_COORDINATE);\n     }\n \n     @Override\n-    void copyValue( GenericKey to, GenericKey from, int length )\n+    void copyValue(GenericKey to, GenericKey from, int length)\n     {\n-        initializeArray( to, length, null );\n-        System.arraycopy( from.long0Array, 0, to.long0Array, 0, length );\n+        initializeArray(to, length, null);\n+        System.arraycopy(from.long0Array, 0, to.long0Array, 0, length);\n         to.long1 = from.long1;\n         to.long2 = from.long2;\n         to.long3 = from.long3;\n-        int dimensions = dimensions( from );\n-        to.long1Array = ensureBigEnough( to.long1Array, dimensions * length );\n-        System.arraycopy( from.long1Array, 0, to.long1Array, 0, dimensions * length );\n+        int dimensions = dimensions(from);\n+        to.long1Array = ensureBigEnough(to.long1Array, dimensions * length);\n+        System.arraycopy(from.long1Array, 0, to.long1Array, 0, dimensions * length);\n         to.spaceFillingCurve = from.spaceFillingCurve;\n     }\n \n     @Override\n-    void initializeArray( GenericKey key, int length, ValueWriter.ArrayType arrayType )\n+    void initializeArray(GenericKey key, int length, ValueWriter.ArrayType arrayType)\n     {\n-        key.long0Array = ensureBigEnough( key.long0Array, length );\n+        key.long0Array = ensureBigEnough(key.long0Array, length);\n \n         // Since this method is called when serializing a PointValue into the key state, the CRS and number of dimensions\n         // are unknown at this point. Read more about why lazy initialization is required in the class-level javadoc.\n-        if ( length == 0 && key.long1Array == null )\n+        if (length == 0 && key.long1Array == null)\n         {\n             // There's this special case where we're initializing an empty geometry array and so the long1Array\n             // won't be initialized at all. Therefore we're preemptively making sure it's at least not null.\n@@ -104,55 +105,55 @@ class GeometryArrayType extends AbstractArrayType<PointValue>\n     }\n \n     @Override\n-    Value asValue( GenericKey state )\n+    Value asValue(GenericKey state)\n     {\n         Point[] points = new Point[state.arrayLength];\n-        if ( points.length > 0 )\n+        if (points.length > 0)\n         {\n-            assertHasCoordinates( state );\n-            CoordinateReferenceSystem crs = CoordinateReferenceSystem.get( (int) state.long1, (int) state.long2 );\n-            int dimensions = dimensions( state );\n-            for ( int i = 0; i < points.length; i++ )\n+            assertHasCoordinates(state);\n+            CoordinateReferenceSystem crs = CoordinateReferenceSystem.get((int) state.long1, (int) state.long2);\n+            int dimensions = dimensions(state);\n+            for (int i = 0; i < points.length; i++)\n             {\n-                points[i] = GeometryType.asValue( state, crs, dimensions * i );\n+                points[i] = GeometryType.asValue(state, crs, dimensions * i);\n             }\n         }\n-        return Values.pointArray( points );\n+        return Values.pointArray(points);\n     }\n \n     @Override\n-    void putValue( PageCursor cursor, GenericKey state )\n+    void putValue(PageCursor cursor, GenericKey state)\n     {\n-        putCrs( cursor, state.long1, state.long2, state.long3 );\n-        int dimensions = dimensions( state );\n-        putArray( cursor, state, ( c, k, i ) -> putPoint( c, k.long0Array[i], k.long3, k.long1Array, i * dimensions ) );\n+        putCrs(cursor, state.long1, state.long2, state.long3);\n+        int dimensions = dimensions(state);\n+        putArray(cursor, state, (c, k, i) -> putPoint(c, k.long0Array[i], k.long3, k.long1Array, i * dimensions));\n     }\n \n     @Override\n-    boolean readValue( PageCursor cursor, int size, GenericKey into )\n+    boolean readValue(PageCursor cursor, int size, GenericKey into)\n     {\n-        readCrs( cursor, into );\n-        return readArray( cursor, ValueWriter.ArrayType.POINT, GeometryArrayType::readGeometryArrayItem, into );\n+        readCrs(cursor, into);\n+        return readArray(cursor, ValueWriter.ArrayType.POINT, GeometryArrayType::readGeometryArrayItem, into);\n     }\n \n     @Override\n-    String toString( GenericKey state )\n+    String toString(GenericKey state)\n     {\n-        String asValueString = hasCoordinates( state ) ? asValue( state ).toString() : \"NO_COORDINATES\";\n-        return format( \"GeometryArray[tableId:%d, code:%d, rawValues:%s, value:%s]\",\n-                state.long1, state.long2, Arrays.toString( Arrays.copyOf( state.long0Array, state.arrayLength ) ), asValueString );\n+        String asValueString = hasCoordinates(state) ? asValue(state).toString() : \"NO_COORDINATES\";\n+        return format(\"GeometryArray[tableId:%d, code:%d, rawValues:%s, value:%s]\",\n+          state.long1, state.long2, Arrays.toString(Arrays.copyOf(state.long0Array, state.arrayLength)), asValueString);\n     }\n \n-    private static boolean readGeometryArrayItem( PageCursor cursor, GenericKey into )\n+    private static boolean readGeometryArrayItem(PageCursor cursor, GenericKey into)\n     {\n         into.long0Array[into.currentArrayOffset] = cursor.getLong();\n-        int dimensions = dimensions( into );\n-        if ( into.currentArrayOffset == 0 )\n+        int dimensions = dimensions(into);\n+        if (into.currentArrayOffset == 0)\n         {\n             // Read more about why lazy initialization is required in the class-level javadoc.\n-            into.long1Array = ensureBigEnough( into.long1Array, dimensions * into.arrayLength );\n+            into.long1Array = ensureBigEnough(into.long1Array, dimensions * into.arrayLength);\n         }\n-        for ( int i = 0, offset = into.currentArrayOffset * dimensions; i < dimensions; i++ )\n+        for (int i = 0, offset = into.currentArrayOffset * dimensions; i < dimensions; i++)\n         {\n             into.long1Array[offset + i] = cursor.getLong();\n         }\n@@ -160,30 +161,30 @@ class GeometryArrayType extends AbstractArrayType<PointValue>\n         return true;\n     }\n \n-    void write( GenericKey state, int offset, long derivedSpaceFillingCurveValue, double[] coordinates )\n+    void write(GenericKey state, int offset, long derivedSpaceFillingCurveValue, double[] coordinates)\n     {\n         state.long0Array[offset] = derivedSpaceFillingCurveValue;\n-        if ( offset == 0 )\n+        if (offset == 0)\n         {\n             // Read more about why lazy initialization is required in the class-level javadoc.\n             int dimensions = coordinates.length;\n-            state.long1Array = ensureBigEnough( state.long1Array, dimensions * state.arrayLength );\n+            state.long1Array = ensureBigEnough(state.long1Array, dimensions * state.arrayLength);\n             state.long3 = dimensions;\n         }\n-        for ( int i = 0, base = dimensions( state ) * offset; i < coordinates.length; i++ )\n+        for (int i = 0, base = dimensions(state) * offset; i < coordinates.length; i++)\n         {\n-            state.long1Array[base + i] = Double.doubleToLongBits( coordinates[i] );\n+            state.long1Array[base + i] = Double.doubleToLongBits(coordinates[i]);\n         }\n     }\n \n     @Override\n-    protected void addTypeSpecificDetails( StringJoiner joiner, GenericKey state )\n+    protected void addTypeSpecificDetails(StringJoiner joiner, GenericKey state)\n     {\n-        joiner.add( \"long1=\" + state.long1 );\n-        joiner.add( \"long2=\" + state.long2 );\n-        joiner.add( \"long3=\" + state.long3 );\n-        joiner.add( \"long0Array=\" + Arrays.toString( state.long0Array ) );\n-        joiner.add( \"long1Array=\" + Arrays.toString( state.long1Array ) );\n-        super.addTypeSpecificDetails( joiner, state );\n+        joiner.add(\"long1=\" + state.long1);\n+        joiner.add(\"long2=\" + state.long2);\n+        joiner.add(\"long3=\" + state.long3);\n+        joiner.add(\"long0Array=\" + Arrays.toString(state.long0Array));\n+        joiner.add(\"long1Array=\" + Arrays.toString(state.long1Array));\n+        super.addTypeSpecificDetails(joiner, state);\n     }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}