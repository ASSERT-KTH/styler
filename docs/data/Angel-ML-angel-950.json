{
    "project_name": "Angel-ML-angel",
    "error_id": "950",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/950/PSContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/950/PSContext.java\nindex bf7eb10b031..c620df25f82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/950/PSContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/950/PSContext.java\n@@ -40,14 +40,16 @@ public class PSContext {\n \n   /**\n    * Create a PSContext\n+   *\n    * @param ps PS\n    */\n-  public PSContext(ParameterServer ps ) {\n+  public PSContext(ParameterServer ps) {\n     this.ps = ps;\n   }\n \n   /**\n    * Get application total task number\n+   *\n    * @return application total task number\n    */\n   public int getTaskNum() {\n@@ -56,6 +58,7 @@ public class PSContext {\n \n   /**\n    * Get application configuration\n+   *\n    * @return application configuration\n    */\n   public Configuration getConf() {\n@@ -64,6 +67,7 @@ public class PSContext {\n \n   /**\n    * Get PS\n+   *\n    * @return PS\n    */\n   public ParameterServer getPs() {\n@@ -72,6 +76,7 @@ public class PSContext {\n \n   /**\n    * Get application deploy mode\n+   *\n    * @return application deploy mode\n    */\n   public AngelDeployMode getDeployMode() {\n@@ -88,6 +93,7 @@ public class PSContext {\n \n   /**\n    * Get the RPC client to Master\n+   *\n    * @return the RPC client to Master\n    */\n   public MasterClient getMaster() {\n@@ -96,6 +102,7 @@ public class PSContext {\n \n   /**\n    * Get Matrix meta manager\n+   *\n    * @return Matrix meta manager\n    */\n   public PSMatrixMetaManager getMatrixMetaManager() {\n@@ -104,6 +111,7 @@ public class PSContext {\n \n   /**\n    * Get clock vector manager\n+   *\n    * @return clock vector manager\n    */\n   public ClockVectorManager getClockVectorManager() {\n@@ -112,6 +120,7 @@ public class PSContext {\n \n   /**\n    * Get matrix storage manager\n+   *\n    * @return matrix storage manager\n    */\n   public MatrixStorageManager getMatrixStorageManager() {\n@@ -120,6 +129,7 @@ public class PSContext {\n \n   /**\n    * Get location manager\n+   *\n    * @return location manager\n    */\n   public PSLocationManager getLocationManager() {\n@@ -128,6 +138,7 @@ public class PSContext {\n \n   /**\n    * Get ps attempt id\n+   *\n    * @return ps attempt id\n    */\n   public PSAttemptId getPSAttemptId() {\n@@ -136,6 +147,7 @@ public class PSContext {\n \n   /**\n    * Get the RPC server for control message\n+   *\n    * @return\n    */\n   public ParameterServerService getPsService() {\n@@ -144,6 +156,7 @@ public class PSContext {\n \n   /**\n    * Get ps to ps pusher\n+   *\n    * @return ps to ps pusher\n    */\n   public PS2PSPusherImpl getPS2PSPusher() {\n@@ -152,12 +165,16 @@ public class PSContext {\n \n   /**\n    * Get RPC worker pool for matrix transformation\n+   *\n    * @return RPC worker pool for matrix transformation\n    */\n-  public WorkerPool getWorkerPool() { return ps.getWorkerPool();}\n+  public WorkerPool getWorkerPool() {\n+    return ps.getWorkerPool();\n+  }\n \n   /**\n    * Get matrices load/save worker pool\n+   *\n    * @return matrices load/save worker pool\n    */\n   public IOExecutors getIOExecutors() {\n@@ -166,26 +183,31 @@ public class PSContext {\n \n   /**\n    * Get snapshot dumper\n+   *\n    * @return snapshot dumper\n    */\n-  public SnapshotDumper getSnapshotDumper() { return ps.getSnapshotDumper(); }\n+  public SnapshotDumper getSnapshotDumper() {\n+    return ps.getSnapshotDumper();\n+  }\n \n   /**\n    * Get the replication number for a matrix partition\n+   *\n    * @return the replication number for a matrix partition\n    */\n   public int getPartReplication() {\n     return getConf().getInt(AngelConf.ANGEL_PS_HA_REPLICATION_NUMBER,\n-      AngelConf.DEFAULT_ANGEL_PS_HA_REPLICATION_NUMBER);\n+        AngelConf.DEFAULT_ANGEL_PS_HA_REPLICATION_NUMBER);\n   }\n \n   /**\n    * Get the application running mode\n+   *\n    * @return the application running mode\n    */\n   public RunningMode getRunningMode() {\n     String modeStr = getConf().get(AngelConf.ANGEL_RUNNING_MODE,\n-      AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\n+        AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\n     return RunningMode.valueOf(modeStr);\n   }\n \n@@ -193,5 +215,7 @@ public class PSContext {\n     return ps.getPSFailedReport();\n   }\n \n-  public RunningContext getRunningContext() { return ps.getRunningContext(); }\n+  public RunningContext getRunningContext() {\n+    return ps.getRunningContext();\n+  }\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/950/PSContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/950/PSContext.java\nindex bf7eb10b031..2a7c8d5dddd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/950/PSContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/950/PSContext.java\n@@ -42,7 +42,7 @@ public class PSContext {\n    * Create a PSContext\n    * @param ps PS\n    */\n-  public PSContext(ParameterServer ps ) {\n+  public PSContext(ParameterServer ps) {\n     this.ps = ps;\n   }\n \n@@ -154,7 +154,9 @@ public class PSContext {\n    * Get RPC worker pool for matrix transformation\n    * @return RPC worker pool for matrix transformation\n    */\n-  public WorkerPool getWorkerPool() { return ps.getWorkerPool();}\n+  public WorkerPool getWorkerPool() {\n+  return ps.getWorkerPool();\n+  }\n \n   /**\n    * Get matrices load/save worker pool\n@@ -168,7 +170,9 @@ public class PSContext {\n    * Get snapshot dumper\n    * @return snapshot dumper\n    */\n-  public SnapshotDumper getSnapshotDumper() { return ps.getSnapshotDumper(); }\n+  public SnapshotDumper getSnapshotDumper() {\n+  return ps.getSnapshotDumper();\n+  }\n \n   /**\n    * Get the replication number for a matrix partition\n@@ -193,5 +197,7 @@ public class PSContext {\n     return ps.getPSFailedReport();\n   }\n \n-  public RunningContext getRunningContext() { return ps.getRunningContext(); }\n-}\n+  public RunningContext getRunningContext() {\n+  return ps.getRunningContext();\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/950/PSContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/950/PSContext.java\nindex bf7eb10b031..2ef303609be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/950/PSContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/950/PSContext.java\n@@ -32,17 +32,20 @@ import org.apache.hadoop.conf.Configuration;\n /**\n  * Context of parameter server.\n  */\n+\n public class PSContext {\n   /**\n    * PS\n    */\n+\n   private final ParameterServer ps;\n \n   /**\n    * Create a PSContext\n    * @param ps PS\n    */\n-  public PSContext(ParameterServer ps ) {\n+\n+  public PSContext(ParameterServer ps) {\n     this.ps = ps;\n   }\n \n@@ -50,6 +53,7 @@ public class PSContext {\n    * Get application total task number\n    * @return application total task number\n    */\n+\n   public int getTaskNum() {\n     return getConf().getInt(AngelConf.ANGEL_TASK_ACTUAL_NUM, 1);\n   }\n@@ -58,6 +62,7 @@ public class PSContext {\n    * Get application configuration\n    * @return application configuration\n    */\n+\n   public Configuration getConf() {\n     return ps.getConf();\n   }\n@@ -66,6 +71,7 @@ public class PSContext {\n    * Get PS\n    * @return PS\n    */\n+\n   public ParameterServer getPs() {\n     return ps;\n   }\n@@ -74,11 +80,9 @@ public class PSContext {\n    * Get application deploy mode\n    * @return application deploy mode\n    */\n-  public AngelDeployMode getDeployMode() {\n-    String mode =\n-        ps.getConf().get(AngelConf.ANGEL_DEPLOY_MODE,\n-            AngelConf.DEFAULT_ANGEL_DEPLOY_MODE);\n \n+  public AngelDeployMode getDeployMode() {\n+    String mode = ps.getConf().get(AngelConf.ANGEL_DEPLOY_MODE, AngelConf.DEFAULT_ANGEL_DEPLOY_MODE);\n     if (mode.equals(AngelDeployMode.LOCAL.toString())) {\n       return AngelDeployMode.LOCAL;\n     } else {\n@@ -90,6 +94,7 @@ public class PSContext {\n    * Get the RPC client to Master\n    * @return the RPC client to Master\n    */\n+\n   public MasterClient getMaster() {\n     return ps.getMaster();\n   }\n@@ -98,6 +103,7 @@ public class PSContext {\n    * Get Matrix meta manager\n    * @return Matrix meta manager\n    */\n+\n   public PSMatrixMetaManager getMatrixMetaManager() {\n     return ps.getMatrixMetaManager();\n   }\n@@ -106,6 +112,7 @@ public class PSContext {\n    * Get clock vector manager\n    * @return clock vector manager\n    */\n+\n   public ClockVectorManager getClockVectorManager() {\n     return ps.getClockVectorManager();\n   }\n@@ -114,6 +121,7 @@ public class PSContext {\n    * Get matrix storage manager\n    * @return matrix storage manager\n    */\n+\n   public MatrixStorageManager getMatrixStorageManager() {\n     return ps.getMatrixStorageManager();\n   }\n@@ -122,6 +130,7 @@ public class PSContext {\n    * Get location manager\n    * @return location manager\n    */\n+\n   public PSLocationManager getLocationManager() {\n     return ps.getLocationManager();\n   }\n@@ -130,6 +139,7 @@ public class PSContext {\n    * Get ps attempt id\n    * @return ps attempt id\n    */\n+\n   public PSAttemptId getPSAttemptId() {\n     return ps.getPSAttemptId();\n   }\n@@ -138,6 +148,7 @@ public class PSContext {\n    * Get the RPC server for control message\n    * @return\n    */\n+\n   public ParameterServerService getPsService() {\n     return ps.getPsService();\n   }\n@@ -146,6 +157,7 @@ public class PSContext {\n    * Get ps to ps pusher\n    * @return ps to ps pusher\n    */\n+\n   public PS2PSPusherImpl getPS2PSPusher() {\n     return ps.getPs2PSPusher();\n   }\n@@ -154,12 +166,16 @@ public class PSContext {\n    * Get RPC worker pool for matrix transformation\n    * @return RPC worker pool for matrix transformation\n    */\n-  public WorkerPool getWorkerPool() { return ps.getWorkerPool();}\n+\n+  public WorkerPool getWorkerPool() {\n+    return ps.getWorkerPool();\n+  }\n \n   /**\n    * Get matrices load/save worker pool\n    * @return matrices load/save worker pool\n    */\n+\n   public IOExecutors getIOExecutors() {\n     return ps.getIOExecutors();\n   }\n@@ -168,24 +184,27 @@ public class PSContext {\n    * Get snapshot dumper\n    * @return snapshot dumper\n    */\n-  public SnapshotDumper getSnapshotDumper() { return ps.getSnapshotDumper(); }\n+\n+  public SnapshotDumper getSnapshotDumper() {\n+    return ps.getSnapshotDumper();\n+  }\n \n   /**\n    * Get the replication number for a matrix partition\n    * @return the replication number for a matrix partition\n    */\n+\n   public int getPartReplication() {\n-    return getConf().getInt(AngelConf.ANGEL_PS_HA_REPLICATION_NUMBER,\n-      AngelConf.DEFAULT_ANGEL_PS_HA_REPLICATION_NUMBER);\n+    return getConf().getInt(AngelConf.ANGEL_PS_HA_REPLICATION_NUMBER, AngelConf.DEFAULT_ANGEL_PS_HA_REPLICATION_NUMBER);\n   }\n \n   /**\n    * Get the application running mode\n    * @return the application running mode\n    */\n+\n   public RunningMode getRunningMode() {\n-    String modeStr = getConf().get(AngelConf.ANGEL_RUNNING_MODE,\n-      AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\n+    String modeStr = getConf().get(AngelConf.ANGEL_RUNNING_MODE, AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\n     return RunningMode.valueOf(modeStr);\n   }\n \n@@ -193,5 +212,8 @@ public class PSContext {\n     return ps.getPSFailedReport();\n   }\n \n-  public RunningContext getRunningContext() { return ps.getRunningContext(); }\n-}\n+  public RunningContext getRunningContext() {\n+    return ps.getRunningContext();\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}