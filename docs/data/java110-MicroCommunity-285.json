{
    "project_name": "java110-MicroCommunity",
    "error_id": "285",
    "information": {
        "errors": [
            {
                "line": "114",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 157).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            repairPoolPo.setCommunityId(paramObj.getString(\"communityId\"));\n            repairPoolPo.setState(RepairDto.STATE_APPRAISE);\n            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n            businesses.add(business);\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler/285/PayFeeListener.java\nindex 1b6d2854138..6b1835b31e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler/285/PayFeeListener.java\n@@ -111,7 +111,8 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n             repairPoolPo.setRepairId(feeAttrDtos.get(0).getValue());\n             repairPoolPo.setCommunityId(paramObj.getString(\"communityId\"));\n             repairPoolPo.setState(RepairDto.STATE_APPRAISE);\n-            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n+            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class\n+            .getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n             businesses.add(business);\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/intellij/285/PayFeeListener.java\nindex 1b6d2854138..863a823db1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/intellij/285/PayFeeListener.java\n@@ -111,7 +111,8 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n             repairPoolPo.setRepairId(feeAttrDtos.get(0).getValue());\n             repairPoolPo.setCommunityId(paramObj.getString(\"communityId\"));\n             repairPoolPo.setState(RepairDto.STATE_APPRAISE);\n-            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n+            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS)\n+                .put(RepairPoolPo.class.getSimpleName(), BeanConvertUtil.beanCovertMap(repairPoolPo));\n             businesses.add(business);\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/naturalize/285/PayFeeListener.java\nindex 1b6d2854138..e17950c123c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/naturalize/285/PayFeeListener.java\n@@ -111,7 +111,7 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n             repairPoolPo.setRepairId(feeAttrDtos.get(0).getValue());\n             repairPoolPo.setCommunityId(paramObj.getString(\"communityId\"));\n             repairPoolPo.setState(RepairDto.STATE_APPRAISE);\n-            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n+            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(), BeanConvertUtil.beanCovertMap(repairPoolPo));\n             businesses.add(business);\n         }\n \n@@ -188,4 +188,4 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/codebuff/285/PayFeeListener.java\nindex 1b6d2854138..fce03deade3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/codebuff/285/PayFeeListener.java\n@@ -28,7 +28,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.ResponseEntity;\n-\n import java.util.List;\n \n /**\n@@ -39,6 +38,8 @@ import java.util.List;\n  * @Version 1.0\n  * add by wuxw 2019/6/3\n  **/\n+\n+\n @Java110Listener(\"payFeeListener\")\n public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n \n@@ -49,6 +50,7 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n \n     @Autowired\n     private IParkingSpaceInnerServiceSMO parkingSpaceInnerServiceSMOImpl;\n+\n     @Autowired\n     private IFeeInnerServiceSMO feeInnerServiceSMOImpl;\n \n@@ -61,7 +63,6 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n     @Autowired\n     private IFeeConfigInnerServiceSMO feeConfigInnerServiceSMOImpl;\n \n-\n     @Override\n     public String getServiceCode() {\n         return ServiceCodeConstant.SERVICE_CODE_PAY_FEE;\n@@ -74,18 +75,14 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n \n     @Override\n     public void soService(ServiceDataFlowEvent event) {\n-\n         logger.debug(\"ServiceDataFlowEvent : {}\", event);\n-\n         DataFlowContext dataFlowContext = event.getDataFlowContext();\n         AppService service = event.getAppService();\n-\n         String paramIn = dataFlowContext.getReqData();\n \n         //\u6821\u9a8c\u6570\u636e\n         validate(paramIn);\n         JSONObject paramObj = JSONObject.parseObject(paramIn);\n-\n         HttpHeaders header = new HttpHeaders();\n         dataFlowContext.getRequestCurrentHeaders().put(CommonConstant.HTTP_ORDER_TYPE_CD, \"D\");\n         JSONArray businesses = new JSONArray();\n@@ -111,15 +108,12 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n             repairPoolPo.setRepairId(feeAttrDtos.get(0).getValue());\n             repairPoolPo.setCommunityId(paramObj.getString(\"communityId\"));\n             repairPoolPo.setState(RepairDto.STATE_APPRAISE);\n-            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n+            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(), BeanConvertUtil.beanCovertMap(repairPoolPo));\n             businesses.add(business);\n         }\n \n-\n         ResponseEntity<String> responseEntity = feeBMOImpl.callService(dataFlowContext, service.getServiceCode(), businesses);\n-\n         dataFlowContext.setResponseEntity(responseEntity);\n-\n     }\n \n     /**\n@@ -129,12 +123,13 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n      *                \"memberId\": \"3456789\",\n      *                \"memberTypeCd\": \"390001200001\"\n      */\n+\n+\n     private void validate(String paramIn) {\n         Assert.jsonObjectHaveKey(paramIn, \"communityId\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bcommunityId\u8282\u70b9\");\n         Assert.jsonObjectHaveKey(paramIn, \"cycles\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bcycles\u8282\u70b9\");\n         Assert.jsonObjectHaveKey(paramIn, \"receivedAmount\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542breceivedAmount\u8282\u70b9\");\n         Assert.jsonObjectHaveKey(paramIn, \"feeId\", \"\u8bf7\u6c42\u62a5\u6587\u4e2d\u672a\u5305\u542bfeeId\u8282\u70b9\");\n-\n         JSONObject paramInObj = JSONObject.parseObject(paramIn);\n         Assert.hasLength(paramInObj.getString(\"communityId\"), \"\u5c0f\u533aID\u4e0d\u80fd\u4e3a\u7a7a\");\n         Assert.hasLength(paramInObj.getString(\"cycles\"), \"\u5468\u671f\u4e0d\u80fd\u4e3a\u7a7a\");\n@@ -146,15 +141,12 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n         feeDto.setFeeId(paramInObj.getString(\"feeId\"));\n         feeDto.setCommunityId(paramInObj.getString(\"communityId\"));\n         List<FeeDto> feeDtos = feeInnerServiceSMOImpl.queryFees(feeDto);\n-\n         Assert.listOnlyOne(feeDtos, \"\u4f20\u5165\u8d39\u7528ID\u9519\u8bef\");\n-\n         feeDto = feeDtos.get(0);\n \n         if (FeeDto.STATE_FINISH.equals(feeDto.getState())) {\n             throw new IllegalArgumentException(\"\u6536\u8d39\u5df2\u7ecf\u7ed3\u675f\uff0c\u4e0d\u80fd\u518d\u7f34\u8d39\");\n         }\n-\n     }\n \n     @Override\n@@ -162,7 +154,6 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n         return DEFAULT_ORDER;\n     }\n \n-\n     public IFeeInnerServiceSMO getFeeInnerServiceSMOImpl() {\n         return feeInnerServiceSMOImpl;\n     }\n@@ -186,6 +177,4 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n     public void setRoomInnerServiceSMOImpl(IRoomInnerServiceSMO roomInnerServiceSMOImpl) {\n         this.roomInnerServiceSMOImpl = roomInnerServiceSMOImpl;\n     }\n-\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "114",
                    "column": "50",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "115",
                    "column": "34",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_random/285/PayFeeListener.java\nindex 1b6d2854138..56bf763f447 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_random/285/PayFeeListener.java\n@@ -111,7 +111,8 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n             repairPoolPo.setRepairId(feeAttrDtos.get(0).getValue());\n             repairPoolPo.setCommunityId(paramObj.getString(\"communityId\"));\n             repairPoolPo.setState(RepairDto.STATE_APPRAISE);\n-            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n+            business.getJSONObject(CommonConstant. HTTP_BUSINESS_DATAS).put(RepairPoolPo.\n+            class.getSimpleName(),BeanConvertUtil .beanCovertMap(repairPoolPo));\n             businesses.add(business);\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_three_grams/285/PayFeeListener.java\nindex 1b6d2854138..6b1835b31e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/errored/1/285/PayFeeListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/java110-MicroCommunity/styler_three_grams/285/PayFeeListener.java\n@@ -111,7 +111,8 @@ public class PayFeeListener extends AbstractServiceApiDataFlowListener {\n             repairPoolPo.setRepairId(feeAttrDtos.get(0).getValue());\n             repairPoolPo.setCommunityId(paramObj.getString(\"communityId\"));\n             repairPoolPo.setState(RepairDto.STATE_APPRAISE);\n-            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class.getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n+            business.getJSONObject(CommonConstant.HTTP_BUSINESS_DATAS).put(RepairPoolPo.class\n+            .getSimpleName(),  BeanConvertUtil.beanCovertMap(repairPoolPo));\n             businesses.add(business);\n         }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}