{
    "project_name": "neo4j-neo4j",
    "error_id": "2588",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "25",
                    "severity": "error",
                    "message": "'}' at column 25 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "145",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "29",
                    "severity": "error",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2588/IndexAccessors.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2588/IndexAccessors.java\nindex e484354d997..764f3fce7ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2588/IndexAccessors.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2588/IndexAccessors.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.index;\n \n import org.eclipse.collections.api.map.primitive.MutableLongObjectMap;\n@@ -54,60 +55,56 @@ public class IndexAccessors implements Closeable\n     private final List<IndexDescriptor> notOnlineIndexRules = new ArrayList<>();\n \n     public IndexAccessors(\n-            IndexProviderMap providers,\n-            NeoStores neoStores,\n-            IndexSamplingConfig samplingConfig, PageCacheTracer pageCacheTracer, TokenNameLookup tokenNameLookup )\n-            throws IOException\n+      IndexProviderMap providers,\n+      NeoStores neoStores,\n+      IndexSamplingConfig samplingConfig, PageCacheTracer pageCacheTracer, TokenNameLookup tokenNameLookup)\n+      throws IOException\n     {\n-        this( providers, neoStores, samplingConfig, null /*we'll use a default below, if this is null*/, pageCacheTracer, tokenNameLookup );\n+        this(providers, neoStores, samplingConfig, null /*we'll use a default below, if this is null*/, pageCacheTracer, tokenNameLookup);\n     }\n \n     public IndexAccessors(\n-            IndexProviderMap providers,\n-            NeoStores neoStores,\n-            IndexSamplingConfig samplingConfig,\n-            IndexAccessorLookup accessorLookup,\n-            PageCacheTracer pageCacheTracer,\n-            TokenNameLookup tokenNameLookup )\n-            throws IOException\n+      IndexProviderMap providers,\n+      NeoStores neoStores,\n+      IndexSamplingConfig samplingConfig,\n+      IndexAccessorLookup accessorLookup,\n+      PageCacheTracer pageCacheTracer,\n+      TokenNameLookup tokenNameLookup)\n+      throws IOException\n     {\n-        try ( var cursorTracer = pageCacheTracer.createPageCursorTracer( CONSISTENCY_INDEX_ACCESSOR_BUILDER_TAG ) )\n+        try (var cursorTracer = pageCacheTracer.createPageCursorTracer(CONSISTENCY_INDEX_ACCESSOR_BUILDER_TAG))\n         {\n-            TokenHolders tokenHolders = StoreTokens.readOnlyTokenHolders( neoStores, cursorTracer );\n-            Iterator<IndexDescriptor> indexes = SchemaRuleAccess.getSchemaRuleAccess( neoStores.getSchemaStore(), tokenHolders )\n-                    .indexesGetAll( cursorTracer );\n-            while ( true )\n+            TokenHolders tokenHolders = StoreTokens.readOnlyTokenHolders(neoStores, cursorTracer);\n+            Iterator<IndexDescriptor> indexes = SchemaRuleAccess.getSchemaRuleAccess(neoStores.getSchemaStore(), tokenHolders)\n+              .indexesGetAll(cursorTracer);\n+            while (true)\n             {\n                 try\n                 {\n-                    if ( indexes.hasNext() )\n+                    if (indexes.hasNext())\n                     {\n                         // we intentionally only check indexes that are online since\n                         // - populating indexes will be rebuilt on next startup\n                         // - failed indexes have to be dropped by the user anyways\n                         IndexDescriptor indexDescriptor = indexes.next();\n-                        if ( indexDescriptor.isUnique() && indexDescriptor.getOwningConstraintId().isEmpty() )\n+                        if (indexDescriptor.isUnique() && indexDescriptor.getOwningConstraintId().isEmpty())\n                         {\n-                            notOnlineIndexRules.add( indexDescriptor );\n-                        }\n-                        else\n+                            notOnlineIndexRules.add(indexDescriptor);\n+                        } else\n                         {\n-                            if ( InternalIndexState.ONLINE == provider( providers, indexDescriptor ).getInitialState( indexDescriptor, cursorTracer ) )\n+                            if (InternalIndexState.ONLINE == provider(providers, indexDescriptor).getInitialState(indexDescriptor, cursorTracer))\n                             {\n-                                onlineIndexRules.add( indexDescriptor );\n-                            }\n-                            else\n+                                onlineIndexRules.add(indexDescriptor);\n+                            } else\n                             {\n-                                notOnlineIndexRules.add( indexDescriptor );\n+                                notOnlineIndexRules.add(indexDescriptor);\n                             }\n                         }\n-                    }\n-                    else\n+                    } else\n                     {\n                         break;\n                     }\n-                }\n-                catch ( Exception e )\n+                } catch (Exception e)\n                 {\n                     // ignore; inconsistencies of the schema store are specifically handled elsewhere.\n                 }\n@@ -116,17 +113,17 @@ public class IndexAccessors implements Closeable\n \n         // Default to instantiate new accessors\n         accessorLookup = accessorLookup != null ? accessorLookup\n-                                                : index -> provider( providers, index ).getOnlineAccessor( index, samplingConfig, tokenNameLookup );\n-        for ( IndexDescriptor indexRule : onlineIndexRules )\n+          : index -> provider(providers, index).getOnlineAccessor(index, samplingConfig, tokenNameLookup);\n+        for (IndexDescriptor indexRule : onlineIndexRules)\n         {\n             long indexId = indexRule.getId();\n-            accessors.put( indexId, accessorLookup.apply( indexRule ) );\n+            accessors.put(indexId, accessorLookup.apply(indexRule));\n         }\n     }\n \n-    private IndexProvider provider( IndexProviderMap providers, IndexDescriptor indexRule )\n+    private IndexProvider provider(IndexProviderMap providers, IndexDescriptor indexRule)\n     {\n-        return providers.lookup( indexRule.getIndexProvider() );\n+        return providers.lookup(indexRule.getIndexProvider());\n     }\n \n     public Collection<IndexDescriptor> notOnlineRules()\n@@ -134,9 +131,9 @@ public class IndexAccessors implements Closeable\n         return notOnlineIndexRules;\n     }\n \n-    public IndexAccessor accessorFor( IndexDescriptor indexRule )\n+    public IndexAccessor accessorFor(IndexDescriptor indexRule)\n     {\n-        return accessors.get( indexRule.getId() );\n+        return accessors.get(indexRule.getId());\n     }\n \n     public List<IndexDescriptor> onlineRules()\n@@ -144,11 +141,11 @@ public class IndexAccessors implements Closeable\n         return onlineIndexRules;\n     }\n \n-    public List<IndexDescriptor> onlineRules( EntityType entityType )\n+    public List<IndexDescriptor> onlineRules(EntityType entityType)\n     {\n         return onlineIndexRules.stream()\n-                .filter( index -> index.schema().entityType() == entityType )\n-                .collect( Collectors.toList() );\n+          .filter(index -> index.schema().entityType() == entityType)\n+          .collect(Collectors.toList());\n     }\n \n     public IndexReaders readers()\n@@ -156,15 +153,15 @@ public class IndexAccessors implements Closeable\n         return new IndexReaders();\n     }\n \n-    public void remove( IndexDescriptor descriptor )\n+    public void remove(IndexDescriptor descriptor)\n     {\n-        IndexAccessor remove = accessors.remove( descriptor.getId() );\n-        if ( remove != null )\n+        IndexAccessor remove = accessors.remove(descriptor.getId());\n+        if (remove != null)\n         {\n             remove.close();\n         }\n-        onlineIndexRules.remove( descriptor );\n-        notOnlineIndexRules.remove( descriptor );\n+        onlineIndexRules.remove(descriptor);\n+        notOnlineIndexRules.remove(descriptor);\n     }\n \n     @Override\n@@ -172,9 +169,8 @@ public class IndexAccessors implements Closeable\n     {\n         try\n         {\n-            IOUtils.closeAllUnchecked( accessors.toList() );\n-        }\n-        finally\n+            IOUtils.closeAllUnchecked(accessors.toList());\n+        } finally\n         {\n             accessors.clear();\n             onlineIndexRules.clear();\n@@ -186,14 +182,14 @@ public class IndexAccessors implements Closeable\n     {\n         private final MutableLongObjectMap<IndexReader> readers = new LongObjectHashMap<>();\n \n-        public IndexReader reader( IndexDescriptor index )\n+        public IndexReader reader(IndexDescriptor index)\n         {\n             long indexId = index.getId();\n-            IndexReader reader = readers.get( indexId );\n-            if ( reader == null )\n+            IndexReader reader = readers.get(indexId);\n+            if (reader == null)\n             {\n-                reader = accessors.get( indexId ).newReader();\n-                readers.put( indexId, reader );\n+                reader = accessors.get(indexId).newReader();\n+                readers.put(indexId, reader);\n             }\n             return reader;\n         }\n@@ -201,13 +197,13 @@ public class IndexAccessors implements Closeable\n         @Override\n         public void close()\n         {\n-            IOUtils.closeAllUnchecked( readers.values() );\n+            IOUtils.closeAllUnchecked(readers.values());\n             readers.clear();\n         }\n     }\n \n     public interface IndexAccessorLookup\n     {\n-        IndexAccessor apply( IndexDescriptor indexDescriptor ) throws IOException;\n+        IndexAccessor apply(IndexDescriptor indexDescriptor) throws IOException;\n     }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}