{
    "project_name": "neo4j-neo4j",
    "error_id": "3128",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3128/InputEventStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3128/InputEventStream.java\nindex 7da9060d055..b4d42c8c4c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3128/InputEventStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3128/InputEventStream.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.http.cypher.format.api;\n \n import org.glassfish.jersey.internal.util.Producer;\n@@ -40,19 +41,19 @@ public class InputEventStream\n     /**\n      * An empty input stream used primarily for HTTP requests with no body.\n      */\n-    public static final InputEventStream EMPTY = new InputEventStream( Collections.emptyMap(), () -> null );\n+    public static final InputEventStream EMPTY = new InputEventStream(Collections.emptyMap(), () -> null);\n \n     private final Producer<Statement> statementProducer;\n-    private final Map<String,Object> parameters;\n+    private final Map<String, Object> parameters;\n \n     /**\n-     * @param parameters parameters that will be passed to {@link OutputEventSource}. The parameters are useful primarily if an input format\n-     * contains parameters for an output format. Input and output formats linked in this way can transfer parameters using this map.\n+     * @param parameters        parameters that will be passed to {@link OutputEventSource}. The parameters are useful primarily if an input format\n+     *                          contains parameters for an output format. Input and output formats linked in this way can transfer parameters using this map.\n      * @param statementProducer a function used for obtaining statements. Statements do not need to be fully received from the network\n-     * when this object is created, so this function serves as a callback for getting the statements.\n-     * The function should be blocking with {@code null} meaning end of the stream.\n+     *                          when this object is created, so this function serves as a callback for getting the statements.\n+     *                          The function should be blocking with {@code null} meaning end of the stream.\n      */\n-    public InputEventStream( Map<String,Object> parameters, Producer<Statement> statementProducer )\n+    public InputEventStream(Map<String, Object> parameters, Producer<Statement> statementProducer)\n     {\n         this.parameters = parameters;\n         this.statementProducer = statementProducer;\n@@ -70,7 +71,7 @@ public class InputEventStream\n         return statementProducer.call();\n     }\n \n-    public Map<String,Object> getParameters()\n+    public Map<String, Object> getParameters()\n     {\n         return parameters;\n     }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}