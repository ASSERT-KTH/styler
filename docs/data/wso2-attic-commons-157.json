{
    "project_name": "wso2-attic-commons",
    "error_id": "157",
    "information": {
        "errors": [
            {
                "line": "144",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      {\n        if (eNotificationRequired())\n          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WSDLPackage.BINDING_INPUT__EINPUT, oldEInput, eInput));\n      }\n    }\n    return eInput;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/157/BindingInputImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/157/BindingInputImpl.java\nindex 6c1d59b77d3..287efe3ff0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/157/BindingInputImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/157/BindingInputImpl.java\n@@ -8,6 +8,7 @@\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsdl.internal.impl;\n \n \n@@ -45,8 +46,7 @@ import org.w3c.dom.Element;\n  *\n  * @generated\n  */\n-public class BindingInputImpl extends ExtensibleElementImpl implements BindingInput\n-{\n+public class BindingInputImpl extends ExtensibleElementImpl implements BindingInput {\n   /**\n    * This class is not intended to be serialized.\n    * serialVersionUID is assigned with 1L to avoid\n@@ -58,9 +58,10 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n    * The default value of the '{@link #getName() <em>Name</em>}' attribute.\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n-   * @see #getName()\n+   *\n    * @generated\n    * @ordered\n+   * @see #getName()\n    */\n   protected static final String NAME_EDEFAULT = null;\n \n@@ -68,9 +69,10 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n    * The cached value of the '{@link #getName() <em>Name</em>}' attribute.\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n-   * @see #getName()\n+   *\n    * @generated\n    * @ordered\n+   * @see #getName()\n    */\n   protected String name = NAME_EDEFAULT;\n \n@@ -78,70 +80,72 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n    * The cached value of the '{@link #getEInput() <em>EInput</em>}' reference.\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n-   * @see #getEInput()\n+   *\n    * @generated\n    * @ordered\n+   * @see #getEInput()\n    */\n   protected Input eInput;\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  protected BindingInputImpl()\n-  {\n+  protected BindingInputImpl() {\n     super();\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  protected EClass eStaticClass()\n-  {\n+  protected EClass eStaticClass() {\n     return WSDLPackage.Literals.BINDING_INPUT;\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public String getName()\n-  {\n+  public String getName() {\n     return name;\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void setName(String newName)\n-  {\n+  public void setName(String newName) {\n     String oldName = name;\n     name = newName;\n-    if (eNotificationRequired())\n+    if (eNotificationRequired()) {\n       eNotify(new ENotificationImpl(this, Notification.SET, WSDLPackage.BINDING_INPUT__NAME, oldName, name));\n+    }\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public Input getEInput()\n-  {\n-    if (eInput != null && eInput.eIsProxy())\n-    {\n-      InternalEObject oldEInput = (InternalEObject)eInput;\n-      eInput = (Input)eResolveProxy(oldEInput);\n-      if (eInput != oldEInput)\n-      {\n-        if (eNotificationRequired())\n-          eNotify(new ENotificationImpl(this, Notification.RESOLVE, WSDLPackage.BINDING_INPUT__EINPUT, oldEInput, eInput));\n+  public Input getEInput() {\n+    if (eInput != null && eInput.eIsProxy()) {\n+      InternalEObject oldEInput = (InternalEObject) eInput;\n+      eInput = (Input) eResolveProxy(oldEInput);\n+      if (eInput != oldEInput) {\n+        if (eNotificationRequired()) {\n+          eNotify(\n+            new ENotificationImpl(this, Notification.RESOLVE, WSDLPackage.BINDING_INPUT__EINPUT, oldEInput, eInput));\n+        }\n       }\n     }\n     return eInput;\n@@ -150,60 +154,61 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public Input basicGetEInput()\n-  {\n+  public Input basicGetEInput() {\n     return eInput;\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void setEInput(Input newEInput)\n-  {\n+  public void setEInput(Input newEInput) {\n     Input oldEInput = eInput;\n     eInput = newEInput;\n-    if (eNotificationRequired())\n+    if (eNotificationRequired()) {\n       eNotify(new ENotificationImpl(this, Notification.SET, WSDLPackage.BINDING_INPUT__EINPUT, oldEInput, eInput));\n+    }\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated NOT\n    */\n-  public javax.wsdl.Input getInput()\n-  {\n+  public javax.wsdl.Input getInput() {\n     return getEInput();\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated NOT\n    */\n-  public void setInput(javax.wsdl.Input input)\n-  {\n-    setEInput((Input)input);\n+  public void setInput(javax.wsdl.Input input) {\n+    setEInput((Input) input);\n   }\n \n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public Object eGet(int featureID, boolean resolve, boolean coreType)\n-  {\n-    switch (featureID)\n-    {\n-      case WSDLPackage.BINDING_INPUT__NAME:\n+  public Object eGet(int featureID, boolean resolve, boolean coreType) {\n+    switch (featureID) {\n+    case WSDLPackage.BINDING_INPUT__NAME:\n       return getName();\n-      case WSDLPackage.BINDING_INPUT__EINPUT:\n-      if (resolve)\n+    case WSDLPackage.BINDING_INPUT__EINPUT:\n+      if (resolve) {\n         return getEInput();\n+      }\n       return basicGetEInput();\n     }\n     return super.eGet(featureID, resolve, coreType);\n@@ -212,17 +217,16 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void eSet(int featureID, Object newValue)\n-  {\n-    switch (featureID)\n-    {\n-      case WSDLPackage.BINDING_INPUT__NAME:\n-      setName((String)newValue);\n+  public void eSet(int featureID, Object newValue) {\n+    switch (featureID) {\n+    case WSDLPackage.BINDING_INPUT__NAME:\n+      setName((String) newValue);\n       return;\n-      case WSDLPackage.BINDING_INPUT__EINPUT:\n-      setEInput((Input)newValue);\n+    case WSDLPackage.BINDING_INPUT__EINPUT:\n+      setEInput((Input) newValue);\n       return;\n     }\n     super.eSet(featureID, newValue);\n@@ -231,17 +235,16 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public void eUnset(int featureID)\n-  {\n-    switch (featureID)\n-    {\n-      case WSDLPackage.BINDING_INPUT__NAME:\n+  public void eUnset(int featureID) {\n+    switch (featureID) {\n+    case WSDLPackage.BINDING_INPUT__NAME:\n       setName(NAME_EDEFAULT);\n       return;\n-      case WSDLPackage.BINDING_INPUT__EINPUT:\n-      setEInput((Input)null);\n+    case WSDLPackage.BINDING_INPUT__EINPUT:\n+      setEInput((Input) null);\n       return;\n     }\n     super.eUnset(featureID);\n@@ -250,15 +253,14 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public boolean eIsSet(int featureID)\n-  {\n-    switch (featureID)\n-    {\n-      case WSDLPackage.BINDING_INPUT__NAME:\n+  public boolean eIsSet(int featureID) {\n+    switch (featureID) {\n+    case WSDLPackage.BINDING_INPUT__NAME:\n       return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);\n-      case WSDLPackage.BINDING_INPUT__EINPUT:\n+    case WSDLPackage.BINDING_INPUT__EINPUT:\n       return eInput != null;\n     }\n     return super.eIsSet(featureID);\n@@ -267,12 +269,13 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   /**\n    * <!-- begin-user-doc -->\n    * <!-- end-user-doc -->\n+   *\n    * @generated\n    */\n-  public String toString()\n-  {\n-    if (eIsProxy())\n+  public String toString() {\n+    if (eIsProxy()) {\n       return super.toString();\n+    }\n \n     StringBuffer result = new StringBuffer(super.toString());\n     result.append(\" (name: \"); //$NON-NLS-1$\n@@ -285,26 +288,21 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   // Reconciliation methods\n   //\n \n-  public void reconcileAttributes(Element changedElement)\n-  {\n-    if (changedElement.hasAttribute(\"name\"))\n-    {\n+  public void reconcileAttributes(Element changedElement) {\n+    if (changedElement.hasAttribute(\"name\")) {\n       String name = changedElement.getAttribute(\"name\");\n-      if (name != null)\n-      {\n+      if (name != null) {\n         setName(name);\n       }\n     }\n   }\n \n-  public void handleUnreconciledElement(Element child, Collection remainingModelObjects)\n-  {\n+  public void handleUnreconciledElement(Element child, Collection remainingModelObjects) {\n     super.handleUnreconciledElement(child, remainingModelObjects);\n   }\n \n-  public Collection getModelObjects(Object component)\n-  {\n-    BindingInput bindingInput = (BindingInput)component;\n+  public Collection getModelObjects(Object component) {\n+    BindingInput bindingInput = (BindingInput) component;\n     List list = new ArrayList();\n     list.addAll(bindingInput.getEExtensibilityElements());\n     return list;\n@@ -314,30 +312,28 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   // For reconciliation: Model -> DOM\n   //\n \n-  protected void changeAttribute(EAttribute eAttribute)\n-  {\n-    if (isReconciling)\n+  protected void changeAttribute(EAttribute eAttribute) {\n+    if (isReconciling) {\n       return;\n+    }\n \n     super.changeAttribute(eAttribute);\n     Element theElement = getElement();\n-    if (theElement != null)\n-    {\n-      if (eAttribute == null || eAttribute == WSDLPackage.Literals.BINDING_INPUT__NAME)\n+    if (theElement != null) {\n+      if (eAttribute == null || eAttribute == WSDLPackage.Literals.BINDING_INPUT__NAME) {\n         niceSetAttribute(theElement, WSDLConstants.NAME_ATTRIBUTE, getName());\n+      }\n     }\n   }\n \n-  public Element createElement()\n-  {\n+  public Element createElement() {\n     Element newElement = createElement(WSDLConstants.INPUT);\n     setElement(newElement);\n \n     Iterator iterator = getExtensibilityElements().iterator();\n-    while (iterator.hasNext())\n-    {\n-      ExtensibilityElement extensibilityElement = (ExtensibilityElement)iterator.next();\n-      Element child = ((ExtensibilityElementImpl)extensibilityElement).createElement();\n+    while (iterator.hasNext()) {\n+      ExtensibilityElement extensibilityElement = (ExtensibilityElement) iterator.next();\n+      Element child = ((ExtensibilityElementImpl) extensibilityElement).createElement();\n       newElement.appendChild(child);\n     }\n \n@@ -345,14 +341,11 @@ public class BindingInputImpl extends ExtensibleElementImpl implements BindingIn\n   }\n \n   // Resolve the reference to Input\n-  public void reconcileReferences(boolean deep)\n-  {\n-    if (element != null)\n-    {\n-      BindingOperation bop = (BindingOperation)getContainer();\n+  public void reconcileReferences(boolean deep) {\n+    if (element != null) {\n+      BindingOperation bop = (BindingOperation) getContainer();\n       Operation op = bop.getEOperation();\n-      if (op != null)\n-      {\n+      if (op != null) {\n         setInput(op.getEInput());\n       }\n     }\n",
            "diff_size": 119
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}