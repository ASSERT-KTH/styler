{
    "project_name": "neo4j-neo4j",
    "error_id": "1194",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1194/StackTraceElementGuardedAdversary.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1194/StackTraceElementGuardedAdversary.java\nindex 8a4eeacfab4..4c85b94904c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1194/StackTraceElementGuardedAdversary.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1194/StackTraceElementGuardedAdversary.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.adversaries;\n \n import java.lang.StackWalker.StackFrame;\n@@ -29,7 +30,7 @@ public class StackTraceElementGuardedAdversary implements Adversary\n     private final Predicate<StackFrame> check;\n     private volatile boolean enabled;\n \n-    StackTraceElementGuardedAdversary( Adversary delegate, Predicate<StackFrame> check )\n+    StackTraceElementGuardedAdversary(Adversary delegate, Predicate<StackFrame> check)\n     {\n         this.delegate = delegate;\n         this.check = check;\n@@ -37,18 +38,18 @@ public class StackTraceElementGuardedAdversary implements Adversary\n     }\n \n     @Override\n-    public void injectFailure( Class<? extends Throwable>... failureTypes )\n+    public void injectFailure(Class<? extends Throwable>... failureTypes)\n     {\n-        if ( enabled && calledFromVictimStackTraceElement() )\n+        if (enabled && calledFromVictimStackTraceElement())\n         {\n-            delegate.injectFailure( failureTypes );\n+            delegate.injectFailure(failureTypes);\n         }\n     }\n \n     @Override\n-    public boolean injectFailureOrMischief( Class<? extends Throwable>... failureTypes )\n+    public boolean injectFailureOrMischief(Class<? extends Throwable>... failureTypes)\n     {\n-        return enabled && calledFromVictimStackTraceElement() && delegate.injectFailureOrMischief( failureTypes );\n+        return enabled && calledFromVictimStackTraceElement() && delegate.injectFailureOrMischief(failureTypes);\n     }\n \n     @Override\n@@ -59,7 +60,7 @@ public class StackTraceElementGuardedAdversary implements Adversary\n \n     private boolean calledFromVictimStackTraceElement()\n     {\n-        return StackWalker.getInstance().walk( s -> s.filter( check ).findAny() ).isPresent();\n+        return StackWalker.getInstance().walk(s -> s.filter(check).findAny()).isPresent();\n     }\n \n     public void disable()\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1194/StackTraceElementGuardedAdversary.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1194/StackTraceElementGuardedAdversary.java\nindex 8a4eeacfab4..096e0fb59f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1194/StackTraceElementGuardedAdversary.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1194/StackTraceElementGuardedAdversary.java\n@@ -71,4 +71,4 @@ public class StackTraceElementGuardedAdversary implements Adversary\n     {\n         enabled = true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}