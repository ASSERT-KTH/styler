{
    "project_name": "junkdog-artemis-odb",
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "61",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 108).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\t@Override\n\tpublic WorldSerializationManager.ArtemisSerializer register(Class<?> type, Json.Serializer serializer) {\n\t\tjson.setSerializer(type, serializer);\n\t\treturn this;\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/31/JsonArtemisSerializer.java\nindex 3b3978ef655..696fdc290b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/31/JsonArtemisSerializer.java\n@@ -58,7 +58,9 @@ public class JsonArtemisSerializer extends WorldSerializationManager.ArtemisSeri\n \t}\n \n \t@Override\n-\tpublic WorldSerializationManager.ArtemisSerializer register(Class<?> type, Json.Serializer serializer) {\n+\t\tpublic WorldSerializationManager . ArtemisSerializer register\n+\t\t\t(Class\n+< ?> type, Json.Serializer serializer) {\n \t\tjson.setSerializer(type, serializer);\n \t\treturn this;\n \t}\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/31/JsonArtemisSerializer.java\nindex 3b3978ef655..2f97b20c65c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/31/JsonArtemisSerializer.java\n@@ -15,142 +15,145 @@ import com.badlogic.gdx.utils.JsonWriter;\n import java.io.*;\n \n public class JsonArtemisSerializer extends WorldSerializationManager.ArtemisSerializer<Json.Serializer> {\n-\tprivate final Json json;\n-\tprivate final ComponentLookupSerializer lookup;\n-\tprivate final IntBagEntitySerializer intBagEntitySerializer;\n-\tprivate final TransmuterEntrySerializer transmuterEntrySerializer;\n-\tprivate final EntitySerializer entitySerializer;\n-\tprivate final ComponentCollector componentCollector;\n-\n-\tprivate boolean prettyPrint;\n-\tprivate ReferenceTracker referenceTracker;\n-\n-\tpublic JsonArtemisSerializer(World world) {\n-\t\tsuper(world);\n-\n-\t\tcomponentCollector = new ComponentCollector(world);\n-\t\treferenceTracker = new ReferenceTracker(world);\n-\n-\t\tlookup = new ComponentLookupSerializer();\n-\t\tintBagEntitySerializer = new IntBagEntitySerializer(world);\n-\t\tentitySerializer = new EntitySerializer(world, referenceTracker);\n-\t\ttransmuterEntrySerializer = new TransmuterEntrySerializer();\n-\n-\t\tjson = new Json(JsonWriter.OutputType.json);\n-\t\tjson.setIgnoreUnknownFields(true);\n-\t\tjson.setSerializer(SaveFileFormat.ComponentIdentifiers.class, lookup);\n-\t\tjson.setSerializer(Bag.class, new EntityBagSerializer(world));\n-\t\tjson.setSerializer(IntBag.class, intBagEntitySerializer);\n-\t\tjson.setSerializer(Entity.class, entitySerializer);\n-\t\tjson.setSerializer(ArchetypeMapper.class, new ArchetypeMapperSerializer());\n-\t\tjson.setSerializer(ArchetypeMapper.TransmuterEntry.class, transmuterEntrySerializer);\n-\t}\n-\n-\tpublic JsonArtemisSerializer prettyPrint(boolean prettyPrint) {\n-\t\tthis.prettyPrint = prettyPrint;\n-\t\treturn this;\n-\t}\n-\n-\tpublic JsonArtemisSerializer setUsePrototypes(boolean usePrototypes) {\n-\t\tjson.setUsePrototypes(usePrototypes);\n-\t\tentitySerializer.setUsePrototypes(usePrototypes);\n-\t\treturn this;\n-\t}\n-\n-\t@Override\n-\tpublic WorldSerializationManager.ArtemisSerializer register(Class<?> type, Json.Serializer serializer) {\n-\t\tjson.setSerializer(type, serializer);\n-\t\treturn this;\n-\t}\n-\n-\tprivate void save(Writer writer, SaveFileFormat save) {\n-\t\ttry {\n-\t\t\treferenceTracker.inspectTypes(world);\n-\t\t\treferenceTracker.preWrite(save);\n-\n-\t\t\tsave.archetypes = new ArchetypeMapper(world, save.entities);\n-\n-\t\t\tcomponentCollector.preWrite(save);\n-\t\t\tentitySerializer.serializationState = save;\n-\t\t\ttransmuterEntrySerializer.identifiers = save.componentIdentifiers;\n-\t\t\tentitySerializer.archetypeMapper = new ArchetypeMapper(world, save.entities);\n-\t\t\tentitySerializer.archetypeMapper.serializationState = save;\n-\t\t\tsave.componentIdentifiers.build();\n-\t\t\tif (prettyPrint) {\n-\t\t\t\twriter.append(json.prettyPrint(save));\n-\t\t\t\twriter.flush();\n-\t\t\t} else {\n-\t\t\t\tjson.toJson(save, writer);\n-\t\t\t}\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new SerializationException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tprotected void save(OutputStream out, SaveFileFormat save) {\n-\t\tsave(new OutputStreamWriter(out), save);\n-\t}\n-\n-\t@Override\n-\tprotected <T extends SaveFileFormat> T load(InputStream is, Class<T> format) {\n-\t\treturn load(new JsonReader().parse(is), format);\n-\t}\n-\n-\tpublic <T extends SaveFileFormat> T load(JsonValue jsonData, Class<T> format) {\n-\t\tentitySerializer.preLoad();\n-\n-\t\tSaveFileFormat partial = partialLoad(jsonData);\n-\t\treferenceTracker.inspectTypes(partial.componentIdentifiers.getTypes());\n-\t\tentitySerializer.factory.configureWith(countChildren(jsonData.get(\"entities\")));\n-\n-\t\tT t = newInstance(format);\n-\t\tjson.readFields(t, jsonData);\n-\t\tt.tracker = entitySerializer.keyTracker;\n-\t\treferenceTracker.translate(intBagEntitySerializer.getTranslatedIds());\n-\t\treturn t;\n-\t}\n-\n-\tprivate <T extends SaveFileFormat> T newInstance(Class<T> format) {\n-\t\tif (format.getClass().equals(SaveFileFormat.class))\n-\t\t\treturn (T) new SaveFileFormat();\n-\n-\t\ttry {\n-\t\t\tConstructor ctor = ClassReflection.getDeclaredConstructor(format);\n-\t\t\tctor.setAccessible(true);\n-\t\t\treturn (T) ctor.newInstance();\n-\t\t} catch (ReflectionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\n-\tprivate SaveFileFormat partialLoad(JsonValue jsonMap) {\n-\t\tSaveFileFormat save = new SaveFileFormat((IntBag)null);\n-\t\tjson.readField(save, \"componentIdentifiers\", jsonMap);\n-\t\ttransmuterEntrySerializer.identifiers = save.componentIdentifiers;\n-\n-\t\tjson.readField(save, \"archetypes\", jsonMap);\n-\t\tentitySerializer.archetypeMapper = save.archetypes;\n-\n-\t\tentitySerializer.serializationState = save;\n-\t\tif (entitySerializer.archetypeMapper != null) {\n-\t\t\tentitySerializer.archetypeMapper.serializationState = save;\n-\t\t\ttransmuterEntrySerializer.identifiers = save.componentIdentifiers;\n-\t\t}\n-\n-\t\treturn save;\n-\t}\n-\n-\tprivate int countChildren(JsonValue jsonData) {\n-\t\tif (jsonData == null || jsonData.child == null)\n-\t\t\treturn 0;\n-\n-\t\tJsonValue entity = jsonData.child;\n-\t\tint count = 0;\n-\t\twhile (entity != null) {\n-\t\t\tcount++;\n-\t\t\tentity = entity.next;\n-\t\t}\n-\t\treturn count;\n-\t}\n+    private final Json json;\n+    private final ComponentLookupSerializer lookup;\n+    private final IntBagEntitySerializer intBagEntitySerializer;\n+    private final TransmuterEntrySerializer transmuterEntrySerializer;\n+    private final EntitySerializer entitySerializer;\n+    private final ComponentCollector componentCollector;\n+\n+    private boolean prettyPrint;\n+    private ReferenceTracker referenceTracker;\n+\n+    public JsonArtemisSerializer(World world) {\n+        super(world);\n+\n+        componentCollector = new ComponentCollector(world);\n+        referenceTracker = new ReferenceTracker(world);\n+\n+        lookup = new ComponentLookupSerializer();\n+        intBagEntitySerializer = new IntBagEntitySerializer(world);\n+        entitySerializer = new EntitySerializer(world, referenceTracker);\n+        transmuterEntrySerializer = new TransmuterEntrySerializer();\n+\n+        json = new Json(JsonWriter.OutputType.json);\n+        json.setIgnoreUnknownFields(true);\n+        json.setSerializer(SaveFileFormat.ComponentIdentifiers.class, lookup);\n+        json.setSerializer(Bag.class, new EntityBagSerializer(world));\n+        json.setSerializer(IntBag.class, intBagEntitySerializer);\n+        json.setSerializer(Entity.class, entitySerializer);\n+        json.setSerializer(ArchetypeMapper.class, new ArchetypeMapperSerializer());\n+        json.setSerializer(ArchetypeMapper.TransmuterEntry.class, transmuterEntrySerializer);\n+    }\n+\n+    public JsonArtemisSerializer prettyPrint(boolean prettyPrint) {\n+        this.prettyPrint = prettyPrint;\n+        return this;\n+    }\n+\n+    public JsonArtemisSerializer setUsePrototypes(boolean usePrototypes) {\n+        json.setUsePrototypes(usePrototypes);\n+        entitySerializer.setUsePrototypes(usePrototypes);\n+        return this;\n+    }\n+\n+    @Override\n+    public WorldSerializationManager.ArtemisSerializer register(Class<?> type,\n+                                                                Json.Serializer serializer) {\n+        json.setSerializer(type, serializer);\n+        return this;\n+    }\n+\n+    private void save(Writer writer, SaveFileFormat save) {\n+        try {\n+            referenceTracker.inspectTypes(world);\n+            referenceTracker.preWrite(save);\n+\n+            save.archetypes = new ArchetypeMapper(world, save.entities);\n+\n+            componentCollector.preWrite(save);\n+            entitySerializer.serializationState = save;\n+            transmuterEntrySerializer.identifiers = save.componentIdentifiers;\n+            entitySerializer.archetypeMapper = new ArchetypeMapper(world, save.entities);\n+            entitySerializer.archetypeMapper.serializationState = save;\n+            save.componentIdentifiers.build();\n+            if (prettyPrint) {\n+                writer.append(json.prettyPrint(save));\n+                writer.flush();\n+            } else {\n+                json.toJson(save, writer);\n+            }\n+        } catch (IOException e) {\n+            throw new SerializationException(e);\n+        }\n+    }\n+\n+    @Override\n+    protected void save(OutputStream out, SaveFileFormat save) {\n+        save(new OutputStreamWriter(out), save);\n+    }\n+\n+    @Override\n+    protected <T extends SaveFileFormat> T load(InputStream is, Class<T> format) {\n+        return load(new JsonReader().parse(is), format);\n+    }\n+\n+    public <T extends SaveFileFormat> T load(JsonValue jsonData, Class<T> format) {\n+        entitySerializer.preLoad();\n+\n+        SaveFileFormat partial = partialLoad(jsonData);\n+        referenceTracker.inspectTypes(partial.componentIdentifiers.getTypes());\n+        entitySerializer.factory.configureWith(countChildren(jsonData.get(\"entities\")));\n+\n+        T t = newInstance(format);\n+        json.readFields(t, jsonData);\n+        t.tracker = entitySerializer.keyTracker;\n+        referenceTracker.translate(intBagEntitySerializer.getTranslatedIds());\n+        return t;\n+    }\n+\n+    private <T extends SaveFileFormat> T newInstance(Class<T> format) {\n+        if (format.getClass().equals(SaveFileFormat.class)) {\n+            return (T) new SaveFileFormat();\n+        }\n+\n+        try {\n+            Constructor ctor = ClassReflection.getDeclaredConstructor(format);\n+            ctor.setAccessible(true);\n+            return (T) ctor.newInstance();\n+        } catch (ReflectionException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private SaveFileFormat partialLoad(JsonValue jsonMap) {\n+        SaveFileFormat save = new SaveFileFormat((IntBag) null);\n+        json.readField(save, \"componentIdentifiers\", jsonMap);\n+        transmuterEntrySerializer.identifiers = save.componentIdentifiers;\n+\n+        json.readField(save, \"archetypes\", jsonMap);\n+        entitySerializer.archetypeMapper = save.archetypes;\n+\n+        entitySerializer.serializationState = save;\n+        if (entitySerializer.archetypeMapper != null) {\n+            entitySerializer.archetypeMapper.serializationState = save;\n+            transmuterEntrySerializer.identifiers = save.componentIdentifiers;\n+        }\n+\n+        return save;\n+    }\n+\n+    private int countChildren(JsonValue jsonData) {\n+        if (jsonData == null || jsonData.child == null) {\n+            return 0;\n+        }\n+\n+        JsonValue entity = jsonData.child;\n+        int count = 0;\n+        while (entity != null) {\n+            count++;\n+            entity = entity.next;\n+        }\n+        return count;\n+    }\n }\n",
            "diff_size": 141
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/31/JsonArtemisSerializer.java\nindex 3b3978ef655..03dcb8f88b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/31/JsonArtemisSerializer.java\n@@ -114,8 +114,7 @@ public class JsonArtemisSerializer extends WorldSerializationManager.ArtemisSeri\n \tprivate <T extends SaveFileFormat> T newInstance(Class<T> format) {\n \t\tif (format.getClass().equals(SaveFileFormat.class))\n \t\t\treturn (T) new SaveFileFormat();\n-\n-\t\ttry {\n+try {\n \t\t\tConstructor ctor = ClassReflection.getDeclaredConstructor(format);\n \t\t\tctor.setAccessible(true);\n \t\t\treturn (T) ctor.newInstance();\n@@ -153,4 +152,4 @@ public class JsonArtemisSerializer extends WorldSerializationManager.ArtemisSeri\n \t\t}\n \t\treturn count;\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/31/JsonArtemisSerializer.java\nindex 3b3978ef655..37ab8cbb370 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/31/JsonArtemisSerializer.java\n@@ -15,142 +15,144 @@ import com.badlogic.gdx.utils.JsonWriter;\n import java.io.*;\n \n public class JsonArtemisSerializer extends WorldSerializationManager.ArtemisSerializer<Json.Serializer> {\n-\tprivate final Json json;\n-\tprivate final ComponentLookupSerializer lookup;\n-\tprivate final IntBagEntitySerializer intBagEntitySerializer;\n-\tprivate final TransmuterEntrySerializer transmuterEntrySerializer;\n-\tprivate final EntitySerializer entitySerializer;\n-\tprivate final ComponentCollector componentCollector;\n-\n-\tprivate boolean prettyPrint;\n-\tprivate ReferenceTracker referenceTracker;\n-\n-\tpublic JsonArtemisSerializer(World world) {\n-\t\tsuper(world);\n-\n-\t\tcomponentCollector = new ComponentCollector(world);\n-\t\treferenceTracker = new ReferenceTracker(world);\n-\n-\t\tlookup = new ComponentLookupSerializer();\n-\t\tintBagEntitySerializer = new IntBagEntitySerializer(world);\n-\t\tentitySerializer = new EntitySerializer(world, referenceTracker);\n-\t\ttransmuterEntrySerializer = new TransmuterEntrySerializer();\n-\n-\t\tjson = new Json(JsonWriter.OutputType.json);\n-\t\tjson.setIgnoreUnknownFields(true);\n-\t\tjson.setSerializer(SaveFileFormat.ComponentIdentifiers.class, lookup);\n-\t\tjson.setSerializer(Bag.class, new EntityBagSerializer(world));\n-\t\tjson.setSerializer(IntBag.class, intBagEntitySerializer);\n-\t\tjson.setSerializer(Entity.class, entitySerializer);\n-\t\tjson.setSerializer(ArchetypeMapper.class, new ArchetypeMapperSerializer());\n-\t\tjson.setSerializer(ArchetypeMapper.TransmuterEntry.class, transmuterEntrySerializer);\n-\t}\n-\n-\tpublic JsonArtemisSerializer prettyPrint(boolean prettyPrint) {\n-\t\tthis.prettyPrint = prettyPrint;\n-\t\treturn this;\n-\t}\n-\n-\tpublic JsonArtemisSerializer setUsePrototypes(boolean usePrototypes) {\n-\t\tjson.setUsePrototypes(usePrototypes);\n-\t\tentitySerializer.setUsePrototypes(usePrototypes);\n-\t\treturn this;\n-\t}\n-\n-\t@Override\n-\tpublic WorldSerializationManager.ArtemisSerializer register(Class<?> type, Json.Serializer serializer) {\n-\t\tjson.setSerializer(type, serializer);\n-\t\treturn this;\n-\t}\n-\n-\tprivate void save(Writer writer, SaveFileFormat save) {\n-\t\ttry {\n-\t\t\treferenceTracker.inspectTypes(world);\n-\t\t\treferenceTracker.preWrite(save);\n-\n-\t\t\tsave.archetypes = new ArchetypeMapper(world, save.entities);\n-\n-\t\t\tcomponentCollector.preWrite(save);\n-\t\t\tentitySerializer.serializationState = save;\n-\t\t\ttransmuterEntrySerializer.identifiers = save.componentIdentifiers;\n-\t\t\tentitySerializer.archetypeMapper = new ArchetypeMapper(world, save.entities);\n-\t\t\tentitySerializer.archetypeMapper.serializationState = save;\n-\t\t\tsave.componentIdentifiers.build();\n-\t\t\tif (prettyPrint) {\n-\t\t\t\twriter.append(json.prettyPrint(save));\n-\t\t\t\twriter.flush();\n-\t\t\t} else {\n-\t\t\t\tjson.toJson(save, writer);\n-\t\t\t}\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new SerializationException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tprotected void save(OutputStream out, SaveFileFormat save) {\n-\t\tsave(new OutputStreamWriter(out), save);\n-\t}\n-\n-\t@Override\n-\tprotected <T extends SaveFileFormat> T load(InputStream is, Class<T> format) {\n-\t\treturn load(new JsonReader().parse(is), format);\n-\t}\n-\n-\tpublic <T extends SaveFileFormat> T load(JsonValue jsonData, Class<T> format) {\n-\t\tentitySerializer.preLoad();\n-\n-\t\tSaveFileFormat partial = partialLoad(jsonData);\n-\t\treferenceTracker.inspectTypes(partial.componentIdentifiers.getTypes());\n-\t\tentitySerializer.factory.configureWith(countChildren(jsonData.get(\"entities\")));\n-\n-\t\tT t = newInstance(format);\n-\t\tjson.readFields(t, jsonData);\n-\t\tt.tracker = entitySerializer.keyTracker;\n-\t\treferenceTracker.translate(intBagEntitySerializer.getTranslatedIds());\n-\t\treturn t;\n-\t}\n-\n-\tprivate <T extends SaveFileFormat> T newInstance(Class<T> format) {\n-\t\tif (format.getClass().equals(SaveFileFormat.class))\n-\t\t\treturn (T) new SaveFileFormat();\n-\n-\t\ttry {\n-\t\t\tConstructor ctor = ClassReflection.getDeclaredConstructor(format);\n-\t\t\tctor.setAccessible(true);\n-\t\t\treturn (T) ctor.newInstance();\n-\t\t} catch (ReflectionException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\n-\tprivate SaveFileFormat partialLoad(JsonValue jsonMap) {\n-\t\tSaveFileFormat save = new SaveFileFormat((IntBag)null);\n-\t\tjson.readField(save, \"componentIdentifiers\", jsonMap);\n-\t\ttransmuterEntrySerializer.identifiers = save.componentIdentifiers;\n-\n-\t\tjson.readField(save, \"archetypes\", jsonMap);\n-\t\tentitySerializer.archetypeMapper = save.archetypes;\n-\n-\t\tentitySerializer.serializationState = save;\n-\t\tif (entitySerializer.archetypeMapper != null) {\n-\t\t\tentitySerializer.archetypeMapper.serializationState = save;\n-\t\t\ttransmuterEntrySerializer.identifiers = save.componentIdentifiers;\n-\t\t}\n-\n-\t\treturn save;\n-\t}\n-\n-\tprivate int countChildren(JsonValue jsonData) {\n-\t\tif (jsonData == null || jsonData.child == null)\n-\t\t\treturn 0;\n-\n-\t\tJsonValue entity = jsonData.child;\n-\t\tint count = 0;\n-\t\twhile (entity != null) {\n-\t\t\tcount++;\n-\t\t\tentity = entity.next;\n-\t\t}\n-\t\treturn count;\n-\t}\n-}\n+ private final Json json;\n+\n+ private final ComponentLookupSerializer lookup;\n+\n+ private final IntBagEntitySerializer intBagEntitySerializer;\n+\n+ private final TransmuterEntrySerializer transmuterEntrySerializer;\n+\n+ private final EntitySerializer entitySerializer;\n+\n+ private final ComponentCollector componentCollector;\n+\n+ private boolean prettyPrint;\n+\n+ private ReferenceTracker referenceTracker;\n+\n+ public JsonArtemisSerializer(World world) {\n+  super(world);\n+  componentCollector = new ComponentCollector(world);\n+  referenceTracker = new ReferenceTracker(world);\n+  lookup = new ComponentLookupSerializer();\n+  intBagEntitySerializer = new IntBagEntitySerializer(world);\n+  entitySerializer = new EntitySerializer(world, referenceTracker);\n+  transmuterEntrySerializer = new TransmuterEntrySerializer();\n+  json = new Json(JsonWriter.OutputType.json);\n+  json.setIgnoreUnknownFields(true);\n+  json.setSerializer(SaveFileFormat.ComponentIdentifiers.class, lookup);\n+  json.setSerializer(Bag.class, new EntityBagSerializer(world));\n+  json.setSerializer(IntBag.class, intBagEntitySerializer);\n+  json.setSerializer(Entity.class, entitySerializer);\n+  json.setSerializer(ArchetypeMapper.class, new ArchetypeMapperSerializer());\n+  json.setSerializer(ArchetypeMapper.TransmuterEntry.class, transmuterEntrySerializer);\n+ }\n+\n+ public JsonArtemisSerializer prettyPrint(boolean prettyPrint) {\n+  this.prettyPrint = prettyPrint;\n+  return this;\n+ }\n+\n+\n+ public JsonArtemisSerializer setUsePrototypes(boolean usePrototypes) {\n+  json.setUsePrototypes(usePrototypes);\n+  entitySerializer.setUsePrototypes(usePrototypes);\n+  return this;\n+ }\n+\n+ @Override\n+ public WorldSerializationManager.ArtemisSerializer register(Class<?> type, Json.Serializer serializer) {\n+  json.setSerializer(type, serializer);\n+  return this;\n+ }\n+\n+ private void save(Writer writer, SaveFileFormat save) {\n+  try {\n+   referenceTracker.inspectTypes(world);\n+   referenceTracker.preWrite(save);\n+   save.archetypes = new ArchetypeMapper(world, save.entities);\n+   componentCollector.preWrite(save);\n+   entitySerializer.serializationState = save;\n+   transmuterEntrySerializer.identifiers = save.componentIdentifiers;\n+   entitySerializer.archetypeMapper = new ArchetypeMapper(world, save.entities);\n+   entitySerializer.archetypeMapper.serializationState = save;\n+   save.componentIdentifiers.build();\n+   if (prettyPrint) {\n+    writer.append(json.prettyPrint(save));\n+    writer.flush();\n+   } else {\n+    json.toJson(save, writer);\n+   }\n+  } catch (IOException e) {\n+   throw new SerializationException(e);\n+  }\n+ }\n+\n+ @Override\n+ protected void save(OutputStream out, SaveFileFormat save) {\n+  save(new OutputStreamWriter(out), save);\n+ }\n+\n+ @Override\n+ protected <T extends SaveFileFormat> T load(InputStream is, Class<T> format) {\n+  return load(new JsonReader().parse(is), format);\n+ }\n+\n+\n+ public <T extends SaveFileFormat> T load(JsonValue jsonData, Class<T> format) {\n+  entitySerializer.preLoad();\n+\n+  SaveFileFormat partial = partialLoad(jsonData);\n+  referenceTracker.inspectTypes(partial.componentIdentifiers.getTypes());\n+  entitySerializer.factory.configureWith(countChildren(jsonData.get(\"entities\")));\n+\n+  T t = newInstance(format);\n+  json.readFields(t, jsonData);\n+  t.tracker = entitySerializer.keyTracker;\n+  referenceTracker.translate(intBagEntitySerializer.getTranslatedIds());\n+  return t;\n+ }\n+\n+ private <T extends SaveFileFormat> T newInstance(Class<T> format) {\n+  if (format.getClass().equals(SaveFileFormat.class))\n+   return (T) new SaveFileFormat();\n+\n+  try {\n+   Constructor ctor = ClassReflection.getDeclaredConstructor(format);\n+   ctor.setAccessible(true);\n+   return (T) ctor.newInstance();\n+  } catch (ReflectionException e) {\n+   throw new RuntimeException(e);\n+  }\n+ }\n+\n+ private SaveFileFormat partialLoad(JsonValue jsonMap) {\n+  SaveFileFormat save = new SaveFileFormat((IntBag) null);\n+  json.readField(save, \"componentIdentifiers\", jsonMap);\n+  transmuterEntrySerializer.identifiers = save.componentIdentifiers;\n+  json.readField(save, \"archetypes\", jsonMap);\n+  entitySerializer.archetypeMapper = save.archetypes;\n+  entitySerializer.serializationState = save;\n+  if (entitySerializer.archetypeMapper != null) {\n+   entitySerializer.archetypeMapper.serializationState = save;\n+   transmuterEntrySerializer.identifiers = save.componentIdentifiers;\n+  }\n+\n+  return save;\n+ }\n+\n+ private int countChildren(JsonValue jsonData) {\n+  if (jsonData == null || jsonData.child == null)\n+   return 0;\n+\n+  JsonValue entity = jsonData.child;\n+  int count = 0;\n+  while (entity != null) {\n+   count++;\n+   entity = entity.next;\n+  }\n+\n+  return count;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 141
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/31/JsonArtemisSerializer.java\nindex 3b3978ef655..696fdc290b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/31/JsonArtemisSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_three_grams/31/JsonArtemisSerializer.java\n@@ -58,7 +58,9 @@ public class JsonArtemisSerializer extends WorldSerializationManager.ArtemisSeri\n \t}\n \n \t@Override\n-\tpublic WorldSerializationManager.ArtemisSerializer register(Class<?> type, Json.Serializer serializer) {\n+\t\tpublic WorldSerializationManager . ArtemisSerializer register\n+\t\t\t(Class\n+< ?> type, Json.Serializer serializer) {\n \t\tjson.setSerializer(type, serializer);\n \t\treturn this;\n \t}\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_random"
    ]
}