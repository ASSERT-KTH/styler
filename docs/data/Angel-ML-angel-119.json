{
    "project_name": "Angel-ML-angel",
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "14",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\n  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n    setInplace(inplace);\n    setKeepStorage(Constant.keepStorage);\n    this.alpha = alpha;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/119/FTRLThresholdInit.java\nindex 8efc40c1cc4..a7c0b0d5daa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/119/FTRLThresholdInit.java\n@@ -9,10 +9,9 @@ public class FTRLThresholdInit extends Binary {\n   private double alpha, beta, lambda1, lambda2;\n   private double mean, stdev;\n   private Random random;\n-\n-\n-  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n-    setInplace(inplace);\n+  public FTRLThresholdInit(boolean inplace, double alpha,\n+  double beta, double lambda1, double lambda2, double mean, double stdev) {\n+     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n     this.alpha = alpha;\n     this.beta = beta;\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/119/FTRLThresholdInit.java\nindex 8efc40c1cc4..7a9f4e69119 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/119/FTRLThresholdInit.java\n@@ -11,7 +11,8 @@ public class FTRLThresholdInit extends Binary {\n   private Random random;\n \n \n-  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n+  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1,\n+                           double lambda2, double mean, double stdev) {\n     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n     this.alpha = alpha;\n@@ -34,7 +35,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n@@ -45,7 +46,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n@@ -55,7 +56,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n@@ -65,7 +66,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n@@ -75,7 +76,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n@@ -85,7 +86,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n@@ -96,7 +97,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n@@ -106,7 +107,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n@@ -116,7 +117,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n@@ -126,7 +127,7 @@ public class FTRLThresholdInit extends Binary {\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n       result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+          - Math.signum(zVal) * lambda1);\n     }\n     return (int) result;\n   }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/119/FTRLThresholdInit.java\nindex 8efc40c1cc4..db2c9113207 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/119/FTRLThresholdInit.java\n@@ -30,104 +30,104 @@ public class FTRLThresholdInit extends Binary {\n \n   @Override\n   public double apply(double zVal, double nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   @Override\n   public double apply(double zVal, float nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, long nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, int nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public float apply(float zVal, float nVal) {\n-    if (nVal == 0.0f) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0.0f)\n+  return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, long nVal) {\n-    if (nVal == 0L) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+  return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, int nVal) {\n-    if (nVal == 0) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+  return (float) (mean + random.nextGaussian() * stdev);\n \n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public long apply(long zVal, long nVal) {\n-    if (nVal == 0L) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+  return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public long apply(long zVal, int nVal) {\n-    if (nVal == 0) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+  return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public int apply(int zVal, int nVal) {\n-    if (nVal == 0) return (int) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+  return (int) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (int) result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/119/FTRLThresholdInit.java\nindex 8efc40c1cc4..c427acc4a36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/119/FTRLThresholdInit.java\n@@ -1,7 +1,6 @@\n package com.tencent.angel.ml.math2.ufuncs.expression;\n \n import com.tencent.angel.ml.math2.utils.Constant;\n-\n import java.util.Random;\n \n public class FTRLThresholdInit extends Binary {\n@@ -10,7 +9,6 @@ public class FTRLThresholdInit extends Binary {\n   private double mean, stdev;\n   private Random random;\n \n-\n   public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n@@ -30,104 +28,104 @@ public class FTRLThresholdInit extends Binary {\n \n   @Override\n   public double apply(double zVal, double nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   @Override\n   public double apply(double zVal, float nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, long nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, int nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public float apply(float zVal, float nVal) {\n-    if (nVal == 0.0f) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0.0f)\n+      return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, long nVal) {\n-    if (nVal == 0L) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+      return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, int nVal) {\n-    if (nVal == 0) return (float) (mean + random.nextGaussian() * stdev);\n-\n+    if (nVal == 0)\n+      return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public long apply(long zVal, long nVal) {\n-    if (nVal == 0L) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+      return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public long apply(long zVal, int nVal) {\n-    if (nVal == 0) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+      return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public int apply(int zVal, int nVal) {\n-    if (nVal == 0) return (int) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+      return (int) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (int) result;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/119/FTRLThresholdInit.java\nindex 8efc40c1cc4..a7c0b0d5daa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/119/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/119/FTRLThresholdInit.java\n@@ -9,10 +9,9 @@ public class FTRLThresholdInit extends Binary {\n   private double alpha, beta, lambda1, lambda2;\n   private double mean, stdev;\n   private Random random;\n-\n-\n-  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n-    setInplace(inplace);\n+  public FTRLThresholdInit(boolean inplace, double alpha,\n+  double beta, double lambda1, double lambda2, double mean, double stdev) {\n+     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n     this.alpha = alpha;\n     this.beta = beta;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}