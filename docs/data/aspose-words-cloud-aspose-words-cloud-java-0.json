{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "239",
                "column": "21",
                "severity": "error",
                "message": "'}' at column 21 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "                    if (date.indexOf('(') == -1) {\n                        timeStampString = date.replace('T', ' ');\n                    } else {\n                        timeStampString = new Timestamp(Long.valueOf(date.substring(date.indexOf(\"(\") + 1, date.indexOf(\")\") - 1))).toString();\n                    }\n                    Integer index = timeStampString.indexOf(\" \");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/0/JSON.java\nindex 2ac5a9ed864..4b1ace853e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/0/JSON.java\n@@ -236,7 +236,8 @@ public class JSON {\n                     String timeStampString;\n                     if (date.indexOf('(') == -1) {\n                         timeStampString = date.replace('T', ' ');\n-                    } else {\n+                      }\n+                        else {\n                         timeStampString = new Timestamp(Long.valueOf(date.substring(date.indexOf(\"(\") + 1, date.indexOf(\")\") - 1))).toString();\n                     }\n                     Integer index = timeStampString.indexOf(\" \");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "161",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "226",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "245",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "287",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "339",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "343",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "363",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "393",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "397",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "418",
                    "column": "25",
                    "severity": "error",
                    "message": "'}' at column 25 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "422",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/0/JSON.java\nindex 2ac5a9ed864..c7f0006d00f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/0/JSON.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -35,8 +35,10 @@ import com.google.gson.internal.bind.util.ISO8601Utils;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n import com.google.gson.JsonElement;\n+\n import io.gsonfire.GsonFireBuilder;\n import io.gsonfire.TypeSelector;\n+\n import org.threeten.bp.LocalDate;\n import org.threeten.bp.OffsetDateTime;\n import org.threeten.bp.ZoneOffset;\n@@ -60,11 +62,17 @@ import java.util.HashMap;\n \n public class JSON {\n     private Gson gson;\n+\n     private boolean isLenientOnJson = false;\n+\n     private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();\n+\n     private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();\n+\n     private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();\n+\n     private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();\n+\n     private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();\n \n     public static GsonBuilder createGson() {\n@@ -150,17 +158,17 @@ public class JSON {\n                 // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)\n                 jsonReader.setLenient(true);\n                 return gson.fromJson(jsonReader, returnType);\n-            } \n-            else {\n+            } else {\n                 return gson.fromJson(body, returnType);\n             }\n-        } \n-        catch (JsonParseException e) {\n+        } catch (JsonParseException e) {\n             // Fallback processing when failed to parse JSON form response body:\n             // return the response body string directly for the String return type;\n-            if (returnType.equals(String.class))\n+            if (returnType.equals(String.class)) {\n                 return (T) body;\n-            else throw e;\n+            } else {\n+                throw e;\n+            }\n         }\n     }\n \n@@ -173,8 +181,7 @@ public class JSON {\n         public void write(JsonWriter out, byte[] value) throws IOException {\n             if (value == null) {\n                 out.nullValue();\n-            } \n-            else {\n+            } else {\n                 out.value(ByteString.of(value).base64());\n             }\n         }\n@@ -216,8 +223,7 @@ public class JSON {\n         public void write(JsonWriter out, OffsetDateTime date) throws IOException {\n             if (date == null) {\n                 out.nullValue();\n-            } \n-            else {\n+            } else {\n                 out.value(formatter.format(date));\n             }\n         }\n@@ -244,13 +250,13 @@ public class JSON {\n                     String[] timeString = timeStampString.substring(index + 1).split(\":\");\n                     String[] val = dateString.split(\"-\");\n                     return OffsetDateTime.of(Integer.valueOf(val[0]),\n-                            Integer.valueOf(val[1]),\n-                            Integer.valueOf(val[2]),\n-                            Integer.valueOf(timeString[0]),\n-                            Integer.valueOf(timeString[1]),\n-                            0,\n-                            0,\n-                            ZoneOffset.UTC);\n+                        Integer.valueOf(val[1]),\n+                        Integer.valueOf(val[2]),\n+                        Integer.valueOf(timeString[0]),\n+                        Integer.valueOf(timeString[1]),\n+                        0,\n+                        0,\n+                        ZoneOffset.UTC);\n             }\n         }\n     }\n@@ -278,8 +284,7 @@ public class JSON {\n         public void write(JsonWriter out, LocalDate date) throws IOException {\n             if (date == null) {\n                 out.nullValue();\n-            } \n-            else {\n+            } else {\n                 out.value(formatter.format(date));\n             }\n         }\n@@ -331,13 +336,11 @@ public class JSON {\n         public void write(JsonWriter out, java.sql.Date date) throws IOException {\n             if (date == null) {\n                 out.nullValue();\n-            } \n-            else {\n+            } else {\n                 String value;\n                 if (dateFormat != null) {\n                     value = dateFormat.format(date);\n-                } \n-                else {\n+                } else {\n                     value = date.toString();\n                 }\n                 out.value(value);\n@@ -357,8 +360,7 @@ public class JSON {\n                             return new java.sql.Date(dateFormat.parse(date).getTime());\n                         }\n                         return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());\n-                    } \n-                    catch (ParseException e) {\n+                    } catch (ParseException e) {\n                         throw new JsonParseException(e);\n                     }\n             }\n@@ -388,13 +390,11 @@ public class JSON {\n         public void write(JsonWriter out, Date date) throws IOException {\n             if (date == null) {\n                 out.nullValue();\n-            } \n-            else {\n+            } else {\n                 String value;\n                 if (dateFormat != null) {\n                     value = dateFormat.format(date);\n-                } \n-                else {\n+                } else {\n                     value = ISO8601Utils.format(date, true);\n                 }\n                 out.value(value);\n@@ -415,13 +415,11 @@ public class JSON {\n                                 return dateFormat.parse(date);\n                             }\n                             return ISO8601Utils.parse(date, new ParsePosition(0));\n-                        } \n-                        catch (ParseException e) {\n+                        } catch (ParseException e) {\n                             throw new JsonParseException(e);\n                         }\n                 }\n-            } \n-            catch (IllegalArgumentException e) {\n+            } catch (IllegalArgumentException e) {\n                 throw new JsonParseException(e);\n             }\n         }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/0/JSON.java\nindex 2ac5a9ed864..0b11f0d53b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/0/JSON.java\n@@ -41,9 +41,7 @@ import org.threeten.bp.LocalDate;\n import org.threeten.bp.OffsetDateTime;\n import org.threeten.bp.ZoneOffset;\n import org.threeten.bp.format.DateTimeFormatter;\n-\n import okio.ByteString;\n-\n import java.io.IOException;\n import java.io.StringReader;\n import java.lang.reflect.Type;\n@@ -58,55 +56,70 @@ import java.util.GregorianCalendar;\n import java.util.Map;\n import java.util.HashMap;\n \n+\n public class JSON {\n-    private Gson gson;\n-    private boolean isLenientOnJson = false;\n-    private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();\n-    private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();\n-    private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();\n-    private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();\n-    private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();\n-\n-    public static GsonBuilder createGson() {\n-        GsonFireBuilder fireBuilder = new GsonFireBuilder();\n-        GsonBuilder builder = fireBuilder.createGsonBuilder();\n-        return builder;\n-    }\n \n-    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {\n-        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);\n-        if (null == element) {\n-            throw new IllegalArgumentException(\"missing discriminator field: <\" + discriminatorField + \">\");\n-        }\n-        return element.getAsString();\n-    }\n+  private Gson gson;\n \n-    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {\n-        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue.toUpperCase());\n-        if (null == clazz) {\n-            throw new IllegalArgumentException(\"cannot determine model class of name: <\" + discriminatorValue + \">\");\n-        }\n-        return clazz;\n+\n+  private boolean isLenientOnJson = false;\n+\n+\n+  private DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();\n+\n+\n+  private SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();\n+\n+\n+  private OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();\n+\n+\n+  private LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();\n+\n+\n+  private ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();\n+\n+  public static GsonBuilder createGson() {\n+    GsonFireBuilder fireBuilder = new GsonFireBuilder();\n+    GsonBuilder builder = fireBuilder.createGsonBuilder();\n+    return builder;\n+  }\n+\n+  private static String getDiscriminatorValue(JsonElement readElement,  String discriminatorField) {\n+    JsonElement element = readElement.getAsJsonObject().get(discriminatorField);\n+    if (null == element) {\n+      throw new IllegalArgumentException(\"missing discriminator field: <\" + discriminatorField + \">\");\n     }\n+    return element.getAsString();\n+  }\n \n-    public JSON() {\n-        gson = createGson()\n-            .registerTypeAdapter(Date.class, dateTypeAdapter)\n-            .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)\n-            .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)\n-            .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)\n-            .registerTypeAdapter(byte[].class, byteArrayAdapter)\n-            .create();\n+  private static Class getClassByDiscriminator(Map classByDiscriminatorValue,  String discriminatorValue) {\n+    Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue.toUpperCase());\n+    if (null == clazz) {\n+      throw new IllegalArgumentException(\"cannot determine model class of name: <\" + discriminatorValue + \">\");\n     }\n+    return clazz;\n+  }\n+\n+  public JSON() {\n+    gson = createGson().registerTypeAdapter(Date.class, dateTypeAdapter)\n+                       .registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter)\n+                       .registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter)\n+                       .registerTypeAdapter(LocalDate.class, localDateTypeAdapter)\n+                       .registerTypeAdapter(byte[].class, byteArrayAdapter)\n+                       .create();\n+  }\n \n     /**\n      * Get Gson.\n      *\n      * @return Gson\n      */\n-    public Gson getGson() {\n-        return gson;\n-    }\n+\n+\n+  public Gson getGson() {\n+    return gson;\n+  }\n \n     /**\n      * Set Gson.\n@@ -114,15 +127,16 @@ public class JSON {\n      * @param gson Gson\n      * @return JSON\n      */\n-    public JSON setGson(Gson gson) {\n-        this.gson = gson;\n-        return this;\n-    }\n \n-    public JSON setLenientOnJson(boolean lenientOnJson) {\n-        isLenientOnJson = lenientOnJson;\n-        return this;\n-    }\n+  public JSON setGson(Gson gson) {\n+    this.gson = gson;\n+    return this;\n+  }\n+\n+  public JSON setLenientOnJson(boolean lenientOnJson) {\n+    isLenientOnJson = lenientOnJson;\n+    return this;\n+  }\n \n     /**\n      * Serialize the given Java object into JSON string.\n@@ -130,9 +144,10 @@ public class JSON {\n      * @param obj Object\n      * @return String representation of the JSON\n      */\n-    public String serialize(Object obj) {\n-        return gson.toJson(obj);\n-    }\n+\n+  public String serialize(Object obj) {\n+    return gson.toJson(obj);\n+  }\n \n     /**\n      * Deserialize the given JSON string to Java object.\n@@ -142,299 +157,317 @@ public class JSON {\n      * @param returnType The type to deserialize into\n      * @return The deserialized Java object\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public <T> T deserialize(String body, Type returnType) {\n-        try {\n-            if (isLenientOnJson) {\n-                JsonReader jsonReader = new JsonReader(new StringReader(body));\n+\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T deserialize(String body,  Type returnType) {\n+    try {\n+        if (isLenientOnJson) {\n+            JsonReader jsonReader = new JsonReader(new StringReader(body));\n                 // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)\n-                jsonReader.setLenient(true);\n-                return gson.fromJson(jsonReader, returnType);\n-            } \n-            else {\n-                return gson.fromJson(body, returnType);\n-            }\n-        } \n-        catch (JsonParseException e) {\n+            jsonReader.setLenient(true);\n+            return gson.fromJson(jsonReader, returnType);\n+        }\n+        else {\n+            return gson.fromJson(body, returnType);\n+        }\n+    }\n+    catch (JsonParseException e) {\n             // Fallback processing when failed to parse JSON form response body:\n             // return the response body string directly for the String return type;\n-            if (returnType.equals(String.class))\n-                return (T) body;\n-            else throw e;\n-        }\n+        if (returnType.equals(String.class)) return (T) body;\n+        else throw e;\n     }\n+  }\n \n     /**\n      * Gson TypeAdapter for Byte Array type\n      */\n-    public class ByteArrayAdapter extends TypeAdapter<byte[]> {\n-\n-        @Override\n-        public void write(JsonWriter out, byte[] value) throws IOException {\n-            if (value == null) {\n-                out.nullValue();\n-            } \n-            else {\n-                out.value(ByteString.of(value).base64());\n-            }\n-        }\n \n-        @Override\n-        public byte[] read(JsonReader in) throws IOException {\n-            switch (in.peek()) {\n-                case NULL:\n-                    in.nextNull();\n-                    return null;\n-                default:\n-                    String bytesAsBase64 = in.nextString();\n-                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);\n-                    return byteString.toByteArray();\n-            }\n-        }\n+  public class ByteArrayAdapter extends TypeAdapter<byte[]> {\n+    @Override\n+    public void write(JsonWriter out, byte[] value) throws IOException {\n+      if (value == null) {\n+          out.nullValue();\n+      }\n+      else {\n+          out.value(ByteString.of(value).base64());\n+      }\n+    }\n+\n+\n+    @Override\n+    public byte[] read(JsonReader in) throws IOException {\n+      switch (in.peek()) {\n+        case NULL:\n+              in.nextNull();\n+              return null;\n+        default:\n+              String bytesAsBase64 = in.nextString();\n+              ByteString byteString = ByteString.decodeBase64(bytesAsBase64);\n+              return byteString.toByteArray();\n+      }\n     }\n+  }\n \n     /**\n      * Gson TypeAdapter for JSR310 OffsetDateTime type\n      */\n-    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {\n \n-        private DateTimeFormatter formatter;\n+  public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {\n \n-        public OffsetDateTimeTypeAdapter() {\n-            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n-        }\n+    private DateTimeFormatter formatter;\n \n-        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {\n-            this.formatter = formatter;\n-        }\n \n-        public void setFormat(DateTimeFormatter dateFormat) {\n-            this.formatter = dateFormat;\n-        }\n+    public OffsetDateTimeTypeAdapter() {\n+      this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);\n+    }\n \n-        @Override\n-        public void write(JsonWriter out, OffsetDateTime date) throws IOException {\n-            if (date == null) {\n-                out.nullValue();\n-            } \n-            else {\n-                out.value(formatter.format(date));\n-            }\n-        }\n+    public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {\n+      this.formatter = formatter;\n+    }\n \n-        @Override\n-        public OffsetDateTime read(JsonReader in) throws IOException {\n-            switch (in.peek()) {\n-                case NULL:\n-                    in.nextNull();\n-                    return null;\n-                default:\n-                    String date = in.nextString();\n-                    if (date.endsWith(\"+0000\")) {\n-                        date = date.substring(0, date.length() - 5) + \"Z\";\n-                    }\n-                    String timeStampString;\n-                    if (date.indexOf('(') == -1) {\n-                        timeStampString = date.replace('T', ' ');\n-                    } else {\n-                        timeStampString = new Timestamp(Long.valueOf(date.substring(date.indexOf(\"(\") + 1, date.indexOf(\")\") - 1))).toString();\n-                    }\n-                    Integer index = timeStampString.indexOf(\" \");\n-                    String dateString = timeStampString.substring(0, index);\n-                    String[] timeString = timeStampString.substring(index + 1).split(\":\");\n-                    String[] val = dateString.split(\"-\");\n-                    return OffsetDateTime.of(Integer.valueOf(val[0]),\n-                            Integer.valueOf(val[1]),\n-                            Integer.valueOf(val[2]),\n-                            Integer.valueOf(timeString[0]),\n-                            Integer.valueOf(timeString[1]),\n-                            0,\n-                            0,\n-                            ZoneOffset.UTC);\n-            }\n-        }\n+\n+    public void setFormat(DateTimeFormatter dateFormat) {\n+      this.formatter = dateFormat;\n+    }\n+\n+\n+    @Override\n+    public void write(JsonWriter out,  OffsetDateTime date) throws IOException {\n+      if (date == null) {\n+          out.nullValue();\n+      }\n+      else {\n+          out.value(formatter.format(date));\n+      }\n+    }\n+\n+\n+    @Override\n+    public OffsetDateTime read(JsonReader in) throws IOException {\n+      switch (in.peek()) {\n+        case NULL:\n+              in.nextNull();\n+              return null;\n+        default:\n+              String date = in.nextString();\n+              if (date.endsWith(\"+0000\")) {\n+                  date = date.substring(0, date.length() - 5) + \"Z\";\n+              }\n+\n+              String timeStampString;\n+              if (date.indexOf('(') == -1) {\n+                  timeStampString = date.replace('T', ' ');\n+              }\n+              else {\n+                  timeStampString = new Timestamp(Long.valueOf(date.substring(date.indexOf(\"(\") + 1, date.indexOf(\")\") - 1)))\n+.toString();\n+              }\n+\n+              Integer index = timeStampString.indexOf(\" \");\n+              String dateString = timeStampString.substring(0, index);\n+              String[] timeString = timeStampString.substring(index + 1).split(\":\");\n+              String[] val = dateString.split(\"-\");\n+              return OffsetDateTime.of(Integer.valueOf(val[0]), Integer.valueOf(val[1]), Integer.valueOf(val[2]), Integer.valueOf(timeString[0]), Integer.valueOf(timeString[1]), 0, 0, ZoneOffset.UTC);\n+      }\n     }\n+  }\n \n     /**\n      * Gson TypeAdapter for JSR310 LocalDate type\n      */\n-    public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {\n \n-        private DateTimeFormatter formatter;\n+  public class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {\n \n-        public LocalDateTypeAdapter() {\n-            this(DateTimeFormatter.ISO_LOCAL_DATE);\n-        }\n+    private DateTimeFormatter formatter;\n \n-        public LocalDateTypeAdapter(DateTimeFormatter formatter) {\n-            this.formatter = formatter;\n-        }\n \n-        public void setFormat(DateTimeFormatter dateFormat) {\n-            this.formatter = dateFormat;\n-        }\n+    public LocalDateTypeAdapter() {\n+      this(DateTimeFormatter.ISO_LOCAL_DATE);\n+    }\n \n-        @Override\n-        public void write(JsonWriter out, LocalDate date) throws IOException {\n-            if (date == null) {\n-                out.nullValue();\n-            } \n-            else {\n-                out.value(formatter.format(date));\n-            }\n-        }\n+    public LocalDateTypeAdapter(DateTimeFormatter formatter) {\n+      this.formatter = formatter;\n+    }\n \n-        @Override\n-        public LocalDate read(JsonReader in) throws IOException {\n-            switch (in.peek()) {\n-                case NULL:\n-                    in.nextNull();\n-                    return null;\n-                default:\n-                    String date = in.nextString();\n-                    return LocalDate.parse(date, formatter);\n-            }\n-        }\n+\n+    public void setFormat(DateTimeFormatter dateFormat) {\n+      this.formatter = dateFormat;\n     }\n \n-    public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {\n-        offsetDateTimeTypeAdapter.setFormat(dateFormat);\n-        return this;\n+\n+    @Override\n+    public void write(JsonWriter out,  LocalDate date) throws IOException {\n+      if (date == null) {\n+          out.nullValue();\n+      }\n+      else {\n+          out.value(formatter.format(date));\n+      }\n     }\n \n-    public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {\n-        localDateTypeAdapter.setFormat(dateFormat);\n-        return this;\n+\n+    @Override\n+    public LocalDate read(JsonReader in) throws IOException {\n+      switch (in.peek()) {\n+        case NULL:\n+              in.nextNull();\n+              return null;\n+        default:\n+              String date = in.nextString();\n+              return LocalDate.parse(date, formatter);\n+      }\n     }\n+  }\n+\n+  public JSON setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {\n+    offsetDateTimeTypeAdapter.setFormat(dateFormat);\n+    return this;\n+  }\n+\n+  public JSON setLocalDateFormat(DateTimeFormatter dateFormat) {\n+    localDateTypeAdapter.setFormat(dateFormat);\n+    return this;\n+  }\n \n     /**\n      * Gson TypeAdapter for java.sql.Date type\n      * If the dateFormat is null, a simple \"yyyy-MM-dd\" format will be used\n      * (more efficient than SimpleDateFormat).\n      */\n-    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {\n \n-        private DateFormat dateFormat;\n+  public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {\n \n-        public SqlDateTypeAdapter() {\n-        }\n+    private DateFormat dateFormat;\n \n-        public SqlDateTypeAdapter(DateFormat dateFormat) {\n-            this.dateFormat = dateFormat;\n-        }\n \n-        public void setFormat(DateFormat dateFormat) {\n-            this.dateFormat = dateFormat;\n-        }\n+    public SqlDateTypeAdapter() {\n+    }\n \n-        @Override\n-        public void write(JsonWriter out, java.sql.Date date) throws IOException {\n-            if (date == null) {\n-                out.nullValue();\n-            } \n-            else {\n-                String value;\n-                if (dateFormat != null) {\n-                    value = dateFormat.format(date);\n-                } \n-                else {\n-                    value = date.toString();\n-                }\n-                out.value(value);\n-            }\n-        }\n+    public SqlDateTypeAdapter(DateFormat dateFormat) {\n+      this.dateFormat = dateFormat;\n+    }\n \n-        @Override\n-        public java.sql.Date read(JsonReader in) throws IOException {\n-            switch (in.peek()) {\n-                case NULL:\n-                    in.nextNull();\n-                    return null;\n-                default:\n-                    String date = in.nextString();\n-                    try {\n-                        if (dateFormat != null) {\n-                            return new java.sql.Date(dateFormat.parse(date).getTime());\n-                        }\n-                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());\n-                    } \n-                    catch (ParseException e) {\n-                        throw new JsonParseException(e);\n-                    }\n-            }\n-        }\n+\n+    public void setFormat(DateFormat dateFormat) {\n+      this.dateFormat = dateFormat;\n+    }\n+\n+\n+    @Override\n+    public void write(JsonWriter out,  java.sql.Date date) throws IOException {\n+      if (date == null) {\n+          out.nullValue();\n+      }\n+      else {\n+          String value;\n+          if (dateFormat != null) {\n+              value = dateFormat.format(date);\n+          }\n+          else {\n+              value = date.toString();\n+          }\n+          out.value(value);\n+      }\n+    }\n+\n+\n+    @Override\n+    public java.sql.Date read(JsonReader in) throws IOException {\n+      switch (in.peek()) {\n+        case NULL:\n+              in.nextNull();\n+              return null;\n+        default:\n+              String date = in.nextString();\n+              try {\n+                  if (dateFormat != null) {\n+                    return new java.sql.Date(dateFormat.parse(date).getTime());\n+                  }\n+                  return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());\n+              }\n+              catch (ParseException e) {\n+                  throw new JsonParseException(e);\n+              }\n+      }\n     }\n+  }\n \n     /**\n      * Gson TypeAdapter for java.util.Date type\n      * If the dateFormat is null, ISO8601Utils will be used.\n      */\n-    public static class DateTypeAdapter extends TypeAdapter<Date> {\n \n-        private DateFormat dateFormat;\n+  public static class DateTypeAdapter extends TypeAdapter<Date> {\n \n-        public DateTypeAdapter() {\n-        }\n-\n-        public DateTypeAdapter(DateFormat dateFormat) {\n-            this.dateFormat = dateFormat;\n-        }\n+    private DateFormat dateFormat;\n \n-        public void setFormat(DateFormat dateFormat) {\n-            this.dateFormat = dateFormat;\n-        }\n \n-        @Override\n-        public void write(JsonWriter out, Date date) throws IOException {\n-            if (date == null) {\n-                out.nullValue();\n-            } \n-            else {\n-                String value;\n-                if (dateFormat != null) {\n-                    value = dateFormat.format(date);\n-                } \n-                else {\n-                    value = ISO8601Utils.format(date, true);\n-                }\n-                out.value(value);\n-            }\n-        }\n+    public DateTypeAdapter() {\n+    }\n \n-        @Override\n-        public Date read(JsonReader in) throws IOException {\n-            try {\n-                switch (in.peek()) {\n-                    case NULL:\n-                        in.nextNull();\n-                        return null;\n-                    default:\n-                        String date = in.nextString();\n-                        try {\n-                            if (dateFormat != null) {\n-                                return dateFormat.parse(date);\n-                            }\n-                            return ISO8601Utils.parse(date, new ParsePosition(0));\n-                        } \n-                        catch (ParseException e) {\n-                            throw new JsonParseException(e);\n-                        }\n-                }\n-            } \n-            catch (IllegalArgumentException e) {\n-                throw new JsonParseException(e);\n-            }\n-        }\n+    public DateTypeAdapter(DateFormat dateFormat) {\n+      this.dateFormat = dateFormat;\n     }\n \n-    public JSON setDateFormat(DateFormat dateFormat) {\n-        dateTypeAdapter.setFormat(dateFormat);\n-        return this;\n+\n+    public void setFormat(DateFormat dateFormat) {\n+      this.dateFormat = dateFormat;\n     }\n \n-    public JSON setSqlDateFormat(DateFormat dateFormat) {\n-        sqlDateTypeAdapter.setFormat(dateFormat);\n-        return this;\n+\n+    @Override\n+    public void write(JsonWriter out,  Date date) throws IOException {\n+      if (date == null) {\n+          out.nullValue();\n+      }\n+      else {\n+          String value;\n+          if (dateFormat != null) {\n+              value = dateFormat.format(date);\n+          }\n+          else {\n+              value = ISO8601Utils.format(date, true);\n+          }\n+          out.value(value);\n+      }\n     }\n \n-}\n+\n+    @Override\n+    public Date read(JsonReader in) throws IOException {\n+      try {\n+          switch (in.peek()) {\n+            case NULL:\n+                  in.nextNull();\n+                  return null;\n+            default:\n+                  String date = in.nextString();\n+                  try {\n+                      if (dateFormat != null) {\n+                        return dateFormat.parse(date);\n+                      }\n+                      return ISO8601Utils.parse(date, new ParsePosition(0));\n+                  }\n+                  catch (ParseException e) {\n+                      throw new JsonParseException(e);\n+                  }\n+          }\n+      }\n+      catch (IllegalArgumentException e) {\n+          throw new JsonParseException(e);\n+      }\n+    }\n+  }\n+\n+  public JSON setDateFormat(DateFormat dateFormat) {\n+    dateTypeAdapter.setFormat(dateFormat);\n+    return this;\n+  }\n+\n+  public JSON setSqlDateFormat(DateFormat dateFormat) {\n+    sqlDateTypeAdapter.setFormat(dateFormat);\n+    return this;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 452
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/0/JSON.java\nindex 2ac5a9ed864..4b1ace853e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/0/JSON.java\n@@ -236,7 +236,8 @@ public class JSON {\n                     String timeStampString;\n                     if (date.indexOf('(') == -1) {\n                         timeStampString = date.replace('T', ' ');\n-                    } else {\n+                      }\n+                        else {\n                         timeStampString = new Timestamp(Long.valueOf(date.substring(date.indexOf(\"(\") + 1, date.indexOf(\")\") - 1))).toString();\n                     }\n                     Integer index = timeStampString.indexOf(\" \");\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "238",
                    "column": "65",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "238",
                    "column": "66",
                    "severity": "error",
                    "message": "'}' at column 66 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "238",
                    "column": "66",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/0/JSON.java\nindex 2ac5a9ed864..e6d1c5af758 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/0/JSON.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/0/JSON.java\n@@ -235,8 +235,8 @@ public class JSON {\n                     }\n                     String timeStampString;\n                     if (date.indexOf('(') == -1) {\n-                        timeStampString = date.replace('T', ' ');\n-                    } else {\n+                        timeStampString = date.replace('T', ' ');}\n+                    else {\n                         timeStampString = new Timestamp(Long.valueOf(date.substring(date.indexOf(\"(\") + 1, date.indexOf(\")\") - 1))).toString();\n                     }\n                     Integer index = timeStampString.indexOf(\" \");\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "styler_three_grams"
    ]
}