{
    "project_name": "neo4j-neo4j",
    "error_id": "249",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/249/PartitionedUniquenessVerifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/249/PartitionedUniquenessVerifier.java\nindex 73233ce354f..0eaa224ce4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/249/PartitionedUniquenessVerifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/249/PartitionedUniquenessVerifier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.verification;\n \n import org.apache.lucene.index.LeafReader;\n@@ -62,26 +63,26 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n {\n     private final List<SearcherReference> searchers;\n \n-    public PartitionedUniquenessVerifier( List<SearcherReference> searchers )\n+    public PartitionedUniquenessVerifier(List<SearcherReference> searchers)\n     {\n         this.searchers = searchers;\n     }\n \n     @Override\n-    public void verify( NodePropertyAccessor accessor, int[] propKeyIds ) throws IndexEntryConflictException, IOException\n+    public void verify(NodePropertyAccessor accessor, int[] propKeyIds) throws IndexEntryConflictException, IOException\n     {\n-        for ( String field : allFields() )\n+        for (String field : allFields())\n         {\n-            if ( LuceneDocumentStructure.useFieldForUniquenessVerification( field ) )\n+            if (LuceneDocumentStructure.useFieldForUniquenessVerification(field))\n             {\n-                TermsEnum terms = termsForField( field ).iterator();\n+                TermsEnum terms = termsForField(field).iterator();\n                 BytesRef termsRef;\n-                while ( (termsRef = terms.next()) != null )\n+                while ((termsRef = terms.next()) != null)\n                 {\n-                    if ( terms.docFreq() > 1 )\n+                    if (terms.docFreq() > 1)\n                     {\n-                        TermQuery query = new TermQuery( new Term( field, termsRef ) );\n-                        searchForDuplicates( query, accessor, propKeyIds, terms.docFreq() );\n+                        TermQuery query = new TermQuery(new Term(field, termsRef));\n+                        searchForDuplicates(query, accessor, propKeyIds, terms.docFreq());\n                     }\n                 }\n             }\n@@ -89,102 +90,101 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n     }\n \n     @Override\n-    public void verify( NodePropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples )\n-            throws IndexEntryConflictException, IOException\n+    public void verify(NodePropertyAccessor accessor, int[] propKeyIds, List<Value[]> updatedValueTuples)\n+      throws IndexEntryConflictException, IOException\n     {\n-        for ( Value[] valueTuple : updatedValueTuples )\n+        for (Value[] valueTuple : updatedValueTuples)\n         {\n-            Query query = LuceneDocumentStructure.newSeekQuery( valueTuple );\n-            searchForDuplicates( query, accessor, propKeyIds );\n+            Query query = LuceneDocumentStructure.newSeekQuery(valueTuple);\n+            searchForDuplicates(query, accessor, propKeyIds);\n         }\n     }\n \n     @Override\n     public void close() throws IOException\n     {\n-        IOUtils.closeAll( searchers );\n+        IOUtils.closeAll(searchers);\n     }\n \n-    private Terms termsForField( String fieldName ) throws IOException\n+    private Terms termsForField(String fieldName) throws IOException\n     {\n         List<Terms> terms = new ArrayList<>();\n         List<ReaderSlice> readerSlices = new ArrayList<>();\n \n         List<LeafReader> leafReaders = allLeafReaders();\n-        for ( LeafReader leafReader : leafReaders )\n+        for (LeafReader leafReader : leafReaders)\n         {\n-            Terms leafTerms = leafReader.terms( fieldName );\n-            if ( leafTerms != null )\n+            Terms leafTerms = leafReader.terms(fieldName);\n+            if (leafTerms != null)\n             {\n-                ReaderSlice readerSlice = new ReaderSlice( 0, Math.toIntExact( leafTerms.size() ), 0 );\n-                terms.add( leafTerms );\n-                readerSlices.add( readerSlice );\n+                ReaderSlice readerSlice = new ReaderSlice(0, Math.toIntExact(leafTerms.size()), 0);\n+                terms.add(leafTerms);\n+                readerSlices.add(readerSlice);\n             }\n         }\n \n-        Terms[] termsArray = terms.toArray( new Terms[0] );\n-        ReaderSlice[] readerSlicesArray = readerSlices.toArray( new ReaderSlice[0] );\n+        Terms[] termsArray = terms.toArray(new Terms[0]);\n+        ReaderSlice[] readerSlicesArray = readerSlices.toArray(new ReaderSlice[0]);\n \n-        return new MultiTerms( termsArray, readerSlicesArray );\n+        return new MultiTerms(termsArray, readerSlicesArray);\n     }\n \n     /**\n      * Search for unknown number of duplicates duplicates\n      *\n-     * @param query query to find duplicates in\n-     * @param accessor accessor to load actual property value from store\n+     * @param query          query to find duplicates in\n+     * @param accessor       accessor to load actual property value from store\n      * @param propertyKeyIds property key ids\n      * @throws IOException\n      * @throws IndexEntryConflictException\n      */\n-    private void searchForDuplicates( Query query, NodePropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException\n+    private void searchForDuplicates(Query query, NodePropertyAccessor accessor, int[] propertyKeyIds)\n+      throws IOException, IndexEntryConflictException\n     {\n-        DuplicateCheckingCollector collector = getDuplicateCollector( accessor, propertyKeyIds );\n+        DuplicateCheckingCollector collector = getDuplicateCollector(accessor, propertyKeyIds);\n         collector.init();\n-        searchForDuplicates( query, collector );\n+        searchForDuplicates(query, collector);\n     }\n \n     /**\n      * Search for known number of duplicates duplicates\n      *\n-     * @param query query to find duplicates in\n-     * @param accessor accessor to load actual property value from store\n-     * @param propertyKeyIds property key ids\n+     * @param query                   query to find duplicates in\n+     * @param accessor                accessor to load actual property value from store\n+     * @param propertyKeyIds          property key ids\n      * @param expectedNumberOfEntries expected number of duplicates in query\n      * @throws IOException\n      * @throws IndexEntryConflictException\n      */\n-    private void searchForDuplicates( Query query, NodePropertyAccessor accessor, int[] propertyKeyIds,\n-            int expectedNumberOfEntries ) throws IOException, IndexEntryConflictException\n+    private void searchForDuplicates(Query query, NodePropertyAccessor accessor, int[] propertyKeyIds,\n+                                     int expectedNumberOfEntries) throws IOException, IndexEntryConflictException\n     {\n-        DuplicateCheckingCollector collector = getDuplicateCollector( accessor, propertyKeyIds );\n-        collector.init( expectedNumberOfEntries );\n-        searchForDuplicates( query, collector );\n+        DuplicateCheckingCollector collector = getDuplicateCollector(accessor, propertyKeyIds);\n+        collector.init(expectedNumberOfEntries);\n+        searchForDuplicates(query, collector);\n     }\n \n-    private DuplicateCheckingCollector getDuplicateCollector( NodePropertyAccessor accessor, int[] propertyKeyIds )\n+    private DuplicateCheckingCollector getDuplicateCollector(NodePropertyAccessor accessor, int[] propertyKeyIds)\n     {\n-        return DuplicateCheckingCollector.forProperties( accessor, propertyKeyIds );\n+        return DuplicateCheckingCollector.forProperties(accessor, propertyKeyIds);\n     }\n \n-    private void searchForDuplicates( Query query, DuplicateCheckingCollector collector ) throws IndexEntryConflictException, IOException\n+    private void searchForDuplicates(Query query, DuplicateCheckingCollector collector) throws IndexEntryConflictException, IOException\n     {\n         try\n         {\n-            for ( SearcherReference searcher : searchers )\n+            for (SearcherReference searcher : searchers)\n             {\n-                    /*\n-                     * Here {@link DuplicateCheckingCollector#init()} is deliberately not called to preserve accumulated\n-                     * state (knowledge about duplicates) across all {@link IndexSearcher#search(Query, Collector)} calls.\n-                     */\n-                searcher.getIndexSearcher().search( query, collector );\n+                /*\n+                 * Here {@link DuplicateCheckingCollector#init()} is deliberately not called to preserve accumulated\n+                 * state (knowledge about duplicates) across all {@link IndexSearcher#search(Query, Collector)} calls.\n+                 */\n+                searcher.getIndexSearcher().search(query, collector);\n             }\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n             Throwable cause = e.getCause();\n-            if ( cause instanceof IndexEntryConflictException )\n+            if (cause instanceof IndexEntryConflictException)\n             {\n                 throw (IndexEntryConflictException) cause;\n             }\n@@ -195,9 +195,9 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n     private Set<String> allFields()\n     {\n         Set<String> allFields = new HashSet<>();\n-        for ( LeafReader leafReader : allLeafReaders() )\n+        for (LeafReader leafReader : allLeafReaders())\n         {\n-            leafReader.getFieldInfos().forEach( info -> allFields.add( info.name ) );\n+            leafReader.getFieldInfos().forEach(info -> allFields.add(info.name));\n         }\n         return allFields;\n     }\n@@ -205,10 +205,10 @@ public class PartitionedUniquenessVerifier implements UniquenessVerifier\n     private List<LeafReader> allLeafReaders()\n     {\n         return searchers.stream()\n-                .map( SearcherReference::getIndexSearcher )\n-                .map( IndexSearcher::getIndexReader )\n-                .flatMap( indexReader -> indexReader.leaves().stream() )\n-                .map( LeafReaderContext::reader )\n-                .collect( toList() );\n+          .map(SearcherReference::getIndexSearcher)\n+          .map(IndexSearcher::getIndexReader)\n+          .flatMap(indexReader -> indexReader.leaves().stream())\n+          .map(LeafReaderContext::reader)\n+          .collect(toList());\n     }\n }\n",
            "diff_size": 59
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}