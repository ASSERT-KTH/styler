{
    "project_name": "delight-im-NationSoccer",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "107",
                "column": "65",
                "severity": "error",
                "message": "'...' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "\t}\n\n\tprotected final void assertNoNullModifier(final IModifier<T> ... pModifiers) {\n\t\tfinal int modifierCount = pModifiers.length;\n\t\tfor (int i = 0; i < modifierCount; i++) {\n\t\t\tif (pModifiers[i] == null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/1/BaseModifier.java\nindex 9c13227903d..977cc1c8788 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/1/BaseModifier.java\n@@ -104,7 +104,7 @@ public abstract class BaseModifier<T> implements IModifier<T> {\n \t\t}\n \t}\n \n-\tprotected final void assertNoNullModifier(final IModifier<T> ... pModifiers) {\n+\tprotected final void assertNoNullModifier(final IModifier<T>... pModifiers) {\n \t\tfinal int modifierCount = pModifiers.length;\n \t\tfor (int i = 0; i < modifierCount; i++) {\n \t\t\tif (pModifiers[i] == null) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/1/BaseModifier.java\nindex 9c13227903d..a3482d6dd1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/1/BaseModifier.java\n@@ -7,113 +7,125 @@ import org.andengine.util.adt.list.SmartList;\n  * (c) 2010 Nicolas Gramlich\n  * (c) 2011 Zynga Inc.\n  *\n+ * @param <T>\n  * @author Nicolas Gramlich\n  * @since 10:47:23 - 03.09.2010\n- * @param <T>\n  */\n public abstract class BaseModifier<T> implements IModifier<T> {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprotected boolean mFinished;\n-\tprivate boolean mAutoUnregisterWhenFinished = true;\n-\tprivate final SmartList<IModifierListener<T>> mModifierListeners = new SmartList<IModifierListener<T>>(2);\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic BaseModifier() {\n-\n-\t}\n-\n-\tpublic BaseModifier(final IModifierListener<T> pModifierListener) {\n-\t\tthis.addModifierListener(pModifierListener);\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t@Override\n-\tpublic boolean isFinished() {\n-\t\treturn this.mFinished;\n-\t}\n-\n-\t@Override\n-\tpublic final boolean isAutoUnregisterWhenFinished() {\n-\t\treturn this.mAutoUnregisterWhenFinished;\n-\t}\n-\n-\t@Override\n-\tpublic final void setAutoUnregisterWhenFinished(final boolean pAutoUnregisterWhenFinished) {\n-\t\tthis.mAutoUnregisterWhenFinished = pAutoUnregisterWhenFinished;\n-\t}\n-\n-\t@Override\n-\tpublic void addModifierListener(final IModifierListener<T> pModifierListener) {\n-\t\tif (pModifierListener != null) {\n-\t\t\tthis.mModifierListeners.add(pModifierListener);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeModifierListener(final IModifierListener<T> pModifierListener) {\n-\t\tif (pModifierListener == null) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\treturn this.mModifierListeners.remove(pModifierListener);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic abstract IModifier<T> deepCopy() throws DeepCopyNotSupportedException;\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tprotected void onModifierStarted(final T pItem) {\n-\t\tfinal SmartList<IModifierListener<T>> modifierListeners = this.mModifierListeners;\n-\t\tfinal int modifierListenerCount = modifierListeners.size();\n-\t\tfor (int i = modifierListenerCount - 1; i >= 0; i--) {\n-\t\t\tmodifierListeners.get(i).onModifierStarted(this, pItem);\n-\t\t}\n-\t}\n-\n-\tprotected void onModifierFinished(final T pItem) {\n-\t\tfinal SmartList<IModifierListener<T>> modifierListeners = this.mModifierListeners;\n-\t\tfinal int modifierListenerCount = modifierListeners.size();\n-\t\tfor (int i = modifierListenerCount - 1; i >= 0; i--) {\n-\t\t\tmodifierListeners.get(i).onModifierFinished(this, pItem);\n-\t\t}\n-\t}\n-\n-\tprotected final void assertNoNullModifier(final IModifier<T> pModifier) {\n-\t\tif (pModifier == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Illegal 'null' \" + IModifier.class.getSimpleName() + \" detected!\");\n-\t\t}\n-\t}\n-\n-\tprotected final void assertNoNullModifier(final IModifier<T> ... pModifiers) {\n-\t\tfinal int modifierCount = pModifiers.length;\n-\t\tfor (int i = 0; i < modifierCount; i++) {\n-\t\t\tif (pModifiers[i] == null) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Illegal 'null' \" + IModifier.class.getSimpleName() + \" detected at position: '\" + i + \"'!\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n+    // ===========================================================\n+    // Constants\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Fields\n+    // ===========================================================\n+\n+    protected boolean mFinished;\n+    private boolean mAutoUnregisterWhenFinished = true;\n+    private final SmartList<IModifierListener<T>> mModifierListeners =\n+        new SmartList<IModifierListener<T>>(2);\n+\n+    // ===========================================================\n+    // Constructors\n+    // ===========================================================\n+\n+    public BaseModifier() {\n+\n+    }\n+\n+    public BaseModifier(final IModifierListener<T> pModifierListener) {\n+        this.addModifierListener(pModifierListener);\n+    }\n+\n+    // ===========================================================\n+    // Getter & Setter\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods for/from SuperClass/Interfaces\n+    // ===========================================================\n+\n+    @Override\n+    public boolean isFinished() {\n+        return this.mFinished;\n+    }\n+\n+    @Override\n+    public final boolean isAutoUnregisterWhenFinished() {\n+        return this.mAutoUnregisterWhenFinished;\n+    }\n+\n+    @Override\n+    public final void setAutoUnregisterWhenFinished(\n+        final boolean pAutoUnregisterWhenFinished) {\n+        this.mAutoUnregisterWhenFinished = pAutoUnregisterWhenFinished;\n+    }\n+\n+    @Override\n+    public void addModifierListener(\n+        final IModifierListener<T> pModifierListener) {\n+        if (pModifierListener != null) {\n+            this.mModifierListeners.add(pModifierListener);\n+        }\n+    }\n+\n+    @Override\n+    public boolean removeModifierListener(\n+        final IModifierListener<T> pModifierListener) {\n+        if (pModifierListener == null) {\n+            return false;\n+        } else {\n+            return this.mModifierListeners.remove(pModifierListener);\n+        }\n+    }\n+\n+    @Override\n+    public abstract IModifier<T> deepCopy()\n+        throws DeepCopyNotSupportedException;\n+\n+    // ===========================================================\n+    // Methods\n+    // ===========================================================\n+\n+    protected void onModifierStarted(final T pItem) {\n+        final SmartList<IModifierListener<T>> modifierListeners =\n+            this.mModifierListeners;\n+        final int modifierListenerCount = modifierListeners.size();\n+        for (int i = modifierListenerCount - 1; i >= 0; i--) {\n+            modifierListeners.get(i).onModifierStarted(this, pItem);\n+        }\n+    }\n+\n+    protected void onModifierFinished(final T pItem) {\n+        final SmartList<IModifierListener<T>> modifierListeners =\n+            this.mModifierListeners;\n+        final int modifierListenerCount = modifierListeners.size();\n+        for (int i = modifierListenerCount - 1; i >= 0; i--) {\n+            modifierListeners.get(i).onModifierFinished(this, pItem);\n+        }\n+    }\n+\n+    protected final void assertNoNullModifier(final IModifier<T> pModifier) {\n+        if (pModifier == null) {\n+            throw new IllegalArgumentException(\n+                \"Illegal 'null' \" + IModifier.class.getSimpleName() +\n+                    \" detected!\");\n+        }\n+    }\n+\n+    protected final void assertNoNullModifier(\n+        final IModifier<T>... pModifiers) {\n+        final int modifierCount = pModifiers.length;\n+        for (int i = 0; i < modifierCount; i++) {\n+            if (pModifiers[i] == null) {\n+                throw new IllegalArgumentException(\n+                    \"Illegal 'null' \" + IModifier.class.getSimpleName() +\n+                        \" detected at position: '\" + i + \"'!\");\n+            }\n+        }\n+    }\n+\n+    // ===========================================================\n+    // Inner and Anonymous Classes\n+    // ===========================================================\n }\n",
            "diff_size": 118
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "107",
                    "column": "65",
                    "severity": "error",
                    "message": "'...' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/1/BaseModifier.java\nindex 9c13227903d..2e55326f08c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/1/BaseModifier.java\n@@ -116,4 +116,4 @@ public abstract class BaseModifier<T> implements IModifier<T> {\n \t// ===========================================================\n \t// Inner and Anonymous Classes\n \t// ===========================================================\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/1/BaseModifier.java\nindex 9c13227903d..19700af89e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/1/BaseModifier.java\n@@ -11,109 +11,133 @@ import org.andengine.util.adt.list.SmartList;\n  * @since 10:47:23 - 03.09.2010\n  * @param <T>\n  */\n+\n+\n public abstract class BaseModifier<T> implements IModifier<T> {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprotected boolean mFinished;\n-\tprivate boolean mAutoUnregisterWhenFinished = true;\n-\tprivate final SmartList<IModifierListener<T>> mModifierListeners = new SmartList<IModifierListener<T>>(2);\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic BaseModifier() {\n-\n-\t}\n-\n-\tpublic BaseModifier(final IModifierListener<T> pModifierListener) {\n-\t\tthis.addModifierListener(pModifierListener);\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t@Override\n-\tpublic boolean isFinished() {\n-\t\treturn this.mFinished;\n-\t}\n-\n-\t@Override\n-\tpublic final boolean isAutoUnregisterWhenFinished() {\n-\t\treturn this.mAutoUnregisterWhenFinished;\n-\t}\n-\n-\t@Override\n-\tpublic final void setAutoUnregisterWhenFinished(final boolean pAutoUnregisterWhenFinished) {\n-\t\tthis.mAutoUnregisterWhenFinished = pAutoUnregisterWhenFinished;\n-\t}\n-\n-\t@Override\n-\tpublic void addModifierListener(final IModifierListener<T> pModifierListener) {\n-\t\tif (pModifierListener != null) {\n-\t\t\tthis.mModifierListeners.add(pModifierListener);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean removeModifierListener(final IModifierListener<T> pModifierListener) {\n-\t\tif (pModifierListener == null) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\treturn this.mModifierListeners.remove(pModifierListener);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic abstract IModifier<T> deepCopy() throws DeepCopyNotSupportedException;\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tprotected void onModifierStarted(final T pItem) {\n-\t\tfinal SmartList<IModifierListener<T>> modifierListeners = this.mModifierListeners;\n-\t\tfinal int modifierListenerCount = modifierListeners.size();\n-\t\tfor (int i = modifierListenerCount - 1; i >= 0; i--) {\n-\t\t\tmodifierListeners.get(i).onModifierStarted(this, pItem);\n-\t\t}\n-\t}\n-\n-\tprotected void onModifierFinished(final T pItem) {\n-\t\tfinal SmartList<IModifierListener<T>> modifierListeners = this.mModifierListeners;\n-\t\tfinal int modifierListenerCount = modifierListeners.size();\n-\t\tfor (int i = modifierListenerCount - 1; i >= 0; i--) {\n-\t\t\tmodifierListeners.get(i).onModifierFinished(this, pItem);\n-\t\t}\n-\t}\n-\n-\tprotected final void assertNoNullModifier(final IModifier<T> pModifier) {\n-\t\tif (pModifier == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Illegal 'null' \" + IModifier.class.getSimpleName() + \" detected!\");\n-\t\t}\n-\t}\n-\n-\tprotected final void assertNoNullModifier(final IModifier<T> ... pModifiers) {\n-\t\tfinal int modifierCount = pModifiers.length;\n-\t\tfor (int i = 0; i < modifierCount; i++) {\n-\t\t\tif (pModifiers[i] == null) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Illegal 'null' \" + IModifier.class.getSimpleName() + \" detected at position: '\" + i + \"'!\");\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n-}\n+ // ===========================================================\n+ // Constants\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Fields\n+ // ===========================================================\n+\n+\n+\n+\n+\n+\n+\n+\n+ protected boolean mFinished;\n+ private boolean mAutoUnregisterWhenFinished = true;\n+ private final SmartList<IModifierListener<T>> mModifierListeners = new SmartList<IModifierListener<T>>(2);\n+\n+ // ===========================================================\n+ // Constructors\n+ // ===========================================================\n+\n+\n+\n+\n+\n+ public BaseModifier() {\n+\n+ }\n+\n+ public BaseModifier(final IModifierListener<T> pModifierListener) {\n+  this.addModifierListener(pModifierListener);\n+ }\n+\n+ // ===========================================================\n+ // Getter & Setter\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Methods for/from SuperClass/Interfaces\n+ // ===========================================================\n+\n+ @Override\n+ public boolean isFinished() {\n+  return this.mFinished;\n+ }\n+\n+ @Override\n+ public final boolean isAutoUnregisterWhenFinished() {\n+  return this.mAutoUnregisterWhenFinished;\n+ }\n+\n+ @Override\n+ public final void setAutoUnregisterWhenFinished(final boolean pAutoUnregisterWhenFinished) {\n+  this.mAutoUnregisterWhenFinished = pAutoUnregisterWhenFinished;\n+ }\n+\n+ @Override\n+ public void addModifierListener(final IModifierListener<T> pModifierListener) {\n+  if (pModifierListener != null) {\n+   this.mModifierListeners.add(pModifierListener);\n+  }\n+ }\n+\n+ @Override\n+ public boolean removeModifierListener(final IModifierListener<T> pModifierListener) {\n+  if (pModifierListener == null) {\n+   return false;\n+  } else {\n+   return this.mModifierListeners.remove(pModifierListener);\n+  }\n+ }\n+\n+ @Override\n+ public abstract IModifier<T> deepCopy() throws DeepCopyNotSupportedException;\n+\n+ // ===========================================================\n+ // Methods\n+ // ===========================================================\n+ protected void onModifierStarted(final T pItem) {\n+  final SmartList<IModifierListener<T>> modifierListeners = this.mModifierListeners;\n+  final int modifierListenerCount = modifierListeners.size();\n+  for (int i = modifierListenerCount - 1; i >= 0; i--) {\n+   modifierListeners.get(i).onModifierStarted(this, pItem);\n+  }\n+ }\n+\n+\n+\n+\n+\n+ protected void onModifierFinished(final T pItem) {\n+  final SmartList<IModifierListener<T>> modifierListeners = this.mModifierListeners;\n+  final int modifierListenerCount = modifierListeners.size();\n+  for (int i = modifierListenerCount - 1; i >= 0; i--) {\n+   modifierListeners.get(i).onModifierFinished(this, pItem);\n+  }\n+ }\n+\n+\n+\n+\n+\n+ protected final void assertNoNullModifier(final IModifier<T> pModifier) {\n+  if (pModifier == null) {\n+   throw new IllegalArgumentException(\"Illegal 'null' \" + IModifier.class.getSimpleName() + \" detected!\");\n+  }\n+ }\n+\n+\n+\n+\n+\n+ protected final void assertNoNullModifier(final IModifier<T>... pModifiers) {\n+  final int modifierCount = pModifiers.length;\n+  for (int i = 0; i < modifierCount; i++) {\n+   if (pModifiers[i] == null) {\n+    throw new IllegalArgumentException(\"Illegal 'null' \" + IModifier.class.getSimpleName() + \" detected at position: '\" + i + \"'!\");\n+   }\n+  }\n+ }\n+\n+ // ===========================================================\n+ // Inner and Anonymous Classes\n+ // ===========================================================\n+}\n\\ No newline at end of file\n",
            "diff_size": 129
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/1/BaseModifier.java\nindex 9c13227903d..977cc1c8788 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/1/BaseModifier.java\n@@ -104,7 +104,7 @@ public abstract class BaseModifier<T> implements IModifier<T> {\n \t\t}\n \t}\n \n-\tprotected final void assertNoNullModifier(final IModifier<T> ... pModifiers) {\n+\tprotected final void assertNoNullModifier(final IModifier<T>... pModifiers) {\n \t\tfinal int modifierCount = pModifiers.length;\n \t\tfor (int i = 0; i < modifierCount; i++) {\n \t\t\tif (pModifiers[i] == null) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/1/BaseModifier.java\nindex 9c13227903d..977cc1c8788 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/1/BaseModifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/1/BaseModifier.java\n@@ -104,7 +104,7 @@ public abstract class BaseModifier<T> implements IModifier<T> {\n \t\t}\n \t}\n \n-\tprotected final void assertNoNullModifier(final IModifier<T> ... pModifiers) {\n+\tprotected final void assertNoNullModifier(final IModifier<T>... pModifiers) {\n \t\tfinal int modifierCount = pModifiers.length;\n \t\tfor (int i = 0; i < modifierCount; i++) {\n \t\t\tif (pModifiers[i] == null) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}