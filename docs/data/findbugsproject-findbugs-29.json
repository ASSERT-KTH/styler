{
    "project_name": "findbugsproject-findbugs",
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "13",
                "column": "56",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/29/BugCellRenderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/29/BugCellRenderer.java\nindex 81f0f192254..37c99de48ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/29/BugCellRenderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/29/BugCellRenderer.java\n@@ -17,6 +17,7 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\t 02111-1307\t USA\n  */\n+\n package edu.umd.cs.findbugs.gui;\n \n import java.awt.Color;\n@@ -46,37 +47,37 @@ public class BugCellRenderer extends DefaultTreeCellRenderer {\n     /**\n      * Get the single instance.\n      *\n-\t * @return the instance\n+     * @return the instance\n      */\n     public static BugCellRenderer instance() {\n         return theInstance;\n-\t}\n+    }\n \n     private static final long serialVersionUID = 1L;\n     private ImageIcon bugGroupIcon;\n     private ImageIcon packageIcon;\n-\tprivate ImageIcon bugIcon;\n+    private ImageIcon bugIcon;\n     private ImageIcon classIcon;\n     private ImageIcon methodIcon;\n     private ImageIcon fieldIcon;\n-\tprivate ImageIcon sourceFileIcon;\n+    private ImageIcon sourceFileIcon;\n     private Object value;\n \n     private BugCellRenderer() {\n         ClassLoader classLoader = this.getClass().getClassLoader();\n         bugGroupIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/bug.png\"));\n-\t\tpackageIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/package.png\"));\n+        packageIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/package.png\"));\n         bugIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/bug2.png\"));\n         classIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/class.png\"));\n         methodIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/method.png\"));\n-\t\tfieldIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/field.png\"));\n+        fieldIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/field.png\"));\n         sourceFileIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/sourcefile.png\"));\n     }\n \n     @Override\n     public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel,\n                                                   boolean expanded, boolean leaf, int row, boolean hasFocus) {\n-\t\tDefaultMutableTreeNode node = (DefaultMutableTreeNode) value;\n+        DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;\n         Object obj = node.getUserObject();\n \n         this.value = obj;\n@@ -86,27 +87,27 @@ public class BugCellRenderer extends DefaultTreeCellRenderer {\n         // Set the icon, depending on what kind of node it is\n         if (obj instanceof BugInstance) {\n             setIcon(bugIcon);\n-\t\t} else if (obj instanceof ClassAnnotation) {\n+        } else if (obj instanceof ClassAnnotation) {\n             setIcon(classIcon);\n         } else if (obj instanceof MethodAnnotation) {\n             setIcon(methodIcon);\n-\t\t} else if (obj instanceof FieldAnnotation) {\n+        } else if (obj instanceof FieldAnnotation) {\n             setIcon(fieldIcon);\n         } else if (obj instanceof SourceLineAnnotation) {\n             setIcon(sourceFileIcon);\n-\t\t} else if (obj instanceof BugInstanceGroup) {\n+        } else if (obj instanceof BugInstanceGroup) {\n             // This is a \"group\" node\n             BugInstanceGroup groupNode = (BugInstanceGroup) obj;\n             String groupType = groupNode.getGroupType();\n-\t\t\tif (groupType == FindBugsFrame.GROUP_BY_CLASS) {\n+            if (groupType == FindBugsFrame.GROUP_BY_CLASS) {\n                 setIcon(classIcon);\n             } else if (groupType == FindBugsFrame.GROUP_BY_PACKAGE) {\n                 setIcon(packageIcon);\n-\t\t\t} else if (groupType == FindBugsFrame.GROUP_BY_BUG_TYPE) {\n+            } else if (groupType == FindBugsFrame.GROUP_BY_BUG_TYPE) {\n                 setIcon(bugGroupIcon);\n-                            } else if (groupType == FindBugsFrame.GROUP_BY_BUG_CATEGORY) {\n+            } else if (groupType == FindBugsFrame.GROUP_BY_BUG_CATEGORY) {\n                 setIcon(bugGroupIcon);\n-\t\t\t}\n+            }\n         } else {\n             setIcon(null);\n         }\n@@ -117,28 +118,28 @@ public class BugCellRenderer extends DefaultTreeCellRenderer {\n     @Override\n     public Color getTextNonSelectionColor() {\n         return getCellTextColor();\n-\t}\n+    }\n \n     private Color getCellTextColor() {\n         // Based on the priority, color-code the bug instance.\n         Color color = Color.BLACK;\n-\t\tif (value instanceof BugInstance) {\n+        if (value instanceof BugInstance) {\n             BugInstance bugInstance = (BugInstance) value;\n             switch (bugInstance.getPriority()) {\n-            case Detector.EXP_PRIORITY:\n-\t\t\t\tcolor = FindBugsFrame.EXP_PRIORITY_COLOR;\n-                break;\n-            case Detector.LOW_PRIORITY:\n-                color = FindBugsFrame.LOW_PRIORITY_COLOR;\n-\t\t\t\tbreak;\n-            case Detector.NORMAL_PRIORITY:\n-                color = FindBugsFrame.NORMAL_PRIORITY_COLOR;\n-                break;\n-\t\t\tcase Detector.HIGH_PRIORITY:\n-                color = FindBugsFrame.HIGH_PRIORITY_COLOR;\n-                break;\n+                case Detector.EXP_PRIORITY:\n+                    color = FindBugsFrame.EXP_PRIORITY_COLOR;\n+                    break;\n+                case Detector.LOW_PRIORITY:\n+                    color = FindBugsFrame.LOW_PRIORITY_COLOR;\n+                    break;\n+                case Detector.NORMAL_PRIORITY:\n+                    color = FindBugsFrame.NORMAL_PRIORITY_COLOR;\n+                    break;\n+                case Detector.HIGH_PRIORITY:\n+                    color = FindBugsFrame.HIGH_PRIORITY_COLOR;\n+                    break;\n             }\n-\t\t}\n+        }\n         return color;\n     }\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/29/BugCellRenderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/29/BugCellRenderer.java\nindex 81f0f192254..6f74269fd1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/29/BugCellRenderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/29/BugCellRenderer.java\n@@ -50,34 +50,38 @@ public class BugCellRenderer extends DefaultTreeCellRenderer {\n      */\n     public static BugCellRenderer instance() {\n         return theInstance;\n-\t}\n+    }\n \n-    private static final long serialVersionUID = 1L;\n+private static final long serialVersionUID = 1L;\n     private ImageIcon bugGroupIcon;\n     private ImageIcon packageIcon;\n-\tprivate ImageIcon bugIcon;\n-    private ImageIcon classIcon;\n+\n+private ImageIcon bugIcon;\n+\n+private ImageIcon classIcon;\n     private ImageIcon methodIcon;\n     private ImageIcon fieldIcon;\n-\tprivate ImageIcon sourceFileIcon;\n-    private Object value;\n+\n+private ImageIcon sourceFileIcon;\n+\n+private Object value;\n \n     private BugCellRenderer() {\n         ClassLoader classLoader = this.getClass().getClassLoader();\n         bugGroupIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/bug.png\"));\n-\t\tpackageIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/package.png\"));\n-        bugIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/bug2.png\"));\n+packageIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/package.png\"));\n+bugIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/bug2.png\"));\n         classIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/class.png\"));\n         methodIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/method.png\"));\n-\t\tfieldIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/field.png\"));\n-        sourceFileIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/sourcefile.png\"));\n+fieldIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/field.png\"));\n+sourceFileIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/sourcefile.png\"));\n     }\n \n     @Override\n-    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel,\n-                                                  boolean expanded, boolean leaf, int row, boolean hasFocus) {\n-\t\tDefaultMutableTreeNode node = (DefaultMutableTreeNode) value;\n-        Object obj = node.getUserObject();\n+    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {\n+    DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;\n+\n+Object obj = node.getUserObject();\n \n         this.value = obj;\n \n@@ -86,28 +90,28 @@ public class BugCellRenderer extends DefaultTreeCellRenderer {\n         // Set the icon, depending on what kind of node it is\n         if (obj instanceof BugInstance) {\n             setIcon(bugIcon);\n-\t\t} else if (obj instanceof ClassAnnotation) {\n-            setIcon(classIcon);\n+    } else if (obj instanceof ClassAnnotation) {\n+    setIcon(classIcon);\n         } else if (obj instanceof MethodAnnotation) {\n             setIcon(methodIcon);\n-\t\t} else if (obj instanceof FieldAnnotation) {\n-            setIcon(fieldIcon);\n+    } else if (obj instanceof FieldAnnotation) {\n+    setIcon(fieldIcon);\n         } else if (obj instanceof SourceLineAnnotation) {\n             setIcon(sourceFileIcon);\n-\t\t} else if (obj instanceof BugInstanceGroup) {\n-            // This is a \"group\" node\n+    } else if (obj instanceof BugInstanceGroup) {\n+    // This is a \"group\" node\n             BugInstanceGroup groupNode = (BugInstanceGroup) obj;\n             String groupType = groupNode.getGroupType();\n-\t\t\tif (groupType == FindBugsFrame.GROUP_BY_CLASS) {\n-                setIcon(classIcon);\n+if (groupType == FindBugsFrame.GROUP_BY_CLASS) {\n+    setIcon(classIcon);\n             } else if (groupType == FindBugsFrame.GROUP_BY_PACKAGE) {\n                 setIcon(packageIcon);\n-\t\t\t} else if (groupType == FindBugsFrame.GROUP_BY_BUG_TYPE) {\n-                setIcon(bugGroupIcon);\n-                            } else if (groupType == FindBugsFrame.GROUP_BY_BUG_CATEGORY) {\n-                setIcon(bugGroupIcon);\n-\t\t\t}\n-        } else {\n+    } else if (groupType == FindBugsFrame.GROUP_BY_BUG_TYPE) {\n+    setIcon(bugGroupIcon);\n+    } else if (groupType == FindBugsFrame.GROUP_BY_BUG_CATEGORY) {\n+    setIcon(bugGroupIcon);\n+    }\n+    } else {\n             setIcon(null);\n         }\n \n@@ -117,28 +121,28 @@ public class BugCellRenderer extends DefaultTreeCellRenderer {\n     @Override\n     public Color getTextNonSelectionColor() {\n         return getCellTextColor();\n-\t}\n+    }\n \n-    private Color getCellTextColor() {\n+private Color getCellTextColor() {\n         // Based on the priority, color-code the bug instance.\n         Color color = Color.BLACK;\n-\t\tif (value instanceof BugInstance) {\n-            BugInstance bugInstance = (BugInstance) value;\n+if (value instanceof BugInstance) {\n+    BugInstance bugInstance = (BugInstance) value;\n             switch (bugInstance.getPriority()) {\n             case Detector.EXP_PRIORITY:\n-\t\t\t\tcolor = FindBugsFrame.EXP_PRIORITY_COLOR;\n-                break;\n+    color = FindBugsFrame.EXP_PRIORITY_COLOR;\n+break;\n             case Detector.LOW_PRIORITY:\n                 color = FindBugsFrame.LOW_PRIORITY_COLOR;\n-\t\t\t\tbreak;\n-            case Detector.NORMAL_PRIORITY:\n+break;\n+    case Detector.NORMAL_PRIORITY:\n                 color = FindBugsFrame.NORMAL_PRIORITY_COLOR;\n                 break;\n-\t\t\tcase Detector.HIGH_PRIORITY:\n-                color = FindBugsFrame.HIGH_PRIORITY_COLOR;\n+    case Detector.HIGH_PRIORITY:\n+    color = FindBugsFrame.HIGH_PRIORITY_COLOR;\n                 break;\n             }\n-\t\t}\n-        return color;\n     }\n-}\n+return color;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/29/BugCellRenderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/29/BugCellRenderer.java\nindex 81f0f192254..0404c642a7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/29/BugCellRenderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/29/BugCellRenderer.java\n@@ -10,23 +10,21 @@\n  *\n  * This library is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * Lesser General Public License for more details.\n  *\n  * You should have received a copy of the GNU Lesser General Public\n  * License along with this library; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\t 02111-1307\t USA\n+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n  */\n package edu.umd.cs.findbugs.gui;\n \n import java.awt.Color;\n import java.awt.Component;\n-\n import javax.swing.ImageIcon;\n import javax.swing.JTree;\n import javax.swing.tree.DefaultMutableTreeNode;\n import javax.swing.tree.DefaultTreeCellRenderer;\n-\n import edu.umd.cs.findbugs.BugInstance;\n import edu.umd.cs.findbugs.ClassAnnotation;\n import edu.umd.cs.findbugs.Detector;\n@@ -39,106 +37,113 @@ import edu.umd.cs.findbugs.SourceLineAnnotation;\n  * We use this to select the tree icons, and to set the\n  * text color based on the bug priority.\n  */\n-public class BugCellRenderer extends DefaultTreeCellRenderer {\n \n+public class BugCellRenderer extends DefaultTreeCellRenderer {\n     private static final BugCellRenderer theInstance = new BugCellRenderer();\n \n     /**\n      * Get the single instance.\n      *\n-\t * @return the instance\n+     * @return the instance\n      */\n+\n     public static BugCellRenderer instance() {\n         return theInstance;\n-\t}\n+    }\n+\n \n     private static final long serialVersionUID = 1L;\n+\n     private ImageIcon bugGroupIcon;\n+\n     private ImageIcon packageIcon;\n-\tprivate ImageIcon bugIcon;\n+\n+    private ImageIcon bugIcon;\n+\n     private ImageIcon classIcon;\n+\n     private ImageIcon methodIcon;\n+\n     private ImageIcon fieldIcon;\n-\tprivate ImageIcon sourceFileIcon;\n+\n+    private ImageIcon sourceFileIcon;\n+\n     private Object value;\n \n     private BugCellRenderer() {\n         ClassLoader classLoader = this.getClass().getClassLoader();\n         bugGroupIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/bug.png\"));\n-\t\tpackageIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/package.png\"));\n+        packageIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/package.png\"));\n         bugIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/bug2.png\"));\n         classIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/class.png\"));\n         methodIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/method.png\"));\n-\t\tfieldIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/field.png\"));\n+        fieldIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/field.png\"));\n         sourceFileIcon = new ImageIcon(classLoader.getResource(\"edu/umd/cs/findbugs/gui/sourcefile.png\"));\n     }\n \n     @Override\n-    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel,\n-                                                  boolean expanded, boolean leaf, int row, boolean hasFocus) {\n-\t\tDefaultMutableTreeNode node = (DefaultMutableTreeNode) value;\n+    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {\n+        DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;\n         Object obj = node.getUserObject();\n-\n         this.value = obj;\n-\n         super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);\n \n         // Set the icon, depending on what kind of node it is\n         if (obj instanceof BugInstance) {\n             setIcon(bugIcon);\n-\t\t} else if (obj instanceof ClassAnnotation) {\n+        } else if (obj instanceof ClassAnnotation) {\n             setIcon(classIcon);\n         } else if (obj instanceof MethodAnnotation) {\n-            setIcon(methodIcon);\n-\t\t} else if (obj instanceof FieldAnnotation) {\n-            setIcon(fieldIcon);\n-        } else if (obj instanceof SourceLineAnnotation) {\n-            setIcon(sourceFileIcon);\n-\t\t} else if (obj instanceof BugInstanceGroup) {\n+                   setIcon(methodIcon);\n+               } else if (obj instanceof FieldAnnotation) {\n+                   setIcon(fieldIcon);\n+               } else if (obj instanceof SourceLineAnnotation) {\n+                          setIcon(sourceFileIcon);\n+                      } else if (obj instanceof BugInstanceGroup) {\n             // This is a \"group\" node\n-            BugInstanceGroup groupNode = (BugInstanceGroup) obj;\n-            String groupType = groupNode.getGroupType();\n-\t\t\tif (groupType == FindBugsFrame.GROUP_BY_CLASS) {\n-                setIcon(classIcon);\n-            } else if (groupType == FindBugsFrame.GROUP_BY_PACKAGE) {\n-                setIcon(packageIcon);\n-\t\t\t} else if (groupType == FindBugsFrame.GROUP_BY_BUG_TYPE) {\n-                setIcon(bugGroupIcon);\n-                            } else if (groupType == FindBugsFrame.GROUP_BY_BUG_CATEGORY) {\n-                setIcon(bugGroupIcon);\n-\t\t\t}\n-        } else {\n-            setIcon(null);\n-        }\n-\n+                          BugInstanceGroup groupNode = (BugInstanceGroup) obj;\n+                          String groupType = groupNode.getGroupType();\n+                          if (groupType == FindBugsFrame.GROUP_BY_CLASS) {\n+                              setIcon(classIcon);\n+                          } else if (groupType == FindBugsFrame.GROUP_BY_PACKAGE) {\n+                              setIcon(packageIcon);\n+                          } else if (groupType == FindBugsFrame.GROUP_BY_BUG_TYPE) {\n+                                     setIcon(bugGroupIcon);\n+                                 } else if (groupType == FindBugsFrame.GROUP_BY_BUG_CATEGORY) {\n+                                     setIcon(bugGroupIcon);\n+                                 }\n+                      } else {\n+                          setIcon(null);\n+                      }\n         return this;\n     }\n \n     @Override\n     public Color getTextNonSelectionColor() {\n         return getCellTextColor();\n-\t}\n+    }\n+\n \n     private Color getCellTextColor() {\n         // Based on the priority, color-code the bug instance.\n         Color color = Color.BLACK;\n-\t\tif (value instanceof BugInstance) {\n+        if (value instanceof BugInstance) {\n             BugInstance bugInstance = (BugInstance) value;\n             switch (bugInstance.getPriority()) {\n             case Detector.EXP_PRIORITY:\n-\t\t\t\tcolor = FindBugsFrame.EXP_PRIORITY_COLOR;\n+                color = FindBugsFrame.EXP_PRIORITY_COLOR;\n                 break;\n             case Detector.LOW_PRIORITY:\n                 color = FindBugsFrame.LOW_PRIORITY_COLOR;\n-\t\t\t\tbreak;\n+                break;\n             case Detector.NORMAL_PRIORITY:\n                 color = FindBugsFrame.NORMAL_PRIORITY_COLOR;\n                 break;\n-\t\t\tcase Detector.HIGH_PRIORITY:\n+            case Detector.HIGH_PRIORITY:\n                 color = FindBugsFrame.HIGH_PRIORITY_COLOR;\n                 break;\n             }\n-\t\t}\n+        }\n         return color;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}