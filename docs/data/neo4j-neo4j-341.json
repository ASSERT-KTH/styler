{
    "project_name": "neo4j-neo4j",
    "error_id": "341",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/341/SchemaRuleMigrationAccessImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/341/SchemaRuleMigrationAccessImpl.java\nindex f4f681d97f6..b34b06bbf8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/341/SchemaRuleMigrationAccessImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/341/SchemaRuleMigrationAccessImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import java.io.IOException;\n@@ -36,7 +37,7 @@ public class SchemaRuleMigrationAccessImpl implements SchemaRuleMigrationAccess\n     private final PageCursorTracer cursorTracer;\n     private final MemoryTracker memoryTracker;\n \n-    SchemaRuleMigrationAccessImpl( NeoStores neoStores, SchemaStorage schemaStorage, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    SchemaRuleMigrationAccessImpl(NeoStores neoStores, SchemaStorage schemaStorage, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         this.neoStores = neoStores;\n         this.schemaStorage = schemaStorage;\n@@ -47,19 +48,19 @@ public class SchemaRuleMigrationAccessImpl implements SchemaRuleMigrationAccess\n     @Override\n     public Iterable<SchemaRule> getAll()\n     {\n-        return schemaStorage.getAll( cursorTracer );\n+        return schemaStorage.getAll(cursorTracer);\n     }\n \n     @Override\n-    public void writeSchemaRule( SchemaRule rule ) throws KernelException\n+    public void writeSchemaRule(SchemaRule rule) throws KernelException\n     {\n-        schemaStorage.writeSchemaRule( rule, cursorTracer, memoryTracker );\n+        schemaStorage.writeSchemaRule(rule, cursorTracer, memoryTracker);\n     }\n \n     @Override\n     public void close() throws IOException\n     {\n-        neoStores.flush( IOLimiter.UNLIMITED, cursorTracer );\n+        neoStores.flush(IOLimiter.UNLIMITED, cursorTracer);\n         neoStores.close();\n     }\n }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}