{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4009",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4009/PropertyRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4009/PropertyRecordFormat.java\nindex 3f00ece27a4..1b27ec35ca7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4009/PropertyRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4009/PropertyRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.standard;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -29,144 +30,143 @@ import org.neo4j.kernel.impl.store.record.RecordLoad;\n \n public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n {\n-    public static final int DEFAULT_DATA_BLOCK_SIZE = 120;\n-    public static final int DEFAULT_PAYLOAD_SIZE = 32;\n+  public static final int DEFAULT_DATA_BLOCK_SIZE = 120;\n+  public static final int DEFAULT_PAYLOAD_SIZE = 32;\n \n-    public static final int RECORD_SIZE = 1/*next and prev high bits*/\n-            + 4/*next*/\n-            + 4/*prev*/\n-            + DEFAULT_PAYLOAD_SIZE /*property blocks*/;\n-    // = 41\n+  public static final int RECORD_SIZE = 1/*next and prev high bits*/\n+      + 4/*next*/\n+      + 4/*prev*/\n+      + DEFAULT_PAYLOAD_SIZE /*property blocks*/;\n+  // = 41\n \n-    public PropertyRecordFormat()\n-    {\n-        super( fixedRecordSize( RECORD_SIZE ), 0, StandardFormatSettings.PROPERTY_MAXIMUM_ID_BITS );\n-    }\n+  public PropertyRecordFormat()\n+  {\n+    super(fixedRecordSize(RECORD_SIZE), 0, StandardFormatSettings.PROPERTY_MAXIMUM_ID_BITS);\n+  }\n \n-    @Override\n-    public PropertyRecord newRecord()\n-    {\n-        return new PropertyRecord( -1 );\n-    }\n+  @Override\n+  public PropertyRecord newRecord()\n+  {\n+    return new PropertyRecord(-1);\n+  }\n \n-    @Override\n-    public void read( PropertyRecord record, PageCursor cursor, RecordLoad mode, int recordSize )\n-    {\n-        int offsetAtBeginning = cursor.getOffset();\n+  @Override\n+  public void read(PropertyRecord record, PageCursor cursor, RecordLoad mode, int recordSize)\n+  {\n+    int offsetAtBeginning = cursor.getOffset();\n \n-        /*\n-         * [pppp,nnnn] previous, next high bits\n-         */\n-        byte modifiers = cursor.getByte();\n-        long prevMod = (modifiers & 0xF0L) << 28;\n-        long nextMod = (modifiers & 0x0FL) << 32;\n-        long prevProp = cursor.getInt() & 0xFFFFFFFFL;\n-        long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n-        record.initialize( false,\n-                BaseRecordFormat.longFromIntAndMod( prevProp, prevMod ),\n-                BaseRecordFormat.longFromIntAndMod( nextProp, nextMod ) );\n-        while ( cursor.getOffset() - offsetAtBeginning < RECORD_SIZE )\n-        {\n-            long block = cursor.getLong();\n-            PropertyType type = PropertyType.getPropertyTypeOrNull( block );\n-            if ( type == null )\n-            {\n-                // We assume that storage is defragged\n-                break;\n-            }\n+    /*\n+     * [pppp,nnnn] previous, next high bits\n+     */\n+    byte modifiers = cursor.getByte();\n+    long prevMod = (modifiers & 0xF0L) << 28;\n+    long nextMod = (modifiers & 0x0FL) << 32;\n+    long prevProp = cursor.getInt() & 0xFFFFFFFFL;\n+    long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n+    record.initialize(false,\n+        BaseRecordFormat.longFromIntAndMod(prevProp, prevMod),\n+        BaseRecordFormat.longFromIntAndMod(nextProp, nextMod));\n+    while (cursor.getOffset() - offsetAtBeginning < RECORD_SIZE)\n+    {\n+      long block = cursor.getLong();\n+      PropertyType type = PropertyType.getPropertyTypeOrNull(block);\n+      if (type == null)\n+      {\n+        // We assume that storage is defragged\n+        break;\n+      }\n \n-            record.setInUse( true );\n-            record.addLoadedBlock( block );\n-            int numberOfBlocksUsed = type.calculateNumberOfBlocksUsed( block );\n-            if ( numberOfBlocksUsed == PropertyType.BLOCKS_USED_FOR_BAD_TYPE_OR_ENCODING )\n-            {\n-                cursor.setCursorException( \"Invalid type or encoding of property block: \" + block + \" (type = \" + type + \")\" );\n-                return;\n-            }\n-            int additionalBlocks = numberOfBlocksUsed - 1;\n-            if ( additionalBlocks * Long.BYTES > RECORD_SIZE - (cursor.getOffset() - offsetAtBeginning) )\n-            {\n-                cursor.setCursorException( \"PropertyRecord claims to have more property blocks than can fit in a record\" );\n-                return;\n-            }\n-            while ( additionalBlocks-- > 0 )\n-            {\n-                record.addLoadedBlock( cursor.getLong() );\n-            }\n-        }\n+      record.setInUse(true);\n+      record.addLoadedBlock(block);\n+      int numberOfBlocksUsed = type.calculateNumberOfBlocksUsed(block);\n+      if (numberOfBlocksUsed == PropertyType.BLOCKS_USED_FOR_BAD_TYPE_OR_ENCODING)\n+      {\n+        cursor.setCursorException(\"Invalid type or encoding of property block: \" + block + \" (type = \" + type + \")\");\n+        return;\n+      }\n+      int additionalBlocks = numberOfBlocksUsed - 1;\n+      if (additionalBlocks * Long.BYTES > RECORD_SIZE - (cursor.getOffset() - offsetAtBeginning))\n+      {\n+        cursor.setCursorException(\"PropertyRecord claims to have more property blocks than can fit in a record\");\n+        return;\n+      }\n+      while (additionalBlocks-- > 0)\n+      {\n+        record.addLoadedBlock(cursor.getLong());\n+      }\n     }\n+  }\n \n-    @Override\n-    public void write( PropertyRecord record, PageCursor cursor, int recordSize )\n+  @Override\n+  public void write(PropertyRecord record, PageCursor cursor, int recordSize)\n+  {\n+    if (record.inUse())\n     {\n-        if ( record.inUse() )\n-        {\n-            // Set up the record header\n-            short prevModifier = record.getPrevProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n-                    : (short) ((record.getPrevProp() & 0xF00000000L) >> 28);\n-            short nextModifier = record.getNextProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n-                    : (short) ((record.getNextProp() & 0xF00000000L) >> 32);\n-            byte modifiers = (byte) (prevModifier | nextModifier);\n-            /*\n-             * [pppp,nnnn] previous, next high bits\n-             */\n-            cursor.putByte( modifiers );\n-            cursor.putInt( (int) record.getPrevProp() );\n-            cursor.putInt( (int) record.getNextProp() );\n-\n-            // Then go through the blocks\n-            int longsAppended = 0; // For marking the end of blocks\n-            for ( PropertyBlock block : record )\n-            {\n-                long[] propBlockValues = block.getValueBlocks();\n-                for ( long propBlockValue : propBlockValues )\n-                {\n-                    cursor.putLong( propBlockValue );\n-                }\n+      // Set up the record header\n+      short prevModifier = record.getPrevProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n+          : (short) ((record.getPrevProp() & 0xF00000000L) >> 28);\n+      short nextModifier = record.getNextProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n+          : (short) ((record.getNextProp() & 0xF00000000L) >> 32);\n+      byte modifiers = (byte) (prevModifier | nextModifier);\n+      /*\n+       * [pppp,nnnn] previous, next high bits\n+       */\n+      cursor.putByte(modifiers);\n+      cursor.putInt((int) record.getPrevProp());\n+      cursor.putInt((int) record.getNextProp());\n \n-                longsAppended += propBlockValues.length;\n-            }\n-            if ( longsAppended < PropertyType.getPayloadSizeLongs() )\n-            {\n-                cursor.putLong( 0 );\n-            }\n-        }\n-        else\n+      // Then go through the blocks\n+      int longsAppended = 0; // For marking the end of blocks\n+      for (PropertyBlock block : record)\n+      {\n+        long[] propBlockValues = block.getValueBlocks();\n+        for (long propBlockValue : propBlockValues)\n         {\n-            // skip over the record header, nothing useful there\n-            cursor.setOffset( cursor.getOffset() + 9 );\n-            cursor.putLong( 0 );\n+          cursor.putLong(propBlockValue);\n         }\n-    }\n \n-    @Override\n-    public long getNextRecordReference( PropertyRecord record )\n+        longsAppended += propBlockValues.length;\n+      }\n+      if (longsAppended < PropertyType.getPayloadSizeLongs())\n+      {\n+        cursor.putLong(0);\n+      }\n+    } else\n     {\n-        return record.getNextProp();\n+      // skip over the record header, nothing useful there\n+      cursor.setOffset(cursor.getOffset() + 9);\n+      cursor.putLong(0);\n     }\n+  }\n \n-    /**\n-     * For property records there's no \"inUse\" byte and we need to read the whole record to\n-     * see if there are any PropertyBlocks in use in it.\n-     */\n-    @Override\n-    public boolean isInUse( PageCursor cursor )\n+  @Override\n+  public long getNextRecordReference(PropertyRecord record)\n+  {\n+    return record.getNextProp();\n+  }\n+\n+  /**\n+   * For property records there's no \"inUse\" byte and we need to read the whole record to\n+   * see if there are any PropertyBlocks in use in it.\n+   */\n+  @Override\n+  public boolean isInUse(PageCursor cursor)\n+  {\n+    cursor.setOffset(cursor.getOffset() /*skip...*/ + 1/*mod*/ + 4/*prev*/ + 4/*next*/);\n+    int blocks = PropertyType.getPayloadSizeLongs();\n+    for (int i = 0; i < blocks; i++)\n     {\n-        cursor.setOffset( cursor.getOffset() /*skip...*/ + 1/*mod*/ + 4/*prev*/ + 4/*next*/ );\n-        int blocks = PropertyType.getPayloadSizeLongs();\n-        for ( int i = 0; i < blocks; i++ )\n-        {\n-            long block = cursor.getLong();\n-            // Since there's no inUse byte we have to check the special case of first block == 0, which will mean that it's deleted\n-            if ( i == 0 && block == 0 )\n-            {\n-                return false;\n-            }\n-            if ( PropertyType.getPropertyTypeOrNull( block ) != null )\n-            {\n-                return true;\n-            }\n-        }\n+      long block = cursor.getLong();\n+      // Since there's no inUse byte we have to check the special case of first block == 0, which will mean that it's deleted\n+      if (i == 0 && block == 0)\n+      {\n         return false;\n+      }\n+      if (PropertyType.getPropertyTypeOrNull(block) != null)\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n }\n",
            "diff_size": 150
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "column": "47",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "111",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4009/PropertyRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4009/PropertyRecordFormat.java\nindex 3f00ece27a4..9c33b86e9a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4009/PropertyRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4009/PropertyRecordFormat.java\n@@ -30,13 +30,13 @@ import org.neo4j.kernel.impl.store.record.RecordLoad;\n public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n {\n     public static final int DEFAULT_DATA_BLOCK_SIZE = 120;\n-    public static final int DEFAULT_PAYLOAD_SIZE = 32;\n \n-    public static final int RECORD_SIZE = 1/*next and prev high bits*/\n-            + 4/*next*/\n+public static final int DEFAULT_PAYLOAD_SIZE = 32;\n+\n+    public static final int RECORD_SIZE = 1/*next and prev high bits*/ + 4/*next*/\n             + 4/*prev*/\n             + DEFAULT_PAYLOAD_SIZE /*property blocks*/;\n-    // = 41\n+// = 41\n \n     public PropertyRecordFormat()\n     {\n@@ -63,9 +63,8 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n         long prevProp = cursor.getInt() & 0xFFFFFFFFL;\n         long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n         record.initialize( false,\n-                BaseRecordFormat.longFromIntAndMod( prevProp, prevMod ),\n-                BaseRecordFormat.longFromIntAndMod( nextProp, nextMod ) );\n-        while ( cursor.getOffset() - offsetAtBeginning < RECORD_SIZE )\n+                BaseRecordFormat.longFromIntAndMod( prevProp, prevMod ), BaseRecordFormat.longFromIntAndMod( nextProp, nextMod ) );\n+    while ( cursor.getOffset() - offsetAtBeginning < RECORD_SIZE )\n         {\n             long block = cursor.getLong();\n             PropertyType type = PropertyType.getPropertyTypeOrNull( block );\n@@ -84,7 +83,7 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n                 return;\n             }\n             int additionalBlocks = numberOfBlocksUsed - 1;\n-            if ( additionalBlocks * Long.BYTES > RECORD_SIZE - (cursor.getOffset() - offsetAtBeginning) )\n+            if ( additionalBlocks * Long.BYTES> RECORD_SIZE - (cursor.getOffset() - offsetAtBeginning) )\n             {\n                 cursor.setCursorException( \"PropertyRecord claims to have more property blocks than can fit in a record\" );\n                 return;\n@@ -102,17 +101,15 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n         if ( record.inUse() )\n         {\n             // Set up the record header\n-            short prevModifier = record.getPrevProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n-                    : (short) ((record.getPrevProp() & 0xF00000000L) >> 28);\n-            short nextModifier = record.getNextProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0\n-                    : (short) ((record.getNextProp() & 0xF00000000L) >> 32);\n-            byte modifiers = (byte) (prevModifier | nextModifier);\n+            short prevModifier = record.getPrevProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (short) ((record.getPrevProp() & 0xF00000000L) >> 28 );\n+    short nextModifier = record.getNextProp() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (short) ((record.getNextProp() & 0xF00000000L) >> 32 );\n+    byte modifiers = (byte) ( prevModifier | nextModifier );\n             /*\n              * [pppp,nnnn] previous, next high bits\n              */\n             cursor.putByte( modifiers );\n-            cursor.putInt( (int) record.getPrevProp() );\n-            cursor.putInt( (int) record.getNextProp() );\n+            cursor.putInt( ( int) record.getPrevProp() );\n+            cursor.putInt( ( int) record.getNextProp() );\n \n             // Then go through the blocks\n             int longsAppended = 0; // For marking the end of blocks\n@@ -126,7 +123,8 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n \n                 longsAppended += propBlockValues.length;\n             }\n-            if ( longsAppended < PropertyType.getPayloadSizeLongs() )\n+\n+if ( longsAppended < PropertyType.getPayloadSizeLongs() )\n             {\n                 cursor.putLong( 0 );\n             }\n@@ -162,11 +160,12 @@ public class PropertyRecordFormat extends BaseRecordFormat<PropertyRecord>\n             {\n                 return false;\n             }\n-            if ( PropertyType.getPropertyTypeOrNull( block ) != null )\n+\n+if ( PropertyType.getPropertyTypeOrNull( block ) != null )\n             {\n                 return true;\n             }\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}