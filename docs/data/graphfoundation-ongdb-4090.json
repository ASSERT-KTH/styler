{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4090",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "49",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4090/RowWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4090/RowWriter.java\nindex 3b316157649..3db01bd8567 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4090/RowWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4090/RowWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.transactional;\n \n import org.codehaus.jackson.JsonGenerator;\n@@ -27,47 +28,45 @@ import org.neo4j.graphdb.Result;\n \n class RowWriter implements ResultDataContentWriter\n {\n-    @Override\n-    public void write( JsonGenerator out, Iterable<String> columns, Result.ResultRow row,\n-            TransactionStateChecker txStateChecker ) throws IOException\n+  @Override\n+  public void write(JsonGenerator out, Iterable<String> columns, Result.ResultRow row,\n+                    TransactionStateChecker txStateChecker) throws IOException\n+  {\n+    out.writeArrayFieldStart(\"row\");\n+    try\n+    {\n+      for (String key : columns)\n+      {\n+        out.writeObject(row.get(key));\n+      }\n+    } finally\n     {\n-        out.writeArrayFieldStart( \"row\" );\n-        try\n-        {\n-            for ( String key : columns )\n-            {\n-                out.writeObject( row.get( key ) );\n-            }\n-        }\n-        finally\n-        {\n-            out.writeEndArray();\n-            writeMeta( out, columns, row );\n-        }\n+      out.writeEndArray();\n+      writeMeta(out, columns, row);\n     }\n+  }\n \n-    private void writeMeta( JsonGenerator out, Iterable<String> columns, Result.ResultRow row ) throws IOException\n+  private void writeMeta(JsonGenerator out, Iterable<String> columns, Result.ResultRow row) throws IOException\n+  {\n+    out.writeArrayFieldStart(\"meta\");\n+    try\n+    {\n+      /*\n+       * The way we've designed this JSON serialization is by injecting a custom codec\n+       * to write the entities. Unfortunately, there seems to be no way to control state\n+       * inside the JsonGenerator, and so we need to make a second call to write out the\n+       * meta information, directly to the injected codec. This is not very pretty,\n+       * but time is expensive, and redesigning one of three server serialization\n+       * formats is not a priority.\n+       */\n+      Neo4jJsonCodec codec = (Neo4jJsonCodec) out.getCodec();\n+      for (String key : columns)\n+      {\n+        codec.writeMeta(out, row.get(key));\n+      }\n+    } finally\n     {\n-        out.writeArrayFieldStart( \"meta\" );\n-        try\n-        {\n-            /*\n-             * The way we've designed this JSON serialization is by injecting a custom codec\n-             * to write the entities. Unfortunately, there seems to be no way to control state\n-             * inside the JsonGenerator, and so we need to make a second call to write out the\n-             * meta information, directly to the injected codec. This is not very pretty,\n-             * but time is expensive, and redesigning one of three server serialization\n-             * formats is not a priority.\n-             */\n-            Neo4jJsonCodec codec = (Neo4jJsonCodec) out.getCodec();\n-            for ( String key : columns )\n-            {\n-                codec.writeMeta( out, row.get( key ) );\n-            }\n-        }\n-        finally\n-        {\n-            out.writeEndArray();\n-        }\n+      out.writeEndArray();\n     }\n+  }\n }\n",
            "diff_size": 68
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4090/RowWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4090/RowWriter.java\nindex 3b316157649..5b9d28b5d4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4090/RowWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4090/RowWriter.java\n@@ -30,7 +30,7 @@ class RowWriter implements ResultDataContentWriter\n     @Override\n     public void write( JsonGenerator out, Iterable<String> columns, Result.ResultRow row,\n             TransactionStateChecker txStateChecker ) throws IOException\n-    {\n+{\n         out.writeArrayFieldStart( \"row\" );\n         try\n         {\n@@ -70,4 +70,4 @@ class RowWriter implements ResultDataContentWriter\n             out.writeEndArray();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}