{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2295",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2295/SlavePriorities.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2295/SlavePriorities.java\nindex 290dbdad8e9..aa326e11232 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2295/SlavePriorities.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2295/SlavePriorities.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.com.master;\n \n import java.util.ArrayList;\n@@ -36,92 +37,92 @@ import static java.util.Collections.reverseOrder;\n  */\n public abstract class SlavePriorities\n {\n-    // Purely a factory.\n-    private SlavePriorities()\n-    {\n-    }\n+  // Purely a factory.\n+  private SlavePriorities()\n+  {\n+  }\n \n-    /**\n-     * @return {@link SlavePriority} which returns the slaves in the order that\n-     * they are given in the {@code slaves} array.\n-     */\n-    public static SlavePriority givenOrder()\n-    {\n-        return slaves -> slaves;\n-    }\n+  /**\n+   * @return {@link SlavePriority} which returns the slaves in the order that\n+   * they are given in the {@code slaves} array.\n+   */\n+  public static SlavePriority givenOrder()\n+  {\n+    return slaves -> slaves;\n+  }\n \n-    /**\n-     * @return {@link SlavePriority} which returns the slaves in a round robin\n-     * fashion, more precisely the start index in the array increments with\n-     * each {@link SlavePriority#prioritize(Iterable) prioritization}, ordered\n-     * by server id in ascending.\n-     */\n-    public static SlavePriority roundRobin()\n+  /**\n+   * @return {@link SlavePriority} which returns the slaves in a round robin\n+   * fashion, more precisely the start index in the array increments with\n+   * each {@link SlavePriority#prioritize(Iterable) prioritization}, ordered\n+   * by server id in ascending.\n+   */\n+  public static SlavePriority roundRobin()\n+  {\n+    return new SlavePriority()\n     {\n-        return new SlavePriority()\n-        {\n-            final AtomicInteger index = new AtomicInteger();\n+      final AtomicInteger index = new AtomicInteger();\n \n-            @Override\n-            public Iterable<Slave> prioritize( final Iterable<Slave> slaves )\n-            {\n-                final List<Slave> slaveList = sortSlaves( slaves, true );\n-                if ( slaveList.isEmpty() )\n-                {\n-                    return Iterables.empty();\n-                }\n-                return () -> new PrefetchingIterator<Slave>()\n-                {\n-                    private int start = index.getAndIncrement() % slaveList.size();\n-                    private int count;\n+      @Override\n+      public Iterable<Slave> prioritize(final Iterable<Slave> slaves)\n+      {\n+        final List<Slave> slaveList = sortSlaves(slaves, true);\n+        if (slaveList.isEmpty())\n+        {\n+          return Iterables.empty();\n+        }\n+        return () -> new PrefetchingIterator<Slave>()\n+        {\n+          private int start = index.getAndIncrement() % slaveList.size();\n+          private int count;\n \n-                    @Override\n-                    protected Slave fetchNextOrNull()\n-                    {\n-                        int id = count++;\n-                        return id <= slaveList.size() ? slaveList.get( (start + id) % slaveList.size() ) : null;\n-                    }\n-                };\n-            }\n+          @Override\n+          protected Slave fetchNextOrNull()\n+          {\n+            int id = count++;\n+            return id <= slaveList.size() ? slaveList.get((start + id) % slaveList.size()) : null;\n+          }\n         };\n-    }\n+      }\n+    };\n+  }\n \n-    /**\n-     * @return {@link SlavePriority} which returns the slaves in the same fixed order\n-     * sorted by server id in descending order.\n-     */\n-    public static SlavePriority fixedDescending()\n-    {\n-        return slaves -> sortSlaves( slaves, false );\n-    }\n+  /**\n+   * @return {@link SlavePriority} which returns the slaves in the same fixed order\n+   * sorted by server id in descending order.\n+   */\n+  public static SlavePriority fixedDescending()\n+  {\n+    return slaves -> sortSlaves(slaves, false);\n+  }\n \n-    /**\n-     * @return {@link SlavePriority} which returns the slaves in the same fixed order\n-     * sorted by server id in ascending order. This is generally preferable to {@link #fixedDescending()},\n-     * because this aligns with the tie-breaker aspect of the lowest server id becoming master.\n-     * <p>\n-     * Eg. if you want to ensure that failover most likely will happen in a specific datacenter,\n-     * you would place low-id instances in that datacenter and choose this strategy. That way,\n-     * most of the time the most up-to-date instance will be in this data center, and if there is\n-     * a tie, the tie-break will also end up electing a master in the same data center.\n-     * <p>\n-     * This is in contrast to {@link #fixedDescending()}, where a high-id server is likely to be most\n-     * up-to-date if the master fails, but a low-id server is likely to be elected if there is a tie.\n-     * This makes the two scenarios consistently choose a low-id server as the new master.\n-     */\n-    public static SlavePriority fixedAscending()\n-    {\n-        return slaves -> sortSlaves( slaves, true );\n-    }\n+  /**\n+   * @return {@link SlavePriority} which returns the slaves in the same fixed order\n+   * sorted by server id in ascending order. This is generally preferable to {@link #fixedDescending()},\n+   * because this aligns with the tie-breaker aspect of the lowest server id becoming master.\n+   * <p>\n+   * Eg. if you want to ensure that failover most likely will happen in a specific datacenter,\n+   * you would place low-id instances in that datacenter and choose this strategy. That way,\n+   * most of the time the most up-to-date instance will be in this data center, and if there is\n+   * a tie, the tie-break will also end up electing a master in the same data center.\n+   * <p>\n+   * This is in contrast to {@link #fixedDescending()}, where a high-id server is likely to be most\n+   * up-to-date if the master fails, but a low-id server is likely to be elected if there is a tie.\n+   * This makes the two scenarios consistently choose a low-id server as the new master.\n+   */\n+  public static SlavePriority fixedAscending()\n+  {\n+    return slaves -> sortSlaves(slaves, true);\n+  }\n \n-    private static List<Slave> sortSlaves( final Iterable<Slave> slaves, boolean asc )\n-    {\n-        ArrayList<Slave> slaveList = Iterables.addAll( new ArrayList<>(), slaves );\n-        slaveList.sort( asc ? SERVER_ID_COMPARATOR : REVERSE_SERVER_ID_COMPARATOR );\n-        return slaveList;\n-    }\n+  private static List<Slave> sortSlaves(final Iterable<Slave> slaves, boolean asc)\n+  {\n+    ArrayList<Slave> slaveList = Iterables.addAll(new ArrayList<>(), slaves);\n+    slaveList.sort(asc ? SERVER_ID_COMPARATOR : REVERSE_SERVER_ID_COMPARATOR);\n+    return slaveList;\n+  }\n \n-    private static final Comparator<Slave> SERVER_ID_COMPARATOR = Comparator.comparingInt( Slave::getServerId );\n+  private static final Comparator<Slave> SERVER_ID_COMPARATOR = Comparator.comparingInt(Slave::getServerId);\n \n-    private static final Comparator<Slave> REVERSE_SERVER_ID_COMPARATOR = reverseOrder( SERVER_ID_COMPARATOR );\n+  private static final Comparator<Slave> REVERSE_SERVER_ID_COMPARATOR = reverseOrder(SERVER_ID_COMPARATOR);\n }\n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2295/SlavePriorities.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2295/SlavePriorities.java\nindex 290dbdad8e9..b576db72e38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2295/SlavePriorities.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2295/SlavePriorities.java\n@@ -124,4 +124,4 @@ public abstract class SlavePriorities\n     private static final Comparator<Slave> SERVER_ID_COMPARATOR = Comparator.comparingInt( Slave::getServerId );\n \n     private static final Comparator<Slave> REVERSE_SERVER_ID_COMPARATOR = reverseOrder( SERVER_ID_COMPARATOR );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}