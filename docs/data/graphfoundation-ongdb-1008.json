{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1008",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1008/SchemaRead.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1008/SchemaRead.java\nindex 3952661a2cc..e696f17869d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1008/SchemaRead.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1008/SchemaRead.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import java.util.Iterator;\n@@ -36,185 +37,188 @@ import org.neo4j.values.storable.Value;\n  */\n public interface SchemaRead\n {\n-    /**\n-     * Acquire a reference to the index mapping the given {@code label} and {@code properties}.\n-     *\n-     * @param label the index label\n-     * @param properties the index properties\n-     * @return the IndexReference, or {@link CapableIndexReference#NO_INDEX} if such an index does not exist.\n-     */\n-    CapableIndexReference index( int label, int... properties );\n-\n-    /**\n-     * Returns all indexes associated with the given label\n-     *\n-     * @param labelId The id of the label which associated indexes you are looking for\n-     * @return The indexes associated with the given label\n-     */\n-    Iterator<IndexReference> indexesGetForLabel( int labelId );\n-\n-    /**\n-     * Returns all indexes used in the database\n-     *\n-     * @return all indexes used in the database\n-     */\n-    Iterator<IndexReference> indexesGetAll();\n-\n-    /**\n-     * Retrieves the state of an index\n-     *\n-     * @param index the index which state to retrieve\n-     * @return The state of the provided index\n-     * @throws IndexNotFoundKernelException if the index was not found in the database\n-     */\n-    InternalIndexState indexGetState( IndexReference index ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Retrives the population progress of the index\n-     *\n-     * @param index The index whose progress to retrieve\n-     * @return The population progress of the given index\n-     * @throws IndexNotFoundKernelException if the index was not found in the database\n-     */\n-    PopulationProgress indexGetPopulationProgress( IndexReference index ) throws\n-            IndexNotFoundKernelException;\n-\n-    /**\n-     * Get the index id (the id or the schema rule record) for a committed index\n-     * - throws exception for indexes that aren't committed.\n-     */\n-    long indexGetCommittedId( IndexReference index ) throws SchemaKernelException;\n-\n-    /**\n-     * Returns the failure description of a failed index.\n-     *\n-     * @param index the failed index\n-     * @return The failure message from the index\n-     * @throws IndexNotFoundKernelException if the index was not found in the database\n-     */\n-    String indexGetFailure( IndexReference index ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Computes the selectivity of the unique values.\n-     *\n-     * @param index The index of interest\n-     * @return The selectivity of the given index\n-     * @throws IndexNotFoundKernelException if the index is not there\n-     */\n-    double indexUniqueValuesSelectivity( IndexReference index ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Returns the size of the index.\n-     *\n-     * @param index The index of interest\n-     * @return The size of the current index\n-     * @throws IndexNotFoundKernelException if the index is not there\n-     */\n-    long indexSize( IndexReference index ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Count the number of index entries for the given nodeId and value.\n-     *\n-     * @param index The index of interest\n-     * @param nodeId node id to match.\n-     * @param value the property value\n-     * @return number of index entries for the given {@code nodeId} and {@code value}.\n-     */\n-    long nodesCountIndexed( IndexReference index, long nodeId, Value value ) throws KernelException;\n-\n-    /**\n-     * Returns the number of unique entries and the total number of entries in an index.\n-     *\n-     * Results are written to a {@link Register.DoubleLongRegister}, writing the number of unique entries into\n-     * the first long, and the total number of entries into the second.\n-     *\n-     * @param index The index of interest\n-     * @param target A {@link Register.DoubleLongRegister} to which to write the entry counts.\n-     * @return {@code target}\n-     * @throws IndexNotFoundKernelException if the index does not exist.\n-     */\n-    Register.DoubleLongRegister indexUpdatesAndSize( IndexReference index, Register.DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Returns the last recorded size of an index, and how many updates that have been applied to the index since then.\n-     *\n-     * Results are written to a {@link Register.DoubleLongRegister}, writing the update count into the first long, and\n-     * the size into the second.\n-     *\n-     * @param index The index of interest\n-     * @param target A {@link Register.DoubleLongRegister} to which to write the update count and size.\n-     * @return {@code target}\n-     * @throws IndexNotFoundKernelException if the index does not exist.\n-     */\n-    Register.DoubleLongRegister indexSample( IndexReference index, Register.DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n-    /**\n-     * Finds all constraints for the given schema\n-     *\n-     * @param descriptor The descriptor of the schema\n-     * @return All constraints for the given schema\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetForSchema( SchemaDescriptor descriptor );\n-\n-    /**\n-     * Checks if a constraint exists\n-     *\n-     * @param descriptor The descriptor of the constraint to check.\n-     * @return {@code true} if the constraint exists, otherwise {@code false}\n-     */\n-    boolean constraintExists( ConstraintDescriptor descriptor );\n-\n-    /**\n-     * Finds all constraints for the given label\n-     *\n-     * @param labelId The id of the label\n-     * @return All constraints for the given label\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetForLabel( int labelId );\n-\n-    /**\n-     * Find all constraints in the database\n-     *\n-     * @return An iterator of all the constraints in the database.\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetAll();\n-\n-    /**\n-     * Get all constraints applicable to relationship type.\n-     *\n-     * @param typeId the id of the relationship type\n-     * @return An iterator of constraints associated with the given type.\n-     */\n-    Iterator<ConstraintDescriptor> constraintsGetForRelationshipType( int typeId );\n-\n-    /**\n-     * Get the owning constraint for a constraint index or <tt>null</tt> if the index does not have an owning\n-     * constraint.\n-     */\n-    Long indexGetOwningUniquenessConstraintId( IndexReference index );\n-\n-    /**\n-     * Returns schema state for the given key or create a new state if not there\n-     * @param key The key to access\n-     * @param creator function creating schema state\n-     * @param <K> type of the key\n-     * @param <V> type of the schema state value\n-     * @return the state associated with the key or a new value if non-existing\n-     */\n-    <K, V> V schemaStateGetOrCreate( K key, Function<K, V> creator );\n-\n-    /**\n-     * Returns the state associated with the key or <tt>null</tt> if nothing assocated with key\n-     * @param key The key to access\n-     * @param <K> The type of the key\n-     * @param <V> The type of the assocated value\n-     * @return The value associated with the given key or <tt>null</tt>\n-     */\n-    <K, V> V schemaStateGet( K key );\n-\n-    /**\n-     * Flush the schema state\n-     */\n-    void schemaStateFlush();\n+  /**\n+   * Acquire a reference to the index mapping the given {@code label} and {@code properties}.\n+   *\n+   * @param label      the index label\n+   * @param properties the index properties\n+   * @return the IndexReference, or {@link CapableIndexReference#NO_INDEX} if such an index does not exist.\n+   */\n+  CapableIndexReference index(int label, int... properties);\n+\n+  /**\n+   * Returns all indexes associated with the given label\n+   *\n+   * @param labelId The id of the label which associated indexes you are looking for\n+   * @return The indexes associated with the given label\n+   */\n+  Iterator<IndexReference> indexesGetForLabel(int labelId);\n+\n+  /**\n+   * Returns all indexes used in the database\n+   *\n+   * @return all indexes used in the database\n+   */\n+  Iterator<IndexReference> indexesGetAll();\n+\n+  /**\n+   * Retrieves the state of an index\n+   *\n+   * @param index the index which state to retrieve\n+   * @return The state of the provided index\n+   * @throws IndexNotFoundKernelException if the index was not found in the database\n+   */\n+  InternalIndexState indexGetState(IndexReference index) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Retrives the population progress of the index\n+   *\n+   * @param index The index whose progress to retrieve\n+   * @return The population progress of the given index\n+   * @throws IndexNotFoundKernelException if the index was not found in the database\n+   */\n+  PopulationProgress indexGetPopulationProgress(IndexReference index) throws\n+      IndexNotFoundKernelException;\n+\n+  /**\n+   * Get the index id (the id or the schema rule record) for a committed index\n+   * - throws exception for indexes that aren't committed.\n+   */\n+  long indexGetCommittedId(IndexReference index) throws SchemaKernelException;\n+\n+  /**\n+   * Returns the failure description of a failed index.\n+   *\n+   * @param index the failed index\n+   * @return The failure message from the index\n+   * @throws IndexNotFoundKernelException if the index was not found in the database\n+   */\n+  String indexGetFailure(IndexReference index) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Computes the selectivity of the unique values.\n+   *\n+   * @param index The index of interest\n+   * @return The selectivity of the given index\n+   * @throws IndexNotFoundKernelException if the index is not there\n+   */\n+  double indexUniqueValuesSelectivity(IndexReference index) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Returns the size of the index.\n+   *\n+   * @param index The index of interest\n+   * @return The size of the current index\n+   * @throws IndexNotFoundKernelException if the index is not there\n+   */\n+  long indexSize(IndexReference index) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Count the number of index entries for the given nodeId and value.\n+   *\n+   * @param index  The index of interest\n+   * @param nodeId node id to match.\n+   * @param value  the property value\n+   * @return number of index entries for the given {@code nodeId} and {@code value}.\n+   */\n+  long nodesCountIndexed(IndexReference index, long nodeId, Value value) throws KernelException;\n+\n+  /**\n+   * Returns the number of unique entries and the total number of entries in an index.\n+   * <p>\n+   * Results are written to a {@link Register.DoubleLongRegister}, writing the number of unique entries into\n+   * the first long, and the total number of entries into the second.\n+   *\n+   * @param index  The index of interest\n+   * @param target A {@link Register.DoubleLongRegister} to which to write the entry counts.\n+   * @return {@code target}\n+   * @throws IndexNotFoundKernelException if the index does not exist.\n+   */\n+  Register.DoubleLongRegister indexUpdatesAndSize(IndexReference index, Register.DoubleLongRegister target)\n+      throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Returns the last recorded size of an index, and how many updates that have been applied to the index since then.\n+   * <p>\n+   * Results are written to a {@link Register.DoubleLongRegister}, writing the update count into the first long, and\n+   * the size into the second.\n+   *\n+   * @param index  The index of interest\n+   * @param target A {@link Register.DoubleLongRegister} to which to write the update count and size.\n+   * @return {@code target}\n+   * @throws IndexNotFoundKernelException if the index does not exist.\n+   */\n+  Register.DoubleLongRegister indexSample(IndexReference index, Register.DoubleLongRegister target)\n+      throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Finds all constraints for the given schema\n+   *\n+   * @param descriptor The descriptor of the schema\n+   * @return All constraints for the given schema\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetForSchema(SchemaDescriptor descriptor);\n+\n+  /**\n+   * Checks if a constraint exists\n+   *\n+   * @param descriptor The descriptor of the constraint to check.\n+   * @return {@code true} if the constraint exists, otherwise {@code false}\n+   */\n+  boolean constraintExists(ConstraintDescriptor descriptor);\n+\n+  /**\n+   * Finds all constraints for the given label\n+   *\n+   * @param labelId The id of the label\n+   * @return All constraints for the given label\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetForLabel(int labelId);\n+\n+  /**\n+   * Find all constraints in the database\n+   *\n+   * @return An iterator of all the constraints in the database.\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetAll();\n+\n+  /**\n+   * Get all constraints applicable to relationship type.\n+   *\n+   * @param typeId the id of the relationship type\n+   * @return An iterator of constraints associated with the given type.\n+   */\n+  Iterator<ConstraintDescriptor> constraintsGetForRelationshipType(int typeId);\n+\n+  /**\n+   * Get the owning constraint for a constraint index or <tt>null</tt> if the index does not have an owning\n+   * constraint.\n+   */\n+  Long indexGetOwningUniquenessConstraintId(IndexReference index);\n+\n+  /**\n+   * Returns schema state for the given key or create a new state if not there\n+   *\n+   * @param key     The key to access\n+   * @param creator function creating schema state\n+   * @param <K>     type of the key\n+   * @param <V>     type of the schema state value\n+   * @return the state associated with the key or a new value if non-existing\n+   */\n+  <K, V> V schemaStateGetOrCreate(K key, Function<K, V> creator);\n+\n+  /**\n+   * Returns the state associated with the key or <tt>null</tt> if nothing assocated with key\n+   *\n+   * @param key The key to access\n+   * @param <K> The type of the key\n+   * @param <V> The type of the assocated value\n+   * @return The value associated with the given key or <tt>null</tt>\n+   */\n+  <K, V> V schemaStateGet(K key);\n+\n+  /**\n+   * Flush the schema state\n+   */\n+  void schemaStateFlush();\n }\n",
            "diff_size": 185
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1008/SchemaRead.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1008/SchemaRead.java\nindex 3952661a2cc..a0e4cd81d1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1008/SchemaRead.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1008/SchemaRead.java\n@@ -76,10 +76,9 @@ public interface SchemaRead\n      * @return The population progress of the given index\n      * @throws IndexNotFoundKernelException if the index was not found in the database\n      */\n-    PopulationProgress indexGetPopulationProgress( IndexReference index ) throws\n-            IndexNotFoundKernelException;\n+    PopulationProgress indexGetPopulationProgress( IndexReference index ) throws IndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Get the index id (the id or the schema rule record) for a committed index\n      * - throws exception for indexes that aren't committed.\n      */\n@@ -133,10 +132,9 @@ public interface SchemaRead\n      * @return {@code target}\n      * @throws IndexNotFoundKernelException if the index does not exist.\n      */\n-    Register.DoubleLongRegister indexUpdatesAndSize( IndexReference index, Register.DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n+    Register.DoubleLongRegister indexUpdatesAndSize( IndexReference index, Register.DoubleLongRegister target ) throws IndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Returns the last recorded size of an index, and how many updates that have been applied to the index since then.\n      *\n      * Results are written to a {@link Register.DoubleLongRegister}, writing the update count into the first long, and\n@@ -147,9 +145,9 @@ public interface SchemaRead\n      * @return {@code target}\n      * @throws IndexNotFoundKernelException if the index does not exist.\n      */\n-    Register.DoubleLongRegister indexSample( IndexReference index, Register.DoubleLongRegister target )\n-            throws IndexNotFoundKernelException;\n-    /**\n+    Register.DoubleLongRegister indexSample( IndexReference index, Register.DoubleLongRegister target ) throws IndexNotFoundKernelException;\n+\n+/**\n      * Finds all constraints for the given schema\n      *\n      * @param descriptor The descriptor of the schema\n@@ -202,7 +200,7 @@ public interface SchemaRead\n      * @param <V> type of the schema state value\n      * @return the state associated with the key or a new value if non-existing\n      */\n-    <K, V> V schemaStateGetOrCreate( K key, Function<K, V> creator );\n+    <K,V> V schemaStateGetOrCreate( K key, Function<K,V> creator );\n \n     /**\n      * Returns the state associated with the key or <tt>null</tt> if nothing assocated with key\n@@ -211,10 +209,10 @@ public interface SchemaRead\n      * @param <V> The type of the assocated value\n      * @return The value associated with the given key or <tt>null</tt>\n      */\n-    <K, V> V schemaStateGet( K key );\n+    <K,V> V schemaStateGet( K key );\n \n     /**\n      * Flush the schema state\n      */\n     void schemaStateFlush();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}