{
    "project_name": "griddynamics-jagger",
    "error_id": "86",
    "information": {
        "errors": [
            {
                "line": "67",
                "column": "9",
                "severity": "warning",
                "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "            Preconditions.checkArgument(threads >= 0);\n            Preconditions.checkArgument(delay   >= 0);\n        }\n        catch (IllegalArgumentException e) {\n            log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n            throw Throwables.propagate(e);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "67",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/86/WorkloadConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/86/WorkloadConfiguration.java\nindex c682c35b5f1..15c878b15e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/86/WorkloadConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/86/WorkloadConfiguration.java\n@@ -63,15 +63,14 @@ public class WorkloadConfiguration implements Serializable {\n     private WorkloadConfiguration(int threads, int delay, int samples, long period) {\n         try {\n             Preconditions.checkArgument(threads >= 0);\n-            Preconditions.checkArgument(delay   >= 0);\n-        }\n-        catch (IllegalArgumentException e) {\n+            Preconditions.checkArgument(delay >= 0);\n+        } catch (IllegalArgumentException e) {\n             log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n             throw Throwables.propagate(e);\n         }\n \n         this.threads = threads;\n-        this.delay   = delay;\n+        this.delay = delay;\n         this.samples = samples;\n         this.period = period;\n     }\n@@ -94,14 +93,24 @@ public class WorkloadConfiguration implements Serializable {\n \n     @Override\n     public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n \n         WorkloadConfiguration that = (WorkloadConfiguration) o;\n \n-        if (delay != that.delay) return false;\n-        if (samples != that.samples) return false;\n-        if (threads != that.threads) return false;\n+        if (delay != that.delay) {\n+            return false;\n+        }\n+        if (samples != that.samples) {\n+            return false;\n+        }\n+        if (threads != that.threads) {\n+            return false;\n+        }\n \n         return true;\n     }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/86/WorkloadConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/86/WorkloadConfiguration.java\nindex c682c35b5f1..c863aea4e1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/86/WorkloadConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/86/WorkloadConfiguration.java\n@@ -63,15 +63,14 @@ public class WorkloadConfiguration implements Serializable {\n     private WorkloadConfiguration(int threads, int delay, int samples, long period) {\n         try {\n             Preconditions.checkArgument(threads >= 0);\n-            Preconditions.checkArgument(delay   >= 0);\n-        }\n-        catch (IllegalArgumentException e) {\n+            Preconditions.checkArgument(delay >= 0);\n+        } catch (IllegalArgumentException e) {\n             log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n             throw Throwables.propagate(e);\n         }\n \n         this.threads = threads;\n-        this.delay   = delay;\n+        this.delay = delay;\n         this.samples = samples;\n         this.period = period;\n     }\n@@ -123,4 +122,4 @@ public class WorkloadConfiguration implements Serializable {\n                 \", period=\" + period +\n                 '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "67",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "column": "13",
                    "severity": "warning",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/86/WorkloadConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/86/WorkloadConfiguration.java\nindex c682c35b5f1..88f027226b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/86/WorkloadConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/styler_three_grams/86/WorkloadConfiguration.java\n@@ -64,7 +64,8 @@ public class WorkloadConfiguration implements Serializable {\n         try {\n             Preconditions.checkArgument(threads >= 0);\n             Preconditions.checkArgument(delay   >= 0);\n-        }\n+\n+            }\n         catch (IllegalArgumentException e) {\n             log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n             throw Throwables.propagate(e);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}