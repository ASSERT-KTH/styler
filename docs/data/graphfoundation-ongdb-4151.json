{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4151",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "101",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "151",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "217",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "217",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4151/StoreNodeRelationshipCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4151/StoreNodeRelationshipCursor.java\nindex 1888995502a..3321b529d9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4151/StoreNodeRelationshipCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4151/StoreNodeRelationshipCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.store;\n \n import java.util.function.Consumer;\n@@ -41,240 +42,234 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n  */\n public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n {\n-    private final RelationshipGroupRecord groupRecord;\n-    private final Consumer<StoreNodeRelationshipCursor> instanceCache;\n-    private final RecordCursors cursors;\n+  private final RelationshipGroupRecord groupRecord;\n+  private final Consumer<StoreNodeRelationshipCursor> instanceCache;\n+  private final RecordCursors cursors;\n \n-    // Reset all this state on init()\n-    // --------\n-    private boolean isDense;\n-    private long relationshipId;\n-    private long fromNodeId;\n-    private Direction direction;\n-    private IntPredicate allowedTypes;\n-    private int groupChainIndex;\n-    private boolean end;\n-    // --------\n+  // Reset all this state on init()\n+  // --------\n+  private boolean isDense;\n+  private long relationshipId;\n+  private long fromNodeId;\n+  private Direction direction;\n+  private IntPredicate allowedTypes;\n+  private int groupChainIndex;\n+  private boolean end;\n+  // --------\n \n-    public StoreNodeRelationshipCursor( RelationshipRecord relationshipRecord,\n-            RelationshipGroupRecord groupRecord,\n-            Consumer<StoreNodeRelationshipCursor> instanceCache,\n-            RecordCursors cursors,\n-            LockService lockService )\n-    {\n-        super( relationshipRecord, cursors, lockService );\n-        this.groupRecord = groupRecord;\n-        this.instanceCache = instanceCache;\n-        this.cursors = cursors;\n-    }\n+  public StoreNodeRelationshipCursor(RelationshipRecord relationshipRecord,\n+                                     RelationshipGroupRecord groupRecord,\n+                                     Consumer<StoreNodeRelationshipCursor> instanceCache,\n+                                     RecordCursors cursors,\n+                                     LockService lockService)\n+  {\n+    super(relationshipRecord, cursors, lockService);\n+    this.groupRecord = groupRecord;\n+    this.instanceCache = instanceCache;\n+    this.cursors = cursors;\n+  }\n \n-    public StoreNodeRelationshipCursor init( boolean isDense,\n-            long firstRelId,\n-            long fromNodeId,\n-            Direction direction,\n-            IntPredicate allowedTypes )\n-    {\n-        this.isDense = isDense;\n-        this.relationshipId = firstRelId;\n-        this.fromNodeId = fromNodeId;\n-        this.direction = direction;\n-        this.allowedTypes = allowedTypes;\n-        this.groupChainIndex = 0;\n-        this.end = false;\n+  public StoreNodeRelationshipCursor init(boolean isDense,\n+                                          long firstRelId,\n+                                          long fromNodeId,\n+                                          Direction direction,\n+                                          IntPredicate allowedTypes)\n+  {\n+    this.isDense = isDense;\n+    this.relationshipId = firstRelId;\n+    this.fromNodeId = fromNodeId;\n+    this.direction = direction;\n+    this.allowedTypes = allowedTypes;\n+    this.groupChainIndex = 0;\n+    this.end = false;\n \n-        if ( isDense && relationshipId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {\n-            cursors.relationshipGroup().next( firstRelId, groupRecord, FORCE );\n-            relationshipId = nextChainStart();\n-        }\n-        else\n-        {\n-            relationshipId = firstRelId;\n-        }\n-\n-        return this;\n-    }\n-\n-    @Override\n-    public boolean next()\n+    if (isDense && relationshipId != Record.NO_NEXT_RELATIONSHIP.intValue())\n     {\n-        while ( relationshipId != NO_NEXT_RELATIONSHIP.intValue() )\n-        {\n-            relationshipRecordCursor.next( relationshipId, relationshipRecord, FORCE );\n-\n-            // If we end up on a relationship record that isn't in use there's a good chance there\n-            // have been a concurrent transaction deleting this record under our feet. Since we don't\n-            // reuse relationship ids we can still trust the pointers in this unused record and try\n-            // to chase a used record down the line.\n-            try\n-            {\n-                // Direction check\n-                if ( relationshipRecord.inUse() )\n-                {\n-                    if ( direction != Direction.BOTH )\n-                    {\n-                        switch ( direction )\n-                        {\n-                        case INCOMING:\n-                        {\n-                            if ( relationshipRecord.getSecondNode() != fromNodeId )\n-                            {\n-                                continue;\n-                            }\n-                            break;\n-                        }\n+      cursors.relationshipGroup().next(firstRelId, groupRecord, FORCE);\n+      relationshipId = nextChainStart();\n+    } else\n+    {\n+      relationshipId = firstRelId;\n+    }\n \n-                        case OUTGOING:\n-                        {\n-                            if ( relationshipRecord.getFirstNode() != fromNodeId )\n-                            {\n-                                continue;\n-                            }\n-                            break;\n-                        }\n+    return this;\n+  }\n \n-                        default:\n-                            throw new IllegalStateException( \"Unknown direction: \" + direction );\n-                        }\n-                    }\n+  @Override\n+  public boolean next()\n+  {\n+    while (relationshipId != NO_NEXT_RELATIONSHIP.intValue())\n+    {\n+      relationshipRecordCursor.next(relationshipId, relationshipRecord, FORCE);\n \n-                    // Type check\n-                    if ( !allowedTypes.test( relationshipRecord.getType() ) )\n-                    {\n-                        continue;\n-                    }\n-                    return true;\n-                }\n-            }\n-            finally\n+      // If we end up on a relationship record that isn't in use there's a good chance there\n+      // have been a concurrent transaction deleting this record under our feet. Since we don't\n+      // reuse relationship ids we can still trust the pointers in this unused record and try\n+      // to chase a used record down the line.\n+      try\n+      {\n+        // Direction check\n+        if (relationshipRecord.inUse())\n+        {\n+          if (direction != Direction.BOTH)\n+          {\n+            switch (direction)\n             {\n-                // Pick next relationship\n-                if ( relationshipRecord.getFirstNode() == fromNodeId )\n-                {\n-                    relationshipId = relationshipRecord.getFirstNextRel();\n-                }\n-                else if ( relationshipRecord.getSecondNode() == fromNodeId )\n+              case INCOMING:\n+              {\n+                if (relationshipRecord.getSecondNode() != fromNodeId)\n                 {\n-                    relationshipId = relationshipRecord.getSecondNextRel();\n-                }\n-                else\n-                {\n-                    throw new InvalidRecordException(\n-                            \"While loading relationships for Node[\" + fromNodeId + \"] a Relationship[\" +\n-                                    relationshipRecord.getId() + \"] was encountered that had startNode:\" + \" \" +\n-                                    relationshipRecord.getFirstNode() + \" and endNode: \" +\n-                                    relationshipRecord.getSecondNode() + \", i.e. which had neither start nor end node \" +\n-                                    \"as the node we're loading relationships for\" );\n+                  continue;\n                 }\n+                break;\n+              }\n \n-                // If there are no more relationships, and this is from a dense node, then\n-                // traverse the next group\n-                if ( relationshipId == NO_NEXT_RELATIONSHIP.intValue() && isDense )\n+              case OUTGOING:\n+              {\n+                if (relationshipRecord.getFirstNode() != fromNodeId)\n                 {\n-                    relationshipId = nextChainStart();\n+                  continue;\n                 }\n+                break;\n+              }\n+\n+              default:\n+                throw new IllegalStateException(\"Unknown direction: \" + direction);\n             }\n+          }\n+\n+          // Type check\n+          if (!allowedTypes.test(relationshipRecord.getType()))\n+          {\n+            continue;\n+          }\n+          return true;\n+        }\n+      } finally\n+      {\n+        // Pick next relationship\n+        if (relationshipRecord.getFirstNode() == fromNodeId)\n+        {\n+          relationshipId = relationshipRecord.getFirstNextRel();\n+        } else if (relationshipRecord.getSecondNode() == fromNodeId)\n+        {\n+          relationshipId = relationshipRecord.getSecondNextRel();\n+        } else\n+        {\n+          throw new InvalidRecordException(\n+              \"While loading relationships for Node[\" + fromNodeId + \"] a Relationship[\" +\n+                  relationshipRecord.getId() + \"] was encountered that had startNode:\" + \" \" +\n+                  relationshipRecord.getFirstNode() + \" and endNode: \" +\n+                  relationshipRecord.getSecondNode() + \", i.e. which had neither start nor end node \" +\n+                  \"as the node we're loading relationships for\");\n         }\n \n-        return false;\n+        // If there are no more relationships, and this is from a dense node, then\n+        // traverse the next group\n+        if (relationshipId == NO_NEXT_RELATIONSHIP.intValue() && isDense)\n+        {\n+          relationshipId = nextChainStart();\n+        }\n+      }\n     }\n \n-    @Override\n-    public void close()\n-    {\n-        instanceCache.accept( this );\n-    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    instanceCache.accept(this);\n+  }\n \n-    private long nextChainStart()\n+  private long nextChainStart()\n+  {\n+    try\n     {\n-        try\n+      while (!end)\n+      {\n+        // We check inUse flag here since we can actually follow pointers in unused records\n+        // to guard for and overcome concurrent deletes in the relationship group chain\n+        if (groupRecord.inUse() && allowedTypes.test(groupRecord.getType()))\n         {\n-            while ( !end )\n+          // Go to the next chain (direction) within this group\n+          while (groupChainIndex < GROUP_CHAINS.length)\n+          {\n+            GroupChain groupChain = GROUP_CHAINS[groupChainIndex++];\n+            long chainStart = groupChain.chainStart(groupRecord);\n+            if (!NULL_REFERENCE.is(chainStart)\n+                && (direction == Direction.BOTH || groupChain.matchesDirection(direction)))\n             {\n-                // We check inUse flag here since we can actually follow pointers in unused records\n-                // to guard for and overcome concurrent deletes in the relationship group chain\n-                if ( groupRecord.inUse() && allowedTypes.test( groupRecord.getType() ) )\n-                {\n-                    // Go to the next chain (direction) within this group\n-                    while ( groupChainIndex < GROUP_CHAINS.length )\n-                    {\n-                        GroupChain groupChain = GROUP_CHAINS[groupChainIndex++];\n-                        long chainStart = groupChain.chainStart( groupRecord );\n-                        if ( !NULL_REFERENCE.is( chainStart )\n-                             && (direction == Direction.BOTH || groupChain.matchesDirection( direction )) )\n-                        {\n-                            return chainStart;\n-                        }\n-                    }\n-                }\n-                // Go to the next group\n-                if ( !NULL_REFERENCE.is( groupRecord.getNext() ) )\n-                {\n-                    cursors.relationshipGroup().next( groupRecord.getNext(), groupRecord, FORCE );\n-                }\n-                else\n-                {\n-                    end = true;\n-                }\n-                groupChainIndex = 0;\n+              return chainStart;\n             }\n+          }\n         }\n-        catch ( InvalidRecordException e )\n+        // Go to the next group\n+        if (!NULL_REFERENCE.is(groupRecord.getNext()))\n+        {\n+          cursors.relationshipGroup().next(groupRecord.getNext(), groupRecord, FORCE);\n+        } else\n         {\n-            // Ignore - next line will ensure we're finished anyway\n+          end = true;\n         }\n-        return NULL_REFERENCE.intValue();\n+        groupChainIndex = 0;\n+      }\n+    } catch (InvalidRecordException e)\n+    {\n+      // Ignore - next line will ensure we're finished anyway\n     }\n+    return NULL_REFERENCE.intValue();\n+  }\n \n-    private enum GroupChain\n-    {\n-        OUT\n-                {\n-                    @Override\n-                    long chainStart( RelationshipGroupRecord groupRecord )\n-                    {\n-                        return groupRecord.getFirstOut();\n-                    }\n+  private enum GroupChain\n+  {\n+    OUT\n+        {\n+          @Override\n+          long chainStart(RelationshipGroupRecord groupRecord)\n+          {\n+            return groupRecord.getFirstOut();\n+          }\n \n-                    @Override\n-                    boolean matchesDirection( Direction direction )\n-                    {\n-                        return direction == Direction.OUTGOING;\n-                    }\n-                },\n-        IN\n-                {\n-                    @Override\n-                    long chainStart( RelationshipGroupRecord groupRecord )\n-                    {\n-                        return groupRecord.getFirstIn();\n-                    }\n+          @Override\n+          boolean matchesDirection(Direction direction)\n+          {\n+            return direction == Direction.OUTGOING;\n+          }\n+        },\n+    IN\n+        {\n+          @Override\n+          long chainStart(RelationshipGroupRecord groupRecord)\n+          {\n+            return groupRecord.getFirstIn();\n+          }\n \n-                    @Override\n-                    boolean matchesDirection( Direction direction )\n-                    {\n-                        return direction == Direction.INCOMING;\n-                    }\n-                },\n-        LOOP\n-                {\n-                    @Override\n-                    long chainStart( RelationshipGroupRecord groupRecord )\n-                    {\n-                        return groupRecord.getFirstLoop();\n-                    }\n+          @Override\n+          boolean matchesDirection(Direction direction)\n+          {\n+            return direction == Direction.INCOMING;\n+          }\n+        },\n+    LOOP\n+        {\n+          @Override\n+          long chainStart(RelationshipGroupRecord groupRecord)\n+          {\n+            return groupRecord.getFirstLoop();\n+          }\n \n-                    @Override\n-                    boolean matchesDirection( Direction direction )\n-                    {\n-                        return true;\n-                    }\n-                };\n+          @Override\n+          boolean matchesDirection(Direction direction)\n+          {\n+            return true;\n+          }\n+        };\n \n-        abstract long chainStart( RelationshipGroupRecord groupRecord );\n+    abstract long chainStart(RelationshipGroupRecord groupRecord);\n \n-        abstract boolean matchesDirection( Direction direction );\n-    }\n+    abstract boolean matchesDirection(Direction direction);\n+  }\n \n-    private static final GroupChain[] GROUP_CHAINS = GroupChain.values();\n+  private static final GroupChain[] GROUP_CHAINS = GroupChain.values();\n }\n",
            "diff_size": 272
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 397).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "column": "62",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4151/StoreNodeRelationshipCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4151/StoreNodeRelationshipCursor.java\nindex 1888995502a..107cc17a2f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4151/StoreNodeRelationshipCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4151/StoreNodeRelationshipCursor.java\n@@ -57,8 +57,7 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n     // --------\n \n     public StoreNodeRelationshipCursor( RelationshipRecord relationshipRecord,\n-            RelationshipGroupRecord groupRecord,\n-            Consumer<StoreNodeRelationshipCursor> instanceCache,\n+            RelationshipGroupRecord groupRecord, Consumer<StoreNodeRelationshipCursor> instanceCache,\n             RecordCursors cursors,\n             LockService lockService )\n     {\n@@ -123,8 +122,7 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                             }\n                             break;\n                         }\n-\n-                        case OUTGOING:\n+    case OUTGOING:\n                         {\n                             if ( relationshipRecord.getFirstNode() != fromNodeId )\n                             {\n@@ -132,8 +130,7 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                             }\n                             break;\n                         }\n-\n-                        default:\n+    default:\n                             throw new IllegalStateException( \"Unknown direction: \" + direction );\n                         }\n                     }\n@@ -159,13 +156,8 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                 }\n                 else\n                 {\n-                    throw new InvalidRecordException(\n-                            \"While loading relationships for Node[\" + fromNodeId + \"] a Relationship[\" +\n-                                    relationshipRecord.getId() + \"] was encountered that had startNode:\" + \" \" +\n-                                    relationshipRecord.getFirstNode() + \" and endNode: \" +\n-                                    relationshipRecord.getSecondNode() + \", i.e. which had neither start nor end node \" +\n-                                    \"as the node we're loading relationships for\" );\n-                }\n+                    throw new InvalidRecordException( \"While loading relationships for Node[\" + fromNodeId + \"] a Relationship[\" + relationshipRecord.getId() + \"] was encountered that had startNode:\" + \" \" + relationshipRecord.getFirstNode() + \" and endNode: \" + relationshipRecord.getSecondNode() + \", i.e. which had neither start nor end node \" + \"as the node we're loading relationships for\" );\n+    }\n \n                 // If there are no more relationships, and this is from a dense node, then\n                 // traverse the next group\n@@ -200,9 +192,8 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                     {\n                         GroupChain groupChain = GROUP_CHAINS[groupChainIndex++];\n                         long chainStart = groupChain.chainStart( groupRecord );\n-                        if ( !NULL_REFERENCE.is( chainStart )\n-                             && (direction == Direction.BOTH || groupChain.matchesDirection( direction )) )\n-                        {\n+                        if ( !NULL_REFERENCE.is( chainStart )&& ( direction == Direction.BOTH || groupChain.matchesDirection( direction )) )\n+{\n                             return chainStart;\n                         }\n                     }\n@@ -216,20 +207,22 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                 {\n                     end = true;\n                 }\n-                groupChainIndex = 0;\n+\n+groupChainIndex = 0;\n             }\n         }\n         catch ( InvalidRecordException e )\n         {\n             // Ignore - next line will ensure we're finished anyway\n         }\n-        return NULL_REFERENCE.intValue();\n+\n+return NULL_REFERENCE.intValue();\n     }\n \n     private enum GroupChain\n     {\n         OUT\n-                {\n+{\n                     @Override\n                     long chainStart( RelationshipGroupRecord groupRecord )\n                     {\n@@ -241,9 +234,8 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                     {\n                         return direction == Direction.OUTGOING;\n                     }\n-                },\n-        IN\n-                {\n+                }, IN\n+{\n                     @Override\n                     long chainStart( RelationshipGroupRecord groupRecord )\n                     {\n@@ -255,9 +247,8 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                     {\n                         return direction == Direction.INCOMING;\n                     }\n-                },\n-        LOOP\n-                {\n+                }, LOOP\n+{\n                     @Override\n                     long chainStart( RelationshipGroupRecord groupRecord )\n                     {\n@@ -271,10 +262,10 @@ public class StoreNodeRelationshipCursor extends StoreAbstractRelationshipCursor\n                     }\n                 };\n \n-        abstract long chainStart( RelationshipGroupRecord groupRecord );\n+abstract long chainStart( RelationshipGroupRecord groupRecord );\n \n         abstract boolean matchesDirection( Direction direction );\n     }\n \n     private static final GroupChain[] GROUP_CHAINS = GroupChain.values();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}