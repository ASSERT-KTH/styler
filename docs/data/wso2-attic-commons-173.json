{
    "project_name": "wso2-attic-commons",
    "error_id": "173",
    "information": {
        "errors": [
            {
                "line": "217",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t * @return\n\t */\n\tpublic static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm, Parameter serviceConfigMEXParm){\n\t\t\n\t\tif (axisConfigMEXParm == null && serviceConfigMEXParm == null){\n\t\t\treturn allSupportedOutputForms();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/173/MexUtil.java\nindex 37604e1d3fd..56b3ed8fefc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/173/MexUtil.java\n@@ -215,7 +215,6 @@ public class MexUtil {\n \t * @return\n \t */\n \tpublic static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm, Parameter serviceConfigMEXParm){\n-\t\t\n \t\tif (axisConfigMEXParm == null && serviceConfigMEXParm == null){\n \t\t\treturn allSupportedOutputForms();\n \t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/173/MexUtil.java\nindex 37604e1d3fd..3246fce074b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/173/MexUtil.java\n@@ -43,252 +43,260 @@ import org.wso2.mex.MexException;\n import org.wso2.mex.om.Metadata;\n \n public class MexUtil {\n-\tprivate static final Log log = LogFactory.getLog(MexUtil.class);\n-\t/**\n-\t * Answer SOAPVersion for specified envelope\n-\t * @param envelope SOAP Envelope\n-\t * @return version of SOAP\n-\t * @throws MexException\n-\t */\n-\tpublic static int getSOAPVersion(SOAPEnvelope envelope) throws MexException {\n-\t\tString namespaceName = envelope.getNamespace().getNamespaceURI();\n-\t\tif (namespaceName.equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI))\n-\t\t\treturn MexConstants.SOAPVersion.v1_1;\n-\t\telse if (namespaceName.equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI))\n-\t\t\treturn MexConstants.SOAPVersion.v1_2;\n-\t\telse\n-\t\t\tthrow new MexException(\"Unknown SOAP version\");\n-\t}\n-\n-\t/**\n-\t * Answer SOAPFactory corresponding to specified SOAP namespace URI\n-\t * @param soapNameSpaceURI soap namespace uri\n-\t * @return\n-\t * @throws MexException\n-\t */\n-\tpublic static SOAPFactory getSOAPFactory(String soapNameSpaceURI) throws MexException {\n-\t\t\tif (soapNameSpaceURI.equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI))\n-\t\t\treturn  OMAbstractFactory.getSOAP11Factory();\n-\t\telse if (soapNameSpaceURI.equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI))\n-\t\t\treturn OMAbstractFactory.getSOAP12Factory();\n-\t\telse\n-\t\t\tthrow new MexException(\"Unknown SOAP soapNameSpaceURI\");\n-\t}\n-\n-\t/**\n-\t * Answers SOAPFactory corresponding to specified SOAP Version\n-\t * @param SOAPVersion SOAP version\n-\t * @return SOAPFactory\n-\t */\n-\tpublic static SOAPFactory getSOAPFactory(int SOAPVersion) {\n-\n-\t\tif (SOAPVersion == MexConstants.SOAPVersion.v1_1)\n-\t\t\treturn OMAbstractFactory.getSOAP11Factory();\n-\t\telse\n-\t\t\treturn OMAbstractFactory.getSOAP12Factory();\n-\n-\t}\n-\t\n-\t\n-\t// Return all supported output forms\n-\tpublic static OutputForm[] allSupportedOutputForms(){\n-\t\tOutputForm[]outputforms = new OutputForm[] {\n-\t\tOutputForm.INLINE_FORM,\n-\t\tOutputForm.LOCATION_FORM, \n-\t\tOutputForm.REFERENCE_FORM};\n-\t\treturn outputforms;\n-\t}\n-\t\n-\t public static Metadata fromEPR(EndpointReference epr) throws MexException {\n-\t\tArrayList eprMetdata = epr.getMetaData();\n-\t\tOMElement mexElement = null;\n-\t\tMetadata metadata = null;\n-\t\tif (eprMetdata != null) {\n-\t\t\tmexElement = (OMElement) eprMetdata.get(0);\n-\t\t} else {\n-\t\t\tArrayList refParm = epr.getExtensibleElements();\n-\t\t\tif (refParm != null) {\n-\t\t\t\tfor (int i = 0; i < refParm.size(); i++) {\n-\t\t\t\t\tOMElement elem = (OMElement) refParm.get(i);\n-\t\t\t\t\tif (elem.getLocalName().equals(MexConstants.SPEC.METADATA)) {\n-\t\t\t\t\t\tmexElement = elem;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tif (mexElement != null)\n-\t\t\tmetadata = fromOM(mexElement, MexConstants.Spec_2004_09.NS_URI);\n-\t\treturn metadata;\n-\t}\t\n-\t \n-\t/**\n-\t * Answers WS-Addressing namespace\n-\t * \n-\t * @param toAddress\n-\t *            To Address element\n-\t * @return OMNamespaceImpl WS-Addressing namespace\n-\t * @throws AxisFault\n-\t */\n-\t\n-\t public static OMNamespaceImpl getAddressingNameSpace(OMElement toAddress)\n-\t\t\tthrows MexException {\n-\t\tOMFactory factory = OMAbstractFactory.getOMFactory();\n-\t\tOMNamespaceImpl wsa = null;\n-\t\ttry {\n-\t\t\tString prefix = toAddress.getNamespace().getPrefix();\n-\t\t\tString nsURI = toAddress.getNamespace().getNamespaceURI();\n-\t\t\twsa = (OMNamespaceImpl) factory.createOMNamespace(nsURI, prefix);\n-\t\t} catch (Exception e) {\n-\t\t    throw new MexException(e);\n-\t\t}\n-\t\treturn wsa;\n-\n-\t}\n-\n-       /**\n-\t * API to map mex:Metadata element to a Metadata object representation. Data validation will \n-\t * be performed on omElement content. See {@link Metadata} for APIs to access metadata section.\n-\t * \n-\t * @param omElement an element such as endpoint reference type that contains mex:Metadata or\n-\t *                  an mex:Metadata element \n-\t * @return Metadata object representation of mex:Metadata element passed.\n-\t * @throws MexException if invalid mex:Metadata element content is detected \n-\t */ \n-\n-\t \n-    public static Metadata fromOM(OMElement omElement) throws MexException{\n-\t      Metadata metadata = fromOM(omElement, MexConstants.Spec_2004_09.NS_URI);\n-\t      return metadata;\n-\t}\t\n-\t\n-        /**\n-\t * API to map mex:Metadata element to a Metadata object representation. Data validation will \n-\t * be performed on omElement content. See {@link Metadata} for APIs to access metadata section.\n-\t * \n-\t * @param omElement an element such as endpoint reference type that contains mex:Metadata or\n-\t *                  an mex:Metadata element \n-\t * @param mexNamespaceValue  the namespace of the WS-MEX spec to comply with.\n-\t * @return Metadata object representation of mex:Metadata element passed.\n-\t * @throws MexException if invalid mex:Metadata element content is detected \n-\t */ \t\n-\tpublic static Metadata fromOM(OMElement omElement, String mexNamespaceValue) throws MexException{\n-\t\t\n-\t\tSOAPFactory factory = MexUtil.getSOAPFactory(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\n-\t\tMetadata metadata = new Metadata(factory, mexNamespaceValue);\n-\t\tmetadata = metadata.fromOM(omElement);\n-\t\treturn metadata;\n-\t}\n-\t\n-\n-       \n-    /**\n-\t * Check if metadata exchange has been disabled for a service. \n-\t * @param serviceConfigMEXParm metadataexchange configured in services.xml\n-\t * @return\n-\t */\n-\tpublic static boolean isMexDisabled(Parameter serviceConfigMEXParm) {\n-\t\tboolean disabled = false;\n-\t\tif (serviceConfigMEXParm != null) {\n-\t\t\tOMElement mexConfig = serviceConfigMEXParm.getParameterElement();\n-\t\t\tString disable = mexConfig.getAttributeValue(new QName(\n-\t\t\t\t\tMexConstants.MEX_CONFIG.ENABLE_MEX));\n-\t\t\tif (disable != null && disable.equals(\"false\"))\n-\t\t\t\tdisabled = true;\n-\t\t}\n-\t\treturn disabled;\n-\t}\n-\t\n-\t/**\n-\t * Determine output forms for specified dialect based on \"metadataexchange\" configured in \n-\t * axis2.xml and services.xml.\n-\t * The order of precedence in determining  output form configured:  \n-\t *   a. dialect specific at service level.\n-\t *   b. service level  i.e. without dialect attribute specified\n-\t *   c. dialect specific at global level i,e, configured in axis2.xml\n-\t *   d. service level  i.e. without dialect attribute specified\n-\t *   e. default output forms to all: inline, location, reference\n-\t *   \n-\t * @param dialect\n-\t * @param axisConfigMEXParm \"metadataexchange\" parameter configured in axis2.xml\n-\t * @param serviceConfigMEXParm  \"metadataexchange\" parameter configured in services.xml\n-\t * @return\n-\t */\n-\tpublic static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm, Parameter serviceConfigMEXParm){\n-\t\t\n-\t\tif (axisConfigMEXParm == null && serviceConfigMEXParm == null){\n-\t\t\treturn allSupportedOutputForms();\n-\t\t}\n-\t    OutputForm[] outputform = new OutputForm[0];\n-\t    outputform = determineOutputForm(dialect, serviceConfigMEXParm);\n-\t    \n-\t    if (outputform.length == 0) { // output form not configured in service level config\n-\t    \toutputform = determineOutputForm(dialect, axisConfigMEXParm);\n-\t    }\n-\t\t\n-\t    if (outputform.length == 0){\n-\t    \tlog.debug(\"No outputform configured, use default output forms\");\n-\t    \toutputform = allSupportedOutputForms();\n-\t    }\n-\t\treturn outputform;\n-\t}\n-\t\n-\t\n-\tprivate static OutputForm[] determineOutputForm(String dialect, Parameter mexParm) {\n-\t\tOutputForm[] forms = new OutputForm[0];\n-\t\tif (mexParm == null)\n-\t\t\treturn forms;\n-\t\t\n-\t\tOMElement mexConfig = mexParm.getParameterElement();\n-\t\tIterator ite = mexConfig.getChildrenWithName(new QName(\n-\t\t\t\tMexConstants.MEX_CONFIG.OUTPUT_FORM_PARM));\n-\t\tString dialectForm_configured = null;\n-\t\tString serviceForm_configured = null;\n-\t\twhile (ite.hasNext()) {\n-\t\t\tOMElement elem = (OMElement) ite.next();\n-\t\t\tString form_value = elem.getAttributeValue(new QName(\n-\t\t\t\t\tMexConstants.MEX_CONFIG.FORMS_PARM));\n-\t\t\tString dialect_value = elem.getAttributeValue(new QName(\n-\t\t\t\t\tMexConstants.MEX_CONFIG.DIALECT_PARM));\n-\t\t\tif (dialect_value == null){\n-\t\t\t\tserviceForm_configured = form_value;\n-\t\t\t}\t\n-\t\t\telse if (dialect_value != null\n-\t\t\t\t\t&& dialect_value.equals(dialect)) {\n-\t\t\t\tdialectForm_configured = form_value;\n-\t\t\t}\t\n-\t     }\n-\t\t\t\n-\t\tif (dialectForm_configured != null){\n-\t\t\tforms = parseForms(dialectForm_configured);\n-\t\t}\n-\t\telse if (serviceForm_configured != null){\n-\t\t\tforms = parseForms(serviceForm_configured);\n-\t\t}\n-\t\t\n-\t\treturn forms;\n-\t}\t\n-\t\n-\t\n-\tprivate static OutputForm[] parseForms(String form_values) {\n-\t\tList forms = new ArrayList();\n-\t\tStringTokenizer st = new StringTokenizer(form_values,\n-\t\t\t\tMexConstants.MEX_CONFIG.DELIMITER);\n-\t\twhile (st.hasMoreTokens()) {\n-\t\t\tString token = st.nextToken();\n-\t\t\tif (token.equals(MexConstants.MEX_CONFIG.INLINE))\n-\t\t\t\tforms.add(OutputForm.INLINE_FORM);\n-\t\t\telse if (token.equals(MexConstants.MEX_CONFIG.LOCATION))\n-\t\t\t\tforms.add(OutputForm.LOCATION_FORM);\n-\t\t\telse if (token.equals(MexConstants.MEX_CONFIG.REFERENCE))\n-\t\t\t\tforms.add(OutputForm.REFERENCE_FORM);\n-\t\t\telse {\n-              log.debug(\"Invalid form configured, \" + form_values);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\treturn (OutputForm[]) forms.toArray(new OutputForm[0]);\n-\t}\n+  private static final Log log = LogFactory.getLog(MexUtil.class);\n+\n+  /**\n+   * Answer SOAPVersion for specified envelope\n+   *\n+   * @param envelope SOAP Envelope\n+   * @return version of SOAP\n+   * @throws MexException\n+   */\n+  public static int getSOAPVersion(SOAPEnvelope envelope) throws MexException {\n+    String namespaceName = envelope.getNamespace().getNamespaceURI();\n+    if (namespaceName.equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {\n+      return MexConstants.SOAPVersion.v1_1;\n+    } else if (namespaceName.equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {\n+      return MexConstants.SOAPVersion.v1_2;\n+    } else {\n+      throw new MexException(\"Unknown SOAP version\");\n+    }\n+  }\n+\n+  /**\n+   * Answer SOAPFactory corresponding to specified SOAP namespace URI\n+   *\n+   * @param soapNameSpaceURI soap namespace uri\n+   * @return\n+   * @throws MexException\n+   */\n+  public static SOAPFactory getSOAPFactory(String soapNameSpaceURI) throws MexException {\n+    if (soapNameSpaceURI.equals(SOAP11Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {\n+      return OMAbstractFactory.getSOAP11Factory();\n+    } else if (soapNameSpaceURI.equals(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI)) {\n+      return OMAbstractFactory.getSOAP12Factory();\n+    } else {\n+      throw new MexException(\"Unknown SOAP soapNameSpaceURI\");\n+    }\n+  }\n+\n+  /**\n+   * Answers SOAPFactory corresponding to specified SOAP Version\n+   *\n+   * @param SOAPVersion SOAP version\n+   * @return SOAPFactory\n+   */\n+  public static SOAPFactory getSOAPFactory(int SOAPVersion) {\n+\n+    if (SOAPVersion == MexConstants.SOAPVersion.v1_1) {\n+      return OMAbstractFactory.getSOAP11Factory();\n+    } else {\n+      return OMAbstractFactory.getSOAP12Factory();\n+    }\n+\n+  }\n+\n+\n+  // Return all supported output forms\n+  public static OutputForm[] allSupportedOutputForms() {\n+    OutputForm[] outputforms = new OutputForm[] {\n+      OutputForm.INLINE_FORM,\n+      OutputForm.LOCATION_FORM,\n+      OutputForm.REFERENCE_FORM};\n+    return outputforms;\n+  }\n+\n+  public static Metadata fromEPR(EndpointReference epr) throws MexException {\n+    ArrayList eprMetdata = epr.getMetaData();\n+    OMElement mexElement = null;\n+    Metadata metadata = null;\n+    if (eprMetdata != null) {\n+      mexElement = (OMElement) eprMetdata.get(0);\n+    } else {\n+      ArrayList refParm = epr.getExtensibleElements();\n+      if (refParm != null) {\n+        for (int i = 0; i < refParm.size(); i++) {\n+          OMElement elem = (OMElement) refParm.get(i);\n+          if (elem.getLocalName().equals(MexConstants.SPEC.METADATA)) {\n+            mexElement = elem;\n+            break;\n+          }\n+        }\n+      }\n+    }\n+    if (mexElement != null) {\n+      metadata = fromOM(mexElement, MexConstants.Spec_2004_09.NS_URI);\n+    }\n+    return metadata;\n+  }\n+\n+  /**\n+   * Answers WS-Addressing namespace\n+   *\n+   * @param toAddress To Address element\n+   * @return OMNamespaceImpl WS-Addressing namespace\n+   * @throws AxisFault\n+   */\n+\n+  public static OMNamespaceImpl getAddressingNameSpace(OMElement toAddress)\n+    throws MexException {\n+    OMFactory factory = OMAbstractFactory.getOMFactory();\n+    OMNamespaceImpl wsa = null;\n+    try {\n+      String prefix = toAddress.getNamespace().getPrefix();\n+      String nsURI = toAddress.getNamespace().getNamespaceURI();\n+      wsa = (OMNamespaceImpl) factory.createOMNamespace(nsURI, prefix);\n+    } catch (Exception e) {\n+      throw new MexException(e);\n+    }\n+    return wsa;\n+\n+  }\n+\n+  /**\n+   * API to map mex:Metadata element to a Metadata object representation. Data validation will\n+   * be performed on omElement content. See {@link Metadata} for APIs to access metadata section.\n+   *\n+   * @param omElement an element such as endpoint reference type that contains mex:Metadata or\n+   *                  an mex:Metadata element\n+   * @return Metadata object representation of mex:Metadata element passed.\n+   * @throws MexException if invalid mex:Metadata element content is detected\n+   */\n+\n+\n+  public static Metadata fromOM(OMElement omElement) throws MexException {\n+    Metadata metadata = fromOM(omElement, MexConstants.Spec_2004_09.NS_URI);\n+    return metadata;\n+  }\n+\n+  /**\n+   * API to map mex:Metadata element to a Metadata object representation. Data validation will\n+   * be performed on omElement content. See {@link Metadata} for APIs to access metadata section.\n+   *\n+   * @param omElement         an element such as endpoint reference type that contains mex:Metadata or\n+   *                          an mex:Metadata element\n+   * @param mexNamespaceValue the namespace of the WS-MEX spec to comply with.\n+   * @return Metadata object representation of mex:Metadata element passed.\n+   * @throws MexException if invalid mex:Metadata element content is detected\n+   */\n+  public static Metadata fromOM(OMElement omElement, String mexNamespaceValue) throws MexException {\n+\n+    SOAPFactory factory = MexUtil.getSOAPFactory(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);\n+    Metadata metadata = new Metadata(factory, mexNamespaceValue);\n+    metadata = metadata.fromOM(omElement);\n+    return metadata;\n+  }\n+\n+\n+  /**\n+   * Check if metadata exchange has been disabled for a service.\n+   *\n+   * @param serviceConfigMEXParm metadataexchange configured in services.xml\n+   * @return\n+   */\n+  public static boolean isMexDisabled(Parameter serviceConfigMEXParm) {\n+    boolean disabled = false;\n+    if (serviceConfigMEXParm != null) {\n+      OMElement mexConfig = serviceConfigMEXParm.getParameterElement();\n+      String disable = mexConfig.getAttributeValue(new QName(\n+        MexConstants.MEX_CONFIG.ENABLE_MEX));\n+      if (disable != null && disable.equals(\"false\")) {\n+        disabled = true;\n+      }\n+    }\n+    return disabled;\n+  }\n+\n+  /**\n+   * Determine output forms for specified dialect based on \"metadataexchange\" configured in\n+   * axis2.xml and services.xml.\n+   * The order of precedence in determining  output form configured:\n+   * a. dialect specific at service level.\n+   * b. service level  i.e. without dialect attribute specified\n+   * c. dialect specific at global level i,e, configured in axis2.xml\n+   * d. service level  i.e. without dialect attribute specified\n+   * e. default output forms to all: inline, location, reference\n+   *\n+   * @param dialect\n+   * @param axisConfigMEXParm    \"metadataexchange\" parameter configured in axis2.xml\n+   * @param serviceConfigMEXParm \"metadataexchange\" parameter configured in services.xml\n+   * @return\n+   */\n+  public static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm,\n+                                                 Parameter serviceConfigMEXParm) {\n+\n+    if (axisConfigMEXParm == null && serviceConfigMEXParm == null) {\n+      return allSupportedOutputForms();\n+    }\n+    OutputForm[] outputform = new OutputForm[0];\n+    outputform = determineOutputForm(dialect, serviceConfigMEXParm);\n+\n+    if (outputform.length == 0) { // output form not configured in service level config\n+      outputform = determineOutputForm(dialect, axisConfigMEXParm);\n+    }\n+\n+    if (outputform.length == 0) {\n+      log.debug(\"No outputform configured, use default output forms\");\n+      outputform = allSupportedOutputForms();\n+    }\n+    return outputform;\n+  }\n+\n+\n+  private static OutputForm[] determineOutputForm(String dialect, Parameter mexParm) {\n+    OutputForm[] forms = new OutputForm[0];\n+    if (mexParm == null) {\n+      return forms;\n+    }\n+\n+    OMElement mexConfig = mexParm.getParameterElement();\n+    Iterator ite = mexConfig.getChildrenWithName(new QName(\n+      MexConstants.MEX_CONFIG.OUTPUT_FORM_PARM));\n+    String dialectForm_configured = null;\n+    String serviceForm_configured = null;\n+    while (ite.hasNext()) {\n+      OMElement elem = (OMElement) ite.next();\n+      String form_value = elem.getAttributeValue(new QName(\n+        MexConstants.MEX_CONFIG.FORMS_PARM));\n+      String dialect_value = elem.getAttributeValue(new QName(\n+        MexConstants.MEX_CONFIG.DIALECT_PARM));\n+      if (dialect_value == null) {\n+        serviceForm_configured = form_value;\n+      } else if (dialect_value != null\n+        && dialect_value.equals(dialect)) {\n+        dialectForm_configured = form_value;\n+      }\n+    }\n+\n+    if (dialectForm_configured != null) {\n+      forms = parseForms(dialectForm_configured);\n+    } else if (serviceForm_configured != null) {\n+      forms = parseForms(serviceForm_configured);\n+    }\n+\n+    return forms;\n+  }\n+\n+\n+  private static OutputForm[] parseForms(String form_values) {\n+    List forms = new ArrayList();\n+    StringTokenizer st = new StringTokenizer(form_values,\n+      MexConstants.MEX_CONFIG.DELIMITER);\n+    while (st.hasMoreTokens()) {\n+      String token = st.nextToken();\n+      if (token.equals(MexConstants.MEX_CONFIG.INLINE)) {\n+        forms.add(OutputForm.INLINE_FORM);\n+      } else if (token.equals(MexConstants.MEX_CONFIG.LOCATION)) {\n+        forms.add(OutputForm.LOCATION_FORM);\n+      } else if (token.equals(MexConstants.MEX_CONFIG.REFERENCE)) {\n+        forms.add(OutputForm.REFERENCE_FORM);\n+      } else {\n+        log.debug(\"Invalid form configured, \" + form_values);\n+      }\n+\n+    }\n+\n+    return (OutputForm[]) forms.toArray(new OutputForm[0]);\n+  }\n \n }\n",
            "diff_size": 255
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/173/MexUtil.java\nindex 37604e1d3fd..56b3ed8fefc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/173/MexUtil.java\n@@ -215,7 +215,6 @@ public class MexUtil {\n \t * @return\n \t */\n \tpublic static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm, Parameter serviceConfigMEXParm){\n-\t\t\n \t\tif (axisConfigMEXParm == null && serviceConfigMEXParm == null){\n \t\t\treturn allSupportedOutputForms();\n \t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/173/MexUtil.java\nindex 37604e1d3fd..cc5b6a2f88e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/173/MexUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/173/MexUtil.java\n@@ -214,9 +214,8 @@ public class MexUtil {\n \t * @param serviceConfigMEXParm  \"metadataexchange\" parameter configured in services.xml\n \t * @return\n \t */\n-\tpublic static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm, Parameter serviceConfigMEXParm){\n-\t\t\n-\t\tif (axisConfigMEXParm == null && serviceConfigMEXParm == null){\n+ public static OutputForm[] determineOutputForm(String dialect, Parameter axisConfigMEXParm, Parameter serviceConfigMEXParm){\n+     if (axisConfigMEXParm == null && serviceConfigMEXParm == null){\n \t\t\treturn allSupportedOutputForms();\n \t\t}\n \t    OutputForm[] outputform = new OutputForm[0];\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}