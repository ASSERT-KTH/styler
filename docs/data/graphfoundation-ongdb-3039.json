{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3039",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3039/TokenStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3039/TokenStore.java\nindex b3b28027ff5..bd70cc94994 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3039/TokenStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3039/TokenStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -44,122 +45,122 @@ import static org.neo4j.kernel.impl.store.NoStoreHeaderFormat.NO_STORE_HEADER_FO\n import static org.neo4j.kernel.impl.store.PropertyStore.decodeString;\n import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n-public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n-        extends CommonAbstractStore<RECORD,NoStoreHeader>\n+public abstract class TokenStore<RECORD extends TokenRecord, TOKEN extends Token>\n+    extends CommonAbstractStore<RECORD, NoStoreHeader>\n {\n-    public static final int NAME_STORE_BLOCK_SIZE = 30;\n-\n-    private final DynamicStringStore nameStore;\n-    private final TokenFactory<TOKEN> tokenFactory;\n-\n-    public TokenStore(\n-            File file,\n-            Config configuration,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            DynamicStringStore nameStore,\n-            String typeDescriptor,\n-            TokenFactory<TOKEN> tokenFactory,\n-            RecordFormat<RECORD> recordFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n-    {\n-        super( file, configuration, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n-                recordFormat, NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n-        this.nameStore = nameStore;\n-        this.tokenFactory = tokenFactory;\n-    }\n-\n-    public DynamicStringStore getNameStore()\n-    {\n-        return nameStore;\n-    }\n-\n-    @Override\n-    protected boolean isOnlyFastIdGeneratorRebuildEnabled( Config config )\n-    {\n-        return false;\n-    }\n-\n-    public List<TOKEN> getTokens( int maxCount )\n-    {\n-        LinkedList<TOKEN> records = new LinkedList<>();\n-        long maxIdInUse = getHighestPossibleIdInUse();\n-        int found = 0;\n-        RECORD record = newRecord();\n-        for ( int i = 0; i <= maxIdInUse && found < maxCount; i++ )\n-        {\n-            if ( !getRecord( i, record, RecordLoad.CHECK ).inUse() )\n-            {\n-                continue;\n-            }\n-\n-            found++;\n-            if ( record != null && record.inUse() && record.getNameId() != Record.RESERVED.intValue() )\n-            {\n-                records.add( tokenFactory.newToken( getStringFor( record ), i ) );\n-            }\n-        }\n-\n-        return records;\n-    }\n-\n-    public TOKEN getToken( int id )\n+  public static final int NAME_STORE_BLOCK_SIZE = 30;\n+\n+  private final DynamicStringStore nameStore;\n+  private final TokenFactory<TOKEN> tokenFactory;\n+\n+  public TokenStore(\n+      File file,\n+      Config configuration,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      DynamicStringStore nameStore,\n+      String typeDescriptor,\n+      TokenFactory<TOKEN> tokenFactory,\n+      RecordFormat<RECORD> recordFormat,\n+      String storeVersion,\n+      OpenOption... openOptions)\n+  {\n+    super(file, configuration, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n+        recordFormat, NO_STORE_HEADER_FORMAT, storeVersion, openOptions);\n+    this.nameStore = nameStore;\n+    this.tokenFactory = tokenFactory;\n+  }\n+\n+  public DynamicStringStore getNameStore()\n+  {\n+    return nameStore;\n+  }\n+\n+  @Override\n+  protected boolean isOnlyFastIdGeneratorRebuildEnabled(Config config)\n+  {\n+    return false;\n+  }\n+\n+  public List<TOKEN> getTokens(int maxCount)\n+  {\n+    LinkedList<TOKEN> records = new LinkedList<>();\n+    long maxIdInUse = getHighestPossibleIdInUse();\n+    int found = 0;\n+    RECORD record = newRecord();\n+    for (int i = 0; i <= maxIdInUse && found < maxCount; i++)\n     {\n-        RECORD record = getRecord( id, newRecord(), NORMAL );\n-        return tokenFactory.newToken( getStringFor( record ), record.getIntId() );\n+      if (!getRecord(i, record, RecordLoad.CHECK).inUse())\n+      {\n+        continue;\n+      }\n+\n+      found++;\n+      if (record != null && record.inUse() && record.getNameId() != Record.RESERVED.intValue())\n+      {\n+        records.add(tokenFactory.newToken(getStringFor(record), i));\n+      }\n     }\n \n-    public Collection<DynamicRecord> allocateNameRecords( byte[] chars )\n+    return records;\n+  }\n+\n+  public TOKEN getToken(int id)\n+  {\n+    RECORD record = getRecord(id, newRecord(), NORMAL);\n+    return tokenFactory.newToken(getStringFor(record), record.getIntId());\n+  }\n+\n+  public Collection<DynamicRecord> allocateNameRecords(byte[] chars)\n+  {\n+    Collection<DynamicRecord> records = new ArrayList<>();\n+    nameStore.allocateRecordsFromBytes(records, chars);\n+    return records;\n+  }\n+\n+  @Override\n+  public void updateRecord(RECORD record)\n+  {\n+    super.updateRecord(record);\n+    if (!record.isLight())\n     {\n-        Collection<DynamicRecord> records = new ArrayList<>();\n-        nameStore.allocateRecordsFromBytes( records, chars );\n-        return records;\n+      for (DynamicRecord keyRecord : record.getNameRecords())\n+      {\n+        nameStore.updateRecord(keyRecord);\n+      }\n     }\n+  }\n \n-    @Override\n-    public void updateRecord( RECORD record )\n+  @Override\n+  public void ensureHeavy(RECORD record)\n+  {\n+    if (!record.isLight())\n     {\n-        super.updateRecord( record );\n-        if ( !record.isLight() )\n-        {\n-            for ( DynamicRecord keyRecord : record.getNameRecords() )\n-            {\n-                nameStore.updateRecord( keyRecord );\n-            }\n-        }\n+      return;\n     }\n \n-    @Override\n-    public void ensureHeavy( RECORD record )\n-    {\n-        if ( !record.isLight() )\n-        {\n-            return;\n-        }\n-\n-        record.addNameRecords( nameStore.getRecords( record.getNameId(), NORMAL ) );\n-    }\n+    record.addNameRecords(nameStore.getRecords(record.getNameId(), NORMAL));\n+  }\n \n-    public String getStringFor( RECORD nameRecord )\n+  public String getStringFor(RECORD nameRecord)\n+  {\n+    ensureHeavy(nameRecord);\n+    int recordToFind = nameRecord.getNameId();\n+    Iterator<DynamicRecord> records = nameRecord.getNameRecords().iterator();\n+    Collection<DynamicRecord> relevantRecords = new ArrayList<>();\n+    while (recordToFind != Record.NO_NEXT_BLOCK.intValue() && records.hasNext())\n     {\n-        ensureHeavy( nameRecord );\n-        int recordToFind = nameRecord.getNameId();\n-        Iterator<DynamicRecord> records = nameRecord.getNameRecords().iterator();\n-        Collection<DynamicRecord> relevantRecords = new ArrayList<>();\n-        while ( recordToFind != Record.NO_NEXT_BLOCK.intValue() &&  records.hasNext() )\n-        {\n-            DynamicRecord record = records.next();\n-            if ( record.inUse() && record.getId() == recordToFind )\n-            {\n-                recordToFind = (int) record.getNextBlock();\n-                // TODO: optimize here, high chance next is right one\n-                relevantRecords.add( record );\n-                records = nameRecord.getNameRecords().iterator();\n-            }\n-        }\n-        return decodeString( nameStore.readFullByteArray( relevantRecords, PropertyType.STRING ).other() );\n+      DynamicRecord record = records.next();\n+      if (record.inUse() && record.getId() == recordToFind)\n+      {\n+        recordToFind = (int) record.getNextBlock();\n+        // TODO: optimize here, high chance next is right one\n+        relevantRecords.add(record);\n+        records = nameRecord.getNameRecords().iterator();\n+      }\n     }\n+    return decodeString(nameStore.readFullByteArray(relevantRecords, PropertyType.STRING).other());\n+  }\n }\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "147",
                    "column": "65",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3039/TokenStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3039/TokenStore.java\nindex b3b28027ff5..182fe8f63e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3039/TokenStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3039/TokenStore.java\n@@ -44,31 +44,26 @@ import static org.neo4j.kernel.impl.store.NoStoreHeaderFormat.NO_STORE_HEADER_FO\n import static org.neo4j.kernel.impl.store.PropertyStore.decodeString;\n import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n-public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n-        extends CommonAbstractStore<RECORD,NoStoreHeader>\n+public abstract class TokenStore<RECORD extends TokenRecord, TOKEN extends Token> extends CommonAbstractStore<RECORD,NoStoreHeader>\n {\n     public static final int NAME_STORE_BLOCK_SIZE = 30;\n-\n-    private final DynamicStringStore nameStore;\n+private final DynamicStringStore nameStore;\n     private final TokenFactory<TOKEN> tokenFactory;\n \n-    public TokenStore(\n-            File file,\n+    public TokenStore( File file,\n             Config configuration,\n             IdType idType,\n             IdGeneratorFactory idGeneratorFactory,\n             PageCache pageCache,\n             LogProvider logProvider,\n             DynamicStringStore nameStore,\n-            String typeDescriptor,\n-            TokenFactory<TOKEN> tokenFactory,\n-            RecordFormat<RECORD> recordFormat,\n+            String typeDescriptor, TokenFactory<TOKEN> tokenFactory, RecordFormat<RECORD> recordFormat,\n             String storeVersion,\n             OpenOption... openOptions )\n     {\n         super( file, configuration, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n                 recordFormat, NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n-        this.nameStore = nameStore;\n+this.nameStore = nameStore;\n         this.tokenFactory = tokenFactory;\n     }\n \n@@ -149,12 +144,12 @@ public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n         int recordToFind = nameRecord.getNameId();\n         Iterator<DynamicRecord> records = nameRecord.getNameRecords().iterator();\n         Collection<DynamicRecord> relevantRecords = new ArrayList<>();\n-        while ( recordToFind != Record.NO_NEXT_BLOCK.intValue() &&  records.hasNext() )\n+        while ( recordToFind != Record.NO_NEXT_BLOCK.intValue() &&records.hasNext() )\n         {\n             DynamicRecord record = records.next();\n             if ( record.inUse() && record.getId() == recordToFind )\n             {\n-                recordToFind = (int) record.getNextBlock();\n+                recordToFind = ( int) record.getNextBlock();\n                 // TODO: optimize here, high chance next is right one\n                 relevantRecords.add( record );\n                 records = nameRecord.getNameRecords().iterator();\n@@ -162,4 +157,4 @@ public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n         }\n         return decodeString( nameStore.readFullByteArray( relevantRecords, PropertyType.STRING ).other() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 326).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "32",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "85",
                    "column": "49",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "113",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "138",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "138",
                    "column": "63",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "138",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "32",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3039/TokenStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3039/TokenStore.java\nindex b3b28027ff5..e8b500e7e74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3039/TokenStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3039/TokenStore.java\n@@ -26,7 +26,6 @@ import java.util.Collection;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n-\n import org.neo4j.io.pagecache.PageCache;\n import org.neo4j.kernel.configuration.Config;\n import org.neo4j.kernel.impl.store.format.RecordFormat;\n@@ -39,35 +38,21 @@ import org.neo4j.kernel.impl.store.record.TokenRecord;\n import org.neo4j.logging.LogProvider;\n import org.neo4j.storageengine.api.Token;\n import org.neo4j.storageengine.api.TokenFactory;\n-\n import static org.neo4j.kernel.impl.store.NoStoreHeaderFormat.NO_STORE_HEADER_FORMAT;\n+\n import static org.neo4j.kernel.impl.store.PropertyStore.decodeString;\n+\n import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n-public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n-        extends CommonAbstractStore<RECORD,NoStoreHeader>\n+public abstract class TokenStore < RECORD extends TokenRecord, TOKEN extends Token> extends CommonAbstractStore<RECORD,NoStoreHeader>\n {\n     public static final int NAME_STORE_BLOCK_SIZE = 30;\n-\n     private final DynamicStringStore nameStore;\n     private final TokenFactory<TOKEN> tokenFactory;\n \n-    public TokenStore(\n-            File file,\n-            Config configuration,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            DynamicStringStore nameStore,\n-            String typeDescriptor,\n-            TokenFactory<TOKEN> tokenFactory,\n-            RecordFormat<RECORD> recordFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n+    public TokenStore( File file, Config configuration, IdType idType, IdGeneratorFactory idGeneratorFactory, PageCache pageCache, LogProvider logProvider, DynamicStringStore nameStore, String typeDescriptor, TokenFactory<TOKEN> tokenFactory, RecordFormat<RECORD> recordFormat, String storeVersion, OpenOption... openOptions )\n     {\n-        super( file, configuration, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n-                recordFormat, NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n+        super( file, configuration, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor, recordFormat, NO_STORE_HEADER_FORMAT, storeVersion, openOptions );\n         this.nameStore = nameStore;\n         this.tokenFactory = tokenFactory;\n     }\n@@ -89,15 +74,15 @@ public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n         long maxIdInUse = getHighestPossibleIdInUse();\n         int found = 0;\n         RECORD record = newRecord();\n-        for ( int i = 0; i <= maxIdInUse && found < maxCount; i++ )\n+        for ( int i = 0; i <= maxIdInUse&& found < maxCount; i++ )\n         {\n-            if ( !getRecord( i, record, RecordLoad.CHECK ).inUse() )\n+            if ( ! getRecord( i, record, RecordLoad.CHECK ).inUse() )\n             {\n                 continue;\n             }\n \n             found++;\n-            if ( record != null && record.inUse() && record.getNameId() != Record.RESERVED.intValue() )\n+            if ( record != null&& record.inUse()&& record.getNameId() != Record.RESERVED.intValue() )\n             {\n                 records.add( tokenFactory.newToken( getStringFor( record ), i ) );\n             }\n@@ -123,9 +108,10 @@ public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n     public void updateRecord( RECORD record )\n     {\n         super.updateRecord( record );\n-        if ( !record.isLight() )\n+        if ( ! record.isLight() )\n         {\n-            for ( DynamicRecord keyRecord : record.getNameRecords() )\n+            for( DynamicRecord keyRecord : record.getNameRecords()\n+            )\n             {\n                 nameStore.updateRecord( keyRecord );\n             }\n@@ -135,7 +121,7 @@ public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n     @Override\n     public void ensureHeavy( RECORD record )\n     {\n-        if ( !record.isLight() )\n+        if ( ! record.isLight() )\n         {\n             return;\n         }\n@@ -149,10 +135,10 @@ public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n         int recordToFind = nameRecord.getNameId();\n         Iterator<DynamicRecord> records = nameRecord.getNameRecords().iterator();\n         Collection<DynamicRecord> relevantRecords = new ArrayList<>();\n-        while ( recordToFind != Record.NO_NEXT_BLOCK.intValue() &&  records.hasNext() )\n+        while( recordToFind != Record.NO_NEXT_BLOCK.intValue()&& records.hasNext())\n         {\n             DynamicRecord record = records.next();\n-            if ( record.inUse() && record.getId() == recordToFind )\n+            if ( record.inUse()&& record.getId() == recordToFind )\n             {\n                 recordToFind = (int) record.getNextBlock();\n                 // TODO: optimize here, high chance next is right one\n@@ -160,6 +146,7 @@ public abstract class TokenStore<RECORD extends TokenRecord,TOKEN extends Token>\n                 records = nameRecord.getNameRecords().iterator();\n             }\n         }\n+\n         return decodeString( nameStore.readFullByteArray( relevantRecords, PropertyType.STRING ).other() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}