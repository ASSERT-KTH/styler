{
    "project_name": "graphfoundation-ongdb",
    "error_id": "554",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/554/NodeRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/554/NodeRecord.java\nindex 67432074c74..664a925ef84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/554/NodeRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/554/NodeRecord.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.record;\n \n import java.util.ArrayList;\n@@ -29,155 +30,155 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n \n public class NodeRecord extends PrimitiveRecord\n {\n-    private long nextRel;\n-    private long labels;\n-    private Collection<DynamicRecord> dynamicLabelRecords;\n-    private boolean isLight;\n-    private boolean dense;\n-\n-    public NodeRecord( long id )\n-    {\n-        super( id );\n-    }\n-\n-    public NodeRecord initialize( boolean inUse, long nextProp, boolean dense, long nextRel, long labels )\n-    {\n-        super.initialize( inUse, nextProp );\n-        this.nextRel = nextRel;\n-        this.dense = dense;\n-        this.labels = labels;\n-        this.dynamicLabelRecords = emptyList();\n-        this.isLight = true;\n-        return this;\n-    }\n-\n-    @Deprecated\n-    public NodeRecord( long id, boolean dense, long nextRel, long nextProp )\n-    {\n-        this( id, false, dense, nextRel, nextProp, 0 );\n-    }\n-\n-    @Deprecated\n-    public NodeRecord( long id, boolean inUse, boolean dense, long nextRel, long nextProp, long labels )\n-    {\n-        super( id, nextProp );\n-        this.nextRel = nextRel;\n-        this.dense = dense;\n-        this.labels = labels;\n-        setInUse( inUse );\n-    }\n-\n-    @Deprecated\n-    public NodeRecord( long id, boolean dense, long nextRel, long nextProp, boolean inUse )\n-    {\n-        this( id, dense, nextRel, nextProp );\n-        setInUse( inUse );\n-    }\n-\n-    @Override\n-    public void clear()\n-    {\n-        initialize( false, Record.NO_NEXT_PROPERTY.intValue(), false,\n-                Record.NO_NEXT_RELATIONSHIP.intValue(), Record.NO_LABELS_FIELD.intValue() );\n-    }\n-\n-    public long getNextRel()\n-    {\n-        return nextRel;\n-    }\n-\n-    public void setNextRel( long nextRel )\n-    {\n-        this.nextRel = nextRel;\n-    }\n-\n-    /**\n-     * Sets the label field to a pointer to the first changed dynamic record. All changed\n-     * dynamic records by doing this are supplied here.\n-     *\n-     * @param labels this will be either in-lined labels, or an id where to get the labels\n-     * @param dynamicRecords all changed dynamic records by doing this.\n-     */\n-    public void setLabelField( long labels, Collection<DynamicRecord> dynamicRecords )\n-    {\n-        this.labels = labels;\n-        this.dynamicLabelRecords = dynamicRecords;\n-\n-        // Only mark it as heavy if there are dynamic records, since there's a possibility that we just\n-        // loaded a light version of the node record where this method was called for setting the label field.\n-        // Keeping it as light in this case would make it possible to load it fully later on.\n-        this.isLight = dynamicRecords.isEmpty();\n-    }\n-\n-    public long getLabelField()\n-    {\n-        return this.labels;\n-    }\n-\n-    public boolean isLight()\n-    {\n-        return isLight;\n-    }\n-\n-    public Collection<DynamicRecord> getDynamicLabelRecords()\n-    {\n-        return this.dynamicLabelRecords;\n-    }\n-\n-    public Iterable<DynamicRecord> getUsedDynamicLabelRecords()\n-    {\n-        return filter( AbstractBaseRecord::inUse, dynamicLabelRecords );\n-    }\n-\n-    public boolean isDense()\n-    {\n-        return dense;\n-    }\n-\n-    public void setDense( boolean dense )\n-    {\n-        this.dense = dense;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        String denseInfo = (dense ? \"group\" : \"rel\") + \"=\" + nextRel;\n-        String lightHeavyInfo = isLight ? \"light\" :\n-                                dynamicLabelRecords.isEmpty() ?\n-                                \"heavy\" : \"heavy,dynlabels=\" + dynamicLabelRecords;\n-\n-        return \"Node[\" + getId() +\n-               \",used=\" + inUse() +\n-               \",\" + denseInfo +\n-               \",prop=\" + getNextProp() +\n-               \",labels=\" + parseLabelsField( this ) +\n-               \",\" + lightHeavyInfo +\n-               \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n-    }\n-\n-    @Override\n-    public void setIdTo( PropertyRecord property )\n-    {\n-        property.setNodeId( getId() );\n-    }\n-\n-    @Override\n-    public NodeRecord clone()\n-    {\n-        NodeRecord clone = new NodeRecord( getId() ).initialize( inUse(), nextProp, dense, nextRel, labels );\n-        clone.isLight = isLight;\n-\n-        if ( dynamicLabelRecords.size() > 0 )\n-        {\n-            List<DynamicRecord> clonedLabelRecords = new ArrayList<>( dynamicLabelRecords.size() );\n-            for ( DynamicRecord labelRecord : dynamicLabelRecords )\n-            {\n-                clonedLabelRecords.add( labelRecord.clone() );\n-            }\n-            clone.dynamicLabelRecords = clonedLabelRecords;\n-        }\n-        clone.setSecondaryUnitId( getSecondaryUnitId() );\n-        return clone;\n-    }\n+  private long nextRel;\n+  private long labels;\n+  private Collection<DynamicRecord> dynamicLabelRecords;\n+  private boolean isLight;\n+  private boolean dense;\n+\n+  public NodeRecord(long id)\n+  {\n+    super(id);\n+  }\n+\n+  public NodeRecord initialize(boolean inUse, long nextProp, boolean dense, long nextRel, long labels)\n+  {\n+    super.initialize(inUse, nextProp);\n+    this.nextRel = nextRel;\n+    this.dense = dense;\n+    this.labels = labels;\n+    this.dynamicLabelRecords = emptyList();\n+    this.isLight = true;\n+    return this;\n+  }\n+\n+  @Deprecated\n+  public NodeRecord(long id, boolean dense, long nextRel, long nextProp)\n+  {\n+    this(id, false, dense, nextRel, nextProp, 0);\n+  }\n+\n+  @Deprecated\n+  public NodeRecord(long id, boolean inUse, boolean dense, long nextRel, long nextProp, long labels)\n+  {\n+    super(id, nextProp);\n+    this.nextRel = nextRel;\n+    this.dense = dense;\n+    this.labels = labels;\n+    setInUse(inUse);\n+  }\n+\n+  @Deprecated\n+  public NodeRecord(long id, boolean dense, long nextRel, long nextProp, boolean inUse)\n+  {\n+    this(id, dense, nextRel, nextProp);\n+    setInUse(inUse);\n+  }\n+\n+  @Override\n+  public void clear()\n+  {\n+    initialize(false, Record.NO_NEXT_PROPERTY.intValue(), false,\n+        Record.NO_NEXT_RELATIONSHIP.intValue(), Record.NO_LABELS_FIELD.intValue());\n+  }\n+\n+  public long getNextRel()\n+  {\n+    return nextRel;\n+  }\n+\n+  public void setNextRel(long nextRel)\n+  {\n+    this.nextRel = nextRel;\n+  }\n+\n+  /**\n+   * Sets the label field to a pointer to the first changed dynamic record. All changed\n+   * dynamic records by doing this are supplied here.\n+   *\n+   * @param labels         this will be either in-lined labels, or an id where to get the labels\n+   * @param dynamicRecords all changed dynamic records by doing this.\n+   */\n+  public void setLabelField(long labels, Collection<DynamicRecord> dynamicRecords)\n+  {\n+    this.labels = labels;\n+    this.dynamicLabelRecords = dynamicRecords;\n+\n+    // Only mark it as heavy if there are dynamic records, since there's a possibility that we just\n+    // loaded a light version of the node record where this method was called for setting the label field.\n+    // Keeping it as light in this case would make it possible to load it fully later on.\n+    this.isLight = dynamicRecords.isEmpty();\n+  }\n+\n+  public long getLabelField()\n+  {\n+    return this.labels;\n+  }\n+\n+  public boolean isLight()\n+  {\n+    return isLight;\n+  }\n+\n+  public Collection<DynamicRecord> getDynamicLabelRecords()\n+  {\n+    return this.dynamicLabelRecords;\n+  }\n+\n+  public Iterable<DynamicRecord> getUsedDynamicLabelRecords()\n+  {\n+    return filter(AbstractBaseRecord::inUse, dynamicLabelRecords);\n+  }\n+\n+  public boolean isDense()\n+  {\n+    return dense;\n+  }\n+\n+  public void setDense(boolean dense)\n+  {\n+    this.dense = dense;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    String denseInfo = (dense ? \"group\" : \"rel\") + \"=\" + nextRel;\n+    String lightHeavyInfo = isLight ? \"light\" :\n+        dynamicLabelRecords.isEmpty() ?\n+            \"heavy\" : \"heavy,dynlabels=\" + dynamicLabelRecords;\n+\n+    return \"Node[\" + getId() +\n+        \",used=\" + inUse() +\n+        \",\" + denseInfo +\n+        \",prop=\" + getNextProp() +\n+        \",labels=\" + parseLabelsField(this) +\n+        \",\" + lightHeavyInfo +\n+        \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n+  }\n+\n+  @Override\n+  public void setIdTo(PropertyRecord property)\n+  {\n+    property.setNodeId(getId());\n+  }\n+\n+  @Override\n+  public NodeRecord clone()\n+  {\n+    NodeRecord clone = new NodeRecord(getId()).initialize(inUse(), nextProp, dense, nextRel, labels);\n+    clone.isLight = isLight;\n+\n+    if (dynamicLabelRecords.size() > 0)\n+    {\n+      List<DynamicRecord> clonedLabelRecords = new ArrayList<>(dynamicLabelRecords.size());\n+      for (DynamicRecord labelRecord : dynamicLabelRecords)\n+      {\n+        clonedLabelRecords.add(labelRecord.clone());\n+      }\n+      clone.dynamicLabelRecords = clonedLabelRecords;\n+    }\n+    clone.setSecondaryUnitId(getSecondaryUnitId());\n+    return clone;\n+  }\n }\n",
            "diff_size": 152
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/554/NodeRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/554/NodeRecord.java\nindex 67432074c74..a4c78e5b880 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/554/NodeRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/554/NodeRecord.java\n@@ -64,7 +64,8 @@ public class NodeRecord extends PrimitiveRecord\n         this.nextRel = nextRel;\n         this.dense = dense;\n         this.labels = labels;\n-        setInUse( inUse );\n+\n+setInUse( inUse );\n     }\n \n     @Deprecated\n@@ -143,17 +144,8 @@ public class NodeRecord extends PrimitiveRecord\n     public String toString()\n     {\n         String denseInfo = (dense ? \"group\" : \"rel\") + \"=\" + nextRel;\n-        String lightHeavyInfo = isLight ? \"light\" :\n-                                dynamicLabelRecords.isEmpty() ?\n-                                \"heavy\" : \"heavy,dynlabels=\" + dynamicLabelRecords;\n-\n-        return \"Node[\" + getId() +\n-               \",used=\" + inUse() +\n-               \",\" + denseInfo +\n-               \",prop=\" + getNextProp() +\n-               \",labels=\" + parseLabelsField( this ) +\n-               \",\" + lightHeavyInfo +\n-               \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n+        String lightHeavyInfo = isLight ? \"light\" : dynamicLabelRecords.isEmpty() ? \"heavy\" : \"heavy,dynlabels=\" + dynamicLabelRecords;\n+return \"Node[\" + getId() + \",used=\" + inUse() + \",\" + denseInfo + \",prop=\" + getNextProp() + \",labels=\" + parseLabelsField( this ) + \",\" + lightHeavyInfo + \",secondaryUnitId=\" + getSecondaryUnitId() + \"]\";\n     }\n \n     @Override\n@@ -180,4 +172,4 @@ public class NodeRecord extends PrimitiveRecord\n         clone.setSecondaryUnitId( getSecondaryUnitId() );\n         return clone;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}