{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "312",
    "information": {
        "errors": [
            {
                "line": "23",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "abstract public class BaseBareDomPerfTest implements PerfTest\n{\n\tpublic static final Boolean DEBUG = false;\n\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n\tpublic static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n\tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/312/BaseBareDomPerfTest.java\nindex e6d0351b7e1..8cddd9dfa61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/312/BaseBareDomPerfTest.java\n@@ -20,7 +20,7 @@ import org.xml.sax.SAXException;\n  */\n abstract public class BaseBareDomPerfTest implements PerfTest\n {\n-\tpublic static final Boolean DEBUG = false;\n+public static final Boolean DEBUG = false;\n \tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n \tpublic static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n \tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "58",
                    "column": "3",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/312/BaseBareDomPerfTest.java\nindex e6d0351b7e1..cef765b9279 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/312/BaseBareDomPerfTest.java\n@@ -13,100 +13,103 @@ import org.w3c.dom.Node;\n import org.xml.sax.SAXException;\n \n /**\n- * This sample illustrates a simple, serialization.  \n- * \n+ * This sample illustrates a simple, serialization.\n+ *\n  * @param <N> the node type\n  * @author jbaysdon\n  */\n-abstract public class BaseBareDomPerfTest implements PerfTest\n-{\n-\tpublic static final Boolean DEBUG = false;\n-\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n-\tpublic static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n-\tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n-\n-\tprotected String m_docFile;\n-\tprotected String m_baseURI;\n-\n-\tpublic static final Boolean COPY_TYPE_ANNOTATIONS = true;\n-\n-\tNode m_testNode;\n-\tDocumentBuilderFactory m_dbf;\n-\tDocumentBuilder m_builder;\n-    \n-\tpublic BaseBareDomPerfTest()\t{}\n-\n-\t@Override\n-\tpublic String getBridgeName() {\n-\t\treturn \"DOM.xerces\";\n-\t}\n-\t@Override\n-\tpublic String getBridgeVersion() {\n-\t\treturn \"2.9.102\";\n-\t}\n-\t\n-\t@Override\n-\tpublic void initialSetup(Map<String,Object> props) {\n-\t\tm_docFile = (String)props.get(DOC_FILE_PROP_NAME);\n+abstract public class BaseBareDomPerfTest implements PerfTest {\n+    public static final Boolean DEBUG = false;\n+\n+    public static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n+\n+    public static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n+\n+    public static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n+\n+    protected String m_docFile;\n+\n+    protected String m_baseURI;\n+\n+    public static final Boolean COPY_TYPE_ANNOTATIONS = true;\n+\n+    Node m_testNode;\n+\n+    DocumentBuilderFactory m_dbf;\n+\n+    DocumentBuilder m_builder;\n+\n+    public BaseBareDomPerfTest() {\n+    }\n+\n+    @Override\n+    public String getBridgeName() {\n+        return \"DOM.xerces\";\n+    }\n+\n+    @Override\n+    public String getBridgeVersion() {\n+        return \"2.9.102\";\n+    }\n+\n+    @Override\n+    public void initialSetup(Map<String, Object> props) {\n+        m_docFile = (String) props.get(DOC_FILE_PROP_NAME);\n //\t\tif(m_docFile == null)\n //\t\t{\n //\t\t\tthrow new IllegalStateException(\"Input document must be specified.\");\n //\t\t}\n-\t\tm_baseURI = (String)props.get(BASE_URI_PROP_NAME);\n+        m_baseURI = (String) props.get(BASE_URI_PROP_NAME);\n //\t\tif(m_baseURI == null)\n //\t\t{\n //\t\t\tthrow new IllegalStateException(\"Base URI must be specified.\");\n //\t\t}\n-\t\t// General setup\n-\t    m_dbf = DocumentBuilderFactory.newInstance();\n-    \tm_dbf.setNamespaceAware(true);\n+        // General setup\n+        m_dbf = DocumentBuilderFactory.newInstance();\n+        m_dbf.setNamespaceAware(true);\n         try {\n-\t\t\tm_builder = m_dbf.newDocumentBuilder();\n-\t\t} catch (ParserConfigurationException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\tprotected String getDocFile()\n-\t{\n-\t\treturn m_docFile;\n-\t}\n-\tprotected String getBaseURI()\n-\t{\n-\t\treturn m_baseURI;\n-\t}\n-\tprotected DocumentBuilder getDocBuilder()\n-\t{\n-\t\treturn m_builder;\n-\t}\n-\t//-------------------------------------------------------------------------\n-\t// PerfTest implementation classes.\n-\t//-------------------------------------------------------------------------\n-\tprotected void setupTestNode()\n-\t{\n-\t\tif(m_docFile != null && m_docFile.length() > 0)\n-\t\t{\n-\t\t\ttry {\n-\t\t\t\tm_testNode = m_builder.parse(m_baseURI + \"/\" + m_docFile);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t} catch (SAXException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\t//-------------------------------------------------------------------------\n-\t// convenience methods\n-\t//-------------------------------------------------------------------------\n-    public static boolean isNamespace(final Node node)\n-    {\n+            m_builder = m_dbf.newDocumentBuilder();\n+        } catch (ParserConfigurationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    protected String getDocFile() {\n+        return m_docFile;\n+    }\n+\n+    protected String getBaseURI() {\n+        return m_baseURI;\n+    }\n+\n+    protected DocumentBuilder getDocBuilder() {\n+        return m_builder;\n+    }\n+\n+    //-------------------------------------------------------------------------\n+    // PerfTest implementation classes.\n+    //-------------------------------------------------------------------------\n+    protected void setupTestNode() {\n+        if (m_docFile != null && m_docFile.length() > 0) {\n+            try {\n+                m_testNode = m_builder.parse(m_baseURI + \"/\" + m_docFile);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            } catch (SAXException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    //-------------------------------------------------------------------------\n+    // convenience methods\n+    //-------------------------------------------------------------------------\n+    public static boolean isNamespace(final Node node) {\n         final short nodeType = node.getNodeType();\n-        if (nodeType == Node.ATTRIBUTE_NODE)\n-        {\n+        if (nodeType == Node.ATTRIBUTE_NODE) {\n             final String namespaceURI = node.getNamespaceURI();\n             return XMLConstants.XMLNS_ATTRIBUTE_NS_URI.equals(namespaceURI) ? true : false;\n-        }\n-        else\n-        {\n+        } else {\n             return false;\n         }\n     }\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/312/BaseBareDomPerfTest.java\nindex e6d0351b7e1..798b27b20ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/312/BaseBareDomPerfTest.java\n@@ -2,12 +2,10 @@ package org.genxdm.samples.performance.dom;\n \n import java.io.IOException;\n import java.util.Map;\n-\n import javax.xml.XMLConstants;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.parsers.ParserConfigurationException;\n-\n import org.genxdm.samples.performance.PerfTest;\n import org.w3c.dom.Node;\n import org.xml.sax.SAXException;\n@@ -18,85 +16,102 @@ import org.xml.sax.SAXException;\n  * @param <N> the node type\n  * @author jbaysdon\n  */\n+\n abstract public class BaseBareDomPerfTest implements PerfTest\n {\n-\tpublic static final Boolean DEBUG = false;\n-\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n-\tpublic static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n-\tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n+    public static final Boolean DEBUG = false;\n+    public static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n+    public static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n+    public static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n+    protected String m_docFile;\n+    protected String m_baseURI;\n+    public static final Boolean COPY_TYPE_ANNOTATIONS = true;\n+    Node m_testNode;\n+    DocumentBuilderFactory m_dbf;\n+    DocumentBuilder m_builder;\n+\n+    public BaseBareDomPerfTest()\n+    {\n+    }\n+\n+    @Override\n+    public String getBridgeName()\n+    {\n+        return \"DOM.xerces\";\n+    }\n+\n+    @Override\n+    public String getBridgeVersion()\n+    {\n+        return \"2.9.102\";\n+    }\n+\n+    @Override\n+    public void initialSetup(Map<String, Object> props)\n+    {\n+        m_docFile = (String)props.get(DOC_FILE_PROP_NAME);\n+//      if(m_docFile == null)\n+//      {\n+//          throw new IllegalStateException(\"Input document must be specified.\");\n+//      }\n+        m_baseURI = (String)props.get(BASE_URI_PROP_NAME);\n+//      if(m_baseURI == null)\n+//      {\n+//          throw new IllegalStateException(\"Base URI must be specified.\");\n+//      }\n+        // General setup\n+        m_dbf = DocumentBuilderFactory.newInstance();\n+        m_dbf.setNamespaceAware(true);\n+        try\n+        {\n+            m_builder = m_dbf.newDocumentBuilder();\n+        }\n+        catch (ParserConfigurationException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+    }\n \n-\tprotected String m_docFile;\n-\tprotected String m_baseURI;\n+    protected String getDocFile()\n+    {\n+        return m_docFile;\n+    }\n \n-\tpublic static final Boolean COPY_TYPE_ANNOTATIONS = true;\n+    protected String getBaseURI()\n+    {\n+        return m_baseURI;\n+    }\n \n-\tNode m_testNode;\n-\tDocumentBuilderFactory m_dbf;\n-\tDocumentBuilder m_builder;\n-    \n-\tpublic BaseBareDomPerfTest()\t{}\n+    protected DocumentBuilder getDocBuilder()\n+    {\n+        return m_builder;\n+    }\n+    //-------------------------------------------------------------------------\n+    // PerfTest implementation classes.\n+    //-------------------------------------------------------------------------\n+\n+    protected void setupTestNode()\n+    {\n+        if (m_docFile != null && m_docFile.length() > 0)\n+        {\n+            try\n+            {\n+                m_testNode = m_builder.parse(m_baseURI + \"/\" + m_docFile);\n+            }\n+            catch (IOException e)\n+            {\n+                throw new RuntimeException(e);\n+            }\n+            catch (SAXException e)\n+            {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+    //-------------------------------------------------------------------------\n+    // convenience methods\n+    //-------------------------------------------------------------------------\n \n-\t@Override\n-\tpublic String getBridgeName() {\n-\t\treturn \"DOM.xerces\";\n-\t}\n-\t@Override\n-\tpublic String getBridgeVersion() {\n-\t\treturn \"2.9.102\";\n-\t}\n-\t\n-\t@Override\n-\tpublic void initialSetup(Map<String,Object> props) {\n-\t\tm_docFile = (String)props.get(DOC_FILE_PROP_NAME);\n-//\t\tif(m_docFile == null)\n-//\t\t{\n-//\t\t\tthrow new IllegalStateException(\"Input document must be specified.\");\n-//\t\t}\n-\t\tm_baseURI = (String)props.get(BASE_URI_PROP_NAME);\n-//\t\tif(m_baseURI == null)\n-//\t\t{\n-//\t\t\tthrow new IllegalStateException(\"Base URI must be specified.\");\n-//\t\t}\n-\t\t// General setup\n-\t    m_dbf = DocumentBuilderFactory.newInstance();\n-    \tm_dbf.setNamespaceAware(true);\n-        try {\n-\t\t\tm_builder = m_dbf.newDocumentBuilder();\n-\t\t} catch (ParserConfigurationException e) {\n-\t\t\tthrow new RuntimeException(e);\n-\t\t}\n-\t}\n-\tprotected String getDocFile()\n-\t{\n-\t\treturn m_docFile;\n-\t}\n-\tprotected String getBaseURI()\n-\t{\n-\t\treturn m_baseURI;\n-\t}\n-\tprotected DocumentBuilder getDocBuilder()\n-\t{\n-\t\treturn m_builder;\n-\t}\n-\t//-------------------------------------------------------------------------\n-\t// PerfTest implementation classes.\n-\t//-------------------------------------------------------------------------\n-\tprotected void setupTestNode()\n-\t{\n-\t\tif(m_docFile != null && m_docFile.length() > 0)\n-\t\t{\n-\t\t\ttry {\n-\t\t\t\tm_testNode = m_builder.parse(m_baseURI + \"/\" + m_docFile);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t} catch (SAXException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\t//-------------------------------------------------------------------------\n-\t// convenience methods\n-\t//-------------------------------------------------------------------------\n     public static boolean isNamespace(final Node node)\n     {\n         final short nodeType = node.getNodeType();\n@@ -110,4 +125,4 @@ abstract public class BaseBareDomPerfTest implements PerfTest\n             return false;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 154
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/312/BaseBareDomPerfTest.java\nindex e6d0351b7e1..8cddd9dfa61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/312/BaseBareDomPerfTest.java\n@@ -20,7 +20,7 @@ import org.xml.sax.SAXException;\n  */\n abstract public class BaseBareDomPerfTest implements PerfTest\n {\n-\tpublic static final Boolean DEBUG = false;\n+public static final Boolean DEBUG = false;\n \tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n \tpublic static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n \tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/312/BaseBareDomPerfTest.java\nindex e6d0351b7e1..f7ac1b5d915 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/312/BaseBareDomPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/312/BaseBareDomPerfTest.java\n@@ -20,7 +20,7 @@ import org.xml.sax.SAXException;\n  */\n abstract public class BaseBareDomPerfTest implements PerfTest\n {\n-\tpublic static final Boolean DEBUG = false;\n+    public static final Boolean DEBUG = false;\n \tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n \tpublic static final String SCHEMA_FILE_PROP_NAME = \"schema\";\n \tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}