{
    "project_name": "neo4j-neo4j",
    "error_id": "649",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "87",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "87",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "134",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "151",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "243",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "340",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/649/SchemaStatementProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/649/SchemaStatementProcedure.java\nindex b3efbdd1c3b..aebf76249e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/649/SchemaStatementProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/649/SchemaStatementProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.builtin;\n \n import org.eclipse.collections.api.tuple.Pair;\n@@ -70,46 +71,46 @@ public final class SchemaStatementProcedure\n     {\n     }\n \n-    static Collection<BuiltInProcedures.SchemaStatementResult> createSchemaStatementResults( SchemaReadCore schemaRead, TokenRead tokenRead )\n-            throws ProcedureException\n+    static Collection<BuiltInProcedures.SchemaStatementResult> createSchemaStatementResults(SchemaReadCore schemaRead, TokenRead tokenRead)\n+      throws ProcedureException\n     {\n-        Map<String,BuiltInProcedures.SchemaStatementResult> schemaStatements = new HashMap<>();\n+        Map<String, BuiltInProcedures.SchemaStatementResult> schemaStatements = new HashMap<>();\n \n         // Indexes\n         // If index is unique the assumption is that it is backing a constraint and will not be included.\n         final Iterator<IndexDescriptor> allIndexes = schemaRead.indexesGetAll();\n-        while ( allIndexes.hasNext() )\n+        while (allIndexes.hasNext())\n         {\n             final IndexDescriptor index = allIndexes.next();\n-            if ( includeIndex( schemaRead, index ) )\n+            if (includeIndex(schemaRead, index))\n             {\n                 final String name = index.getName();\n                 String type = SchemaRuleType.INDEX.name();\n-                final String createStatement = createStatement( tokenRead, index );\n-                final String dropStatement = dropStatement( index );\n-                schemaStatements.put( name, new BuiltInProcedures.SchemaStatementResult( name, type, createStatement, dropStatement ) );\n+                final String createStatement = createStatement(tokenRead, index);\n+                final String dropStatement = dropStatement(index);\n+                schemaStatements.put(name, new BuiltInProcedures.SchemaStatementResult(name, type, createStatement, dropStatement));\n             }\n         }\n \n         // Constraints\n         Iterator<ConstraintDescriptor> allConstraints = schemaRead.constraintsGetAll();\n-        while ( allConstraints.hasNext() )\n+        while (allConstraints.hasNext())\n         {\n             ConstraintDescriptor constraint = allConstraints.next();\n-            if ( includeConstraint( schemaRead, constraint ) )\n+            if (includeConstraint(schemaRead, constraint))\n             {\n                 String name = constraint.getName();\n                 String type = SchemaRuleType.CONSTRAINT.name();\n-                String createStatement = createStatement( schemaRead::indexGetForName, tokenRead, constraint );\n-                String dropStatement = dropStatement( constraint );\n-                schemaStatements.put( name, new BuiltInProcedures.SchemaStatementResult( name, type, createStatement, dropStatement ) );\n+                String createStatement = createStatement(schemaRead::indexGetForName, tokenRead, constraint);\n+                String dropStatement = dropStatement(constraint);\n+                schemaStatements.put(name, new BuiltInProcedures.SchemaStatementResult(name, type, createStatement, dropStatement));\n             }\n         }\n \n         return schemaStatements.values();\n     }\n \n-    private static boolean includeConstraint( SchemaReadCore schemaRead, ConstraintDescriptor constraint )\n+    private static boolean includeConstraint(SchemaReadCore schemaRead, ConstraintDescriptor constraint)\n     {\n         // If constraint is index backed constraint following rules apply\n         // - Constraint must own index\n@@ -117,21 +118,20 @@ public final class SchemaStatementProcedure\n         // - Owned index must share name with constraint\n         // - Owned index must be online\n         // - Owned index must have this constraint as owning constraint\n-        if ( constraint.isIndexBackedConstraint() )\n+        if (constraint.isIndexBackedConstraint())\n         {\n             IndexBackedConstraintDescriptor indexBackedConstraint = constraint.asIndexBackedConstraint();\n-            if ( indexBackedConstraint.hasOwnedIndexId() )\n+            if (indexBackedConstraint.hasOwnedIndexId())\n             {\n-                IndexDescriptor backingIndex = schemaRead.indexGetForName( constraint.getName() );\n-                if ( backingIndex.getId() == indexBackedConstraint.ownedIndexId() )\n+                IndexDescriptor backingIndex = schemaRead.indexGetForName(constraint.getName());\n+                if (backingIndex.getId() == indexBackedConstraint.ownedIndexId())\n                 {\n                     try\n                     {\n-                        InternalIndexState internalIndexState = schemaRead.indexGetState( backingIndex );\n+                        InternalIndexState internalIndexState = schemaRead.indexGetState(backingIndex);\n                         OptionalLong owningConstraintId = backingIndex.getOwningConstraintId();\n-                        return internalIndexState == InternalIndexState.ONLINE && owningConstraintId.orElse( -1 ) == constraint.getId();\n-                    }\n-                    catch ( IndexNotFoundKernelException e )\n+                        return internalIndexState == InternalIndexState.ONLINE && owningConstraintId.orElse(-1) == constraint.getId();\n+                    } catch (IndexNotFoundKernelException e)\n                     {\n                         return false;\n                     }\n@@ -142,223 +142,219 @@ public final class SchemaStatementProcedure\n         return true;\n     }\n \n-    private static boolean includeIndex( SchemaReadCore schemaRead, IndexDescriptor index )\n+    private static boolean includeIndex(SchemaReadCore schemaRead, IndexDescriptor index)\n     {\n         try\n         {\n-            InternalIndexState indexState = schemaRead.indexGetState( index );\n+            InternalIndexState indexState = schemaRead.indexGetState(index);\n             return indexState == InternalIndexState.ONLINE && !index.isUnique();\n-        }\n-        catch ( IndexNotFoundKernelException e )\n+        } catch (IndexNotFoundKernelException e)\n         {\n             return false;\n         }\n     }\n \n-    public static String createStatement( Function<String,IndexDescriptor> indexLookup, TokenRead tokenRead, ConstraintDescriptor constraint )\n-            throws ProcedureException\n+    public static String createStatement(Function<String, IndexDescriptor> indexLookup, TokenRead tokenRead, ConstraintDescriptor constraint)\n+      throws ProcedureException\n     {\n         try\n         {\n             String name = constraint.getName();\n-            if ( constraint.isIndexBackedConstraint() )\n+            if (constraint.isIndexBackedConstraint())\n             {\n-                final String labelsOrRelTypes = labelsOrRelTypesAsStringArray( tokenRead, constraint.schema() );\n-                final String properties = propertiesAsStringArray( tokenRead, constraint.schema() );\n-                IndexDescriptor backingIndex = indexLookup.apply( name );\n+                final String labelsOrRelTypes = labelsOrRelTypesAsStringArray(tokenRead, constraint.schema());\n+                final String properties = propertiesAsStringArray(tokenRead, constraint.schema());\n+                IndexDescriptor backingIndex = indexLookup.apply(name);\n                 String providerName = backingIndex.getIndexProvider().name();\n-                String config = btreeConfigAsString( backingIndex );\n-                if ( constraint.isUniquenessConstraint() )\n+                String config = btreeConfigAsString(backingIndex);\n+                if (constraint.isUniquenessConstraint())\n                 {\n-                    return format( CREATE_UNIQUE_PROPERTY_CONSTRAINT,\n-                            name, labelsOrRelTypes, properties, providerName, config );\n+                    return format(CREATE_UNIQUE_PROPERTY_CONSTRAINT,\n+                      name, labelsOrRelTypes, properties, providerName, config);\n                 }\n-                if ( constraint.isNodeKeyConstraint() )\n+                if (constraint.isNodeKeyConstraint())\n                 {\n-                    return format( CREATE_NODE_KEY_CONSTRAINT,\n-                            name, labelsOrRelTypes, properties, providerName, config );\n+                    return format(CREATE_NODE_KEY_CONSTRAINT,\n+                      name, labelsOrRelTypes, properties, providerName, config);\n                 }\n             }\n-            if ( constraint.isNodePropertyExistenceConstraint() )\n+            if (constraint.isNodePropertyExistenceConstraint())\n             {\n                 // \"create CONSTRAINT ON (a:A) ASSERT (a.p) IS NOT NULL\"\n                 int labelId = constraint.schema().getLabelId();\n-                String label = tokenRead.nodeLabelName( labelId );\n+                String label = tokenRead.nodeLabelName(labelId);\n                 int propertyId = constraint.schema().getPropertyId();\n-                String property = tokenRead.propertyKeyName( propertyId );\n-                return format( CREATE_NODE_EXISTENCE_CONSTRAINT,\n-                        escapeBackticks( name ), escapeBackticks( label ), escapeBackticks( property ) );\n+                String property = tokenRead.propertyKeyName(propertyId);\n+                return format(CREATE_NODE_EXISTENCE_CONSTRAINT,\n+                  escapeBackticks(name), escapeBackticks(label), escapeBackticks(property));\n             }\n-            if ( constraint.isRelationshipPropertyExistenceConstraint() )\n+            if (constraint.isRelationshipPropertyExistenceConstraint())\n             {\n                 // \"create CONSTRAINT ON ()-[r:R]-() ASSERT (r.p) IS NOT NULL\"\n                 int relationshipTypeId = constraint.schema().getRelTypeId();\n-                String relationshipType = tokenRead.relationshipTypeName( relationshipTypeId );\n+                String relationshipType = tokenRead.relationshipTypeName(relationshipTypeId);\n                 int propertyId = constraint.schema().getPropertyId();\n-                String property = tokenRead.propertyKeyName( propertyId );\n-                return format( CREATE_RELATIONSHIP_EXISTENCE_CONSTRAINT,\n-                        escapeBackticks( name ), escapeBackticks( relationshipType ), escapeBackticks( property ) );\n+                String property = tokenRead.propertyKeyName(propertyId);\n+                return format(CREATE_RELATIONSHIP_EXISTENCE_CONSTRAINT,\n+                  escapeBackticks(name), escapeBackticks(relationshipType), escapeBackticks(property));\n             }\n-            throw new IllegalArgumentException( \"Did not recognize constraint type \" + constraint );\n-        }\n-        catch ( KernelException e )\n+            throw new IllegalArgumentException(\"Did not recognize constraint type \" + constraint);\n+        } catch (KernelException e)\n         {\n-            throw new ProcedureException( Status.General.UnknownError, e, \"Failed to re-create create statement.\" );\n+            throw new ProcedureException(Status.General.UnknownError, e, \"Failed to re-create create statement.\");\n         }\n     }\n \n-    private static String dropStatement( ConstraintDescriptor constraint )\n+    private static String dropStatement(ConstraintDescriptor constraint)\n     {\n-        return format( DROP_CONSTRAINT, escapeBackticks( constraint.getName() ) );\n+        return format(DROP_CONSTRAINT, escapeBackticks(constraint.getName()));\n     }\n \n-    public static String createStatement( TokenRead tokenRead, IndexDescriptor indexDescriptor ) throws ProcedureException\n+    public static String createStatement(TokenRead tokenRead, IndexDescriptor indexDescriptor) throws ProcedureException\n     {\n         try\n         {\n             final String name = indexDescriptor.getName();\n-            final String labelsOrRelTypes = labelsOrRelTypesAsStringArray( tokenRead, indexDescriptor.schema() );\n-            final String properties = propertiesAsStringArray( tokenRead, indexDescriptor.schema() );\n-            switch ( indexDescriptor.getIndexType() )\n+            final String labelsOrRelTypes = labelsOrRelTypesAsStringArray(tokenRead, indexDescriptor.schema());\n+            final String properties = propertiesAsStringArray(tokenRead, indexDescriptor.schema());\n+            switch (indexDescriptor.getIndexType())\n             {\n-            case BTREE:\n-                String btreeConfig = btreeConfigAsString( indexDescriptor );\n-                final String providerName = indexDescriptor.getIndexProvider().name();\n-                return format( CREATE_BTREE_INDEX,\n-                        name, labelsOrRelTypes, properties, providerName, btreeConfig );\n-            case FULLTEXT:\n-                String fulltextConfig = fulltextConfigAsString( indexDescriptor );\n-                switch ( indexDescriptor.schema().entityType() )\n-                {\n-                case NODE:\n-                    return format( CREATE_NODE_FULLTEXT_INDEX,\n-                            name, labelsOrRelTypes, properties, fulltextConfig );\n-                case RELATIONSHIP:\n-                    return format( CREATE_RELATIONSHIP_FULLTEXT_INDEX,\n-                            name, labelsOrRelTypes, properties, fulltextConfig );\n+                case BTREE:\n+                    String btreeConfig = btreeConfigAsString(indexDescriptor);\n+                    final String providerName = indexDescriptor.getIndexProvider().name();\n+                    return format(CREATE_BTREE_INDEX,\n+                      name, labelsOrRelTypes, properties, providerName, btreeConfig);\n+                case FULLTEXT:\n+                    String fulltextConfig = fulltextConfigAsString(indexDescriptor);\n+                    switch (indexDescriptor.schema().entityType())\n+                    {\n+                        case NODE:\n+                            return format(CREATE_NODE_FULLTEXT_INDEX,\n+                              name, labelsOrRelTypes, properties, fulltextConfig);\n+                        case RELATIONSHIP:\n+                            return format(CREATE_RELATIONSHIP_FULLTEXT_INDEX,\n+                              name, labelsOrRelTypes, properties, fulltextConfig);\n+                        default:\n+                            throw new IllegalArgumentException(\"Did not recognize entity type \" + indexDescriptor.schema().entityType());\n+                    }\n                 default:\n-                    throw new IllegalArgumentException( \"Did not recognize entity type \" + indexDescriptor.schema().entityType() );\n-                }\n-            default:\n-                throw new IllegalArgumentException( \"Did not recognize index type \" + indexDescriptor.getIndexType() );\n+                    throw new IllegalArgumentException(\"Did not recognize index type \" + indexDescriptor.getIndexType());\n             }\n-        }\n-        catch ( KernelException e )\n+        } catch (KernelException e)\n         {\n-            throw new ProcedureException( Status.General.UnknownError, e, \"Failed to re-create create statement.\" );\n+            throw new ProcedureException(Status.General.UnknownError, e, \"Failed to re-create create statement.\");\n         }\n     }\n \n-    private static String btreeConfigAsString( IndexDescriptor indexDescriptor )\n+    private static String btreeConfigAsString(IndexDescriptor indexDescriptor)\n     {\n         final IndexConfig indexConfig = indexDescriptor.getIndexConfig();\n         StringJoiner configString = configStringJoiner();\n-        for ( Pair<String,Value> entry : indexConfig.entries() )\n+        for (Pair<String, Value> entry : indexConfig.entries())\n         {\n-            String singleConfig = format( SINGLE_CONFIG, entry.getOne(), btreeConfigValueAsString( entry.getTwo() ) );\n-            configString.add( singleConfig );\n+            String singleConfig = format(SINGLE_CONFIG, entry.getOne(), btreeConfigValueAsString(entry.getTwo()));\n+            configString.add(singleConfig);\n         }\n         return configString.toString();\n     }\n \n-    private static String btreeConfigValueAsString( Value configValue )\n+    private static String btreeConfigValueAsString(Value configValue)\n     {\n-        if ( configValue instanceof DoubleArray )\n+        if (configValue instanceof DoubleArray)\n         {\n             final DoubleArray doubleArray = (DoubleArray) configValue;\n-            return Arrays.toString( doubleArray.asObjectCopy() );\n+            return Arrays.toString(doubleArray.asObjectCopy());\n         }\n-        if ( configValue instanceof IntValue )\n+        if (configValue instanceof IntValue)\n         {\n             final IntValue intValue = (IntValue) configValue;\n             return \"\" + intValue.value();\n         }\n-        if ( configValue instanceof BooleanValue )\n+        if (configValue instanceof BooleanValue)\n         {\n             final BooleanValue booleanValue = (BooleanValue) configValue;\n             return \"\" + booleanValue.booleanValue();\n         }\n-        if ( configValue instanceof StringValue )\n+        if (configValue instanceof StringValue)\n         {\n             final StringValue stringValue = (StringValue) configValue;\n             return \"'\" + stringValue.stringValue() + \"'\";\n         }\n-        throw new IllegalArgumentException( \"Could not convert config value '\" + configValue + \"' to config string.\" );\n+        throw new IllegalArgumentException(\"Could not convert config value '\" + configValue + \"' to config string.\");\n     }\n \n-    private static String fulltextConfigAsString( IndexDescriptor indexDescriptor )\n+    private static String fulltextConfigAsString(IndexDescriptor indexDescriptor)\n     {\n         final IndexConfig indexConfig = indexDescriptor.getIndexConfig();\n         StringJoiner configString = configStringJoiner();\n-        for ( Pair<String,Value> entry : indexConfig.entries() )\n+        for (Pair<String, Value> entry : indexConfig.entries())\n         {\n             String key = entry.getOne();\n-            String singleConfig = format( SINGLE_CONFIG, key, fulltextConfigValueAsString( entry.getTwo() ) );\n-            configString.add( singleConfig );\n+            String singleConfig = format(SINGLE_CONFIG, key, fulltextConfigValueAsString(entry.getTwo()));\n+            configString.add(singleConfig);\n         }\n         return configString.toString();\n     }\n \n-    private static String fulltextConfigValueAsString( Value configValue )\n+    private static String fulltextConfigValueAsString(Value configValue)\n     {\n-        if ( configValue instanceof BooleanValue )\n+        if (configValue instanceof BooleanValue)\n         {\n             final BooleanValue booleanValue = (BooleanValue) configValue;\n             return \"'\" + booleanValue.booleanValue() + \"'\";\n         }\n-        if ( configValue instanceof StringValue )\n+        if (configValue instanceof StringValue)\n         {\n             final StringValue stringValue = (StringValue) configValue;\n             return \"'\" + stringValue.stringValue() + \"'\";\n         }\n-        throw new IllegalArgumentException( \"Could not convert config value '\" + configValue + \"' to config string.\" );\n+        throw new IllegalArgumentException(\"Could not convert config value '\" + configValue + \"' to config string.\");\n     }\n \n-    private static String propertiesAsStringArray( TokenRead tokenRead, SchemaDescriptor schema ) throws PropertyKeyIdNotFoundKernelException\n+    private static String propertiesAsStringArray(TokenRead tokenRead, SchemaDescriptor schema) throws PropertyKeyIdNotFoundKernelException\n     {\n         StringJoiner properties = arrayStringJoiner();\n-        for ( int propertyId : schema.getPropertyIds() )\n+        for (int propertyId : schema.getPropertyIds())\n         {\n-            properties.add( \"'\" + tokenRead.propertyKeyName( propertyId ) + \"'\" );\n+            properties.add(\"'\" + tokenRead.propertyKeyName(propertyId) + \"'\");\n         }\n         return properties.toString();\n     }\n \n-    private static String labelsOrRelTypesAsStringArray( TokenRead tokenRead, SchemaDescriptor schema ) throws KernelException\n+    private static String labelsOrRelTypesAsStringArray(TokenRead tokenRead, SchemaDescriptor schema) throws KernelException\n     {\n         StringJoiner labelsOrRelTypes = arrayStringJoiner();\n-        for ( int entityTokenId : schema.getEntityTokenIds() )\n+        for (int entityTokenId : schema.getEntityTokenIds())\n         {\n-            if ( EntityType.NODE.equals( schema.entityType() ) )\n+            if (EntityType.NODE.equals(schema.entityType()))\n             {\n-                labelsOrRelTypes.add( \"'\" + tokenRead.nodeLabelName( entityTokenId ) + \"'\" );\n-            }\n-            else\n+                labelsOrRelTypes.add(\"'\" + tokenRead.nodeLabelName(entityTokenId) + \"'\");\n+            } else\n             {\n-                labelsOrRelTypes.add( \"'\" + tokenRead.relationshipTypeName( entityTokenId ) + \"'\" );\n+                labelsOrRelTypes.add(\"'\" + tokenRead.relationshipTypeName(entityTokenId) + \"'\");\n             }\n         }\n         return labelsOrRelTypes.toString();\n     }\n \n-    private static String dropStatement( IndexDescriptor indexDescriptor )\n+    private static String dropStatement(IndexDescriptor indexDescriptor)\n     {\n-        return format( DROP_INDEX, escapeBackticks( indexDescriptor.getName() ) );\n+        return format(DROP_INDEX, escapeBackticks(indexDescriptor.getName()));\n     }\n \n     private static StringJoiner configStringJoiner()\n     {\n-        return new StringJoiner( \",\", \"{\", \"}\" );\n+        return new StringJoiner(\",\", \"{\", \"}\");\n     }\n \n     private static StringJoiner arrayStringJoiner()\n     {\n-        return new StringJoiner( \", \", \"[\", \"]\" );\n+        return new StringJoiner(\", \", \"[\", \"]\");\n     }\n \n-    private static String escapeBackticks( String str )\n+    private static String escapeBackticks(String str)\n     {\n-        return str.replaceAll( \"`\", \"``\" );\n+        return str.replaceAll(\"`\", \"``\");\n     }\n \n     enum SchemaRuleType\n",
            "diff_size": 120
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/649/SchemaStatementProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/649/SchemaStatementProcedure.java\nindex b3efbdd1c3b..0eee475ec7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/649/SchemaStatementProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/649/SchemaStatementProcedure.java\n@@ -366,4 +366,4 @@ public final class SchemaStatementProcedure\n         INDEX,\n         CONSTRAINT\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}