{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1583",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1583/UTF8StringValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1583/UTF8StringValue.java\nindex c4d871f413b..5673ed64b97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1583/UTF8StringValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1583/UTF8StringValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.nio.charset.StandardCharsets;\n@@ -34,531 +35,534 @@ import static org.neo4j.values.storable.Values.utf8Value;\n  */\n public final class UTF8StringValue extends StringValue\n {\n-    /** Used for removing the high order bit from byte. */\n-    private static final int HIGH_BIT_MASK = 0b0111_1111;\n-    /** Used for detecting non-continuation bytes. For example {@code 0b10xx_xxxx}. */\n-    private static final int NON_CONTINUATION_BIT_MASK = 0b0100_0000;\n-\n-    private volatile String value;\n-    private final byte[] bytes;\n-    private final int offset;\n-    private final int byteLength;\n-\n-    UTF8StringValue( byte[] bytes, int offset, int length )\n+  /**\n+   * Used for removing the high order bit from byte.\n+   */\n+  private static final int HIGH_BIT_MASK = 0b0111_1111;\n+  /**\n+   * Used for detecting non-continuation bytes. For example {@code 0b10xx_xxxx}.\n+   */\n+  private static final int NON_CONTINUATION_BIT_MASK = 0b0100_0000;\n+\n+  private volatile String value;\n+  private final byte[] bytes;\n+  private final int offset;\n+  private final int byteLength;\n+\n+  UTF8StringValue(byte[] bytes, int offset, int length)\n+  {\n+    assert bytes != null;\n+    this.bytes = bytes;\n+    this.offset = offset;\n+    this.byteLength = length;\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeUTF8(bytes, offset, byteLength);\n+  }\n+\n+  @Override\n+  public boolean equals(Value value)\n+  {\n+    if (value instanceof UTF8StringValue)\n     {\n-        assert bytes != null;\n-        this.bytes = bytes;\n-        this.offset = offset;\n-        this.byteLength = length;\n-    }\n-\n-    @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n+      UTF8StringValue other = (UTF8StringValue) value;\n+      if (byteLength != other.byteLength)\n+      {\n+        return false;\n+      }\n+      for (int i = offset, j = other.offset; i < byteLength; i++, j++)\n+      {\n+        if (bytes[i] != other.bytes[j])\n+        {\n+          return false;\n+        }\n+      }\n+      return true;\n+    } else\n     {\n-        writer.writeUTF8( bytes, offset, byteLength );\n+      return super.equals(value);\n     }\n+  }\n \n-    @Override\n-    public boolean equals( Value value )\n+  @Override\n+  String value()\n+  {\n+    String s = value;\n+    if (s == null)\n     {\n-        if ( value instanceof UTF8StringValue )\n+      synchronized (this)\n+      {\n+        s = value;\n+        if (s == null)\n         {\n-            UTF8StringValue other = (UTF8StringValue) value;\n-            if ( byteLength != other.byteLength )\n-            {\n-                return false;\n-            }\n-            for ( int i = offset, j = other.offset; i < byteLength; i++, j++ )\n-            {\n-                if ( bytes[i] != other.bytes[j] )\n-                {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        }\n-        else\n-        {\n-            return super.equals( value );\n+          value = s = new String(bytes, offset, byteLength, StandardCharsets.UTF_8);\n         }\n+      }\n     }\n-\n-    @Override\n-    String value()\n+    return s;\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return numberOfCodePoints(bytes, offset, byteLength);\n+  }\n+\n+  private static int numberOfCodePoints(byte[] bytes, int offset, int byteLength)\n+  {\n+    int count = 0, i = offset, len = offset + byteLength;\n+    while (i < len)\n     {\n-        String s = value;\n-        if ( s == null )\n-        {\n-            synchronized ( this )\n-            {\n-                s = value;\n-                if ( s == null )\n-                {\n-                    value = s = new String( bytes, offset, byteLength, StandardCharsets.UTF_8 );\n-                }\n-            }\n-        }\n-        return s;\n+      byte b = bytes[i];\n+      //If high bit is zero (equivalent to the byte being positive in two's complement)\n+      //we are dealing with an ascii value and use a single byte for storing the value.\n+      if (b >= 0)\n+      {\n+        i++;\n+        count++;\n+        continue;\n+      }\n+\n+      //The number of high bits tells us how many bytes we use to store the value\n+      //e.g. 110xxxx -> need two bytes, 1110xxxx -> need three bytes, 11110xxx -> needs\n+      //four bytes\n+      while (b < 0)\n+      {\n+        i++;\n+        b = (byte) (b << 1);\n+      }\n+      count++;\n     }\n+    return count;\n+  }\n \n-    @Override\n-    public int length()\n+  @Override\n+  public int computeHash()\n+  {\n+    if (bytes.length == 0 || byteLength == 0)\n     {\n-        return numberOfCodePoints( bytes, offset, byteLength );\n+      return 0;\n     }\n \n-    private static int numberOfCodePoints( byte[] bytes, int offset, int byteLength )\n+    CodePointCursor cpc = new CodePointCursor();\n+    cpc.values = bytes;\n+    cpc.i = offset;\n+    int hash = 1;\n+    int len = offset + byteLength;\n+\n+    while (cpc.i < len)\n     {\n-        int count = 0, i = offset, len = offset + byteLength;\n-        while ( i < len )\n-        {\n-            byte b = bytes[i];\n-            //If high bit is zero (equivalent to the byte being positive in two's complement)\n-            //we are dealing with an ascii value and use a single byte for storing the value.\n-            if ( b >= 0 )\n-            {\n-                i++;\n-                count++;\n-                continue;\n-            }\n-\n-            //The number of high bits tells us how many bytes we use to store the value\n-            //e.g. 110xxxx -> need two bytes, 1110xxxx -> need three bytes, 11110xxx -> needs\n-            //four bytes\n-            while ( b < 0 )\n-            {\n-                i++;\n-                b = (byte) (b << 1);\n-            }\n-            count++;\n-        }\n-        return count;\n+      hash = 31 * hash + (int) cpc.nextCodePoint();\n     }\n-\n-    @Override\n-    public int computeHash()\n+    return hash;\n+  }\n+\n+  @Override\n+  public long updateHash(HashFunction hashFunction, long hash)\n+  {\n+    CodePointCursor cpc = new CodePointCursor();\n+    cpc.values = bytes;\n+    cpc.i = offset;\n+    int len = offset + byteLength;\n+\n+    while (cpc.i < len)\n     {\n-        if ( bytes.length == 0 || byteLength == 0 )\n-        {\n-            return 0;\n-        }\n-\n-        CodePointCursor cpc = new CodePointCursor();\n-        cpc.values = bytes;\n-        cpc.i = offset;\n-        int hash = 1;\n-        int len = offset + byteLength;\n-\n-        while ( cpc.i < len )\n-        {\n-            hash = 31 * hash + (int) cpc.nextCodePoint();\n-        }\n-        return hash;\n+      long codePointA = cpc.nextCodePoint() << 32;\n+      long codePointB = 0L;\n+      if (cpc.i < len)\n+      {\n+        codePointB = cpc.nextCodePoint();\n+      }\n+      hash = hashFunction.update(hash, codePointA + codePointB);\n     }\n \n-    @Override\n-    public long updateHash( HashFunction hashFunction, long hash )\n-    {\n-        CodePointCursor cpc = new CodePointCursor();\n-        cpc.values = bytes;\n-        cpc.i = offset;\n-        int len = offset + byteLength;\n+    return hashFunction.update(hash, cpc.codePointCount);\n+  }\n \n-        while ( cpc.i < len )\n-        {\n-            long codePointA = cpc.nextCodePoint() << 32;\n-            long codePointB = 0L;\n-            if ( cpc.i < len )\n-            {\n-                codePointB = cpc.nextCodePoint();\n-            }\n-            hash = hashFunction.update( hash, codePointA + codePointB );\n-        }\n+  public TextValue plus(UTF8StringValue other)\n+  {\n+    byte[] newBytes = new byte[byteLength + other.byteLength];\n+    System.arraycopy(bytes, offset, newBytes, 0, byteLength);\n+    System.arraycopy(other.bytes, other.offset, newBytes, byteLength, other.byteLength);\n+    return utf8Value(newBytes);\n+  }\n \n-        return hashFunction.update( hash, cpc.codePointCount );\n-    }\n+  private static class CodePointCursor\n+  {\n+    byte[] values;\n+    int i;\n+    int codePointCount;\n \n-    public TextValue plus( UTF8StringValue other )\n+    long nextCodePoint()\n     {\n-        byte[] newBytes = new byte[byteLength + other.byteLength];\n-        System.arraycopy( bytes, offset, newBytes, 0, byteLength );\n-        System.arraycopy( other.bytes, other.offset, newBytes, byteLength, other.byteLength );\n-        return utf8Value( newBytes );\n+      codePointCount++;\n+      byte b = values[i];\n+      //If high bit is zero (equivalent to the byte being positive in two's complement)\n+      //we are dealing with an ascii value and use a single byte for storing the value.\n+      if (b >= 0)\n+      {\n+        i++;\n+        return b;\n+      }\n+\n+      //We can now have one of three situations.\n+      //Byte1    Byte2    Byte3    Byte4\n+      //110xxxxx 10xxxxxx\n+      //1110xxxx 10xxxxxx 10xxxxxx\n+      //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n+      //Figure out how many bytes we need by reading the number of leading bytes\n+      int bytesNeeded = 0;\n+      while (b < 0)\n+      {\n+        bytesNeeded++;\n+        b = (byte) (b << 1);\n+      }\n+      int codePoint = codePoint(values, b, i, bytesNeeded);\n+      i += bytesNeeded;\n+      return codePoint;\n     }\n+  }\n \n-    private static class CodePointCursor\n+  @Override\n+  public TextValue substring(int start, int length)\n+  {\n+    if (start < 0 || length < 0)\n     {\n-        byte[] values;\n-        int i;\n-        int codePointCount;\n-\n-        long nextCodePoint()\n-        {\n-            codePointCount++;\n-            byte b = values[i];\n-            //If high bit is zero (equivalent to the byte being positive in two's complement)\n-            //we are dealing with an ascii value and use a single byte for storing the value.\n-            if ( b >= 0 )\n-            {\n-                i++;\n-                return b;\n-            }\n-\n-            //We can now have one of three situations.\n-            //Byte1    Byte2    Byte3    Byte4\n-            //110xxxxx 10xxxxxx\n-            //1110xxxx 10xxxxxx 10xxxxxx\n-            //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n-            //Figure out how many bytes we need by reading the number of leading bytes\n-            int bytesNeeded = 0;\n-            while ( b < 0 )\n-            {\n-                bytesNeeded++;\n-                b = (byte) (b << 1);\n-            }\n-            int codePoint = codePoint( values, b, i, bytesNeeded );\n-            i += bytesNeeded;\n-            return codePoint;\n-        }\n+      throw new IndexOutOfBoundsException(\"Cannot handle negative start index nor negative length\");\n     }\n-\n-    @Override\n-    public TextValue substring( int start, int length )\n+    if (length == 0)\n     {\n-        if ( start < 0 || length < 0 )\n-        {\n-            throw new IndexOutOfBoundsException( \"Cannot handle negative start index nor negative length\" );\n-        }\n-        if ( length == 0 )\n-        {\n-            return StringValue.EMTPY;\n-        }\n-\n-        int end = start + length;\n-        byte[] values = bytes;\n-        int count = 0, byteStart = -1, byteEnd = -1, i = offset, len = offset + byteLength;\n-        while ( i < len )\n-        {\n-            if ( count == start )\n-            {\n-                byteStart = i;\n-            }\n-            if ( count == end )\n-            {\n-                byteEnd = i;\n-                break;\n-            }\n-            byte b = values[i];\n-            //If high bit is zero (equivalent to the byte being positive in two's complement)\n-            //we are dealing with an ascii value and use a single byte for storing the value.\n-            if ( b >= 0 )\n-            {\n-                i++;\n-            }\n-\n-            while ( b < 0 )\n-            {\n-                i++;\n-                b = (byte) (b << 1);\n-            }\n-            count++;\n-        }\n-        if ( byteEnd < 0 )\n-        {\n-            byteEnd = len;\n-        }\n-        if ( byteStart < 0 )\n-        {\n-            return StringValue.EMTPY;\n-        }\n-        return new UTF8StringValue( values, byteStart, byteEnd - byteStart );\n+      return StringValue.EMTPY;\n     }\n \n-    @Override\n-    public TextValue trim()\n+    int end = start + length;\n+    byte[] values = bytes;\n+    int count = 0, byteStart = -1, byteEnd = -1, i = offset, len = offset + byteLength;\n+    while (i < len)\n+    {\n+      if (count == start)\n+      {\n+        byteStart = i;\n+      }\n+      if (count == end)\n+      {\n+        byteEnd = i;\n+        break;\n+      }\n+      byte b = values[i];\n+      //If high bit is zero (equivalent to the byte being positive in two's complement)\n+      //we are dealing with an ascii value and use a single byte for storing the value.\n+      if (b >= 0)\n+      {\n+        i++;\n+      }\n+\n+      while (b < 0)\n+      {\n+        i++;\n+        b = (byte) (b << 1);\n+      }\n+      count++;\n+    }\n+    if (byteEnd < 0)\n     {\n-        byte[] values = bytes;\n+      byteEnd = len;\n+    }\n+    if (byteStart < 0)\n+    {\n+      return StringValue.EMTPY;\n+    }\n+    return new UTF8StringValue(values, byteStart, byteEnd - byteStart);\n+  }\n \n-        if ( values.length == 0 || byteLength == 0 )\n-        {\n-            return this;\n-        }\n+  @Override\n+  public TextValue trim()\n+  {\n+    byte[] values = bytes;\n \n-        int startIndex = trimLeftIndex();\n-        int endIndex = trimRightIndex();\n-        if ( startIndex > endIndex )\n-        {\n-            return StringValue.EMTPY;\n-        }\n-\n-        return new UTF8StringValue( values, startIndex, Math.max( endIndex + 1 - startIndex, 0 ) );\n+    if (values.length == 0 || byteLength == 0)\n+    {\n+      return this;\n     }\n \n-    @Override\n-    public TextValue ltrim()\n+    int startIndex = trimLeftIndex();\n+    int endIndex = trimRightIndex();\n+    if (startIndex > endIndex)\n     {\n-        byte[] values = bytes;\n-        if ( values.length == 0 || byteLength == 0 )\n-        {\n-            return this;\n-        }\n-\n-        int startIndex = trimLeftIndex();\n-        if ( startIndex >= values.length )\n-        {\n-            return StringValue.EMTPY;\n-        }\n-        return new UTF8StringValue( values, startIndex, values.length - startIndex );\n+      return StringValue.EMTPY;\n     }\n \n-    @Override\n-    public TextValue rtrim()\n-    {\n-        byte[] values = bytes;\n-        if ( values.length == 0 || byteLength == 0 )\n-        {\n-            return this;\n-        }\n+    return new UTF8StringValue(values, startIndex, Math.max(endIndex + 1 - startIndex, 0));\n+  }\n \n-        int endIndex = trimRightIndex();\n-        if ( endIndex < 0 )\n-        {\n-            return StringValue.EMTPY;\n-        }\n-        return new UTF8StringValue( values, offset, endIndex + 1 - offset );\n+  @Override\n+  public TextValue ltrim()\n+  {\n+    byte[] values = bytes;\n+    if (values.length == 0 || byteLength == 0)\n+    {\n+      return this;\n     }\n \n-    @Override\n-    public TextValue reverse()\n+    int startIndex = trimLeftIndex();\n+    if (startIndex >= values.length)\n+    {\n+      return StringValue.EMTPY;\n+    }\n+    return new UTF8StringValue(values, startIndex, values.length - startIndex);\n+  }\n+\n+  @Override\n+  public TextValue rtrim()\n+  {\n+    byte[] values = bytes;\n+    if (values.length == 0 || byteLength == 0)\n     {\n-        byte[] values = bytes;\n+      return this;\n+    }\n \n-        if ( values.length == 0 || byteLength == 0 )\n-        {\n-            return StringValue.EMTPY;\n-        }\n+    int endIndex = trimRightIndex();\n+    if (endIndex < 0)\n+    {\n+      return StringValue.EMTPY;\n+    }\n+    return new UTF8StringValue(values, offset, endIndex + 1 - offset);\n+  }\n \n-        int i = offset, len = offset + byteLength;\n-        byte[] newValues = new byte[byteLength];\n-        while ( i < len )\n-        {\n-            byte b = values[i];\n-            //If high bit is zero (equivalent to the byte being positive in two's complement)\n-            //we are dealing with an ascii value and use a single byte for storing the value.\n-            if ( b >= 0 )\n-            {\n-                //a single byte is trivial to reverse\n-                //just put it at the opposite end of the new array\n-                newValues[len - 1 - i] = b;\n-                i++;\n-                continue;\n-            }\n-\n-            //We can now have one of three situations.\n-            //Byte1    Byte2    Byte3    Byte4\n-            //110xxxxx 10xxxxxx\n-            //1110xxxx 10xxxxxx 10xxxxxx\n-            //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n-            //Figure out how many bytes we need by reading the number of leading bytes\n-            int bytesNeeded = 0;\n-            while ( b < 0 )\n-            {\n-                bytesNeeded++;\n-                b = (byte) (b << 1);\n-            }\n-            //reversing when multiple bytes are needed for the code point we cannot just reverse\n-            //since we need to preserve the code point while moving it,\n-            //e.g. [A, b1,b2, B] -> [B, b1,b2, A]\n-            System.arraycopy( values, i, newValues, len - i - bytesNeeded, bytesNeeded );\n-            i += bytesNeeded;\n-        }\n+  @Override\n+  public TextValue reverse()\n+  {\n+    byte[] values = bytes;\n \n-        return new UTF8StringValue( newValues, 0, newValues.length );\n+    if (values.length == 0 || byteLength == 0)\n+    {\n+      return StringValue.EMTPY;\n     }\n \n-    @Override\n-    public int compareTo( TextValue other )\n+    int i = offset, len = offset + byteLength;\n+    byte[] newValues = new byte[byteLength];\n+    while (i < len)\n     {\n-        if ( !(other instanceof UTF8StringValue) )\n-        {\n-            return super.compareTo( other );\n-        }\n-        UTF8StringValue otherUTF8 = (UTF8StringValue) other;\n-        return byteArrayCompare( bytes, offset, byteLength, otherUTF8.bytes, otherUTF8.offset, otherUTF8.byteLength );\n+      byte b = values[i];\n+      //If high bit is zero (equivalent to the byte being positive in two's complement)\n+      //we are dealing with an ascii value and use a single byte for storing the value.\n+      if (b >= 0)\n+      {\n+        //a single byte is trivial to reverse\n+        //just put it at the opposite end of the new array\n+        newValues[len - 1 - i] = b;\n+        i++;\n+        continue;\n+      }\n+\n+      //We can now have one of three situations.\n+      //Byte1    Byte2    Byte3    Byte4\n+      //110xxxxx 10xxxxxx\n+      //1110xxxx 10xxxxxx 10xxxxxx\n+      //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n+      //Figure out how many bytes we need by reading the number of leading bytes\n+      int bytesNeeded = 0;\n+      while (b < 0)\n+      {\n+        bytesNeeded++;\n+        b = (byte) (b << 1);\n+      }\n+      //reversing when multiple bytes are needed for the code point we cannot just reverse\n+      //since we need to preserve the code point while moving it,\n+      //e.g. [A, b1,b2, B] -> [B, b1,b2, A]\n+      System.arraycopy(values, i, newValues, len - i - bytesNeeded, bytesNeeded);\n+      i += bytesNeeded;\n     }\n \n-    public static int byteArrayCompare( byte[] value1, byte[] value2 )\n+    return new UTF8StringValue(newValues, 0, newValues.length);\n+  }\n+\n+  @Override\n+  public int compareTo(TextValue other)\n+  {\n+    if (!(other instanceof UTF8StringValue))\n     {\n-        return byteArrayCompare( value1, 0, value1.length, value2, 0, value2.length );\n+      return super.compareTo(other);\n     }\n-\n-    public static int byteArrayCompare( byte[] value1, int value1Offset, int value1Length,\n-            byte[] value2, int value2Offset, int value2Length )\n+    UTF8StringValue otherUTF8 = (UTF8StringValue) other;\n+    return byteArrayCompare(bytes, offset, byteLength, otherUTF8.bytes, otherUTF8.offset, otherUTF8.byteLength);\n+  }\n+\n+  public static int byteArrayCompare(byte[] value1, byte[] value2)\n+  {\n+    return byteArrayCompare(value1, 0, value1.length, value2, 0, value2.length);\n+  }\n+\n+  public static int byteArrayCompare(byte[] value1, int value1Offset, int value1Length,\n+                                     byte[] value2, int value2Offset, int value2Length)\n+  {\n+    int len1 = value1Length;\n+    int len2 = value2Length;\n+    int lim = Math.min(len1, len2);\n+    int i = 0;\n+    while (i < lim)\n     {\n-        int len1 = value1Length;\n-        int len2 = value2Length;\n-        int lim = Math.min( len1, len2 );\n-        int i = 0;\n-        while ( i < lim )\n-        {\n-            int b1 = ((int) value1[i + value1Offset]) & 0xFF;\n-            int b2 = ((int) value2[i + value2Offset]) & 0xFF;\n-            if ( b1 != b2 )\n-            {\n-                return b1 - b2;\n-            }\n-            i++;\n-        }\n-        return len1 - len2;\n+      int b1 = ((int) value1[i + value1Offset]) & 0xFF;\n+      int b2 = ((int) value2[i + value2Offset]) & 0xFF;\n+      if (b1 != b2)\n+      {\n+        return b1 - b2;\n+      }\n+      i++;\n     }\n-\n-    @Override\n-    Matcher matcher( Pattern pattern )\n+    return len1 - len2;\n+  }\n+\n+  @Override\n+  Matcher matcher(Pattern pattern)\n+  {\n+    return pattern.matcher(value()); // TODO: can we do better here?\n+  }\n+\n+  private static int codePointAt(byte[] bytes, int i)\n+  {\n+    assert i < bytes.length;\n+    byte b = bytes[i];\n+    if (b >= 0)\n     {\n-        return pattern.matcher( value() ); // TODO: can we do better here?\n+      return b;\n     }\n-\n-    private static int codePointAt( byte[] bytes, int i )\n+    int bytesNeeded = 0;\n+    while (b < 0)\n     {\n-        assert i < bytes.length;\n-        byte b = bytes[i];\n-        if ( b >= 0 )\n-        {\n-            return b;\n-        }\n-        int bytesNeeded = 0;\n-        while ( b < 0 )\n-        {\n-            bytesNeeded++;\n-            b = (byte) (b << 1);\n-        }\n-        switch ( bytesNeeded )\n-        {\n-        case 2:\n-            return (b << 4) | (bytes[i + 1] & HIGH_BIT_MASK);\n-        case 3:\n-            return (b << 9) | ((bytes[i + 1] & HIGH_BIT_MASK) << 6) | (bytes[i + 2] & HIGH_BIT_MASK);\n-        case 4:\n-            return (b << 14) | ((bytes[i + 1] & HIGH_BIT_MASK) << 12) |\n-                   ((bytes[i + 2] & HIGH_BIT_MASK) << 6)\n-                   | (bytes[i + 3] & HIGH_BIT_MASK);\n-        default:\n-            throw new IllegalArgumentException( \"Malformed UTF8 value \" + bytesNeeded );\n-        }\n+      bytesNeeded++;\n+      b = (byte) (b << 1);\n     }\n-\n-    /**\n-     * Returns the left-most index into the underlying byte array that does not belong to a whitespace code point\n-     */\n-    private int trimLeftIndex()\n+    switch (bytesNeeded)\n     {\n-        int i = offset, len = offset + byteLength;\n-        while ( i < len )\n+      case 2:\n+        return (b << 4) | (bytes[i + 1] & HIGH_BIT_MASK);\n+      case 3:\n+        return (b << 9) | ((bytes[i + 1] & HIGH_BIT_MASK) << 6) | (bytes[i + 2] & HIGH_BIT_MASK);\n+      case 4:\n+        return (b << 14) | ((bytes[i + 1] & HIGH_BIT_MASK) << 12) |\n+            ((bytes[i + 2] & HIGH_BIT_MASK) << 6)\n+            | (bytes[i + 3] & HIGH_BIT_MASK);\n+      default:\n+        throw new IllegalArgumentException(\"Malformed UTF8 value \" + bytesNeeded);\n+    }\n+  }\n+\n+  /**\n+   * Returns the left-most index into the underlying byte array that does not belong to a whitespace code point\n+   */\n+  private int trimLeftIndex()\n+  {\n+    int i = offset, len = offset + byteLength;\n+    while (i < len)\n+    {\n+      byte b = bytes[i];\n+      //If high bit is zero (equivalent to the byte being positive in two's complement)\n+      //we are dealing with an ascii value and use a single byte for storing the value.\n+      if (b >= 0)\n+      {\n+        if (!Character.isWhitespace(b))\n         {\n-            byte b = bytes[i];\n-            //If high bit is zero (equivalent to the byte being positive in two's complement)\n-            //we are dealing with an ascii value and use a single byte for storing the value.\n-            if ( b >= 0 )\n-            {\n-                if ( !Character.isWhitespace( b ) )\n-                {\n-                    return i;\n-                }\n-                i++;\n-                continue;\n-            }\n-\n-            //We can now have one of three situations.\n-            //Byte1    Byte2    Byte3    Byte4\n-            //110xxxxx 10xxxxxx\n-            //1110xxxx 10xxxxxx 10xxxxxx\n-            //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n-            //Figure out how many bytes we need by reading the number of leading bytes\n-            int bytesNeeded = 0;\n-            while ( b < 0 )\n-            {\n-                bytesNeeded++;\n-                b = (byte) (b << 1);\n-            }\n-            int codePoint = codePoint( bytes, b, i, bytesNeeded );\n-            if ( !Character.isWhitespace( codePoint ) )\n-            {\n-                return i;\n-            }\n-            i += bytesNeeded;\n+          return i;\n         }\n+        i++;\n+        continue;\n+      }\n+\n+      //We can now have one of three situations.\n+      //Byte1    Byte2    Byte3    Byte4\n+      //110xxxxx 10xxxxxx\n+      //1110xxxx 10xxxxxx 10xxxxxx\n+      //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n+      //Figure out how many bytes we need by reading the number of leading bytes\n+      int bytesNeeded = 0;\n+      while (b < 0)\n+      {\n+        bytesNeeded++;\n+        b = (byte) (b << 1);\n+      }\n+      int codePoint = codePoint(bytes, b, i, bytesNeeded);\n+      if (!Character.isWhitespace(codePoint))\n+      {\n         return i;\n+      }\n+      i += bytesNeeded;\n     }\n-\n-    /**\n-     * Returns the right-most index into the underlying byte array that does not belong to a whitespace code point\n-     */\n-    private int trimRightIndex()\n+    return i;\n+  }\n+\n+  /**\n+   * Returns the right-most index into the underlying byte array that does not belong to a whitespace code point\n+   */\n+  private int trimRightIndex()\n+  {\n+    int index = offset + byteLength - 1;\n+    while (index >= 0)\n     {\n-        int index = offset + byteLength - 1;\n-        while ( index >= 0 )\n+      byte b = bytes[index];\n+      //If high bit is zero (equivalent to the byte being positive in two's complement)\n+      //we are dealing with an ascii value and use a single byte for storing the value.\n+      if (b >= 0)\n+      {\n+        if (!Character.isWhitespace(b))\n         {\n-            byte b = bytes[index];\n-            //If high bit is zero (equivalent to the byte being positive in two's complement)\n-            //we are dealing with an ascii value and use a single byte for storing the value.\n-            if ( b >= 0 )\n-            {\n-                if ( !Character.isWhitespace( b ) )\n-                {\n-                    return index;\n-                }\n-                index--;\n-                continue;\n-            }\n-\n-            //We can now have one of three situations.\n-            //Byte1    Byte2    Byte3    Byte4\n-            //110xxxxx 10xxxxxx\n-            //1110xxxx 10xxxxxx 10xxxxxx\n-            //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n-            int bytesNeeded = 1;\n-            while ( (b & NON_CONTINUATION_BIT_MASK) == 0 )\n-            {\n-                bytesNeeded++;\n-                b = bytes[--index];\n-            }\n-\n-            int codePoint = codePoint( bytes, (byte) (b << bytesNeeded), index, bytesNeeded );\n-            if ( !Character.isWhitespace( codePoint ) )\n-            {\n-                return Math.min( index + bytesNeeded - 1, bytes.length - 1 );\n-            }\n-            index--;\n-\n+          return index;\n         }\n-        return index;\n-    }\n+        index--;\n+        continue;\n+      }\n+\n+      //We can now have one of three situations.\n+      //Byte1    Byte2    Byte3    Byte4\n+      //110xxxxx 10xxxxxx\n+      //1110xxxx 10xxxxxx 10xxxxxx\n+      //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n+      int bytesNeeded = 1;\n+      while ((b & NON_CONTINUATION_BIT_MASK) == 0)\n+      {\n+        bytesNeeded++;\n+        b = bytes[--index];\n+      }\n+\n+      int codePoint = codePoint(bytes, (byte) (b << bytesNeeded), index, bytesNeeded);\n+      if (!Character.isWhitespace(codePoint))\n+      {\n+        return Math.min(index + bytesNeeded - 1, bytes.length - 1);\n+      }\n+      index--;\n \n-    public byte[] bytes()\n-    {\n-        return bytes;\n     }\n-\n-    static int codePoint( byte[] bytes, byte currentByte, int i, int bytesNeeded )\n+    return index;\n+  }\n+\n+  public byte[] bytes()\n+  {\n+    return bytes;\n+  }\n+\n+  static int codePoint(byte[] bytes, byte currentByte, int i, int bytesNeeded)\n+  {\n+    int codePoint;\n+    byte[] values = bytes;\n+    switch (bytesNeeded)\n     {\n-        int codePoint;\n-        byte[] values = bytes;\n-        switch ( bytesNeeded )\n-        {\n-        case 2:\n-            codePoint = (currentByte << 4) | (values[i + 1] & HIGH_BIT_MASK);\n-            break;\n-        case 3:\n-            codePoint = (currentByte << 9) | ((values[i + 1] & HIGH_BIT_MASK) << 6) | (values[i + 2] & HIGH_BIT_MASK);\n-            break;\n-        case 4:\n-            codePoint = (currentByte << 14) | ((values[i + 1] & HIGH_BIT_MASK) << 12) |\n-                        ((values[i + 2] & HIGH_BIT_MASK) << 6)\n-                        | (values[i + 3] & HIGH_BIT_MASK);\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"Malformed UTF8 value\" );\n-        }\n-        return codePoint;\n+      case 2:\n+        codePoint = (currentByte << 4) | (values[i + 1] & HIGH_BIT_MASK);\n+        break;\n+      case 3:\n+        codePoint = (currentByte << 9) | ((values[i + 1] & HIGH_BIT_MASK) << 6) | (values[i + 2] & HIGH_BIT_MASK);\n+        break;\n+      case 4:\n+        codePoint = (currentByte << 14) | ((values[i + 1] & HIGH_BIT_MASK) << 12) |\n+            ((values[i + 2] & HIGH_BIT_MASK) << 6)\n+            | (values[i + 3] & HIGH_BIT_MASK);\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\"Malformed UTF8 value\");\n     }\n+    return codePoint;\n+  }\n }\n",
            "diff_size": 753
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "155",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "359",
                    "column": "48",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1583/UTF8StringValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1583/UTF8StringValue.java\nindex c4d871f413b..60dbf2ad164 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1583/UTF8StringValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1583/UTF8StringValue.java\n@@ -128,11 +128,12 @@ public final class UTF8StringValue extends StringValue\n             while ( b < 0 )\n             {\n                 i++;\n-                b = (byte) (b << 1);\n+                b = (byte) ( b << 1 );\n             }\n             count++;\n         }\n-        return count;\n+\n+return count;\n     }\n \n     @Override\n@@ -151,9 +152,10 @@ public final class UTF8StringValue extends StringValue\n \n         while ( cpc.i < len )\n         {\n-            hash = 31 * hash + (int) cpc.nextCodePoint();\n+            hash = 31 * hash + ( int) cpc.nextCodePoint();\n         }\n-        return hash;\n+\n+return hash;\n     }\n \n     @Override\n@@ -172,7 +174,8 @@ public final class UTF8StringValue extends StringValue\n             {\n                 codePointB = cpc.nextCodePoint();\n             }\n-            hash = hashFunction.update( hash, codePointA + codePointB );\n+\n+hash = hashFunction.update( hash, codePointA + codePointB );\n         }\n \n         return hashFunction.update( hash, cpc.codePointCount );\n@@ -214,7 +217,7 @@ public final class UTF8StringValue extends StringValue\n             while ( b < 0 )\n             {\n                 bytesNeeded++;\n-                b = (byte) (b << 1);\n+                b = (byte) ( b << 1 );\n             }\n             int codePoint = codePoint( values, b, i, bytesNeeded );\n             i += bytesNeeded;\n@@ -229,7 +232,8 @@ public final class UTF8StringValue extends StringValue\n         {\n             throw new IndexOutOfBoundsException( \"Cannot handle negative start index nor negative length\" );\n         }\n-        if ( length == 0 )\n+\n+if ( length == 0 )\n         {\n             return StringValue.EMTPY;\n         }\n@@ -243,7 +247,8 @@ public final class UTF8StringValue extends StringValue\n             {\n                 byteStart = i;\n             }\n-            if ( count == end )\n+\n+if ( count == end )\n             {\n                 byteEnd = i;\n                 break;\n@@ -259,15 +264,17 @@ public final class UTF8StringValue extends StringValue\n             while ( b < 0 )\n             {\n                 i++;\n-                b = (byte) (b << 1);\n+                b = (byte) ( b << 1 );\n             }\n             count++;\n         }\n-        if ( byteEnd < 0 )\n+\n+if ( byteEnd < 0 )\n         {\n             byteEnd = len;\n         }\n-        if ( byteStart < 0 )\n+\n+if ( byteStart < 0 )\n         {\n             return StringValue.EMTPY;\n         }\n@@ -286,7 +293,7 @@ public final class UTF8StringValue extends StringValue\n \n         int startIndex = trimLeftIndex();\n         int endIndex = trimRightIndex();\n-        if ( startIndex > endIndex )\n+        if ( startIndex> endIndex )\n         {\n             return StringValue.EMTPY;\n         }\n@@ -349,8 +356,7 @@ public final class UTF8StringValue extends StringValue\n             {\n                 //a single byte is trivial to reverse\n                 //just put it at the opposite end of the new array\n-                newValues[len - 1 - i] = b;\n-                i++;\n+                newValues[len - 1 - i] = b; i++;\n                 continue;\n             }\n \n@@ -364,7 +370,7 @@ public final class UTF8StringValue extends StringValue\n             while ( b < 0 )\n             {\n                 bytesNeeded++;\n-                b = (byte) (b << 1);\n+                b = (byte) ( b << 1 );\n             }\n             //reversing when multiple bytes are needed for the code point we cannot just reverse\n             //since we need to preserve the code point while moving it,\n@@ -379,11 +385,12 @@ public final class UTF8StringValue extends StringValue\n     @Override\n     public int compareTo( TextValue other )\n     {\n-        if ( !(other instanceof UTF8StringValue) )\n+        if ( !( other instanceof UTF8StringValue) )\n         {\n             return super.compareTo( other );\n         }\n-        UTF8StringValue otherUTF8 = (UTF8StringValue) other;\n+\n+UTF8StringValue otherUTF8 = (UTF8StringValue) other;\n         return byteArrayCompare( bytes, offset, byteLength, otherUTF8.bytes, otherUTF8.offset, otherUTF8.byteLength );\n     }\n \n@@ -409,7 +416,8 @@ public final class UTF8StringValue extends StringValue\n             }\n             i++;\n         }\n-        return len1 - len2;\n+\n+return len1 - len2;\n     }\n \n     @Override\n@@ -430,19 +438,19 @@ public final class UTF8StringValue extends StringValue\n         while ( b < 0 )\n         {\n             bytesNeeded++;\n-            b = (byte) (b << 1);\n+            b = (byte) ( b << 1 );\n         }\n         switch ( bytesNeeded )\n         {\n         case 2:\n-            return (b << 4) | (bytes[i + 1] & HIGH_BIT_MASK);\n+            return ( b << 4) | (bytes[i + 1] & HIGH_BIT_MASK);\n         case 3:\n-            return (b << 9) | ((bytes[i + 1] & HIGH_BIT_MASK) << 6) | (bytes[i + 2] & HIGH_BIT_MASK);\n+            return ( b << 9) | ((bytes[i + 1] & HIGH_BIT_MASK) << 6) | (bytes[i + 2] & HIGH_BIT_MASK);\n         case 4:\n-            return (b << 14) | ((bytes[i + 1] & HIGH_BIT_MASK) << 12) |\n-                   ((bytes[i + 2] & HIGH_BIT_MASK) << 6)\n+            return ( b << 14) | ((bytes[i + 1] & HIGH_BIT_MASK) << 12) |\n+    ((bytes[i + 2] & HIGH_BIT_MASK) << 6)\n                    | (bytes[i + 3] & HIGH_BIT_MASK);\n-        default:\n+    default:\n             throw new IllegalArgumentException( \"Malformed UTF8 value \" + bytesNeeded );\n         }\n     }\n@@ -478,16 +486,18 @@ public final class UTF8StringValue extends StringValue\n             while ( b < 0 )\n             {\n                 bytesNeeded++;\n-                b = (byte) (b << 1);\n+                b = (byte) ( b << 1 );\n             }\n             int codePoint = codePoint( bytes, b, i, bytesNeeded );\n             if ( !Character.isWhitespace( codePoint ) )\n             {\n                 return i;\n             }\n-            i += bytesNeeded;\n+\n+i += bytesNeeded;\n         }\n-        return i;\n+\n+return i;\n     }\n \n     /**\n@@ -517,20 +527,19 @@ public final class UTF8StringValue extends StringValue\n             //1110xxxx 10xxxxxx 10xxxxxx\n             //11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n             int bytesNeeded = 1;\n-            while ( (b & NON_CONTINUATION_BIT_MASK) == 0 )\n+            while ( ( b & NON_CONTINUATION_BIT_MASK) == 0 )\n             {\n                 bytesNeeded++;\n                 b = bytes[--index];\n             }\n \n-            int codePoint = codePoint( bytes, (byte) (b << bytesNeeded), index, bytesNeeded );\n+            int codePoint = codePoint( bytes, (byte) ( b << bytesNeeded), index, bytesNeeded );\n             if ( !Character.isWhitespace( codePoint ) )\n             {\n                 return Math.min( index + bytesNeeded - 1, bytes.length - 1 );\n             }\n             index--;\n-\n-        }\n+    }\n         return index;\n     }\n \n@@ -553,12 +562,13 @@ public final class UTF8StringValue extends StringValue\n             break;\n         case 4:\n             codePoint = (currentByte << 14) | ((values[i + 1] & HIGH_BIT_MASK) << 12) |\n-                        ((values[i + 2] & HIGH_BIT_MASK) << 6)\n+    ((values[i + 2] & HIGH_BIT_MASK) << 6)\n                         | (values[i + 3] & HIGH_BIT_MASK);\n-            break;\n+break;\n         default:\n             throw new IllegalArgumentException( \"Malformed UTF8 value\" );\n         }\n-        return codePoint;\n+\n+return codePoint;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}