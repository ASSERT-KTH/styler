{
    "project_name": "EMResearch-EMB",
    "error_id": "54",
    "information": {
        "errors": [
            {
                "line": "38",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 167).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                if (!tempPayload.getAudience().equals(mAudience)) {\n                    LOGGER.info(\"Audience mismatch\");\n                } else if (acceptedApplicationIds != null && !acceptedApplicationIds.isEmpty() && !acceptedApplicationIds.contains(tempPayload.getAuthorizedParty())) {\n                    LOGGER.info(\"Client ID mismatch\");\n                } else {\n                    payload = tempPayload;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "39",
                    "column": "96",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/54/Checker.java\nindex b06200797ac..2e505f2b35b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/54/Checker.java\n@@ -19,6 +19,7 @@ public class Checker {\n     private final String mAudience;\n     private final GoogleIdTokenVerifier mVerifier;\n     private final JsonFactory mJFactory;\n+\n     public Checker(String audience, List<String> acceptedApplicationIds) {\n         this.acceptedApplicationIds = acceptedApplicationIds;\n         mAudience = audience;\n@@ -35,7 +36,8 @@ public class Checker {\n                 GoogleIdToken.Payload tempPayload = token.getPayload();\n                 if (!tempPayload.getAudience().equals(mAudience)) {\n                     LOGGER.info(\"Audience mismatch\");\n-                } else if (acceptedApplicationIds != null && !acceptedApplicationIds.isEmpty() && !acceptedApplicationIds.contains(tempPayload.getAuthorizedParty())) {\n+                } else if (acceptedApplicationIds != null && !acceptedApplicationIds.isEmpty() &&\n+                    !acceptedApplicationIds.contains(tempPayload.getAuthorizedParty())) {\n                     LOGGER.info(\"Client ID mismatch\");\n                 } else {\n                     payload = tempPayload;\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/54/Checker.java\nindex b06200797ac..c2f6eca07fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/54/Checker.java\n@@ -19,7 +19,8 @@ public class Checker {\n     private final String mAudience;\n     private final GoogleIdTokenVerifier mVerifier;\n     private final JsonFactory mJFactory;\n-    public Checker(String audience, List<String> acceptedApplicationIds) {\n+\n+public Checker(String audience, List<String> acceptedApplicationIds) {\n         this.acceptedApplicationIds = acceptedApplicationIds;\n         mAudience = audience;\n         NetHttpTransport transport = new NetHttpTransport();\n@@ -48,4 +49,4 @@ public class Checker {\n         }\n         return payload;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/54/Checker.java\nindex b06200797ac..1bffa94f6d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/54/Checker.java\n@@ -7,11 +7,11 @@ import com.google.api.client.json.JsonFactory;\n import com.google.api.client.json.gson.GsonFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.IOException;\n import java.security.GeneralSecurityException;\n import java.util.List;\n \n+\n public class Checker {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(Checker.class);\n@@ -19,9 +19,11 @@ public class Checker {\n     private final String mAudience;\n     private final GoogleIdTokenVerifier mVerifier;\n     private final JsonFactory mJFactory;\n+\n     public Checker(String audience, List<String> acceptedApplicationIds) {\n         this.acceptedApplicationIds = acceptedApplicationIds;\n         mAudience = audience;\n+\n         NetHttpTransport transport = new NetHttpTransport();\n         mJFactory = new GsonFactory();\n         mVerifier = new GoogleIdTokenVerifier(transport, mJFactory);\n@@ -35,17 +37,20 @@ public class Checker {\n                 GoogleIdToken.Payload tempPayload = token.getPayload();\n                 if (!tempPayload.getAudience().equals(mAudience)) {\n                     LOGGER.info(\"Audience mismatch\");\n-                } else if (acceptedApplicationIds != null && !acceptedApplicationIds.isEmpty() && !acceptedApplicationIds.contains(tempPayload.getAuthorizedParty())) {\n-                    LOGGER.info(\"Client ID mismatch\");\n+                } else if (acceptedApplicationIds != null && !acceptedApplicationIds.isEmpty()\n+                               && !acceptedApplicationIds.contains(tempPayload.getAuthorizedParty())) {\n+                  LOGGER.info(\"Client ID mismatch\");\n                 } else {\n                     payload = tempPayload;\n                 }\n             }\n         } catch (GeneralSecurityException e) {\n-            LOGGER.info(\"Security issue: \" + e.getLocalizedMessage());\n+            LOGGER.info(\"Security issue: \"\n+                + e.getLocalizedMessage());\n         } catch (IOException e) {\n-            LOGGER.info(\"Network problem: \" + e.getLocalizedMessage());\n+            LOGGER.info(\"Network problem: \"\n+                + e.getLocalizedMessage());\n         }\n         return payload;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "38",
                    "column": "50",
                    "severity": "warning",
                    "message": "'!=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "38",
                    "column": "50",
                    "severity": "warning",
                    "message": "'!=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "38",
                    "column": "56",
                    "severity": "warning",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "38",
                    "column": "56",
                    "severity": "warning",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "38",
                    "column": "58",
                    "severity": "warning",
                    "message": "'!' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "38",
                    "column": "83",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "38",
                    "column": "94",
                    "severity": "warning",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "38",
                    "column": "94",
                    "severity": "warning",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/54/Checker.java\nindex b06200797ac..eb7a2e274c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/54/Checker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/54/Checker.java\n@@ -35,7 +35,8 @@ public class Checker {\n                 GoogleIdToken.Payload tempPayload = token.getPayload();\n                 if (!tempPayload.getAudience().equals(mAudience)) {\n                     LOGGER.info(\"Audience mismatch\");\n-                } else if (acceptedApplicationIds != null && !acceptedApplicationIds.isEmpty() && !acceptedApplicationIds.contains(tempPayload.getAuthorizedParty())) {\n+                } else if (acceptedApplicationIds!=null&&! acceptedApplicationIds . isEmpty()&&!acceptedApplicationIds .\n+                    contains(tempPayload.getAuthorizedParty())) {\n                     LOGGER.info(\"Client ID mismatch\");\n                 } else {\n                     payload = tempPayload;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}