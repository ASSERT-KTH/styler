{
    "project_name": "Stratio-bdt",
    "error_id": "142",
    "information": {
        "errors": [
            {
                "line": "71",
                "severity": "error",
                "message": "'CTOR_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param spec object\n     */\n    public CCTSpec(CommonG spec) {\n        this.commonspec = spec;\n        restSpec = new RestSpec(spec);\n        cctUtils = new CCTUtils(spec);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/142/CCTSpec.java\nindex 522d88c832e..c4b3bc4ac44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/142/CCTSpec.java\n@@ -68,6 +68,7 @@ public class CCTSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public CCTSpec(CommonG spec) {\n         this.commonspec = spec;\n         restSpec = new RestSpec(spec);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/142/CCTSpec.java\nindex 522d88c832e..6a527edcf6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/142/CCTSpec.java\n@@ -63,6 +63,7 @@ public class CCTSpec extends BaseGSpec {\n     CCTUtils cctUtils;\n \n     RestSpec restSpec;\n+\n     /**\n      * Generic constructor.\n      *\n@@ -86,15 +87,20 @@ public class CCTSpec extends BaseGSpec {\n     }\n \n     @When(\"^I get (internal )?host ip for task '(.+?)'( in position '(\\\\d+)')? in service with id '(.+?)' from CCT and save the value in environment variable '(.+?)'$\")\n-    public void getHostIp(String internalIP, String taskName, Integer position, String serviceId, String envVar) throws Exception {\n+    public void getHostIp(String internalIP, String taskName, Integer position, String serviceId,\n+                          String envVar) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            DeployedTask task = position != null ? getServiceTaskFromDeployApi(serviceId, taskName, position) : getServiceTaskFromDeployApi(serviceId, taskName);\n+            DeployedTask task =\n+                position != null ? getServiceTaskFromDeployApi(serviceId, taskName, position) :\n+                    getServiceTaskFromDeployApi(serviceId, taskName);\n             Assert.assertNotNull(task, \"Error obtaining IP\");\n             ThreadProperty.set(envVar, internalIP != null ? task.getCalicoIP() : task.getHost());\n         } else {\n-            DeployedServiceTask task = position != null ? getServiceTaskFromCctMarathonService(serviceId, taskName, position) : getServiceTaskFromCctMarathonService(serviceId, taskName);\n+            DeployedServiceTask task = position != null ?\n+                getServiceTaskFromCctMarathonService(serviceId, taskName, position) :\n+                getServiceTaskFromCctMarathonService(serviceId, taskName);\n             Assert.assertNotNull(task, \"Error obtaining IP\");\n             ThreadProperty.set(envVar, internalIP != null ? task.getSecuredHost() : task.getHost());\n         }\n@@ -106,46 +112,56 @@ public class CCTSpec extends BaseGSpec {\n     }\n \n     @Deprecated\n-    public void getHostIp(String internalIP, String taskName, String serviceId, String envVar) throws Exception {\n+    public void getHostIp(String internalIP, String taskName, String serviceId, String envVar)\n+        throws Exception {\n         getHostIp(internalIP, taskName, null, serviceId, envVar);\n     }\n \n-    private DeployedTask getServiceTaskFromDeployApi(String serviceId, String taskName) throws Exception {\n+    private DeployedTask getServiceTaskFromDeployApi(String serviceId, String taskName)\n+        throws Exception {\n         DeployedApp app = this.commonspec.deployApiClient.getDeployedApp(serviceId);\n         return app.getTasks().stream()\n-                .filter(task -> task.getState().equals(MesosTask.Status.TASK_RUNNING.toString()))\n-                .filter(task -> task.getName().matches(taskName))\n-                .findFirst().orElse(null);\n+            .filter(task -> task.getState().equals(MesosTask.Status.TASK_RUNNING.toString()))\n+            .filter(task -> task.getName().matches(taskName))\n+            .findFirst().orElse(null);\n     }\n \n-    private DeployedTask getServiceTaskFromDeployApi(String serviceId, String taskName, int position) throws Exception {\n+    private DeployedTask getServiceTaskFromDeployApi(String serviceId, String taskName,\n+                                                     int position) throws Exception {\n         DeployedApp app = this.commonspec.deployApiClient.getDeployedApp(serviceId);\n         return app.getTasks().stream()\n-                .filter(task -> task.getState().equals(MesosTask.Status.TASK_RUNNING.toString()))\n-                .filter(task -> task.getName().matches(taskName))\n-                .skip(position)\n-                .findFirst().orElse(null);\n+            .filter(task -> task.getState().equals(MesosTask.Status.TASK_RUNNING.toString()))\n+            .filter(task -> task.getName().matches(taskName))\n+            .skip(position)\n+            .findFirst().orElse(null);\n     }\n \n-    private DeployedServiceTask getServiceTaskFromCctMarathonService(String serviceId, String taskName) throws Exception {\n-        DeployedService service = this.commonspec.cctMarathonServiceClient.getService(serviceId, 1, CCTSpec.MAX_TASKS);\n+    private DeployedServiceTask getServiceTaskFromCctMarathonService(String serviceId,\n+                                                                     String taskName)\n+        throws Exception {\n+        DeployedService service =\n+            this.commonspec.cctMarathonServiceClient.getService(serviceId, 1, CCTSpec.MAX_TASKS);\n         return service.getTasks().stream()\n-                .filter(task -> task.getStatus().equals(TaskStatus.RUNNING))\n-                .filter(task -> task.getName().matches(taskName))\n-                .findFirst().orElse(null);\n+            .filter(task -> task.getStatus().equals(TaskStatus.RUNNING))\n+            .filter(task -> task.getName().matches(taskName))\n+            .findFirst().orElse(null);\n     }\n \n-    private DeployedServiceTask getServiceTaskFromCctMarathonService(String serviceId, String taskName, int position) throws Exception {\n-        DeployedService service = this.commonspec.cctMarathonServiceClient.getService(serviceId, 1, CCTSpec.MAX_TASKS);\n+    private DeployedServiceTask getServiceTaskFromCctMarathonService(String serviceId,\n+                                                                     String taskName, int position)\n+        throws Exception {\n+        DeployedService service =\n+            this.commonspec.cctMarathonServiceClient.getService(serviceId, 1, CCTSpec.MAX_TASKS);\n         return service.getTasks().stream()\n-                .filter(task -> task.getStatus().equals(TaskStatus.RUNNING))\n-                .filter(task -> task.getName().matches(taskName))\n-                .skip(position)\n-                .findFirst().orElse(null);\n+            .filter(task -> task.getStatus().equals(TaskStatus.RUNNING))\n+            .filter(task -> task.getName().matches(taskName))\n+            .skip(position)\n+            .findFirst().orElse(null);\n     }\n \n     @When(\"^I get container name for task '(.+?)' in service with id '(.+?)' and save the value in environment variable '(.+?)'$\")\n-    public void getMesosTaskContainerName(String taskName, String serviceId, String envVar) throws Exception {\n+    public void getMesosTaskContainerName(String taskName, String serviceId, String envVar)\n+        throws Exception {\n         String taskId = \"\";\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n             DeployedTask task = getServiceTaskFromDeployApi(serviceId, taskName);\n@@ -158,7 +174,8 @@ public class CCTSpec extends BaseGSpec {\n \n         MesosTask mesosTask = this.commonspec.mesosApiClient.getMesosTask(taskId).getTasks().get(0);\n         String containerId = this.commonspec.mesosUtils.getMesosTaskContainerId(mesosTask);\n-        assertThat(containerId).as(\"Error searching containerId for mesos task: \" + taskId).isNotNull();\n+        assertThat(containerId).as(\"Error searching containerId for mesos task: \" + taskId)\n+            .isNotNull();\n \n         String containerName = \"mesos-\".concat(containerId);\n         ThreadProperty.set(envVar, containerName);\n@@ -173,14 +190,21 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I want to download '(stdout|stderr)' last '(\\\\d+)' lines of service '(.+?)' with task (name|ID|host|securedHost) '(.+?)'( in position '(\\\\d+)')?( in any state)?\")\n-    public void downLoadLogsFromService(String logType, Integer lastLinesToRead, String service, String taskAttrType, String taskNameOrID, Integer position, String taskState) throws Exception {\n+    public void downLoadLogsFromService(String logType, Integer lastLinesToRead, String service,\n+                                        String taskAttrType, String taskNameOrID, Integer position,\n+                                        String taskState) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n         position = (position == null) ? 0 : position;\n-        String fileOutputName = position == 0 ? taskNameOrID + \".\" + logType : taskNameOrID + \".\" + logType + \".\" + position;\n-        String logOfTask = getLog(logType, lastLinesToRead, service, taskNameOrID, position, taskState, taskAttrType);\n+        String fileOutputName = position == 0 ? taskNameOrID + \".\" + logType :\n+            taskNameOrID + \".\" + logType + \".\" + position;\n+        String logOfTask =\n+            getLog(logType, lastLinesToRead, service, taskNameOrID, position, taskState,\n+                taskAttrType);\n         Assert.assertNotNull(logOfTask, \"Error downloading log file\");\n-        Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName), logOfTask.getBytes());\n+        Files.write(\n+            Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName),\n+            logOfTask.getBytes());\n     }\n \n     /**\n@@ -194,14 +218,19 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^The '(stdout|stderr)' of service '(.+?)' with task (name|ID|host|securedHost) '(.+?)' contains '(.+?)' in the last '(\\\\d+)' lines$\")\n-    public void readLogsFromService(String logType, String service, String taskAttrType, String taskNameOrID, String logToCheck, Integer lastLinesToRead) throws Exception {\n+    public void readLogsFromService(String logType, String service, String taskAttrType,\n+                                    String taskNameOrID, String logToCheck, Integer lastLinesToRead)\n+        throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n-        String logOfTask = getLog(logType, lastLinesToRead, service, taskNameOrID, 0, null, taskAttrType);\n+        String logOfTask =\n+            getLog(logType, lastLinesToRead, service, taskNameOrID, 0, null, taskAttrType);\n         Assert.assertNotNull(logOfTask, \"Error downloading log file\");\n         if (!logOfTask.contains(logToCheck)) {\n-            Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"), logOfTask.getBytes());\n-            fail(\"The log '\" + logToCheck + \"' is not contained in the task logs. It is saved in target/test-classes/log.txt\");\n+            Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"),\n+                logOfTask.getBytes());\n+            fail(\"The log '\" + logToCheck +\n+                \"' is not contained in the task logs. It is saved in target/test-classes/log.txt\");\n         }\n     }\n \n@@ -217,14 +246,18 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, the '(stdout|stderr)' of service '(.+?)' with task (name|ID|host|securedHost) '(.+?)' contains '(.+?)'( in the last '(\\\\d+)' lines)?$\")\n-    public void readLogsInLessEachFromService(Integer timeout, Integer wait, String logType, String service, String taskAttrType, String taskNameOrID, String logToCheck, Integer lastLinesToRead) throws Exception {\n+    public void readLogsInLessEachFromService(Integer timeout, Integer wait, String logType,\n+                                              String service, String taskAttrType,\n+                                              String taskNameOrID, String logToCheck,\n+                                              Integer lastLinesToRead) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n         lastLinesToRead = lastLinesToRead == null ? -1 : lastLinesToRead;\n         String logOfTask = null;\n         for (int x = 0; x <= timeout; x += wait) {\n             try {\n-                logOfTask = getLog(logType, lastLinesToRead, service, taskNameOrID, 0, null, taskAttrType);\n+                logOfTask =\n+                    getLog(logType, lastLinesToRead, service, taskNameOrID, 0, null, taskAttrType);\n                 if (logOfTask != null && logOfTask.contains(logToCheck)) {\n                     break;\n                 }\n@@ -238,8 +271,10 @@ public class CCTSpec extends BaseGSpec {\n         }\n         Assert.assertNotNull(logOfTask, \"Error downloading log file\");\n         if (!logOfTask.contains(logToCheck)) {\n-            Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"), logOfTask.getBytes());\n-            fail(\"The log '\" + logToCheck + \"' is not contained in the task logs after \" + timeout + \" seconds. Last log downloaded is saved in target/test-classes/log.txt\");\n+            Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"),\n+                logOfTask.getBytes());\n+            fail(\"The log '\" + logToCheck + \"' is not contained in the task logs after \" + timeout +\n+                \" seconds. Last log downloaded is saved in target/test-classes/log.txt\");\n         }\n     }\n \n@@ -255,17 +290,26 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, last '(\\\\d+)' lines of '(stdout|stderr)' log of service '(.+?)' with task (name|ID|host|securedHost) '(.+?)', modifying it with command '(.+?)' contains '(.+?)'$\")\n-    public void readLogsModifiedInLessEachFromService(Integer timeout, Integer wait, Integer lastLinesToRead, String logType, String service, String taskAttrType, String taskNameOrID, String modifyingCommand, String logToCheck) throws Exception {\n+    public void readLogsModifiedInLessEachFromService(Integer timeout, Integer wait,\n+                                                      Integer lastLinesToRead, String logType,\n+                                                      String service, String taskAttrType,\n+                                                      String taskNameOrID, String modifyingCommand,\n+                                                      String logToCheck) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n         String logOfTask = null;\n         for (int x = 0; x <= timeout; x += wait) {\n             try {\n-                logOfTask = getLog(logType, lastLinesToRead, service, taskNameOrID, 0, null, taskAttrType);\n+                logOfTask =\n+                    getLog(logType, lastLinesToRead, service, taskNameOrID, 0, null, taskAttrType);\n                 if (logOfTask != null) {\n-                    Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"), logOfTask.getBytes());\n-                    commonspec.runLocalCommand(\"cat target/test-classes/log.txt | \" + modifyingCommand);\n-                    commonspec.getLogger().debug(\"Log result modified =  \" + commonspec.getCommandResult());\n+                    Files.write(\n+                        Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"),\n+                        logOfTask.getBytes());\n+                    commonspec\n+                        .runLocalCommand(\"cat target/test-classes/log.txt | \" + modifyingCommand);\n+                    commonspec.getLogger()\n+                        .debug(\"Log result modified =  \" + commonspec.getCommandResult());\n                     if (commonspec.getCommandResult().contains(logToCheck)) {\n                         break;\n                     }\n@@ -280,9 +324,12 @@ public class CCTSpec extends BaseGSpec {\n         }\n         Assert.assertNotNull(logOfTask, \"Error downloading log file\");\n         if (!commonspec.getCommandResult().contains(logToCheck)) {\n-            Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"), logOfTask.getBytes());\n-            commonspec.getLogger().error(\"Last log result modified =  \" + commonspec.getCommandResult());\n-            fail(\"The log '\" + logToCheck + \"' is not contained in the task logs after \" + timeout + \" seconds. Last log downloaded is saved in target/test-classes/log.txt\");\n+            Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/log.txt\"),\n+                logOfTask.getBytes());\n+            commonspec.getLogger()\n+                .error(\"Last log result modified =  \" + commonspec.getCommandResult());\n+            fail(\"The log '\" + logToCheck + \"' is not contained in the task logs after \" + timeout +\n+                \" seconds. Last log downloaded is saved in target/test-classes/log.txt\");\n         }\n     }\n \n@@ -292,20 +339,27 @@ public class CCTSpec extends BaseGSpec {\n      * @param logType         stdout / stderr\n      * @param lastLinesToRead Last lines to read in log\n      * @param service         Service ID\n-     * @param taskAttr    Task name\n+     * @param taskAttr        Task name\n      * @return Last 'lastLinesToRead' or null\n      * @throws Exception\n      */\n-    private String getLog(String logType, Integer lastLinesToRead, String service, String taskAttr, Integer position, String taskState, String taskAttrType) throws Exception {\n+    private String getLog(String logType, Integer lastLinesToRead, String service, String taskAttr,\n+                          Integer position, String taskState, String taskAttrType)\n+        throws Exception {\n         String logPath;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n             // Deploy-api\n-            String expectedTaskStatus = taskState == null && !taskAttrType.equals(\"ID\") ? \"TASK_RUNNING\" : null;\n-            logPath = getLogPathFromDeployApi(logType, service, taskAttr, expectedTaskStatus, position, taskAttrType);\n+            String expectedTaskStatus =\n+                taskState == null && !taskAttrType.equals(\"ID\") ? \"TASK_RUNNING\" : null;\n+            logPath =\n+                getLogPathFromDeployApi(logType, service, taskAttr, expectedTaskStatus, position,\n+                    taskAttrType);\n         } else {\n             // Marathon-services\n-            TaskStatus expectedTaskStatus = taskState == null && !taskAttrType.equals(\"ID\") ? TaskStatus.RUNNING : null;\n-            logPath = getLogPathFromMarathonServices(logType, service, taskAttr, expectedTaskStatus, position, taskAttrType);\n+            TaskStatus expectedTaskStatus =\n+                taskState == null && !taskAttrType.equals(\"ID\") ? TaskStatus.RUNNING : null;\n+            logPath = getLogPathFromMarathonServices(logType, service, taskAttr, expectedTaskStatus,\n+                position, taskAttrType);\n         }\n         if (taskAttrType.equals(\"ID\") && logPath == null) {\n             logPath = generateMesosLogPath(taskAttr, logType);\n@@ -320,10 +374,16 @@ public class CCTSpec extends BaseGSpec {\n     private String generateMesosLogPath(String taskId, String logType) {\n         try {\n             MesosTask mesosTask = this.commonspec.mesosApiClient.getMesosTasks().getTasks().stream()\n-                    .filter(task -> task.getTaskId().equals(taskId) || task.getFrameworkId().equals(taskId))\n-                    .findFirst().orElse(null);\n-            String containerId = ((LinkedHashMap<String, String>) mesosTask.getStatuses().get(0).getContainerStatus().get(\"container_id\")).get(\"value\");\n-            return \"/agent/\" + mesosTask.getSlaveId() + \"/files/read?path=/var/lib/mesos/slave/slaves/\" + mesosTask.getSlaveId() + \"/frameworks/\" + mesosTask.getFrameworkId() + \"/executors/\" + mesosTask.getTaskId() + \"/runs/\" + containerId + \"/\" + logType;\n+                .filter(\n+                    task -> task.getTaskId().equals(taskId) || task.getFrameworkId().equals(taskId))\n+                .findFirst().orElse(null);\n+            String containerId =\n+                ((LinkedHashMap<String, String>) mesosTask.getStatuses().get(0).getContainerStatus()\n+                    .get(\"container_id\")).get(\"value\");\n+            return \"/agent/\" + mesosTask.getSlaveId() +\n+                \"/files/read?path=/var/lib/mesos/slave/slaves/\" + mesosTask.getSlaveId() +\n+                \"/frameworks/\" + mesosTask.getFrameworkId() + \"/executors/\" +\n+                mesosTask.getTaskId() + \"/runs/\" + containerId + \"/\" + logType;\n         } catch (Exception e) {\n             commonspec.getLogger().warn(\"Error generating mesos log path: \" + e.toString());\n         }\n@@ -333,31 +393,39 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Obtain log path through deploy-api service\n      *\n-     * @param logType      stdout / stderr\n-     * @param service      Service ID\n+     * @param logType  stdout / stderr\n+     * @param service  Service ID\n      * @param taskAttr Task name\n      * @return Log path or null\n      * @throws Exception\n      */\n-    private String getLogPathFromDeployApi(String logType, String service, String taskAttr, String expectedTaskStatus, Integer position, String taskAttrType) throws Exception {\n-        DeployedTask deployedTask = this.commonspec.deployApiClient.getDeployedApp(service).getTasks().stream()\n-                .filter(expectedTaskStatus != null ? task -> task.getState().equals(expectedTaskStatus) : task -> true)\n+    private String getLogPathFromDeployApi(String logType, String service, String taskAttr,\n+                                           String expectedTaskStatus, Integer position,\n+                                           String taskAttrType) throws Exception {\n+        DeployedTask deployedTask =\n+            this.commonspec.deployApiClient.getDeployedApp(service).getTasks().stream()\n+                .filter(expectedTaskStatus != null ?\n+                    task -> task.getState().equals(expectedTaskStatus) : task -> true)\n                 .filter(task -> taskAttrType.equals(\"ID\") ? task.getId().matches(taskAttr) :\n-                                taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) :\n-                                taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) : task.getCalicoIP().matches(taskAttr))\n+                    taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) :\n+                        taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) :\n+                            task.getCalicoIP().matches(taskAttr))\n                 .sorted(Comparator.comparing(DeployedTask::getTimestamp).reversed())\n                 .skip(position)\n                 .findFirst().orElse(null);\n         if (deployedTask != null) {\n-            SandboxItem sandboxItem = this.commonspec.deployApiClient.getLogPaths(deployedTask.getId()).getList().stream()\n+            SandboxItem sandboxItem =\n+                this.commonspec.deployApiClient.getLogPaths(deployedTask.getId()).getList().stream()\n                     .filter(log -> log.getAction().equals(\"read\"))\n                     .findFirst().orElse(null);\n             if (sandboxItem != null && sandboxItem.getPath() != null) {\n                 return sandboxItem.getPath() + logType;\n             }\n-            commonspec.getLogger().warn(\"Log path not found for task with name \" + taskAttr + \" and service \" + service);\n+            commonspec.getLogger().warn(\n+                \"Log path not found for task with name \" + taskAttr + \" and service \" + service);\n         } else {\n-            commonspec.getLogger().warn(\"No task found with name \" + taskAttr + \" for service \" + service);\n+            commonspec.getLogger()\n+                .warn(\"No task found with name \" + taskAttr + \" for service \" + service);\n         }\n         return null;\n     }\n@@ -365,32 +433,41 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Obtain log path through marathon-services service\n      *\n-     * @param logType      stdout / stderr\n-     * @param service      Service ID\n+     * @param logType  stdout / stderr\n+     * @param service  Service ID\n      * @param taskAttr Task name\n      * @return Log path or null\n      * @throws Exception\n      */\n-    private String getLogPathFromMarathonServices(String logType, String service, String taskAttr, TaskStatus expectedTaskStatus, Integer position, String taskAttrType) throws Exception {\n-        DeployedServiceTask deployedServiceTask = this.commonspec.cctMarathonServiceClient.getService(service, 1, 50).getTasks().stream()\n-                .filter(expectedTaskStatus != null ? task -> task.getStatus().equals(expectedTaskStatus) : task -> true)\n+    private String getLogPathFromMarathonServices(String logType, String service, String taskAttr,\n+                                                  TaskStatus expectedTaskStatus, Integer position,\n+                                                  String taskAttrType) throws Exception {\n+        DeployedServiceTask deployedServiceTask =\n+            this.commonspec.cctMarathonServiceClient.getService(service, 1, 50).getTasks().stream()\n+                .filter(expectedTaskStatus != null ?\n+                    task -> task.getStatus().equals(expectedTaskStatus) : task -> true)\n                 .filter(task -> taskAttrType.equals(\"ID\") ? task.getId().matches(taskAttr) :\n-                                taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) :\n-                                taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) : task.getSecuredHost().matches(taskAttr))\n+                    taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) :\n+                        taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) :\n+                            task.getSecuredHost().matches(taskAttr))\n                 .sorted(Comparator.comparing(DeployedServiceTask::getTimestamp).reversed())\n                 .skip(position)\n                 .findFirst().orElse(null);\n         if (deployedServiceTask != null) {\n-            TaskLog taskLog = this.commonspec.cctMarathonServiceClient.getLogPaths(deployedServiceTask.getId()).getContent().stream()\n+            TaskLog taskLog =\n+                this.commonspec.cctMarathonServiceClient.getLogPaths(deployedServiceTask.getId())\n+                    .getContent().stream()\n                     .filter(log -> log.getAction() == LogAction.READ)\n                     .filter(log -> log.getName().equals(logType))\n                     .findFirst().orElse(null);\n             if (taskLog != null && taskLog.getPath() != null) {\n                 return taskLog.getPath() + logType;\n             }\n-            commonspec.getLogger().warn(\"Log path not found for task with name \" + taskAttr + \" and service \" + service);\n+            commonspec.getLogger().warn(\n+                \"Log path not found for task with name \" + taskAttr + \" and service \" + service);\n         } else {\n-            commonspec.getLogger().warn(\"No task found with name \" + taskAttr + \" for service \" + service);\n+            commonspec.getLogger()\n+                .warn(\"No task found with name \" + taskAttr + \" for service \" + service);\n         }\n         return null;\n     }\n@@ -411,7 +488,8 @@ public class CCTSpec extends BaseGSpec {\n         Future<Response> response = null;\n         response = commonspec.generateRequest(\"GET\", false, null, null, path, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" + response.get().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" +\n+                response.get().getStatusCode());\n         }\n         JSONObject offSetJson = new JSONObject(response.get().getResponseBody());\n         int offSet = offSetJson.getInt(\"offset\");\n@@ -439,20 +517,26 @@ public class CCTSpec extends BaseGSpec {\n         }\n         String[] logsArray = logs.toString().split(\"\\n\");\n         if (lastLines < 0) {\n-            return String.join(\"\\n\", logsArray).replaceAll(\"BDTEOL\", \"\\\\\\\\n\").replaceAll(\"BDTTAB\", \"\\\\\\\\t\");\n+            return String.join(\"\\n\", logsArray).replaceAll(\"BDTEOL\", \"\\\\\\\\n\")\n+                .replaceAll(\"BDTTAB\", \"\\\\\\\\t\");\n         }\n-        return String.join(\"\\n\", Arrays.copyOfRange(logsArray, Math.max(logsArray.length - lastLines, 0), logsArray.length)).replaceAll(\"BDTEOL\", \"\\\\\\\\n\").replaceAll(\"BDTTAB\", \"\\\\\\\\t\");\n+        return String.join(\"\\n\", Arrays\n+            .copyOfRange(logsArray, Math.max(logsArray.length - lastLines, 0), logsArray.length))\n+            .replaceAll(\"BDTEOL\", \"\\\\\\\\n\").replaceAll(\"BDTTAB\", \"\\\\\\\\t\");\n     }\n \n     private String readLogsFromMesosEndpoint(String path, String endPoint) throws Exception {\n         commonspec.getLogger().debug(\"Downloading log from endpoint: \" + endPoint);\n-        Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+        Future<Response> response =\n+            commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(\"GET\", response.get());\n         JSONObject cctJsonResponse = new JSONObject(commonspec.getResponse().getResponse());\n-        return cctJsonResponse.getString(\"data\").replaceAll(\"\\\\\\\\n\", \"BDTEOL\").replaceAll(\"\\\\\\\\t\", \"BDTTAB\");\n+        return cctJsonResponse.getString(\"data\").replaceAll(\"\\\\\\\\n\", \"BDTEOL\")\n+            .replaceAll(\"\\\\\\\\t\", \"BDTTAB\");\n     }\n \n     /**\n@@ -466,14 +550,22 @@ public class CCTSpec extends BaseGSpec {\n     public void tearDownService(String service, String tenant) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n-        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"), \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/teardown?frameworkName=\" + service;\n+        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"),\n+            \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/teardown?frameworkName=\" +\n+                service;\n         Future<Response> response;\n         response = commonspec.generateRequest(\"DELETE\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"DELETE\", response.get());\n-        if (commonspec.getResponse().getStatusCode() != 200 || commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 ||\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n         // Check service has disappeared\n         RestSpec restSpec = new RestSpec(commonspec);\n@@ -481,10 +573,12 @@ public class CCTSpec extends BaseGSpec {\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n             key = \"\\\"serviceName\\\"\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                \"/v1/services?tenant=\" + tenant;\n             key = \"\\\"key\\\"\";\n         }\n \n@@ -492,7 +586,8 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + service;\n         }\n-        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\", key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n+        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\",\n+            key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n \n         // Check all resources have been freed\n         this.checkResources(serviceName);\n@@ -510,15 +605,23 @@ public class CCTSpec extends BaseGSpec {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"), \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/scale?instances=\" + instances + \"&serviceName=\" + service;\n+        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"),\n+            \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/scale?instances=\" +\n+                instances + \"&serviceName=\" + service;\n         Future<Response> response;\n         response = commonspec.generateRequest(\"PUT\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"PUT\", response.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n@@ -535,7 +638,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check that the service '(.+?)' in CCT with '(\\\\d+)' tasks of type '(.+?)' is in '(healthy|unhealthy|running|stopped)' status\")\n-    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String taskType, String expectedStatus) throws Exception {\n+    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks,\n+                                   String taskType, String expectedStatus) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n@@ -546,9 +650,11 @@ public class CCTSpec extends BaseGSpec {\n         boolean statusService = false;\n         for (int i = 0; (i <= timeout) && (!statusService); i += wait) {\n             try {\n-                Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+                Future<Response> response =\n+                    commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n                 commonspec.setResponse(endPoint, response.get());\n-                statusService = checkServiceStatusInResponse(expectedStatus, commonspec.getResponse().getResponse(), numTasks, taskType);\n+                statusService = checkServiceStatusInResponse(expectedStatus,\n+                    commonspec.getResponse().getResponse(), numTasks, taskType);\n             } catch (Exception e) {\n                 commonspec.getLogger().warn(\"Error in request \" + endPoint + \" - \" + e.toString());\n             }\n@@ -557,7 +663,8 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (!statusService) {\n-            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n+            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" +\n+                service);\n         }\n     }\n \n@@ -570,7 +677,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param name           : tasks name\n      * @return\n      */\n-    public boolean checkServiceStatusInResponse(String expectedStatus, String response, Integer tasks, String name) {\n+    public boolean checkServiceStatusInResponse(String expectedStatus, String response,\n+                                                Integer tasks, String name) {\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfTasks = (JSONArray) cctJsonResponse.get(\"tasks\");\n         int task_counter = 0;\n@@ -591,10 +699,15 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (arrayOfTasks.length() == 1 || tasks == null) {\n-            boolean res = (arrayOfTasks.getJSONObject(0).getString(key).equalsIgnoreCase(expectedStatus));\n+            boolean res =\n+                (arrayOfTasks.getJSONObject(0).getString(key).equalsIgnoreCase(expectedStatus));\n             if (!res) {\n-                commonspec.getLogger().warn(\"The status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" + arrayOfTasks.getJSONObject(0).getString(key));\n-                commonspec.getLogger().warn(\"Expected status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" + expectedStatus);\n+                commonspec.getLogger().warn(\n+                    \"The status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" +\n+                        arrayOfTasks.getJSONObject(0).getString(key));\n+                commonspec.getLogger().warn(\n+                    \"Expected status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") +\n+                        \" is \" + expectedStatus);\n             }\n             return res;\n         }\n@@ -617,15 +730,19 @@ public class CCTSpec extends BaseGSpec {\n         }\n         for (Map.Entry taskStatus : taskStatusMap.entrySet()) {\n             if (!((String) taskStatus.getValue()).equalsIgnoreCase(expectedStatus)) {\n-                commonspec.getLogger().warn(\"The status of \" + taskStatus.getKey() + \" is \" + taskStatus.getValue());\n-                commonspec.getLogger().warn(\" Expected status of \" + taskStatus.getKey() + \" is \" + expectedStatus);\n+                commonspec.getLogger()\n+                    .warn(\"The status of \" + taskStatus.getKey() + \" is \" + taskStatus.getValue());\n+                commonspec.getLogger()\n+                    .warn(\" Expected status of \" + taskStatus.getKey() + \" is \" + expectedStatus);\n                 return false;\n             }\n         }\n         if (taskStatusMap.size() == tasks) {\n             return true;\n         }\n-        commonspec.getLogger().error(\"The number of tasks deployed: \" + task_counter + \" are not the expected ones: \" + tasks);\n+        commonspec.getLogger().error(\n+            \"The number of tasks deployed: \" + task_counter + \" are not the expected ones: \" +\n+                tasks);\n         return false;\n     }\n \n@@ -640,7 +757,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check in CCT that the service '(.+?)'( with number of tasks '(\\\\d+)')? is in '(healthy|unhealthy|running|stopped)' status$\")\n-    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String expectedStatus) throws Exception {\n+    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks,\n+                                   String expectedStatus) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n@@ -655,11 +773,15 @@ public class CCTSpec extends BaseGSpec {\n \n         for (int i = 0; (i <= timeout); i += wait) {\n             try {\n-                Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+                Future<Response> response =\n+                    commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n                 commonspec.setResponse(endPoint, response.get());\n-                found = checkServiceStatusInResponse(expectedStatus, commonspec.getResponse().getResponse(), useMarathonServices);\n+                found = checkServiceStatusInResponse(expectedStatus,\n+                    commonspec.getResponse().getResponse(), useMarathonServices);\n                 if (numTasks != null) {\n-                    isDeployed = checkServiceDeployed(commonspec.getResponse().getResponse(), numTasks, useMarathonServices);\n+                    isDeployed =\n+                        checkServiceDeployed(commonspec.getResponse().getResponse(), numTasks,\n+                            useMarathonServices);\n                 }\n             } catch (Exception e) {\n                 commonspec.getLogger().debug(\"Error in request \" + endPoint + \" - \" + e.toString());\n@@ -668,9 +790,13 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             } else {\n                 if (!found) {\n-                    commonspec.getLogger().info(expectedStatus + \" status or tasks not found after \" + i + \" seconds for service \" + service);\n+                    commonspec.getLogger().info(\n+                        expectedStatus + \" status or tasks not found after \" + i +\n+                            \" seconds for service \" + service);\n                 } else if (numTasks != null && !isDeployed) {\n-                    commonspec.getLogger().info(\"Tasks have not been deployed successfully after \" + i + \" seconds for service \" + service);\n+                    commonspec.getLogger().info(\n+                        \"Tasks have not been deployed successfully after \" + i +\n+                            \" seconds for service \" + service);\n                 }\n                 if (i < timeout) {\n                     Thread.sleep(wait * 1000);\n@@ -678,10 +804,12 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (!found) {\n-            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n+            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" +\n+                service);\n         }\n         if ((numTasks != null) && !isDeployed) {\n-            fail(\"Tasks have not been deployed successfully after \" + timeout + \" seconds for service \" + service);\n+            fail(\"Tasks have not been deployed successfully after \" + timeout +\n+                \" seconds for service \" + service);\n         }\n     }\n \n@@ -693,7 +821,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param useMarathonServices : True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n-    private boolean checkServiceStatusInResponse(String expectedStatus, String response, boolean useMarathonServices) {\n+    private boolean checkServiceStatusInResponse(String expectedStatus, String response,\n+                                                 boolean useMarathonServices) {\n         if (useMarathonServices) {\n             JSONObject cctJsonResponse = new JSONObject(response);\n             String status = cctJsonResponse.getString(\"status\");\n@@ -733,7 +862,8 @@ public class CCTSpec extends BaseGSpec {\n      * @param useMarathonServices : True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n-    private boolean checkServiceDeployed(String response, int numTasks, boolean useMarathonServices) {\n+    private boolean checkServiceDeployed(String response, int numTasks,\n+                                         boolean useMarathonServices) {\n \n         JSONObject deployment = new JSONObject(response);\n         JSONArray tasks = (JSONArray) deployment.get(\"tasks\");\n@@ -741,9 +871,12 @@ public class CCTSpec extends BaseGSpec {\n \n         for (int i = 0; i < tasks.length(); i++) {\n             if (useMarathonServices) {\n-                numTasksRunning = tasks.getJSONObject(i).get(\"status\").equals(\"RUNNING\") ? (numTasksRunning + 1) : numTasksRunning;\n+                numTasksRunning =\n+                    tasks.getJSONObject(i).get(\"status\").equals(\"RUNNING\") ? (numTasksRunning + 1) :\n+                        numTasksRunning;\n             } else {\n-                numTasksRunning = tasks.getJSONObject(i).get(\"state\").equals(\"TASK_RUNNING\") ? (numTasksRunning + 1) : numTasksRunning;\n+                numTasksRunning = tasks.getJSONObject(i).get(\"state\").equals(\"TASK_RUNNING\") ?\n+                    (numTasksRunning + 1) : numTasksRunning;\n             }\n         }\n         return numTasksRunning == numTasks;\n@@ -772,8 +905,12 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -799,15 +936,20 @@ public class CCTSpec extends BaseGSpec {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/config\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/config\";\n         Future<Response> response;\n \n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -833,15 +975,20 @@ public class CCTSpec extends BaseGSpec {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/schema\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/schema\";\n         Future<Response> response;\n \n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -868,15 +1015,20 @@ public class CCTSpec extends BaseGSpec {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n         Future<Response> response;\n \n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -909,8 +1061,12 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -933,7 +1089,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get path '(.*?)' from Mesos configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getMesosConfiguration(String path, String envVar, String fileName) throws Exception {\n+    public void getMesosConfiguration(String path, String envVar, String fileName)\n+        throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n@@ -947,8 +1104,12 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -987,7 +1148,10 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I (create|update) calico network '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string|gov)')? with:$\")\n-    public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation, String networkId, String contains, String responseVal, String baseData, String type, DataTable modifications) throws Exception {\n+    public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation,\n+                                     String networkId, String contains, String responseVal,\n+                                     String baseData, String type, DataTable modifications)\n+        throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n@@ -1024,8 +1188,11 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n             try {\n-                commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n+                commonspec.getLogger()\n+                    .debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint,\n+                        modifiedData, type);\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n@@ -1058,9 +1225,11 @@ public class CCTSpec extends BaseGSpec {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value not found after \" + timeout + \" seconds\");\n         }\n     }\n \n@@ -1073,16 +1242,21 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I( force to)? delete calico network '(.+?)' so that the response( does not)? contains '(.+?)'$\")\n-    public void deleteCalicoNetworkTimeout(Integer timeout, Integer wait, String force, String networkId, String contains, String responseVal) throws Exception {\n+    public void deleteCalicoNetworkTimeout(Integer timeout, Integer wait, String force,\n+                                           String networkId, String contains, String responseVal)\n+        throws Exception {\n \n-        if (force == null && (networkId.equals(\"logs\") || networkId.equals(\"stratio\") || networkId.equals(\"metrics\") || networkId.equals(\"stratio-shared\"))) {\n-            throw new Exception(\"It is not possible deleting networks stratio, metrics, logs or stratio-shared\");\n+        if (force == null && (networkId.equals(\"logs\") || networkId.equals(\"stratio\") ||\n+            networkId.equals(\"metrics\") || networkId.equals(\"stratio-shared\"))) {\n+            throw new Exception(\n+                \"It is not possible deleting networks stratio, metrics, logs or stratio-shared\");\n         }\n \n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n         String requestType = \"DELETE\";\n \n         if (wait == null || timeout == null) {\n@@ -1108,8 +1282,11 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n             try {\n-                commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, null, null);\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, null, null);\n+                commonspec.getLogger()\n+                    .debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint,\n+                        null, null);\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint, null, null);\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n@@ -1142,9 +1319,11 @@ public class CCTSpec extends BaseGSpec {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value not found after \" + timeout + \" seconds\");\n         }\n     }\n \n@@ -1160,7 +1339,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get schema( with level '(\\\\d+)')? from service '(.+?)' with model '(.+?)' and version '(.+?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getServiceSchema(Integer level, String service, String model, String version, String envVar, String fileName) throws Exception {\n+    public void getServiceSchema(Integer level, String service, String model, String version,\n+                                 String envVar, String fileName) throws Exception {\n \n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n@@ -1169,13 +1349,20 @@ public class CCTSpec extends BaseGSpec {\n             level = 1;\n         }\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?enriched=true&level=\" + level;\n-        Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model +\n+                \"/\" + version + \"/schema?enriched=true&level=\" + level;\n+        Future<Response> response =\n+            commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -1200,19 +1387,28 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I install service '(.+?)'( in folder '(.+?)')? with model '(.+?)' and version '(.+?)' and instance name '(.+?)' in tenant '(.+?)' using json '(.+?)'$\")\n-    public void installServiceFromMarathonJson(String service, String folder, String model, String version, String name, String tenant, String jsonFile) throws Exception {\n+    public void installServiceFromMarathonJson(String service, String folder, String model,\n+                                               String version, String name, String tenant,\n+                                               String jsonFile) throws Exception {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?tenantId=\" + tenant;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model +\n+                \"/\" + version + \"/schema?tenantId=\" + tenant;\n         String data = this.commonspec.retrieveData(jsonFile, \"json\");\n \n-        Future<Response> response = commonspec.generateRequest(\"POST\", true, null, null, endPoint, data, \"json\");\n+        Future<Response> response =\n+            commonspec.generateRequest(\"POST\", true, null, null, endPoint, data, \"json\");\n         commonspec.setResponse(\"POST\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 202) {\n-            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         // Check Application in API\n@@ -1220,13 +1416,16 @@ public class CCTSpec extends BaseGSpec {\n \n         String endPointStatus;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n         } else {\n             String[] installer_version = ThreadProperty.get(\"EOS_SCHEMA_VERSION\").split(\"\\\\.\");\n             if (Integer.parseInt(installer_version[0]) < 1) {\n-                endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services\";\n+                endPointStatus =\n+                    \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services\";\n             } else {\n-                endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+                endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                    \"/v1/services?tenant=\" + tenant;\n             }\n         }\n \n@@ -1281,13 +1480,21 @@ public class CCTSpec extends BaseGSpec {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/uninstall?app=\" + serviceName;\n-        Future<Response> response = commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, \"\", \"json\");\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/uninstall?app=\" +\n+                serviceName;\n+        Future<Response> response =\n+            commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", response.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 202 && commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 202 &&\n+            commonspec.getResponse().getStatusCode() != 200) {\n+            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         // Check service has disappeared\n@@ -1296,14 +1503,17 @@ public class CCTSpec extends BaseGSpec {\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n             key = \"\\\"serviceName\\\"\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                \"/v1/services?tenant=\" + tenant;\n             key = \"\\\"id\\\"\";\n         }\n \n-        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\", key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n+        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\",\n+            key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n         // Check all resources have been freed\n         this.checkResources(serviceName);\n     }\n@@ -1320,17 +1530,21 @@ public class CCTSpec extends BaseGSpec {\n     public void uploadRules(String rulesPath, String priority, String version) throws Exception {\n         // Check file exists\n         File rules = new File(rulesPath);\n-        Assertions.assertThat(rules.exists()).as(\"File: \" + rulesPath + \" does not exist.\").isTrue();\n+        Assertions.assertThat(rules.exists()).as(\"File: \" + rulesPath + \" does not exist.\")\n+            .isTrue();\n \n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n         // Obtain endpoint\n-        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"), \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n-        String endPointUpload = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/knowledge/upload\";\n+        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"),\n+            \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+        String endPointUpload =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/knowledge/upload\";\n \n         // Obtain URL\n-        String restURL = \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n+        String restURL =\n+            \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n \n         // Form query parameters\n         String headers = \"-H \\\"accept: */*\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n@@ -1345,14 +1559,18 @@ public class CCTSpec extends BaseGSpec {\n             forms = forms + \" -F \\\"version=\" + version + \"\\\"\";\n         }\n \n-        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n-        String command = \"curl -X POST -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n+        String cookie =\n+            \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n+        String command =\n+            \"curl -X POST -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n \n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(0);\n-        Assertions.assertThat(commonspec.getCommandResult()).as(\"Not possible to upload rules: \" + commonspec.getCommandResult()).doesNotContain(\"Error\");\n+        Assertions.assertThat(commonspec.getCommandResult())\n+            .as(\"Not possible to upload rules: \" + commonspec.getCommandResult())\n+            .doesNotContain(\"Error\");\n     }\n \n     /**\n@@ -1370,22 +1588,27 @@ public class CCTSpec extends BaseGSpec {\n \n         // Check file exists\n         File descriptors = new File(descriptorsPath);\n-        Assertions.assertThat(descriptors.exists()).as(\"File: \" + descriptorsPath + \" does not exist.\").isTrue();\n+        Assertions.assertThat(descriptors.exists())\n+            .as(\"File: \" + descriptorsPath + \" does not exist.\").isTrue();\n \n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n         // Obtain cookie\n-        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n+        String cookie =\n+            \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n \n         String endPointUpload = \"\";\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endPointUpload = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors\";\n+            endPointUpload =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors\";\n             headers = \"-H \\\"accept: application/json\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n             forms = \"-F \\\"file=@\" + descriptorsPath + \";type=application/zip\\\"\";\n             op = \"PUT\";\n@@ -1401,10 +1624,12 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Obtain URL\n-        String restURL = \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n+        String restURL =\n+            \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n \n         // Form query\n-        String command = \"curl -X \" + op + \" -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n+        String command =\n+            \"curl -X \" + op + \" -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n@@ -1454,8 +1679,10 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I update service '(.+?)'( in folder '(.+?)')? in tenant '(.+?)'( based on version '(.+?)')?( based on json '(.+?)')? with:$\")\n-    public void updateCCTService(String serviceName, String folder, String tenant, String version, String jsonFile, DataTable modifications) throws Exception {\n-        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"), \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+    public void updateCCTService(String serviceName, String folder, String tenant, String version,\n+                                 String jsonFile, DataTable modifications) throws Exception {\n+        Assert.assertNotNull(ThreadProperty.get(\"deploy_api_id\"),\n+            \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n \n         // obtain service name\n         if (folder != null && folder.startsWith(\"/\")) {\n@@ -1495,13 +1722,21 @@ public class CCTSpec extends BaseGSpec {\n \n         if (version != null) {\n             // Obtain deployed service json\n-            String endpointJson = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service + \"?version=\" + version;\n-            Future<Response> responseJson = commonspec.generateRequest(\"GET\", true, null, null, endpointJson, \"\", \"json\");\n+            String endpointJson =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service +\n+                    \"?version=\" + version;\n+            Future<Response> responseJson =\n+                commonspec.generateRequest(\"GET\", true, null, null, endpointJson, \"\", \"json\");\n             commonspec.setResponse(\"GET\", responseJson.get());\n \n             if (commonspec.getResponse().getStatusCode() != 200) {\n-                logger.error(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-                throw new Exception(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+                logger.error(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" +\n+                    commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                    commonspec.getResponse().getResponse());\n+                throw new Exception(\n+                    \"Request to endpoint: \" + endpointJson + \" failed with status code: \" +\n+                        commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                        commonspec.getResponse().getResponse());\n             }\n \n             // Modify json according to provided changes\n@@ -1521,13 +1756,20 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Deploy new json\n-        String endpointUpdate = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service;\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpointUpdate, modifiedData, \"json\");\n+        String endpointUpdate =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service;\n+        Future<Response> responseUpdate = commonspec\n+            .generateRequest(\"PUT\", true, null, null, endpointUpdate, modifiedData, \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n \n         if (commonspec.getResponse().getStatusCode() != 202) {\n-            logger.error(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\n+                \"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" +\n+                    commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                    commonspec.getResponse().getResponse());\n         }\n     }\n \n@@ -1541,7 +1783,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I update service '(.+?)'( in folder '(.+?)')? in tenant '(.+?)'( based on version '(.+?)')?( based on json '(.+?)')?$\")\n-    public void updateCCTService(String serviceName, String folder, String tenant, String version, String jsonFile) throws Exception {\n+    public void updateCCTService(String serviceName, String folder, String tenant, String version,\n+                                 String jsonFile) throws Exception {\n         updateCCTService(serviceName, folder, tenant, version, jsonFile, null);\n     }\n \n@@ -1557,10 +1800,13 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I upload descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n-    public void uploadCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n+    public void uploadCCTDescriptor(String service, String model, String version,\n+                                    String originalJson, DataTable modifications) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         // Set REST connection\n@@ -1569,10 +1815,14 @@ public class CCTSpec extends BaseGSpec {\n         String endpoint;\n         String op;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service +\n+                    \"/\" + model + \"/\" + version;\n             op = \"PUT\";\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" +\n+                    model + \"/\" + version + \"/descriptor\";\n             op = \"POST\";\n         }\n \n@@ -1582,12 +1832,18 @@ public class CCTSpec extends BaseGSpec {\n         String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n \n         // Upload new descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(op, true, null, null, endpoint, modifiedData, \"json\");\n+        Future<Response> responseUpdate =\n+            commonspec.generateRequest(op, true, null, null, endpoint, modifiedData, \"json\");\n         commonspec.setResponse(op, responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Upload descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Upload descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n@@ -1602,10 +1858,13 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I update descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n-    public void updateCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n+    public void updateCCTDescriptor(String service, String model, String version,\n+                                    String originalJson, DataTable modifications) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         // Set REST connection\n@@ -1613,9 +1872,13 @@ public class CCTSpec extends BaseGSpec {\n \n         String endpoint;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service +\n+                    \"/\" + model + \"/\" + version;\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" +\n+                    model + \"/\" + version + \"/descriptor\";\n         }\n \n         // Retrieve data\n@@ -1624,12 +1887,18 @@ public class CCTSpec extends BaseGSpec {\n         String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n \n         // Update descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpoint, modifiedData, \"json\");\n+        Future<Response> responseUpdate =\n+            commonspec.generateRequest(\"PUT\", true, null, null, endpoint, modifiedData, \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Update descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Update descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n@@ -1644,8 +1913,10 @@ public class CCTSpec extends BaseGSpec {\n     @Given(\"^I delete descriptor for service '(.+?)', model '(.+?)' version '(.+?)'$\")\n     public void deleteCCTDescriptor(String service, String model, String version) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         // Set REST connection\n@@ -1653,18 +1924,29 @@ public class CCTSpec extends BaseGSpec {\n \n         String endpoint;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service +\n+                    \"/\" + model + \"/\" + version;\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" +\n+                    model + \"/\" + version + \"/descriptor\";\n         }\n \n         // Delete descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"DELETE\", true, null, null, endpoint, \"\", \"json\");\n+        Future<Response> responseUpdate =\n+            commonspec.generateRequest(\"DELETE\", true, null, null, endpoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201 && commonspec.getResponse().getStatusCode() != 204) {\n-            logger.error(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201 &&\n+            commonspec.getResponse().getStatusCode() != 204) {\n+            logger.error(\"Delete descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Delete descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n@@ -1677,20 +1959,28 @@ public class CCTSpec extends BaseGSpec {\n      */\n     @When(\"^I read value in path '(.+?)' from central configuration and save it in environment variable '(.+?)'$\")\n     public void readValueCentralConfig(String path, String envVar) throws Exception {\n-        Assert.assertNotNull(ThreadProperty.get(\"configuration_api_id\"), \"configuration_api_id variable is not set. Check configuration-api is installed and @dcos annotation is working properly.\");\n+        Assert.assertNotNull(ThreadProperty.get(\"configuration_api_id\"),\n+            \"configuration_api_id variable is not set. Check configuration-api is installed and @dcos annotation is working properly.\");\n \n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n         String fullPath = \"/dcs/v1/fabric\" + path;\n-        String endpoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/etcd?path=\" + fullPath;\n+        String endpoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/etcd?path=\" + fullPath;\n \n-        Future<Response> responseETCD = commonspec.generateRequest(\"GET\", false, null, null, endpoint, \"\", null);\n+        Future<Response> responseETCD =\n+            commonspec.generateRequest(\"GET\", false, null, null, endpoint, \"\", null);\n         commonspec.setResponse(\"GET\", responseETCD.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\n+                \"Obtain info from ETCD: \" + endpoint + \" failed with status code: \" +\n+                    commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                    commonspec.getResponse().getResponse());\n         }\n \n         ThreadProperty.set(envVar, commonspec.getResponse().getResponse());\n@@ -1715,7 +2005,10 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I( force)? create '(certificate|keytab|password|password_nouser)' '(.+?)' using deploy-api (with|without) parameters( path '(.+?)')?( cn '(.+?)')?( name '(.+?)')?( alt '(.+?)')?( organization '(.+?)')?( principal '(.+?)')?( realm '(.+?)')?( user '(.+?)')?( password '(.+?)')?$\")\n-    public void createSecret(String force, String secretType, String secret, String withOrWithout, String path, String cn, String name, String alt, String organizationName, String principal, String realm, String user, String password) throws Exception {\n+    public void createSecret(String force, String secretType, String secret, String withOrWithout,\n+                             String path, String cn, String name, String alt,\n+                             String organizationName, String principal, String realm, String user,\n+                             String password) throws Exception {\n         String baseUrl = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/secrets\";\n         String secretTypeAux;\n         String urlParams;\n@@ -1741,15 +2034,22 @@ public class CCTSpec extends BaseGSpec {\n                 secretTypeAux = \"default\";\n         }\n         if (force != null) {\n-            String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret : \"%2Fuserland%2F\" + secretTypeAux + \"%2F\" + secret;\n-            restSpec.sendRequestNoDataTable(\"DELETE\", baseUrl + \"?path=\" + pathAux, null, null, null);\n+            String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret :\n+                \"%2Fuserland%2F\" + secretTypeAux + \"%2F\" + secret;\n+            restSpec\n+                .sendRequestNoDataTable(\"DELETE\", baseUrl + \"?path=\" + pathAux, null, null, null);\n         }\n         if (!secretType.equals(\"password_nouser\")) {\n-            restSpec.sendRequestNoDataTable(\"POST\", baseUrl + \"/\" + secretType + urlParams, null, null, null);\n+            restSpec\n+                .sendRequestNoDataTable(\"POST\", baseUrl + \"/\" + secretType + urlParams, null, null,\n+                    null);\n         } else {\n-            String pathAux = (path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret : \"%2Fuserland%2Fpasswords%2F\" + secret) + \"%2F\" + (name != null ? name : secret);\n+            String pathAux = (path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret :\n+                \"%2Fuserland%2Fpasswords%2F\" + secret) + \"%2F\" + (name != null ? name : secret);\n             String filePath = createCustomSecretFile(password != null ? password : secret);\n-            restSpec.sendRequestNoDataTable(\"POST\", baseUrl + \"/custom?path=\" + pathAux, null, filePath, \"json\");\n+            restSpec\n+                .sendRequestNoDataTable(\"POST\", baseUrl + \"/custom?path=\" + pathAux, null, filePath,\n+                    \"json\");\n         }\n     }\n \n@@ -1766,11 +2066,13 @@ public class CCTSpec extends BaseGSpec {\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n         commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), StandardCharsets.UTF_8));\n+        Writer out = new BufferedWriter(\n+            new OutputStreamWriter(new FileOutputStream(absolutePathFile), StandardCharsets.UTF_8));\n         try {\n             out.write(\"{\\\"pass\\\": \\\"\" + password + \"\\\"}\");\n         } catch (Exception e) {\n-            commonspec.getLogger().error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n+            commonspec.getLogger()\n+                .error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n         } finally {\n             out.close();\n         }\n@@ -1806,7 +2108,8 @@ public class CCTSpec extends BaseGSpec {\n             default:\n                 secretTypeAux = \"default\";\n         }\n-        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret : \"%2Fuserland%2F\" + secretTypeAux + \"%2F\" + secret;\n+        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret :\n+            \"%2Fuserland%2F\" + secretTypeAux + \"%2F\" + secret;\n         restSpec.sendRequestNoDataTable(\"DELETE\", baseUrl + \"?path=\" + pathAux, null, null, null);\n         restSpec.sendRequestNoDataTable(\"GET\", baseUrl + \"?path=\" + pathAux, null, null, null);\n         restSpec.assertResponseStatusLength(404, null, null);\n@@ -1821,8 +2124,10 @@ public class CCTSpec extends BaseGSpec {\n      * @param organizationName\n      * @return\n      */\n-    private String getCertificateUrlParams(String secret, String path, String cn, String name, String alt, String organizationName) {\n-        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + secret : \"%2Fuserland%2Fcertificates%2F\" + secret;\n+    private String getCertificateUrlParams(String secret, String path, String cn, String name,\n+                                           String alt, String organizationName) {\n+        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + secret :\n+            \"%2Fuserland%2Fcertificates%2F\" + secret;\n         String cnAux = cn != null ? cn : secret;\n         String nameAux = name != null ? name : secret;\n         String urlParams = \"?path=\" + pathAux + \"&cn=\" + cnAux + \"&name=\" + nameAux;\n@@ -1844,15 +2149,18 @@ public class CCTSpec extends BaseGSpec {\n      * @return\n      * @throws Exception\n      */\n-    private String getKeytabUrlParams(String secret, String path, String name, String principal, String realm) throws Exception {\n-        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + secret : \"%2Fuserland%2Fkerberos%2F\" + secret;\n+    private String getKeytabUrlParams(String secret, String path, String name, String principal,\n+                                      String realm) throws Exception {\n+        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + secret :\n+            \"%2Fuserland%2Fkerberos%2F\" + secret;\n         String principalAux = principal != null ? principal : secret;\n         String nameAux = name != null ? name : secret;\n         String realmAux = realm != null ? realm : ThreadProperty.get(\"EOS_REALM\");\n         if (realmAux == null) {\n             throw new Exception(\"Realm is mandatory to generate keytab\");\n         }\n-        return \"?path=\" + pathAux + \"&principal=\" + principalAux + \"&name=\" + nameAux + \"&realm=\" + realmAux;\n+        return \"?path=\" + pathAux + \"&principal=\" + principalAux + \"&name=\" + nameAux + \"&realm=\" +\n+            realmAux;\n     }\n \n     /**\n@@ -1863,12 +2171,16 @@ public class CCTSpec extends BaseGSpec {\n      * @param password\n      * @return\n      */\n-    private String getPasswordUrlParams(String secret, String path, String name, String user, String password) throws UnsupportedEncodingException {\n-        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + secret : \"%2Fuserland%2Fpasswords%2F\" + secret;\n+    private String getPasswordUrlParams(String secret, String path, String name, String user,\n+                                        String password) throws UnsupportedEncodingException {\n+        String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + secret :\n+            \"%2Fuserland%2Fpasswords%2F\" + secret;\n         String nameAux = name != null ? name : secret;\n         String userAux = user != null ? user : secret;\n         String passwordAux = password != null ? password : secret;\n-        return \"?path=\" + pathAux + \"&name=\" + nameAux + \"&password=\" + URLEncoder.encode(passwordAux, \"UTF-8\") + \"&user=\" + URLEncoder.encode(userAux, \"UTF-8\");\n+        return \"?path=\" + pathAux + \"&name=\" + nameAux + \"&password=\" +\n+            URLEncoder.encode(passwordAux, \"UTF-8\") + \"&user=\" +\n+            URLEncoder.encode(userAux, \"UTF-8\");\n     }\n \n     /**\n@@ -1890,7 +2202,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @When(\"^I login to '(.+?)' based on '([^:]+?)' as '(json|string)' with:$\")\n-    public void loginUser(String endPoint, String baseData, String type, DataTable modifications) throws Exception {\n+    public void loginUser(String endPoint, String baseData, String type, DataTable modifications)\n+        throws Exception {\n         restSpec.sendRequest(\"POST\", endPoint, null, baseData, type, modifications);\n     }\n \n@@ -1915,7 +2228,8 @@ public class CCTSpec extends BaseGSpec {\n     @Given(\"^I get the '(internal|external)' ip for service id '(.+?)' for task name '(.+?)'( and save it in environment variable '(.*?)')?\")\n     @Deprecated\n     // TODO Refactor with \"^I get host ip for task '(.+?)' in service with id '(.+?)' from CCT and save the value in environment variable '(.+?)'$\"\n-    public void getMachineIp(String type, String serviceId, String taskName, String envVar) throws Exception {\n+    public void getMachineIp(String type, String serviceId, String taskName, String envVar)\n+        throws Exception {\n \n         String ip = null;\n         String selector = null;\n@@ -1924,7 +2238,8 @@ public class CCTSpec extends BaseGSpec {\n \n         String endPointStatus;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deployments/service?instanceName=\" + serviceId;\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \"/deployments/service?instanceName=\" + serviceId;\n             if (type.equals(\"external\")) {\n                 selector = \"host\";\n             } else {\n@@ -1933,7 +2248,9 @@ public class CCTSpec extends BaseGSpec {\n             status = \"TASK_RUNNING\";\n             labelStatus = \"state\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services\" + serviceId;\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services\" +\n+                    serviceId;\n             if (type.equals(\"external\")) {\n                 selector = \"host\";\n             } else {\n@@ -1946,7 +2263,8 @@ public class CCTSpec extends BaseGSpec {\n         // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n-        Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPointStatus, \"\", null, \"\");\n+        Future<Response> response =\n+            commonspec.generateRequest(\"GET\", false, null, null, endPointStatus, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         JSONObject deployment = new JSONObject(commonspec.getResponse().getResponse());\n@@ -1954,14 +2272,16 @@ public class CCTSpec extends BaseGSpec {\n \n         for (int i = 0; i < tasks.length(); i++) {\n             JSONObject item = tasks.getJSONObject(i);\n-            if (item.getString(\"name\").equals(taskName) && item.getString(labelStatus).equals(status)) {\n+            if (item.getString(\"name\").equals(taskName) &&\n+                item.getString(labelStatus).equals(status)) {\n                 ip = item.get(selector).toString();\n                 break;\n             }\n         }\n \n         if (ip == null) {\n-            throw new Exception(\"Not found \" + type + \" IP for task \" + taskName + \" of service Id \" + serviceId);\n+            throw new Exception(\n+                \"Not found \" + type + \" IP for task \" + taskName + \" of service Id \" + serviceId);\n         } else if ((envVar != null) && (ip != null)) {\n             ThreadProperty.set(envVar, ip);\n         }\n@@ -1976,7 +2296,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception exception     *\n      */\n     @Then(\"^service '(.+?)' status in cluster '(.+?)' is '(suspended|running|deploying)'( in less than '(\\\\d+)')?( seconds checking every '(\\\\d+)' seconds)?\")\n-    public void serviceStatusCheck(String service, String cluster, String status, String sTotalWait, String sInterval) throws Exception {\n+    public void serviceStatusCheck(String service, String cluster, String status, String sTotalWait,\n+                                   String sInterval) throws Exception {\n         Integer totalWait = sTotalWait != null ? Integer.parseInt(sTotalWait) : null;\n         Integer interval = sInterval != null ? Integer.parseInt(sInterval) : null;\n         String response;\n@@ -1988,14 +2309,17 @@ public class CCTSpec extends BaseGSpec {\n         if (totalWait != null && interval != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n-                this.commonspec.getLogger().info(\"Service status not found yet after \" + i + \" seconds\");\n+                this.commonspec.getLogger()\n+                    .info(\"Service status not found yet after \" + i + \" seconds\");\n                 i = i + interval;\n                 response = commonspec.retrieveServiceStatus(service, cluster);\n                 matched = status.matches(response);\n             }\n         }\n \n-        assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n+        assertThat(status)\n+            .as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response)\n+            .matches(response);\n     }\n \n     /**\n@@ -2007,7 +2331,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception exception     *\n      */\n     @Then(\"^service '(.+?)' health status in cluster '(.+?)' is '(unhealthy|healthy|unknown)'( in less than '(\\\\d+)')?( seconds checking every '(\\\\d+)' seconds)?\")\n-    public void serviceHealthStatusCheck(String service, String cluster, String status, String sTotalWait, String sInterval) throws Exception {\n+    public void serviceHealthStatusCheck(String service, String cluster, String status,\n+                                         String sTotalWait, String sInterval) throws Exception {\n         Integer totalWait = sTotalWait != null ? Integer.parseInt(sTotalWait) : null;\n         Integer interval = sInterval != null ? Integer.parseInt(sInterval) : null;\n         String response;\n@@ -2019,14 +2344,17 @@ public class CCTSpec extends BaseGSpec {\n         if (totalWait != null && interval != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n-                this.commonspec.getLogger().info(\"Service health status not found yet after \" + i + \" seconds\");\n+                this.commonspec.getLogger()\n+                    .info(\"Service health status not found yet after \" + i + \" seconds\");\n                 i = i + interval;\n                 response = commonspec.retrieveHealthServiceStatus(service, cluster);\n                 matched = status.matches(response);\n             }\n         }\n \n-        assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n+        assertThat(status)\n+            .as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response)\n+            .matches(response);\n     }\n \n     /**\n@@ -2053,7 +2381,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception exception     *\n      */\n     @Given(\"^I get service '(.+?)' health status in cluster '(.+?)' and save it in variable '(.+?)'\")\n-    public void getServiceHealthStatus(String service, String cluster, String envVar) throws Exception {\n+    public void getServiceHealthStatus(String service, String cluster, String envVar)\n+        throws Exception {\n         String health = commonspec.retrieveHealthServiceStatus(service, cluster);\n \n         ThreadProperty.set(envVar, health);\n@@ -2075,10 +2404,13 @@ public class CCTSpec extends BaseGSpec {\n         this.commonspec.setRestHost(cluster);\n         this.commonspec.setRestPort(\":443\");\n \n-        response = this.commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, null, \"json\");\n+        response =\n+            this.commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, null, \"json\");\n \n         this.commonspec.setResponse(\"DELETE\", (Response) response.get());\n-        assertThat(this.commonspec.getResponse().getStatusCode()).as(\"It hasn't been possible to destroy service: \" + service).isIn(Arrays.asList(200, 202));\n+        assertThat(this.commonspec.getResponse().getStatusCode())\n+            .as(\"It hasn't been possible to destroy service: \" + service)\n+            .isIn(Arrays.asList(200, 202));\n     }\n \n     /**\n@@ -2089,13 +2421,15 @@ public class CCTSpec extends BaseGSpec {\n      */\n     @When(\"^All resources from service '(.+?)' have been freed$\")\n     public void checkResources(String service) throws Exception {\n-        Future<Response> response = commonspec.generateRequest(\"GET\", true, null, null, \"/mesos/state-summary\", null, null);\n+        Future<Response> response =\n+            commonspec.generateRequest(\"GET\", true, null, null, \"/mesos/state-summary\", null, null);\n \n         String json = \"[\" + response.get().getResponseBody() + \"]\";\n         String parsedElement = \"$..frameworks[?(@.active==false)].name\";\n         String value = commonspec.getJSONPathString(json, parsedElement, null);\n \n-        org.assertj.core.api.Assertions.assertThat(value).as(\"Inactive services\").doesNotContain(service);\n+        org.assertj.core.api.Assertions.assertThat(value).as(\"Inactive services\")\n+            .doesNotContain(service);\n     }\n \n     /**\n@@ -2171,7 +2505,8 @@ public class CCTSpec extends BaseGSpec {\n \n         File fileCABundle = new File(\"target/test-classes/ca.crt\");\n         Assertions.assertThat(fileCABundle.length()).isGreaterThan(1);\n-        try (FileInputStream fileCABundleInputStream = new FileInputStream(\"target/test-classes/ca.crt\")) {\n+        try (FileInputStream fileCABundleInputStream = new FileInputStream(\n+            \"target/test-classes/ca.crt\")) {\n             String fileCABundleContent = IOUtils.toString(fileCABundleInputStream);\n             Assertions.assertThat(fileCABundleContent).isNotEqualToIgnoringCase(\"null\\n\");\n         }\n@@ -2189,7 +2524,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get certificate '(.+?)' using deploy-api from path '(.+?)' in P12 format and save the password in environment variable '(.+?)'( in /people)?$\")\n-    public void getP12Certificate(String value, String path, String envVar, String inPeople) throws Exception {\n+    public void getP12Certificate(String value, String path, String envVar, String inPeople)\n+        throws Exception {\n         cctUtils.setSecretsBasePath(inPeople != null);\n         cctUtils.getPKCS12Certificate(path, value, envVar);\n \n@@ -2209,7 +2545,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get certificate '(.+?)' using deploy-api from path '(.+?)' in JKS and save the password in environment variable '(.+?)'( in /people)?$\")\n-    public void getJKSCertificate(String value, String path, String envVar, String inPeople) throws Exception {\n+    public void getJKSCertificate(String value, String path, String envVar, String inPeople)\n+        throws Exception {\n         cctUtils.setSecretsBasePath(inPeople != null);\n         cctUtils.getKeystore(path, value, envVar);\n \n@@ -2280,7 +2617,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get principal '(.+?)' using deploy-api from path '(.+?)' and save it in environment variable '(.+?)'( in /people)?$\")\n-    public void getPrincipal(String value, String path, String envVar, String inPeople) throws Exception {\n+    public void getPrincipal(String value, String path, String envVar, String inPeople)\n+        throws Exception {\n         cctUtils.setSecretsBasePath(inPeople != null);\n         cctUtils.getPrincipalKrb(path, value, envVar);\n \n",
            "diff_size": 601
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1736",
                    "severity": "error",
                    "message": "'switch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "1802",
                    "severity": "error",
                    "message": "'switch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/142/CCTSpec.java\nindex 522d88c832e..7567a770c2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/142/CCTSpec.java\n@@ -63,7 +63,8 @@ public class CCTSpec extends BaseGSpec {\n     CCTUtils cctUtils;\n \n     RestSpec restSpec;\n-    /**\n+\n+/**\n      * Generic constructor.\n      *\n      * @param spec object\n@@ -342,10 +343,7 @@ public class CCTSpec extends BaseGSpec {\n     private String getLogPathFromDeployApi(String logType, String service, String taskAttr, String expectedTaskStatus, Integer position, String taskAttrType) throws Exception {\n         DeployedTask deployedTask = this.commonspec.deployApiClient.getDeployedApp(service).getTasks().stream()\n                 .filter(expectedTaskStatus != null ? task -> task.getState().equals(expectedTaskStatus) : task -> true)\n-                .filter(task -> taskAttrType.equals(\"ID\") ? task.getId().matches(taskAttr) :\n-                                taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) :\n-                                taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) : task.getCalicoIP().matches(taskAttr))\n-                .sorted(Comparator.comparing(DeployedTask::getTimestamp).reversed())\n+                .filter(task -> taskAttrType.equals(\"ID\") ? task.getId().matches(taskAttr) : taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) : taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) : task.getCalicoIP().matches(taskAttr)).sorted(Comparator.comparing(DeployedTask::getTimestamp).reversed())\n                 .skip(position)\n                 .findFirst().orElse(null);\n         if (deployedTask != null) {\n@@ -374,10 +372,7 @@ public class CCTSpec extends BaseGSpec {\n     private String getLogPathFromMarathonServices(String logType, String service, String taskAttr, TaskStatus expectedTaskStatus, Integer position, String taskAttrType) throws Exception {\n         DeployedServiceTask deployedServiceTask = this.commonspec.cctMarathonServiceClient.getService(service, 1, 50).getTasks().stream()\n                 .filter(expectedTaskStatus != null ? task -> task.getStatus().equals(expectedTaskStatus) : task -> true)\n-                .filter(task -> taskAttrType.equals(\"ID\") ? task.getId().matches(taskAttr) :\n-                                taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) :\n-                                taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) : task.getSecuredHost().matches(taskAttr))\n-                .sorted(Comparator.comparing(DeployedServiceTask::getTimestamp).reversed())\n+                .filter(task -> taskAttrType.equals(\"ID\") ? task.getId().matches(taskAttr) : taskAttrType.equals(\"name\") ? task.getName().matches(taskAttr) : taskAttrType.equals(\"host\") ? task.getHost().matches(taskAttr) : task.getSecuredHost().matches(taskAttr)).sorted(Comparator.comparing(DeployedServiceTask::getTimestamp).reversed())\n                 .skip(position)\n                 .findFirst().orElse(null);\n         if (deployedServiceTask != null) {\n@@ -1161,8 +1156,7 @@ public class CCTSpec extends BaseGSpec {\n      */\n     @Given(\"^I get schema( with level '(\\\\d+)')? from service '(.+?)' with model '(.+?)' and version '(.+?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getServiceSchema(Integer level, String service, String model, String version, String envVar, String fileName) throws Exception {\n-\n-        // Set REST connection\n+    // Set REST connection\n         commonspec.setCCTConnection(null, null);\n \n         if (level == null) {\n@@ -1739,7 +1733,7 @@ public class CCTSpec extends BaseGSpec {\n             default:\n                 urlParams = \"\";\n                 secretTypeAux = \"default\";\n-        }\n+    }\n         if (force != null) {\n             String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret : \"%2Fuserland%2F\" + secretTypeAux + \"%2F\" + secret;\n             restSpec.sendRequestNoDataTable(\"DELETE\", baseUrl + \"?path=\" + pathAux, null, null, null);\n@@ -1805,7 +1799,7 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             default:\n                 secretTypeAux = \"default\";\n-        }\n+    }\n         String pathAux = path != null ? path.replaceAll(\"/\", \"%2F\") + \"%2F\" + secret : \"%2Fuserland%2F\" + secretTypeAux + \"%2F\" + secret;\n         restSpec.sendRequestNoDataTable(\"DELETE\", baseUrl + \"?path=\" + pathAux, null, null, null);\n         restSpec.sendRequestNoDataTable(\"GET\", baseUrl + \"?path=\" + pathAux, null, null, null);\n@@ -2319,4 +2313,4 @@ public class CCTSpec extends BaseGSpec {\n         Assertions.assertThat(ThreadProperty.get(envVar)).isNotEmpty();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/142/CCTSpec.java\nindex 522d88c832e..c4b3bc4ac44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/142/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/142/CCTSpec.java\n@@ -68,6 +68,7 @@ public class CCTSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public CCTSpec(CommonG spec) {\n         this.commonspec = spec;\n         restSpec = new RestSpec(spec);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}