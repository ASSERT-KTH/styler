{
    "project_name": "eclipse-ee4j-glassfish",
    "error_id": "48",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "29",
                "severity": "warning",
                "message": "'if' child has incorrect indentation level 28, expected level should be 20.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                    Object other = Proxy.isProxyClass(args[0].getClass()) ?\n                            Proxy.getInvocationHandler(args[0]) : args[0];\n                            result = handler.equals(other);\n                }\n                returnValue = result;\n                break;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler/48/InvocationHandlerUtil.java\nindex c8f802082ab..7f2e46bcf35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler/48/InvocationHandlerUtil.java\n@@ -46,7 +46,7 @@ public final class InvocationHandlerUtil {\n                 if (args[0] != null) {\n                     Object other = Proxy.isProxyClass(args[0].getClass()) ?\n                             Proxy.getInvocationHandler(args[0]) : args[0];\n-                            result = handler.equals(other);\n+                    result = handler.equals(other);\n                 }\n                 returnValue = result;\n                 break;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/48/InvocationHandlerUtil.java\nindex c8f802082ab..a6725b63972 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/48/InvocationHandlerUtil.java\n@@ -25,10 +25,11 @@ import java.rmi.RemoteException;\n \n public final class InvocationHandlerUtil {\n \n-    InvocationHandlerUtil() {}\n+    InvocationHandlerUtil() {\n+    }\n \n     public static Object invokeJavaObjectMethod(InvocationHandler handler,\n-                                         Method method, Object[] args)\n+                                                Method method, Object[] args)\n         throws EJBException {\n \n         Object returnValue = null;\n@@ -40,23 +41,23 @@ public final class InvocationHandlerUtil {\n         //\n         // Optimize by comparing as few characters as possible.\n \n-        switch( method.getName().charAt(0) ) {\n-            case 'e' :\n+        switch (method.getName().charAt(0)) {\n+            case 'e':\n                 boolean result = false;\n                 if (args[0] != null) {\n                     Object other = Proxy.isProxyClass(args[0].getClass()) ?\n-                            Proxy.getInvocationHandler(args[0]) : args[0];\n-                            result = handler.equals(other);\n+                        Proxy.getInvocationHandler(args[0]) : args[0];\n+                    result = handler.equals(other);\n                 }\n                 returnValue = result;\n                 break;\n-            case 'h' :\n+            case 'h':\n                 returnValue = handler.hashCode();\n                 break;\n-            case 't' :\n+            case 't':\n                 returnValue = handler.toString();\n                 break;\n-            default :\n+            default:\n                 throw new EJBException(method.getName());\n         }\n \n@@ -64,13 +65,12 @@ public final class InvocationHandlerUtil {\n     }\n \n     public static boolean isDeclaredException(Throwable t,\n-                                       Class[] declaredExceptions)\n-    {\n+                                              Class[] declaredExceptions) {\n         boolean declaredException = false;\n \n-        for(int i = 0; i < declaredExceptions.length; i++) {\n+        for (int i = 0; i < declaredExceptions.length; i++) {\n             Class next = declaredExceptions[i];\n-            if( next.isAssignableFrom(t.getClass()) ) {\n+            if (next.isAssignableFrom(t.getClass())) {\n                 declaredException = true;\n                 break;\n             }\n@@ -80,13 +80,12 @@ public final class InvocationHandlerUtil {\n     }\n \n     public static void throwLocalException(Throwable t,\n-                                    Class[] declaredExceptions)\n-        throws Throwable\n-    {\n+                                           Class[] declaredExceptions)\n+        throws Throwable {\n         Throwable toThrow;\n \n-        if( (t instanceof java.lang.RuntimeException) ||\n-            (isDeclaredException(t, declaredExceptions)) ) {\n+        if ((t instanceof java.lang.RuntimeException) ||\n+            (isDeclaredException(t, declaredExceptions))) {\n             toThrow = t;\n         } else {\n             toThrow = new EJBException(t.getMessage());\n@@ -98,14 +97,13 @@ public final class InvocationHandlerUtil {\n     }\n \n     public static void throwRemoteException(Throwable t,\n-                                     Class[] declaredExceptions)\n-        throws Throwable\n-    {\n+                                            Class[] declaredExceptions)\n+        throws Throwable {\n         Throwable toThrow;\n \n-        if( (t instanceof java.lang.RuntimeException) ||\n+        if ((t instanceof java.lang.RuntimeException) ||\n             (t instanceof java.rmi.RemoteException) ||\n-            (isDeclaredException(t, declaredExceptions)) ) {\n+            (isDeclaredException(t, declaredExceptions))) {\n             toThrow = t;\n         } else {\n             toThrow = new RemoteException(t.getMessage(), t);\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "column": "29",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 28, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "warning",
                    "message": "'throws' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "warning",
                    "message": "'throws' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/48/InvocationHandlerUtil.java\nindex c8f802082ab..d34595018fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/48/InvocationHandlerUtil.java\n@@ -28,8 +28,7 @@ public final class InvocationHandlerUtil {\n     InvocationHandlerUtil() {}\n \n     public static Object invokeJavaObjectMethod(InvocationHandler handler,\n-                                         Method method, Object[] args)\n-        throws EJBException {\n+                                         Method method, Object[] args) throws EJBException {\n \n         Object returnValue = null;\n \n@@ -63,9 +62,7 @@ public final class InvocationHandlerUtil {\n         return returnValue;\n     }\n \n-    public static boolean isDeclaredException(Throwable t,\n-                                       Class[] declaredExceptions)\n-    {\n+    public static boolean isDeclaredException(Throwable t, Class[] declaredExceptions) {\n         boolean declaredException = false;\n \n         for(int i = 0; i < declaredExceptions.length; i++) {\n@@ -79,9 +76,8 @@ public final class InvocationHandlerUtil {\n         return declaredException;\n     }\n \n-    public static void throwLocalException(Throwable t,\n-                                    Class[] declaredExceptions)\n-        throws Throwable\n+    public static void throwLocalException(Throwable t, Class[] declaredExceptions)\n+    throws Throwable\n     {\n         Throwable toThrow;\n \n@@ -97,9 +93,8 @@ public final class InvocationHandlerUtil {\n \n     }\n \n-    public static void throwRemoteException(Throwable t,\n-                                     Class[] declaredExceptions)\n-        throws Throwable\n+    public static void throwRemoteException(Throwable t, Class[] declaredExceptions)\n+    throws Throwable\n     {\n         Throwable toThrow;\n \n@@ -113,4 +108,4 @@ public final class InvocationHandlerUtil {\n \n         throw toThrow;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_random/48/InvocationHandlerUtil.java\nindex c8f802082ab..7f2e46bcf35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_random/48/InvocationHandlerUtil.java\n@@ -46,7 +46,7 @@ public final class InvocationHandlerUtil {\n                 if (args[0] != null) {\n                     Object other = Proxy.isProxyClass(args[0].getClass()) ?\n                             Proxy.getInvocationHandler(args[0]) : args[0];\n-                            result = handler.equals(other);\n+                    result = handler.equals(other);\n                 }\n                 returnValue = result;\n                 break;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/48/InvocationHandlerUtil.java\nindex c8f802082ab..7f2e46bcf35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/48/InvocationHandlerUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/48/InvocationHandlerUtil.java\n@@ -46,7 +46,7 @@ public final class InvocationHandlerUtil {\n                 if (args[0] != null) {\n                     Object other = Proxy.isProxyClass(args[0].getClass()) ?\n                             Proxy.getInvocationHandler(args[0]) : args[0];\n-                            result = handler.equals(other);\n+                    result = handler.equals(other);\n                 }\n                 returnValue = result;\n                 break;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}