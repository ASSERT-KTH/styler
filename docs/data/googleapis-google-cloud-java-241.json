{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "241",
    "information": {
        "errors": [
            {
                "line": "345",
                "severity": "warning",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    verify(compute);\n  }\n  @Test\n  public void testIsDone_NotExists() throws Exception {\n    initializeExpectedOperation(3);\n    Compute.OperationOption[] expectedOptions =",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/241/OperationTest.java\nindex e13f77c551a..1bec658bc74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/241/OperationTest.java\n@@ -342,6 +342,7 @@ public class OperationTest {\n     assertFalse(operation.isDone());\n     verify(compute);\n   }\n+\n   @Test\n   public void testIsDone_NotExists() throws Exception {\n     initializeExpectedOperation(3);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/241/OperationTest.java\nindex e13f77c551a..1bec658bc74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/241/OperationTest.java\n@@ -342,6 +342,7 @@ public class OperationTest {\n     assertFalse(operation.isDone());\n     verify(compute);\n   }\n+\n   @Test\n   public void testIsDone_NotExists() throws Exception {\n     initializeExpectedOperation(3);\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "322",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "334",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "344",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "347",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/241/OperationTest.java\nindex e13f77c551a..7ec72d2ac34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/241/OperationTest.java\n@@ -319,8 +319,7 @@ public class OperationTest {\n   @Test\n   public void testIsDone_True() throws Exception {\n     initializeExpectedOperation(3);\n-    Compute.OperationOption[] expectedOptions =\n-        {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n+    Compute.OperationOption[] expectedOptions = {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n     expect(compute.options()).andReturn(mockOptions);\n     expect(compute.get(GLOBAL_OPERATION_ID, expectedOptions)).andReturn(globalOperation);\n     replay(compute);\n@@ -332,8 +331,7 @@ public class OperationTest {\n   @Test\n   public void testIsDone_False() throws Exception {\n     initializeExpectedOperation(4);\n-    Compute.OperationOption[] expectedOptions =\n-        {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n+    Compute.OperationOption[] expectedOptions = {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n     expect(compute.options()).andReturn(mockOptions);\n     expect(compute.get(GLOBAL_OPERATION_ID, expectedOptions)).andReturn(\n         Operation.fromPb(serviceMockReturnsOptions, globalOperation.toPb().setStatus(\"PENDING\")));\n@@ -342,11 +340,11 @@ public class OperationTest {\n     assertFalse(operation.isDone());\n     verify(compute);\n   }\n-  @Test\n+\n+@Test\n   public void testIsDone_NotExists() throws Exception {\n     initializeExpectedOperation(3);\n-    Compute.OperationOption[] expectedOptions =\n-        {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n+    Compute.OperationOption[] expectedOptions = {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n     expect(compute.options()).andReturn(mockOptions);\n     expect(compute.get(GLOBAL_OPERATION_ID, expectedOptions)).andReturn(null);\n     replay(compute);\n@@ -413,4 +411,4 @@ public class OperationTest {\n     assertEquals(expected.description(), value.description());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 530).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 526).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 530).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 506).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "243",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "279",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/241/OperationTest.java\nindex e13f77c551a..347d483c59b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/241/OperationTest.java\n@@ -33,22 +33,17 @@ import com.google.common.collect.ImmutableMap;\n import com.google.gcloud.compute.Operation.OperationError;\n import com.google.gcloud.compute.Operation.OperationWarning;\n import com.google.gcloud.compute.Operation.Status;\n-\n import org.junit.After;\n import org.junit.Test;\n-\n import java.util.List;\n \n+\n public class OperationTest {\n \n-  private static final OperationError OPERATION_ERROR1 =\n-      new OperationError(\"code1\", \"location1\", \"message1\");\n-  private static final OperationError OPERATION_ERROR2 =\n-      new OperationError(\"code2\", \"location2\", \"message2\");\n-  private static final OperationWarning OPERATION_WARNING1 =\n-      new OperationWarning(\"code1\", \"message1\", ImmutableMap.of(\"k1\", \"v1\"));\n-  private static final OperationWarning OPERATION_WARNING2 =\n-      new OperationWarning(\"code2\", \"location2\", ImmutableMap.of(\"k2\", \"v2\"));\n+  private static final OperationError OPERATION_ERROR1 = new OperationError(\"code1\", \"location1\", \"message1\");\n+  private static final OperationError OPERATION_ERROR2 = new OperationError(\"code2\", \"location2\", \"message2\");\n+  private static final OperationWarning OPERATION_WARNING1 = new OperationWarning(\"code1\", \"message1\", ImmutableMap.of(\"k1\", \"v1\"));\n+  private static final OperationWarning OPERATION_WARNING2 = new OperationWarning(\"code2\", \"location2\", ImmutableMap.of(\"k2\", \"v2\"));\n   private static final String GENERATED_ID = \"1\";\n   private static final String CLIENT_OPERATION_ID = \"clientOperationId\";\n   private static final String OPERATION_TYPE = \"delete\";\n@@ -61,20 +56,14 @@ public class OperationTest {\n   private static final Long INSERT_TIME = 1453293540000L;\n   private static final Long START_TIME = 1453293420000L;\n   private static final Long END_TIME = 1453293480000L;\n-  private static final List<OperationError> ERRORS =\n-      ImmutableList.of(OPERATION_ERROR1, OPERATION_ERROR2);\n-  private static final List<OperationWarning> WARNINGS =\n-      ImmutableList.of(OPERATION_WARNING1, OPERATION_WARNING2);\n+  private static final List<OperationError> ERRORS = ImmutableList.of(OPERATION_ERROR1, OPERATION_ERROR2);\n+  private static final List<OperationWarning> WARNINGS = ImmutableList.of(OPERATION_WARNING1, OPERATION_WARNING2);\n   private static final Integer HTTP_ERROR_STATUS_CODE = 404;\n   private static final String HTTP_ERROR_MESSAGE = \"NOT FOUND\";\n   private static final String DESCRIPTION = \"description\";\n-  private static final GlobalOperationId GLOBAL_OPERATION_ID =\n-      GlobalOperationId.of(\"project\", \"op\");\n-  private static final ZoneOperationId ZONE_OPERATION_ID =\n-      ZoneOperationId.of(\"project\", \"zone\", \"op\");\n-  private static final RegionOperationId REGION_OPERATION_ID =\n-      RegionOperationId.of(\"project\", \"region\", \"op\");\n-\n+  private static final GlobalOperationId GLOBAL_OPERATION_ID = GlobalOperationId.of(\"project\", \"op\");\n+  private static final ZoneOperationId ZONE_OPERATION_ID = ZoneOperationId.of(\"project\", \"zone\", \"op\");\n+  private static final RegionOperationId REGION_OPERATION_ID = RegionOperationId.of(\"project\", \"region\", \"op\");\n   private final Compute serviceMockReturnsOptions = createStrictMock(Compute.class);\n   private final ComputeOptions mockOptions = createMock(ComputeOptions.class);\n   private Compute compute;\n@@ -82,94 +71,17 @@ public class OperationTest {\n   private Operation regionOperation;\n   private Operation zoneOperation;\n   private Operation operation;\n-\n   private void initializeExpectedOperation(int optionsCalls) {\n     expect(serviceMockReturnsOptions.options()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n-    globalOperation = new Operation.Builder(serviceMockReturnsOptions)\n-        .generatedId(GENERATED_ID)\n-        .operationId(GLOBAL_OPERATION_ID)\n-        .clientOperationId(CLIENT_OPERATION_ID)\n-        .operationType(OPERATION_TYPE)\n-        .targetLink(TARGET_LINK)\n-        .targetId(TARGET_ID)\n-        .status(STATUS)\n-        .statusMessage(STATUS_MESSAGE)\n-        .user(USER)\n-        .progress(PROGRESS)\n-        .insertTime(INSERT_TIME)\n-        .startTime(START_TIME)\n-        .endTime(END_TIME)\n-        .errors(ERRORS)\n-        .warnings(WARNINGS)\n-        .httpErrorStatusCode(HTTP_ERROR_STATUS_CODE)\n-        .httpErrorMessage(HTTP_ERROR_MESSAGE)\n-        .description(DESCRIPTION)\n-        .build();\n-    zoneOperation = new Operation.Builder(serviceMockReturnsOptions)\n-        .generatedId(GENERATED_ID)\n-        .operationId(ZONE_OPERATION_ID)\n-        .clientOperationId(CLIENT_OPERATION_ID)\n-        .operationType(OPERATION_TYPE)\n-        .targetLink(TARGET_LINK)\n-        .targetId(TARGET_ID)\n-        .status(STATUS)\n-        .statusMessage(STATUS_MESSAGE)\n-        .user(USER)\n-        .progress(PROGRESS)\n-        .insertTime(INSERT_TIME)\n-        .startTime(START_TIME)\n-        .endTime(END_TIME)\n-        .errors(ERRORS)\n-        .warnings(WARNINGS)\n-        .httpErrorStatusCode(HTTP_ERROR_STATUS_CODE)\n-        .httpErrorMessage(HTTP_ERROR_MESSAGE)\n-        .description(DESCRIPTION)\n-        .build();\n-    regionOperation = new Operation.Builder(serviceMockReturnsOptions)\n-        .generatedId(GENERATED_ID)\n-        .operationId(REGION_OPERATION_ID)\n-        .clientOperationId(CLIENT_OPERATION_ID)\n-        .operationType(OPERATION_TYPE)\n-        .targetLink(TARGET_LINK)\n-        .targetId(TARGET_ID)\n-        .status(STATUS)\n-        .statusMessage(STATUS_MESSAGE)\n-        .user(USER)\n-        .progress(PROGRESS)\n-        .insertTime(INSERT_TIME)\n-        .startTime(START_TIME)\n-        .endTime(END_TIME)\n-        .errors(ERRORS)\n-        .warnings(WARNINGS)\n-        .httpErrorStatusCode(HTTP_ERROR_STATUS_CODE)\n-        .httpErrorMessage(HTTP_ERROR_MESSAGE)\n-        .description(DESCRIPTION)\n-        .build();\n+    globalOperation = new Operation.Builder(serviceMockReturnsOptions).generatedId(GENERATED_ID).operationId(GLOBAL_OPERATION_ID).clientOperationId(CLIENT_OPERATION_ID).operationType(OPERATION_TYPE).targetLink(TARGET_LINK).targetId(TARGET_ID).status(STATUS).statusMessage(STATUS_MESSAGE).user(USER).progress(PROGRESS).insertTime(INSERT_TIME).startTime(START_TIME).endTime(END_TIME).errors(ERRORS).warnings(WARNINGS).httpErrorStatusCode(HTTP_ERROR_STATUS_CODE).httpErrorMessage(HTTP_ERROR_MESSAGE).description(DESCRIPTION).build();\n+    zoneOperation = new Operation.Builder(serviceMockReturnsOptions).generatedId(GENERATED_ID).operationId(ZONE_OPERATION_ID).clientOperationId(CLIENT_OPERATION_ID).operationType(OPERATION_TYPE).targetLink(TARGET_LINK).targetId(TARGET_ID).status(STATUS).statusMessage(STATUS_MESSAGE).user(USER).progress(PROGRESS).insertTime(INSERT_TIME).startTime(START_TIME).endTime(END_TIME).errors(ERRORS).warnings(WARNINGS).httpErrorStatusCode(HTTP_ERROR_STATUS_CODE).httpErrorMessage(HTTP_ERROR_MESSAGE).description(DESCRIPTION).build();\n+    regionOperation = new Operation.Builder(serviceMockReturnsOptions).generatedId(GENERATED_ID).operationId(REGION_OPERATION_ID).clientOperationId(CLIENT_OPERATION_ID).operationType(OPERATION_TYPE).targetLink(TARGET_LINK).targetId(TARGET_ID).status(STATUS).statusMessage(STATUS_MESSAGE).user(USER).progress(PROGRESS).insertTime(INSERT_TIME).startTime(START_TIME).endTime(END_TIME).errors(ERRORS).warnings(WARNINGS).httpErrorStatusCode(HTTP_ERROR_STATUS_CODE).httpErrorMessage(HTTP_ERROR_MESSAGE).description(DESCRIPTION).build();\n     compute = createStrictMock(Compute.class);\n   }\n \n   private void initializeOperation() {\n-    operation = new Operation.Builder(compute)\n-        .generatedId(GENERATED_ID)\n-        .operationId(GLOBAL_OPERATION_ID)\n-        .clientOperationId(CLIENT_OPERATION_ID)\n-        .operationType(OPERATION_TYPE)\n-        .targetLink(TARGET_LINK)\n-        .targetId(TARGET_ID)\n-        .status(STATUS)\n-        .statusMessage(STATUS_MESSAGE)\n-        .user(USER)\n-        .progress(PROGRESS)\n-        .insertTime(INSERT_TIME)\n-        .startTime(START_TIME)\n-        .endTime(END_TIME)\n-        .errors(ERRORS)\n-        .warnings(WARNINGS)\n-        .httpErrorStatusCode(HTTP_ERROR_STATUS_CODE)\n-        .httpErrorMessage(HTTP_ERROR_MESSAGE)\n-        .description(DESCRIPTION)\n-        .build();\n+    operation = new Operation.Builder(compute).generatedId(GENERATED_ID).operationId(GLOBAL_OPERATION_ID).clientOperationId(CLIENT_OPERATION_ID).operationType(OPERATION_TYPE).targetLink(TARGET_LINK).targetId(TARGET_ID).status(STATUS).statusMessage(STATUS_MESSAGE).user(USER).progress(PROGRESS).insertTime(INSERT_TIME).startTime(START_TIME).endTime(END_TIME).errors(ERRORS).warnings(WARNINGS).httpErrorStatusCode(HTTP_ERROR_STATUS_CODE).httpErrorMessage(HTTP_ERROR_MESSAGE).description(DESCRIPTION).build();\n   }\n \n   @After\n@@ -228,19 +140,13 @@ public class OperationTest {\n     assertEquals(REGION_OPERATION_ID, regionOperation.operationId());\n     assertEqualsCommonFields(zoneOperation);\n     assertEquals(ZONE_OPERATION_ID, zoneOperation.operationId());\n-    Operation operation = new Operation.Builder(serviceMockReturnsOptions)\n-        .operationId(GLOBAL_OPERATION_ID)\n-        .build();\n+    Operation operation = new Operation.Builder(serviceMockReturnsOptions).operationId(GLOBAL_OPERATION_ID).build();\n     assertNullCommonFields(operation);\n     assertEquals(GLOBAL_OPERATION_ID, operation.operationId());\n-    operation = new Operation.Builder(serviceMockReturnsOptions)\n-        .operationId(ZONE_OPERATION_ID)\n-        .build();\n+    operation = new Operation.Builder(serviceMockReturnsOptions).operationId(ZONE_OPERATION_ID).build();\n     assertNullCommonFields(operation);\n     assertEquals(ZONE_OPERATION_ID, operation.operationId());\n-    operation = new Operation.Builder(serviceMockReturnsOptions)\n-        .operationId(REGION_OPERATION_ID)\n-        .build();\n+    operation = new Operation.Builder(serviceMockReturnsOptions).operationId(REGION_OPERATION_ID).build();\n     assertNullCommonFields(operation);\n     assertEquals(REGION_OPERATION_ID, operation.operationId());\n   }\n@@ -248,25 +154,16 @@ public class OperationTest {\n   @Test\n   public void testToAndFromPb() {\n     initializeExpectedOperation(24);\n-    compareOperation(globalOperation,\n-        Operation.fromPb(serviceMockReturnsOptions, globalOperation.toPb()));\n+    compareOperation(globalOperation, Operation.fromPb(serviceMockReturnsOptions, globalOperation.toPb()));\n     assertNotNull(regionOperation.toPb().getRegion());\n-    compareOperation(regionOperation,\n-        Operation.fromPb(serviceMockReturnsOptions, regionOperation.toPb()));\n+    compareOperation(regionOperation, Operation.fromPb(serviceMockReturnsOptions, regionOperation.toPb()));\n     assertNotNull(zoneOperation.toPb().getZone());\n-    compareOperation(zoneOperation,\n-        Operation.fromPb(serviceMockReturnsOptions, zoneOperation.toPb()));\n-    Operation operation = new Operation.Builder(serviceMockReturnsOptions)\n-        .operationId(GLOBAL_OPERATION_ID)\n-        .build();\n+    compareOperation(zoneOperation, Operation.fromPb(serviceMockReturnsOptions, zoneOperation.toPb()));\n+    Operation operation = new Operation.Builder(serviceMockReturnsOptions).operationId(GLOBAL_OPERATION_ID).build();\n     compareOperation(operation, Operation.fromPb(serviceMockReturnsOptions, operation.toPb()));\n-    operation = new Operation.Builder(serviceMockReturnsOptions)\n-        .operationId(ZONE_OPERATION_ID)\n-        .build();\n+    operation = new Operation.Builder(serviceMockReturnsOptions).operationId(ZONE_OPERATION_ID).build();\n     compareOperation(operation, Operation.fromPb(serviceMockReturnsOptions, operation.toPb()));\n-    operation = new Operation.Builder(serviceMockReturnsOptions)\n-        .operationId(REGION_OPERATION_ID)\n-        .build();\n+    operation = new Operation.Builder(serviceMockReturnsOptions).operationId(REGION_OPERATION_ID).build();\n     compareOperation(operation, Operation.fromPb(serviceMockReturnsOptions, operation.toPb()));\n   }\n \n@@ -319,8 +216,7 @@ public class OperationTest {\n   @Test\n   public void testIsDone_True() throws Exception {\n     initializeExpectedOperation(3);\n-    Compute.OperationOption[] expectedOptions =\n-        {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n+    Compute.OperationOption[] expectedOptions = {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n     expect(compute.options()).andReturn(mockOptions);\n     expect(compute.get(GLOBAL_OPERATION_ID, expectedOptions)).andReturn(globalOperation);\n     replay(compute);\n@@ -332,21 +228,19 @@ public class OperationTest {\n   @Test\n   public void testIsDone_False() throws Exception {\n     initializeExpectedOperation(4);\n-    Compute.OperationOption[] expectedOptions =\n-        {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n+    Compute.OperationOption[] expectedOptions = {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n     expect(compute.options()).andReturn(mockOptions);\n-    expect(compute.get(GLOBAL_OPERATION_ID, expectedOptions)).andReturn(\n-        Operation.fromPb(serviceMockReturnsOptions, globalOperation.toPb().setStatus(\"PENDING\")));\n+    expect(compute.get(GLOBAL_OPERATION_ID, expectedOptions)).andReturn(Operation.fromPb(serviceMockReturnsOptions, globalOperation.toPb().setStatus(\"PENDING\")));\n     replay(compute);\n     initializeOperation();\n     assertFalse(operation.isDone());\n     verify(compute);\n   }\n+\n   @Test\n   public void testIsDone_NotExists() throws Exception {\n     initializeExpectedOperation(3);\n-    Compute.OperationOption[] expectedOptions =\n-        {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n+    Compute.OperationOption[] expectedOptions = {Compute.OperationOption.fields(Compute.OperationField.STATUS)};\n     expect(compute.options()).andReturn(mockOptions);\n     expect(compute.get(GLOBAL_OPERATION_ID, expectedOptions)).andReturn(null);\n     replay(compute);\n@@ -382,8 +276,7 @@ public class OperationTest {\n   public void testReloadWithOptions() throws Exception {\n     initializeExpectedOperation(5);\n     expect(compute.options()).andReturn(mockOptions);\n-    expect(compute.get(GLOBAL_OPERATION_ID, Compute.OperationOption.fields()))\n-        .andReturn(globalOperation);\n+    expect(compute.get(GLOBAL_OPERATION_ID, Compute.OperationOption.fields())).andReturn(globalOperation);\n     replay(compute);\n     initializeOperation();\n     Operation updatedOperation = operation.reload(Compute.OperationOption.fields());\n@@ -413,4 +306,4 @@ public class OperationTest {\n     assertEquals(expected.description(), value.description());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 139
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/241/OperationTest.java\nindex e13f77c551a..1bec658bc74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/241/OperationTest.java\n@@ -342,6 +342,7 @@ public class OperationTest {\n     assertFalse(operation.isDone());\n     verify(compute);\n   }\n+\n   @Test\n   public void testIsDone_NotExists() throws Exception {\n     initializeExpectedOperation(3);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/241/OperationTest.java\nindex e13f77c551a..1bec658bc74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/241/OperationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/241/OperationTest.java\n@@ -342,6 +342,7 @@ public class OperationTest {\n     assertFalse(operation.isDone());\n     verify(compute);\n   }\n+\n   @Test\n   public void testIsDone_NotExists() throws Exception {\n     initializeExpectedOperation(3);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}