{
    "project_name": "EMResearch-EMB",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "46",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "@Profile(\"jdbc\")\npublic class JdbcSpecialtyRepositoryImpl implements SpecialtyRepository {\n\t\n\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n\t\n\tprivate SimpleJdbcInsert insertSpecialty;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/2/JdbcSpecialtyRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/2/JdbcSpecialtyRepositoryImpl.java\nindex 5042cd0e7a7..a46174791d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/2/JdbcSpecialtyRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/2/JdbcSpecialtyRepositoryImpl.java\n@@ -37,28 +37,27 @@ import org.springframework.stereotype.Repository;\n \n /**\n  * @author Vitaliy Fedoriv\n- *\n  */\n \n @Repository\n @Profile(\"jdbc\")\n public class JdbcSpecialtyRepositoryImpl implements SpecialtyRepository {\n-\t\n-\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n-\t\n-\tprivate SimpleJdbcInsert insertSpecialty;\n \n-\t@Autowired\n-\tpublic JdbcSpecialtyRepositoryImpl(DataSource dataSource) {\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);\n-\t\tthis.insertSpecialty = new SimpleJdbcInsert(dataSource)\n-\t            .withTableName(\"specialties\")\n-\t            .usingGeneratedKeyColumns(\"id\");\n-\t}\n+    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+    private SimpleJdbcInsert insertSpecialty;\n+\n+    @Autowired\n+    public JdbcSpecialtyRepositoryImpl(DataSource dataSource) {\n+        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);\n+        this.insertSpecialty = new SimpleJdbcInsert(dataSource)\n+            .withTableName(\"specialties\")\n+            .usingGeneratedKeyColumns(\"id\");\n+    }\n \n-\t@Override\n-\tpublic Specialty findById(int id) {\n-\t\tSpecialty specialty;\n+    @Override\n+    public Specialty findById(int id) {\n+        Specialty specialty;\n         try {\n             Map<String, Object> params = new HashMap<>();\n             params.put(\"id\", id);\n@@ -70,21 +69,21 @@ public class JdbcSpecialtyRepositoryImpl implements SpecialtyRepository {\n             throw new ObjectRetrievalFailureException(Specialty.class, id);\n         }\n         return specialty;\n-\t}\n+    }\n \n-\t@Override\n-\tpublic Collection<Specialty> findAll() throws DataAccessException {\n-\t\tMap<String, Object> params = new HashMap<>();\n+    @Override\n+    public Collection<Specialty> findAll() throws DataAccessException {\n+        Map<String, Object> params = new HashMap<>();\n         return this.namedParameterJdbcTemplate.query(\n             \"SELECT id, name FROM specialties\",\n             params,\n             BeanPropertyRowMapper.newInstance(Specialty.class));\n-\t}\n+    }\n \n-\t@Override\n-\tpublic void save(Specialty specialty) throws DataAccessException {\n-\t\tBeanPropertySqlParameterSource parameterSource = new BeanPropertySqlParameterSource(specialty);\n-\t\tif (specialty.isNew()) {\n+    @Override\n+    public void save(Specialty specialty) throws DataAccessException {\n+        BeanPropertySqlParameterSource parameterSource = new BeanPropertySqlParameterSource(specialty);\n+        if (specialty.isNew()) {\n             Number newKey = this.insertSpecialty.executeAndReturnKey(parameterSource);\n             specialty.setId(newKey.intValue());\n         } else {\n@@ -92,14 +91,14 @@ public class JdbcSpecialtyRepositoryImpl implements SpecialtyRepository {\n                 parameterSource);\n         }\n \n-\t}\n+    }\n \n-\t@Override\n-\tpublic void delete(Specialty specialty) throws DataAccessException {\n-\t\tMap<String, Object> params = new HashMap<>();\n+    @Override\n+    public void delete(Specialty specialty) throws DataAccessException {\n+        Map<String, Object> params = new HashMap<>();\n         params.put(\"id\", specialty.getId());\n         this.namedParameterJdbcTemplate.update(\"DELETE FROM vet_specialties WHERE specialty_id=:id\", params);\n         this.namedParameterJdbcTemplate.update(\"DELETE FROM specialties WHERE id=:id\", params);\n-\t}\n+    }\n \n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "47",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/2/JdbcSpecialtyRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/2/JdbcSpecialtyRepositoryImpl.java\nindex 5042cd0e7a7..db7e4e53705 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/2/JdbcSpecialtyRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/2/JdbcSpecialtyRepositoryImpl.java\n@@ -43,63 +43,58 @@ import org.springframework.stereotype.Repository;\n @Repository\n @Profile(\"jdbc\")\n public class JdbcSpecialtyRepositoryImpl implements SpecialtyRepository {\n-\t\n-\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n \t\n \tprivate SimpleJdbcInsert insertSpecialty;\n \n-\t@Autowired\n+@Autowired\n \tpublic JdbcSpecialtyRepositoryImpl(DataSource dataSource) {\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);\n-\t\tthis.insertSpecialty = new SimpleJdbcInsert(dataSource)\n-\t            .withTableName(\"specialties\")\n+    this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);\n+\t\tthis.insertSpecialty = new SimpleJdbcInsert(dataSource).withTableName(\"specialties\")\n \t            .usingGeneratedKeyColumns(\"id\");\n \t}\n \n \t@Override\n \tpublic Specialty findById(int id) {\n-\t\tSpecialty specialty;\n-        try {\n+    Specialty specialty;\n+try {\n             Map<String, Object> params = new HashMap<>();\n             params.put(\"id\", id);\n             specialty = this.namedParameterJdbcTemplate.queryForObject(\n                 \"SELECT id, name FROM specialties WHERE id= :id\",\n                 params,\n                 BeanPropertyRowMapper.newInstance(Specialty.class));\n-        } catch (EmptyResultDataAccessException ex) {\n+    } catch (EmptyResultDataAccessException ex) {\n             throw new ObjectRetrievalFailureException(Specialty.class, id);\n         }\n         return specialty;\n-\t}\n+    }\n \n \t@Override\n \tpublic Collection<Specialty> findAll() throws DataAccessException {\n-\t\tMap<String, Object> params = new HashMap<>();\n-        return this.namedParameterJdbcTemplate.query(\n+  Map<String, Object> params = new HashMap<>();\n+return this.namedParameterJdbcTemplate.query(\n             \"SELECT id, name FROM specialties\",\n             params,\n             BeanPropertyRowMapper.newInstance(Specialty.class));\n-\t}\n+    }\n \n \t@Override\n \tpublic void save(Specialty specialty) throws DataAccessException {\n-\t\tBeanPropertySqlParameterSource parameterSource = new BeanPropertySqlParameterSource(specialty);\n+    BeanPropertySqlParameterSource parameterSource = new BeanPropertySqlParameterSource(specialty);\n \t\tif (specialty.isNew()) {\n-            Number newKey = this.insertSpecialty.executeAndReturnKey(parameterSource);\n+    Number newKey = this.insertSpecialty.executeAndReturnKey(parameterSource);\n             specialty.setId(newKey.intValue());\n         } else {\n-            this.namedParameterJdbcTemplate.update(\"UPDATE specialties SET name=:name WHERE id=:id\",\n-                parameterSource);\n+            this.namedParameterJdbcTemplate.update(\"UPDATE specialties SET name=:name WHERE id=:id\", parameterSource);\n         }\n-\n-\t}\n+    }\n \n \t@Override\n \tpublic void delete(Specialty specialty) throws DataAccessException {\n-\t\tMap<String, Object> params = new HashMap<>();\n-        params.put(\"id\", specialty.getId());\n+  Map<String, Object> params = new HashMap<>();\n+params.put(\"id\", specialty.getId());\n         this.namedParameterJdbcTemplate.update(\"DELETE FROM vet_specialties WHERE specialty_id=:id\", params);\n         this.namedParameterJdbcTemplate.update(\"DELETE FROM specialties WHERE id=:id\", params);\n-\t}\n-\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/2/JdbcSpecialtyRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/2/JdbcSpecialtyRepositoryImpl.java\nindex 5042cd0e7a7..0494849c4a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/2/JdbcSpecialtyRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/2/JdbcSpecialtyRepositoryImpl.java\n@@ -19,9 +19,7 @@ package org.springframework.samples.petclinic.repository.jdbc;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n-\n import javax.sql.DataSource;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Profile;\n import org.springframework.dao.DataAccessException;\n@@ -40,66 +38,59 @@ import org.springframework.stereotype.Repository;\n  *\n  */\n \n+\n @Repository\n @Profile(\"jdbc\")\n public class JdbcSpecialtyRepositoryImpl implements SpecialtyRepository {\n-\t\n-\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n-\t\n-\tprivate SimpleJdbcInsert insertSpecialty;\n \n-\t@Autowired\n-\tpublic JdbcSpecialtyRepositoryImpl(DataSource dataSource) {\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);\n-\t\tthis.insertSpecialty = new SimpleJdbcInsert(dataSource)\n-\t            .withTableName(\"specialties\")\n-\t            .usingGeneratedKeyColumns(\"id\");\n-\t}\n+    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+    private SimpleJdbcInsert insertSpecialty;\n \n-\t@Override\n-\tpublic Specialty findById(int id) {\n-\t\tSpecialty specialty;\n+    @Autowired\n+    public JdbcSpecialtyRepositoryImpl(DataSource dataSource) {\n+        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(dataSource);\n+        this.insertSpecialty = new SimpleJdbcInsert(dataSource).withTableName(\"specialties\").usingGeneratedKeyColumns(\"id\");\n+    }\n+\n+    @Override\n+    public Specialty findById(int id) {\n+        Specialty specialty;\n         try {\n             Map<String, Object> params = new HashMap<>();\n             params.put(\"id\", id);\n-            specialty = this.namedParameterJdbcTemplate.queryForObject(\n-                \"SELECT id, name FROM specialties WHERE id= :id\",\n-                params,\n-                BeanPropertyRowMapper.newInstance(Specialty.class));\n+            specialty = this.namedParameterJdbcTemplate.queryForObject(\"SELECT id, name FROM specialties WHERE id= :id\",\n+                                                                       params,\n+                                                                       BeanPropertyRowMapper.newInstance(Specialty.class));\n         } catch (EmptyResultDataAccessException ex) {\n-            throw new ObjectRetrievalFailureException(Specialty.class, id);\n+          throw new ObjectRetrievalFailureException(Specialty.class, id);\n         }\n         return specialty;\n-\t}\n+    }\n \n-\t@Override\n-\tpublic Collection<Specialty> findAll() throws DataAccessException {\n-\t\tMap<String, Object> params = new HashMap<>();\n-        return this.namedParameterJdbcTemplate.query(\n-            \"SELECT id, name FROM specialties\",\n-            params,\n-            BeanPropertyRowMapper.newInstance(Specialty.class));\n-\t}\n+    @Override\n+    public Collection<Specialty> findAll() throws DataAccessException {\n+        Map<String, Object> params = new HashMap<>();\n+        return this.namedParameterJdbcTemplate.query(\"SELECT id, name FROM specialties\",\n+                                                     params,\n+                                                     BeanPropertyRowMapper.newInstance(Specialty.class));\n+    }\n \n-\t@Override\n-\tpublic void save(Specialty specialty) throws DataAccessException {\n-\t\tBeanPropertySqlParameterSource parameterSource = new BeanPropertySqlParameterSource(specialty);\n-\t\tif (specialty.isNew()) {\n+    @Override\n+    public void save(Specialty specialty) throws DataAccessException {\n+        BeanPropertySqlParameterSource parameterSource = new BeanPropertySqlParameterSource(specialty);\n+        if (specialty.isNew()) {\n             Number newKey = this.insertSpecialty.executeAndReturnKey(parameterSource);\n             specialty.setId(newKey.intValue());\n         } else {\n-            this.namedParameterJdbcTemplate.update(\"UPDATE specialties SET name=:name WHERE id=:id\",\n-                parameterSource);\n+            this.namedParameterJdbcTemplate.update(\"UPDATE specialties SET name=:name WHERE id=:id\", parameterSource);\n         }\n+    }\n \n-\t}\n-\n-\t@Override\n-\tpublic void delete(Specialty specialty) throws DataAccessException {\n-\t\tMap<String, Object> params = new HashMap<>();\n+    @Override\n+    public void delete(Specialty specialty) throws DataAccessException {\n+        Map<String, Object> params = new HashMap<>();\n         params.put(\"id\", specialty.getId());\n         this.namedParameterJdbcTemplate.update(\"DELETE FROM vet_specialties WHERE specialty_id=:id\", params);\n         this.namedParameterJdbcTemplate.update(\"DELETE FROM specialties WHERE id=:id\", params);\n-\t}\n-\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}