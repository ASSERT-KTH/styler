{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3248",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "120",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "106",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "306",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3248/DataSourceModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3248/DataSourceModule.java\nindex 5423c9bdb9f..4a4ee1cb69a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3248/DataSourceModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3248/DataSourceModule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.factory;\n \n import java.io.File;\n@@ -98,241 +99,240 @@ import static org.neo4j.kernel.api.proc.Context.SECURITY_CONTEXT;\n  */\n public class DataSourceModule\n {\n-    public final ThreadToStatementContextBridge threadToTransactionBridge;\n+  public final ThreadToStatementContextBridge threadToTransactionBridge;\n \n-    public final NeoStoreDataSource neoStoreDataSource;\n+  public final NeoStoreDataSource neoStoreDataSource;\n \n-    public final Supplier<InwardKernel> kernelAPI;\n+  public final Supplier<InwardKernel> kernelAPI;\n \n-    public final Supplier<QueryExecutionEngine> queryExecutor;\n+  public final Supplier<QueryExecutionEngine> queryExecutor;\n+\n+  public final KernelEventHandlers kernelEventHandlers;\n \n-    public final KernelEventHandlers kernelEventHandlers;\n+  public final TransactionEventHandlers transactionEventHandlers;\n \n-    public final TransactionEventHandlers transactionEventHandlers;\n+  public final Supplier<StoreId> storeId;\n \n-    public final Supplier<StoreId> storeId;\n+  public final AutoIndexing autoIndexing;\n \n-    public final AutoIndexing autoIndexing;\n+  public final Guard guard;\n \n-    public final Guard guard;\n+  public DataSourceModule(final PlatformModule platformModule, EditionModule editionModule,\n+                          Supplier<QueryExecutionEngine> queryExecutionEngineSupplier)\n+  {\n+    final Dependencies deps = platformModule.dependencies;\n+    Config config = platformModule.config;\n+    LogService logging = platformModule.logging;\n+    FileSystemAbstraction fileSystem = platformModule.fileSystem;\n+    DataSourceManager dataSourceManager = platformModule.dataSourceManager;\n+    LifeSupport life = platformModule.life;\n+    final GraphDatabaseFacade graphDatabaseFacade = platformModule.graphDatabaseFacade;\n+    RelationshipTypeTokenHolder relationshipTypeTokenHolder = editionModule.relationshipTypeTokenHolder;\n+    File storeDir = platformModule.storeDir;\n+    DiagnosticsManager diagnosticsManager = platformModule.diagnosticsManager;\n+    this.queryExecutor = queryExecutionEngineSupplier;\n \n-    public DataSourceModule( final PlatformModule platformModule, EditionModule editionModule,\n-            Supplier<QueryExecutionEngine> queryExecutionEngineSupplier )\n-    {\n-        final Dependencies deps = platformModule.dependencies;\n-        Config config = platformModule.config;\n-        LogService logging = platformModule.logging;\n-        FileSystemAbstraction fileSystem = platformModule.fileSystem;\n-        DataSourceManager dataSourceManager = platformModule.dataSourceManager;\n-        LifeSupport life = platformModule.life;\n-        final GraphDatabaseFacade graphDatabaseFacade = platformModule.graphDatabaseFacade;\n-        RelationshipTypeTokenHolder relationshipTypeTokenHolder = editionModule.relationshipTypeTokenHolder;\n-        File storeDir = platformModule.storeDir;\n-        DiagnosticsManager diagnosticsManager = platformModule.diagnosticsManager;\n-        this.queryExecutor = queryExecutionEngineSupplier;\n-\n-        threadToTransactionBridge = deps.satisfyDependency( life.add( new ThreadToStatementContextBridge() ) );\n-\n-        deps.satisfyDependency( graphDatabaseFacade );\n-        transactionEventHandlers = new TransactionEventHandlers( graphDatabaseFacade );\n-\n-        diagnosticsManager.prependProvider( config );\n-\n-        life.add( platformModule.kernelExtensions );\n-\n-        // Factories for things that needs to be created later\n-        PageCache pageCache = platformModule.pageCache;\n-\n-        StartupStatisticsProvider startupStatistics = deps.satisfyDependency( new StartupStatisticsProvider() );\n-\n-        SchemaWriteGuard schemaWriteGuard = deps.satisfyDependency( editionModule.schemaWriteGuard );\n-\n-        guard = createGuard( deps, platformModule.clock, logging );\n-\n-        kernelEventHandlers = new KernelEventHandlers( logging.getInternalLog( KernelEventHandlers.class ) );\n-\n-        DatabasePanicEventGenerator databasePanicEventGenerator = deps.satisfyDependency(\n-                new DatabasePanicEventGenerator( kernelEventHandlers ) );\n-\n-        DatabaseHealth databaseHealth = deps.satisfyDependency( new DatabaseHealth( databasePanicEventGenerator,\n-                logging.getInternalLog( DatabaseHealth.class ) ) );\n-\n-        autoIndexing = new InternalAutoIndexing( platformModule.config, editionModule.propertyKeyTokenHolder );\n-\n-        Procedures procedures = setupProcedures( platformModule, editionModule );\n-\n-        deps.satisfyDependency( new NonTransactionalDbmsOperations( procedures ) );\n-\n-        editionModule.setupSecurityModule( platformModule, procedures );\n-\n-        NonTransactionalTokenNameLookup tokenNameLookup = new NonTransactionalTokenNameLookup(\n-                editionModule.labelTokenHolder,\n-                editionModule.relationshipTypeTokenHolder,\n-                editionModule.propertyKeyTokenHolder );\n-\n-        final CollectionsFactorySupplier collectionsFactorySupplier = createCollectionsFactorySupplier( config );\n-        neoStoreDataSource = deps.satisfyDependency( new NeoStoreDataSource(\n-                storeDir,\n-                config,\n-                editionModule.idGeneratorFactory,\n-                logging,\n-                platformModule.jobScheduler,\n-                tokenNameLookup,\n-                deps,\n-                editionModule.propertyKeyTokenHolder,\n-                editionModule.labelTokenHolder,\n-                relationshipTypeTokenHolder,\n-                editionModule.statementLocksFactory,\n-                schemaWriteGuard,\n-                transactionEventHandlers,\n-                platformModule.monitors.newMonitor( IndexingService.Monitor.class ),\n-                fileSystem,\n-                platformModule.transactionMonitor,\n-                databaseHealth,\n-                platformModule.monitors.newMonitor( LogFileCreationMonitor.class ),\n-                editionModule.headerInformationFactory,\n-                startupStatistics, editionModule.commitProcessFactory,\n-                autoIndexing,\n-                pageCache,\n-                editionModule.constraintSemantics,\n-                platformModule.monitors,\n-                platformModule.tracers,\n-                procedures,\n-                editionModule.ioLimiter,\n-                platformModule.availabilityGuard,\n-                platformModule.clock, editionModule.accessCapability,\n-                platformModule.storeCopyCheckPointMutex,\n-                platformModule.recoveryCleanupWorkCollector,\n-                editionModule.idController,\n-                platformModule.databaseInfo.operationalMode,\n-                platformModule.versionContextSupplier,\n-                collectionsFactorySupplier ) );\n-\n-        dataSourceManager.register( neoStoreDataSource );\n-\n-        life.add( new VmPauseMonitorComponent( config, logging.getInternalLog( VmPauseMonitorComponent.class ), platformModule.jobScheduler ) );\n-\n-        life.add( new PublishPageCacheTracerMetricsAfterStart( platformModule.tracers.pageCursorTracerSupplier ) );\n-\n-        life.add( new DatabaseAvailability( platformModule.availabilityGuard, platformModule.transactionMonitor,\n-                config.get( GraphDatabaseSettings.shutdown_transaction_end_timeout ).toMillis() ) );\n-\n-        life.add( new StartupWaiter( platformModule.availabilityGuard, editionModule.transactionStartTimeout ) );\n-\n-        // Kernel event handlers should be the very last, i.e. very first to receive shutdown events\n-        life.add( kernelEventHandlers );\n-\n-        this.storeId = neoStoreDataSource::getStoreId;\n-        this.kernelAPI = neoStoreDataSource::getKernel;\n-\n-        ProcedureGDSFactory gdsFactory = new ProcedureGDSFactory( platformModule, editionModule, this, deps,\n-                editionModule.coreAPIAvailabilityGuard, editionModule.relationshipTypeTokenHolder );\n-        procedures.registerComponent( GraphDatabaseService.class, gdsFactory::apply, true );\n-    }\n+    threadToTransactionBridge = deps.satisfyDependency(life.add(new ThreadToStatementContextBridge()));\n \n-    private CollectionsFactorySupplier createCollectionsFactorySupplier( Config config )\n-    {\n-        final TransactionStateMemoryAllocation allocation = config.get( GraphDatabaseSettings.tx_state_memory_allocation );\n-        switch ( allocation )\n-        {\n-        case ON_HEAP:\n-            return CollectionsFactorySupplier.ON_HEAP;\n-        case OFF_HEAP:\n-            return CollectionsFactorySupplier.OFF_HEAP;\n-        default:\n-            throw new IllegalArgumentException( \"Unknown transaction state memory allocation value: \" + allocation );\n-        }\n-    }\n+    deps.satisfyDependency(graphDatabaseFacade);\n+    transactionEventHandlers = new TransactionEventHandlers(graphDatabaseFacade);\n+\n+    diagnosticsManager.prependProvider(config);\n+\n+    life.add(platformModule.kernelExtensions);\n+\n+    // Factories for things that needs to be created later\n+    PageCache pageCache = platformModule.pageCache;\n+\n+    StartupStatisticsProvider startupStatistics = deps.satisfyDependency(new StartupStatisticsProvider());\n+\n+    SchemaWriteGuard schemaWriteGuard = deps.satisfyDependency(editionModule.schemaWriteGuard);\n+\n+    guard = createGuard(deps, platformModule.clock, logging);\n+\n+    kernelEventHandlers = new KernelEventHandlers(logging.getInternalLog(KernelEventHandlers.class));\n \n-    private Guard createGuard( Dependencies deps, Clock clock, LogService logging )\n+    DatabasePanicEventGenerator databasePanicEventGenerator = deps.satisfyDependency(\n+        new DatabasePanicEventGenerator(kernelEventHandlers));\n+\n+    DatabaseHealth databaseHealth = deps.satisfyDependency(new DatabaseHealth(databasePanicEventGenerator,\n+        logging.getInternalLog(DatabaseHealth.class)));\n+\n+    autoIndexing = new InternalAutoIndexing(platformModule.config, editionModule.propertyKeyTokenHolder);\n+\n+    Procedures procedures = setupProcedures(platformModule, editionModule);\n+\n+    deps.satisfyDependency(new NonTransactionalDbmsOperations(procedures));\n+\n+    editionModule.setupSecurityModule(platformModule, procedures);\n+\n+    NonTransactionalTokenNameLookup tokenNameLookup = new NonTransactionalTokenNameLookup(\n+        editionModule.labelTokenHolder,\n+        editionModule.relationshipTypeTokenHolder,\n+        editionModule.propertyKeyTokenHolder);\n+\n+    final CollectionsFactorySupplier collectionsFactorySupplier = createCollectionsFactorySupplier(config);\n+    neoStoreDataSource = deps.satisfyDependency(new NeoStoreDataSource(\n+        storeDir,\n+        config,\n+        editionModule.idGeneratorFactory,\n+        logging,\n+        platformModule.jobScheduler,\n+        tokenNameLookup,\n+        deps,\n+        editionModule.propertyKeyTokenHolder,\n+        editionModule.labelTokenHolder,\n+        relationshipTypeTokenHolder,\n+        editionModule.statementLocksFactory,\n+        schemaWriteGuard,\n+        transactionEventHandlers,\n+        platformModule.monitors.newMonitor(IndexingService.Monitor.class),\n+        fileSystem,\n+        platformModule.transactionMonitor,\n+        databaseHealth,\n+        platformModule.monitors.newMonitor(LogFileCreationMonitor.class),\n+        editionModule.headerInformationFactory,\n+        startupStatistics, editionModule.commitProcessFactory,\n+        autoIndexing,\n+        pageCache,\n+        editionModule.constraintSemantics,\n+        platformModule.monitors,\n+        platformModule.tracers,\n+        procedures,\n+        editionModule.ioLimiter,\n+        platformModule.availabilityGuard,\n+        platformModule.clock, editionModule.accessCapability,\n+        platformModule.storeCopyCheckPointMutex,\n+        platformModule.recoveryCleanupWorkCollector,\n+        editionModule.idController,\n+        platformModule.databaseInfo.operationalMode,\n+        platformModule.versionContextSupplier,\n+        collectionsFactorySupplier));\n+\n+    dataSourceManager.register(neoStoreDataSource);\n+\n+    life.add(new VmPauseMonitorComponent(config, logging.getInternalLog(VmPauseMonitorComponent.class), platformModule.jobScheduler));\n+\n+    life.add(new PublishPageCacheTracerMetricsAfterStart(platformModule.tracers.pageCursorTracerSupplier));\n+\n+    life.add(new DatabaseAvailability(platformModule.availabilityGuard, platformModule.transactionMonitor,\n+        config.get(GraphDatabaseSettings.shutdown_transaction_end_timeout).toMillis()));\n+\n+    life.add(new StartupWaiter(platformModule.availabilityGuard, editionModule.transactionStartTimeout));\n+\n+    // Kernel event handlers should be the very last, i.e. very first to receive shutdown events\n+    life.add(kernelEventHandlers);\n+\n+    this.storeId = neoStoreDataSource::getStoreId;\n+    this.kernelAPI = neoStoreDataSource::getKernel;\n+\n+    ProcedureGDSFactory gdsFactory = new ProcedureGDSFactory(platformModule, editionModule, this, deps,\n+        editionModule.coreAPIAvailabilityGuard, editionModule.relationshipTypeTokenHolder);\n+    procedures.registerComponent(GraphDatabaseService.class, gdsFactory::apply, true);\n+  }\n+\n+  private CollectionsFactorySupplier createCollectionsFactorySupplier(Config config)\n+  {\n+    final TransactionStateMemoryAllocation allocation = config.get(GraphDatabaseSettings.tx_state_memory_allocation);\n+    switch (allocation)\n     {\n-        TerminationGuard guard = createGuard();\n-        deps.satisfyDependency( guard );\n-        return guard;\n+      case ON_HEAP:\n+        return CollectionsFactorySupplier.ON_HEAP;\n+      case OFF_HEAP:\n+        return CollectionsFactorySupplier.OFF_HEAP;\n+      default:\n+        throw new IllegalArgumentException(\"Unknown transaction state memory allocation value: \" + allocation);\n     }\n-\n-    protected TerminationGuard createGuard()\n+  }\n+\n+  private Guard createGuard(Dependencies deps, Clock clock, LogService logging)\n+  {\n+    TerminationGuard guard = createGuard();\n+    deps.satisfyDependency(guard);\n+    return guard;\n+  }\n+\n+  protected TerminationGuard createGuard()\n+  {\n+    return new TerminationGuard();\n+  }\n+\n+  private Procedures setupProcedures(PlatformModule platform, EditionModule editionModule)\n+  {\n+    File pluginDir = platform.config.get(GraphDatabaseSettings.plugin_dir);\n+    Log internalLog = platform.logging.getInternalLog(Procedures.class);\n+    EmbeddedProxySPI proxySPI = platform.dependencies.resolveDependency(EmbeddedProxySPI.class);\n+\n+    ProcedureConfig procedureConfig = new ProcedureConfig(platform.config);\n+    Procedures procedures = new Procedures(proxySPI,\n+        new SpecialBuiltInProcedures(Version.getNeo4jVersion(),\n+            platform.databaseInfo.edition.toString()),\n+        pluginDir, internalLog, procedureConfig);\n+    platform.life.add(procedures);\n+    platform.dependencies.satisfyDependency(procedures);\n+\n+    procedures.registerType(Node.class, NTNode);\n+    procedures.registerType(Relationship.class, NTRelationship);\n+    procedures.registerType(Path.class, NTPath);\n+    procedures.registerType(Geometry.class, NTGeometry);\n+    procedures.registerType(Point.class, NTPoint);\n+\n+    // Register injected public API components\n+    Log proceduresLog = platform.logging.getUserLog(Procedures.class);\n+    procedures.registerComponent(Log.class, ctx -> proceduresLog, true);\n+\n+    Guard guard = platform.dependencies.resolveDependency(Guard.class);\n+    procedures.registerComponent(ProcedureTransaction.class, new ProcedureTransactionProvider(), true);\n+    procedures.registerComponent(org.neo4j.procedure.TerminationGuard.class, new TerminationGuardProvider(guard), true);\n+\n+    // Below components are not public API, but are made available for internal\n+    // procedures to call, and to provide temporary workarounds for the following\n+    // patterns:\n+    //  - Batch-transaction imports (GDAPI, needs to be real and passed to background processing threads)\n+    //  - Group-transaction writes (same pattern as above, but rather than splitting large transactions,\n+    //                              combine lots of small ones)\n+    //  - Bleeding-edge performance (KernelTransaction, to bypass overhead of working with Core API)\n+    procedures.registerComponent(DependencyResolver.class, ctx -> platform.dependencies, false);\n+    procedures.registerComponent(KernelTransaction.class, ctx -> ctx.get(KERNEL_TRANSACTION), false);\n+    procedures.registerComponent(GraphDatabaseAPI.class, ctx -> platform.graphDatabaseFacade, false);\n+\n+    // Security procedures\n+    procedures.registerComponent(SecurityContext.class, ctx -> ctx.get(SECURITY_CONTEXT), true);\n+\n+    // Edition procedures\n+    try\n+    {\n+      editionModule.registerProcedures(procedures, procedureConfig);\n+    } catch (KernelException e)\n     {\n-        return new TerminationGuard();\n+      internalLog.error(\"Failed to register built-in edition procedures at start up: \" + e.getMessage());\n     }\n \n-    private Procedures setupProcedures( PlatformModule platform, EditionModule editionModule )\n+    return procedures;\n+  }\n+\n+  /**\n+   * At end of startup, wait for instance to become available for transactions.\n+   * <p>\n+   * This helps users who expect to be able to access the instance after\n+   * the constructor is run.\n+   */\n+  private static class StartupWaiter extends LifecycleAdapter\n+  {\n+    private final AvailabilityGuard availabilityGuard;\n+    private final long timeout;\n+\n+    StartupWaiter(AvailabilityGuard availabilityGuard, long timeout)\n     {\n-        File pluginDir = platform.config.get( GraphDatabaseSettings.plugin_dir );\n-        Log internalLog = platform.logging.getInternalLog( Procedures.class );\n-        EmbeddedProxySPI proxySPI = platform.dependencies.resolveDependency( EmbeddedProxySPI.class );\n-\n-        ProcedureConfig procedureConfig = new ProcedureConfig( platform.config );\n-        Procedures procedures = new Procedures( proxySPI,\n-                new SpecialBuiltInProcedures( Version.getNeo4jVersion(),\n-                        platform.databaseInfo.edition.toString() ),\n-                pluginDir, internalLog, procedureConfig );\n-        platform.life.add( procedures );\n-        platform.dependencies.satisfyDependency( procedures );\n-\n-        procedures.registerType( Node.class, NTNode );\n-        procedures.registerType( Relationship.class, NTRelationship );\n-        procedures.registerType( Path.class, NTPath );\n-        procedures.registerType( Geometry.class, NTGeometry );\n-        procedures.registerType( Point.class, NTPoint );\n-\n-        // Register injected public API components\n-        Log proceduresLog = platform.logging.getUserLog( Procedures.class );\n-        procedures.registerComponent( Log.class, ctx -> proceduresLog, true );\n-\n-        Guard guard = platform.dependencies.resolveDependency( Guard.class );\n-        procedures.registerComponent( ProcedureTransaction.class, new ProcedureTransactionProvider(), true );\n-        procedures.registerComponent( org.neo4j.procedure.TerminationGuard.class, new TerminationGuardProvider( guard ), true );\n-\n-        // Below components are not public API, but are made available for internal\n-        // procedures to call, and to provide temporary workarounds for the following\n-        // patterns:\n-        //  - Batch-transaction imports (GDAPI, needs to be real and passed to background processing threads)\n-        //  - Group-transaction writes (same pattern as above, but rather than splitting large transactions,\n-        //                              combine lots of small ones)\n-        //  - Bleeding-edge performance (KernelTransaction, to bypass overhead of working with Core API)\n-        procedures.registerComponent( DependencyResolver.class, ctx -> platform.dependencies, false );\n-        procedures.registerComponent( KernelTransaction.class, ctx -> ctx.get( KERNEL_TRANSACTION ), false );\n-        procedures.registerComponent( GraphDatabaseAPI.class, ctx -> platform.graphDatabaseFacade, false );\n-\n-        // Security procedures\n-        procedures.registerComponent( SecurityContext.class, ctx -> ctx.get( SECURITY_CONTEXT ), true );\n-\n-        // Edition procedures\n-        try\n-        {\n-            editionModule.registerProcedures( procedures, procedureConfig );\n-        }\n-        catch ( KernelException e )\n-        {\n-            internalLog.error( \"Failed to register built-in edition procedures at start up: \" + e.getMessage() );\n-        }\n-\n-        return procedures;\n+      this.availabilityGuard = availabilityGuard;\n+      this.timeout = timeout;\n     }\n \n-    /**\n-     * At end of startup, wait for instance to become available for transactions.\n-     * <p>\n-     * This helps users who expect to be able to access the instance after\n-     * the constructor is run.\n-     */\n-    private static class StartupWaiter extends LifecycleAdapter\n+    @Override\n+    public void start()\n     {\n-        private final AvailabilityGuard availabilityGuard;\n-        private final long timeout;\n-\n-        StartupWaiter( AvailabilityGuard availabilityGuard, long timeout )\n-        {\n-            this.availabilityGuard = availabilityGuard;\n-            this.timeout = timeout;\n-        }\n-\n-        @Override\n-        public void start()\n-        {\n-            availabilityGuard.isAvailable( timeout );\n-        }\n+      availabilityGuard.isAvailable(timeout);\n     }\n+  }\n \n }\n",
            "diff_size": 394
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "column": "161",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3248/DataSourceModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3248/DataSourceModule.java\nindex 5423c9bdb9f..350874aac9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3248/DataSourceModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3248/DataSourceModule.java\n@@ -116,8 +116,7 @@ public class DataSourceModule\n \n     public final Guard guard;\n \n-    public DataSourceModule( final PlatformModule platformModule, EditionModule editionModule,\n-            Supplier<QueryExecutionEngine> queryExecutionEngineSupplier )\n+    public DataSourceModule( final PlatformModule platformModule, EditionModule editionModule, Supplier<QueryExecutionEngine> queryExecutionEngineSupplier )\n     {\n         final Dependencies deps = platformModule.dependencies;\n         Config config = platformModule.config;\n@@ -132,72 +131,40 @@ public class DataSourceModule\n         this.queryExecutor = queryExecutionEngineSupplier;\n \n         threadToTransactionBridge = deps.satisfyDependency( life.add( new ThreadToStatementContextBridge() ) );\n-\n-        deps.satisfyDependency( graphDatabaseFacade );\n+deps.satisfyDependency( graphDatabaseFacade );\n         transactionEventHandlers = new TransactionEventHandlers( graphDatabaseFacade );\n-\n-        diagnosticsManager.prependProvider( config );\n-\n-        life.add( platformModule.kernelExtensions );\n+diagnosticsManager.prependProvider( config );\n+life.add( platformModule.kernelExtensions );\n \n         // Factories for things that needs to be created later\n         PageCache pageCache = platformModule.pageCache;\n \n         StartupStatisticsProvider startupStatistics = deps.satisfyDependency( new StartupStatisticsProvider() );\n-\n-        SchemaWriteGuard schemaWriteGuard = deps.satisfyDependency( editionModule.schemaWriteGuard );\n-\n-        guard = createGuard( deps, platformModule.clock, logging );\n-\n-        kernelEventHandlers = new KernelEventHandlers( logging.getInternalLog( KernelEventHandlers.class ) );\n-\n-        DatabasePanicEventGenerator databasePanicEventGenerator = deps.satisfyDependency(\n-                new DatabasePanicEventGenerator( kernelEventHandlers ) );\n-\n-        DatabaseHealth databaseHealth = deps.satisfyDependency( new DatabaseHealth( databasePanicEventGenerator,\n+SchemaWriteGuard schemaWriteGuard = deps.satisfyDependency( editionModule.schemaWriteGuard );\n+guard = createGuard( deps, platformModule.clock, logging );\n+kernelEventHandlers = new KernelEventHandlers( logging.getInternalLog( KernelEventHandlers.class ) );\n+DatabasePanicEventGenerator databasePanicEventGenerator = deps.satisfyDependency( new DatabasePanicEventGenerator( kernelEventHandlers ) );\n+DatabaseHealth databaseHealth = deps.satisfyDependency( new DatabaseHealth( databasePanicEventGenerator,\n                 logging.getInternalLog( DatabaseHealth.class ) ) );\n-\n-        autoIndexing = new InternalAutoIndexing( platformModule.config, editionModule.propertyKeyTokenHolder );\n-\n-        Procedures procedures = setupProcedures( platformModule, editionModule );\n-\n-        deps.satisfyDependency( new NonTransactionalDbmsOperations( procedures ) );\n-\n-        editionModule.setupSecurityModule( platformModule, procedures );\n-\n-        NonTransactionalTokenNameLookup tokenNameLookup = new NonTransactionalTokenNameLookup(\n-                editionModule.labelTokenHolder,\n+autoIndexing = new InternalAutoIndexing( platformModule.config, editionModule.propertyKeyTokenHolder );\n+Procedures procedures = setupProcedures( platformModule, editionModule );\n+deps.satisfyDependency( new NonTransactionalDbmsOperations( procedures ) );\n+editionModule.setupSecurityModule( platformModule, procedures );\n+NonTransactionalTokenNameLookup tokenNameLookup = new NonTransactionalTokenNameLookup( editionModule.labelTokenHolder,\n                 editionModule.relationshipTypeTokenHolder,\n-                editionModule.propertyKeyTokenHolder );\n-\n-        final CollectionsFactorySupplier collectionsFactorySupplier = createCollectionsFactorySupplier( config );\n-        neoStoreDataSource = deps.satisfyDependency( new NeoStoreDataSource(\n-                storeDir,\n-                config,\n-                editionModule.idGeneratorFactory,\n-                logging,\n-                platformModule.jobScheduler,\n-                tokenNameLookup,\n-                deps,\n+                editionModule.propertyKeyTokenHolder ); final CollectionsFactorySupplier collectionsFactorySupplier = createCollectionsFactorySupplier( config );\n+        neoStoreDataSource = deps.satisfyDependency( new NeoStoreDataSource( storeDir, config,\n+                editionModule.idGeneratorFactory, logging,\n+                platformModule.jobScheduler, tokenNameLookup, deps,\n                 editionModule.propertyKeyTokenHolder,\n-                editionModule.labelTokenHolder,\n-                relationshipTypeTokenHolder,\n-                editionModule.statementLocksFactory,\n-                schemaWriteGuard,\n-                transactionEventHandlers,\n-                platformModule.monitors.newMonitor( IndexingService.Monitor.class ),\n-                fileSystem,\n-                platformModule.transactionMonitor,\n-                databaseHealth,\n-                platformModule.monitors.newMonitor( LogFileCreationMonitor.class ),\n-                editionModule.headerInformationFactory,\n-                startupStatistics, editionModule.commitProcessFactory,\n-                autoIndexing,\n-                pageCache,\n+                editionModule.labelTokenHolder, relationshipTypeTokenHolder,\n+                editionModule.statementLocksFactory, schemaWriteGuard, transactionEventHandlers,\n+                platformModule.monitors.newMonitor( IndexingService.Monitor.class ), fileSystem,\n+                platformModule.transactionMonitor, databaseHealth,\n+                platformModule.monitors.newMonitor( LogFileCreationMonitor.class ), editionModule.headerInformationFactory, startupStatistics, editionModule.commitProcessFactory, autoIndexing, pageCache,\n                 editionModule.constraintSemantics,\n                 platformModule.monitors,\n-                platformModule.tracers,\n-                procedures,\n+                platformModule.tracers, procedures,\n                 editionModule.ioLimiter,\n                 platformModule.availabilityGuard,\n                 platformModule.clock, editionModule.accessCapability,\n@@ -205,29 +172,22 @@ public class DataSourceModule\n                 platformModule.recoveryCleanupWorkCollector,\n                 editionModule.idController,\n                 platformModule.databaseInfo.operationalMode,\n-                platformModule.versionContextSupplier,\n-                collectionsFactorySupplier ) );\n-\n-        dataSourceManager.register( neoStoreDataSource );\n-\n-        life.add( new VmPauseMonitorComponent( config, logging.getInternalLog( VmPauseMonitorComponent.class ), platformModule.jobScheduler ) );\n-\n-        life.add( new PublishPageCacheTracerMetricsAfterStart( platformModule.tracers.pageCursorTracerSupplier ) );\n-\n-        life.add( new DatabaseAvailability( platformModule.availabilityGuard, platformModule.transactionMonitor,\n+                platformModule.versionContextSupplier, collectionsFactorySupplier ) );\n+dataSourceManager.register( neoStoreDataSource );\n+life.add( new VmPauseMonitorComponent( config, logging.getInternalLog( VmPauseMonitorComponent.class ), platformModule.jobScheduler ) );\n+life.add( new PublishPageCacheTracerMetricsAfterStart( platformModule.tracers.pageCursorTracerSupplier ) );\n+life.add( new DatabaseAvailability( platformModule.availabilityGuard, platformModule.transactionMonitor,\n                 config.get( GraphDatabaseSettings.shutdown_transaction_end_timeout ).toMillis() ) );\n-\n-        life.add( new StartupWaiter( platformModule.availabilityGuard, editionModule.transactionStartTimeout ) );\n+life.add( new StartupWaiter( platformModule.availabilityGuard, editionModule.transactionStartTimeout ) );\n \n         // Kernel event handlers should be the very last, i.e. very first to receive shutdown events\n         life.add( kernelEventHandlers );\n-\n-        this.storeId = neoStoreDataSource::getStoreId;\n+this.storeId = neoStoreDataSource::getStoreId;\n         this.kernelAPI = neoStoreDataSource::getKernel;\n \n         ProcedureGDSFactory gdsFactory = new ProcedureGDSFactory( platformModule, editionModule, this, deps,\n                 editionModule.coreAPIAvailabilityGuard, editionModule.relationshipTypeTokenHolder );\n-        procedures.registerComponent( GraphDatabaseService.class, gdsFactory::apply, true );\n+procedures.registerComponent( GraphDatabaseService.class, gdsFactory::apply, true );\n     }\n \n     private CollectionsFactorySupplier createCollectionsFactorySupplier( Config config )\n@@ -261,16 +221,11 @@ public class DataSourceModule\n         File pluginDir = platform.config.get( GraphDatabaseSettings.plugin_dir );\n         Log internalLog = platform.logging.getInternalLog( Procedures.class );\n         EmbeddedProxySPI proxySPI = platform.dependencies.resolveDependency( EmbeddedProxySPI.class );\n-\n-        ProcedureConfig procedureConfig = new ProcedureConfig( platform.config );\n-        Procedures procedures = new Procedures( proxySPI,\n-                new SpecialBuiltInProcedures( Version.getNeo4jVersion(),\n-                        platform.databaseInfo.edition.toString() ),\n-                pluginDir, internalLog, procedureConfig );\n-        platform.life.add( procedures );\n+ProcedureConfig procedureConfig = new ProcedureConfig( platform.config );\n+        Procedures procedures = new Procedures( proxySPI, new SpecialBuiltInProcedures( Version.getNeo4jVersion(), platform.databaseInfo.edition.toString() ), pluginDir, internalLog, procedureConfig );\n+platform.life.add( procedures );\n         platform.dependencies.satisfyDependency( procedures );\n-\n-        procedures.registerType( Node.class, NTNode );\n+procedures.registerType( Node.class, NTNode );\n         procedures.registerType( Relationship.class, NTRelationship );\n         procedures.registerType( Path.class, NTPath );\n         procedures.registerType( Geometry.class, NTGeometry );\n@@ -279,8 +234,7 @@ public class DataSourceModule\n         // Register injected public API components\n         Log proceduresLog = platform.logging.getUserLog( Procedures.class );\n         procedures.registerComponent( Log.class, ctx -> proceduresLog, true );\n-\n-        Guard guard = platform.dependencies.resolveDependency( Guard.class );\n+Guard guard = platform.dependencies.resolveDependency( Guard.class );\n         procedures.registerComponent( ProcedureTransaction.class, new ProcedureTransactionProvider(), true );\n         procedures.registerComponent( org.neo4j.procedure.TerminationGuard.class, new TerminationGuardProvider( guard ), true );\n \n@@ -334,5 +288,4 @@ public class DataSourceModule\n             availabilityGuard.isAvailable( timeout );\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 85
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}