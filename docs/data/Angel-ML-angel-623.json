{
    "project_name": "Angel-ML-angel",
    "error_id": "623",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/623/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/623/LongIntSparseVectorStorage.java\nindex 24047a33c7a..ba3435208d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/623/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/623/LongIntSparseVectorStorage.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.matrix.RowType;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/623/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/623/LongIntSparseVectorStorage.java\nindex 24047a33c7a..b53c9043563 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/623/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/623/LongIntSparseVectorStorage.java\n@@ -84,8 +84,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, map.clone());\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     int[] oneLikeValues = new int[capacity];\n@@ -108,8 +107,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n     long[] indices = new long[capacity];\n@@ -195,8 +193,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, map.size());\n   }\n@@ -206,8 +203,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, map.size());\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n   }\n@@ -276,4 +272,4 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n   public int[] getValues() {\n     return map.values().toIntArray();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/623/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/623/LongIntSparseVectorStorage.java\nindex 24047a33c7a..8e9beae32dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/623/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/623/LongIntSparseVectorStorage.java\n@@ -84,12 +84,10 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, map.clone());\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     int[] oneLikeValues = new int[capacity];\n-\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -108,7 +106,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n@@ -124,6 +121,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -167,6 +165,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -195,7 +194,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, map.size());\n@@ -206,7 +204,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, map.size());\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n@@ -276,4 +273,5 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n   public int[] getValues() {\n     return map.values().toIntArray();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}