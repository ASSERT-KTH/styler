{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1504",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "66",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1504/KernelExtensions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1504/KernelExtensions.java\nindex 4fca49422a6..a3a1aa0c273 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1504/KernelExtensions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1504/KernelExtensions.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.extension;\n \n import java.lang.reflect.ParameterizedType;\n@@ -35,98 +36,97 @@ import org.neo4j.kernel.lifecycle.Lifecycle;\n \n public class KernelExtensions extends DependencyResolver.Adapter implements Lifecycle\n {\n-    private final KernelContext kernelContext;\n-    private final List<KernelExtensionFactory<?>> kernelExtensionFactories = new ArrayList<>();\n-    private final Dependencies dependencies;\n-    private final LifeSupport life = new LifeSupport();\n-    private final UnsatisfiedDependencyStrategy unsatisfiedDependencyStrategy;\n+  private final KernelContext kernelContext;\n+  private final List<KernelExtensionFactory<?>> kernelExtensionFactories = new ArrayList<>();\n+  private final Dependencies dependencies;\n+  private final LifeSupport life = new LifeSupport();\n+  private final UnsatisfiedDependencyStrategy unsatisfiedDependencyStrategy;\n \n-    public KernelExtensions( KernelContext kernelContext, Iterable<KernelExtensionFactory<?>> kernelExtensionFactories,\n-                             Dependencies dependencies, UnsatisfiedDependencyStrategy unsatisfiedDependencyStrategy )\n-    {\n-        this.kernelContext = kernelContext;\n-        this.unsatisfiedDependencyStrategy = unsatisfiedDependencyStrategy;\n-        kernelExtensionFactories.forEach( this.kernelExtensionFactories::add );\n-        this.dependencies = dependencies;\n-    }\n+  public KernelExtensions(KernelContext kernelContext, Iterable<KernelExtensionFactory<?>> kernelExtensionFactories,\n+                          Dependencies dependencies, UnsatisfiedDependencyStrategy unsatisfiedDependencyStrategy)\n+  {\n+    this.kernelContext = kernelContext;\n+    this.unsatisfiedDependencyStrategy = unsatisfiedDependencyStrategy;\n+    kernelExtensionFactories.forEach(this.kernelExtensionFactories::add);\n+    this.dependencies = dependencies;\n+  }\n \n-    @Override\n-    public void init()\n+  @Override\n+  public void init()\n+  {\n+    for (KernelExtensionFactory<?> kernelExtensionFactory : kernelExtensionFactories)\n     {\n-        for ( KernelExtensionFactory<?> kernelExtensionFactory : kernelExtensionFactories )\n-        {\n-            Object kernelExtensionDependencies = getKernelExtensionDependencies( kernelExtensionFactory );\n-            try\n-            {\n-                Lifecycle dependency = newInstance( kernelExtensionFactory, kernelExtensionDependencies );\n-                Objects.requireNonNull( dependency, kernelExtensionFactory.toString() + \" returned a null \" +\n-                        \"KernelExtension\" );\n-                life.add( dependencies.satisfyDependency( dependency ) );\n-            }\n-            catch ( UnsatisfiedDependencyException e )\n-            {\n-                unsatisfiedDependencyStrategy.handle( kernelExtensionFactory, e );\n-            }\n-        }\n-\n-        life.init();\n+      Object kernelExtensionDependencies = getKernelExtensionDependencies(kernelExtensionFactory);\n+      try\n+      {\n+        Lifecycle dependency = newInstance(kernelExtensionFactory, kernelExtensionDependencies);\n+        Objects.requireNonNull(dependency, kernelExtensionFactory.toString() + \" returned a null \" +\n+            \"KernelExtension\");\n+        life.add(dependencies.satisfyDependency(dependency));\n+      } catch (UnsatisfiedDependencyException e)\n+      {\n+        unsatisfiedDependencyStrategy.handle(kernelExtensionFactory, e);\n+      }\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private <T> Lifecycle newInstance( KernelExtensionFactory<T> factory, Object dependencies )\n-    {\n-        return factory.newInstance( kernelContext, (T)dependencies );\n-    }\n+    life.init();\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        life.start();\n-    }\n+  @SuppressWarnings(\"unchecked\")\n+  private <T> Lifecycle newInstance(KernelExtensionFactory<T> factory, Object dependencies)\n+  {\n+    return factory.newInstance(kernelContext, (T) dependencies);\n+  }\n \n-    @Override\n-    public void stop()\n-    {\n-        life.stop();\n-    }\n+  @Override\n+  public void start()\n+  {\n+    life.start();\n+  }\n \n-    @Override\n-    public void shutdown()\n-    {\n-        life.shutdown();\n-    }\n+  @Override\n+  public void stop()\n+  {\n+    life.stop();\n+  }\n \n-    boolean isRegistered( Class<?> kernelExtensionFactoryClass )\n-    {\n-        for ( KernelExtensionFactory<?> kernelExtensionFactory : kernelExtensionFactories )\n-        {\n-            if ( kernelExtensionFactoryClass.isInstance( kernelExtensionFactory ) )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n+  @Override\n+  public void shutdown()\n+  {\n+    life.shutdown();\n+  }\n \n-    @Override\n-    public <T> T resolveDependency( final Class<T> type, SelectionStrategy selector ) throws IllegalArgumentException\n+  boolean isRegistered(Class<?> kernelExtensionFactoryClass)\n+  {\n+    for (KernelExtensionFactory<?> kernelExtensionFactory : kernelExtensionFactories)\n     {\n-        List<T> filteredAndCasted = life.getLifecycleInstances().stream()\n-                .filter( type::isInstance )\n-                .map( type::cast )\n-                .collect( Collectors.toList() );\n-        return selector.select( type, filteredAndCasted );\n+      if (kernelExtensionFactoryClass.isInstance(kernelExtensionFactory))\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n \n-    private Object getKernelExtensionDependencies( KernelExtensionFactory<?> factory )\n-    {\n-        Class<?> configurationClass = (Class<?>) ((ParameterizedType) factory.getClass().getGenericSuperclass())\n-                .getActualTypeArguments()[0];\n-        return DependenciesProxy.dependencies(dependencies, configurationClass);\n-    }\n+  @Override\n+  public <T> T resolveDependency(final Class<T> type, SelectionStrategy selector) throws IllegalArgumentException\n+  {\n+    List<T> filteredAndCasted = life.getLifecycleInstances().stream()\n+        .filter(type::isInstance)\n+        .map(type::cast)\n+        .collect(Collectors.toList());\n+    return selector.select(type, filteredAndCasted);\n+  }\n \n-    public Iterable<KernelExtensionFactory<?>> listFactories()\n-    {\n-        return kernelExtensionFactories;\n-    }\n+  private Object getKernelExtensionDependencies(KernelExtensionFactory<?> factory)\n+  {\n+    Class<?> configurationClass = (Class<?>) ((ParameterizedType) factory.getClass().getGenericSuperclass())\n+        .getActualTypeArguments()[0];\n+    return DependenciesProxy.dependencies(dependencies, configurationClass);\n+  }\n+\n+  public Iterable<KernelExtensionFactory<?>> listFactories()\n+  {\n+    return kernelExtensionFactories;\n+  }\n }\n",
            "diff_size": 96
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1504/KernelExtensions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1504/KernelExtensions.java\nindex 4fca49422a6..d9f01760254 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1504/KernelExtensions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1504/KernelExtensions.java\n@@ -41,9 +41,8 @@ public class KernelExtensions extends DependencyResolver.Adapter implements Life\n     private final LifeSupport life = new LifeSupport();\n     private final UnsatisfiedDependencyStrategy unsatisfiedDependencyStrategy;\n \n-    public KernelExtensions( KernelContext kernelContext, Iterable<KernelExtensionFactory<?>> kernelExtensionFactories,\n-                             Dependencies dependencies, UnsatisfiedDependencyStrategy unsatisfiedDependencyStrategy )\n-    {\n+    public KernelExtensions( KernelContext kernelContext, Iterable<KernelExtensionFactory<?>> kernelExtensionFactories, Dependencies dependencies, UnsatisfiedDependencyStrategy unsatisfiedDependencyStrategy )\n+{\n         this.kernelContext = kernelContext;\n         this.unsatisfiedDependencyStrategy = unsatisfiedDependencyStrategy;\n         kernelExtensionFactories.forEach( this.kernelExtensionFactories::add );\n@@ -59,9 +58,8 @@ public class KernelExtensions extends DependencyResolver.Adapter implements Life\n             try\n             {\n                 Lifecycle dependency = newInstance( kernelExtensionFactory, kernelExtensionDependencies );\n-                Objects.requireNonNull( dependency, kernelExtensionFactory.toString() + \" returned a null \" +\n-                        \"KernelExtension\" );\n-                life.add( dependencies.satisfyDependency( dependency ) );\n+                Objects.requireNonNull( dependency, kernelExtensionFactory.toString() + \" returned a null \" + \"KernelExtension\" );\n+life.add( dependencies.satisfyDependency( dependency ) );\n             }\n             catch ( UnsatisfiedDependencyException e )\n             {\n@@ -75,7 +73,7 @@ public class KernelExtensions extends DependencyResolver.Adapter implements Life\n     @SuppressWarnings( \"unchecked\" )\n     private <T> Lifecycle newInstance( KernelExtensionFactory<T> factory, Object dependencies )\n     {\n-        return factory.newInstance( kernelContext, (T)dependencies );\n+        return factory.newInstance( kernelContext, (T) dependencies );\n     }\n \n     @Override\n@@ -111,22 +109,18 @@ public class KernelExtensions extends DependencyResolver.Adapter implements Life\n     @Override\n     public <T> T resolveDependency( final Class<T> type, SelectionStrategy selector ) throws IllegalArgumentException\n     {\n-        List<T> filteredAndCasted = life.getLifecycleInstances().stream()\n-                .filter( type::isInstance )\n-                .map( type::cast )\n-                .collect( Collectors.toList() );\n-        return selector.select( type, filteredAndCasted );\n+        List<T> filteredAndCasted = life.getLifecycleInstances().stream().filter( type::isInstance ).map( type::cast ).collect( Collectors.toList() );\n+return selector.select( type, filteredAndCasted );\n     }\n \n     private Object getKernelExtensionDependencies( KernelExtensionFactory<?> factory )\n     {\n-        Class<?> configurationClass = (Class<?>) ((ParameterizedType) factory.getClass().getGenericSuperclass())\n-                .getActualTypeArguments()[0];\n-        return DependenciesProxy.dependencies(dependencies, configurationClass);\n+        Class<?> configurationClass = (Class<?>) ((ParameterizedType) factory.getClass().getGenericSuperclass()).getActualTypeArguments()[0];\n+return DependenciesProxy.dependencies( dependencies, configurationClass );\n     }\n \n     public Iterable<KernelExtensionFactory<?>> listFactories()\n     {\n         return kernelExtensionFactories;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}