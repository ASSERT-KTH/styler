{
    "project_name": "neo4j-neo4j",
    "error_id": "2169",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2169/NodeImporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2169/NodeImporter.java\nindex 67014296cce..f1c325b563e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2169/NodeImporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2169/NodeImporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import java.util.Collections;\n@@ -66,68 +67,68 @@ public class NodeImporter extends EntityImporter\n     private long highestId = -1;\n     private boolean hasLabelField;\n \n-    NodeImporter( BatchingNeoStores stores, IdMapper idMapper, Monitor monitor, PageCacheTracer pageCacheTracer, MemoryTracker memoryTracker )\n+    NodeImporter(BatchingNeoStores stores, IdMapper idMapper, Monitor monitor, PageCacheTracer pageCacheTracer, MemoryTracker memoryTracker)\n     {\n-        super( stores, monitor, pageCacheTracer, memoryTracker );\n+        super(stores, monitor, pageCacheTracer, memoryTracker);\n         this.labelTokenRepository = stores.getLabelRepository();\n         this.idMapper = idMapper;\n         this.nodeStore = stores.getNodeStore();\n         this.nodeRecord = nodeStore.newRecord();\n-        this.nodeIds = new BatchingIdGetter( nodeStore );\n+        this.nodeIds = new BatchingIdGetter(nodeStore);\n         this.idPropertyStore = stores.getTemporaryPropertyStore();\n         this.idPropertyRecord = idPropertyStore.newRecord();\n-        this.nodeUpdateCursor = nodeStore.openPageCursorForWriting( 0, cursorTracer );\n-        this.idPropertyUpdateCursor = idPropertyStore.openPageCursorForWriting( 0, cursorTracer );\n-        nodeRecord.setInUse( true );\n+        this.nodeUpdateCursor = nodeStore.openPageCursorForWriting(0, cursorTracer);\n+        this.idPropertyUpdateCursor = idPropertyStore.openPageCursorForWriting(0, cursorTracer);\n+        nodeRecord.setInUse(true);\n     }\n \n     @Override\n-    public boolean id( long id )\n+    public boolean id(long id)\n     {\n-        nodeRecord.setId( id );\n-        highestId = max( highestId, id );\n+        nodeRecord.setId(id);\n+        highestId = max(highestId, id);\n         return true;\n     }\n \n     @Override\n-    public boolean id( Object id, Group group )\n+    public boolean id(Object id, Group group)\n     {\n-        long nodeId = nodeIds.nextId( cursorTracer );\n-        nodeRecord.setId( nodeId );\n-        idMapper.put( id, nodeId, group );\n+        long nodeId = nodeIds.nextId(cursorTracer);\n+        nodeRecord.setId(nodeId);\n+        idMapper.put(id, nodeId, group);\n \n         // also store this id as property in temp property store\n-        if ( id != null )\n+        if (id != null)\n         {\n-            idPropertyStore.encodeValue( idPropertyBlock, 0, Values.of( id ), cursorTracer, memoryTracker );\n-            idPropertyRecord.addPropertyBlock( idPropertyBlock );\n-            idPropertyRecord.setId( nodeId ); // yes nodeId\n-            idPropertyRecord.setInUse( true );\n-            idPropertyStore.updateRecord( idPropertyRecord, IGNORE, idPropertyUpdateCursor, cursorTracer );\n+            idPropertyStore.encodeValue(idPropertyBlock, 0, Values.of(id), cursorTracer, memoryTracker);\n+            idPropertyRecord.addPropertyBlock(idPropertyBlock);\n+            idPropertyRecord.setId(nodeId); // yes nodeId\n+            idPropertyRecord.setInUse(true);\n+            idPropertyStore.updateRecord(idPropertyRecord, IGNORE, idPropertyUpdateCursor, cursorTracer);\n             idPropertyRecord.clear();\n         }\n         return true;\n     }\n \n     @Override\n-    public boolean labels( String[] labels )\n+    public boolean labels(String[] labels)\n     {\n         assert !hasLabelField;\n         int requiredLength = labelsCursor + labels.length;\n-        if ( requiredLength > this.labels.length )\n+        if (requiredLength > this.labels.length)\n         {\n-            this.labels = copyOf( this.labels, Integer.max( requiredLength, this.labels.length * 2 ) );\n+            this.labels = copyOf(this.labels, Integer.max(requiredLength, this.labels.length * 2));\n         }\n-        System.arraycopy( labels, 0, this.labels, labelsCursor, labels.length );\n+        System.arraycopy(labels, 0, this.labels, labelsCursor, labels.length);\n         labelsCursor += labels.length;\n         return true;\n     }\n \n     @Override\n-    public boolean labelField( long labelField )\n+    public boolean labelField(long labelField)\n     {\n         hasLabelField = true;\n-        nodeRecord.setLabelField( labelField, Collections.emptyList() );\n+        nodeRecord.setLabelField(labelField, Collections.emptyList());\n         return true;\n     }\n \n@@ -135,26 +136,26 @@ public class NodeImporter extends EntityImporter\n     public void endOfEntity()\n     {\n         // Make sure we have an ID\n-        if ( nodeRecord.getId() == NULL_REFERENCE.longValue() )\n+        if (nodeRecord.getId() == NULL_REFERENCE.longValue())\n         {\n-            nodeRecord.setId( nodeIds.nextId( cursorTracer ) );\n+            nodeRecord.setId(nodeIds.nextId(cursorTracer));\n         }\n \n         // Compose the labels\n-        if ( !hasLabelField )\n+        if (!hasLabelField)\n         {\n-            long[] labelIds = labelTokenRepository.getOrCreateIds( labels, labelsCursor );\n-            InlineNodeLabels.putSorted( nodeRecord, labelIds, null, nodeStore.getDynamicLabelStore(), cursorTracer, memoryTracker );\n+            long[] labelIds = labelTokenRepository.getOrCreateIds(labels, labelsCursor);\n+            InlineNodeLabels.putSorted(nodeRecord, labelIds, null, nodeStore.getDynamicLabelStore(), cursorTracer, memoryTracker);\n         }\n         labelsCursor = 0;\n \n         // Write data to stores\n-        nodeRecord.setNextProp( createAndWritePropertyChain( cursorTracer ) );\n-        nodeRecord.setInUse( true );\n-        nodeStore.updateRecord( nodeRecord, IGNORE, nodeUpdateCursor, cursorTracer );\n+        nodeRecord.setNextProp(createAndWritePropertyChain(cursorTracer));\n+        nodeRecord.setInUse(true);\n+        nodeStore.updateRecord(nodeRecord, IGNORE, nodeUpdateCursor, cursorTracer);\n         nodeCount++;\n         nodeRecord.clear();\n-        nodeRecord.setId( NULL_REFERENCE.longValue() );\n+        nodeRecord.setId(NULL_REFERENCE.longValue());\n         hasLabelField = false;\n         super.endOfEntity();\n     }\n@@ -169,8 +170,8 @@ public class NodeImporter extends EntityImporter\n     public void close()\n     {\n         super.close();\n-        monitor.nodesImported( nodeCount );\n-        nodeStore.setHighestPossibleIdInUse( highestId ); // for the case of #id(long)\n+        monitor.nodesImported(nodeCount);\n+        nodeStore.setHighestPossibleIdInUse(highestId); // for the case of #id(long)\n         nodeUpdateCursor.close();\n         idPropertyUpdateCursor.close();\n         cursorTracer.close();\n@@ -180,6 +181,6 @@ public class NodeImporter extends EntityImporter\n     void freeUnusedIds()\n     {\n         super.freeUnusedIds();\n-        freeUnusedIds( nodeStore, nodeIds, cursorTracer );\n+        freeUnusedIds(nodeStore, nodeIds, cursorTracer);\n     }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}