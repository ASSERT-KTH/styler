{
    "project_name": "Internet2-grouper",
    "error_id": "61",
    "information": {
        "errors": [
            {
                "line": "177",
                "column": "54",
                "severity": "warning",
                "message": "'>' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
            }
        ]
    },
    "source_code": "    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\n        Validate.noNullElements(values);\n        return generateBitVector(enumClass, Arrays.<E> asList(values));\n    }\n\n    /**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/61/EnumUtils.java\nindex 3d0aa4d86a2..5772f76bbf2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler/61/EnumUtils.java\n@@ -174,7 +174,7 @@ public class EnumUtils {\n      */\r\n     public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\r\n         Validate.noNullElements(values);\r\n-        return generateBitVector(enumClass, Arrays.<E> asList(values));\r\n+        return generateBitVector(enumClass, Arrays.<E>asList(values));\r\n     }\r\n \r\n     /**\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/61/EnumUtils.java\nindex 3d0aa4d86a2..8df1306422b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/61/EnumUtils.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -29,6 +29,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3;\r\n \r\n import java.util.ArrayList;\r\n@@ -48,176 +49,176 @@ import java.util.EnumSet;\n  */\r\n public class EnumUtils {\r\n \r\n-    /**\r\n-     * This constructor is public to permit tools that require a JavaBean\r\n-     * instance to operate.\r\n-     */\r\n-    public EnumUtils() {\r\n-    }\r\n+  /**\r\n+   * This constructor is public to permit tools that require a JavaBean\r\n+   * instance to operate.\r\n+   */\r\n+  public EnumUtils() {\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Gets the {@code Map} of enums by name.</p>\r\n-     *\r\n-     * <p>This method is useful when you need a map of enums by name.</p>\r\n-     *\r\n-     * @param <E> the type of the enumeration\r\n-     * @param enumClass  the class of the enum to query, not null\r\n-     * @return the modifiable map of enum names to enums, never null\r\n-     */\r\n-    public static <E extends Enum<E>> Map<String, E> getEnumMap(Class<E> enumClass) {\r\n-        Map<String, E> map = new LinkedHashMap<String, E>();\r\n-        for (E e: enumClass.getEnumConstants()) {\r\n-            map.put(e.name(), e);\r\n-        }\r\n-        return map;\r\n+  /**\r\n+   * <p>Gets the {@code Map} of enums by name.</p>\r\n+   *\r\n+   * <p>This method is useful when you need a map of enums by name.</p>\r\n+   *\r\n+   * @param <E> the type of the enumeration\r\n+   * @param enumClass  the class of the enum to query, not null\r\n+   * @return the modifiable map of enum names to enums, never null\r\n+   */\r\n+  public static <E extends Enum<E>> Map<String, E> getEnumMap(Class<E> enumClass) {\r\n+    Map<String, E> map = new LinkedHashMap<String, E>();\r\n+    for (E e : enumClass.getEnumConstants()) {\r\n+      map.put(e.name(), e);\r\n     }\r\n+    return map;\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Gets the {@code List} of enums.</p>\r\n-     *\r\n-     * <p>This method is useful when you need a list of enums rather than an array.</p>\r\n-     *\r\n-     * @param <E> the type of the enumeration\r\n-     * @param enumClass  the class of the enum to query, not null\r\n-     * @return the modifiable list of enums, never null\r\n-     */\r\n-    public static <E extends Enum<E>> List<E> getEnumList(Class<E> enumClass) {\r\n-        return new ArrayList<E>(Arrays.asList(enumClass.getEnumConstants()));\r\n-    }\r\n+  /**\r\n+   * <p>Gets the {@code List} of enums.</p>\r\n+   *\r\n+   * <p>This method is useful when you need a list of enums rather than an array.</p>\r\n+   *\r\n+   * @param <E> the type of the enumeration\r\n+   * @param enumClass  the class of the enum to query, not null\r\n+   * @return the modifiable list of enums, never null\r\n+   */\r\n+  public static <E extends Enum<E>> List<E> getEnumList(Class<E> enumClass) {\r\n+    return new ArrayList<E>(Arrays.asList(enumClass.getEnumConstants()));\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Checks if the specified name is a valid enum for the class.</p>\r\n-     *\r\n-     * <p>This method differs from {@link Enum#valueOf} in that checks if the name is\r\n-     * a valid enum without needing to catch the exception.</p>\r\n-     *\r\n-     * @param <E> the type of the enumeration\r\n-     * @param enumClass  the class of the enum to query, not null\r\n-     * @param enumName   the enum name, null returns false\r\n-     * @return true if the enum name is valid, otherwise false\r\n-     */\r\n-    public static <E extends Enum<E>> boolean isValidEnum(Class<E> enumClass, String enumName) {\r\n-        if (enumName == null) {\r\n-            return false;\r\n-        }\r\n-        try {\r\n-            Enum.valueOf(enumClass, enumName);\r\n-            return true;\r\n-        } catch (IllegalArgumentException ex) {\r\n-            return false;\r\n-        }\r\n+  /**\r\n+   * <p>Checks if the specified name is a valid enum for the class.</p>\r\n+   *\r\n+   * <p>This method differs from {@link Enum#valueOf} in that checks if the name is\r\n+   * a valid enum without needing to catch the exception.</p>\r\n+   *\r\n+   * @param <E> the type of the enumeration\r\n+   * @param enumClass  the class of the enum to query, not null\r\n+   * @param enumName   the enum name, null returns false\r\n+   * @return true if the enum name is valid, otherwise false\r\n+   */\r\n+  public static <E extends Enum<E>> boolean isValidEnum(Class<E> enumClass, String enumName) {\r\n+    if (enumName == null) {\r\n+      return false;\r\n     }\r\n-\r\n-    /**\r\n-     * <p>Gets the enum for the class, returning {@code null} if not found.</p>\r\n-     *\r\n-     * <p>This method differs from {@link Enum#valueOf} in that it does not throw an exception\r\n-     * for an invalid enum name.</p>\r\n-     *\r\n-     * @param <E> the type of the enumeration\r\n-     * @param enumClass  the class of the enum to query, not null\r\n-     * @param enumName   the enum name, null returns null\r\n-     * @return the enum, null if not found\r\n-     */\r\n-    public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {\r\n-        if (enumName == null) {\r\n-            return null;\r\n-        }\r\n-        try {\r\n-            return Enum.valueOf(enumClass, enumName);\r\n-        } catch (IllegalArgumentException ex) {\r\n-            return null;\r\n-        }\r\n+    try {\r\n+      Enum.valueOf(enumClass, enumName);\r\n+      return true;\r\n+    } catch (IllegalArgumentException ex) {\r\n+      return false;\r\n     }\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Creates a long bit vector representation of the given subset of an Enum.</p>\r\n-     *\r\n-     * <p>This generates a value that is usable by {@link EnumUtils#processBitVector}.</p>\r\n-     *\r\n-     * <p>Do not use this method if you have more than 64 values in your Enum, as this\r\n-     * would create a value greater than a long can hold.</p>\r\n-     *\r\n-     * @param enumClass the class of the enum we are working with, not {@code null}\r\n-     * @param values    the values we want to convert, not {@code null}\r\n-     * @param <E>       the type of the enumeration\r\n-     * @return a long whose binary value represents the given set of enum values.\r\n-     * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\r\n-     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n-     * @since 3.0.1\r\n-     */\r\n-    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, Iterable<E> values) {\r\n-        checkBitVectorable(enumClass);\r\n-        Validate.notNull(values);\r\n-        long total = 0;\r\n-        for (E constant : values) {\r\n-            total |= 1 << constant.ordinal();\r\n-        }\r\n-        return total;\r\n+  /**\r\n+   * <p>Gets the enum for the class, returning {@code null} if not found.</p>\r\n+   *\r\n+   * <p>This method differs from {@link Enum#valueOf} in that it does not throw an exception\r\n+   * for an invalid enum name.</p>\r\n+   *\r\n+   * @param <E> the type of the enumeration\r\n+   * @param enumClass  the class of the enum to query, not null\r\n+   * @param enumName   the enum name, null returns null\r\n+   * @return the enum, null if not found\r\n+   */\r\n+  public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {\r\n+    if (enumName == null) {\r\n+      return null;\r\n+    }\r\n+    try {\r\n+      return Enum.valueOf(enumClass, enumName);\r\n+    } catch (IllegalArgumentException ex) {\r\n+      return null;\r\n     }\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Creates a long bit vector representation of the given array of Enum values.</p>\r\n-     *\r\n-     * <p>This generates a value that is usable by {@link EnumUtils#processBitVector}.</p>\r\n-     *\r\n-     * <p>Do not use this method if you have more than 64 values in your Enum, as this\r\n-     * would create a value greater than a long can hold.</p>\r\n-     *\r\n-     * @param enumClass the class of the enum we are working with, not {@code null}\r\n-     * @param values    the values we want to convert, not {@code null}\r\n-     * @param <E>       the type of the enumeration\r\n-     * @return a long whose binary value represents the given set of enum values.\r\n-     * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\r\n-     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n-     * @since 3.0.1\r\n-     */\r\n-    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\r\n-        Validate.noNullElements(values);\r\n-        return generateBitVector(enumClass, Arrays.<E> asList(values));\r\n+  /**\r\n+   * <p>Creates a long bit vector representation of the given subset of an Enum.</p>\r\n+   *\r\n+   * <p>This generates a value that is usable by {@link EnumUtils#processBitVector}.</p>\r\n+   *\r\n+   * <p>Do not use this method if you have more than 64 values in your Enum, as this\r\n+   * would create a value greater than a long can hold.</p>\r\n+   *\r\n+   * @param enumClass the class of the enum we are working with, not {@code null}\r\n+   * @param values    the values we want to convert, not {@code null}\r\n+   * @param <E>       the type of the enumeration\r\n+   * @return a long whose binary value represents the given set of enum values.\r\n+   * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\r\n+   * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n+   * @since 3.0.1\r\n+   */\r\n+  public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, Iterable<E> values) {\r\n+    checkBitVectorable(enumClass);\r\n+    Validate.notNull(values);\r\n+    long total = 0;\r\n+    for (E constant : values) {\r\n+      total |= 1 << constant.ordinal();\r\n     }\r\n+    return total;\r\n+  }\r\n \r\n-    /**\r\n-     * <p>Convert a long value created by {@link EnumUtils#generateBitVector} into the set of\r\n-     * enum values that it represents.</p>\r\n-     *\r\n-     * <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>\r\n-     * @param enumClass the class of the enum we are working with, not {@code null}\r\n-     * @param value     the long value representation of a set of enum values\r\n-     * @param <E>       the type of the enumeration\r\n-     * @return a set of enum values\r\n-     * @throws NullPointerException if {@code enumClass} is {@code null}\r\n-     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n-     * @since 3.0.1\r\n-     */\r\n-    public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {\r\n-        final E[] constants = checkBitVectorable(enumClass).getEnumConstants();\r\n-        final EnumSet<E> results = EnumSet.noneOf(enumClass);\r\n-        for (E constant : constants) {\r\n-            if ((value & 1 << constant.ordinal()) != 0) {\r\n-                results.add(constant);\r\n-            }\r\n-        }\r\n-        return results;\r\n+  /**\r\n+   * <p>Creates a long bit vector representation of the given array of Enum values.</p>\r\n+   *\r\n+   * <p>This generates a value that is usable by {@link EnumUtils#processBitVector}.</p>\r\n+   *\r\n+   * <p>Do not use this method if you have more than 64 values in your Enum, as this\r\n+   * would create a value greater than a long can hold.</p>\r\n+   *\r\n+   * @param enumClass the class of the enum we are working with, not {@code null}\r\n+   * @param values    the values we want to convert, not {@code null}\r\n+   * @param <E>       the type of the enumeration\r\n+   * @return a long whose binary value represents the given set of enum values.\r\n+   * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\r\n+   * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n+   * @since 3.0.1\r\n+   */\r\n+  public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\r\n+    Validate.noNullElements(values);\r\n+    return generateBitVector(enumClass, Arrays.<E>asList(values));\r\n+  }\r\n+\r\n+  /**\r\n+   * <p>Convert a long value created by {@link EnumUtils#generateBitVector} into the set of\r\n+   * enum values that it represents.</p>\r\n+   *\r\n+   * <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>\r\n+   * @param enumClass the class of the enum we are working with, not {@code null}\r\n+   * @param value     the long value representation of a set of enum values\r\n+   * @param <E>       the type of the enumeration\r\n+   * @return a set of enum values\r\n+   * @throws NullPointerException if {@code enumClass} is {@code null}\r\n+   * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n+   * @since 3.0.1\r\n+   */\r\n+  public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {\r\n+    final E[] constants = checkBitVectorable(enumClass).getEnumConstants();\r\n+    final EnumSet<E> results = EnumSet.noneOf(enumClass);\r\n+    for (E constant : constants) {\r\n+      if ((value & 1 << constant.ordinal()) != 0) {\r\n+        results.add(constant);\r\n+      }\r\n     }\r\n+    return results;\r\n+  }\r\n \r\n-    /**\r\n-     * Validate that {@code enumClass} is compatible with representation in a {@code long}.\r\n-     * @param <E> the type of the enumeration\r\n-     * @param enumClass to check\r\n-     * @return {@code enumClass}\r\n-     * @throws NullPointerException if {@code enumClass} is {@code null}\r\n-     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n-     * @since 3.0.1\r\n-     */\r\n-    private static <E extends Enum<E>> Class<E> checkBitVectorable(Class<E> enumClass) {\r\n-        Validate.notNull(enumClass, \"EnumClass must be defined.\");\r\n+  /**\r\n+   * Validate that {@code enumClass} is compatible with representation in a {@code long}.\r\n+   * @param <E> the type of the enumeration\r\n+   * @param enumClass to check\r\n+   * @return {@code enumClass}\r\n+   * @throws NullPointerException if {@code enumClass} is {@code null}\r\n+   * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n+   * @since 3.0.1\r\n+   */\r\n+  private static <E extends Enum<E>> Class<E> checkBitVectorable(Class<E> enumClass) {\r\n+    Validate.notNull(enumClass, \"EnumClass must be defined.\");\r\n \r\n-        final E[] constants = enumClass.getEnumConstants();\r\n-        Validate.isTrue(constants != null, \"%s does not seem to be an Enum type\", enumClass);\r\n-        Validate.isTrue(constants.length <= Long.SIZE, \"Cannot store %s %s values in %s bits\", constants.length,\r\n-            enumClass.getSimpleName(), Long.SIZE);\r\n+    final E[] constants = enumClass.getEnumConstants();\r\n+    Validate.isTrue(constants != null, \"%s does not seem to be an Enum type\", enumClass);\r\n+    Validate.isTrue(constants.length <= Long.SIZE, \"Cannot store %s %s values in %s bits\", constants.length,\r\n+      enumClass.getSimpleName(), Long.SIZE);\r\n \r\n-        return enumClass;\r\n-    }\r\n+    return enumClass;\r\n+  }\r\n }\r\n",
            "diff_size": 192
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "177",
                    "column": "54",
                    "severity": "warning",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/61/EnumUtils.java\nindex 3d0aa4d86a2..087a5de9187 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/61/EnumUtils.java\n@@ -220,4 +220,4 @@ public class EnumUtils {\n \r\n         return enumClass;\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/61/EnumUtils.java\nindex 3d0aa4d86a2..83f5824c86d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/61/EnumUtils.java\n@@ -29,13 +29,13 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Arrays;\r\n-import java.util.LinkedHashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n+package edu.internet2.middleware.grouperClientExt.org.apache.commons.lang3;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n import java.util.EnumSet;\r\n \r\n /**\r\n@@ -45,15 +45,16 @@ import java.util.EnumSet;\n  *\r\n  * @since 3.0\r\n  * @version $Id: EnumUtils.java 1199894 2011-11-09 17:53:59Z ggregory $\r\n- */\r\n+ */\n+\n+\n public class EnumUtils {\r\n \r\n     /**\r\n      * This constructor is public to permit tools that require a JavaBean\r\n      * instance to operate.\r\n-     */\r\n-    public EnumUtils() {\r\n-    }\r\n+     */\n+    public EnumUtils() {}\r\n \r\n     /**\r\n      * <p>Gets the {@code Map} of enums by name.</p>\r\n@@ -63,13 +64,16 @@ public class EnumUtils {\n      * @param <E> the type of the enumeration\r\n      * @param enumClass  the class of the enum to query, not null\r\n      * @return the modifiable map of enum names to enums, never null\r\n-     */\r\n-    public static <E extends Enum<E>> Map<String, E> getEnumMap(Class<E> enumClass) {\r\n-        Map<String, E> map = new LinkedHashMap<String, E>();\r\n-        for (E e: enumClass.getEnumConstants()) {\r\n-            map.put(e.name(), e);\r\n-        }\r\n-        return map;\r\n+     */\n+\n+\n+    public static <E extends Enum<E>> Map<String, E> getEnumMap(Class<E> enumClass) {\n+        Map<String, E> map = new LinkedHashMap<String, E>();\n+\n+        for (E e : enumClass.getEnumConstants()) {\n+            map.put(e.name(), e);\n+        }\n+        return map;\n     }\r\n \r\n     /**\r\n@@ -80,9 +84,11 @@ public class EnumUtils {\n      * @param <E> the type of the enumeration\r\n      * @param enumClass  the class of the enum to query, not null\r\n      * @return the modifiable list of enums, never null\r\n-     */\r\n-    public static <E extends Enum<E>> List<E> getEnumList(Class<E> enumClass) {\r\n-        return new ArrayList<E>(Arrays.asList(enumClass.getEnumConstants()));\r\n+     */\n+\n+\n+    public static <E extends Enum<E>> List<E> getEnumList(Class<E> enumClass) {\n+        return new ArrayList<E>(Arrays.asList(enumClass.getEnumConstants()));\n     }\r\n \r\n     /**\r\n@@ -95,17 +101,19 @@ public class EnumUtils {\n      * @param enumClass  the class of the enum to query, not null\r\n      * @param enumName   the enum name, null returns false\r\n      * @return true if the enum name is valid, otherwise false\r\n-     */\r\n-    public static <E extends Enum<E>> boolean isValidEnum(Class<E> enumClass, String enumName) {\r\n-        if (enumName == null) {\r\n-            return false;\r\n-        }\r\n-        try {\r\n-            Enum.valueOf(enumClass, enumName);\r\n-            return true;\r\n-        } catch (IllegalArgumentException ex) {\r\n-            return false;\r\n-        }\r\n+     */\n+\n+\n+    public static <E extends Enum<E>> boolean isValidEnum(Class<E> enumClass, String enumName) {\n+        if (enumName == null) {\n+            return false;\n+        }\n+        try {\n+            Enum.valueOf(enumClass, enumName);\n+            return true;\n+        } catch (IllegalArgumentException ex) {\n+            return false;\n+        }\n     }\r\n \r\n     /**\r\n@@ -118,16 +126,18 @@ public class EnumUtils {\n      * @param enumClass  the class of the enum to query, not null\r\n      * @param enumName   the enum name, null returns null\r\n      * @return the enum, null if not found\r\n-     */\r\n-    public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {\r\n-        if (enumName == null) {\r\n-            return null;\r\n-        }\r\n-        try {\r\n-            return Enum.valueOf(enumClass, enumName);\r\n-        } catch (IllegalArgumentException ex) {\r\n-            return null;\r\n-        }\r\n+     */\n+\n+\n+    public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {\n+        if (enumName == null) {\n+            return null;\n+        }\n+        try {\n+            return Enum.valueOf(enumClass, enumName);\n+        } catch (IllegalArgumentException ex) {\n+            return null;\n+        }\n     }\r\n \r\n     /**\r\n@@ -145,15 +155,19 @@ public class EnumUtils {\n      * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\r\n      * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n      * @since 3.0.1\r\n-     */\r\n-    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, Iterable<E> values) {\r\n-        checkBitVectorable(enumClass);\r\n-        Validate.notNull(values);\r\n-        long total = 0;\r\n-        for (E constant : values) {\r\n-            total |= 1 << constant.ordinal();\r\n-        }\r\n-        return total;\r\n+     */\n+\n+\n+    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, Iterable<E> values) {\n+        checkBitVectorable(enumClass);\n+        Validate.notNull(values);\n+\n+        long total = 0;\n+\n+        for (E constant : values) {\n+            total |= 1 << constant.ordinal();\n+        }\n+        return total;\n     }\r\n \r\n     /**\r\n@@ -171,10 +185,12 @@ public class EnumUtils {\n      * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\r\n      * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n      * @since 3.0.1\r\n-     */\r\n-    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\r\n-        Validate.noNullElements(values);\r\n-        return generateBitVector(enumClass, Arrays.<E> asList(values));\r\n+     */\n+\n+\n+    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\n+        Validate.noNullElements(values);\n+        return generateBitVector(enumClass, Arrays.<E>asList(values));\n     }\r\n \r\n     /**\r\n@@ -189,16 +205,19 @@ public class EnumUtils {\n      * @throws NullPointerException if {@code enumClass} is {@code null}\r\n      * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n      * @since 3.0.1\r\n-     */\r\n-    public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {\r\n-        final E[] constants = checkBitVectorable(enumClass).getEnumConstants();\r\n-        final EnumSet<E> results = EnumSet.noneOf(enumClass);\r\n-        for (E constant : constants) {\r\n-            if ((value & 1 << constant.ordinal()) != 0) {\r\n-                results.add(constant);\r\n-            }\r\n-        }\r\n-        return results;\r\n+     */\n+\n+\n+    public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {\n+        final E[] constants = checkBitVectorable(enumClass).getEnumConstants();\n+        final EnumSet<E> results = EnumSet.noneOf(enumClass);\n+\n+        for (E constant : constants) {\n+            if ((value & 1 << constant.ordinal()) != 0) {\n+                results.add(constant);\n+            }\n+        }\n+        return results;\n     }\r\n \r\n     /**\r\n@@ -209,15 +228,15 @@ public class EnumUtils {\n      * @throws NullPointerException if {@code enumClass} is {@code null}\r\n      * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\r\n      * @since 3.0.1\r\n-     */\r\n-    private static <E extends Enum<E>> Class<E> checkBitVectorable(Class<E> enumClass) {\r\n-        Validate.notNull(enumClass, \"EnumClass must be defined.\");\r\n-\r\n-        final E[] constants = enumClass.getEnumConstants();\r\n-        Validate.isTrue(constants != null, \"%s does not seem to be an Enum type\", enumClass);\r\n-        Validate.isTrue(constants.length <= Long.SIZE, \"Cannot store %s %s values in %s bits\", constants.length,\r\n-            enumClass.getSimpleName(), Long.SIZE);\r\n-\r\n-        return enumClass;\r\n-    }\r\n-}\r\n+     */\n+\n+\n+    private static <E extends Enum<E>> Class<E> checkBitVectorable(Class<E> enumClass) {\n+        Validate.notNull(enumClass, \"EnumClass must be defined.\");\n+\n+        final E[] constants = enumClass.getEnumConstants();\n+        Validate.isTrue(constants != null, \"%s does not seem to be an Enum type\", enumClass);\n+        Validate.isTrue(constants.length <= Long.SIZE, \"Cannot store %s %s values in %s bits\", constants.length, enumClass.getSimpleName(), Long.SIZE);\n+        return enumClass;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/61/EnumUtils.java\nindex 3d0aa4d86a2..5772f76bbf2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_random/61/EnumUtils.java\n@@ -174,7 +174,7 @@ public class EnumUtils {\n      */\r\n     public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\r\n         Validate.noNullElements(values);\r\n-        return generateBitVector(enumClass, Arrays.<E> asList(values));\r\n+        return generateBitVector(enumClass, Arrays.<E>asList(values));\r\n     }\r\n \r\n     /**\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/61/EnumUtils.java\nindex 3d0aa4d86a2..5772f76bbf2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/61/EnumUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/styler_three_grams/61/EnumUtils.java\n@@ -174,7 +174,7 @@ public class EnumUtils {\n      */\r\n     public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\r\n         Validate.noNullElements(values);\r\n-        return generateBitVector(enumClass, Arrays.<E> asList(values));\r\n+        return generateBitVector(enumClass, Arrays.<E>asList(values));\r\n     }\r\n \r\n     /**\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}