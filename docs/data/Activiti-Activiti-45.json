{
    "project_name": "Activiti-Activiti",
    "error_id": "45",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.cmd;\n\nimport java.io.Serializable;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/45/GetDataObjectCmd.java\nindex 1e50f7d0536..0387cfc2c43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/45/GetDataObjectCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/45/GetDataObjectCmd.java\nindex 1e50f7d0536..69d7b8ad614 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/45/GetDataObjectCmd.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n@@ -35,101 +36,101 @@ import com.fasterxml.jackson.databind.node.ObjectNode;\n \n public class GetDataObjectCmd implements Command<DataObject>, Serializable {\n \n-  private static final long serialVersionUID = 1L;\n-  protected String executionId;\n-  protected String dataObjectName;\n-  protected boolean isLocal;\n-  protected String locale;\n-  protected boolean withLocalizationFallback;\n-  \n-  public GetDataObjectCmd(String executionId, String dataObjectName, boolean isLocal) {\n-    this.executionId = executionId;\n-    this.dataObjectName = dataObjectName;\n-    this.isLocal = isLocal;\n-  }\n-  \n-  public GetDataObjectCmd(String executionId, String dataObjectName, boolean isLocal, String locale, boolean withLocalizationFallback) {\n-    this.executionId = executionId;\n-    this.dataObjectName = dataObjectName;\n-    this.isLocal = isLocal;\n-    this.locale = locale;\n-    this.withLocalizationFallback = withLocalizationFallback;\n-  }\n-\n-  public DataObject execute(CommandContext commandContext) {\n-    if (executionId == null) {\n-      throw new ActivitiIllegalArgumentException(\"executionId is null\");\n-    }\n-    if (dataObjectName == null) {\n-      throw new ActivitiIllegalArgumentException(\"dataObjectName is null\");\n-    }\n-    \n-    ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n+    private static final long serialVersionUID = 1L;\n+    protected String executionId;\n+    protected String dataObjectName;\n+    protected boolean isLocal;\n+    protected String locale;\n+    protected boolean withLocalizationFallback;\n \n-    if (execution == null) {\n-      throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n+    public GetDataObjectCmd(String executionId, String dataObjectName, boolean isLocal) {\n+        this.executionId = executionId;\n+        this.dataObjectName = dataObjectName;\n+        this.isLocal = isLocal;\n     }\n-    \n-    DataObject dataObject = null;\n-    \n-    VariableInstance variableEntity = null;\n-    if (isLocal) {\n-      variableEntity = execution.getVariableInstanceLocal(dataObjectName, false);\n-    } else {\n-      variableEntity = execution.getVariableInstance(dataObjectName, false);\n+\n+    public GetDataObjectCmd(String executionId, String dataObjectName, boolean isLocal, String locale, boolean withLocalizationFallback) {\n+        this.executionId = executionId;\n+        this.dataObjectName = dataObjectName;\n+        this.isLocal = isLocal;\n+        this.locale = locale;\n+        this.withLocalizationFallback = withLocalizationFallback;\n     }\n \n-    String localizedName = null;\n-    String localizedDescription = null;\n-    \n-    if (variableEntity != null) {\n-      ExecutionEntity executionEntity = commandContext.getExecutionEntityManager().findById(variableEntity.getExecutionId());\n-      while (!executionEntity.isScope()) {\n-        executionEntity = executionEntity.getParent();\n-      }\n-      \n-      BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(executionEntity.getProcessDefinitionId());\n-      ValuedDataObject foundDataObject = null;\n-      if (executionEntity.getParentId() == null) {\n-        for (ValuedDataObject dataObjectDefinition : bpmnModel.getMainProcess().getDataObjects()) {\n-          if (dataObjectDefinition.getName().equals(variableEntity.getName())) {\n-            foundDataObject = dataObjectDefinition;\n-            break;\n-          }\n+    public DataObject execute(CommandContext commandContext) {\n+        if (executionId == null) {\n+            throw new ActivitiIllegalArgumentException(\"executionId is null\");\n+        }\n+        if (dataObjectName == null) {\n+            throw new ActivitiIllegalArgumentException(\"dataObjectName is null\");\n         }\n-        \n-      } else {\n-        SubProcess subProcess = (SubProcess) bpmnModel.getFlowElement(execution.getActivityId());\n-        for (ValuedDataObject dataObjectDefinition : subProcess.getDataObjects()) {\n-          if (dataObjectDefinition.getName().equals(variableEntity.getName())) {\n-            foundDataObject = dataObjectDefinition;\n-            break;\n-          }\n+\n+        ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n+\n+        if (execution == null) {\n+            throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n+        }\n+\n+        DataObject dataObject = null;\n+\n+        VariableInstance variableEntity = null;\n+        if (isLocal) {\n+            variableEntity = execution.getVariableInstanceLocal(dataObjectName, false);\n+        } else {\n+            variableEntity = execution.getVariableInstance(dataObjectName, false);\n         }\n-      }\n-      \n-      if (locale != null && foundDataObject != null) {\n-        ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), \n-            execution.getProcessDefinitionId(), withLocalizationFallback);\n-        \n-        if (variableEntity != null && languageNode != null) {\n-          JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n-          if (nameNode != null) {\n-            localizedName = nameNode.asText();\n-          }\n-          JsonNode descriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);\n-          if (descriptionNode != null) {\n-            localizedDescription = descriptionNode.asText();\n-          }\n+\n+        String localizedName = null;\n+        String localizedDescription = null;\n+\n+        if (variableEntity != null) {\n+            ExecutionEntity executionEntity = commandContext.getExecutionEntityManager().findById(variableEntity.getExecutionId());\n+            while (!executionEntity.isScope()) {\n+                executionEntity = executionEntity.getParent();\n+            }\n+\n+            BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(executionEntity.getProcessDefinitionId());\n+            ValuedDataObject foundDataObject = null;\n+            if (executionEntity.getParentId() == null) {\n+                for (ValuedDataObject dataObjectDefinition : bpmnModel.getMainProcess().getDataObjects()) {\n+                    if (dataObjectDefinition.getName().equals(variableEntity.getName())) {\n+                        foundDataObject = dataObjectDefinition;\n+                        break;\n+                    }\n+                }\n+\n+            } else {\n+                SubProcess subProcess = (SubProcess) bpmnModel.getFlowElement(execution.getActivityId());\n+                for (ValuedDataObject dataObjectDefinition : subProcess.getDataObjects()) {\n+                    if (dataObjectDefinition.getName().equals(variableEntity.getName())) {\n+                        foundDataObject = dataObjectDefinition;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            if (locale != null && foundDataObject != null) {\n+                ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(),\n+                        execution.getProcessDefinitionId(), withLocalizationFallback);\n+\n+                if (variableEntity != null && languageNode != null) {\n+                    JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n+                    if (nameNode != null) {\n+                        localizedName = nameNode.asText();\n+                    }\n+                    JsonNode descriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);\n+                    if (descriptionNode != null) {\n+                        localizedDescription = descriptionNode.asText();\n+                    }\n+                }\n+            }\n+\n+            if (foundDataObject != null) {\n+                dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(),\n+                        foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());\n+            }\n         }\n-      }\n-      \n-      if (foundDataObject != null) {\n-        dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), \n-            foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());\n-      }\n+\n+        return dataObject;\n     }\n-    \n-    return dataObject;\n-  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/45/GetDataObjectCmd.java\nindex 1e50f7d0536..2c724e8df31 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/45/GetDataObjectCmd.java\n@@ -13,7 +13,6 @@\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n-\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.bpmn.model.SubProcess;\n import org.activiti.bpmn.model.ValuedDataObject;\n@@ -29,10 +28,10 @@ import org.activiti.engine.impl.persistence.entity.VariableInstance;\n import org.activiti.engine.impl.util.ProcessDefinitionUtil;\n import org.activiti.engine.runtime.DataObject;\n import org.activiti.engine.runtime.Execution;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n \n+\n public class GetDataObjectCmd implements Command<DataObject>, Serializable {\n \n   private static final long serialVersionUID = 1L;\n@@ -41,14 +40,17 @@ public class GetDataObjectCmd implements Command<DataObject>, Serializable {\n   protected boolean isLocal;\n   protected String locale;\n   protected boolean withLocalizationFallback;\n-  \n+\n   public GetDataObjectCmd(String executionId, String dataObjectName, boolean isLocal) {\n     this.executionId = executionId;\n     this.dataObjectName = dataObjectName;\n     this.isLocal = isLocal;\n   }\n-  \n-  public GetDataObjectCmd(String executionId, String dataObjectName, boolean isLocal, String locale, boolean withLocalizationFallback) {\n+\n+  public GetDataObjectCmd(String executionId,\n+                          String dataObjectName,\n+                          boolean isLocal,\n+                          String locale, boolean withLocalizationFallback) {\n     this.executionId = executionId;\n     this.dataObjectName = dataObjectName;\n     this.isLocal = isLocal;\n@@ -63,15 +65,14 @@ public class GetDataObjectCmd implements Command<DataObject>, Serializable {\n     if (dataObjectName == null) {\n       throw new ActivitiIllegalArgumentException(\"dataObjectName is null\");\n     }\n-    \n-    ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n \n+    ExecutionEntity execution = commandContext.getExecutionEntityManager().findById(executionId);\n     if (execution == null) {\n-      throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\", Execution.class);\n+      throw new ActivitiObjectNotFoundException(\"execution \" + executionId + \" doesn't exist\",\n+                                                Execution.class);\n     }\n-    \n+\n     DataObject dataObject = null;\n-    \n     VariableInstance variableEntity = null;\n     if (isLocal) {\n       variableEntity = execution.getVariableInstanceLocal(dataObjectName, false);\n@@ -81,13 +82,12 @@ public class GetDataObjectCmd implements Command<DataObject>, Serializable {\n \n     String localizedName = null;\n     String localizedDescription = null;\n-    \n     if (variableEntity != null) {\n       ExecutionEntity executionEntity = commandContext.getExecutionEntityManager().findById(variableEntity.getExecutionId());\n       while (!executionEntity.isScope()) {\n         executionEntity = executionEntity.getParent();\n       }\n-      \n+\n       BpmnModel bpmnModel = ProcessDefinitionUtil.getBpmnModel(executionEntity.getProcessDefinitionId());\n       ValuedDataObject foundDataObject = null;\n       if (executionEntity.getParentId() == null) {\n@@ -97,7 +97,6 @@ public class GetDataObjectCmd implements Command<DataObject>, Serializable {\n             break;\n           }\n         }\n-        \n       } else {\n         SubProcess subProcess = (SubProcess) bpmnModel.getFlowElement(execution.getActivityId());\n         for (ValuedDataObject dataObjectDefinition : subProcess.getDataObjects()) {\n@@ -107,29 +106,24 @@ public class GetDataObjectCmd implements Command<DataObject>, Serializable {\n           }\n         }\n       }\n-      \n       if (locale != null && foundDataObject != null) {\n-        ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), \n-            execution.getProcessDefinitionId(), withLocalizationFallback);\n-        \n+        ObjectNode languageNode = Context.getLocalizationElementProperties(locale, foundDataObject.getId(), execution.getProcessDefinitionId(), withLocalizationFallback);\n         if (variableEntity != null && languageNode != null) {\n           JsonNode nameNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_NAME);\n           if (nameNode != null) {\n             localizedName = nameNode.asText();\n           }\n+\n           JsonNode descriptionNode = languageNode.get(DynamicBpmnConstants.LOCALIZATION_DESCRIPTION);\n           if (descriptionNode != null) {\n             localizedDescription = descriptionNode.asText();\n           }\n         }\n       }\n-      \n       if (foundDataObject != null) {\n-        dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), \n-            foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());\n+        dataObject = new DataObjectImpl(variableEntity.getName(), variableEntity.getValue(), foundDataObject.getDocumentation(), foundDataObject.getType(), localizedName, localizedDescription, foundDataObject.getId());\n       }\n     }\n-    \n     return dataObject;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/45/GetDataObjectCmd.java\nindex 1e50f7d0536..0387cfc2c43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/45/GetDataObjectCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/45/GetDataObjectCmd.java\nindex 1e50f7d0536..0387cfc2c43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/45/GetDataObjectCmd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/45/GetDataObjectCmd.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.cmd;\n \n import java.io.Serializable;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}