{
    "project_name": "findbugsproject-findbugs",
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "230",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    public boolean add(BugInstance bugInstance) {\n        return add(bugInstance, \n        \t\tbugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n    }\n\n    /**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/119/SortedBugCollection.java\nindex 323d2bc0198..00b0cf5935c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/119/SortedBugCollection.java\n@@ -226,8 +226,8 @@ public class SortedBugCollection implements BugCollection {\n      *         BugInstance was already in the BugCollection\n      */\n     public boolean add(BugInstance bugInstance) {\n-        return add(bugInstance, \n-        \t\tbugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n+        return add(bugInstance,\n+                bugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n     }\n \n     /**\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/119/SortedBugCollection.java\nindex 323d2bc0198..6526e15cbda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/119/SortedBugCollection.java\n@@ -88,8 +88,8 @@ import org.xml.sax.helpers.XMLReaderFactory;\n  * by class (using the native comparison ordering of BugInstance's compareTo()\n  * method as a tie-breaker).\n  *\n- * @see BugInstance\n  * @author David Hovemeyer\n+ * @see BugInstance\n  */\n public class SortedBugCollection implements BugCollection {\n     private static final Logger LOGGER = Logger.getLogger(SortedBugCollection.class.getName());\n@@ -137,15 +137,18 @@ public class SortedBugCollection implements BugCollection {\n     public Project getProject() {\n         return project;\n     }\n-    \n-    public @CheckForNull Cloud getCloudLazily() {\n-        if (cloud != null && bugsPopulated) \n-           cloud.bugsPopulated();\n+\n+    public @CheckForNull\n+    Cloud getCloudLazily() {\n+        if (cloud != null && bugsPopulated) {\n+            cloud.bugsPopulated();\n+        }\n         return cloud;\n     }\n-        \n \n-    public @Nonnull Cloud getCloud() {\n+\n+    public @Nonnull\n+    Cloud getCloud() {\n         if (shouldNotUsePlugin) {\n             return CloudFactory.getPlainCloud(this);\n         }\n@@ -158,15 +161,17 @@ public class SortedBugCollection implements BugCollection {\n             } catch (Exception e) {\n                 LOGGER.log(Level.SEVERE, \"Could not load cloud plugin\", e);\n                 callback.showMessageDialog(\"Unable to connect to cloud: \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n-                if (CloudFactory.FAIL_ON_CLOUD_ERROR)\n+                if (CloudFactory.FAIL_ON_CLOUD_ERROR) {\n                     throw new IllegalStateException(\"Could not load FindBugs Cloud plugin - to avoid this message, \" +\n-                            \"set -D\" + CloudFactory.FAIL_ON_CLOUD_ERROR_PROP + \"=false\", e);\n+                        \"set -D\" + CloudFactory.FAIL_ON_CLOUD_ERROR_PROP + \"=false\", e);\n+                }\n                 cloud = CloudFactory.getPlainCloud(this);\n             }\n-            \n+\n         }\n-        if (bugsPopulated)\n+        if (bugsPopulated) {\n             cloud.bugsPopulated();\n+        }\n         return cloud;\n     }\n \n@@ -192,8 +197,7 @@ public class SortedBugCollection implements BugCollection {\n      * Add a Collection of BugInstances to this BugCollection object. This just\n      * calls add(BugInstance) for each instance in the input collection.\n      *\n-     * @param collection\n-     *            the Collection of BugInstances to add\n+     * @param collection the Collection of BugInstances to add\n      */\n     public void addAll(Collection<BugInstance> collection) {\n         for (BugInstance bug : collection) {\n@@ -204,11 +208,9 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Add a Collection of BugInstances to this BugCollection object.\n      *\n-     * @param collection\n-     *            the Collection of BugInstances to add\n-     * @param updateActiveTime\n-     *            true if active time of added BugInstances should be updated to\n-     *            match collection: false if not\n+     * @param collection       the Collection of BugInstances to add\n+     * @param updateActiveTime true if active time of added BugInstances should be updated to\n+     *                         match collection: false if not\n      */\n     public void addAll(Collection<BugInstance> collection, boolean updateActiveTime) {\n         for (BugInstance warning : collection) {\n@@ -220,21 +222,19 @@ public class SortedBugCollection implements BugCollection {\n      * Add a BugInstance to this BugCollection. This just calls add(bugInstance,\n      * true).\n      *\n-     * @param bugInstance\n-     *            the BugInstance\n+     * @param bugInstance the BugInstance\n      * @return true if the BugInstance was added, or false if a matching\n-     *         BugInstance was already in the BugCollection\n+     * BugInstance was already in the BugCollection\n      */\n     public boolean add(BugInstance bugInstance) {\n-        return add(bugInstance, \n-        \t\tbugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n+        return add(bugInstance,\n+            bugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n     }\n \n     /**\n      * Add an analysis error.\n      *\n-     * @param message\n-     *            the error message\n+     * @param message the error message\n      */\n     public void addError(String message) {\n         addError(message, null);\n@@ -245,15 +245,14 @@ public class SortedBugCollection implements BugCollection {\n      */\n     public AppVersion getCurrentAppVersion() {\n         return new AppVersion(getSequenceNumber()).setReleaseName(getReleaseName()).setTimestamp(getTimestamp())\n-                .setNumClasses(getProjectStats().getNumClasses()).setCodeSize(getProjectStats().getCodeSize());\n+            .setNumClasses(getProjectStats().getNumClasses()).setCodeSize(getProjectStats().getCodeSize());\n     }\n \n     /**\n      * Read XML data from given file into this object, populating given Project\n      * as a side effect.\n      *\n-     * @param fileName\n-     *            name of the file to read\n+     * @param fileName name of the file to read\n      */\n     public void readXML(String fileName) throws IOException, DocumentException {\n         readXML(new File(fileName));\n@@ -263,8 +262,7 @@ public class SortedBugCollection implements BugCollection {\n      * Read XML data from given file into this object, populating given Project\n      * as a side effect.\n      *\n-     * @param file\n-     *            the file\n+     * @param file the file\n      */\n     public void readXML(File file) throws IOException, DocumentException {\n         project.setCurrentWorkingDirectory(file.getParentFile());\n@@ -307,8 +305,7 @@ public class SortedBugCollection implements BugCollection {\n      * Project as a side effect. An attempt will be made to close the input\n      * stream (even if an exception is thrown).\n      *\n-     * @param in\n-     *            the InputStream\n+     * @param in the InputStream\n      */\n     public void readXML(@WillClose InputStream in, File base) throws IOException, DocumentException {\n         try {\n@@ -338,7 +335,7 @@ public class SortedBugCollection implements BugCollection {\n         } catch (RuntimeException e) {\n             in.close();\n             throw e;\n-        }catch (IOException e) {\n+        } catch (IOException e) {\n             in.close();\n             throw e;\n         }\n@@ -365,14 +362,16 @@ public class SortedBugCollection implements BugCollection {\n \n             xr.parse(new InputSource(reader));\n         } catch (SAXParseException e) {\n-            if (base != null)\n+            if (base != null) {\n                 throw new DocumentException(\"Parse error at line \" + e.getLineNumber() + \" : \" + e.getColumnNumber() + \" of \"\n-                        + base, e);\n+                    + base, e);\n+            }\n             throw new DocumentException(\"Parse error at line \" + e.getLineNumber() + \" : \" + e.getColumnNumber(), e);\n         } catch (SAXException e) {\n             // FIXME: throw SAXException from method?\n-            if (base != null)\n+            if (base != null) {\n                 throw new DocumentException(\"Sax error while parsing \" + base, e);\n+            }\n             throw new DocumentException(\"Sax error \", e);\n         } finally {\n             Util.closeSilently(reader);\n@@ -388,11 +387,11 @@ public class SortedBugCollection implements BugCollection {\n     public void writeXML(OutputStream out) throws IOException {\n         writeXML(UTF8.writer(out));\n     }\n+\n     /**\n      * Write this BugCollection to a file as XML.\n      *\n-     * @param fileName\n-     *            the file to write to\n+     * @param fileName the file to write to\n      */\n     public void writeXML(String fileName) throws IOException {\n         BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(fileName));\n@@ -402,8 +401,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Write this BugCollection to a file as XML.\n      *\n-     * @param file\n-     *            the file to write to\n+     * @param file the file to write to\n      */\n     public void writeXML(File file) throws IOException {\n         BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n@@ -436,15 +434,14 @@ public class SortedBugCollection implements BugCollection {\n      * Write the BugCollection to given output stream as XML. The output stream\n      * will be closed, even if an exception is thrown.\n      *\n-     * @param out\n-     *            the OutputStream to write to\n+     * @param out the OutputStream to write to\n      */\n     public void writeXML(@WillClose Writer out) throws IOException {\n         assert project != null;\n         bugsPopulated();\n         XMLOutput xmlOutput;\n         // if (project == null) throw new NullPointerException(\"No project\");\n-        \n+\n \n         if (withMessages) {\n             Cloud cloud = getCloud();\n@@ -467,13 +464,13 @@ public class SortedBugCollection implements BugCollection {\n     public void writePrologue(XMLOutput xmlOutput) throws IOException {\n         xmlOutput.beginDocument();\n         xmlOutput.openTag(\n-                ROOT_ELEMENT_NAME,\n-                new XMLAttributeList().addAttribute(\"version\", analysisVersion)\n-                        .addAttribute(\"sequence\", String.valueOf(getSequenceNumber()))\n-                        .addAttribute(\"timestamp\", String.valueOf(getTimestamp()))\n-                        .addAttribute(\"analysisTimestamp\", String.valueOf(getAnalysisTimestamp()))\n+            ROOT_ELEMENT_NAME,\n+            new XMLAttributeList().addAttribute(\"version\", analysisVersion)\n+                .addAttribute(\"sequence\", String.valueOf(getSequenceNumber()))\n+                .addAttribute(\"timestamp\", String.valueOf(getTimestamp()))\n+                .addAttribute(\"analysisTimestamp\", String.valueOf(getAnalysisTimestamp()))\n \n-                        .addAttribute(\"release\", getReleaseName()));\n+                .addAttribute(\"release\", getReleaseName()));\n         project.writeXML(xmlOutput, null, this);\n \n     }\n@@ -499,8 +496,9 @@ public class SortedBugCollection implements BugCollection {\n     // }\n \n     public void computeBugHashes() {\n-        if (preciseHashOccurrenceNumbersAvailable)\n+        if (preciseHashOccurrenceNumbersAvailable) {\n             return;\n+        }\n         invalidateHashes();\n         MessageDigest digest = Util.getMD5Digest();\n \n@@ -529,8 +527,9 @@ public class SortedBugCollection implements BugCollection {\n                 seen.put(hash, count + 1);\n             }\n         }\n-        for (BugInstance bugInstance : getCollection())\n+        for (BugInstance bugInstance : getCollection()) {\n             bugInstance.setInstanceOccurrenceMax(seen.get(bugInstance.getInstanceHash()));\n+        }\n         preciseHashOccurrenceNumbersAvailable = true;\n     }\n \n@@ -543,8 +542,7 @@ public class SortedBugCollection implements BugCollection {\n      * findbugs.report.SummaryHTML to \"true\".\n      * </p>\n      *\n-     * @param xmlOutput\n-     *            the XMLOutput object\n+     * @param xmlOutput the XMLOutput object\n      */\n     public void writeXML(@WillClose XMLOutput xmlOutput) throws IOException {\n         assert project != null;\n@@ -555,27 +553,33 @@ public class SortedBugCollection implements BugCollection {\n                 getProjectStats().computeFileStats(this);\n                 String commonBase = null;\n                 for (String s : project.getSourceDirList()) {\n-                    if (commonBase == null)\n+                    if (commonBase == null) {\n                         commonBase = s;\n-                    else\n+                    } else {\n                         commonBase = commonBase.substring(0, commonPrefix(commonBase, s));\n+                    }\n \n                 }\n                 if (commonBase != null && commonBase.length() > 0) {\n-                    if (commonBase.indexOf(\"/./\") > 0)\n+                    if (commonBase.indexOf(\"/./\") > 0) {\n                         commonBase = commonBase.substring(0, commonBase.indexOf(\"/.\"));\n+                    }\n                     File base = new File(commonBase);\n-                    if (base.exists() && base.isDirectory() && base.canRead())\n+                    if (base.exists() && base.isDirectory() && base.canRead()) {\n                         SourceLineAnnotation.generateRelativeSource(base, project);\n+                    }\n                 }\n             }\n-            if (earlyStats && !minimalXML)\n+            if (earlyStats && !minimalXML) {\n                 getProjectStats().writeXML(xmlOutput, withMessages);\n+            }\n \n             // Write BugInstances\n-            for (BugInstance bugInstance : getCollection())\n-                if (!applySuppressions || !project.getSuppressionFilter().match(bugInstance))\n+            for (BugInstance bugInstance : getCollection()) {\n+                if (!applySuppressions || !project.getSuppressionFilter().match(bugInstance)) {\n                     bugInstance.writeXML(xmlOutput, this, withMessages);\n+                }\n+            }\n \n             writeEpilogue(xmlOutput);\n \n@@ -587,8 +591,9 @@ public class SortedBugCollection implements BugCollection {\n \n     int commonPrefix(String s1, String s2) {\n         int pos = 0;\n-        while (pos < s1.length() && pos < s2.length() && s1.charAt(pos) == s2.charAt(pos))\n+        while (pos < s1.length() && pos < s2.length() && s1.charAt(pos) == s2.charAt(pos)) {\n             pos++;\n+        }\n         return pos;\n     }\n \n@@ -601,8 +606,9 @@ public class SortedBugCollection implements BugCollection {\n             writeBugCodes(xmlOutput);\n         }\n         // Errors, missing classes\n-        if (!minimalXML)\n+        if (!minimalXML) {\n             emitErrors(xmlOutput);\n+        }\n \n         if (!earlyStats && !minimalXML) {\n             // Statistics\n@@ -619,7 +625,7 @@ public class SortedBugCollection implements BugCollection {\n \n         // Class features\n         xmlOutput.openTag(\"ClassFeatures\");\n-        for (Iterator<ClassFeatureSet> i = classFeatureSetIterator(); i.hasNext();) {\n+        for (Iterator<ClassFeatureSet> i = classFeatureSetIterator(); i.hasNext(); ) {\n             ClassFeatureSet classFeatureSet = i.next();\n             classFeatureSet.writeXML(xmlOutput);\n         }\n@@ -627,7 +633,7 @@ public class SortedBugCollection implements BugCollection {\n \n         // AppVersions\n         xmlOutput.openTag(HISTORY_ELEMENT_NAME);\n-        for (Iterator<AppVersion> i = appVersionIterator(); i.hasNext();) {\n+        for (Iterator<AppVersion> i = appVersionIterator(); i.hasNext(); ) {\n             AppVersion appVersion = i.next();\n             appVersion.writeXML(xmlOutput);\n         }\n@@ -649,7 +655,7 @@ public class SortedBugCollection implements BugCollection {\n     private void writeBugPatterns(XMLOutput xmlOutput) throws IOException {\n         // Find bug types reported\n         Set<String> bugTypeSet = new HashSet<String>();\n-        for (Iterator<BugInstance> i = iterator(); i.hasNext();) {\n+        for (Iterator<BugInstance> i = iterator(); i.hasNext(); ) {\n             BugInstance bugInstance = i.next();\n             BugPattern bugPattern = bugInstance.getBugPattern();\n             if (bugPattern != null) {\n@@ -659,8 +665,9 @@ public class SortedBugCollection implements BugCollection {\n         // Emit element describing each reported bug pattern\n         for (String bugType : bugTypeSet) {\n             BugPattern bugPattern = DetectorFactoryCollection.instance().lookupBugPattern(bugType);\n-            if (bugPattern == null)\n+            if (bugPattern == null) {\n                 continue;\n+            }\n \n             XMLAttributeList attributeList = new XMLAttributeList();\n             attributeList.addAttribute(\"type\", bugType);\n@@ -686,7 +693,7 @@ public class SortedBugCollection implements BugCollection {\n     private void writeBugCodes(XMLOutput xmlOutput) throws IOException {\n         // Find bug codes reported\n         Set<String> bugCodeSet = new HashSet<String>();\n-        for (Iterator<BugInstance> i = iterator(); i.hasNext();) {\n+        for (Iterator<BugInstance> i = iterator(); i.hasNext(); ) {\n             BugInstance bugInstance = i.next();\n             String bugCode = bugInstance.getAbbrev();\n             if (bugCode != null) {\n@@ -697,8 +704,9 @@ public class SortedBugCollection implements BugCollection {\n         for (String bugCodeAbbrev : bugCodeSet) {\n             BugCode bugCode = DetectorFactoryCollection.instance().getBugCode(bugCodeAbbrev);\n             String bugCodeDescription = bugCode.getDescription();\n-            if (bugCodeDescription == null)\n+            if (bugCodeDescription == null) {\n                 continue;\n+            }\n \n             XMLAttributeList attributeList = new XMLAttributeList();\n             attributeList.addAttribute(\"abbrev\", bugCodeAbbrev);\n@@ -718,7 +726,7 @@ public class SortedBugCollection implements BugCollection {\n     private void writeBugCategories(XMLOutput xmlOutput) throws IOException {\n         // Find bug categories reported\n         Set<String> bugCatSet = new HashSet<String>();\n-        for (Iterator<BugInstance> i = iterator(); i.hasNext();) {\n+        for (Iterator<BugInstance> i = iterator(); i.hasNext(); ) {\n             BugInstance bugInstance = i.next();\n             BugPattern bugPattern = bugInstance.getBugPattern();\n             if (bugPattern != null) {\n@@ -728,8 +736,9 @@ public class SortedBugCollection implements BugCollection {\n         // Emit element describing each reported bug code\n         for (String bugCat : bugCatSet) {\n             String bugCatDescription = I18N.instance().getBugCategoryDescription(bugCat);\n-            if (bugCatDescription == null)\n+            if (bugCatDescription == null) {\n                 continue;\n+            }\n \n             XMLAttributeList attributeList = new XMLAttributeList();\n             attributeList.addAttribute(\"category\", bugCat);\n@@ -752,7 +761,7 @@ public class SortedBugCollection implements BugCollection {\n         xmlOutput.openTag(ERRORS_ELEMENT_NAME, attributeList);\n \n         // Emit Error elements describing analysis errors\n-        for (Iterator<AnalysisError> i = errorIterator(); i.hasNext();) {\n+        for (Iterator<AnalysisError> i = errorIterator(); i.hasNext(); ) {\n             AnalysisError error = i.next();\n             xmlOutput.openTag(ERROR_ELEMENT_NAME);\n \n@@ -799,8 +808,9 @@ public class SortedBugCollection implements BugCollection {\n     }\n \n     private void checkInputStream(@WillNotClose InputStream in) throws IOException {\n-        if (!in.markSupported())\n+        if (!in.markSupported()) {\n             return;\n+        }\n \n         byte[] buf = new byte[200];\n         in.mark(buf.length);\n@@ -839,10 +849,8 @@ public class SortedBugCollection implements BugCollection {\n      * Clone all of the BugInstance objects in the source Collection and add\n      * them to the destination Collection.\n      *\n-     * @param dest\n-     *            the destination Collection\n-     * @param source\n-     *            the source Collection\n+     * @param dest   the destination Collection\n+     * @param source the source Collection\n      */\n     public static void cloneAll(Collection<BugInstance> dest, Collection<BugInstance> source) {\n         for (BugInstance obj : source) {\n@@ -856,8 +864,9 @@ public class SortedBugCollection implements BugCollection {\n     private static final class BoundedLinkedHashSet extends LinkedHashSet<AnalysisError> {\n         @Override\n         public boolean add(AnalysisError a) {\n-            if (this.size() > 1000)\n+            if (this.size() > 1000) {\n                 return false;\n+            }\n             return super.add(a);\n         }\n     }\n@@ -869,11 +878,13 @@ public class SortedBugCollection implements BugCollection {\n         public int compare(BugInstance lhs, BugInstance rhs) {\n             ClassAnnotation lca = lhs.getPrimaryClass();\n             ClassAnnotation rca = rhs.getPrimaryClass();\n-            if (lca == null || rca == null)\n+            if (lca == null || rca == null) {\n                 throw new IllegalStateException(\"null class annotation: \" + lca + \",\" + rca);\n+            }\n             int cmp = lca.getClassName().compareTo(rca.getClassName());\n-            if (cmp != 0)\n+            if (cmp != 0) {\n                 return cmp;\n+            }\n             return lhs.compareTo(rhs);\n         }\n \n@@ -884,15 +895,19 @@ public class SortedBugCollection implements BugCollection {\n         @Override\n         public int compare(BugInstance lhs, BugInstance rhs) {\n             int result = super.compare(lhs, rhs);\n-            if (result != 0)\n+            if (result != 0) {\n                 return result;\n+            }\n             long diff = lhs.getFirstVersion() - rhs.getFirstVersion();\n-            if (diff == 0)\n+            if (diff == 0) {\n                 diff = lhs.getLastVersion() - rhs.getLastVersion();\n-            if (diff < 0)\n+            }\n+            if (diff < 0) {\n                 return -1;\n-            if (diff > 0)\n+            }\n+            if (diff > 0) {\n                 return 1;\n+            }\n             return 0;\n         }\n \n@@ -960,8 +975,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Constructor. Creates an empty object given an existing ProjectStats.\n      *\n-     * @param projectStats\n-     *            the ProjectStats\n+     * @param projectStats the ProjectStats\n      */\n     public SortedBugCollection(ProjectStats projectStats) {\n         this(projectStats, MultiversionBugInstanceComparator.instance);\n@@ -974,10 +988,8 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Constructor. Creates an empty object given an existing ProjectStats.\n      *\n-     * @param projectStats\n-     *            the ProjectStats\n-     * @param comparator\n-     *            to use for sorting bug instances\n+     * @param projectStats the ProjectStats\n+     * @param comparator   to use for sorting bug instances\n      */\n     public SortedBugCollection(ProjectStats projectStats, Comparator<BugInstance> comparator) {\n         this(projectStats, comparator, new Project());\n@@ -1000,8 +1012,9 @@ public class SortedBugCollection implements BugCollection {\n \n     public boolean add(BugInstance bugInstance, boolean updateActiveTime) {\n         assert !bugsPopulated;\n-        if (bugsPopulated)\n+        if (bugsPopulated) {\n             AnalysisContext.logError(\"Bug collection marked as populated, but bugs added\", new RuntimeException());\n+        }\n         preciseHashOccurrenceNumbersAvailable = false;\n         if (updateActiveTime) {\n             bugInstance.setFirstVersion(sequence);\n@@ -1056,16 +1069,18 @@ public class SortedBugCollection implements BugCollection {\n     }\n \n     public void addMissingClass(String className) {\n-        if (className == null || className.length() == 0)\n+        if (className == null || className.length() == 0) {\n             return;\n+        }\n         if (className.startsWith(\"[\")) {\n             assert false : \"Bad class name \" + className;\n             return;\n         }\n-        if (className.endsWith(\";\"))\n+        if (className.endsWith(\";\")) {\n             addError(\"got signature rather than classname: \" + className, new IllegalArgumentException());\n-        else\n+        } else {\n             missingClassSet.add(className);\n+        }\n     }\n \n     public Iterator<AnalysisError> errorIterator() {\n@@ -1082,8 +1097,9 @@ public class SortedBugCollection implements BugCollection {\n \n     public BugInstance getMatching(BugInstance bugInstance) {\n         SortedSet<BugInstance> tailSet = bugSet.tailSet(bugInstance);\n-        if (tailSet.isEmpty())\n+        if (tailSet.isEmpty()) {\n             return null;\n+        }\n         BugInstance first = tailSet.first();\n         return bugInstance.equals(first) ? first : null;\n     }\n@@ -1117,9 +1133,11 @@ public class SortedBugCollection implements BugCollection {\n      */\n     @Deprecated\n     public BugInstance lookupFromUniqueId(String uniqueId) {\n-        for (BugInstance bug : bugSet)\n-            if (bug.getInstanceHash().equals(uniqueId))\n+        for (BugInstance bug : bugSet) {\n+            if (bug.getInstanceHash().equals(uniqueId)) {\n                 return bug;\n+            }\n+        }\n         return null;\n     }\n \n@@ -1173,8 +1191,9 @@ public class SortedBugCollection implements BugCollection {\n      */\n \n     public String getReleaseName() {\n-        if (releaseName == null)\n+        if (releaseName == null) {\n             return \"\";\n+        }\n         return releaseName;\n     }\n \n@@ -1221,8 +1240,9 @@ public class SortedBugCollection implements BugCollection {\n     }\n \n     public void trimAppVersions(long numberToRetain) {\n-        while (appVersionList.size() > numberToRetain)\n+        while (appVersionList.size() > numberToRetain) {\n             appVersionList.remove(appVersionList.size() - 1);\n+        }\n         sequence = appVersionList.size();\n \n     }\n@@ -1315,8 +1335,7 @@ public class SortedBugCollection implements BugCollection {\n     }\n \n     /**\n-     * @param withMessages\n-     *            The withMessages to set.\n+     * @param withMessages The withMessages to set.\n      */\n     public void setWithMessages(boolean withMessages) {\n         this.withMessages = withMessages;\n@@ -1336,11 +1355,14 @@ public class SortedBugCollection implements BugCollection {\n      * edu.umd.cs.findbugs.BugCollection#getAppVersionFromSequenceNumber(int)\n      */\n     public AppVersion getAppVersionFromSequenceNumber(long target) {\n-        for (AppVersion av : appVersionList)\n-            if (av.getSequenceNumber() == target)\n+        for (AppVersion av : appVersionList) {\n+            if (av.getSequenceNumber() == target) {\n                 return av;\n-        if (target == this.getSequenceNumber())\n+            }\n+        }\n+        if (target == this.getSequenceNumber()) {\n             return this.getCurrentAppVersion();\n+        }\n         return null;\n     }\n \n@@ -1351,10 +1373,12 @@ public class SortedBugCollection implements BugCollection {\n      * java.lang.String, int)\n      */\n     public BugInstance findBug(String instanceHash, String bugType, int lineNumber) {\n-        for (BugInstance bug : bugSet)\n+        for (BugInstance bug : bugSet) {\n             if (bug.getInstanceHash().equals(instanceHash) && bug.getBugPattern().getType().equals(bugType)\n-                    && bug.getPrimarySourceLineAnnotation().getStartLine() == lineNumber)\n+                && bug.getPrimarySourceLineAnnotation().getStartLine() == lineNumber) {\n                 return bug;\n+            }\n+        }\n         return null;\n     }\n \n@@ -1372,8 +1396,9 @@ public class SortedBugCollection implements BugCollection {\n     public InputStream progessMonitoredInputStream(File f, String msg) throws IOException {\n         InputStream in = new FileInputStream(f);\n         long length = f.length();\n-        if (length > Integer.MAX_VALUE)\n+        if (length > Integer.MAX_VALUE) {\n             throw new IllegalArgumentException(\"File \" + f + \" is too big at \" + length + \" bytes\");\n+        }\n         return wrapGzip(progressMonitoredInputStream(in, (int) length, msg), f);\n     }\n \n@@ -1384,11 +1409,13 @@ public class SortedBugCollection implements BugCollection {\n     }\n \n     public InputStream progressMonitoredInputStream(InputStream in, int length, String msg) {\n-        if (GraphicsEnvironment.isHeadless())\n+        if (GraphicsEnvironment.isHeadless()) {\n             return in;\n+        }\n         IGuiCallback guiCallback = project.getGuiCallback();\n-        if (guiCallback == null)\n+        if (guiCallback == null) {\n             return in;\n+        }\n         return guiCallback.getProgressMonitorInputStream(in, length, msg);\n     }\n \n@@ -1470,12 +1497,13 @@ public class SortedBugCollection implements BugCollection {\n     }\n \n     boolean bugsPopulated = false;\n+\n     /* (non-Javadoc)\n      * @see edu.umd.cs.findbugs.BugCollection#bugsPopulated()\n      */\n     public void bugsPopulated() {\n         bugsPopulated = true;\n-        \n+\n     }\n }\n \n",
            "diff_size": 157
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/119/SortedBugCollection.java\nindex 323d2bc0198..7267e5f465d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/119/SortedBugCollection.java\n@@ -54,13 +54,11 @@ import java.util.TreeSet;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.zip.GZIPInputStream;\n-\n import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n import javax.annotation.WillClose;\n import javax.annotation.WillNotClose;\n import javax.xml.transform.TransformerException;\n-\n import edu.umd.cs.findbugs.ba.AnalysisContext;\n import edu.umd.cs.findbugs.ba.MissingClassException;\n import edu.umd.cs.findbugs.charsets.UTF8;\n@@ -91,6 +89,7 @@ import org.xml.sax.helpers.XMLReaderFactory;\n  * @see BugInstance\n  * @author David Hovemeyer\n  */\n+\n public class SortedBugCollection implements BugCollection {\n     private static final Logger LOGGER = Logger.getLogger(SortedBugCollection.class.getName());\n \n@@ -117,6 +116,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * @return Returns the timeStartedLoading.\n      */\n+\n     public long getTimeStartedLoading() {\n         return timeStartedLoading;\n     }\n@@ -124,6 +124,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * @return Returns the timeFinishedLoading.\n      */\n+\n     public long getTimeFinishedLoading() {\n         return timeFinishedLoading;\n     }\n@@ -137,15 +138,16 @@ public class SortedBugCollection implements BugCollection {\n     public Project getProject() {\n         return project;\n     }\n-    \n-    public @CheckForNull Cloud getCloudLazily() {\n-        if (cloud != null && bugsPopulated) \n-           cloud.bugsPopulated();\n+\n+    public @CheckForNull\n+    Cloud getCloudLazily() {\n+        if (cloud != null && bugsPopulated)\n+            cloud.bugsPopulated();\n         return cloud;\n     }\n-        \n \n-    public @Nonnull Cloud getCloud() {\n+    public @Nonnull\n+    Cloud getCloud() {\n         if (shouldNotUsePlugin) {\n             return CloudFactory.getPlainCloud(this);\n         }\n@@ -159,11 +161,10 @@ public class SortedBugCollection implements BugCollection {\n                 LOGGER.log(Level.SEVERE, \"Could not load cloud plugin\", e);\n                 callback.showMessageDialog(\"Unable to connect to cloud: \" + e.getClass().getSimpleName() + \": \" + e.getMessage());\n                 if (CloudFactory.FAIL_ON_CLOUD_ERROR)\n-                    throw new IllegalStateException(\"Could not load FindBugs Cloud plugin - to avoid this message, \" +\n-                            \"set -D\" + CloudFactory.FAIL_ON_CLOUD_ERROR_PROP + \"=false\", e);\n+                    throw new IllegalStateException(\"Could not load FindBugs Cloud plugin - to avoid this message, \" + \"set -D\" + CloudFactory.FAIL_ON_CLOUD_ERROR_PROP + \"=false\",\n+                        e);\n                 cloud = CloudFactory.getPlainCloud(this);\n             }\n-            \n         }\n         if (bugsPopulated)\n             cloud.bugsPopulated();\n@@ -178,6 +179,7 @@ public class SortedBugCollection implements BugCollection {\n         this.applySuppressions = applySuppressions;\n     }\n \n+\n     private static final boolean REPORT_SUMMARY_HTML = SystemProperties.getBoolean(\"findbugs.report.SummaryHTML\");\n \n     public long getAnalysisTimestamp() {\n@@ -195,6 +197,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param collection\n      *            the Collection of BugInstances to add\n      */\n+\n     public void addAll(Collection<BugInstance> collection) {\n         for (BugInstance bug : collection) {\n             add(bug);\n@@ -210,6 +213,7 @@ public class SortedBugCollection implements BugCollection {\n      *            true if active time of added BugInstances should be updated to\n      *            match collection: false if not\n      */\n+\n     public void addAll(Collection<BugInstance> collection, boolean updateActiveTime) {\n         for (BugInstance warning : collection) {\n             add(warning, updateActiveTime);\n@@ -225,9 +229,9 @@ public class SortedBugCollection implements BugCollection {\n      * @return true if the BugInstance was added, or false if a matching\n      *         BugInstance was already in the BugCollection\n      */\n+\n     public boolean add(BugInstance bugInstance) {\n-        return add(bugInstance, \n-        \t\tbugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n+        return add(bugInstance, bugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n     }\n \n     /**\n@@ -236,6 +240,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param message\n      *            the error message\n      */\n+\n     public void addError(String message) {\n         addError(message, null);\n     }\n@@ -243,9 +248,9 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Get the current AppVersion.\n      */\n+\n     public AppVersion getCurrentAppVersion() {\n-        return new AppVersion(getSequenceNumber()).setReleaseName(getReleaseName()).setTimestamp(getTimestamp())\n-                .setNumClasses(getProjectStats().getNumClasses()).setCodeSize(getProjectStats().getCodeSize());\n+        return new AppVersion(getSequenceNumber()).setReleaseName(getReleaseName()).setTimestamp(getTimestamp()).setNumClasses(getProjectStats().getNumClasses()).setCodeSize(getProjectStats().getCodeSize());\n     }\n \n     /**\n@@ -255,6 +260,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param fileName\n      *            name of the file to read\n      */\n+\n     public void readXML(String fileName) throws IOException, DocumentException {\n         readXML(new File(fileName));\n     }\n@@ -266,6 +272,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param file\n      *            the file\n      */\n+\n     public void readXML(File file) throws IOException, DocumentException {\n         project.setCurrentWorkingDirectory(file.getParentFile());\n         dataSource = file.getAbsolutePath();\n@@ -284,6 +291,8 @@ public class SortedBugCollection implements BugCollection {\n      * @param e\n      * @return\n      */\n+\n+\n     private IOException newIOException(Object file, IOException e) {\n         IOException result = new IOException(\"Failing reading \" + file);\n         result.initCause(e);\n@@ -310,6 +319,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param in\n      *            the InputStream\n      */\n+\n     public void readXML(@WillClose InputStream in, File base) throws IOException, DocumentException {\n         try {\n             doReadXML(in, base);\n@@ -330,6 +340,7 @@ public class SortedBugCollection implements BugCollection {\n         doReadXML(reader, null);\n     }\n \n+\n     private void doReadXML(@WillClose InputStream in, @CheckForNull File base) throws IOException, DocumentException {\n         try {\n             checkInputStream(in);\n@@ -338,21 +349,19 @@ public class SortedBugCollection implements BugCollection {\n         } catch (RuntimeException e) {\n             in.close();\n             throw e;\n-        }catch (IOException e) {\n+        } catch (IOException e) {\n             in.close();\n             throw e;\n         }\n-\n     }\n \n+\n     private void doReadXML(@WillClose Reader reader, @CheckForNull File base) throws IOException, DocumentException {\n         timeStartedLoading = System.currentTimeMillis();\n-\n         SAXBugCollectionHandler handler = new SAXBugCollectionHandler(this, base);\n         Profiler profiler = getProjectStats().getProfiler();\n         profiler.start(handler.getClass());\n         try {\n-\n             XMLReader xr;\n             try {\n                 xr = XMLReaderFactory.createXMLReader();\n@@ -362,12 +371,10 @@ public class SortedBugCollection implements BugCollection {\n             }\n             xr.setContentHandler(handler);\n             xr.setErrorHandler(handler);\n-\n             xr.parse(new InputSource(reader));\n         } catch (SAXParseException e) {\n             if (base != null)\n-                throw new DocumentException(\"Parse error at line \" + e.getLineNumber() + \" : \" + e.getColumnNumber() + \" of \"\n-                        + base, e);\n+                throw new DocumentException(\"Parse error at line \" + e.getLineNumber() + \" : \" + e.getColumnNumber() + \" of \" + base, e);\n             throw new DocumentException(\"Parse error at line \" + e.getLineNumber() + \" : \" + e.getColumnNumber(), e);\n         } catch (SAXException e) {\n             // FIXME: throw SAXException from method?\n@@ -384,7 +391,6 @@ public class SortedBugCollection implements BugCollection {\n         project.setModified(false);\n     }\n \n-\n     public void writeXML(OutputStream out) throws IOException {\n         writeXML(UTF8.writer(out));\n     }\n@@ -394,6 +400,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param fileName\n      *            the file to write to\n      */\n+\n     public void writeXML(String fileName) throws IOException {\n         BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(fileName));\n         writeXML(out);\n@@ -405,6 +412,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param file\n      *            the file to write to\n      */\n+\n     public void writeXML(File file) throws IOException {\n         BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n         writeXML(out);\n@@ -415,20 +423,19 @@ public class SortedBugCollection implements BugCollection {\n      *\n      * @return the Document representing the BugCollection as a dom4j tree\n      */\n+\n     public Document toDocument() {\n         // if (project == null) throw new NullPointerException(\"No project\");\n         assert project != null;\n-\n         DocumentFactory docFactory = new DocumentFactory();\n         Document document = docFactory.createDocument();\n         Dom4JXMLOutput treeBuilder = new Dom4JXMLOutput(document);\n-\n         try {\n             writeXML(treeBuilder);\n         } catch (IOException e) {\n             // Can't happen\n-        }\n \n+        }\n         return document;\n     }\n \n@@ -439,13 +446,12 @@ public class SortedBugCollection implements BugCollection {\n      * @param out\n      *            the OutputStream to write to\n      */\n+\n     public void writeXML(@WillClose Writer out) throws IOException {\n         assert project != null;\n         bugsPopulated();\n         XMLOutput xmlOutput;\n         // if (project == null) throw new NullPointerException(\"No project\");\n-        \n-\n         if (withMessages) {\n             Cloud cloud = getCloud();\n             cloud.bugsPopulated();\n@@ -460,22 +466,13 @@ public class SortedBugCollection implements BugCollection {\n         } else {\n             xmlOutput = new OutputStreamXMLOutput(out);\n         }\n-\n         writeXML(xmlOutput);\n     }\n \n     public void writePrologue(XMLOutput xmlOutput) throws IOException {\n         xmlOutput.beginDocument();\n-        xmlOutput.openTag(\n-                ROOT_ELEMENT_NAME,\n-                new XMLAttributeList().addAttribute(\"version\", analysisVersion)\n-                        .addAttribute(\"sequence\", String.valueOf(getSequenceNumber()))\n-                        .addAttribute(\"timestamp\", String.valueOf(getTimestamp()))\n-                        .addAttribute(\"analysisTimestamp\", String.valueOf(getAnalysisTimestamp()))\n-\n-                        .addAttribute(\"release\", getReleaseName()));\n+        xmlOutput.openTag(ROOT_ELEMENT_NAME, new XMLAttributeList().addAttribute(\"version\", analysisVersion).addAttribute(\"sequence\", String.valueOf(getSequenceNumber())).addAttribute(\"timestamp\", String.valueOf(getTimestamp())).addAttribute(\"analysisTimestamp\", String.valueOf(getAnalysisTimestamp())).addAttribute(\"release\", getReleaseName()));\n         project.writeXML(xmlOutput, null, this);\n-\n     }\n \n     // private String getQuickInstanceHash(BugInstance bugInstance) {\n@@ -503,21 +500,17 @@ public class SortedBugCollection implements BugCollection {\n             return;\n         invalidateHashes();\n         MessageDigest digest = Util.getMD5Digest();\n-\n         HashMap<String, Integer> seen = new HashMap<String, Integer>();\n-\n         for (BugInstance bugInstance : getCollection()) {\n             String hash = bugInstance.getInstanceHash();\n             if (hash == null) {\n                 hash = bugInstance.getInstanceKey();\n-\n                 try {\n                     byte[] data = digest.digest(hash.getBytes(\"UTF-8\"));\n                     hash = new BigInteger(1, data).toString(16);\n                 } catch (UnsupportedEncodingException e) {\n                     throw new IllegalStateException(e);\n                 }\n-\n                 bugInstance.setInstanceHash(hash);\n             }\n             Integer count = seen.get(hash);\n@@ -529,6 +522,7 @@ public class SortedBugCollection implements BugCollection {\n                 seen.put(hash, count + 1);\n             }\n         }\n+\n         for (BugInstance bugInstance : getCollection())\n             bugInstance.setInstanceOccurrenceMax(seen.get(bugInstance.getInstanceHash()));\n         preciseHashOccurrenceNumbersAvailable = true;\n@@ -546,6 +540,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param xmlOutput\n      *            the XMLOutput object\n      */\n+\n     public void writeXML(@WillClose XMLOutput xmlOutput) throws IOException {\n         assert project != null;\n         try {\n@@ -559,7 +554,6 @@ public class SortedBugCollection implements BugCollection {\n                         commonBase = s;\n                     else\n                         commonBase = commonBase.substring(0, commonPrefix(commonBase, s));\n-\n                 }\n                 if (commonBase != null && commonBase.length() > 0) {\n                     if (commonBase.indexOf(\"/./\") > 0)\n@@ -576,9 +570,7 @@ public class SortedBugCollection implements BugCollection {\n             for (BugInstance bugInstance : getCollection())\n                 if (!applySuppressions || !project.getSuppressionFilter().match(bugInstance))\n                     bugInstance.writeXML(xmlOutput, this, withMessages);\n-\n             writeEpilogue(xmlOutput);\n-\n         } finally {\n             xmlOutput.finish();\n             SourceLineAnnotation.clearGenerateRelativeSource();\n@@ -603,7 +595,6 @@ public class SortedBugCollection implements BugCollection {\n         // Errors, missing classes\n         if (!minimalXML)\n             emitErrors(xmlOutput);\n-\n         if (!earlyStats && !minimalXML) {\n             // Statistics\n             getProjectStats().writeXML(xmlOutput, withMessages);\n@@ -642,10 +633,10 @@ public class SortedBugCollection implements BugCollection {\n                 xmlOutput.closeTag(SUMMARY_HTML_ELEMENT_NAME);\n             }\n         }\n-\n         xmlOutput.closeTag(ROOT_ELEMENT_NAME);\n     }\n \n+\n     private void writeBugPatterns(XMLOutput xmlOutput) throws IOException {\n         // Find bug types reported\n         Set<String> bugTypeSet = new HashSet<String>();\n@@ -657,11 +648,11 @@ public class SortedBugCollection implements BugCollection {\n             }\n         }\n         // Emit element describing each reported bug pattern\n+\n         for (String bugType : bugTypeSet) {\n             BugPattern bugPattern = DetectorFactoryCollection.instance().lookupBugPattern(bugType);\n             if (bugPattern == null)\n                 continue;\n-\n             XMLAttributeList attributeList = new XMLAttributeList();\n             attributeList.addAttribute(\"type\", bugType);\n             attributeList.addAttribute(\"abbrev\", bugPattern.getAbbrev());\n@@ -670,19 +661,17 @@ public class SortedBugCollection implements BugCollection {\n                 attributeList.addAttribute(\"cweid\", Integer.toString(bugPattern.getCWEid()));\n             }\n             xmlOutput.openTag(\"BugPattern\", attributeList);\n-\n             xmlOutput.openTag(\"ShortDescription\");\n             xmlOutput.writeText(bugPattern.getShortDescription());\n             xmlOutput.closeTag(\"ShortDescription\");\n-\n             xmlOutput.openTag(\"Details\");\n             xmlOutput.writeCDATA(bugPattern.getDetailText());\n             xmlOutput.closeTag(\"Details\");\n-\n             xmlOutput.closeTag(\"BugPattern\");\n         }\n     }\n \n+\n     private void writeBugCodes(XMLOutput xmlOutput) throws IOException {\n         // Find bug codes reported\n         Set<String> bugCodeSet = new HashSet<String>();\n@@ -694,27 +683,26 @@ public class SortedBugCollection implements BugCollection {\n             }\n         }\n         // Emit element describing each reported bug code\n+\n         for (String bugCodeAbbrev : bugCodeSet) {\n             BugCode bugCode = DetectorFactoryCollection.instance().getBugCode(bugCodeAbbrev);\n             String bugCodeDescription = bugCode.getDescription();\n             if (bugCodeDescription == null)\n                 continue;\n-\n             XMLAttributeList attributeList = new XMLAttributeList();\n             attributeList.addAttribute(\"abbrev\", bugCodeAbbrev);\n             if (bugCode.getCWEid() != 0) {\n                 attributeList.addAttribute(\"cweid\", Integer.toString(bugCode.getCWEid()));\n             }\n             xmlOutput.openTag(\"BugCode\", attributeList);\n-\n             xmlOutput.openTag(\"Description\");\n             xmlOutput.writeText(bugCodeDescription);\n             xmlOutput.closeTag(\"Description\");\n-\n             xmlOutput.closeTag(\"BugCode\");\n         }\n     }\n \n+\n     private void writeBugCategories(XMLOutput xmlOutput) throws IOException {\n         // Find bug categories reported\n         Set<String> bugCatSet = new HashSet<String>();\n@@ -726,24 +714,22 @@ public class SortedBugCollection implements BugCollection {\n             }\n         }\n         // Emit element describing each reported bug code\n+\n         for (String bugCat : bugCatSet) {\n             String bugCatDescription = I18N.instance().getBugCategoryDescription(bugCat);\n             if (bugCatDescription == null)\n                 continue;\n-\n             XMLAttributeList attributeList = new XMLAttributeList();\n             attributeList.addAttribute(\"category\", bugCat);\n-\n             xmlOutput.openTag(\"BugCategory\", attributeList);\n-\n             xmlOutput.openTag(\"Description\");\n             xmlOutput.writeText(bugCatDescription);\n             xmlOutput.closeTag(\"Description\");\n-\n             xmlOutput.closeTag(\"BugCategory\");\n         }\n     }\n \n+\n     private void emitErrors(XMLOutput xmlOutput) throws IOException {\n         // System.err.println(\"Writing errors to XML output\");\n         XMLAttributeList attributeList = new XMLAttributeList();\n@@ -755,16 +741,13 @@ public class SortedBugCollection implements BugCollection {\n         for (Iterator<AnalysisError> i = errorIterator(); i.hasNext();) {\n             AnalysisError error = i.next();\n             xmlOutput.openTag(ERROR_ELEMENT_NAME);\n-\n             xmlOutput.openTag(ERROR_MESSAGE_ELEMENT_NAME);\n             xmlOutput.writeText(error.getMessage());\n             xmlOutput.closeTag(ERROR_MESSAGE_ELEMENT_NAME);\n-\n             if (error.getExceptionMessage() != null) {\n                 xmlOutput.openTag(ERROR_EXCEPTION_ELEMENT_NAME);\n                 xmlOutput.writeText(error.getExceptionMessage());\n                 xmlOutput.closeTag(ERROR_EXCEPTION_ELEMENT_NAME);\n-\n                 String stackTrace[] = error.getStackTrace();\n                 if (stackTrace != null) {\n                     for (String aStackTrace : stackTrace) {\n@@ -773,12 +756,10 @@ public class SortedBugCollection implements BugCollection {\n                         xmlOutput.closeTag(ERROR_STACK_TRACE_ELEMENT_NAME);\n                     }\n                 }\n-\n                 if (false && error.getNestedExceptionMessage() != null) {\n                     xmlOutput.openTag(ERROR_EXCEPTION_ELEMENT_NAME);\n                     xmlOutput.writeText(error.getNestedExceptionMessage());\n                     xmlOutput.closeTag(ERROR_EXCEPTION_ELEMENT_NAME);\n-\n                     stackTrace = error.getNestedStackTrace();\n                     if (stackTrace != null) {\n                         for (String aStackTrace : stackTrace) {\n@@ -794,19 +775,16 @@ public class SortedBugCollection implements BugCollection {\n \n         // Emit missing classes\n         XMLOutputUtil.writeElementList(xmlOutput, MISSING_CLASS_ELEMENT_NAME, missingClassIterator());\n-\n         xmlOutput.closeTag(ERRORS_ELEMENT_NAME);\n     }\n \n+\n     private void checkInputStream(@WillNotClose InputStream in) throws IOException {\n         if (!in.markSupported())\n             return;\n-\n         byte[] buf = new byte[200];\n         in.mark(buf.length);\n-\n         int numRead = 0;\n-\n         boolean isEOF = false;\n         while (numRead < buf.length && !isEOF) {\n             int n = in.read(buf, numRead, buf.length - numRead);\n@@ -816,9 +794,7 @@ public class SortedBugCollection implements BugCollection {\n                 numRead += n;\n             }\n         }\n-\n         in.reset();\n-\n         BufferedReader reader = new BufferedReader(Util.getReader(new ByteArrayInputStream(buf)));\n         try {\n             String line;\n@@ -830,9 +806,7 @@ public class SortedBugCollection implements BugCollection {\n         } finally {\n             reader.close();\n         }\n-\n         throw new IOException(\"XML does not contain saved bug data\");\n-\n     }\n \n     /**\n@@ -844,6 +818,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param source\n      *            the source Collection\n      */\n+\n     public static void cloneAll(Collection<BugInstance> dest, Collection<BugInstance> source) {\n         for (BugInstance obj : source) {\n             dest.add((BugInstance) obj.clone());\n@@ -853,6 +828,8 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * @author pugh\n      */\n+\n+\n     private static final class BoundedLinkedHashSet extends LinkedHashSet<AnalysisError> {\n         @Override\n         public boolean add(AnalysisError a) {\n@@ -860,11 +837,11 @@ public class SortedBugCollection implements BugCollection {\n                 return false;\n             return super.add(a);\n         }\n+\n     }\n \n     public static class BugInstanceComparator implements Comparator<BugInstance> {\n-        private BugInstanceComparator() {\n-        }\n+        private BugInstanceComparator() {}\n \n         public int compare(BugInstance lhs, BugInstance rhs) {\n             ClassAnnotation lca = lhs.getPrimaryClass();\n@@ -878,6 +855,7 @@ public class SortedBugCollection implements BugCollection {\n         }\n \n         public static final BugInstanceComparator instance = new BugInstanceComparator();\n+\n     }\n \n     public static class MultiversionBugInstanceComparator extends BugInstanceComparator {\n@@ -899,6 +877,7 @@ public class SortedBugCollection implements BugCollection {\n         public static final MultiversionBugInstanceComparator instance = new MultiversionBugInstanceComparator();\n     }\n \n+\n     private final Comparator<BugInstance> comparator;\n \n     private final TreeSet<BugInstance> bugSet;\n@@ -913,6 +892,7 @@ public class SortedBugCollection implements BugCollection {\n     private final ProjectStats projectStats;\n \n     // private Map<String, ClassHash> classHashMap;\n+\n     private final Map<String, ClassFeatureSet> classFeatureSetMap;\n \n     private final List<AppVersion> appVersionList;\n@@ -922,18 +902,22 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Sequence number of the most-recently analyzed version of the code.\n      */\n+\n     private long sequence;\n \n     /**\n      * Release name of the analyzed application.\n      */\n+\n     private String releaseName;\n \n     /**\n      * Current analysis timestamp.\n      */\n+\n     private long timestamp;\n \n+\n     public SortedBugCollection(Project project) {\n         this(new ProjectStats(), MultiversionBugInstanceComparator.instance, project);\n     }\n@@ -946,6 +930,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Constructor. Creates an empty object.\n      */\n+\n     public SortedBugCollection() {\n         this(new ProjectStats());\n     }\n@@ -953,6 +938,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * Constructor. Creates an empty object.\n      */\n+\n     public SortedBugCollection(Comparator<BugInstance> comparator) {\n         this(new ProjectStats(), comparator);\n     }\n@@ -963,6 +949,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param projectStats\n      *            the ProjectStats\n      */\n+\n     public SortedBugCollection(ProjectStats projectStats) {\n         this(projectStats, MultiversionBugInstanceComparator.instance);\n     }\n@@ -979,6 +966,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param comparator\n      *            to use for sorting bug instances\n      */\n+\n     public SortedBugCollection(ProjectStats projectStats, Comparator<BugInstance> comparator) {\n         this(projectStats, comparator, new Project());\n     }\n@@ -998,6 +986,7 @@ public class SortedBugCollection implements BugCollection {\n         timestamp = -1L;\n     }\n \n+\n     public boolean add(BugInstance bugInstance, boolean updateActiveTime) {\n         assert !bugsPopulated;\n         if (bugsPopulated)\n@@ -1006,11 +995,11 @@ public class SortedBugCollection implements BugCollection {\n         if (updateActiveTime) {\n             bugInstance.setFirstVersion(sequence);\n         }\n-\n         invalidateHashes();\n         return bugSet.add(bugInstance);\n     }\n \n+\n     private void invalidateHashes() {\n         preciseHashOccurrenceNumbersAvailable = false;\n     }\n@@ -1101,7 +1090,6 @@ public class SortedBugCollection implements BugCollection {\n                 throw ioe;\n             }\n         }\n-\n         return summaryHTML;\n     }\n \n@@ -1115,6 +1103,7 @@ public class SortedBugCollection implements BugCollection {\n      * @see\n      * edu.umd.cs.findbugs.BugCollection#lookupFromUniqueId(java.lang.String)\n      */\n+\n     @Deprecated\n     public BugInstance lookupFromUniqueId(String uniqueId) {\n         for (BugInstance bug : bugSet)\n@@ -1133,7 +1122,6 @@ public class SortedBugCollection implements BugCollection {\n \n     public SortedBugCollection duplicate() {\n         SortedBugCollection dup = new SortedBugCollection((ProjectStats) projectStats.clone(), comparator, project.duplicate());\n-\n         SortedBugCollection.cloneAll(dup.bugSet, this.bugSet);\n         dup.errorList.addAll(this.errorList);\n         dup.missingClassSet.addAll(this.missingClassSet);\n@@ -1146,7 +1134,6 @@ public class SortedBugCollection implements BugCollection {\n         for (AppVersion appVersion : appVersionList) {\n             dup.appVersionList.add((AppVersion) appVersion.clone());\n         }\n-\n         return dup;\n     }\n \n@@ -1159,7 +1146,6 @@ public class SortedBugCollection implements BugCollection {\n     public void clearBugInstances() {\n         bugSet.clear();\n         invalidateHashes();\n-\n     }\n \n     public void clearMissingClasses() {\n@@ -1224,7 +1210,6 @@ public class SortedBugCollection implements BugCollection {\n         while (appVersionList.size() > numberToRetain)\n             appVersionList.remove(appVersionList.size() - 1);\n         sequence = appVersionList.size();\n-\n     }\n \n     /*\n@@ -1248,7 +1233,6 @@ public class SortedBugCollection implements BugCollection {\n         for (AppVersion appVersion : appVersionList) {\n             dup.appVersionList.add((AppVersion) appVersion.clone());\n         }\n-\n         return dup;\n     }\n \n@@ -1310,6 +1294,7 @@ public class SortedBugCollection implements BugCollection {\n      *\n      * @see edu.umd.cs.findbugs.BugCollection#clearClassFeatures()\n      */\n+\n     public void clearClassFeatures() {\n         classFeatureSetMap.clear();\n     }\n@@ -1318,6 +1303,7 @@ public class SortedBugCollection implements BugCollection {\n      * @param withMessages\n      *            The withMessages to set.\n      */\n+\n     public void setWithMessages(boolean withMessages) {\n         this.withMessages = withMessages;\n     }\n@@ -1325,6 +1311,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * @return Returns the withMessages.\n      */\n+\n     public boolean getWithMessages() {\n         return withMessages;\n     }\n@@ -1335,6 +1322,7 @@ public class SortedBugCollection implements BugCollection {\n      * @see\n      * edu.umd.cs.findbugs.BugCollection#getAppVersionFromSequenceNumber(int)\n      */\n+\n     public AppVersion getAppVersionFromSequenceNumber(long target) {\n         for (AppVersion av : appVersionList)\n             if (av.getSequenceNumber() == target)\n@@ -1350,10 +1338,10 @@ public class SortedBugCollection implements BugCollection {\n      * @see edu.umd.cs.findbugs.BugCollection#findBug(java.lang.String,\n      * java.lang.String, int)\n      */\n+\n     public BugInstance findBug(String instanceHash, String bugType, int lineNumber) {\n         for (BugInstance bug : bugSet)\n-            if (bug.getInstanceHash().equals(instanceHash) && bug.getBugPattern().getType().equals(bugType)\n-                    && bug.getPrimarySourceLineAnnotation().getStartLine() == lineNumber)\n+            if (bug.getInstanceHash().equals(instanceHash) && bug.getBugPattern().getType().equals(bugType) && bug.getPrimarySourceLineAnnotation().getStartLine() == lineNumber)\n                 return bug;\n         return null;\n     }\n@@ -1361,6 +1349,7 @@ public class SortedBugCollection implements BugCollection {\n     /**\n      * @param version\n      */\n+\n     public void setAnalysisVersion(String version) {\n         this.analysisVersion = version;\n     }\n@@ -1404,7 +1393,6 @@ public class SortedBugCollection implements BugCollection {\n                 if (u.getPath().endsWith(\".gz\")) {\n                     return new GZIPInputStream(in);\n                 }\n-\n             }\n         } catch (IOException e) {\n             assert true;\n@@ -1427,6 +1415,7 @@ public class SortedBugCollection implements BugCollection {\n      *\n      * @see edu.umd.cs.findbugs.BugCollection#reinitializeCloud()\n      */\n+\n     public Cloud reinitializeCloud() {\n         Cloud oldCloud = cloud;\n         IGuiCallback callback = project.getGuiCallback();\n@@ -1457,14 +1446,15 @@ public class SortedBugCollection implements BugCollection {\n      *\n      * @see edu.umd.cs.findbugs.BugCollection#setMinimalXML(boolean)\n      */\n+\n     public void setMinimalXML(boolean minimalXML) {\n         this.minimalXML = minimalXML;\n-\n     }\n \n     /**\n      * @param b\n      */\n+\n     public void setDoNotUseCloud(boolean b) {\n         this.shouldNotUsePlugin = b;\n     }\n@@ -1473,10 +1463,8 @@ public class SortedBugCollection implements BugCollection {\n     /* (non-Javadoc)\n      * @see edu.umd.cs.findbugs.BugCollection#bugsPopulated()\n      */\n+\n     public void bugsPopulated() {\n         bugsPopulated = true;\n-        \n     }\n-}\n-\n-// vim:ts=4\n+}\n\\ No newline at end of file\n",
            "diff_size": 149
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/119/SortedBugCollection.java\nindex 323d2bc0198..00b0cf5935c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/119/SortedBugCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/119/SortedBugCollection.java\n@@ -226,8 +226,8 @@ public class SortedBugCollection implements BugCollection {\n      *         BugInstance was already in the BugCollection\n      */\n     public boolean add(BugInstance bugInstance) {\n-        return add(bugInstance, \n-        \t\tbugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n+        return add(bugInstance,\n+                bugInstance.getFirstVersion() == 0L && bugInstance.getLastVersion() == 0L);\n     }\n \n     /**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}