{
    "project_name": "GluuFederation-oxCore",
    "error_id": "133",
    "information": {
        "errors": [
            {
                "line": "61",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class AuthRequest {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n    private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n\n    static {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/133/AuthRequest.java\nindex 5853c342ad3..eab8b0e0973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/133/AuthRequest.java\n@@ -58,7 +58,7 @@ import org.xml.sax.InputSource;\n  */\n public class AuthRequest {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n     private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n \n     static {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/133/AuthRequest.java\nindex 5853c342ad3..060882a3924 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/133/AuthRequest.java\n@@ -58,7 +58,7 @@ import org.xml.sax.InputSource;\n  */\n public class AuthRequest {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n     private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n \n     static {\n@@ -76,7 +76,7 @@ public class AuthRequest {\n     }\n \n     public String getRequest(boolean useBase64, String assertionConsumerServiceUrl)\n-            throws ParserConfigurationException, XMLStreamException, IOException, TransformerException {\n+        throws ParserConfigurationException, XMLStreamException, IOException, TransformerException {\n         DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n         DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n \n@@ -212,8 +212,7 @@ public class AuthRequest {\n      * This will generate the proper Redirect Query String as input for signing\n      *\n      * @param samlRequest\n-     * @param relayState\n-     *            Optional\n+     * @param relayState  Optional\n      * @return\n      * @throws Exception\n      */\n@@ -242,8 +241,7 @@ public class AuthRequest {\n      * Redirect signature requirment.\n      *\n      * @param samlRequest\n-     * @param relayState\n-     *            optional\n+     * @param relayState  optional\n      * @return\n      * @throws Exception\n      */\n@@ -272,8 +270,7 @@ public class AuthRequest {\n      * you can append to your IDP sso URL.\n      *\n      * @param assertionConsumerServiceUrl\n-     * @param relayState\n-     *            optional\n+     * @param relayState                  optional\n      * @return\n      * @throws Exception\n      */\n@@ -301,8 +298,7 @@ public class AuthRequest {\n      * for a POST SAML AuthnRequest.\n      *\n      * @param assertionConsumerServiceUrl\n-     * @param relayState\n-     *            optional\n+     * @param relayState                  optional\n      * @return\n      * @throws WSSecurityException\n      * @throws SecurityException\n@@ -314,15 +310,15 @@ public class AuthRequest {\n      * @throws ParserConfigurationException\n      */\n     public String getEnvelopedSignatureRequest(String assertionConsumerServiceUrl, String relayState)\n-            throws WSSecurityException, SecurityException, MarshallingException, org.opensaml.xml.signature.SignatureException, IOException,\n-            TransformerException, XMLStreamException, ParserConfigurationException {\n+        throws WSSecurityException, SecurityException, MarshallingException, org.opensaml.xml.signature.SignatureException, IOException,\n+        TransformerException, XMLStreamException, ParserConfigurationException {\n         String samlRequest = getRequest(false, assertionConsumerServiceUrl);\n         AuthnRequest authReq = (AuthnRequest) string2XMLObject(samlRequest);\n \n         Credential credential = this.samlSettings.getCredential();\n         org.opensaml.xml.signature.Signature signature = (org.opensaml.xml.signature.Signature) Configuration.getBuilderFactory()\n-                .getBuilder(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME)\n-                .buildObject(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME);\n+            .getBuilder(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME)\n+            .buildObject(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME);\n         signature.setSigningCredential(credential);\n         signature.setSignatureAlgorithm(this.samlSettings.getSigAlgUrl());\n         signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "318",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/133/AuthRequest.java\nindex 5853c342ad3..97d6fd4dde1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/133/AuthRequest.java\n@@ -58,8 +58,9 @@ import org.xml.sax.InputSource;\n  */\n public class AuthRequest {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n-    private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n+\n+private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n \n     static {\n         SIMPLE_DATA_FORMAT.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n@@ -314,8 +315,7 @@ public class AuthRequest {\n      * @throws ParserConfigurationException\n      */\n     public String getEnvelopedSignatureRequest(String assertionConsumerServiceUrl, String relayState)\n-            throws WSSecurityException, SecurityException, MarshallingException, org.opensaml.xml.signature.SignatureException, IOException,\n-            TransformerException, XMLStreamException, ParserConfigurationException {\n+            throws WSSecurityException, SecurityException, MarshallingException, org.opensaml.xml.signature.SignatureException, IOException, TransformerException, XMLStreamException, ParserConfigurationException {\n         String samlRequest = getRequest(false, assertionConsumerServiceUrl);\n         AuthnRequest authReq = (AuthnRequest) string2XMLObject(samlRequest);\n \n@@ -393,4 +393,4 @@ public class AuthRequest {\n         return base64;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "300",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 303).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "304",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 271).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/133/AuthRequest.java\nindex 5853c342ad3..118ca5d0314 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/133/AuthRequest.java\n@@ -16,7 +16,6 @@ import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.TimeZone;\n import java.util.UUID;\n-\n import javax.xml.bind.DatatypeConverter;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n@@ -30,7 +29,6 @@ import javax.xml.transform.TransformerException;\n import javax.xml.transform.TransformerFactory;\n import javax.xml.transform.dom.DOMSource;\n import javax.xml.transform.stream.StreamResult;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.apache.ws.security.WSSecurityException;\n import org.apache.ws.security.saml.ext.OpenSAMLUtil;\n@@ -56,9 +54,11 @@ import org.xml.sax.InputSource;\n  *\n  * @author Yuriy Movchan Date: 24/04/2014\n  */\n+\n+\n public class AuthRequest {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n     private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n \n     static {\n@@ -75,11 +75,9 @@ public class AuthRequest {\n         this.issueInstant = SIMPLE_DATA_FORMAT.format(new Date());\n     }\n \n-    public String getRequest(boolean useBase64, String assertionConsumerServiceUrl)\n-            throws ParserConfigurationException, XMLStreamException, IOException, TransformerException {\n+    public String getRequest(boolean useBase64, String assertionConsumerServiceUrl) throws ParserConfigurationException, XMLStreamException, IOException, TransformerException {\n         DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();\n         DocumentBuilder docBuilder = docFactory.newDocumentBuilder();\n-\n         Document doc = docBuilder.newDocument();\n \n         // Add AuthnRequest\n@@ -90,48 +88,43 @@ public class AuthRequest {\n         authnRequestElement.setAttribute(\"ProtocolBinding\", \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\");\n         authnRequestElement.setAttribute(\"Destination\", this.samlSettings.getIdpSsoTargetUrl());\n         authnRequestElement.setAttribute(\"AssertionConsumerServiceURL\", assertionConsumerServiceUrl);\n-\n         doc.appendChild(authnRequestElement);\n \n         // Add AuthnRequest\n+\n         Element issuerElement = doc.createElementNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"saml:Issuer\");\n         issuerElement.appendChild(doc.createTextNode(this.samlSettings.getIssuer()));\n-\n         authnRequestElement.appendChild(issuerElement);\n \n         // Add NameIDPolicy\n+\n         Element nameIDPolicyElement = doc.createElementNS(\"urn:oasis:names:tc:SAML:2.0:protocol\", \"samlp:NameIDPolicy\");\n         nameIDPolicyElement.setAttribute(\"Format\", this.samlSettings.getNameIdentifierFormat());\n         nameIDPolicyElement.setAttribute(\"AllowCreate\", \"true\");\n-\n         authnRequestElement.appendChild(nameIDPolicyElement);\n-\n         if (this.samlSettings.isUseRequestedAuthnContext()) {\n             // Add RequestedAuthnContext\n             Element requestedAuthnContextElement = doc.createElementNS(\"urn:oasis:names:tc:SAML:2.0:protocol\", \"samlp:RequestedAuthnContext\");\n             requestedAuthnContextElement.setAttribute(\"Comparison\", \"exact\");\n-\n             authnRequestElement.appendChild(requestedAuthnContextElement);\n \n             // Add AuthnContextClassRef\n+\n             Element authnContextClassRefElement = doc.createElementNS(\"urn:oasis:names:tc:SAML:2.0:assertion\", \"saml:AuthnContextClassRef\");\n             authnContextClassRefElement.appendChild(doc.createTextNode(\"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\"));\n-\n             requestedAuthnContextElement.appendChild(authnContextClassRefElement);\n         }\n \n         // Convert the content into xml\n+\n         TransformerFactory transformerFactory = TransformerFactory.newInstance();\n         Transformer transformer = transformerFactory.newTransformer();\n         transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n \n         DOMSource source = new DOMSource(doc);\n-\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         StreamResult result = new StreamResult(baos);\n-\n         transformer.transform(source, result);\n-\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Genereated Saml Request \" + new String(baos.toByteArray(), \"UTF-8\"));\n         }\n@@ -153,46 +146,34 @@ public class AuthRequest {\n \n     public String getStreamedRequest(boolean useBase64) throws XMLStreamException, IOException {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-\n         XMLOutputFactory factory = XMLOutputFactory.newInstance();\n         XMLStreamWriter writer = factory.createXMLStreamWriter(baos);\n-\n         writer.writeStartElement(\"samlp\", \"AuthnRequest\", \"urn:oasis:names:tc:SAML:2.0:protocol\");\n         writer.writeNamespace(\"samlp\", \"urn:oasis:names:tc:SAML:2.0:protocol\");\n-\n         writer.writeAttribute(\"ID\", id);\n         writer.writeAttribute(\"Version\", \"2.0\");\n         writer.writeAttribute(\"IssueInstant\", this.issueInstant);\n         writer.writeAttribute(\"ProtocolBinding\", \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\");\n         writer.writeAttribute(\"AssertionConsumerServiceURL\", this.samlSettings.getAssertionConsumerServiceUrl());\n-\n         writer.writeStartElement(\"saml\", \"Issuer\", \"urn:oasis:names:tc:SAML:2.0:assertion\");\n         writer.writeNamespace(\"saml\", \"urn:oasis:names:tc:SAML:2.0:assertion\");\n         writer.writeCharacters(this.samlSettings.getIssuer());\n         writer.writeEndElement();\n-\n         writer.writeStartElement(\"samlp\", \"NameIDPolicy\", \"urn:oasis:names:tc:SAML:2.0:protocol\");\n         writer.writeNamespace(\"samlp\", \"urn:oasis:names:tc:SAML:2.0:protocol\");\n-\n         writer.writeAttribute(\"Format\", this.samlSettings.getNameIdentifierFormat());\n         writer.writeAttribute(\"AllowCreate\", \"true\");\n         writer.writeEndElement();\n-\n         writer.writeStartElement(\"samlp\", \"RequestedAuthnContext\", \"urn:oasis:names:tc:SAML:2.0:protocol\");\n         writer.writeNamespace(\"samlp\", \"urn:oasis:names:tc:SAML:2.0:protocol\");\n-\n         writer.writeAttribute(\"Comparison\", \"exact\");\n-\n         writer.writeStartElement(\"saml\", \"AuthnContextClassRef\", \"urn:oasis:names:tc:SAML:2.0:assertion\");\n         writer.writeNamespace(\"saml\", \"urn:oasis:names:tc:SAML:2.0:assertion\");\n         writer.writeCharacters(\"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport\");\n         writer.writeEndElement();\n-\n         writer.writeEndElement();\n-\n         writer.writeEndElement();\n         writer.flush();\n-\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Genereated Saml Request \" + new String(baos.toByteArray(), \"UTF-8\"));\n         }\n@@ -217,6 +198,7 @@ public class AuthRequest {\n      * @return\n      * @throws Exception\n      */\n+\n     private String generateQueryString(String samlRequest, String relayState) throws Exception {\n         if (null == samlRequest || null == this.samlSettings.getSigAlgUrl()) {\n             throw new Exception(\"SAMLRequest or sigAlgUrl cannot be null\");\n@@ -227,6 +209,7 @@ public class AuthRequest {\n         if (null != relayState && 0 < relayState.length()) {\n             buf.append(\"&RelayState=\").append(URLEncoder.encode(relayState, \"UTF-8\"));\n         }\n+\n         buf.append(\"&SigAlg=\").append(URLEncoder.encode(this.samlSettings.getSigAlgUrl(), \"UTF-8\").trim());\n \n         String bf = buf.toString();\n@@ -247,8 +230,8 @@ public class AuthRequest {\n      * @return\n      * @throws Exception\n      */\n-    public String signRequest(String samlRequest, String relayState) throws Exception {\n \n+    public String signRequest(String samlRequest, String relayState) throws Exception {\n         String queryString = generateQueryString(samlRequest, relayState);\n         if (null != queryString && 0 < queryString.length()) {\n             // text to bytes\n@@ -259,8 +242,8 @@ public class AuthRequest {\n             signature.initSign(this.samlSettings.getPrivateKey());\n             signature.update(data);\n             byte[] signatureBytes = signature.sign();\n-\n             String b64 = org.opensaml.xml.util.Base64.encodeBytes(signatureBytes, org.opensaml.xml.util.Base64.DONT_BREAK_LINES);\n+\n             return b64;\n         } else {\n             return null;\n@@ -277,22 +260,22 @@ public class AuthRequest {\n      * @return\n      * @throws Exception\n      */\n+\n     public String getRedirectRequestSignedQueryParams(String assertionConsumerServiceUrl, String relayState) throws Exception {\n         String samlRequest = getRequest(true, assertionConsumerServiceUrl);\n         String b64 = signRequest(samlRequest, relayState);\n         String qry = generateQueryString(samlRequest, relayState);\n         String ret = qry + \"&Signature=\" + URLEncoder.encode(b64, \"UTF-8\").trim();\n+\n         return ret;\n     }\n \n     public boolean verifyRedirectSignature(String samlRequest, String relayState, String sig) throws Exception {\n         byte[] v = DatatypeConverter.parseBase64Binary(sig);\n         String queryString = generateQueryString(samlRequest, relayState);\n-\n         Signature signature = Signature.getInstance(this.samlSettings.getSigAlg());\n         signature.initVerify(this.samlSettings.getCertificate().getPublicKey());\n         signature.update(queryString.getBytes());\n-\n         return signature.verify(v);\n     }\n \n@@ -313,16 +296,12 @@ public class AuthRequest {\n      * @throws XMLStreamException\n      * @throws ParserConfigurationException\n      */\n-    public String getEnvelopedSignatureRequest(String assertionConsumerServiceUrl, String relayState)\n-            throws WSSecurityException, SecurityException, MarshallingException, org.opensaml.xml.signature.SignatureException, IOException,\n-            TransformerException, XMLStreamException, ParserConfigurationException {\n+\n+    public String getEnvelopedSignatureRequest(String assertionConsumerServiceUrl, String relayState) throws WSSecurityException, SecurityException, MarshallingException, org.opensaml.xml.signature.SignatureException, IOException, TransformerException, XMLStreamException, ParserConfigurationException {\n         String samlRequest = getRequest(false, assertionConsumerServiceUrl);\n         AuthnRequest authReq = (AuthnRequest) string2XMLObject(samlRequest);\n-\n         Credential credential = this.samlSettings.getCredential();\n-        org.opensaml.xml.signature.Signature signature = (org.opensaml.xml.signature.Signature) Configuration.getBuilderFactory()\n-                .getBuilder(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME)\n-                .buildObject(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME);\n+        org.opensaml.xml.signature.Signature signature = (org.opensaml.xml.signature.Signature) Configuration.getBuilderFactory().getBuilder(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME).buildObject(org.opensaml.xml.signature.Signature.DEFAULT_ELEMENT_NAME);\n         signature.setSigningCredential(credential);\n         signature.setSignatureAlgorithm(this.samlSettings.getSigAlgUrl());\n         signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n@@ -335,7 +314,6 @@ public class AuthRequest {\n \n         String signedRequest = convertDocumentToString(authReq.getDOM().getOwnerDocument());\n         LOG.info(\"\\n\\n**************************\\nSigned Post AuthnRequest:\\n\" + signedRequest + \"\\n**************************\\n\\n\");\n-\n         return signedRequest;\n     }\n \n@@ -358,9 +336,12 @@ public class AuthRequest {\n             transformer = tf.newTransformer();\n             // below code to remove XML declaration\n             transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\n             StringWriter writer = new StringWriter();\n             transformer.transform(new DOMSource(doc), new StreamResult(writer));\n+\n             String output = writer.getBuffer().toString();\n+\n             return output;\n         } catch (TransformerException e) {\n             e.printStackTrace();\n@@ -372,15 +353,17 @@ public class AuthRequest {\n     protected static Document convertStringToDocument(String xmlStr) {\n         DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n         DocumentBuilder builder;\n-\n         try {\n             factory.setNamespaceAware(true);\n             builder = factory.newDocumentBuilder();\n+\n             Document doc = builder.parse(new InputSource(new StringReader(xmlStr)));\n+\n             return doc;\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n+\n         return null;\n     }\n \n@@ -388,9 +371,10 @@ public class AuthRequest {\n         if (compress) {\n             val = CompressionHelper.deflate(val, true);\n         }\n+\n         String base64 = Base64.encodeBase64String(val);\n \n         return base64;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/133/AuthRequest.java\nindex 5853c342ad3..eab8b0e0973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/133/AuthRequest.java\n@@ -58,7 +58,7 @@ import org.xml.sax.InputSource;\n  */\n public class AuthRequest {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n     private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n \n     static {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/133/AuthRequest.java\nindex 5853c342ad3..eab8b0e0973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/133/AuthRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/133/AuthRequest.java\n@@ -58,7 +58,7 @@ import org.xml.sax.InputSource;\n  */\n public class AuthRequest {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthRequest.class);\n     private static final SimpleDateFormat SIMPLE_DATA_FORMAT = new SimpleDateFormat(\"yyyy-MM-dd'T'H:mm:ss\");\n \n     static {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}