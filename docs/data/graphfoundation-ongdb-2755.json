{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2755",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2755/BoltMetrics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2755/BoltMetrics.java\nindex afd0c5be1b0..809659b879a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2755/BoltMetrics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2755/BoltMetrics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.metrics.source.db;\n \n import com.codahale.metrics.Gauge;\n@@ -31,165 +32,165 @@ import org.neo4j.kernel.monitoring.Monitors;\n \n import static com.codahale.metrics.MetricRegistry.name;\n \n-@Documented( \".Bolt Metrics\" )\n+@Documented(\".Bolt Metrics\")\n public class BoltMetrics extends LifecycleAdapter\n {\n-    private static final String NAME_PREFIX = \"neo4j.bolt\";\n-\n-    @Documented( \"The total number of Bolt sessions started since this instance started. This includes both \" +\n-                 \"succeeded and failed sessions (deprecated, use connections_opened instead).\" )\n-    public static final String SESSIONS_STARTED = name( NAME_PREFIX, \"sessions_started\" );\n-\n-    @Documented( \"The total number of Bolt connections opened since this instance started. This includes both \" +\n-            \"succeeded and failed connections.\" )\n-    public static final String CONNECTIONS_OPENED = name( NAME_PREFIX, \"connections_opened\" );\n-\n-    @Documented( \"The total number of Bolt connections closed since this instance started. This includes both \" +\n-            \"properly and abnormally ended connections.\" )\n-    public static final String CONNECTIONS_CLOSED = name( NAME_PREFIX, \"connections_closed\" );\n-\n-    @Documented( \"The total number of Bolt connections currently being executed.\" )\n-    public static final String CONNECTIONS_RUNNING = name( NAME_PREFIX, \"connections_running\" );\n-\n-    @Documented( \"The total number of Bolt connections sitting idle.\" )\n-    public static final String CONNECTIONS_IDLE = name( NAME_PREFIX, \"connections_idle\" );\n+  private static final String NAME_PREFIX = \"neo4j.bolt\";\n+\n+  @Documented(\"The total number of Bolt sessions started since this instance started. This includes both \" +\n+      \"succeeded and failed sessions (deprecated, use connections_opened instead).\")\n+  public static final String SESSIONS_STARTED = name(NAME_PREFIX, \"sessions_started\");\n+\n+  @Documented(\"The total number of Bolt connections opened since this instance started. This includes both \" +\n+      \"succeeded and failed connections.\")\n+  public static final String CONNECTIONS_OPENED = name(NAME_PREFIX, \"connections_opened\");\n+\n+  @Documented(\"The total number of Bolt connections closed since this instance started. This includes both \" +\n+      \"properly and abnormally ended connections.\")\n+  public static final String CONNECTIONS_CLOSED = name(NAME_PREFIX, \"connections_closed\");\n+\n+  @Documented(\"The total number of Bolt connections currently being executed.\")\n+  public static final String CONNECTIONS_RUNNING = name(NAME_PREFIX, \"connections_running\");\n+\n+  @Documented(\"The total number of Bolt connections sitting idle.\")\n+  public static final String CONNECTIONS_IDLE = name(NAME_PREFIX, \"connections_idle\");\n+\n+  @Documented(\"The total number of messages received via Bolt since this instance started.\")\n+  public static final String MESSAGES_RECIEVED = name(NAME_PREFIX, \"messages_received\");\n+\n+  @Documented(\"The total number of messages that began processing since this instance started. This is different \" +\n+      \"from messages received in that this counter tracks how many of the received messages have\" +\n+      \"been taken on by a worker thread.\")\n+  public static final String MESSAGES_STARTED = name(NAME_PREFIX, \"messages_started\");\n+\n+  @Documented(\"The total number of messages that completed processing since this instance started. This includes \" +\n+      \"successful, failed and ignored Bolt messages.\")\n+  public static final String MESSAGES_DONE = name(NAME_PREFIX, \"messages_done\");\n+\n+  @Documented(\"The total number of messages that failed processing since this instance started.\")\n+  public static final String MESSAGES_FAILED = name(NAME_PREFIX, \"messages_failed\");\n+\n+  @Documented(\"The accumulated time messages have spent waiting for a worker thread.\")\n+  public static final String TOTAL_QUEUE_TIME = name(NAME_PREFIX, \"accumulated_queue_time\");\n+\n+  @Documented(\"The accumulated time worker threads have spent processing messages.\")\n+  public static final String TOTAL_PROCESSING_TIME = name(NAME_PREFIX, \"accumulated_processing_time\");\n+\n+  private final MetricRegistry registry;\n+  private final Monitors monitors;\n+  private final BoltMetricsMonitor boltMonitor = new BoltMetricsMonitor();\n+\n+  public BoltMetrics(MetricRegistry registry, Monitors monitors)\n+  {\n+    this.registry = registry;\n+    this.monitors = monitors;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+    monitors.addMonitorListener(boltMonitor);\n+    registry.register(SESSIONS_STARTED, (Gauge<Long>) boltMonitor.connectionsOpened::get);\n+    registry.register(CONNECTIONS_OPENED, (Gauge<Long>) boltMonitor.connectionsOpened::get);\n+    registry.register(CONNECTIONS_CLOSED, (Gauge<Long>) boltMonitor.connectionsClosed::get);\n+    registry.register(CONNECTIONS_RUNNING, (Gauge<Long>) boltMonitor.connectionsActive::get);\n+    registry.register(CONNECTIONS_IDLE, (Gauge<Long>) boltMonitor.connectionsIdle::get);\n+    registry.register(MESSAGES_RECIEVED, (Gauge<Long>) boltMonitor.messagesReceived::get);\n+    registry.register(MESSAGES_STARTED, (Gauge<Long>) boltMonitor.messagesStarted::get);\n+    registry.register(MESSAGES_DONE, (Gauge<Long>) boltMonitor.messagesDone::get);\n+    registry.register(MESSAGES_FAILED, (Gauge<Long>) boltMonitor.messagesFailed::get);\n+    registry.register(TOTAL_QUEUE_TIME, (Gauge<Long>) boltMonitor.queueTime::get);\n+    registry.register(TOTAL_PROCESSING_TIME, (Gauge<Long>) boltMonitor.processingTime::get);\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    registry.remove(SESSIONS_STARTED);\n+    registry.remove(CONNECTIONS_OPENED);\n+    registry.remove(CONNECTIONS_CLOSED);\n+    registry.remove(CONNECTIONS_IDLE);\n+    registry.remove(CONNECTIONS_RUNNING);\n+    registry.remove(MESSAGES_RECIEVED);\n+    registry.remove(MESSAGES_STARTED);\n+    registry.remove(MESSAGES_DONE);\n+    registry.remove(MESSAGES_FAILED);\n+    registry.remove(TOTAL_QUEUE_TIME);\n+    registry.remove(TOTAL_PROCESSING_TIME);\n+    monitors.removeMonitorListener(boltMonitor);\n+  }\n+\n+  private class BoltMetricsMonitor implements BoltConnectionMetricsMonitor\n+  {\n+    final AtomicLong connectionsOpened = new AtomicLong();\n+    final AtomicLong connectionsClosed = new AtomicLong();\n+\n+    final AtomicLong connectionsActive = new AtomicLong();\n+    final AtomicLong connectionsIdle = new AtomicLong();\n+\n+    final AtomicLong messagesReceived = new AtomicLong();\n+    final AtomicLong messagesStarted = new AtomicLong();\n+    final AtomicLong messagesDone = new AtomicLong();\n+    final AtomicLong messagesFailed = new AtomicLong();\n+\n+    // It will take about 300 million years of queue/processing time to overflow these\n+    // Even if we run a million processors concurrently, the instance would need to\n+    // run uninterrupted for three hundred years before the monitoring had a hiccup.\n+    final AtomicLong queueTime = new AtomicLong();\n+    final AtomicLong processingTime = new AtomicLong();\n \n-    @Documented( \"The total number of messages received via Bolt since this instance started.\" )\n-    public static final String MESSAGES_RECIEVED = name( NAME_PREFIX, \"messages_received\" );\n-\n-    @Documented( \"The total number of messages that began processing since this instance started. This is different \" +\n-                 \"from messages received in that this counter tracks how many of the received messages have\" +\n-                 \"been taken on by a worker thread.\" )\n-    public static final String MESSAGES_STARTED = name( NAME_PREFIX, \"messages_started\" );\n-\n-    @Documented( \"The total number of messages that completed processing since this instance started. This includes \" +\n-                 \"successful, failed and ignored Bolt messages.\" )\n-    public static final String MESSAGES_DONE = name( NAME_PREFIX, \"messages_done\" );\n-\n-    @Documented( \"The total number of messages that failed processing since this instance started.\" )\n-    public static final String MESSAGES_FAILED = name( NAME_PREFIX, \"messages_failed\" );\n+    @Override\n+    public void connectionOpened()\n+    {\n+      connectionsOpened.incrementAndGet();\n+      connectionsIdle.incrementAndGet();\n+    }\n \n-    @Documented( \"The accumulated time messages have spent waiting for a worker thread.\" )\n-    public static final String TOTAL_QUEUE_TIME = name( NAME_PREFIX, \"accumulated_queue_time\" );\n+    @Override\n+    public void connectionActivated()\n+    {\n+      connectionsActive.incrementAndGet();\n+      connectionsIdle.decrementAndGet();\n+    }\n \n-    @Documented( \"The accumulated time worker threads have spent processing messages.\" )\n-    public static final String TOTAL_PROCESSING_TIME = name( NAME_PREFIX, \"accumulated_processing_time\" );\n+    @Override\n+    public void connectionWaiting()\n+    {\n+      connectionsIdle.incrementAndGet();\n+      connectionsActive.decrementAndGet();\n+    }\n \n-    private final MetricRegistry registry;\n-    private final Monitors monitors;\n-    private final BoltMetricsMonitor boltMonitor = new BoltMetricsMonitor();\n+    @Override\n+    public void messageReceived()\n+    {\n+      messagesReceived.incrementAndGet();\n+    }\n \n-    public BoltMetrics( MetricRegistry registry, Monitors monitors )\n+    @Override\n+    public void messageProcessingStarted(long queueTime)\n     {\n-        this.registry = registry;\n-        this.monitors = monitors;\n+      this.queueTime.addAndGet(queueTime);\n+      messagesStarted.incrementAndGet();\n     }\n \n     @Override\n-    public void start()\n+    public void messageProcessingCompleted(long processingTime)\n     {\n-        monitors.addMonitorListener( boltMonitor );\n-        registry.register( SESSIONS_STARTED, (Gauge<Long>) boltMonitor.connectionsOpened::get );\n-        registry.register( CONNECTIONS_OPENED, (Gauge<Long>) boltMonitor.connectionsOpened::get );\n-        registry.register( CONNECTIONS_CLOSED, (Gauge<Long>) boltMonitor.connectionsClosed::get );\n-        registry.register( CONNECTIONS_RUNNING, (Gauge<Long>) boltMonitor.connectionsActive::get );\n-        registry.register( CONNECTIONS_IDLE, (Gauge<Long>) boltMonitor.connectionsIdle::get );\n-        registry.register( MESSAGES_RECIEVED, (Gauge<Long>) boltMonitor.messagesReceived::get );\n-        registry.register( MESSAGES_STARTED, (Gauge<Long>) boltMonitor.messagesStarted::get );\n-        registry.register( MESSAGES_DONE, (Gauge<Long>) boltMonitor.messagesDone::get );\n-        registry.register( MESSAGES_FAILED, (Gauge<Long>) boltMonitor.messagesFailed::get );\n-        registry.register( TOTAL_QUEUE_TIME, (Gauge<Long>) boltMonitor.queueTime::get );\n-        registry.register( TOTAL_PROCESSING_TIME, (Gauge<Long>) boltMonitor.processingTime::get );\n+      this.processingTime.addAndGet(processingTime);\n+      messagesDone.incrementAndGet();\n     }\n \n     @Override\n-    public void stop()\n+    public void messageProcessingFailed()\n     {\n-        registry.remove( SESSIONS_STARTED );\n-        registry.remove( CONNECTIONS_OPENED );\n-        registry.remove( CONNECTIONS_CLOSED );\n-        registry.remove( CONNECTIONS_IDLE );\n-        registry.remove( CONNECTIONS_RUNNING );\n-        registry.remove( MESSAGES_RECIEVED );\n-        registry.remove( MESSAGES_STARTED );\n-        registry.remove( MESSAGES_DONE );\n-        registry.remove( MESSAGES_FAILED );\n-        registry.remove( TOTAL_QUEUE_TIME );\n-        registry.remove( TOTAL_PROCESSING_TIME );\n-        monitors.removeMonitorListener( boltMonitor );\n+      messagesFailed.incrementAndGet();\n     }\n \n-    private class BoltMetricsMonitor implements BoltConnectionMetricsMonitor\n+    @Override\n+    public void connectionClosed()\n     {\n-        final AtomicLong connectionsOpened = new AtomicLong();\n-        final AtomicLong connectionsClosed = new AtomicLong();\n-\n-        final AtomicLong connectionsActive = new AtomicLong();\n-        final AtomicLong connectionsIdle = new AtomicLong();\n-\n-        final AtomicLong messagesReceived = new AtomicLong();\n-        final AtomicLong messagesStarted = new AtomicLong();\n-        final AtomicLong messagesDone = new AtomicLong();\n-        final AtomicLong messagesFailed = new AtomicLong();\n-\n-        // It will take about 300 million years of queue/processing time to overflow these\n-        // Even if we run a million processors concurrently, the instance would need to\n-        // run uninterrupted for three hundred years before the monitoring had a hiccup.\n-        final AtomicLong queueTime = new AtomicLong();\n-        final AtomicLong processingTime = new AtomicLong();\n-\n-        @Override\n-        public void connectionOpened()\n-        {\n-            connectionsOpened.incrementAndGet();\n-            connectionsIdle.incrementAndGet();\n-        }\n-\n-        @Override\n-        public void connectionActivated()\n-        {\n-            connectionsActive.incrementAndGet();\n-            connectionsIdle.decrementAndGet();\n-        }\n-\n-        @Override\n-        public void connectionWaiting()\n-        {\n-            connectionsIdle.incrementAndGet();\n-            connectionsActive.decrementAndGet();\n-        }\n-\n-        @Override\n-        public void messageReceived()\n-        {\n-            messagesReceived.incrementAndGet();\n-        }\n-\n-        @Override\n-        public void messageProcessingStarted( long queueTime )\n-        {\n-            this.queueTime.addAndGet( queueTime );\n-            messagesStarted.incrementAndGet();\n-        }\n-\n-        @Override\n-        public void messageProcessingCompleted( long processingTime )\n-        {\n-            this.processingTime.addAndGet( processingTime );\n-            messagesDone.incrementAndGet();\n-        }\n-\n-        @Override\n-        public void messageProcessingFailed()\n-        {\n-            messagesFailed.incrementAndGet();\n-        }\n-\n-        @Override\n-        public void connectionClosed()\n-        {\n-            connectionsClosed.incrementAndGet();\n-            connectionsIdle.decrementAndGet();\n-        }\n+      connectionsClosed.incrementAndGet();\n+      connectionsIdle.decrementAndGet();\n     }\n+  }\n }\n",
            "diff_size": 239
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}