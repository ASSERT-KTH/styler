{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3835",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "275",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "280",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "319",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "328",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "340",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "351",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "403",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3835/SpaceFillingCurve.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3835/SpaceFillingCurve.java\nindex 45c67d9343f..7c4ba12e89b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3835/SpaceFillingCurve.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3835/SpaceFillingCurve.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.gis.spatial.index.curves;\n \n import java.util.ArrayList;\n@@ -30,462 +31,456 @@ import org.neo4j.gis.spatial.index.Envelope;\n \n public abstract class SpaceFillingCurve\n {\n-    /**\n-     * Description of the space filling curve structure\n-     */\n-    abstract static class CurveRule\n+  /**\n+   * Description of the space filling curve structure\n+   */\n+  abstract static class CurveRule\n+  {\n+    final int dimension;\n+    final int[] npointValues;\n+\n+    CurveRule(int dimension, int[] npointValues)\n     {\n-        final int dimension;\n-        final int[] npointValues;\n-\n-        CurveRule( int dimension, int[] npointValues )\n-        {\n-            this.dimension = dimension;\n-            this.npointValues = npointValues;\n-            assert npointValues.length == length();\n-        }\n-\n-        final int length()\n-        {\n-            return (int) Math.pow( 2, dimension );\n-        }\n-\n-        int npointForIndex( int derivedIndex )\n-        {\n-            return npointValues[derivedIndex];\n-        }\n-\n-        int indexForNPoint( int npoint )\n-        {\n-            for ( int index = 0; index < npointValues.length; index++ )\n-            {\n-                if ( npointValues[index] == npoint )\n-                {\n-                    return index;\n-                }\n-            }\n-            return -1;\n-        }\n-\n-        abstract CurveRule childAt( int npoint );\n+      this.dimension = dimension;\n+      this.npointValues = npointValues;\n+      assert npointValues.length == length();\n     }\n \n-    private final Envelope range;\n-    private final int nbrDim;\n-    private final int maxLevel;\n-    private final long width;\n-    private final long valueWidth;\n-    private final int quadFactor;\n-    private final long initialNormMask;\n-\n-    private double[] scalingFactor;\n-\n-    SpaceFillingCurve( Envelope range, int maxLevel )\n+    final int length()\n     {\n-        this.range = range;\n-        this.nbrDim = range.getDimension();\n-        this.maxLevel = maxLevel;\n-        if ( maxLevel < 1 )\n-        {\n-            throw new IllegalArgumentException( \"Hilbert index needs at least one level\" );\n-        }\n-        if ( range.getDimension() > 3 )\n-        {\n-            throw new IllegalArgumentException( \"Hilbert index does not yet support more than 3 dimensions\" );\n-        }\n-        this.width = (long) Math.pow( 2, maxLevel );\n-        this.scalingFactor = new double[nbrDim];\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n-        {\n-            scalingFactor[dim] = this.width / range.getWidth( dim );\n-        }\n-        this.valueWidth = (long) Math.pow( 2, maxLevel * nbrDim );\n-        this.initialNormMask = (long) (Math.pow( 2, nbrDim ) - 1) << (maxLevel - 1) * nbrDim;\n-        this.quadFactor = (int) Math.pow( 2, nbrDim );\n+      return (int) Math.pow(2, dimension);\n     }\n \n-    public int getMaxLevel()\n+    int npointForIndex(int derivedIndex)\n     {\n-        return maxLevel;\n+      return npointValues[derivedIndex];\n     }\n \n-    public long getWidth()\n+    int indexForNPoint(int npoint)\n     {\n-        return width;\n+      for (int index = 0; index < npointValues.length; index++)\n+      {\n+        if (npointValues[index] == npoint)\n+        {\n+          return index;\n+        }\n+      }\n+      return -1;\n     }\n \n-    public long getValueWidth()\n+    abstract CurveRule childAt(int npoint);\n+  }\n+\n+  private final Envelope range;\n+  private final int nbrDim;\n+  private final int maxLevel;\n+  private final long width;\n+  private final long valueWidth;\n+  private final int quadFactor;\n+  private final long initialNormMask;\n+\n+  private double[] scalingFactor;\n+\n+  SpaceFillingCurve(Envelope range, int maxLevel)\n+  {\n+    this.range = range;\n+    this.nbrDim = range.getDimension();\n+    this.maxLevel = maxLevel;\n+    if (maxLevel < 1)\n     {\n-        return valueWidth;\n+      throw new IllegalArgumentException(\"Hilbert index needs at least one level\");\n     }\n-\n-    public double getTileWidth( int dimension, int level )\n+    if (range.getDimension() > 3)\n     {\n-        return range.getWidth( dimension ) / Math.pow( 2, level );\n+      throw new IllegalArgumentException(\"Hilbert index does not yet support more than 3 dimensions\");\n     }\n-\n-    public Envelope getRange()\n+    this.width = (long) Math.pow(2, maxLevel);\n+    this.scalingFactor = new double[nbrDim];\n+    for (int dim = 0; dim < nbrDim; dim++)\n     {\n-        return range;\n+      scalingFactor[dim] = this.width / range.getWidth(dim);\n     }\n-\n-    protected abstract CurveRule rootCurve();\n-\n-    /**\n-     * Given a coordinate in multiple dimensions, calculate its derived key for maxLevel\n-     * Needs to be public due to dependency from Neo4j Spatial\n-     */\n-    public Long derivedValueFor( double[] coord )\n+    this.valueWidth = (long) Math.pow(2, maxLevel * nbrDim);\n+    this.initialNormMask = (long) (Math.pow(2, nbrDim) - 1) << (maxLevel - 1) * nbrDim;\n+    this.quadFactor = (int) Math.pow(2, nbrDim);\n+  }\n+\n+  public int getMaxLevel()\n+  {\n+    return maxLevel;\n+  }\n+\n+  public long getWidth()\n+  {\n+    return width;\n+  }\n+\n+  public long getValueWidth()\n+  {\n+    return valueWidth;\n+  }\n+\n+  public double getTileWidth(int dimension, int level)\n+  {\n+    return range.getWidth(dimension) / Math.pow(2, level);\n+  }\n+\n+  public Envelope getRange()\n+  {\n+    return range;\n+  }\n+\n+  protected abstract CurveRule rootCurve();\n+\n+  /**\n+   * Given a coordinate in multiple dimensions, calculate its derived key for maxLevel\n+   * Needs to be public due to dependency from Neo4j Spatial\n+   */\n+  public Long derivedValueFor(double[] coord)\n+  {\n+    return derivedValueFor(coord, maxLevel);\n+  }\n+\n+  /**\n+   * Given a coordinate in multiple dimensions, calculate its derived key for given level\n+   */\n+  private Long derivedValueFor(double[] coord, int level)\n+  {\n+    assertValidLevel(level);\n+    long[] normalizedValues = getNormalizedCoord(coord);\n+    return derivedValueFor(normalizedValues, level);\n+  }\n+\n+  /**\n+   * Given a normalized coordinate in multiple dimensions, calculate its derived key for maxLevel\n+   */\n+  public Long derivedValueFor(long[] normalizedValues)\n+  {\n+    return derivedValueFor(normalizedValues, maxLevel);\n+  }\n+\n+  /**\n+   * Given a normalized coordinate in multiple dimensions, calculate its derived key for given level\n+   */\n+  private Long derivedValueFor(long[] normalizedValues, int level)\n+  {\n+    assertValidLevel(level);\n+    long derivedValue = 0;\n+    long mask = 1L << (maxLevel - 1);\n+\n+    // The starting curve depends on the dimensions\n+    CurveRule currentCurve = rootCurve();\n+\n+    for (int i = 1; i <= maxLevel; i++)\n     {\n-        return derivedValueFor( coord, maxLevel );\n+      int bitIndex = maxLevel - i;\n+      int npoint = 0;\n+\n+      for (long val : normalizedValues)\n+      {\n+        npoint = npoint << 1 | (int) ((val & mask) >> bitIndex);\n+      }\n+\n+      int derivedIndex = currentCurve.indexForNPoint(npoint);\n+      derivedValue = (derivedValue << nbrDim) | derivedIndex;\n+      mask = mask >> 1;\n+      currentCurve = currentCurve.childAt(derivedIndex);\n     }\n \n-    /**\n-     * Given a coordinate in multiple dimensions, calculate its derived key for given level\n-     */\n-    private Long derivedValueFor( double[] coord, int level )\n+    if (level < maxLevel)\n     {\n-        assertValidLevel( level );\n-        long[] normalizedValues = getNormalizedCoord( coord );\n-        return derivedValueFor( normalizedValues, level );\n+      derivedValue = derivedValue << (nbrDim * maxLevel - level);\n     }\n-\n-    /**\n-     * Given a normalized coordinate in multiple dimensions, calculate its derived key for maxLevel\n-     */\n-    public Long derivedValueFor( long[] normalizedValues )\n+    return derivedValue;\n+  }\n+\n+  /**\n+   * Given a derived key, find the center coordinate of the corresponding tile at maxLevel\n+   */\n+  public double[] centerPointFor(long derivedValue)\n+  {\n+    return centerPointFor(derivedValue, maxLevel);\n+  }\n+\n+  /**\n+   * Given a derived key, find the center coordinate of the corresponding tile at given level\n+   */\n+  private double[] centerPointFor(long derivedValue, int level)\n+  {\n+    long[] normalizedCoord = normalizedCoordinateFor(derivedValue, level);\n+    return getDoubleCoord(normalizedCoord, level);\n+  }\n+\n+  /**\n+   * Given a derived key, find the normalized coordinate it corresponds to on a specific level\n+   */\n+  long[] normalizedCoordinateFor(long derivedValue, int level)\n+  {\n+    assertValidLevel(level);\n+    long mask = initialNormMask;\n+    long[] coordinate = new long[nbrDim];\n+\n+    // First level is a single curveUp\n+    CurveRule currentCurve = rootCurve();\n+\n+    for (int i = 1; i <= level; i++)\n     {\n-        return derivedValueFor( normalizedValues, maxLevel );\n-    }\n \n-    /**\n-     * Given a normalized coordinate in multiple dimensions, calculate its derived key for given level\n-     */\n-    private Long derivedValueFor( long[] normalizedValues, int level )\n-    {\n-        assertValidLevel( level );\n-        long derivedValue = 0;\n-        long mask = 1L << (maxLevel - 1);\n+      int bitIndex = maxLevel - i;\n \n-        // The starting curve depends on the dimensions\n-        CurveRule currentCurve = rootCurve();\n+      int derivedIndex = (int) ((derivedValue & mask) >> bitIndex * nbrDim);\n+      int npoint = currentCurve.npointForIndex(derivedIndex);\n+      int[] bitValues = bitValues(npoint);\n \n-        for ( int i = 1; i <= maxLevel; i++ )\n-        {\n-            int bitIndex = maxLevel - i;\n-            int npoint = 0;\n-\n-            for ( long val : normalizedValues )\n-            {\n-                npoint = npoint << 1 | (int) ((val & mask) >> bitIndex);\n-            }\n-\n-            int derivedIndex = currentCurve.indexForNPoint( npoint );\n-            derivedValue = (derivedValue << nbrDim) | derivedIndex;\n-            mask = mask >> 1;\n-            currentCurve = currentCurve.childAt( derivedIndex );\n-        }\n+      for (int dim = 0; dim < nbrDim; dim++)\n+      {\n+        coordinate[dim] = coordinate[dim] << 1 | bitValues[dim];\n+      }\n \n-        if ( level < maxLevel )\n-        {\n-            derivedValue = derivedValue << (nbrDim * maxLevel - level);\n-        }\n-        return derivedValue;\n+      mask = mask >> nbrDim;\n+      currentCurve = currentCurve.childAt(derivedIndex);\n     }\n \n-    /**\n-     * Given a derived key, find the center coordinate of the corresponding tile at maxLevel\n-     */\n-    public double[] centerPointFor( long derivedValue )\n+    if (level < maxLevel)\n     {\n-        return centerPointFor( derivedValue, maxLevel );\n+      for (int dim = 0; dim < nbrDim; dim++)\n+      {\n+        coordinate[dim] = coordinate[dim] << maxLevel - level;\n+      }\n     }\n \n-    /**\n-     * Given a derived key, find the center coordinate of the corresponding tile at given level\n-     */\n-    private double[] centerPointFor( long derivedValue, int level )\n-    {\n-        long[] normalizedCoord = normalizedCoordinateFor( derivedValue, level );\n-        return getDoubleCoord( normalizedCoord, level );\n-    }\n+    return coordinate;\n+  }\n \n-    /**\n-     * Given a derived key, find the normalized coordinate it corresponds to on a specific level\n-     */\n-    long[] normalizedCoordinateFor( long derivedValue, int level )\n-    {\n-        assertValidLevel( level );\n-        long mask = initialNormMask;\n-        long[] coordinate = new long[nbrDim];\n+  /**\n+   * Given an envelope, find a collection of LongRange of tiles intersecting it on maxLevel and merge adjacent ones\n+   */\n+  List<LongRange> getTilesIntersectingEnvelope(Envelope referenceEnvelope)\n+  {\n+    return getTilesIntersectingEnvelope(referenceEnvelope.getMin(), referenceEnvelope.getMax(), new StandardConfiguration());\n+  }\n \n-        // First level is a single curveUp\n-        CurveRule currentCurve = rootCurve();\n+  public List<LongRange> getTilesIntersectingEnvelope(double[] fromOrNull, double[] toOrNull, SpaceFillingCurveConfiguration config)\n+  {\n+    double[] from = fromOrNull == null ? range.getMin() : fromOrNull.clone();\n+    double[] to = toOrNull == null ? range.getMax() : toOrNull.clone();\n \n-        for ( int i = 1; i <= level; i++ )\n+    for (int i = 0; i < from.length; i++)\n+    {\n+      if (from[i] > to[i])\n+      {\n+        if (fromOrNull == null)\n         {\n-\n-            int bitIndex = maxLevel - i;\n-\n-            int derivedIndex = (int) ((derivedValue & mask) >> bitIndex * nbrDim);\n-            int npoint = currentCurve.npointForIndex( derivedIndex );\n-            int[] bitValues = bitValues( npoint );\n-\n-            for ( int dim = 0; dim < nbrDim; dim++ )\n-            {\n-                coordinate[dim] = coordinate[dim] << 1 | bitValues[dim];\n-            }\n-\n-            mask = mask >> nbrDim;\n-            currentCurve = currentCurve.childAt( derivedIndex );\n-        }\n-\n-        if ( level < maxLevel )\n+          to[i] = from[i];\n+        } else if (toOrNull == null)\n+        {\n+          from[i] = to[i];\n+        } else\n         {\n-            for ( int dim = 0; dim < nbrDim; dim++ )\n-            {\n-                coordinate[dim] = coordinate[dim] << maxLevel - level;\n-            }\n+          throw new IllegalArgumentException(\"Invalid range, min greater than max: \" + from[i] + \" > \" + to[i]);\n         }\n-\n-        return coordinate;\n+      }\n     }\n+    Envelope referenceEnvelope = new Envelope(from, to);\n+    return getTilesIntersectingEnvelope(referenceEnvelope, config, null);\n+  }\n+\n+  List<LongRange> getTilesIntersectingEnvelope(Envelope referenceEnvelope, SpaceFillingCurveConfiguration config, SpaceFillingCurveMonitor monitor)\n+  {\n+    SearchEnvelope search = new SearchEnvelope(this, referenceEnvelope);\n+    SearchEnvelope wholeExtent = new SearchEnvelope(0, this.getWidth(), nbrDim);\n+    ArrayList<LongRange> results = new ArrayList<>(config.initialRangesListCapacity());\n \n-    /**\n-     * Given an envelope, find a collection of LongRange of tiles intersecting it on maxLevel and merge adjacent ones\n-     */\n-    List<LongRange> getTilesIntersectingEnvelope( Envelope referenceEnvelope )\n+    if (monitor != null)\n     {\n-        return getTilesIntersectingEnvelope( referenceEnvelope.getMin(), referenceEnvelope.getMax(), new StandardConfiguration() );\n+      monitor.registerSearchArea(search.getArea());\n     }\n \n-    public List<LongRange> getTilesIntersectingEnvelope( double[] fromOrNull, double[] toOrNull, SpaceFillingCurveConfiguration config )\n-    {\n-        double[] from = fromOrNull == null ? range.getMin() : fromOrNull.clone();\n-        double[] to = toOrNull == null ? range.getMax() : toOrNull.clone();\n+    addTilesIntersectingEnvelopeAt(config, monitor, 0, config.maxDepth(referenceEnvelope, this.range, nbrDim, maxLevel), search,\n+        wholeExtent, rootCurve(), 0, this.getValueWidth(), results);\n+    return results;\n+  }\n \n-        for ( int i = 0; i < from.length; i++ )\n+  private void addTilesIntersectingEnvelopeAt(SpaceFillingCurveConfiguration config, SpaceFillingCurveMonitor monitor, int depth, int maxDepth,\n+                                              SearchEnvelope search, SearchEnvelope currentExtent, CurveRule curve, long left, long right,\n+                                              ArrayList<LongRange> results)\n+  {\n+    if (right - left == 1)\n+    {\n+      long[] coord = normalizedCoordinateFor(left, maxLevel);\n+      if (search.contains(coord))\n+      {\n+        LongRange current = (results.size() > 0) ? results.get(results.size() - 1) : null;\n+        if (current != null && current.max == left - 1)\n+        {\n+          current.expandToMax(left);\n+        } else\n         {\n-            if ( from[i] > to[i] )\n-            {\n-                if ( fromOrNull == null )\n-                {\n-                    to[i] = from[i];\n-                }\n-                else if ( toOrNull == null )\n-                {\n-                    from[i] = to[i];\n-                }\n-                else\n-                {\n-                    throw new IllegalArgumentException( \"Invalid range, min greater than max: \" + from[i] + \" > \" + to[i] );\n-                }\n-            }\n+          current = new LongRange(left);\n+          results.add(current);\n         }\n-        Envelope referenceEnvelope = new Envelope( from, to );\n-        return getTilesIntersectingEnvelope( referenceEnvelope, config, null );\n-    }\n-\n-    List<LongRange> getTilesIntersectingEnvelope( Envelope referenceEnvelope, SpaceFillingCurveConfiguration config, SpaceFillingCurveMonitor monitor )\n-    {\n-        SearchEnvelope search = new SearchEnvelope( this, referenceEnvelope );\n-        SearchEnvelope wholeExtent = new SearchEnvelope( 0, this.getWidth(), nbrDim );\n-        ArrayList<LongRange> results = new ArrayList<>( config.initialRangesListCapacity() );\n-\n-        if ( monitor != null )\n+        if (monitor != null)\n         {\n-            monitor.registerSearchArea( search.getArea() );\n+          monitor.addRangeAtDepth(depth);\n+          monitor.addToCoveredArea(currentExtent.getArea());\n         }\n-\n-        addTilesIntersectingEnvelopeAt( config, monitor, 0, config.maxDepth( referenceEnvelope, this.range, nbrDim, maxLevel ), search,\n-                wholeExtent, rootCurve(), 0, this.getValueWidth(), results );\n-        return results;\n-    }\n-\n-    private void addTilesIntersectingEnvelopeAt( SpaceFillingCurveConfiguration config, SpaceFillingCurveMonitor monitor, int depth, int maxDepth,\n-            SearchEnvelope search, SearchEnvelope currentExtent, CurveRule curve, long left, long right, ArrayList<LongRange> results )\n+      }\n+    } else if (search.intersects(currentExtent))\n     {\n-        if ( right - left == 1 )\n+      double overlap = search.fractionOf(currentExtent);\n+      if (config.stopAtThisDepth(overlap, depth, maxDepth))\n+      {\n+        // Note that LongRange upper bound is inclusive, hence the '-1' in several places\n+        LongRange current = (results.size() > 0) ? results.get(results.size() - 1) : null;\n+        if (current != null && current.max == left - 1)\n         {\n-            long[] coord = normalizedCoordinateFor( left, maxLevel );\n-            if ( search.contains( coord ) )\n-            {\n-                LongRange current = (results.size() > 0) ? results.get( results.size() - 1 ) : null;\n-                if ( current != null && current.max == left - 1 )\n-                {\n-                    current.expandToMax( left );\n-                }\n-                else\n-                {\n-                    current = new LongRange( left );\n-                    results.add( current );\n-                }\n-                if ( monitor != null )\n-                {\n-                    monitor.addRangeAtDepth( depth );\n-                    monitor.addToCoveredArea( currentExtent.getArea() );\n-                }\n-            }\n+          current.expandToMax(right - 1);\n+        } else\n+        {\n+          current = new LongRange(left, right - 1);\n+          results.add(current);\n         }\n-        else if ( search.intersects( currentExtent ) )\n+        if (monitor != null)\n         {\n-            double overlap = search.fractionOf( currentExtent );\n-            if ( config.stopAtThisDepth( overlap, depth, maxDepth ) )\n-            {\n-                // Note that LongRange upper bound is inclusive, hence the '-1' in several places\n-                LongRange current = (results.size() > 0) ? results.get( results.size() - 1 ) : null;\n-                if ( current != null && current.max == left - 1 )\n-                {\n-                    current.expandToMax( right - 1 );\n-                }\n-                else\n-                {\n-                    current = new LongRange( left, right - 1 );\n-                    results.add( current );\n-                }\n-                if ( monitor != null )\n-                {\n-                    monitor.addRangeAtDepth( depth );\n-                    monitor.addToCoveredArea( currentExtent.getArea() );\n-                }\n-            }\n-            else\n-            {\n-                long width = (right - left) / quadFactor;\n-                for ( int i = 0; i < quadFactor; i++ )\n-                {\n-                    int npoint = curve.npointForIndex( i );\n-\n-                    SearchEnvelope quadrant = currentExtent.quadrant( bitValues( npoint ) );\n-                    addTilesIntersectingEnvelopeAt( config, monitor, depth + 1, maxDepth, search, quadrant, curve.childAt( i ), left + i * width,\n-                            left + (i + 1) * width, results );\n-                }\n-            }\n+          monitor.addRangeAtDepth(depth);\n+          monitor.addToCoveredArea(currentExtent.getArea());\n         }\n-    }\n-\n-    /**\n-     * Bit index describing the in which quadrant an npoint corresponds to\n-     */\n-    private int[] bitValues( int npoint )\n-    {\n-        int[] bitValues = new int[nbrDim];\n-\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n+      } else\n+      {\n+        long width = (right - left) / quadFactor;\n+        for (int i = 0; i < quadFactor; i++)\n         {\n-            int shift = nbrDim - dim - 1;\n-            bitValues[dim] = (npoint & (1 << shift)) >> shift;\n+          int npoint = curve.npointForIndex(i);\n+\n+          SearchEnvelope quadrant = currentExtent.quadrant(bitValues(npoint));\n+          addTilesIntersectingEnvelopeAt(config, monitor, depth + 1, maxDepth, search, quadrant, curve.childAt(i), left + i * width,\n+              left + (i + 1) * width, results);\n         }\n-        return bitValues;\n+      }\n     }\n+  }\n \n-    /**\n-     * Given a coordinate, find the corresponding normalized coordinate\n-     */\n-    long[] getNormalizedCoord( double[] coord )\n-    {\n-        long[] normalizedCoord = new long[nbrDim];\n+  /**\n+   * Bit index describing the in which quadrant an npoint corresponds to\n+   */\n+  private int[] bitValues(int npoint)\n+  {\n+    int[] bitValues = new int[nbrDim];\n \n-        for ( int dim = 0; dim < nbrDim; dim++ )\n-        {\n-            double value = clamp( coord[dim], range.getMin( dim ), range.getMax( dim ) );\n-            // Avoiding awkward rounding errors\n-            if ( value - range.getMin( dim ) == range.getMax( dim ) - range.getMin( dim ) )\n-            {\n-                normalizedCoord[dim] = width - 1;\n-            }\n-            else\n-            {\n-                normalizedCoord[dim] = (long) ((value - range.getMin( dim )) * scalingFactor[dim]);\n-            }\n-        }\n-        return normalizedCoord;\n+    for (int dim = 0; dim < nbrDim; dim++)\n+    {\n+      int shift = nbrDim - dim - 1;\n+      bitValues[dim] = (npoint & (1 << shift)) >> shift;\n     }\n+    return bitValues;\n+  }\n \n-    /**\n-     * Given a normalized coordinate, find the center coordinate of that tile  on the given level\n-     */\n-    private double[] getDoubleCoord( long[] normalizedCoord, int level )\n-    {\n-        double[] coord = new double[nbrDim];\n+  /**\n+   * Given a coordinate, find the corresponding normalized coordinate\n+   */\n+  long[] getNormalizedCoord(double[] coord)\n+  {\n+    long[] normalizedCoord = new long[nbrDim];\n \n-        for ( int dim = 0; dim < nbrDim; dim++ )\n-        {\n-            double coordinate = ((double) normalizedCoord[dim]) / scalingFactor[dim] + range.getMin( dim ) + getTileWidth( dim, level ) / 2.0;\n-            coord[dim] = clamp( coordinate, range.getMin( dim ), range.getMax( dim ) );\n-        }\n-        return coord;\n+    for (int dim = 0; dim < nbrDim; dim++)\n+    {\n+      double value = clamp(coord[dim], range.getMin(dim), range.getMax(dim));\n+      // Avoiding awkward rounding errors\n+      if (value - range.getMin(dim) == range.getMax(dim) - range.getMin(dim))\n+      {\n+        normalizedCoord[dim] = width - 1;\n+      } else\n+      {\n+        normalizedCoord[dim] = (long) ((value - range.getMin(dim)) * scalingFactor[dim]);\n+      }\n     }\n+    return normalizedCoord;\n+  }\n \n-    private double clamp( double val, double min, double max )\n+  /**\n+   * Given a normalized coordinate, find the center coordinate of that tile  on the given level\n+   */\n+  private double[] getDoubleCoord(long[] normalizedCoord, int level)\n+  {\n+    double[] coord = new double[nbrDim];\n+\n+    for (int dim = 0; dim < nbrDim; dim++)\n     {\n-        if ( val <= min )\n-        {\n-            return min;\n-        }\n-        if ( val >= max )\n-        {\n-            return max;\n-        }\n-        return val;\n+      double coordinate = ((double) normalizedCoord[dim]) / scalingFactor[dim] + range.getMin(dim) + getTileWidth(dim, level) / 2.0;\n+      coord[dim] = clamp(coordinate, range.getMin(dim), range.getMax(dim));\n     }\n+    return coord;\n+  }\n \n-    /**\n-     * Assert that a given level is valid\n-     */\n-    private void assertValidLevel( int level )\n+  private double clamp(double val, double min, double max)\n+  {\n+    if (val <= min)\n     {\n-        if ( level > maxLevel )\n-        {\n-            throw new IllegalArgumentException( \"Level \" + level + \" greater than max-level \" + maxLevel );\n-        }\n+      return min;\n     }\n-\n-    /**\n-     * Class for ranges of tiles\n-     */\n-    public static class LongRange\n+    if (val >= max)\n     {\n-        public final long min;\n-        public long max;\n+      return max;\n+    }\n+    return val;\n+  }\n+\n+  /**\n+   * Assert that a given level is valid\n+   */\n+  private void assertValidLevel(int level)\n+  {\n+    if (level > maxLevel)\n+    {\n+      throw new IllegalArgumentException(\"Level \" + level + \" greater than max-level \" + maxLevel);\n+    }\n+  }\n \n-        LongRange( long value )\n-        {\n-            this( value, value );\n-        }\n+  /**\n+   * Class for ranges of tiles\n+   */\n+  public static class LongRange\n+  {\n+    public final long min;\n+    public long max;\n \n-        LongRange( long min, long max )\n-        {\n-            this.min = min;\n-            this.max = max;\n-        }\n+    LongRange(long value)\n+    {\n+      this(value, value);\n+    }\n \n-        void expandToMax( long other )\n-        {\n-            this.max = other;\n-        }\n+    LongRange(long min, long max)\n+    {\n+      this.min = min;\n+      this.max = max;\n+    }\n \n-        @Override\n-        public boolean equals( Object other )\n-        {\n-            return (other instanceof LongRange) && this.equals( (LongRange) other );\n-        }\n+    void expandToMax(long other)\n+    {\n+      this.max = other;\n+    }\n \n-        public boolean equals( LongRange other )\n-        {\n-            return this.min == other.min && this.max == other.max;\n-        }\n+    @Override\n+    public boolean equals(Object other)\n+    {\n+      return (other instanceof LongRange) && this.equals((LongRange) other);\n+    }\n \n-        @Override\n-        public int hashCode()\n-        {\n-            return (int) (this.min << 16 + this.max);\n-        }\n+    public boolean equals(LongRange other)\n+    {\n+      return this.min == other.min && this.max == other.max;\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"LongRange(\" + min + \",\" + max + \")\";\n-        }\n+    @Override\n+    public int hashCode()\n+    {\n+      return (int) (this.min << 16 + this.max);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return \"LongRange(\" + min + \",\" + max + \")\";\n     }\n+  }\n }\n",
            "diff_size": 599
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "479",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3835/SpaceFillingCurve.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3835/SpaceFillingCurve.java\nindex 45c67d9343f..337c8617b4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3835/SpaceFillingCurve.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3835/SpaceFillingCurve.java\n@@ -27,7 +27,6 @@ import org.neo4j.gis.spatial.index.Envelope;\n /**\n  * This class is also used by Neo4j Spatial\n  */\n-\n public abstract class SpaceFillingCurve\n {\n     /**\n@@ -47,7 +46,7 @@ public abstract class SpaceFillingCurve\n \n         final int length()\n         {\n-            return (int) Math.pow( 2, dimension );\n+            return ( int) Math.pow( 2, dimension );\n         }\n \n         int npointForIndex( int derivedIndex )\n@@ -89,7 +88,8 @@ public abstract class SpaceFillingCurve\n         {\n             throw new IllegalArgumentException( \"Hilbert index needs at least one level\" );\n         }\n-        if ( range.getDimension() > 3 )\n+\n+if ( range.getDimension() > 3 )\n         {\n             throw new IllegalArgumentException( \"Hilbert index does not yet support more than 3 dimensions\" );\n         }\n@@ -100,8 +100,8 @@ public abstract class SpaceFillingCurve\n             scalingFactor[dim] = this.width / range.getWidth( dim );\n         }\n         this.valueWidth = (long) Math.pow( 2, maxLevel * nbrDim );\n-        this.initialNormMask = (long) (Math.pow( 2, nbrDim ) - 1) << (maxLevel - 1) * nbrDim;\n-        this.quadFactor = (int) Math.pow( 2, nbrDim );\n+        this.initialNormMask = (long) (Math.pow( 2, nbrDim ) - 1) << ( maxLevel - 1) * nbrDim;\n+        this.quadFactor = ( int) Math.pow( 2, nbrDim );\n     }\n \n     public int getMaxLevel()\n@@ -165,19 +165,17 @@ public abstract class SpaceFillingCurve\n     {\n         assertValidLevel( level );\n         long derivedValue = 0;\n-        long mask = 1L << (maxLevel - 1);\n+        long mask = 1L << ( maxLevel - 1 );\n \n         // The starting curve depends on the dimensions\n         CurveRule currentCurve = rootCurve();\n-\n-        for ( int i = 1; i <= maxLevel; i++ )\n+for ( int i = 1; i <= maxLevel; i++ )\n         {\n             int bitIndex = maxLevel - i;\n             int npoint = 0;\n-\n-            for ( long val : normalizedValues )\n+for ( long val : normalizedValues )\n             {\n-                npoint = npoint << 1 | (int) ((val & mask) >> bitIndex);\n+                npoint = npoint << 1 | ( int) ((val & mask) >> bitIndex);\n             }\n \n             int derivedIndex = currentCurve.indexForNPoint( npoint );\n@@ -188,9 +186,10 @@ public abstract class SpaceFillingCurve\n \n         if ( level < maxLevel )\n         {\n-            derivedValue = derivedValue << (nbrDim * maxLevel - level);\n+            derivedValue = derivedValue << ( nbrDim * maxLevel - level);\n         }\n-        return derivedValue;\n+\n+return derivedValue;\n     }\n \n     /**\n@@ -221,17 +220,14 @@ public abstract class SpaceFillingCurve\n \n         // First level is a single curveUp\n         CurveRule currentCurve = rootCurve();\n-\n-        for ( int i = 1; i <= level; i++ )\n+for ( int i = 1; i <= level; i++ )\n         {\n+    int bitIndex = maxLevel - i;\n \n-            int bitIndex = maxLevel - i;\n-\n-            int derivedIndex = (int) ((derivedValue & mask) >> bitIndex * nbrDim);\n+            int derivedIndex = ( int) ((derivedValue & mask) >> bitIndex * nbrDim);\n             int npoint = currentCurve.npointForIndex( derivedIndex );\n             int[] bitValues = bitValues( npoint );\n-\n-            for ( int dim = 0; dim < nbrDim; dim++ )\n+for ( int dim = 0; dim < nbrDim; dim++ )\n             {\n                 coordinate[dim] = coordinate[dim] << 1 | bitValues[dim];\n             }\n@@ -263,8 +259,7 @@ public abstract class SpaceFillingCurve\n     {\n         double[] from = fromOrNull == null ? range.getMin() : fromOrNull.clone();\n         double[] to = toOrNull == null ? range.getMax() : toOrNull.clone();\n-\n-        for ( int i = 0; i < from.length; i++ )\n+for ( int i = 0; i < from.length; i++ )\n         {\n             if ( from[i] > to[i] )\n             {\n@@ -291,15 +286,14 @@ public abstract class SpaceFillingCurve\n         SearchEnvelope search = new SearchEnvelope( this, referenceEnvelope );\n         SearchEnvelope wholeExtent = new SearchEnvelope( 0, this.getWidth(), nbrDim );\n         ArrayList<LongRange> results = new ArrayList<>( config.initialRangesListCapacity() );\n-\n-        if ( monitor != null )\n+if ( monitor != null )\n         {\n             monitor.registerSearchArea( search.getArea() );\n         }\n \n         addTilesIntersectingEnvelopeAt( config, monitor, 0, config.maxDepth( referenceEnvelope, this.range, nbrDim, maxLevel ), search,\n                 wholeExtent, rootCurve(), 0, this.getValueWidth(), results );\n-        return results;\n+return results;\n     }\n \n     private void addTilesIntersectingEnvelopeAt( SpaceFillingCurveConfiguration config, SpaceFillingCurveMonitor monitor, int depth, int maxDepth,\n@@ -320,7 +314,8 @@ public abstract class SpaceFillingCurve\n                     current = new LongRange( left );\n                     results.add( current );\n                 }\n-                if ( monitor != null )\n+\n+if ( monitor != null )\n                 {\n                     monitor.addRangeAtDepth( depth );\n                     monitor.addToCoveredArea( currentExtent.getArea() );\n@@ -343,7 +338,8 @@ public abstract class SpaceFillingCurve\n                     current = new LongRange( left, right - 1 );\n                     results.add( current );\n                 }\n-                if ( monitor != null )\n+\n+if ( monitor != null )\n                 {\n                     monitor.addRangeAtDepth( depth );\n                     monitor.addToCoveredArea( currentExtent.getArea() );\n@@ -355,11 +351,10 @@ public abstract class SpaceFillingCurve\n                 for ( int i = 0; i < quadFactor; i++ )\n                 {\n                     int npoint = curve.npointForIndex( i );\n-\n-                    SearchEnvelope quadrant = currentExtent.quadrant( bitValues( npoint ) );\n+SearchEnvelope quadrant = currentExtent.quadrant( bitValues( npoint ) );\n                     addTilesIntersectingEnvelopeAt( config, monitor, depth + 1, maxDepth, search, quadrant, curve.childAt( i ), left + i * width,\n-                            left + (i + 1) * width, results );\n-                }\n+                            left + (i + 1 ) * width, results );\n+    }\n             }\n         }\n     }\n@@ -370,13 +365,13 @@ public abstract class SpaceFillingCurve\n     private int[] bitValues( int npoint )\n     {\n         int[] bitValues = new int[nbrDim];\n-\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n+for ( int dim = 0; dim < nbrDim; dim++ )\n         {\n             int shift = nbrDim - dim - 1;\n-            bitValues[dim] = (npoint & (1 << shift)) >> shift;\n+            bitValues[dim] = (npoint & ( 1 << shift)) >> shift;\n         }\n-        return bitValues;\n+\n+return bitValues;\n     }\n \n     /**\n@@ -385,8 +380,7 @@ public abstract class SpaceFillingCurve\n     long[] getNormalizedCoord( double[] coord )\n     {\n         long[] normalizedCoord = new long[nbrDim];\n-\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n+for ( int dim = 0; dim < nbrDim; dim++ )\n         {\n             double value = clamp( coord[dim], range.getMin( dim ), range.getMax( dim ) );\n             // Avoiding awkward rounding errors\n@@ -408,13 +402,13 @@ public abstract class SpaceFillingCurve\n     private double[] getDoubleCoord( long[] normalizedCoord, int level )\n     {\n         double[] coord = new double[nbrDim];\n-\n-        for ( int dim = 0; dim < nbrDim; dim++ )\n+for ( int dim = 0; dim < nbrDim; dim++ )\n         {\n             double coordinate = ((double) normalizedCoord[dim]) / scalingFactor[dim] + range.getMin( dim ) + getTileWidth( dim, level ) / 2.0;\n             coord[dim] = clamp( coordinate, range.getMin( dim ), range.getMax( dim ) );\n         }\n-        return coord;\n+\n+return coord;\n     }\n \n     private double clamp( double val, double min, double max )\n@@ -423,11 +417,13 @@ public abstract class SpaceFillingCurve\n         {\n             return min;\n         }\n-        if ( val >= max )\n+\n+if ( val >= max )\n         {\n             return max;\n         }\n-        return val;\n+\n+return val;\n     }\n \n     /**\n@@ -435,7 +431,7 @@ public abstract class SpaceFillingCurve\n      */\n     private void assertValidLevel( int level )\n     {\n-        if ( level > maxLevel )\n+        if ( level> maxLevel )\n         {\n             throw new IllegalArgumentException( \"Level \" + level + \" greater than max-level \" + maxLevel );\n         }\n@@ -447,7 +443,8 @@ public abstract class SpaceFillingCurve\n     public static class LongRange\n     {\n         public final long min;\n-        public long max;\n+\n+public long max;\n \n         LongRange( long value )\n         {\n@@ -468,7 +465,7 @@ public abstract class SpaceFillingCurve\n         @Override\n         public boolean equals( Object other )\n         {\n-            return (other instanceof LongRange) && this.equals( (LongRange) other );\n+            return ( other instanceof LongRange) && this.equals( (LongRange) other );\n         }\n \n         public boolean equals( LongRange other )\n@@ -479,7 +476,7 @@ public abstract class SpaceFillingCurve\n         @Override\n         public int hashCode()\n         {\n-            return (int) (this.min << 16 + this.max);\n+            return ( int) ( this.min << 16 + this.max);\n         }\n \n         @Override\n@@ -488,4 +485,4 @@ public abstract class SpaceFillingCurve\n             return \"LongRange(\" + min + \",\" + max + \")\";\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}