{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1674",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1674/TimerService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1674/TimerService.java\nindex 64186dae129..0fb2e49cd61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1674/TimerService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1674/TimerService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus.schedule;\n \n import java.util.ArrayList;\n@@ -33,57 +34,57 @@ import org.neo4j.scheduler.JobScheduler;\n  */\n public class TimerService\n {\n-    protected final JobScheduler scheduler;\n-    private final Collection<Timer> timers = new ArrayList<>();\n-    private final Log log;\n+  protected final JobScheduler scheduler;\n+  private final Collection<Timer> timers = new ArrayList<>();\n+  private final Log log;\n \n-    public TimerService( JobScheduler scheduler, LogProvider logProvider )\n-    {\n-        this.scheduler = scheduler;\n-        this.log = logProvider.getLog( getClass() );\n-    }\n+  public TimerService(JobScheduler scheduler, LogProvider logProvider)\n+  {\n+    this.scheduler = scheduler;\n+    this.log = logProvider.getLog(getClass());\n+  }\n \n-    /**\n-     * Creates a timer in the deactivated state.\n-     *\n-     * @param name The name of the timer.\n-     * @param group The scheduler group from which timeouts fire.\n-     * @param handler The handler invoked on a timeout.\n-     * @return The deactivated timer.\n-     */\n-    public synchronized Timer create( TimerName name, JobScheduler.Group group, TimeoutHandler handler )\n-    {\n-        Timer timer = new Timer( name, scheduler, log, group, handler );\n-        timers.add( timer );\n-        return timer;\n-    }\n+  /**\n+   * Creates a timer in the deactivated state.\n+   *\n+   * @param name    The name of the timer.\n+   * @param group   The scheduler group from which timeouts fire.\n+   * @param handler The handler invoked on a timeout.\n+   * @return The deactivated timer.\n+   */\n+  public synchronized Timer create(TimerName name, JobScheduler.Group group, TimeoutHandler handler)\n+  {\n+    Timer timer = new Timer(name, scheduler, log, group, handler);\n+    timers.add(timer);\n+    return timer;\n+  }\n \n-    /**\n-     * Gets all timers registered under the specified name.\n-     *\n-     * @param name The name of the timer(s).\n-     * @return The timers matching the name.\n-     */\n-    public synchronized Collection<Timer> getTimers( TimerName name )\n-    {\n-        return timers.stream().filter( timer -> timer.name().equals( name ) ).collect( Collectors.toList() );\n-    }\n+  /**\n+   * Gets all timers registered under the specified name.\n+   *\n+   * @param name The name of the timer(s).\n+   * @return The timers matching the name.\n+   */\n+  public synchronized Collection<Timer> getTimers(TimerName name)\n+  {\n+    return timers.stream().filter(timer -> timer.name().equals(name)).collect(Collectors.toList());\n+  }\n \n-    /**\n-     * Invokes all timers matching the name.\n-     *\n-     * @param name The name of the timer(s).\n-     */\n-    public synchronized void invoke( TimerName name )\n-    {\n-        getTimers( name ).forEach( Timer::invoke );\n-    }\n+  /**\n+   * Invokes all timers matching the name.\n+   *\n+   * @param name The name of the timer(s).\n+   */\n+  public synchronized void invoke(TimerName name)\n+  {\n+    getTimers(name).forEach(Timer::invoke);\n+  }\n \n-    /**\n-     * Convenience interface for timer enums.\n-     */\n-    public interface TimerName\n-    {\n-        String name();\n-    }\n+  /**\n+   * Convenience interface for timer enums.\n+   */\n+  public interface TimerName\n+  {\n+    String name();\n+  }\n }\n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1674/TimerService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1674/TimerService.java\nindex 64186dae129..4fa6d873b5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1674/TimerService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1674/TimerService.java\n@@ -86,4 +86,4 @@ public class TimerService\n     {\n         String name();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}