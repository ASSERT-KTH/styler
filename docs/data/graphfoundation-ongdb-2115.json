{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2115",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "88",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2115/CheckPointThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2115/CheckPointThreshold.java\nindex 2bbff88d882..257e47c6b69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2115/CheckPointThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2115/CheckPointThreshold.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.util.NoSuchElementException;\n@@ -37,110 +38,109 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.check_point_policy\n  */\n public interface CheckPointThreshold\n {\n-    long DEFAULT_CHECKING_FREQUENCY_MILLIS = TimeUnit.SECONDS.toMillis( 10 );\n-\n-    /**\n-     * This method initialize the threshold by providing the initial transaction id\n-     *\n-     * @param transactionId the latest transaction committed id\n-     */\n-    void initialize( long transactionId );\n-\n-    /**\n-     * This method can be used for querying the threshold about the necessity of a check point.\n-     *\n-     * @param lastCommittedTransactionId the latest transaction committed id\n-     * @param consumer will be called with the description about this threshold only if the return value is true\n-     * @return true is a check point is needed, false otherwise.\n-     */\n-    boolean isCheckPointingNeeded( long lastCommittedTransactionId, Consumer<String> consumer );\n-\n-    /**\n-     * This method notifies the threshold that a check point has happened. This must be called every time a check point\n-     * has been written in the transaction log in order to make sure that the threshold updates its condition.\n-     * <p>\n-     * This is important since we might have multiple thresholds or forced check points.\n-     *\n-     * @param transactionId the latest transaction committed id used by the check point\n-     */\n-    void checkPointHappened( long transactionId );\n-\n-    /**\n-     * Return a desired checking frequency, as a number of milliseconds between calls to\n-     * {@link #isCheckPointingNeeded(long, Consumer)}.\n-     *\n-     * @return A desired scheduling frequency in milliseconds.\n-     */\n-    long checkFrequencyMillis();\n-\n-    /**\n-     * Create and configure a {@link CheckPointThreshold} based on the given configurations.\n-     */\n-    static CheckPointThreshold createThreshold(\n-            Config config, SystemNanoClock clock, LogPruning logPruning, LogProvider logProvider )\n+  long DEFAULT_CHECKING_FREQUENCY_MILLIS = TimeUnit.SECONDS.toMillis(10);\n+\n+  /**\n+   * This method initialize the threshold by providing the initial transaction id\n+   *\n+   * @param transactionId the latest transaction committed id\n+   */\n+  void initialize(long transactionId);\n+\n+  /**\n+   * This method can be used for querying the threshold about the necessity of a check point.\n+   *\n+   * @param lastCommittedTransactionId the latest transaction committed id\n+   * @param consumer                   will be called with the description about this threshold only if the return value is true\n+   * @return true is a check point is needed, false otherwise.\n+   */\n+  boolean isCheckPointingNeeded(long lastCommittedTransactionId, Consumer<String> consumer);\n+\n+  /**\n+   * This method notifies the threshold that a check point has happened. This must be called every time a check point\n+   * has been written in the transaction log in order to make sure that the threshold updates its condition.\n+   * <p>\n+   * This is important since we might have multiple thresholds or forced check points.\n+   *\n+   * @param transactionId the latest transaction committed id used by the check point\n+   */\n+  void checkPointHappened(long transactionId);\n+\n+  /**\n+   * Return a desired checking frequency, as a number of milliseconds between calls to\n+   * {@link #isCheckPointingNeeded(long, Consumer)}.\n+   *\n+   * @return A desired scheduling frequency in milliseconds.\n+   */\n+  long checkFrequencyMillis();\n+\n+  /**\n+   * Create and configure a {@link CheckPointThreshold} based on the given configurations.\n+   */\n+  static CheckPointThreshold createThreshold(\n+      Config config, SystemNanoClock clock, LogPruning logPruning, LogProvider logProvider)\n+  {\n+    String policyName = config.get(check_point_policy);\n+    CheckPointThresholdPolicy policy;\n+    try\n+    {\n+      policy = CheckPointThresholdPolicy.loadPolicy(policyName);\n+    } catch (NoSuchElementException e)\n     {\n-        String policyName = config.get( check_point_policy );\n-        CheckPointThresholdPolicy policy;\n-        try\n+      logProvider.getLog(CheckPointThreshold.class).warn(\n+          \"Could not load check point policy '\" + check_point_policy.name() + \"=\" + policyName + \"'. \" +\n+              \"Using default policy instead.\", e);\n+      policy = new PeriodicThresholdPolicy();\n+    }\n+    return policy.createThreshold(config, clock, logPruning, logProvider);\n+  }\n+\n+  /**\n+   * Create a new {@link CheckPointThreshold} which will trigger if any of the given thresholds triggers.\n+   */\n+  static CheckPointThreshold or(final CheckPointThreshold... thresholds)\n+  {\n+    return new CheckPointThreshold()\n+    {\n+      @Override\n+      public void initialize(long transactionId)\n+      {\n+        for (CheckPointThreshold threshold : thresholds)\n         {\n-            policy = CheckPointThresholdPolicy.loadPolicy( policyName );\n+          threshold.initialize(transactionId);\n         }\n-        catch ( NoSuchElementException e )\n+      }\n+\n+      @Override\n+      public boolean isCheckPointingNeeded(long transactionId, Consumer<String> consumer)\n+      {\n+        for (CheckPointThreshold threshold : thresholds)\n         {\n-            logProvider.getLog( CheckPointThreshold.class ).warn(\n-                    \"Could not load check point policy '\" + check_point_policy.name() + \"=\" + policyName + \"'. \" +\n-                    \"Using default policy instead.\", e );\n-            policy = new PeriodicThresholdPolicy();\n+          if (threshold.isCheckPointingNeeded(transactionId, consumer))\n+          {\n+            return true;\n+          }\n         }\n-        return policy.createThreshold( config, clock, logPruning, logProvider );\n-    }\n \n-    /**\n-     * Create a new {@link CheckPointThreshold} which will trigger if any of the given thresholds triggers.\n-     */\n-    static CheckPointThreshold or( final CheckPointThreshold... thresholds )\n-    {\n-        return new CheckPointThreshold()\n+        return false;\n+      }\n+\n+      @Override\n+      public void checkPointHappened(long transactionId)\n+      {\n+        for (CheckPointThreshold threshold : thresholds)\n         {\n-            @Override\n-            public void initialize( long transactionId )\n-            {\n-                for ( CheckPointThreshold threshold : thresholds )\n-                {\n-                    threshold.initialize( transactionId );\n-                }\n-            }\n-\n-            @Override\n-            public boolean isCheckPointingNeeded( long transactionId, Consumer<String> consumer )\n-            {\n-                for ( CheckPointThreshold threshold : thresholds )\n-                {\n-                    if ( threshold.isCheckPointingNeeded( transactionId, consumer ) )\n-                    {\n-                        return true;\n-                    }\n-                }\n-\n-                return false;\n-            }\n-\n-            @Override\n-            public void checkPointHappened( long transactionId )\n-            {\n-                for ( CheckPointThreshold threshold : thresholds )\n-                {\n-                    threshold.checkPointHappened( transactionId );\n-                }\n-            }\n-\n-            @Override\n-            public long checkFrequencyMillis()\n-            {\n-                return Stream.of( thresholds )\n-                             .mapToLong( CheckPointThreshold::checkFrequencyMillis )\n-                             .min().orElse( DEFAULT_CHECKING_FREQUENCY_MILLIS );\n-            }\n-        };\n-    }\n+          threshold.checkPointHappened(transactionId);\n+        }\n+      }\n+\n+      @Override\n+      public long checkFrequencyMillis()\n+      {\n+        return Stream.of(thresholds)\n+            .mapToLong(CheckPointThreshold::checkFrequencyMillis)\n+            .min().orElse(DEFAULT_CHECKING_FREQUENCY_MILLIS);\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 129
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2115/CheckPointThreshold.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2115/CheckPointThreshold.java\nindex 2bbff88d882..445c869eb1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2115/CheckPointThreshold.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2115/CheckPointThreshold.java\n@@ -31,7 +31,6 @@ import org.neo4j.time.SystemNanoClock;\n \n import static org.neo4j.graphdb.factory.GraphDatabaseSettings.check_point_policy;\n \n-\n /**\n  * A check point threshold provides information if a check point is required or not.\n  */\n@@ -76,8 +75,7 @@ public interface CheckPointThreshold\n     /**\n      * Create and configure a {@link CheckPointThreshold} based on the given configurations.\n      */\n-    static CheckPointThreshold createThreshold(\n-            Config config, SystemNanoClock clock, LogPruning logPruning, LogProvider logProvider )\n+    static CheckPointThreshold createThreshold( Config config, SystemNanoClock clock, LogPruning logPruning, LogProvider logProvider )\n     {\n         String policyName = config.get( check_point_policy );\n         CheckPointThresholdPolicy policy;\n@@ -87,12 +85,11 @@ public interface CheckPointThreshold\n         }\n         catch ( NoSuchElementException e )\n         {\n-            logProvider.getLog( CheckPointThreshold.class ).warn(\n-                    \"Could not load check point policy '\" + check_point_policy.name() + \"=\" + policyName + \"'. \" +\n-                    \"Using default policy instead.\", e );\n-            policy = new PeriodicThresholdPolicy();\n+            logProvider.getLog( CheckPointThreshold.class ).warn( \"Could not load check point policy '\" + check_point_policy.name() + \"=\" + policyName + \"'. \" + \"Using default policy instead.\", e );\n+policy = new PeriodicThresholdPolicy();\n         }\n-        return policy.createThreshold( config, clock, logPruning, logProvider );\n+\n+return policy.createThreshold( config, clock, logPruning, logProvider );\n     }\n \n     /**\n@@ -137,10 +134,8 @@ public interface CheckPointThreshold\n             @Override\n             public long checkFrequencyMillis()\n             {\n-                return Stream.of( thresholds )\n-                             .mapToLong( CheckPointThreshold::checkFrequencyMillis )\n-                             .min().orElse( DEFAULT_CHECKING_FREQUENCY_MILLIS );\n-            }\n+                return Stream.of( thresholds ).mapToLong( CheckPointThreshold::checkFrequencyMillis ).min().orElse( DEFAULT_CHECKING_FREQUENCY_MILLIS );\n+    }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}