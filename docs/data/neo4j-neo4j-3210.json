{
    "project_name": "neo4j-neo4j",
    "error_id": "3210",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3210/StatementLocks.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3210/StatementLocks.java\nindex 562d3144da0..e4c6944b802 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3210/StatementLocks.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3210/StatementLocks.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.locking;\n \n import java.util.stream.Stream;\n@@ -33,10 +34,11 @@ public interface StatementLocks extends AutoCloseable\n {\n     /**\n      * Initializes this locks instance with a {@link LeaseClient}. Must be called before the first call to {@link #pessimistic()} or {@link #optimistic()}.\n-     * @param leaseClient {@link LeaseClient} of the transaction owning this locks instance.\n+     *\n+     * @param leaseClient   {@link LeaseClient} of the transaction owning this locks instance.\n      * @param transactionId owning transaction id\n      */\n-    void initialize( LeaseClient leaseClient, long transactionId );\n+    void initialize(LeaseClient leaseClient, long transactionId);\n \n     /**\n      * Get {@link Locks.Client} responsible for pessimistic locks. Such locks will be grabbed right away.\n@@ -57,9 +59,10 @@ public interface StatementLocks extends AutoCloseable\n      * Prepare the underlying {@link Locks.Client client}(s) for commit. This will grab all locks that have\n      * previously been taken {@link #optimistic() optimistically}, and tell the underlying lock client to enter the\n      * <em>prepare</em> state.\n+     *\n      * @param lockTracer lock tracer\n      */\n-    void prepareForCommit( LockTracer lockTracer );\n+    void prepareForCommit(LockTracer lockTracer);\n \n     /**\n      * Stop the underlying {@link Locks.Client client}(s).\n@@ -74,7 +77,7 @@ public interface StatementLocks extends AutoCloseable\n \n     /**\n      * List the locks held by this transaction.\n-     *\n+     * <p>\n      * This method is invoked by concurrent threads in order to inspect the lock state in this transaction.\n      *\n      * @return the locks held by this transaction.\n@@ -83,7 +86,7 @@ public interface StatementLocks extends AutoCloseable\n \n     /**\n      * Get the current number of active locks.\n-     *\n+     * <p>\n      * Note that the value returned by this method might differ from the number of locks returned by\n      * {@link #activeLocks()}, since they would introspect the lock state at different points in time.\n      *\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}