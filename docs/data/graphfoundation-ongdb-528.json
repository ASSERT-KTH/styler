{
    "project_name": "graphfoundation-ongdb",
    "error_id": "528",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "6",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "126",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/528/BatchOperationService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/528/BatchOperationService.java\nindex f5524354642..cbf526b03c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/528/BatchOperationService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/528/BatchOperationService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.web;\n \n import org.eclipse.jetty.util.log.Log;\n@@ -49,135 +50,129 @@ import org.neo4j.udc.UsageData;\n import static org.neo4j.udc.UsageDataKeys.Features.http_batch_endpoint;\n import static org.neo4j.udc.UsageDataKeys.features;\n \n-@Path( \"/batch\" )\n+@Path(\"/batch\")\n public class BatchOperationService\n {\n \n-    private static final Logger LOGGER = Log.getLogger(BatchOperationService.class);\n-\n-    private final OutputFormat output;\n-    private final WebServer webServer;\n-    private final UsageData usage;\n-    private RepresentationWriteHandler representationWriteHandler = RepresentationWriteHandler.DO_NOTHING;\n-\n-    public BatchOperationService( @Context WebServer webServer, @Context OutputFormat output, @Context UsageData usage )\n-    {\n-        this.output = output;\n-        this.webServer = webServer;\n-        this.usage = usage;\n-    }\n-\n-    public void setRepresentationWriteHandler( RepresentationWriteHandler representationWriteHandler )\n+  private static final Logger LOGGER = Log.getLogger(BatchOperationService.class);\n+\n+  private final OutputFormat output;\n+  private final WebServer webServer;\n+  private final UsageData usage;\n+  private RepresentationWriteHandler representationWriteHandler = RepresentationWriteHandler.DO_NOTHING;\n+\n+  public BatchOperationService(@Context WebServer webServer, @Context OutputFormat output, @Context UsageData usage)\n+  {\n+    this.output = output;\n+    this.webServer = webServer;\n+    this.usage = usage;\n+  }\n+\n+  public void setRepresentationWriteHandler(RepresentationWriteHandler representationWriteHandler)\n+  {\n+    this.representationWriteHandler = representationWriteHandler;\n+  }\n+\n+  @POST\n+  public Response performBatchOperations(@Context UriInfo uriInfo,\n+                                         @Context HttpHeaders httpHeaders, @Context HttpServletRequest req, InputStream body)\n+  {\n+    usage.get(features).flag(http_batch_endpoint);\n+    if (isStreaming(httpHeaders))\n     {\n-        this.representationWriteHandler = representationWriteHandler;\n-    }\n-\n-    @POST\n-    public Response performBatchOperations( @Context UriInfo uriInfo,\n-            @Context HttpHeaders httpHeaders, @Context HttpServletRequest req, InputStream body )\n-    {\n-        usage.get( features ).flag( http_batch_endpoint );\n-        if ( isStreaming( httpHeaders ) )\n-        {\n-            return batchProcessAndStream( uriInfo, httpHeaders, req, body );\n-        }\n-        return batchProcess( uriInfo, httpHeaders, req, body );\n+      return batchProcessAndStream(uriInfo, httpHeaders, req, body);\n     }\n+    return batchProcess(uriInfo, httpHeaders, req, body);\n+  }\n \n-    private Response batchProcessAndStream( final UriInfo uriInfo, final HttpHeaders httpHeaders,\n-                                            final HttpServletRequest req, final InputStream body )\n+  private Response batchProcessAndStream(final UriInfo uriInfo, final HttpHeaders httpHeaders,\n+                                         final HttpServletRequest req, final InputStream body)\n+  {\n+    try\n     {\n+      final StreamingOutput stream = output ->\n+      {\n         try\n         {\n-            final StreamingOutput stream = output ->\n+          final ServletOutputStream servletOutputStream = new ServletOutputStream()\n+          {\n+            @Override\n+            public void write(int i) throws IOException\n             {\n-                try\n-                {\n-                    final ServletOutputStream servletOutputStream = new ServletOutputStream()\n-                    {\n-                        @Override\n-                        public void write( int i ) throws IOException\n-                        {\n-                            output.write( i );\n-                        }\n-\n-                        @Override\n-                        public boolean isReady()\n-                        {\n-                            return true;\n-                        }\n-\n-                        @Override\n-                        public void setWriteListener( WriteListener writeListener )\n-                        {\n-                            try\n-                            {\n-                                writeListener.onWritePossible();\n-                            }\n-                            catch ( IOException e )\n-                            {\n-                                // Ignore\n-                            }\n-                        }\n-                    };\n-                    new StreamingBatchOperations( webServer ).readAndExecuteOperations( uriInfo, httpHeaders, req,\n-                            body, servletOutputStream );\n-                    representationWriteHandler.onRepresentationWritten();\n-                }\n-                catch ( Exception e )\n-                {\n-                    LOGGER.warn( \"Error executing batch request \", e );\n-                }\n-                finally\n-                {\n-                    representationWriteHandler.onRepresentationFinal();\n-                }\n-            };\n-            return Response.ok(stream)\n-                    .type( HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE) ).build();\n-        }\n-        catch ( Exception e )\n-        {\n-            return output.serverError( e );\n-        }\n-    }\n+              output.write(i);\n+            }\n \n-    private Response batchProcess( UriInfo uriInfo, HttpHeaders httpHeaders, HttpServletRequest req, InputStream body )\n-    {\n-        try\n-        {\n-            NonStreamingBatchOperations batchOperations = new NonStreamingBatchOperations( webServer );\n-            BatchOperationResults results = batchOperations.performBatchJobs( uriInfo, httpHeaders, req, body );\n+            @Override\n+            public boolean isReady()\n+            {\n+              return true;\n+            }\n \n-            Response res = Response.ok().entity(results.toJSON())\n-                    .type(HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE)).build();\n-            representationWriteHandler.onRepresentationWritten();\n-            return res;\n-        }\n-        catch ( Exception e )\n+            @Override\n+            public void setWriteListener(WriteListener writeListener)\n+            {\n+              try\n+              {\n+                writeListener.onWritePossible();\n+              } catch (IOException e)\n+              {\n+                // Ignore\n+              }\n+            }\n+          };\n+          new StreamingBatchOperations(webServer).readAndExecuteOperations(uriInfo, httpHeaders, req,\n+              body, servletOutputStream);\n+          representationWriteHandler.onRepresentationWritten();\n+        } catch (Exception e)\n         {\n-            return output.serverError( e );\n-        }\n-        finally\n+          LOGGER.warn(\"Error executing batch request \", e);\n+        } finally\n         {\n-            representationWriteHandler.onRepresentationFinal();\n+          representationWriteHandler.onRepresentationFinal();\n         }\n+      };\n+      return Response.ok(stream)\n+          .type(HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE)).build();\n+    } catch (Exception e)\n+    {\n+      return output.serverError(e);\n     }\n+  }\n \n-    private boolean isStreaming( HttpHeaders httpHeaders )\n+  private Response batchProcess(UriInfo uriInfo, HttpHeaders httpHeaders, HttpServletRequest req, InputStream body)\n+  {\n+    try\n     {\n-        if ( \"true\".equalsIgnoreCase( httpHeaders.getRequestHeaders().getFirst( StreamingFormat.STREAM_HEADER ) ) )\n-        {\n-            return true;\n-        }\n-        for ( MediaType mediaType : httpHeaders.getAcceptableMediaTypes() )\n-        {\n-            Map<String, String> parameters = mediaType.getParameters();\n-            if ( parameters.containsKey( \"stream\" ) && \"true\".equalsIgnoreCase( parameters.get( \"stream\" ) ) )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+      NonStreamingBatchOperations batchOperations = new NonStreamingBatchOperations(webServer);\n+      BatchOperationResults results = batchOperations.performBatchJobs(uriInfo, httpHeaders, req, body);\n+\n+      Response res = Response.ok().entity(results.toJSON())\n+          .type(HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE)).build();\n+      representationWriteHandler.onRepresentationWritten();\n+      return res;\n+    } catch (Exception e)\n+    {\n+      return output.serverError(e);\n+    } finally\n+    {\n+      representationWriteHandler.onRepresentationFinal();\n+    }\n+  }\n+\n+  private boolean isStreaming(HttpHeaders httpHeaders)\n+  {\n+    if (\"true\".equalsIgnoreCase(httpHeaders.getRequestHeaders().getFirst(StreamingFormat.STREAM_HEADER)))\n+    {\n+      return true;\n+    }\n+    for (MediaType mediaType : httpHeaders.getAcceptableMediaTypes())\n+    {\n+      Map<String, String> parameters = mediaType.getParameters();\n+      if (parameters.containsKey(\"stream\") && \"true\".equalsIgnoreCase(parameters.get(\"stream\")))\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n }\n",
            "diff_size": 169
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/528/BatchOperationService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/528/BatchOperationService.java\nindex f5524354642..06f8260b4c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/528/BatchOperationService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/528/BatchOperationService.java\n@@ -52,8 +52,7 @@ import static org.neo4j.udc.UsageDataKeys.features;\n @Path( \"/batch\" )\n public class BatchOperationService\n {\n-\n-    private static final Logger LOGGER = Log.getLogger(BatchOperationService.class);\n+    private static final Logger LOGGER = Log.getLogger(BatchOperationService.class );\n \n     private final OutputFormat output;\n     private final WebServer webServer;\n@@ -81,12 +80,12 @@ public class BatchOperationService\n         {\n             return batchProcessAndStream( uriInfo, httpHeaders, req, body );\n         }\n-        return batchProcess( uriInfo, httpHeaders, req, body );\n+\n+return batchProcess( uriInfo, httpHeaders, req, body );\n     }\n \n-    private Response batchProcessAndStream( final UriInfo uriInfo, final HttpHeaders httpHeaders,\n-                                            final HttpServletRequest req, final InputStream body )\n-    {\n+    private Response batchProcessAndStream( final UriInfo uriInfo, final HttpHeaders httpHeaders, final HttpServletRequest req, final InputStream body )\n+{\n         try\n         {\n             final StreamingOutput stream = output ->\n@@ -122,7 +121,7 @@ public class BatchOperationService\n                     };\n                     new StreamingBatchOperations( webServer ).readAndExecuteOperations( uriInfo, httpHeaders, req,\n                             body, servletOutputStream );\n-                    representationWriteHandler.onRepresentationWritten();\n+representationWriteHandler.onRepresentationWritten();\n                 }\n                 catch ( Exception e )\n                 {\n@@ -133,9 +132,8 @@ public class BatchOperationService\n                     representationWriteHandler.onRepresentationFinal();\n                 }\n             };\n-            return Response.ok(stream)\n-                    .type( HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE) ).build();\n-        }\n+            return Response.ok(stream).type( HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE) ).build();\n+    }\n         catch ( Exception e )\n         {\n             return output.serverError( e );\n@@ -148,10 +146,8 @@ public class BatchOperationService\n         {\n             NonStreamingBatchOperations batchOperations = new NonStreamingBatchOperations( webServer );\n             BatchOperationResults results = batchOperations.performBatchJobs( uriInfo, httpHeaders, req, body );\n-\n-            Response res = Response.ok().entity(results.toJSON())\n-                    .type(HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE)).build();\n-            representationWriteHandler.onRepresentationWritten();\n+Response res = Response.ok().entity(results.toJSON()).type(HttpHeaderUtils.mediaTypeWithCharsetUtf8(MediaType.APPLICATION_JSON_TYPE )).build();\n+representationWriteHandler.onRepresentationWritten();\n             return res;\n         }\n         catch ( Exception e )\n@@ -172,7 +168,7 @@ public class BatchOperationService\n         }\n         for ( MediaType mediaType : httpHeaders.getAcceptableMediaTypes() )\n         {\n-            Map<String, String> parameters = mediaType.getParameters();\n+            Map<String,String> parameters = mediaType.getParameters();\n             if ( parameters.containsKey( \"stream\" ) && \"true\".equalsIgnoreCase( parameters.get( \"stream\" ) ) )\n             {\n                 return true;\n@@ -180,4 +176,4 @@ public class BatchOperationService\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}