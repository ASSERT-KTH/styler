{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "371",
    "information": {
        "errors": [
            {
                "line": "175",
                "column": "9",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        else\n        {\n        \t// For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n        \t// request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n    \t\tString computedTns = module.computeTargetNamespace();\n        \tHashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "177",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/371/XMLSchemaParser.java\nindex 1bd055728dc..677a323f1b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/371/XMLSchemaParser.java\n@@ -172,8 +172,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n         else\n         {\n-        \t// For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n-        \t// request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n+        // For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n+         // request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n     \t\tString computedTns = module.computeTargetNamespace();\n         \tHashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);\n         \tif(tnsSet != null)\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/371/XMLSchemaParser.java\nindex 1bd055728dc..3fe3a2c968b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/371/XMLSchemaParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.impl;\n \n import java.io.IOException;\n@@ -138,10 +139,10 @@ import org.genxdm.xs.types.SimpleType;\n  * <li>Maximise the feedback from parsing by choosing when to throw/catch\n  * </ul>\n  */\n-final class XMLSchemaParser extends XMLRepresentation\n-{\n-    public XMLSchemaParser(final ComponentProvider bootstrap, final SchemaExceptionHandler errors, final SchemaCatalog catalog, final CatalogResolver resolver, boolean processRepeatedNamespaces)\n-    {\n+final class XMLSchemaParser extends XMLRepresentation {\n+    public XMLSchemaParser(final ComponentProvider bootstrap, final SchemaExceptionHandler errors,\n+                           final SchemaCatalog catalog, final CatalogResolver resolver,\n+                           boolean processRepeatedNamespaces) {\n         this.bootstrap = PreCondition.assertArgumentNotNull(bootstrap, \"bootstrap\");\n         this.atoms = new CanonicalAtomBridge(bootstrap);\n         this.m_pms = new PrefixMappingSupport();\n@@ -150,50 +151,39 @@ final class XMLSchemaParser extends XMLRepresentation\n         this.m_resolver = resolver;\n         this.m_processRepeatedNamespaces = processRepeatedNamespaces;\n         this.m_xp = new DefaultRestrictedXPathParser(bootstrap);\n-        ANY_SIMPLE_TYPE = new XMLTypeRef(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, \"anySimpleType\"));\n+        ANY_SIMPLE_TYPE =\n+            new XMLTypeRef(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, \"anySimpleType\"));\n         ANY_TYPE = new XMLTypeRef(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, \"anyType\"));\n     }\n \n-    public void parse(final String systemId, final InputStream istream, final XMLSchemaCache cache, final XMLSchemaModule module) throws AbortException\n-    {\n+    public void parse(final String systemId, final InputStream istream, final XMLSchemaCache cache,\n+                      final XMLSchemaModule module) throws AbortException {\n         PreCondition.assertArgumentNotNull(cache, \"cache\");\n         PreCondition.assertArgumentNotNull(module, \"module\");\n \n-        if(!module.isChameleon())\n-        {\n-            if (cache.m_seenSystemIds.contains(systemId))\n-            {\n+        if (!module.isChameleon()) {\n+            if (cache.m_seenSystemIds.contains(systemId)) {\n                 return;\n-            }\n-            else\n-            {\n+            } else {\n                 cache.m_seenSystemIds.add(systemId);\n             }\n-        }\n-        else\n-        {\n-        \t// For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n-        \t// request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n-    \t\tString computedTns = module.computeTargetNamespace();\n-        \tHashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);\n-        \tif(tnsSet != null)\n-        \t{\n-        \t\tif(tnsSet.contains(computedTns))\n-        \t\t{\n-        \t\t\t// Stop parsing.  We've already parsed this chameleon into this namespace.\n-        \t\t\treturn;\n-        \t\t}\n-        \t\telse\n-        \t\t{\n-        \t\t\ttnsSet.add(computedTns);\n-        \t\t}\n-        \t}\n-        \telse\n-        \t{\n-        \t\tfinal HashSet<String> newList = new HashSet<String>();\n-        \t\tnewList.add(computedTns);\n-        \t\tcache.m_seenChameleonsLocation2Tns.put(systemId, newList);\n-        \t}\n+        } else {\n+            // For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n+            // request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n+            String computedTns = module.computeTargetNamespace();\n+            HashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);\n+            if (tnsSet != null) {\n+                if (tnsSet.contains(computedTns)) {\n+                    // Stop parsing.  We've already parsed this chameleon into this namespace.\n+                    return;\n+                } else {\n+                    tnsSet.add(computedTns);\n+                }\n+            } else {\n+                final HashSet<String> newList = new HashSet<String>();\n+                newList.add(computedTns);\n+                cache.m_seenChameleonsLocation2Tns.put(systemId, newList);\n+            }\n         }\n \n         final XMLInputFactory factory = XMLInputFactory.newInstance();\n@@ -203,26 +193,18 @@ final class XMLSchemaParser extends XMLRepresentation\n         // into a URL, which is not always possible (for instance, urn-s).\n         XMLStreamReader reader = null;\n         boolean tryNull = (systemId == null);\n-        if (systemId != null)\n-        {\n-            try\n-            {\n+        if (systemId != null) {\n+            try {\n                 reader = factory.createXMLStreamReader(systemId.toString(), istream);\n-            }\n-            catch (final XMLStreamException xse)\n-            {\n+            } catch (final XMLStreamException xse) {\n                 // ignore it this time around; try again:\n                 tryNull = true;\n             }\n         }\n-        if (tryNull)\n-        {\n-            try\n-            {\n+        if (tryNull) {\n+            try {\n                 reader = factory.createXMLStreamReader(null, istream);\n-            }\n-            catch (final XMLStreamException xse)\n-            {\n+            } catch (final XMLStreamException xse) {\n                 // TODO: figure out what happens.  following comment was in received code.\n                 // I'm not sure what has happened here, but it doesn't fit into the\n                 // category of not\n@@ -232,235 +214,185 @@ final class XMLSchemaParser extends XMLRepresentation\n                 throw new GenXDMException(xse);\n             }\n         }\n-        \n-        try\n-        {\n+\n+        try {\n             boolean done = false;\n \n-            while (!done)\n-            {\n+            while (!done) {\n                 final int event = reader.next();\n \n-                switch (event)\n-                {\n-                    case XMLStreamConstants.END_DOCUMENT:\n-                    {\n+                switch (event) {\n+                    case XMLStreamConstants.END_DOCUMENT: {\n                         reader.close();\n                         done = true;\n                     }\n                     break;\n-                    case XMLStreamConstants.START_ELEMENT:\n-                    {\n+                    case XMLStreamConstants.START_ELEMENT: {\n                         m_pms.pushContext();\n-                        try\n-                        {\n+                        try {\n                             copyNamespaces(reader, m_pms);\n-                            if (isWXS(reader.getNamespaceURI()))\n-                            {\n+                            if (isWXS(reader.getNamespaceURI())) {\n                                 final String localName = reader.getLocalName();\n-                                if (LN_SCHEMA.equals(localName))\n-                                {\n+                                if (LN_SCHEMA.equals(localName)) {\n                                     schemaTag(reader, cache, module);\n-                                }\n-                                else\n-                                {\n-                                    reportUnexpectedElementTag(\"document\", reader.getName(), reader.getLocation());\n+                                } else {\n+                                    reportUnexpectedElementTag(\"document\", reader.getName(),\n+                                        reader.getLocation());\n                                     skipTag(reader);\n                                 }\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(\"document\", reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(\"document\", reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        finally\n-                        {\n+                        } finally {\n                             m_pms.popContext();\n                         }\n                     }\n                     break;\n-                    default:\n-                    {\n+                    default: {\n                         // ignore\n                     }\n                 }\n             }\n-        }\n-        catch (final XMLStreamException e)\n-        {\n-            if (module.isImport())\n-            {\n-                m_errors.error(new SmImportNotWellFormedException(getFrozenLocation(reader.getLocation())));\n-            }\n-            else if (module.isInclude())\n-            {\n-                m_errors.error(new SmInclusionNotWellFormedException(getFrozenLocation(reader.getLocation())));\n-            }\n-            else if (module.isRedefine())\n-            {\n-                m_errors.error(new SmRedefinitionNotWellFormedException(getFrozenLocation(reader.getLocation())));\n-            }\n-            else\n+        } catch (final XMLStreamException e) {\n+            if (module.isImport()) {\n+                m_errors.error(\n+                    new SmImportNotWellFormedException(getFrozenLocation(reader.getLocation())));\n+            } else if (module.isInclude()) {\n+                m_errors.error(\n+                    new SmInclusionNotWellFormedException(getFrozenLocation(reader.getLocation())));\n+            } else if (module.isRedefine()) {\n+                m_errors.error(new SmRedefinitionNotWellFormedException(\n+                    getFrozenLocation(reader.getLocation())));\n+            } else\n             // must be top level schema\n             {\n-                m_errors.error(new SmTopLevelSchemaNotWellFormedException(getFrozenLocation(reader.getLocation())));\n+                m_errors.error(new SmTopLevelSchemaNotWellFormedException(\n+                    getFrozenLocation(reader.getLocation())));\n             }\n         }\n     }\n \n-    private void annotationContent(final String contextName, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n+    private void annotationContent(final String contextName, final XMLStreamReader reader,\n+                                   final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException {\n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, contextName, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, contextName,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(contextName, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n-                            reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                        } else {\n+                            reportUnexpectedElementTag(contextName, reader.getName(),\n+                                reader.getLocation());\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n-                case XMLStreamConstants.CHARACTERS:\n-                {\n+                case XMLStreamConstants.CHARACTERS: {\n                     final String text = reader.getText();\n-                    if (!isWhiteSpace(text))\n-                    {\n-                        reportUnexpectedNonWhiteSpaceTextInElementOnlyContent(contextName, text, reader.getLocation());\n+                    if (!isWhiteSpace(text)) {\n+                        reportUnexpectedNonWhiteSpaceTextInElementOnlyContent(contextName, text,\n+                            reader.getLocation());\n                     }\n                 }\n                 break;\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private void annotationTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n+    private void annotationTag(final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException {\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // ignore foreign attributes?\n                 // {any attributes with non-schema namespace}\n             }\n         }\n \n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (\"documentation\".equals(localName))\n-                            {\n+                            if (\"documentation\".equals(localName)) {\n                                 documentationTag(reader);\n-                            }\n-                            else if (\"appinfo\".equals(localName))\n-                            {\n+                            } else if (\"appinfo\".equals(localName)) {\n                                 appinfoTag(reader);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ANNOTATION, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ANNOTATION, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -470,112 +402,88 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:anyAttribute.\n      */\n-    private XMLWildcard anyAttributeTag(final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n+    private XMLWildcard anyAttributeTag(final XMLStreamReader reader, final String targetNamespace,\n+                                        final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException {\n         ProcessContentsMode processContents = ProcessContentsMode.Strict;\n         NamespaceConstraint namespaceConstraint = NamespaceConstraint.Any();\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_NAMESPACE.equals(localName))\n-                {\n-                    try\n-                    {\n-                        namespaceConstraint = namespaces(reader.getAttributeValue(i), targetNamespace);\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_PROCESS_CONTENTS.equals(localName))\n-                {\n-                    try\n-                    {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_NAMESPACE.equals(localName)) {\n+                    try {\n+                        namespaceConstraint =\n+                            namespaces(reader.getAttributeValue(i), targetNamespace);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_PROCESS_CONTENTS.equals(localName)) {\n+                    try {\n                         processContents = processContents(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ANY_ATTRIBUTE, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_ANY_ATTRIBUTE,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ANY_ATTRIBUTE, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ANY_ATTRIBUTE, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -589,8 +497,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:any\n      */\n-    private XMLParticle anyElementTag(final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n+    private XMLParticle anyElementTag(final XMLStreamReader reader, final String targetNamespace,\n+                                      final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException {\n         ProcessContentsMode processContents = ProcessContentsMode.Strict;\n         NamespaceConstraint namespaceConstraint = NamespaceConstraint.Any();\n \n@@ -598,114 +507,86 @@ final class XMLSchemaParser extends XMLRepresentation\n         BigInteger maxOccurs = BigInteger.ONE;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_MAX_OCCURS.equals(localName))\n-                {\n-                    maxOccurs = maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_MIN_OCCURS.equals(localName))\n-                {\n-                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_NAMESPACE.equals(localName))\n-                {\n-                    try\n-                    {\n-                        namespaceConstraint = namespaces(reader.getAttributeValue(i), targetNamespace);\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_PROCESS_CONTENTS.equals(localName))\n-                {\n-                    try\n-                    {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_MAX_OCCURS.equals(localName)) {\n+                    maxOccurs = maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_MIN_OCCURS.equals(localName)) {\n+                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_NAMESPACE.equals(localName)) {\n+                    try {\n+                        namespaceConstraint =\n+                            namespaces(reader.getAttributeValue(i), targetNamespace);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_PROCESS_CONTENTS.equals(localName)) {\n+                    try {\n                         processContents = processContents(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ANY, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ANY,\n+                                    reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ANY, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ANY, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -713,82 +594,66 @@ final class XMLSchemaParser extends XMLRepresentation\n         final XMLWildcard wildcard = new XMLWildcard(processContents, namespaceConstraint);\n         wildcard.foreignAttributes.putAll(foreignAttributes);\n         foreignAttributes.clear();\n-        return new XMLParticleWithWildcardTerm(minOccurs, maxOccurs, wildcard, getFrozenLocation(reader.getLocation()));\n+        return new XMLParticleWithWildcardTerm(minOccurs, maxOccurs, wildcard,\n+            getFrozenLocation(reader.getLocation()));\n     }\n \n-    private void appinfoTag(final XMLStreamReader reader) throws XMLStreamException, AbortException\n-    {\n+    private void appinfoTag(final XMLStreamReader reader)\n+        throws XMLStreamException, AbortException {\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_SOURCE.equals(localName))\n-                {\n-                    /* final String source = */reader.getAttributeValue(i);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (LN_SOURCE.equals(localName)) {\n+                    /* final String source = */\n+                    reader.getAttributeValue(i);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // foreign attributes not allowed on appinfo (I think)\n                 // {any attributes with non-schema namespace}\n             }\n         }\n \n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n                         skipTag(reader);\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private void assertRefAbsent(final QName ref, final Location location) throws AbortException\n-    {\n-        if (null != ref)\n-        {\n+    private void assertRefAbsent(final QName ref, final Location location) throws AbortException {\n+        if (null != ref) {\n             m_errors.error(new SmElementRefPresentException(getFrozenLocation(location)));\n         }\n     }\n@@ -796,55 +661,44 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:attributeGroup (reference)\n      */\n-    private XMLAttributeGroup attribGroupRefTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws XMLStreamException, XMLAttributeGroupException, AbortException\n-    {\n+    private XMLAttributeGroup attribGroupRefTag(final XMLStreamReader reader,\n+                                                final XMLSchemaCache cache,\n+                                                final XMLSchemaModule module,\n+                                                final String targetNamespace)\n+        throws XMLStreamException, XMLAttributeGroupException, AbortException {\n         final QName ref;\n-        try\n-        {\n+        try {\n             ref = requiredQName(LN_REF, module.isChameleon(), targetNamespace, reader);\n-        }\n-        catch (final SmComplexTypeException e)\n-        {\n+        } catch (final SmComplexTypeException e) {\n             skipTag(reader);\n             throw new XMLAttributeGroupException(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_REF.equals(localName))\n-                {\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_REF.equals(localName)) {\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         final XMLAttributeGroup attributeGroup;\n-        try\n-        {\n+        try {\n             attributeGroup = cache.dereferenceAttributeGroup(ref, reader.getLocation(), false);\n-        }\n-        catch (final SchemaException e)\n-        {\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLAttributeGroupException(e);\n         }\n@@ -852,58 +706,46 @@ final class XMLSchemaParser extends XMLRepresentation\n         foreignAttributes.clear();\n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ATTRIBUTE_GROUP, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_ATTRIBUTE_GROUP,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ATTRIBUTE_GROUP, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ATTRIBUTE_GROUP, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -915,21 +757,22 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:attributeGroup (global definition)\n      */\n-    private XMLAttributeGroup attribGroupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLAttributeGroupException, AbortException\n-    {\n+    private XMLAttributeGroup attribGroupTag(final XMLStreamReader reader,\n+                                             final XMLSchemaCache cache,\n+                                             final XMLSchemaModule module, final boolean redefine,\n+                                             final String targetNamespace)\n+        throws XMLStreamException, XMLAttributeGroupException, AbortException {\n         final XMLAttributeGroup attributeGroup;\n         final LinkedList<XMLAttributeUse> savedLocalAttributes;\n         final LinkedList<XMLAttributeGroup> savedReferencedAttributeGroups;\n         final XMLWildcard savedWildcard;\n         final HashSet<QName> savedProhibited;\n-        if (!redefine)\n-        {\n-            try\n-            {\n-                attributeGroup = cache.registerAttributeGroup(requiredNCName(LN_NAME, targetNamespace, reader), getFrozenLocation(reader.getLocation()));\n-            }\n-            catch (final SchemaException e)\n-            {\n+        if (!redefine) {\n+            try {\n+                attributeGroup = cache\n+                    .registerAttributeGroup(requiredNCName(LN_NAME, targetNamespace, reader),\n+                        getFrozenLocation(reader.getLocation()));\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLAttributeGroupException(e);\n             }\n@@ -937,26 +780,25 @@ final class XMLSchemaParser extends XMLRepresentation\n             savedReferencedAttributeGroups = null;\n             savedWildcard = null;\n             savedProhibited = null;\n-        }\n-        else\n-        {\n-            try\n-            {\n-                attributeGroup = cache.dereferenceAttributeGroup(requiredNCName(LN_NAME, targetNamespace, reader), reader.getLocation(), true/*\n-                                                                                                                                             * must\n-                                                                                                                                             * exist\n-                                                                                                                                             */);\n-            }\n-            catch (final SchemaException e)\n-            {\n+        } else {\n+            try {\n+                attributeGroup = cache\n+                    .dereferenceAttributeGroup(requiredNCName(LN_NAME, targetNamespace, reader),\n+                        reader.getLocation(), true/*\n+                         * must\n+                         * exist\n+                         */);\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLAttributeGroupException(e);\n             }\n \n-            savedLocalAttributes = new LinkedList<XMLAttributeUse>(attributeGroup.getAttributeUses());\n+            savedLocalAttributes =\n+                new LinkedList<XMLAttributeUse>(attributeGroup.getAttributeUses());\n             attributeGroup.getAttributeUses().clear();\n \n-            savedReferencedAttributeGroups = new LinkedList<XMLAttributeGroup>(attributeGroup.getGroups());\n+            savedReferencedAttributeGroups =\n+                new LinkedList<XMLAttributeGroup>(attributeGroup.getGroups());\n             attributeGroup.getGroups().clear();\n \n             savedProhibited = new HashSet<QName>(attributeGroup.prohibited);\n@@ -967,142 +809,109 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_NAME.equals(localName))\n-                {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_NAME.equals(localName)) {\n                     // Already known.\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                attributeGroup.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                attributeGroup.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ATTRIBUTE_GROUP, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_ATTRIBUTE_GROUP,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else if (LN_ATTRIBUTE.equals(localName))\n-                            {\n-                                attributeLocalTag(reader, cache, module, redefine, targetNamespace, attributeGroup.getAttributeUses(), attributeGroup.prohibited, new XMLScope(attributeGroup));\n+                            } else if (LN_ATTRIBUTE.equals(localName)) {\n+                                attributeLocalTag(reader, cache, module, redefine, targetNamespace,\n+                                    attributeGroup.getAttributeUses(), attributeGroup.prohibited,\n+                                    new XMLScope(attributeGroup));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                            {\n-                                final XMLAttributeGroup ag = attribGroupRefTag(reader, cache, module, targetNamespace);\n-                                if (!redefine)\n-                                {\n+                            } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                final XMLAttributeGroup ag =\n+                                    attribGroupRefTag(reader, cache, module, targetNamespace);\n+                                if (!redefine) {\n                                     attributeGroup.getGroups().add(ag);\n-                                }\n-                                else\n-                                {\n-                                    if (attributeGroup == ag)\n-                                    {\n-                                        for (final XMLAttributeUse attributeUse : savedLocalAttributes)\n-                                        {\n+                                } else {\n+                                    if (attributeGroup == ag) {\n+                                        for (final XMLAttributeUse attributeUse : savedLocalAttributes) {\n                                             attributeGroup.getAttributeUses().add(attributeUse);\n                                         }\n-                                        for (final XMLAttributeGroup reference : savedReferencedAttributeGroups)\n-                                        {\n+                                        for (final XMLAttributeGroup reference : savedReferencedAttributeGroups) {\n                                             attributeGroup.getGroups().add(reference);\n                                         }\n-                                        for (final QName name : savedProhibited)\n-                                        {\n+                                        for (final QName name : savedProhibited) {\n                                             attributeGroup.prohibited.add(name);\n                                         }\n                                         attributeGroup.wildcard = savedWildcard;\n-                                    }\n-                                    else\n-                                    {\n+                                    } else {\n                                         attributeGroup.getGroups().add(ag);\n                                     }\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANY_ATTRIBUTE.equals(localName))\n-                            {\n-                                attributeGroup.wildcard = anyAttributeTag(reader, targetNamespace, module);\n+                            } else if (LN_ANY_ATTRIBUTE.equals(localName)) {\n+                                attributeGroup.wildcard =\n+                                    anyAttributeTag(reader, targetNamespace, module);\n                                 firstElement = false;\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ATTRIBUTE_GROUP, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ATTRIBUTE_GROUP, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n \n-        if (!redefine)\n-        {\n+        if (!redefine) {\n             return attributeGroup;\n-        }\n-        else\n-        {\n+        } else {\n             // This would be a copy of the original.\n             return null;\n         }\n@@ -1111,8 +920,12 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:attribute (reference or local definition)\n      */\n-    private void attributeLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final LinkedList<XMLAttributeUse> attributeUses, final HashSet<QName> prohibited, final XMLScope scope) throws XMLStreamException, AbortException\n-    {\n+    private void attributeLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                   final XMLSchemaModule module, final boolean redefine,\n+                                   final String targetNamespace,\n+                                   final LinkedList<XMLAttributeUse> attributeUses,\n+                                   final HashSet<QName> prohibited, final XMLScope scope)\n+        throws XMLStreamException, AbortException {\n         String name = null;\n         XMLTypeRef type = null;\n         final QName ref = referenceOptional(reader, LN_REF, module, targetNamespace);\n@@ -1125,126 +938,97 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean seenDefault = false;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_DEFAULT.equals(localName))\n-                {\n+                if (LN_DEFAULT.equals(localName)) {\n                     seenDefault = true;\n-                    if (null == valueConstraint)\n-                    {\n-                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n-                    if (null == valueConstraint)\n-                    {\n-                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FORM.equals(localName))\n-                {\n+                    if (null == valueConstraint) {\n+                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default,\n+                            reader.getAttributeName(i), reader.getAttributeValue(i),\n+                            getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FIXED.equals(localName)) {\n+                    if (null == valueConstraint) {\n+                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed,\n+                            reader.getAttributeName(i), reader.getAttributeValue(i),\n+                            getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FORM.equals(localName)) {\n                     seenForm = true;\n-                    try\n-                    {\n+                    try {\n                         qualified = qualified(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_NAME.equals(localName))\n-                {\n-                    try\n-                    {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else if (LN_NAME.equals(localName)) {\n+                    try {\n                         name = name(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_REF.equals(localName))\n-                {\n-                }\n-                else if (LN_TYPE.equals(localName))\n-                {\n-                    try\n-                    {\n-                        type = typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(), targetNamespace, reader);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_REF.equals(localName)) {\n+                } else if (LN_TYPE.equals(localName)) {\n+                    try {\n+                        type = typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(),\n+                            targetNamespace, reader);\n                         ensureReferenceType(type.getName(), reader.getLocation(), false, cache);\n-                    }\n-                    catch (final SmComplexTypeException e)\n-                    {\n+                    } catch (final SmComplexTypeException e) {\n                         m_errors.error(e);\n                     }\n-                }\n-                else if (LN_USE.equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (LN_USE.equals(localName)) {\n+                    try {\n                         use = use(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         // If default and use are both present, use must have the actual value\n         // optional.\n-        if (seenDefault)\n-        {\n-            if (use.getMinOccurs() != 0 || use.getMaxOccurs() != 1)\n-            {\n-                m_errors.error(new SmAttributeDefaultAndUseImpliesOptionalException(getFrozenLocation(reader.getLocation())));\n+        if (seenDefault) {\n+            if (use.getMinOccurs() != 0 || use.getMaxOccurs() != 1) {\n+                m_errors.error(new SmAttributeDefaultAndUseImpliesOptionalException(\n+                    getFrozenLocation(reader.getLocation())));\n             }\n         }\n \n         // The following test only applies to local attributes.\n-        if ((null != ref) && (seenForm || (null != type)))\n-        {\n-            m_errors.error(new SmAttributeRefPresentException(getFrozenLocation(reader.getLocation())));\n+        if ((null != ref) && (seenForm || (null != type))) {\n+            m_errors\n+                .error(new SmAttributeRefPresentException(getFrozenLocation(reader.getLocation())));\n         }\n \n         final XMLAttribute attribute;\n-        try\n-        {\n-            attribute = determineLocalAttribute(name, qualified, ref, cache, reader, targetNamespace, scope);\n-        }\n-        catch (final SchemaException e)\n-        {\n+        try {\n+            attribute =\n+                determineLocalAttribute(name, qualified, ref, cache, reader, targetNamespace,\n+                    scope);\n+        } catch (final SchemaException e) {\n             m_errors.error(e);\n             skipTag(reader);\n             return;\n@@ -1252,72 +1036,57 @@ final class XMLSchemaParser extends XMLRepresentation\n         attribute.foreignAttributes.putAll(foreignAttributes);\n         foreignAttributes.clear();\n         attribute.id = id;\n-        if (null != type)\n-        {\n+        if (null != type) {\n             attribute.typeRef = type;\n         }\n \n-        final ContentModelMachine<String> machine = new ContentModelMachine<String>(attributeTable, EPSILON);\n+        final ContentModelMachine<String> machine =\n+            new ContentModelMachine<String>(attributeTable, EPSILON);\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (!machine.step(localName))\n-                            {\n-                                reportUnexpectedElementTag(LN_ATTRIBUTE, reader.getName(), reader.getLocation());\n+                            if (!machine.step(localName)) {\n+                                reportUnexpectedElementTag(LN_ATTRIBUTE, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n-                            }\n-                            else\n-                            {\n-                                if (LN_SIMPLE_TYPE.equals(localName))\n-                                {\n-                                    if (null != ref)\n-                                    {\n-                                        m_errors.error(new SmAttributeRefPresentException(getFrozenLocation(reader.getLocation())));\n+                            } else {\n+                                if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                    if (null != ref) {\n+                                        m_errors.error(new SmAttributeRefPresentException(\n+                                            getFrozenLocation(reader.getLocation())));\n                                     }\n-                                    if (null != type)\n-                                    {\n-                                        m_errors.error(new SrcAttributeTypeAndSimpleTypePresentException(getFrozenLocation(reader.getLocation())));\n+                                    if (null != type) {\n+                                        m_errors.error(\n+                                            new SrcAttributeTypeAndSimpleTypePresentException(\n+                                                getFrozenLocation(reader.getLocation())));\n                                     }\n-                                    attribute.typeRef = simpleTypeLocalTag(new XMLScope(attribute), cache, module, reader, redefine, targetNamespace);\n-                                }\n-                                else if (LN_ANNOTATION.equals(localName))\n-                                {\n+                                    attribute.typeRef =\n+                                        simpleTypeLocalTag(new XMLScope(attribute), cache, module,\n+                                            reader, redefine, targetNamespace);\n+                                } else if (LN_ANNOTATION.equals(localName)) {\n                                     annotationTag(reader, module);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     throw new AssertionError(reader.getName());\n                                 }\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n-                    if (!machine.end())\n-                    {\n+                case XMLStreamConstants.END_ELEMENT: {\n+                    if (!machine.end()) {\n                         reportUnexpectedEnd(LN_ATTRIBUTE, reader.getLocation());\n                     }\n                     done = true;\n@@ -1325,28 +1094,24 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n \n         final boolean forbidden = (use.getMaxOccurs() > 0);\n-        if (forbidden)\n-        {\n+        if (forbidden) {\n             final boolean required = (use.getMinOccurs() > 0);\n-            final XMLAttributeUse attributeUse = new XMLAttributeUse(required, attribute, valueConstraint);\n+            final XMLAttributeUse attributeUse =\n+                new XMLAttributeUse(required, attribute, valueConstraint);\n \n             attributeUses.add(attributeUse);\n-        }\n-        else\n-        {\n+        } else {\n             // The attribute use is forbidden.\n             prohibited.add(attribute.getName());\n         }\n@@ -1355,15 +1120,14 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:attribute (global definition).\n      */\n-    private XMLAttribute attributeTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws XMLStreamException, XMLAttributeException, AbortException\n-    {\n+    private XMLAttribute attributeTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                      final XMLSchemaModule module, final String targetNamespace)\n+        throws XMLStreamException, XMLAttributeException, AbortException {\n         final XMLAttribute attribute;\n-        try\n-        {\n-            attribute = cache.registerAttribute(requiredNCName(LN_NAME, targetNamespace, reader), getFrozenLocation(reader.getLocation()));\n-        }\n-        catch (final SchemaException e)\n-        {\n+        try {\n+            attribute = cache.registerAttribute(requiredNCName(LN_NAME, targetNamespace, reader),\n+                getFrozenLocation(reader.getLocation()));\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLAttributeException(e);\n         }\n@@ -1372,137 +1136,114 @@ final class XMLSchemaParser extends XMLRepresentation\n         // boolean seenDefault = false;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_NAME.equals(localName))\n-                {\n+                if (LN_NAME.equals(localName)) {\n                     // Already known.\n-                }\n-                else if (LN_TYPE.equals(localName))\n-                {\n+                } else if (LN_TYPE.equals(localName)) {\n                     missingTypeAttribute = false;\n-                    try\n-                    {\n-                        attribute.typeRef = typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(), targetNamespace, reader);\n-                        ensureReferenceType(attribute.typeRef.getName(), reader.getLocation(), false, cache);\n-                    }\n-                    catch (final SmComplexTypeException e)\n-                    {\n+                    try {\n+                        attribute.typeRef =\n+                            typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(),\n+                                targetNamespace, reader);\n+                        ensureReferenceType(attribute.typeRef.getName(), reader.getLocation(),\n+                            false, cache);\n+                    } catch (final SmComplexTypeException e) {\n                         m_errors.error(e);\n                     }\n-                }\n-                else if (LN_DEFAULT.equals(localName))\n-                {\n+                } else if (LN_DEFAULT.equals(localName)) {\n                     // seenDefault = true;\n-                    if (null == attribute.m_valueConstraint)\n-                    {\n-                        attribute.m_valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n-                    if (null == attribute.m_valueConstraint)\n-                    {\n-                        attribute.m_valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    attribute.id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                attribute.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+                    if (null == attribute.m_valueConstraint) {\n+                        attribute.m_valueConstraint =\n+                            new XMLValueConstraint(ValueConstraint.Kind.Default,\n+                                reader.getAttributeName(i), reader.getAttributeValue(i),\n+                                getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FIXED.equals(localName)) {\n+                    if (null == attribute.m_valueConstraint) {\n+                        attribute.m_valueConstraint =\n+                            new XMLValueConstraint(ValueConstraint.Kind.Fixed,\n+                                reader.getAttributeName(i), reader.getAttributeValue(i),\n+                                getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    attribute.id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                attribute.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_SIMPLE_TYPE.equals(localName))\n-                            {\n-                                if (missingTypeAttribute)\n-                                {\n-                                    attribute.typeRef = simpleTypeLocalTag(new XMLScope(attribute), cache, module, reader, false, targetNamespace);\n-                                }\n-                                else\n-                                {\n-                                    m_errors.error(new SrcAttributeTypeAndSimpleTypePresentException(getFrozenLocation(reader.getLocation())));\n+                            if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                if (missingTypeAttribute) {\n+                                    attribute.typeRef =\n+                                        simpleTypeLocalTag(new XMLScope(attribute), cache, module,\n+                                            reader, false, targetNamespace);\n+                                } else {\n+                                    m_errors.error(\n+                                        new SrcAttributeTypeAndSimpleTypePresentException(\n+                                            getFrozenLocation(reader.getLocation())));\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ATTRIBUTE, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_ATTRIBUTE,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ATTRIBUTE, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ATTRIBUTE, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -1514,9 +1255,16 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * This function is common to extension and restriction of simple content.\n      */\n-    private QName baseTypeDefinitionInComplexContent(final XMLType complexType, final DerivationMethod derivation, final XMLStreamReader reader, final boolean redefine, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws SchemaException, AbortException\n-    {\n-        final QName baseName = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n+    private QName baseTypeDefinitionInComplexContent(final XMLType complexType,\n+                                                     final DerivationMethod derivation,\n+                                                     final XMLStreamReader reader,\n+                                                     final boolean redefine,\n+                                                     final XMLSchemaCache cache,\n+                                                     final XMLSchemaModule module,\n+                                                     final String targetNamespace)\n+        throws SchemaException, AbortException {\n+        final QName baseName =\n+            requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n         ensureReferenceType(baseName, reader.getLocation(), redefine, cache);\n         // The {base type definition} for the Complex Type is the type\n         // definition resolved by the\n@@ -1529,37 +1277,29 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Used to ensure that a child xs:annotation occurs a maximumn number of once.\n      */\n-    private boolean checkAnnotationMaxOccursUnity(final boolean allowed, final String contextName, final Location location) throws AbortException\n-    {\n+    private boolean checkAnnotationMaxOccursUnity(final boolean allowed, final String contextName,\n+                                                  final Location location) throws AbortException {\n         return checkWxsElementMaxOccursUnity(allowed, contextName, LN_ANNOTATION, location);\n     }\n \n     /**\n      * Validate the xs:ID attribute and return the value as a String. <br/>\n      * We assume that the name of the attribute is {@link #LN_ID} for reporting purposes.\n-     * \n-     * @param attributeValue\n-     *            The value of the xs:ID attribute.\n-     * @param location\n-     *            The stream location of the xs:ID attribute.\n-     * @param elementName\n-     *            The name of the element bearing the xs:ID attribute.\n-     * @param module\n-     *            The module being parsed - used to record the xs:ID values to ensure uniqueness.\n+     *\n+     * @param attributeValue The value of the xs:ID attribute.\n+     * @param location       The stream location of the xs:ID attribute.\n+     * @param elementName    The name of the element bearing the xs:ID attribute.\n+     * @param module         The module being parsed - used to record the xs:ID values to ensure uniqueness.\n      * @return The xs:ID value as a String.\n      */\n-    private String checkID(final String attributeValue, final Location location, final QName elementName, final XMLSchemaModule module) throws AbortException\n-    {\n-        try\n-        {\n+    private String checkID(final String attributeValue, final Location location,\n+                           final QName elementName, final XMLSchemaModule module)\n+        throws AbortException {\n+        try {\n             return checkIDValue(attributeValue, location, module);\n-        }\n-        catch (final SimpleTypeException e)\n-        {\n+        } catch (final SimpleTypeException e) {\n             reportAttributeUseError(elementName, new QName(LN_ID), location, e);\n-        }\n-        catch (final SmDuplicateIDException e)\n-        {\n+        } catch (final SmDuplicateIDException e) {\n             m_errors.error(e);\n         }\n         // It's acceptable to return null because we aren't going to do anything\n@@ -1567,36 +1307,33 @@ final class XMLSchemaParser extends XMLRepresentation\n         return null;\n     }\n \n-    private String checkIDValue(final String strval, final Location location, final XMLSchemaModule module) throws SimpleTypeException, SmDuplicateIDException\n-    {\n+    private String checkIDValue(final String strval, final Location location,\n+                                final XMLSchemaModule module)\n+        throws SimpleTypeException, SmDuplicateIDException {\n         PreCondition.assertArgumentNotNull(strval, LN_ID);\n \n         final SimpleType idType = bootstrap.getAtomicType(NativeType.ID);\n \n         final List<XmlAtom> value;\n-        try\n-        {\n+        try {\n             value = idType.validate(strval, atoms);\n-        }\n-        catch (DatatypeException dte)\n-        {\n+        } catch (DatatypeException dte) {\n             throw new SimpleTypeException(strval, idType, dte);\n         }\n-        if (value.size() > 0)\n-        {\n+        if (value.size() > 0) {\n             final String id = atoms.getString(value.get(0));\n-            if (module.m_ids.contains(id))\n+            if (module.m_ids.contains(id)) {\n                 throw new SmDuplicateIDException(id, new SrcFrozenLocation(location));\n+            }\n             module.m_ids.add(id);\n             return id;\n         }\n         return null;\n     }\n \n-    private void checkPrefixBound(final String prefix, final String namespaceURI, final String initialValue) throws SimpleTypeException\n-    {\n-        if (!isBoundPrefix(prefix, namespaceURI))\n-        {\n+    private void checkPrefixBound(final String prefix, final String namespaceURI,\n+                                  final String initialValue) throws SimpleTypeException {\n+        if (!isBoundPrefix(prefix, namespaceURI)) {\n             final SrcPrefixNotFoundException cause = new SrcPrefixNotFoundException(prefix);\n             final DatatypeException dte = new DatatypeException(initialValue, null, cause);\n             throw new SimpleTypeException(initialValue, null, dte);\n@@ -1606,11 +1343,12 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Used to ensure that a particular child element occurs a maximum number of once.\n      */\n-    private boolean checkWxsElementMaxOccursUnity(final boolean missing, final String contextName, final String unexpectedName, final Location location) throws AbortException\n-    {\n-        if (!missing)\n-        {\n-            reportUnexpectedElementTag(contextName, new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, unexpectedName), location);\n+    private boolean checkWxsElementMaxOccursUnity(final boolean missing, final String contextName,\n+                                                  final String unexpectedName,\n+                                                  final Location location) throws AbortException {\n+        if (!missing) {\n+            reportUnexpectedElementTag(contextName,\n+                new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, unexpectedName), location);\n         }\n         return false;\n     }\n@@ -1619,108 +1357,82 @@ final class XMLSchemaParser extends XMLRepresentation\n      * xs:complexContent <br/>\n      * We don't return anything because this affects multiple aspects of the complex type.\n      */\n-    private void complexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void complexContentTag(final XMLType complexType, final XMLStreamReader reader,\n+                                   final XMLSchemaCache cache, final XMLSchemaModule module,\n+                                   final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         PreCondition.assertArgumentNotNull(complexType, LN_COMPLEX_TYPE);\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_MIXED.equals(localName))\n-                {\n-                    try\n-                    {\n-                        if (trueOrFalse(reader.getAttributeValue(i)))\n-                        {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_MIXED.equals(localName)) {\n+                    try {\n+                        if (trueOrFalse(reader.getAttributeValue(i))) {\n                             complexType.m_contentKind = XMLContentTypeKind.Mixed;\n                         }\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // complex content tag disappears on parse, so no foreign attributes remain.\n                 // {any attributes with non-schema namespace}\n             }\n         }\n \n-        final ContentModelMachine<String> machine = new ContentModelMachine<String>(complexContentTable, EPSILON);\n+        final ContentModelMachine<String> machine =\n+            new ContentModelMachine<String>(complexContentTable, EPSILON);\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (!machine.step(localName))\n-                            {\n-                                reportUnexpectedElementTag(LN_COMPLEX_CONTENT, reader.getName(), reader.getLocation());\n+                            if (!machine.step(localName)) {\n+                                reportUnexpectedElementTag(LN_COMPLEX_CONTENT, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n-                            }\n-                            else\n-                            {\n-                                if (LN_EXTENSION.equals(localName))\n-                                {\n-                                    extensionInComplexContentTag(complexType, reader, cache, module, redefine, targetNamespace);\n-                                }\n-                                else if (LN_RESTRICTION.equals(localName))\n-                                {\n-                                    restrictionInComplexContentTag(complexType, reader, cache, module, redefine, targetNamespace);\n-                                }\n-                                else if (LN_ANNOTATION.equals(localName))\n-                                {\n+                            } else {\n+                                if (LN_EXTENSION.equals(localName)) {\n+                                    extensionInComplexContentTag(complexType, reader, cache, module,\n+                                        redefine, targetNamespace);\n+                                } else if (LN_RESTRICTION.equals(localName)) {\n+                                    restrictionInComplexContentTag(complexType, reader, cache,\n+                                        module, redefine, targetNamespace);\n+                                } else if (LN_ANNOTATION.equals(localName)) {\n                                     annotationTag(reader, module);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     throw new AssertionError(reader.getName());\n                                 }\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n-                    if (!machine.end())\n-                    {\n+                case XMLStreamConstants.END_ELEMENT: {\n+                    if (!machine.end()) {\n                         reportUnexpectedEnd(LN_COMPLEX_CONTENT, reader.getLocation());\n                     }\n                     done = true;\n@@ -1728,12 +1440,10 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -1744,132 +1454,116 @@ final class XMLSchemaParser extends XMLRepresentation\n      * This does not correspond to a specific tag. <br/>\n      * Used to parse the content of xs:complexType (global and local), but not the same as xs:complexContent.\n      */\n-    private void complexTypeContent(final XMLType complexType, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n-        final ContentModelMachine<String> machine = new ContentModelMachine<String>(complexTypeTable, EPSILON);\n+    private void complexTypeContent(final XMLType complexType, final XMLSchemaCache cache,\n+                                    final XMLSchemaModule module, final XMLStreamReader reader,\n+                                    final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n+        final ContentModelMachine<String> machine =\n+            new ContentModelMachine<String>(complexTypeTable, EPSILON);\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (!machine.step(localName))\n-                            {\n-                                reportUnexpectedElementTag(LN_COMPLEX_TYPE, reader.getName(), reader.getLocation());\n+                            if (!machine.step(localName)) {\n+                                reportUnexpectedElementTag(LN_COMPLEX_TYPE, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n-                            }\n-                            else\n-                            {\n-                                if (LN_GROUP.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = groupParticleTag(new XMLScope(complexType), reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLModelGroupUseException e)\n-                                    {\n+                            } else {\n+                                if (LN_GROUP.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel =\n+                                            groupParticleTag(new XMLScope(complexType), reader,\n+                                                cache, module, redefine, targetNamespace);\n+                                    } catch (final XMLModelGroupUseException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ALL.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.All, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLCompositorOutsideGroupException e)\n-                                    {\n+                                } else if (LN_ALL.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel =\n+                                            compositorOutsideGroupTag(ModelGroup.SmCompositor.All,\n+                                                new XMLScope(complexType), localName, reader, cache,\n+                                                module, redefine, targetNamespace);\n+                                    } catch (final XMLCompositorOutsideGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_CHOICE.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.Choice, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLCompositorOutsideGroupException e)\n-                                    {\n+                                } else if (LN_CHOICE.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel = compositorOutsideGroupTag(\n+                                            ModelGroup.SmCompositor.Choice,\n+                                            new XMLScope(complexType), localName, reader, cache,\n+                                            module, redefine, targetNamespace);\n+                                    } catch (final XMLCompositorOutsideGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_SEQUENCE.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.Sequence, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLCompositorOutsideGroupException e)\n-                                    {\n+                                } else if (LN_SEQUENCE.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel = compositorOutsideGroupTag(\n+                                            ModelGroup.SmCompositor.Sequence,\n+                                            new XMLScope(complexType), localName, reader, cache,\n+                                            module, redefine, targetNamespace);\n+                                    } catch (final XMLCompositorOutsideGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ATTRIBUTE.equals(localName))\n-                                {\n-                                    attributeLocalTag(reader, cache, module, redefine, targetNamespace, complexType.getAttributeUses(), complexType.prohibited, new XMLScope(complexType));\n-                                }\n-                                else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                                {\n-                                    try\n-                                    {\n-                                        complexType.getAttributeGroups().add(attribGroupRefTag(reader, cache, module, targetNamespace));\n-                                    }\n-                                    catch (final XMLAttributeGroupException e)\n-                                    {\n+                                } else if (LN_ATTRIBUTE.equals(localName)) {\n+                                    attributeLocalTag(reader, cache, module, redefine,\n+                                        targetNamespace, complexType.getAttributeUses(),\n+                                        complexType.prohibited, new XMLScope(complexType));\n+                                } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                    try {\n+                                        complexType.getAttributeGroups().add(\n+                                            attribGroupRefTag(reader, cache, module,\n+                                                targetNamespace));\n+                                    } catch (final XMLAttributeGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ANY_ATTRIBUTE.equals(localName))\n-                                {\n-                                    complexType.attributeWildcard = anyAttributeTag(reader, targetNamespace, module);\n-                                }\n-                                else if (LN_COMPLEX_CONTENT.equals(localName))\n-                                {\n-                                    complexContentTag(complexType, reader, cache, module, redefine, targetNamespace);\n-                                }\n-                                else if (LN_SIMPLE_CONTENT.equals(localName))\n-                                {\n-                                    simpleContentTag(complexType, reader, cache, module, redefine, targetNamespace);\n-                                }\n-                                else if (LN_ANNOTATION.equals(localName))\n-                                {\n+                                } else if (LN_ANY_ATTRIBUTE.equals(localName)) {\n+                                    complexType.attributeWildcard =\n+                                        anyAttributeTag(reader, targetNamespace, module);\n+                                } else if (LN_COMPLEX_CONTENT.equals(localName)) {\n+                                    complexContentTag(complexType, reader, cache, module, redefine,\n+                                        targetNamespace);\n+                                } else if (LN_SIMPLE_CONTENT.equals(localName)) {\n+                                    simpleContentTag(complexType, reader, cache, module, redefine,\n+                                        targetNamespace);\n+                                } else if (LN_ANNOTATION.equals(localName)) {\n                                     annotationTag(reader, module);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     throw new AssertionError(reader.getName());\n                                 }\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n-                    if (!machine.end())\n-                    {\n+                case XMLStreamConstants.END_ELEMENT: {\n+                    if (!machine.end()) {\n                         reportUnexpectedEnd(LN_COMPLEX_TYPE, reader.getLocation());\n                     }\n                     done = true;\n@@ -1877,13 +1571,11 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -1893,17 +1585,16 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:complexType (global definition)\n      */\n-    private XMLType complexTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLComplexTypeException, AbortException\n-    {\n+    private XMLType complexTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                         final XMLSchemaModule module, final boolean redefine,\n+                                         final String targetNamespace)\n+        throws XMLStreamException, XMLComplexTypeException, AbortException {\n         final XMLType complexType;\n-        if (!redefine)\n-        {\n-            try\n-            {\n-                complexType = cache.registerType(requiredNCName(LN_NAME, targetNamespace, reader), getFrozenLocation(reader.getLocation()));\n-            }\n-            catch (final SchemaException e)\n-            {\n+        if (!redefine) {\n+            try {\n+                complexType = cache.registerType(requiredNCName(LN_NAME, targetNamespace, reader),\n+                    getFrozenLocation(reader.getLocation()));\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLComplexTypeException(e);\n             }\n@@ -1911,105 +1602,79 @@ final class XMLSchemaParser extends XMLRepresentation\n             complexType.setComplexFlag();\n             complexType.setBase(ANY_TYPE, DerivationMethod.Restriction);\n             complexType.getBlock().addAll(module.blockDefault);\n-        }\n-        else\n-        {\n-            try\n-            {\n-                complexType = cache.dereferenceType(requiredNCName(LN_NAME, targetNamespace, reader), reader.getLocation(), redefine);\n-            }\n-            catch (final SchemaException e)\n-            {\n+        } else {\n+            try {\n+                complexType = cache\n+                    .dereferenceType(requiredNCName(LN_NAME, targetNamespace, reader),\n+                        reader.getLocation(), redefine);\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLComplexTypeException(e);\n             }\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_NAME.equals(localName))\n-                {\n+                if (LN_NAME.equals(localName)) {\n                     // Already known.\n-                }\n-                else if (LN_MIXED.equals(localName))\n-                {\n-                    try\n-                    {\n-                        if (trueOrFalse(reader.getAttributeValue(i)))\n-                        {\n+                } else if (LN_MIXED.equals(localName)) {\n+                    try {\n+                        if (trueOrFalse(reader.getAttributeValue(i))) {\n                             complexType.m_contentKind = XMLContentTypeKind.Mixed;\n                         }\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ABSTRACT.equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (LN_ABSTRACT.equals(localName)) {\n+                    try {\n                         complexType.setAbstractFlag(trueOrFalse(reader.getAttributeValue(i)));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_BLOCK.equals(localName))\n-                {\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction), complexType.getBlock());\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_FINAL.equals(localName))\n-                {\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction), complexType.getFinal());\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                complexType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_BLOCK.equals(localName)) {\n+                    try {\n+                        control(reader.getAttributeValue(i),\n+                            EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction),\n+                            complexType.getBlock());\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_FINAL.equals(localName)) {\n+                    try {\n+                        control(reader.getAttributeValue(i),\n+                            EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction),\n+                            complexType.getFinal());\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                complexType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         complexTypeContent(complexType, cache, module, reader, redefine, targetNamespace);\n \n-        if (!redefine)\n-        {\n+        if (!redefine) {\n             return complexType;\n-        }\n-        else\n-        {\n+        } else {\n             // In theory, we might return a copy of the original.\n             return null;\n         }\n@@ -2018,49 +1683,42 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:complexType (local definition)\n      */\n-    private XMLTypeRef complexTypeLocalTag(final XMLScope scope, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n-        final XMLType complexType = cache.registerAnonymousType(scope, getFrozenLocation(reader.getLocation()));\n+    private XMLTypeRef complexTypeLocalTag(final XMLScope scope, final XMLStreamReader reader,\n+                                           final XMLSchemaCache cache, final XMLSchemaModule module,\n+                                           final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n+        final XMLType complexType =\n+            cache.registerAnonymousType(scope, getFrozenLocation(reader.getLocation()));\n         complexType.setComplexFlag();\n         complexType.setBase(ANY_TYPE, DerivationMethod.Restriction);\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_MIXED.equals(localName))\n-                {\n-                    try\n-                    {\n-                        if (trueOrFalse(reader.getAttributeValue(i)))\n-                        {\n+                if (LN_MIXED.equals(localName)) {\n+                    try {\n+                        if (trueOrFalse(reader.getAttributeValue(i))) {\n                             complexType.m_contentKind = XMLContentTypeKind.Mixed;\n                         }\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                complexType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                complexType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n@@ -2072,231 +1730,202 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:sequence, xs:choice or xs:all (outside a group)\n      */\n-    private XMLParticleWithModelGroupTerm compositorOutsideGroupTag(final ModelGroup.SmCompositor compositor, final XMLScope compositorScope, final String contextName, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLCompositorOutsideGroupException, AbortException\n-    {\n-        final XMLModelGroup group = new XMLModelGroup(compositor, compositorScope, getFrozenLocation(reader.getLocation()));\n+    private XMLParticleWithModelGroupTerm compositorOutsideGroupTag(\n+        final ModelGroup.SmCompositor compositor, final XMLScope compositorScope,\n+        final String contextName, final XMLStreamReader reader, final XMLSchemaCache cache,\n+        final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, XMLCompositorOutsideGroupException, AbortException {\n+        final XMLModelGroup group =\n+            new XMLModelGroup(compositor, compositorScope, getFrozenLocation(reader.getLocation()));\n \n         BigInteger minOccurs = BigInteger.ONE;\n         BigInteger maxOccurs = BigInteger.ONE;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_MAX_OCCURS.equals(localName))\n-                {\n-                    switch (compositor)\n-                    {\n-                        case All:\n-                        {\n-                            maxOccurs = maxOccurs(reader.getAttributeValue(i), false, reader.getLocation(), reader.getName());\n+                if (LN_MAX_OCCURS.equals(localName)) {\n+                    switch (compositor) {\n+                        case All: {\n+                            maxOccurs =\n+                                maxOccurs(reader.getAttributeValue(i), false, reader.getLocation(),\n+                                    reader.getName());\n                         }\n                         break;\n                         case Choice:\n-                        case Sequence:\n-                        {\n-                            maxOccurs = maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(), reader.getName());\n+                        case Sequence: {\n+                            maxOccurs =\n+                                maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(),\n+                                    reader.getName());\n                         }\n                         break;\n-                        default:\n-                        {\n+                        default: {\n                             throw new RuntimeException(compositor.name());\n                         }\n                     }\n-                }\n-                else if (LN_MIN_OCCURS.equals(localName))\n-                {\n-                    switch (compositor)\n-                    {\n-                        case All:\n-                        {\n-                            minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n+                } else if (LN_MIN_OCCURS.equals(localName)) {\n+                    switch (compositor) {\n+                        case All: {\n+                            minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(),\n+                                reader.getName());\n                         }\n                         break;\n                         case Choice:\n-                        case Sequence:\n-                        {\n-                            minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n+                        case Sequence: {\n+                            minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(),\n+                                reader.getName());\n                         }\n                         break;\n-                        default:\n-                        {\n+                        default: {\n                             throw new AssertionError(compositor);\n                         }\n                     }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                group.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                group.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ELEMENT.equals(localName))\n-                            {\n-                                switch (compositor)\n-                                {\n-                                    case All:\n-                                    {\n-                                        try\n-                                        {\n-                                            group.getParticles().add(PreCondition.assertNotNull(elementWithinAllTag(reader, cache, module, redefine, targetNamespace, new XMLScope(group))));\n-                                        }\n-                                        catch (final XMLElementException e)\n-                                        {\n+                            if (LN_ELEMENT.equals(localName)) {\n+                                switch (compositor) {\n+                                    case All: {\n+                                        try {\n+                                            group.getParticles().add(PreCondition.assertNotNull(\n+                                                elementWithinAllTag(reader, cache, module, redefine,\n+                                                    targetNamespace, new XMLScope(group))));\n+                                        } catch (final XMLElementException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n                                     }\n                                     break;\n                                     case Sequence:\n-                                    case Choice:\n-                                    {\n-                                        try\n-                                        {\n-                                            group.getParticles().add(PreCondition.assertNotNull(elementLocalTag(reader, cache, module, redefine, targetNamespace, new XMLScope(group))));\n-                                        }\n-                                        catch (final XMLElementException e)\n-                                        {\n+                                    case Choice: {\n+                                        try {\n+                                            group.getParticles().add(PreCondition.assertNotNull(\n+                                                elementLocalTag(reader, cache, module, redefine,\n+                                                    targetNamespace, new XMLScope(group))));\n+                                        } catch (final XMLElementException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n                                     }\n                                     break;\n-                                    default:\n-                                    {\n+                                    default: {\n                                         throw new AssertionError(compositor);\n                                     }\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_GROUP.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    group.getParticles().add(PreCondition.assertNotNull(groupParticleTag(new XMLScope(group), reader, cache, module, redefine, targetNamespace)));\n-                                }\n-                                catch (final XMLModelGroupUseException e)\n-                                {\n+                            } else if (LN_GROUP.equals(localName)) {\n+                                try {\n+                                    group.getParticles().add(PreCondition.assertNotNull(\n+                                        groupParticleTag(new XMLScope(group), reader, cache, module,\n+                                            redefine, targetNamespace)));\n+                                } catch (final XMLModelGroupUseException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_CHOICE.equals(localName))\n-                            {\n-                                group.getParticles().add(PreCondition.assertNotNull(compositorOutsideGroupTag(ModelGroup.SmCompositor.Choice, new XMLScope(group), contextName, reader, cache, module, redefine, targetNamespace)));\n+                            } else if (LN_CHOICE.equals(localName)) {\n+                                group.getParticles().add(PreCondition.assertNotNull(\n+                                    compositorOutsideGroupTag(ModelGroup.SmCompositor.Choice,\n+                                        new XMLScope(group), contextName, reader, cache, module,\n+                                        redefine, targetNamespace)));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_SEQUENCE.equals(localName))\n-                            {\n-                                group.getParticles().add(PreCondition.assertNotNull(compositorOutsideGroupTag(ModelGroup.SmCompositor.Sequence, new XMLScope(group), contextName, reader, cache, module, redefine, targetNamespace)));\n+                            } else if (LN_SEQUENCE.equals(localName)) {\n+                                group.getParticles().add(PreCondition.assertNotNull(\n+                                    compositorOutsideGroupTag(ModelGroup.SmCompositor.Sequence,\n+                                        new XMLScope(group), contextName, reader, cache, module,\n+                                        redefine, targetNamespace)));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANY.equals(localName))\n-                            {\n-                                group.getParticles().add(PreCondition.assertNotNull(anyElementTag(reader, targetNamespace, module)));\n+                            } else if (LN_ANY.equals(localName)) {\n+                                group.getParticles().add(PreCondition\n+                                    .assertNotNull(anyElementTag(reader, targetNamespace, module)));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, contextName, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, contextName,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(contextName, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n-        return new XMLParticleWithModelGroupTerm(minOccurs, maxOccurs, group, getFrozenLocation(reader.getLocation()));\n+        return new XMLParticleWithModelGroupTerm(minOccurs, maxOccurs, group,\n+            getFrozenLocation(reader.getLocation()));\n     }\n \n     /**\n      * xs:sequence, xs:choice or xs:all (within a group)\n      */\n-    private XMLModelGroup compositorWithinGroupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLModelGroup group, final String contextName, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private XMLModelGroup compositorWithinGroupTag(final XMLStreamReader reader,\n+                                                   final XMLSchemaCache cache,\n+                                                   final XMLSchemaModule module,\n+                                                   final XMLModelGroup group,\n+                                                   final String contextName, final boolean redefine,\n+                                                   final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // the only place to put these attributes is on the parent. we don't do that; discard.\n             }\n         }\n@@ -2304,225 +1933,185 @@ final class XMLSchemaParser extends XMLRepresentation\n         // If doing a redefine, make a copy of the original group so that we can\n         // mutate the original.\n         final XMLModelGroup originalGroupCopy;\n-        if (redefine)\n-        {\n-            originalGroupCopy = new XMLModelGroup(group.getName(), group.getScope(), group.getLocation());\n+        if (redefine) {\n+            originalGroupCopy =\n+                new XMLModelGroup(group.getName(), group.getScope(), group.getLocation());\n             originalGroupCopy.setCompositor(group.getCompositor());\n-            if (group.getParticles().size() > 0)\n-            {\n-                for (final XMLParticle particle : group.getParticles())\n-                {\n+            if (group.getParticles().size() > 0) {\n+                for (final XMLParticle particle : group.getParticles()) {\n                     originalGroupCopy.getParticles().add(particle);\n                 }\n                 group.getParticles().clear();\n             }\n-        }\n-        else\n-        {\n+        } else {\n             // This just keeps the syntax checker happy.\n             originalGroupCopy = null;\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ELEMENT.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    group.getParticles().add(PreCondition.assertNotNull(elementLocalTag(reader, cache, module, redefine, targetNamespace, new XMLScope(group))));\n-                                }\n-                                catch (final XMLElementException e)\n-                                {\n+                            if (LN_ELEMENT.equals(localName)) {\n+                                try {\n+                                    group.getParticles().add(PreCondition.assertNotNull(\n+                                        elementLocalTag(reader, cache, module, redefine,\n+                                            targetNamespace, new XMLScope(group))));\n+                                } catch (final XMLElementException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_GROUP.equals(localName))\n-                            {\n-                                switch (group.getCompositor())\n-                                {\n+                            } else if (LN_GROUP.equals(localName)) {\n+                                switch (group.getCompositor()) {\n                                     case Choice:\n-                                    case Sequence:\n-                                    {\n-                                        try\n-                                        {\n-                                            final XMLParticleWithModelGroupTerm groupParticle = groupParticleTag(new XMLScope(group), reader, cache, module, redefine, targetNamespace);\n-                                            if (!redefine)\n-                                            {\n-                                                group.getParticles().add(PreCondition.assertNotNull(groupParticle));\n-                                            }\n-                                            else\n-                                            {\n+                                    case Sequence: {\n+                                        try {\n+                                            final XMLParticleWithModelGroupTerm groupParticle =\n+                                                groupParticleTag(new XMLScope(group), reader, cache,\n+                                                    module, redefine, targetNamespace);\n+                                            if (!redefine) {\n+                                                group.getParticles()\n+                                                    .add(PreCondition.assertNotNull(groupParticle));\n+                                            } else {\n                                                 final XMLModelGroup g = groupParticle.getTerm();\n-                                                if (group == g)\n-                                                {\n-                                                    if (originalGroupCopy.getParticles().size() > 0)\n-                                                    {\n-                                                        for (final XMLParticle particle : originalGroupCopy.getParticles())\n-                                                        {\n-                                                            group.getParticles().add(PreCondition.assertNotNull(particle));\n+                                                if (group == g) {\n+                                                    if (originalGroupCopy.getParticles().size() >\n+                                                        0) {\n+                                                        for (final XMLParticle particle : originalGroupCopy\n+                                                            .getParticles()) {\n+                                                            group.getParticles().add(PreCondition\n+                                                                .assertNotNull(particle));\n                                                         }\n                                                     }\n-                                                }\n-                                                else\n-                                                {\n-                                                    group.getParticles().add(PreCondition.assertNotNull(groupParticle));\n+                                                } else {\n+                                                    group.getParticles().add(\n+                                                        PreCondition.assertNotNull(groupParticle));\n                                                 }\n                                             }\n-                                        }\n-                                        catch (final XMLModelGroupUseException e)\n-                                        {\n+                                        } catch (final XMLModelGroupUseException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n                                     }\n                                     break;\n-                                    case All:\n-                                    {\n-                                        reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                                    case All: {\n+                                        reportUnexpectedElementTag(contextName, reader.getName(),\n+                                            reader.getLocation());\n                                         skipTag(reader);\n                                     }\n                                     break;\n-                                    default:\n-                                    {\n+                                    default: {\n                                         throw new AssertionError(group.getCompositor());\n                                     }\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_CHOICE.equals(localName))\n-                            {\n-                                switch (group.getCompositor())\n-                                {\n+                            } else if (LN_CHOICE.equals(localName)) {\n+                                switch (group.getCompositor()) {\n                                     case Choice:\n-                                    case Sequence:\n-                                    {\n-                                        try\n-                                        {\n-                                            group.getParticles().add(PreCondition.assertNotNull(compositorOutsideGroupTag(ModelGroup.SmCompositor.Choice, new XMLScope(group), localName, reader, cache, module, redefine, targetNamespace)));\n-                                        }\n-                                        catch (final XMLCompositorOutsideGroupException e)\n-                                        {\n+                                    case Sequence: {\n+                                        try {\n+                                            group.getParticles().add(PreCondition.assertNotNull(\n+                                                compositorOutsideGroupTag(\n+                                                    ModelGroup.SmCompositor.Choice,\n+                                                    new XMLScope(group), localName, reader, cache,\n+                                                    module, redefine, targetNamespace)));\n+                                        } catch (final XMLCompositorOutsideGroupException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n                                     }\n                                     break;\n-                                    case All:\n-                                    {\n-                                        reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                                    case All: {\n+                                        reportUnexpectedElementTag(contextName, reader.getName(),\n+                                            reader.getLocation());\n                                         skipTag(reader);\n                                     }\n                                     break;\n-                                    default:\n-                                    {\n+                                    default: {\n                                         throw new AssertionError(group.getCompositor());\n                                     }\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_SEQUENCE.equals(localName))\n-                            {\n-                                switch (group.getCompositor())\n-                                {\n+                            } else if (LN_SEQUENCE.equals(localName)) {\n+                                switch (group.getCompositor()) {\n                                     case Choice:\n-                                    case Sequence:\n-                                    {\n-                                        try\n-                                        {\n-                                            group.getParticles().add(PreCondition.assertNotNull(compositorOutsideGroupTag(ModelGroup.SmCompositor.Sequence, new XMLScope(group), localName, reader, cache, module, redefine, targetNamespace)));\n-                                        }\n-                                        catch (final XMLCompositorOutsideGroupException e)\n-                                        {\n+                                    case Sequence: {\n+                                        try {\n+                                            group.getParticles().add(PreCondition.assertNotNull(\n+                                                compositorOutsideGroupTag(\n+                                                    ModelGroup.SmCompositor.Sequence,\n+                                                    new XMLScope(group), localName, reader, cache,\n+                                                    module, redefine, targetNamespace)));\n+                                        } catch (final XMLCompositorOutsideGroupException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n                                     }\n                                     break;\n-                                    case All:\n-                                    {\n-                                        reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                                    case All: {\n+                                        reportUnexpectedElementTag(contextName, reader.getName(),\n+                                            reader.getLocation());\n                                         skipTag(reader);\n                                     }\n                                     break;\n-                                    default:\n-                                    {\n+                                    default: {\n                                         throw new AssertionError(group.getCompositor());\n                                     }\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANY.equals(localName))\n-                            {\n-                                switch (group.getCompositor())\n-                                {\n+                            } else if (LN_ANY.equals(localName)) {\n+                                switch (group.getCompositor()) {\n                                     case Choice:\n-                                    case Sequence:\n-                                    {\n-                                        group.getParticles().add(PreCondition.assertNotNull(anyElementTag(reader, targetNamespace, module)));\n+                                    case Sequence: {\n+                                        group.getParticles().add(PreCondition.assertNotNull(\n+                                            anyElementTag(reader, targetNamespace, module)));\n                                     }\n                                     break;\n-                                    case All:\n-                                    {\n-                                        reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                                    case All: {\n+                                        reportUnexpectedElementTag(contextName, reader.getName(),\n+                                            reader.getLocation());\n                                         skipTag(reader);\n                                     }\n                                     break;\n-                                    default:\n-                                    {\n+                                    default: {\n                                         throw new AssertionError(group.getCompositor());\n                                     }\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, contextName, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, contextName,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(contextName, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -2530,91 +2119,61 @@ final class XMLSchemaParser extends XMLRepresentation\n         return group;\n     }\n \n-    private String conditionNamespaceURI(final String namespaceURI)\n-    {\n+    private String conditionNamespaceURI(final String namespaceURI) {\n         return (null != namespaceURI) ? namespaceURI : XMLConstants.NULL_NS_URI;\n     }\n \n     /**\n      * Use to parse the LN_BLOCK and LN_FINAL attributes that control substitution and derivation.\n      */\n-    private void control(final String strval, final EnumSet<DerivationMethod> allValue, final EnumSet<DerivationMethod> resultSet) throws SimpleTypeException\n-    {\n+    private void control(final String strval, final EnumSet<DerivationMethod> allValue,\n+                         final EnumSet<DerivationMethod> resultSet) throws SimpleTypeException {\n         resultSet.clear();\n \n-        if (strval.equals(\"#all\"))\n-        {\n+        if (strval.equals(\"#all\")) {\n             resultSet.addAll(allValue);\n-        }\n-        else\n-        {\n+        } else {\n             final StringTokenizer tokenizer = new StringTokenizer(strval);\n-            while (tokenizer.hasMoreTokens())\n-            {\n+            while (tokenizer.hasMoreTokens()) {\n                 final String token = tokenizer.nextToken();\n-                if (token.equals(\"extension\"))\n-                {\n-                    if (allValue.contains(DerivationMethod.Extension))\n-                    {\n+                if (token.equals(\"extension\")) {\n+                    if (allValue.contains(DerivationMethod.Extension)) {\n                         resultSet.add(DerivationMethod.Extension);\n-                    }\n-                    else\n-                    {\n+                    } else {\n                         final DatatypeException cause = new DatatypeException(token, null);\n                         throw new SimpleTypeException(strval, null, cause);\n                     }\n-                }\n-                else if (token.equals(\"restriction\"))\n-                {\n-                    if (allValue.contains(DerivationMethod.Restriction))\n-                    {\n+                } else if (token.equals(\"restriction\")) {\n+                    if (allValue.contains(DerivationMethod.Restriction)) {\n                         resultSet.add(DerivationMethod.Restriction);\n-                    }\n-                    else\n-                    {\n+                    } else {\n                         final DatatypeException cause = new DatatypeException(token, null);\n                         throw new SimpleTypeException(strval, null, cause);\n                     }\n-                }\n-                else if (token.equals(\"substitution\"))\n-                {\n-                    if (allValue.contains(DerivationMethod.Substitution))\n-                    {\n+                } else if (token.equals(\"substitution\")) {\n+                    if (allValue.contains(DerivationMethod.Substitution)) {\n                         resultSet.add(DerivationMethod.Substitution);\n-                    }\n-                    else\n-                    {\n+                    } else {\n                         final DatatypeException cause = new DatatypeException(token, null);\n                         throw new SimpleTypeException(strval, null, cause);\n                     }\n-                }\n-                else if (token.equals(\"union\"))\n-                {\n-                    if (allValue.contains(DerivationMethod.Union))\n-                    {\n+                } else if (token.equals(\"union\")) {\n+                    if (allValue.contains(DerivationMethod.Union)) {\n                         resultSet.add(DerivationMethod.Union);\n-                    }\n-                    else\n-                    {\n+                    } else {\n                         final DatatypeException cause = new DatatypeException(token, null);\n                         throw new SimpleTypeException(strval, null, cause);\n                     }\n-                }\n-                else if (token.equals(\"list\"))\n-                {\n-                    if (allValue.contains(DerivationMethod.List))\n-                    {\n+                } else if (token.equals(\"list\")) {\n+                    if (allValue.contains(DerivationMethod.List)) {\n                         resultSet.add(DerivationMethod.List);\n-                    }\n-                    else\n-                    {\n+                    } else {\n                         final DatatypeException cause = new DatatypeException(token, null);\n                         throw new SimpleTypeException(strval, null, cause);\n                     }\n-                }\n-                else\n-                {\n-                    final SimpleType atomicType = bootstrap.getAtomicType(NativeType.UNTYPED_ATOMIC);\n+                } else {\n+                    final SimpleType atomicType =\n+                        bootstrap.getAtomicType(NativeType.UNTYPED_ATOMIC);\n                     final DatatypeException cause = new DatatypeException(token, atomicType);\n                     throw new SimpleTypeException(strval, atomicType, cause);\n                 }\n@@ -2627,56 +2186,45 @@ final class XMLSchemaParser extends XMLRepresentation\n      * This should be called for all elements immediately after the stack has been pushed. The stack should be popped in\n      * the\n      */\n-    private void copyNamespaces(final XMLStreamReader parser, final PrefixMappingSupport pms)\n-    {\n+    private void copyNamespaces(final XMLStreamReader parser, final PrefixMappingSupport pms) {\n         final int namespaceCount = parser.getNamespaceCount();\n-        for (int i = 0; i < namespaceCount; i++)\n-        {\n+        for (int i = 0; i < namespaceCount; i++) {\n             String prefix = parser.getNamespacePrefix(i);\n             String uri = parser.getNamespaceURI(i);\n             // Normalization required to map StAX to javax.\n             prefix = (null == prefix) ? XMLConstants.DEFAULT_NS_PREFIX : prefix;\n-            if (null != uri)\n-            {\n+            if (null != uri) {\n                 m_pms.declarePrefix(prefix, uri);\n-            }\n-            else\n-            {\n+            } else {\n                 m_pms.declarePrefix(prefix, \"\");\n             }\n         }\n     }\n \n-    private XMLAttribute determineLocalAttribute(final String name, final boolean qualified, final QName ref, final XMLSchemaCache cache, final XMLStreamReader parser, final String targetNamespace, final XMLScope scope) throws SchemaException\n-    {\n-        if (null != name)\n-        {\n-            if (null == ref)\n-            {\n+    private XMLAttribute determineLocalAttribute(final String name, final boolean qualified,\n+                                                 final QName ref, final XMLSchemaCache cache,\n+                                                 final XMLStreamReader parser,\n+                                                 final String targetNamespace, final XMLScope scope)\n+        throws SchemaException {\n+        if (null != name) {\n+            if (null == ref) {\n                 final XMLAttribute attribute;\n-                if (qualified)\n-                {\n-                    attribute = new XMLAttribute(resolveUsingTargetNamespace(name, targetNamespace, parser.getNamespaceContext()), scope, ANY_SIMPLE_TYPE, getFrozenLocation(parser.getLocation()));\n-                }\n-                else\n-                {\n-                    attribute = new XMLAttribute(new QName(\"\", name), scope, ANY_SIMPLE_TYPE, getFrozenLocation(parser.getLocation()));\n+                if (qualified) {\n+                    attribute = new XMLAttribute(resolveUsingTargetNamespace(name, targetNamespace,\n+                        parser.getNamespaceContext()), scope, ANY_SIMPLE_TYPE,\n+                        getFrozenLocation(parser.getLocation()));\n+                } else {\n+                    attribute = new XMLAttribute(new QName(\"\", name), scope, ANY_SIMPLE_TYPE,\n+                        getFrozenLocation(parser.getLocation()));\n                 }\n                 return attribute;\n-            }\n-            else\n-            {\n+            } else {\n                 throw new SmAttributeRefXorNameException(getFrozenLocation(parser.getLocation()));\n             }\n-        }\n-        else\n-        {\n-            if (null != ref)\n-            {\n+        } else {\n+            if (null != ref) {\n                 return cache.dereferenceAttribute(ref, parser.getLocation());\n-            }\n-            else\n-            {\n+            } else {\n                 throw new SmAttributeRefXorNameException(getFrozenLocation(parser.getLocation()));\n             }\n         }\n@@ -2686,240 +2234,197 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Determines whether the local element is a local definition or a reference. <br/>\n      * Imposes the constraint that one of the ref and name must be present, but not both.\n      */\n-    private XMLElement determineLocalElement(final String name, final boolean qualified, final XMLTypeRef typeRef, final QName ref, final XMLSchemaCache cache, final XMLStreamReader parser, final String targetNamespace, final XMLScope scope) throws SchemaException\n-    {\n-        if ((null != name) && (null == ref))\n-        {\n+    private XMLElement determineLocalElement(final String name, final boolean qualified,\n+                                             final XMLTypeRef typeRef, final QName ref,\n+                                             final XMLSchemaCache cache,\n+                                             final XMLStreamReader parser,\n+                                             final String targetNamespace, final XMLScope scope)\n+        throws SchemaException {\n+        if ((null != name) && (null == ref)) {\n             final XMLElement element;\n-            if (qualified)\n-            {\n-                final QName ename = resolveUsingTargetNamespace(name, targetNamespace, parser.getNamespaceContext());\n-                element = new XMLElement(ename, scope, ANY_TYPE, getFrozenLocation(parser.getLocation()));\n-            }\n-            else\n-            {\n+            if (qualified) {\n+                final QName ename = resolveUsingTargetNamespace(name, targetNamespace,\n+                    parser.getNamespaceContext());\n+                element =\n+                    new XMLElement(ename, scope, ANY_TYPE, getFrozenLocation(parser.getLocation()));\n+            } else {\n                 final QName ename = new QName(\"\", name);\n-                element = new XMLElement(ename, scope, ANY_TYPE, getFrozenLocation(parser.getLocation()));\n+                element =\n+                    new XMLElement(ename, scope, ANY_TYPE, getFrozenLocation(parser.getLocation()));\n             }\n-            if (null != typeRef)\n-            {\n+            if (null != typeRef) {\n                 element.typeRef = typeRef;\n             }\n             return element;\n-        }\n-        else if ((null != ref) && (name == null))\n-        {\n+        } else if ((null != ref) && (name == null)) {\n             return cache.dereferenceElement(ref, parser.getLocation());\n-        }\n-        else\n-        {\n+        } else {\n             throw new SmElementRefXorNameException(getFrozenLocation(parser.getLocation()));\n         }\n     }\n \n-    private void documentationTag(final XMLStreamReader reader) throws XMLStreamException, AbortException\n-    {\n+    private void documentationTag(final XMLStreamReader reader)\n+        throws XMLStreamException, AbortException {\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_SOURCE.equals(localName))\n-                {\n-                    /* final String source = */reader.getAttributeValue(i);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (XMLConstants.XML_NS_URI.equals(namespaceURI))\n-            {\n+                if (LN_SOURCE.equals(localName)) {\n+                    /* final String source = */\n+                    reader.getAttributeValue(i);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (XMLConstants.XML_NS_URI.equals(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (\"lang\".equals(localName))\n-                {\n-                    try\n-                    {\n-                        /* final String language = */lang(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else\n-                {\n-                    reportAttributeInXmlNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (\"lang\".equals(localName)) {\n+                    try {\n+                        /* final String language = */\n+                        lang(reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else {\n+                    reportAttributeInXmlNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // foreign attributes not allowed on documentation tag\n                 // {any attributes with non-schema namespace}\n             }\n         }\n \n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n                         skipTag(reader);\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private void elementContent(final XMLElement element, final QName ref, final XMLSchemaModule module, final XMLSchemaCache cache, final XMLStreamReader reader, final boolean redefine, final String targetNamespace, final boolean seenType) throws XMLStreamException, AbortException\n-    {\n+    private void elementContent(final XMLElement element, final QName ref,\n+                                final XMLSchemaModule module, final XMLSchemaCache cache,\n+                                final XMLStreamReader reader, final boolean redefine,\n+                                final String targetNamespace, final boolean seenType)\n+        throws XMLStreamException, AbortException {\n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_COMPLEX_TYPE.equals(localName))\n-                            {\n+                            if (LN_COMPLEX_TYPE.equals(localName)) {\n                                 assertRefAbsent(ref, reader.getLocation());\n-                                if (seenType)\n-                                {\n-                                    m_errors.error(new SmElementSimpleTypeXorComplexTypeException(getFrozenLocation(reader.getLocation())));\n+                                if (seenType) {\n+                                    m_errors.error(new SmElementSimpleTypeXorComplexTypeException(\n+                                        getFrozenLocation(reader.getLocation())));\n                                 }\n-                                element.typeRef = complexTypeLocalTag(new XMLScope(element), reader, cache, module, redefine, targetNamespace);\n+                                element.typeRef =\n+                                    complexTypeLocalTag(new XMLScope(element), reader, cache,\n+                                        module, redefine, targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_SIMPLE_TYPE.equals(localName))\n-                            {\n+                            } else if (LN_SIMPLE_TYPE.equals(localName)) {\n                                 assertRefAbsent(ref, reader.getLocation());\n-                                if (seenType)\n-                                {\n-                                    m_errors.error(new SmElementSimpleTypeXorComplexTypeException(getFrozenLocation(reader.getLocation())));\n+                                if (seenType) {\n+                                    m_errors.error(new SmElementSimpleTypeXorComplexTypeException(\n+                                        getFrozenLocation(reader.getLocation())));\n                                 }\n-                                element.typeRef = simpleTypeLocalTag(new XMLScope(element), cache, module, reader, redefine, targetNamespace);\n+                                element.typeRef =\n+                                    simpleTypeLocalTag(new XMLScope(element), cache, module, reader,\n+                                        redefine, targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_UNIQUE.equals(localName))\n-                            {\n+                            } else if (LN_UNIQUE.equals(localName)) {\n                                 assertRefAbsent(ref, reader.getLocation());\n-                                try\n-                                {\n-                                    element.getIdentityConstraints().add(uniqueTag(cache, reader, targetNamespace, module));\n-                                }\n-                                catch (final XMLIdentityConstraintException e)\n-                                {\n+                                try {\n+                                    element.getIdentityConstraints()\n+                                        .add(uniqueTag(cache, reader, targetNamespace, module));\n+                                } catch (final XMLIdentityConstraintException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_KEY.equals(localName))\n-                            {\n+                            } else if (LN_KEY.equals(localName)) {\n                                 assertRefAbsent(ref, reader.getLocation());\n-                                try\n-                                {\n-                                    element.getIdentityConstraints().add(keyTag(cache, reader, targetNamespace, module));\n-                                }\n-                                catch (final XMLIdentityConstraintException e)\n-                                {\n+                                try {\n+                                    element.getIdentityConstraints()\n+                                        .add(keyTag(cache, reader, targetNamespace, module));\n+                                } catch (final XMLIdentityConstraintException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_KEYREF.equals(localName))\n-                            {\n+                            } else if (LN_KEYREF.equals(localName)) {\n                                 assertRefAbsent(ref, reader.getLocation());\n-                                try\n-                                {\n-                                    element.getIdentityConstraints().add(keyrefTag(cache, reader, targetNamespace, module));\n-                                }\n-                                catch (final XMLIdentityConstraintException e)\n-                                {\n+                                try {\n+                                    element.getIdentityConstraints()\n+                                        .add(keyrefTag(cache, reader, targetNamespace, module));\n+                                } catch (final XMLIdentityConstraintException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ELEMENT, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_ELEMENT,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ELEMENT, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ELEMENT, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -2929,8 +2434,10 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:element (reference or local definition)\n      */\n-    private XMLParticle elementLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final XMLScope scope) throws XMLStreamException, XMLElementException, AbortException\n-    {\n+    private XMLParticle elementLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                        final XMLSchemaModule module, final boolean redefine,\n+                                        final String targetNamespace, final XMLScope scope)\n+        throws XMLStreamException, XMLElementException, AbortException {\n         String name = null;\n         XMLTypeRef typeRef = null;\n         final QName ref = referenceOptional(reader, LN_REF, module, targetNamespace);\n@@ -2942,190 +2449,157 @@ final class XMLSchemaParser extends XMLRepresentation\n         XMLValueConstraint valueConstraint = null;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_BLOCK.equals(localName))\n-                {\n+                if (LN_BLOCK.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction, DerivationMethod.Substitution), block);\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_DEFAULT.equals(localName))\n-                {\n+                    try {\n+                        control(reader.getAttributeValue(i), EnumSet\n+                            .of(DerivationMethod.Extension, DerivationMethod.Restriction,\n+                                DerivationMethod.Substitution), block);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_DEFAULT.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    if (null == valueConstraint)\n-                    {\n-                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n+                    if (null == valueConstraint) {\n+                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default,\n+                            reader.getAttributeName(i), reader.getAttributeValue(i),\n+                            getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FIXED.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    if (null == valueConstraint)\n-                    {\n-                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FORM.equals(localName))\n-                {\n+                    if (null == valueConstraint) {\n+                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed,\n+                            reader.getAttributeName(i), reader.getAttributeValue(i),\n+                            getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FORM.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n+                    try {\n                         qualified = qualified(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_MAX_OCCURS.equals(localName))\n-                {\n-                    maxOccurs = maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_MIN_OCCURS.equals(localName))\n-                {\n-                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_NAME.equals(localName))\n-                {\n-                    try\n-                    {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_MAX_OCCURS.equals(localName)) {\n+                    maxOccurs = maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_MIN_OCCURS.equals(localName)) {\n+                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_NAME.equals(localName)) {\n+                    try {\n                         name = name(reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_NILLABLE.equals(localName))\n-                {\n+                } else if (LN_NILLABLE.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n+                    try {\n                         nillable = trueOrFalse(reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_REF.equals(localName))\n-                {\n+                } else if (LN_REF.equals(localName)) {\n                     // Already got it.\n-                }\n-                else if (LN_TYPE.equals(localName))\n-                {\n+                } else if (LN_TYPE.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n-                        typeRef = typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(), targetNamespace, reader);\n+                    try {\n+                        typeRef =\n+                            typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(),\n+                                targetNamespace, reader);\n                         ensureReferenceType(typeRef.getName(), reader.getLocation(), false, cache);\n-                    }\n-                    catch (final SmComplexTypeException e)\n-                    {\n+                    } catch (final SmComplexTypeException e) {\n                         m_errors.error(e);\n                     }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         final XMLElement element;\n-        try\n-        {\n-            element = determineLocalElement(name, qualified, typeRef, ref, cache, reader, targetNamespace, scope);\n-        }\n-        catch (final SchemaException e)\n-        {\n+        try {\n+            element =\n+                determineLocalElement(name, qualified, typeRef, ref, cache, reader, targetNamespace,\n+                    scope);\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLElementException(e);\n         }\n-        if ( (name != null) || (ref == null) )  // not an element reference; new definition \n+        if ((name != null) || (ref == null))  // not an element reference; new definition\n+        {\n             element.foreignAttributes.putAll(foreignAttributes);\n+        }\n         foreignAttributes.clear(); // clear regardless.\n \n-        if (null == ref)\n-        {\n+        if (null == ref) {\n             element.setNillableFlag(nillable);\n             element.getBlock().addAll(block);\n             element.m_valueConstraint = valueConstraint;\n-            elementContent(element, ref, module, cache, reader, redefine, targetNamespace, (null != typeRef));\n-            return new XMLParticleWithElementTerm(minOccurs, maxOccurs, element, null, getFrozenLocation(reader.getLocation()));\n-        }\n-        else\n-        {\n+            elementContent(element, ref, module, cache, reader, redefine, targetNamespace,\n+                (null != typeRef));\n+            return new XMLParticleWithElementTerm(minOccurs, maxOccurs, element, null,\n+                getFrozenLocation(reader.getLocation()));\n+        } else {\n             element.m_valueConstraint = null;\n-            elementContent(element, null, module, cache, reader, redefine, targetNamespace, (null != typeRef));\n-            return new XMLParticleWithElementTerm(minOccurs, maxOccurs, element, valueConstraint, getFrozenLocation(reader.getLocation()));\n+            elementContent(element, null, module, cache, reader, redefine, targetNamespace,\n+                (null != typeRef));\n+            return new XMLParticleWithElementTerm(minOccurs, maxOccurs, element, valueConstraint,\n+                getFrozenLocation(reader.getLocation()));\n         }\n     }\n \n     /**\n      * xs:element (global definition)\n      */\n-    private XMLElement elementTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws XMLStreamException, XMLElementException, AbortException\n-    {\n+    private XMLElement elementTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                  final XMLSchemaModule module, final String targetNamespace)\n+        throws XMLStreamException, XMLElementException, AbortException {\n         final XMLElement element;\n-        try\n-        {\n-            element = cache.registerElement(requiredNCName(LN_NAME, targetNamespace, reader), getFrozenLocation(reader.getLocation()));\n-        }\n-        catch (final SchemaException e)\n-        {\n+        try {\n+            element = cache.registerElement(requiredNCName(LN_NAME, targetNamespace, reader),\n+                getFrozenLocation(reader.getLocation()));\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLElementException(e);\n         }\n \n-        for (final DerivationMethod derivation : module.blockDefault)\n-        {\n+        for (final DerivationMethod derivation : module.blockDefault) {\n             // TODO: note the comment here and for finalDefault. is more work needed?\n             // Note: blockDefault may contain other values than extension,\n             // restriction or substitution.\n-            if (derivation.isExtension() || derivation.isRestriction() || derivation.isSubstitution())\n-            {\n+            if (derivation.isExtension() || derivation.isRestriction() ||\n+                derivation.isSubstitution()) {\n                 element.getBlock().add(derivation);\n             }\n         }\n \n-        for (final DerivationMethod derivation : module.finalDefault)\n-        {\n+        for (final DerivationMethod derivation : module.finalDefault) {\n             // Note: finalDefault may contain other values than extension or\n             // restriction.\n-            if (derivation.isExtension() || derivation.isRestriction())\n-            {\n+            if (derivation.isExtension() || derivation.isRestriction()) {\n                 element.getFinal().add(derivation);\n             }\n         }\n@@ -3133,123 +2607,99 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean seenType = false;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ABSTRACT.equals(localName))\n-                {\n-                    try\n-                    {\n+                if (LN_ABSTRACT.equals(localName)) {\n+                    try {\n                         element.setAbstractFlag(trueOrFalse(reader.getAttributeValue(i)));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_BLOCK.equals(localName))\n-                {\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction, DerivationMethod.Substitution), element.getBlock());\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_DEFAULT.equals(localName))\n-                {\n-                    if (null == element.m_valueConstraint)\n-                    {\n-                        element.m_valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n-                    if (null == element.m_valueConstraint)\n-                    {\n-                        element.m_valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FINAL.equals(localName))\n-                {\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction), element.getFinal());\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_NAME.equals(localName))\n-                {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_BLOCK.equals(localName)) {\n+                    try {\n+                        control(reader.getAttributeValue(i), EnumSet\n+                            .of(DerivationMethod.Extension, DerivationMethod.Restriction,\n+                                DerivationMethod.Substitution), element.getBlock());\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_DEFAULT.equals(localName)) {\n+                    if (null == element.m_valueConstraint) {\n+                        element.m_valueConstraint =\n+                            new XMLValueConstraint(ValueConstraint.Kind.Default,\n+                                reader.getAttributeName(i), reader.getAttributeValue(i),\n+                                getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FIXED.equals(localName)) {\n+                    if (null == element.m_valueConstraint) {\n+                        element.m_valueConstraint =\n+                            new XMLValueConstraint(ValueConstraint.Kind.Fixed,\n+                                reader.getAttributeName(i), reader.getAttributeValue(i),\n+                                getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FINAL.equals(localName)) {\n+                    try {\n+                        control(reader.getAttributeValue(i),\n+                            EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction),\n+                            element.getFinal());\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_NAME.equals(localName)) {\n                     // Already known.\n-                }\n-                else if (LN_NILLABLE.equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (LN_NILLABLE.equals(localName)) {\n+                    try {\n                         element.setNillableFlag(trueOrFalse(reader.getAttributeValue(i)));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_SUBSTITUTION_GROUP.equals(localName))\n-                {\n-                    try\n-                    {\n-                        final QName elemName = resolveUsingXMLNamespaces(reader.getAttributeValue(i), reader.getNamespaceContext());\n-                        element.substitutionGroup = cache.dereferenceElement(elemName, reader.getLocation());\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_TYPE.equals(localName))\n-                {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_SUBSTITUTION_GROUP.equals(localName)) {\n+                    try {\n+                        final QName elemName =\n+                            resolveUsingXMLNamespaces(reader.getAttributeValue(i),\n+                                reader.getNamespaceContext());\n+                        element.substitutionGroup =\n+                            cache.dereferenceElement(elemName, reader.getLocation());\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_TYPE.equals(localName)) {\n                     seenType = true;\n-                    try\n-                    {\n-                        element.typeRef = typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(), targetNamespace, reader);\n-                        ensureReferenceType(element.typeRef.getName(), reader.getLocation(), false, cache);\n-                    }\n-                    catch (final SmComplexTypeException e)\n-                    {\n+                    try {\n+                        element.typeRef =\n+                            typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(),\n+                                targetNamespace, reader);\n+                        ensureReferenceType(element.typeRef.getName(), reader.getLocation(), false,\n+                            cache);\n+                    } catch (final SmComplexTypeException e) {\n                         m_errors.error(e);\n                     }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                element.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                element.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n@@ -3263,8 +2713,11 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Reference to a global element declaration or local definition (local definitions cannot be referenced). The\n      * number of occurrences can only be zero or one when xs:element is used within xs:all.\n      */\n-    private XMLParticle elementWithinAllTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final XMLScope scope) throws XMLStreamException, XMLElementException, AbortException\n-    {\n+    private XMLParticle elementWithinAllTag(final XMLStreamReader reader,\n+                                            final XMLSchemaCache cache,\n+                                            final XMLSchemaModule module, final boolean redefine,\n+                                            final String targetNamespace, final XMLScope scope)\n+        throws XMLStreamException, XMLElementException, AbortException {\n         String name = null;\n         XMLTypeRef typeRef = null;\n         final QName ref = referenceOptional(reader, LN_REF, module, targetNamespace);\n@@ -3276,130 +2729,99 @@ final class XMLSchemaParser extends XMLRepresentation\n         XMLValueConstraint valueConstraint = null;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_BLOCK.equals(localName))\n-                {\n+                if (LN_BLOCK.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction, DerivationMethod.Substitution), block);\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_DEFAULT.equals(localName))\n-                {\n+                    try {\n+                        control(reader.getAttributeValue(i), EnumSet\n+                            .of(DerivationMethod.Extension, DerivationMethod.Restriction,\n+                                DerivationMethod.Substitution), block);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_DEFAULT.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    if (null == valueConstraint)\n-                    {\n-                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n+                    if (null == valueConstraint) {\n+                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Default,\n+                            reader.getAttributeName(i), reader.getAttributeValue(i),\n+                            getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FIXED.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    if (null == valueConstraint)\n-                    {\n-                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed, reader.getAttributeName(i), reader.getAttributeValue(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                }\n-                else if (LN_FORM.equals(localName))\n-                {\n+                    if (null == valueConstraint) {\n+                        valueConstraint = new XMLValueConstraint(ValueConstraint.Kind.Fixed,\n+                            reader.getAttributeName(i), reader.getAttributeValue(i),\n+                            getFrozenLocation(reader.getLocation()));\n+                    } else {\n+                        m_errors.error(new SmSourceAttributeDefaultAndFixedPresentException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    }\n+                } else if (LN_FORM.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n+                    try {\n                         qualified = qualified(reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_NAME.equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (LN_NAME.equals(localName)) {\n+                    try {\n                         name = name(reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_TYPE.equals(localName))\n-                {\n+                } else if (LN_TYPE.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n-                        typeRef = typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(), targetNamespace, reader);\n+                    try {\n+                        typeRef =\n+                            typeRef(reader.getAttributeValue(i), LN_TYPE, module.isChameleon(),\n+                                targetNamespace, reader);\n                         ensureReferenceType(typeRef.getName(), reader.getLocation(), false, cache);\n-                    }\n-                    catch (final SmComplexTypeException e)\n-                    {\n+                    } catch (final SmComplexTypeException e) {\n                         m_errors.error(e);\n                     }\n-                }\n-                else if (LN_REF.equals(localName))\n-                {\n+                } else if (LN_REF.equals(localName)) {\n                     // Already got it.\n-                }\n-                else if (LN_MAX_OCCURS.equals(localName))\n-                {\n-                    maxOccurs = maxOccurs(reader.getAttributeValue(i), false, reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_MIN_OCCURS.equals(localName))\n-                {\n-                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_NILLABLE.equals(localName))\n-                {\n+                } else if (LN_MAX_OCCURS.equals(localName)) {\n+                    maxOccurs = maxOccurs(reader.getAttributeValue(i), false, reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_MIN_OCCURS.equals(localName)) {\n+                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_NILLABLE.equals(localName)) {\n                     assertRefAbsent(ref, reader.getLocation());\n-                    try\n-                    {\n+                    try {\n                         nillable = trueOrFalse(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         final XMLElement element;\n-        try\n-        {\n-            element = determineLocalElement(name, qualified, typeRef, ref, cache, reader, targetNamespace, scope);\n-        }\n-        catch (final SchemaException e)\n-        {\n+        try {\n+            element =\n+                determineLocalElement(name, qualified, typeRef, ref, cache, reader, targetNamespace,\n+                    scope);\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLElementException(e);\n         }\n@@ -3409,28 +2831,25 @@ final class XMLSchemaParser extends XMLRepresentation\n         element.setNillableFlag(nillable);\n         element.getBlock().addAll(block);\n \n-        elementContent(element, ref, module, cache, reader, redefine, targetNamespace, (null != typeRef));\n+        elementContent(element, ref, module, cache, reader, redefine, targetNamespace,\n+            (null != typeRef));\n \n-        return new XMLParticleWithElementTerm(minOccurs, maxOccurs, element, valueConstraint, getFrozenLocation(reader.getLocation()));\n+        return new XMLParticleWithElementTerm(minOccurs, maxOccurs, element, valueConstraint,\n+            getFrozenLocation(reader.getLocation()));\n     }\n \n-    private void ensureReferenceType(final QName name, final Location location, final boolean mustExist, final XMLSchemaCache cache) throws AbortException\n-    {\n+    private void ensureReferenceType(final QName name, final Location location,\n+                                     final boolean mustExist, final XMLSchemaCache cache)\n+        throws AbortException {\n         PreCondition.assertArgumentNotNull(name);\n \n-        if (name.getNamespaceURI().equals(XMLConstants.W3C_XML_SCHEMA_NS_URI))\n-        {\n+        if (name.getNamespaceURI().equals(XMLConstants.W3C_XML_SCHEMA_NS_URI)) {\n             // Do nothing. This will be caught later if a dangling reference\n             // exists.\n-        }\n-        else\n-        {\n-            try\n-            {\n+        } else {\n+            try {\n                 cache.dereferenceType(name, location, mustExist);\n-            }\n-            catch (final SchemaException e)\n-            {\n+            } catch (final SchemaException e) {\n                 m_errors.error(e);\n             }\n         }\n@@ -3439,36 +2858,32 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:enumeration\n      */\n-    private XMLEnumeration enumerationTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n-        final XMLEnumeration enumeration = new XMLEnumeration(simpleType, getFrozenLocation(reader.getLocation()));\n+    private XMLEnumeration enumerationTag(final XMLType simpleType, final XMLStreamReader reader,\n+                                          final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException {\n+        final XMLEnumeration enumeration =\n+            new XMLEnumeration(simpleType, getFrozenLocation(reader.getLocation()));\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    enumeration.id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_VALUE.equals(localName))\n-                {\n-                    enumeration.setValue(reader.getAttributeValue(i), m_pms.getPrefixResolverSnapshot());\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (LN_ID.equals(localName)) {\n+                    enumeration.id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else if (LN_VALUE.equals(localName)) {\n+                    enumeration\n+                        .setValue(reader.getAttributeValue(i), m_pms.getPrefixResolverSnapshot());\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // the api schema model collapses all of the enumerations into a list.\n                 // at least, i think it does. if not, then this should get turned back on.\n //                enumeration.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n@@ -3477,57 +2892,45 @@ final class XMLSchemaParser extends XMLRepresentation\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_ENUMERATION, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_ENUMERATION,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_ENUMERATION, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_ENUMERATION, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -3539,191 +2942,167 @@ final class XMLSchemaParser extends XMLRepresentation\n      * xs:extension (complex content) <br/>\n      * We don't return anything because this affects multiple aspects of the complex type.\n      */\n-    private void extensionInComplexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n-        try\n-        {\n+    private void extensionInComplexContentTag(final XMLType complexType,\n+                                              final XMLStreamReader reader,\n+                                              final XMLSchemaCache cache,\n+                                              final XMLSchemaModule module, final boolean redefine,\n+                                              final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n+        try {\n             final XMLType redefineType;\n-            if (!redefine)\n-            {\n+            if (!redefine) {\n                 redefineType = null;\n-                baseTypeDefinitionInComplexContent(complexType, DerivationMethod.Extension, reader, redefine, cache, module, targetNamespace);\n-            }\n-            else\n-            {\n-                final QName baseName = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n+                baseTypeDefinitionInComplexContent(complexType, DerivationMethod.Extension, reader,\n+                    redefine, cache, module, targetNamespace);\n+            } else {\n+                final QName baseName =\n+                    requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n                 redefineType = cache.dereferenceType(baseName, reader.getLocation(), redefine);\n-                if (!complexType.getName().equals(baseName))\n-                {\n+                if (!complexType.getName().equals(baseName)) {\n                     skipTag(reader);\n-                    throw new SmRedefineTypeSelfReferenceException(complexType.getName(), baseName, getFrozenLocation(reader.getLocation()));\n+                    throw new SmRedefineTypeSelfReferenceException(complexType.getName(), baseName,\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n             }\n \n             final int attributeCount = reader.getAttributeCount();\n-            for (int i = 0; i < attributeCount; i++)\n-            {\n+            for (int i = 0; i < attributeCount; i++) {\n                 final String namespaceURI = reader.getAttributeNamespace(i);\n-                if (isGlobal(namespaceURI))\n-                {\n+                if (isGlobal(namespaceURI)) {\n                     final String localName = reader.getAttributeLocalName(i);\n-                    if (LN_ID.equals(localName))\n-                    {\n-                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                    }\n-                    else if (LN_BASE.equals(localName))\n-                    {\n+                    if (LN_ID.equals(localName)) {\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                    } else if (LN_BASE.equals(localName)) {\n                         // Already known.\n-                    }\n-                    else\n-                    {\n-                        reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                }\n-                else if (isWXS(namespaceURI))\n-                {\n-                    reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-                else\n-                {\n+                    } else {\n+                        reportAttributeInGlobalNamespace(reader.getName(),\n+                            reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n+                    }\n+                } else if (isWXS(namespaceURI)) {\n+                    reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                } else {\n                     // the only place to put foreign atts is on the parent. we don't do that; discard.\n                 }\n             }\n \n-            final ContentModelMachine<String> machine = new ContentModelMachine<String>(extensionInComplexContentTable, EPSILON);\n+            final ContentModelMachine<String> machine =\n+                new ContentModelMachine<String>(extensionInComplexContentTable, EPSILON);\n             boolean done = false;\n-            while (!done)\n-            {\n+            while (!done) {\n                 final int event = reader.next();\n \n-                switch (event)\n-                {\n-                    case XMLStreamConstants.START_ELEMENT:\n-                    {\n+                switch (event) {\n+                    case XMLStreamConstants.START_ELEMENT: {\n                         m_pms.pushContext();\n-                        try\n-                        {\n+                        try {\n                             copyNamespaces(reader, m_pms);\n-                            if (isWXS(reader.getNamespaceURI()))\n-                            {\n+                            if (isWXS(reader.getNamespaceURI())) {\n                                 final String localName = reader.getLocalName();\n-                                if (!machine.step(localName))\n-                                {\n-                                    reportUnexpectedElementTag(LN_EXTENSION, reader.getName(), reader.getLocation());\n+                                if (!machine.step(localName)) {\n+                                    reportUnexpectedElementTag(LN_EXTENSION, reader.getName(),\n+                                        reader.getLocation());\n                                     skipTag(reader);\n-                                }\n-                                else\n-                                {\n-                                    if (LN_GROUP.equals(localName))\n-                                    {\n-                                        complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                        try\n-                                        {\n-                                            complexType.m_contentModel = groupParticleTag(new XMLScope(complexType), reader, cache, module, redefine, targetNamespace);\n-                                        }\n-                                        catch (final XMLModelGroupUseException e)\n-                                        {\n+                                } else {\n+                                    if (LN_GROUP.equals(localName)) {\n+                                        complexType.m_contentKind =\n+                                            complexType.m_contentKind.isMixed() ?\n+                                                XMLContentTypeKind.Mixed :\n+                                                XMLContentTypeKind.ElementOnly;\n+                                        try {\n+                                            complexType.m_contentModel =\n+                                                groupParticleTag(new XMLScope(complexType), reader,\n+                                                    cache, module, redefine, targetNamespace);\n+                                        } catch (final XMLModelGroupUseException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n-                                    }\n-                                    else if (LN_ALL.equals(localName))\n-                                    {\n-                                        complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                        try\n-                                        {\n-                                            complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.All, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                        }\n-                                        catch (final XMLCompositorOutsideGroupException e)\n-                                        {\n+                                    } else if (LN_ALL.equals(localName)) {\n+                                        complexType.m_contentKind =\n+                                            complexType.m_contentKind.isMixed() ?\n+                                                XMLContentTypeKind.Mixed :\n+                                                XMLContentTypeKind.ElementOnly;\n+                                        try {\n+                                            complexType.m_contentModel = compositorOutsideGroupTag(\n+                                                ModelGroup.SmCompositor.All,\n+                                                new XMLScope(complexType), localName, reader, cache,\n+                                                module, redefine, targetNamespace);\n+                                        } catch (final XMLCompositorOutsideGroupException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n-                                    }\n-                                    else if (LN_CHOICE.equals(localName))\n-                                    {\n-                                        complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                        try\n-                                        {\n-                                            complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.Choice, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                        }\n-                                        catch (final XMLCompositorOutsideGroupException e)\n-                                        {\n+                                    } else if (LN_CHOICE.equals(localName)) {\n+                                        complexType.m_contentKind =\n+                                            complexType.m_contentKind.isMixed() ?\n+                                                XMLContentTypeKind.Mixed :\n+                                                XMLContentTypeKind.ElementOnly;\n+                                        try {\n+                                            complexType.m_contentModel = compositorOutsideGroupTag(\n+                                                ModelGroup.SmCompositor.Choice,\n+                                                new XMLScope(complexType), localName, reader, cache,\n+                                                module, redefine, targetNamespace);\n+                                        } catch (final XMLCompositorOutsideGroupException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n-                                    }\n-                                    else if (LN_SEQUENCE.equals(localName))\n-                                    {\n-                                        try\n-                                        {\n-                                            final XMLParticleWithModelGroupTerm contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.Sequence, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                            if (!redefine)\n-                                            {\n-                                                complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n+                                    } else if (LN_SEQUENCE.equals(localName)) {\n+                                        try {\n+                                            final XMLParticleWithModelGroupTerm contentModel =\n+                                                compositorOutsideGroupTag(\n+                                                    ModelGroup.SmCompositor.Sequence,\n+                                                    new XMLScope(complexType), localName, reader,\n+                                                    cache, module, redefine, targetNamespace);\n+                                            if (!redefine) {\n+                                                complexType.m_contentKind =\n+                                                    complexType.m_contentKind.isMixed() ?\n+                                                        XMLContentTypeKind.Mixed :\n+                                                        XMLContentTypeKind.ElementOnly;\n                                                 complexType.m_contentModel = contentModel;\n+                                            } else {\n+                                                redefineType.extendContentType(\n+                                                    complexType.m_contentKind.isMixed(),\n+                                                    contentModel);\n                                             }\n-                                            else\n-                                            {\n-                                                redefineType.extendContentType(complexType.m_contentKind.isMixed(), contentModel);\n-                                            }\n-                                        }\n-                                        catch (final XMLCompositorOutsideGroupException e)\n-                                        {\n+                                        } catch (final XMLCompositorOutsideGroupException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n-                                    }\n-                                    else if (LN_ATTRIBUTE.equals(localName))\n-                                    {\n-                                        attributeLocalTag(reader, cache, module, redefine, targetNamespace, complexType.getAttributeUses(), complexType.prohibited, new XMLScope(complexType));\n-                                    }\n-                                    else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                                    {\n-                                        try\n-                                        {\n-                                            complexType.getAttributeGroups().add(attribGroupRefTag(reader, cache, module, targetNamespace));\n-                                        }\n-                                        catch (final XMLAttributeGroupException e)\n-                                        {\n+                                    } else if (LN_ATTRIBUTE.equals(localName)) {\n+                                        attributeLocalTag(reader, cache, module, redefine,\n+                                            targetNamespace, complexType.getAttributeUses(),\n+                                            complexType.prohibited, new XMLScope(complexType));\n+                                    } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                        try {\n+                                            complexType.getAttributeGroups().add(\n+                                                attribGroupRefTag(reader, cache, module,\n+                                                    targetNamespace));\n+                                        } catch (final XMLAttributeGroupException e) {\n                                             m_errors.error(e.getCause());\n                                         }\n-                                    }\n-                                    else if (LN_ANY_ATTRIBUTE.equals(localName))\n-                                    {\n-                                        if (null == complexType.attributeWildcard)\n-                                        {\n-                                            complexType.attributeWildcard = anyAttributeTag(reader, targetNamespace, module);\n-                                        }\n-                                        else\n-                                        {\n+                                    } else if (LN_ANY_ATTRIBUTE.equals(localName)) {\n+                                        if (null == complexType.attributeWildcard) {\n+                                            complexType.attributeWildcard =\n+                                                anyAttributeTag(reader, targetNamespace, module);\n+                                        } else {\n                                             // xs:anyAttribute can only occur\n                                             // zero or once.\n-                                            reportUnexpectedElementTag(LN_EXTENSION, reader.getName(), reader.getLocation());\n+                                            reportUnexpectedElementTag(LN_EXTENSION,\n+                                                reader.getName(), reader.getLocation());\n                                             skipTag(reader);\n                                         }\n-                                    }\n-                                    else if (LN_ANNOTATION.equals(localName))\n-                                    {\n+                                    } else if (LN_ANNOTATION.equals(localName)) {\n                                         annotationTag(reader, module);\n-                                    }\n-                                    else\n-                                    {\n+                                    } else {\n                                         throw new AssertionError(reader.getName());\n                                     }\n                                 }\n-                            }\n-                            else\n-                            {\n+                            } else {\n                                 skipTag(reader);\n                             }\n-                        }\n-                        finally\n-                        {\n+                        } finally {\n                             m_pms.popContext();\n                         }\n                     }\n                     break;\n-                    case XMLStreamConstants.END_ELEMENT:\n-                    {\n-                        if (!machine.end())\n-                        {\n+                    case XMLStreamConstants.END_ELEMENT: {\n+                        if (!machine.end()) {\n                             reportUnexpectedEnd(LN_EXTENSION, reader.getLocation());\n                         }\n                         done = true;\n@@ -3731,19 +3110,15 @@ final class XMLSchemaParser extends XMLRepresentation\n                     break;\n                     case XMLStreamConstants.CHARACTERS:\n                     case XMLStreamConstants.COMMENT:\n-                    case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                    {\n+                    case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     }\n                     break;\n-                    default:\n-                    {\n+                    default: {\n                         throw new UnsupportedOperationException(Integer.toString(event));\n                     }\n                 }\n             }\n-        }\n-        catch (final SchemaException e)\n-        {\n+        } catch (final SchemaException e) {\n             m_errors.error(e);\n         }\n     }\n@@ -3751,121 +3126,97 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:extension (simple content)\n      */\n-    private void extensionInSimpleContentTag(final XMLType complexType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void extensionInSimpleContentTag(final XMLType complexType,\n+                                             final XMLSchemaModule module,\n+                                             final XMLStreamReader reader,\n+                                             final XMLSchemaCache cache, final boolean redefine,\n+                                             final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         // When extending simple content we're adding attributes to this complex\n         // type.\n-        try\n-        {\n-            final QName baseName = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n+        try {\n+            final QName baseName =\n+                requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n             ensureReferenceType(baseName, reader.getLocation(), redefine, cache);\n             complexType.setBase(new XMLTypeRef(baseName), DerivationMethod.Extension);\n-        }\n-        catch (final SchemaException e)\n-        {\n+        } catch (final SchemaException e) {\n             m_errors.error(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n+                if (LN_ID.equals(localName)) {\n \n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_BASE.equals(localName))\n-                {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_BASE.equals(localName)) {\n                     // Already known.\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // this is a promotion to the containing type tag\n-                complexType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+                complexType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n-        final ContentModelMachine<String> machine = new ContentModelMachine<String>(extensionInSimpleContentTable, EPSILON);\n+        final ContentModelMachine<String> machine =\n+            new ContentModelMachine<String>(extensionInSimpleContentTable, EPSILON);\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (!machine.step(localName))\n-                            {\n-                                reportUnexpectedElementTag(LN_EXTENSION, reader.getName(), reader.getLocation());\n+                            if (!machine.step(localName)) {\n+                                reportUnexpectedElementTag(LN_EXTENSION, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n-                            }\n-                            else\n-                            {\n-                                if (LN_ATTRIBUTE.equals(localName))\n-                                {\n-                                    attributeLocalTag(reader, cache, module, redefine, targetNamespace, complexType.getAttributeUses(), complexType.prohibited, new XMLScope(complexType));\n-                                }\n-                                else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                                {\n-                                    try\n-                                    {\n-                                        complexType.getAttributeGroups().add(attribGroupRefTag(reader, cache, module, targetNamespace));\n-                                    }\n-                                    catch (final XMLAttributeGroupException e)\n-                                    {\n+                            } else {\n+                                if (LN_ATTRIBUTE.equals(localName)) {\n+                                    attributeLocalTag(reader, cache, module, redefine,\n+                                        targetNamespace, complexType.getAttributeUses(),\n+                                        complexType.prohibited, new XMLScope(complexType));\n+                                } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                    try {\n+                                        complexType.getAttributeGroups().add(\n+                                            attribGroupRefTag(reader, cache, module,\n+                                                targetNamespace));\n+                                    } catch (final XMLAttributeGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ANY_ATTRIBUTE.equals(localName))\n-                                {\n-                                    complexType.attributeWildcard = anyAttributeTag(reader, targetNamespace, module);\n-                                }\n-                                else if (LN_ANNOTATION.equals(localName))\n-                                {\n+                                } else if (LN_ANY_ATTRIBUTE.equals(localName)) {\n+                                    complexType.attributeWildcard =\n+                                        anyAttributeTag(reader, targetNamespace, module);\n+                                } else if (LN_ANNOTATION.equals(localName)) {\n                                     annotationTag(reader, module);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     throw new AssertionError(reader.getName());\n                                 }\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n-                    if (!machine.end())\n-                    {\n+                case XMLStreamConstants.END_ELEMENT: {\n+                    if (!machine.end()) {\n                         reportUnexpectedEnd(LN_EXTENSION, reader.getLocation());\n                     }\n                     done = true;\n@@ -3873,55 +3224,43 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private RestrictedXPath fieldTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, XMLFieldException, AbortException\n-    {\n+    private RestrictedXPath fieldTag(final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLFieldException, AbortException {\n         RestrictedXPath xpath = null;\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_XPATH.equals(localName))\n-                {\n-                    try\n-                    {\n-                        xpath = xpath(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                    }\n-                    catch (final SmAttributeUseException e)\n-                    {\n+                if (LN_XPATH.equals(localName)) {\n+                    try {\n+                        xpath = xpath(reader.getAttributeValue(i), reader.getLocation(),\n+                            reader.getName());\n+                    } catch (final SmAttributeUseException e) {\n                         skipTag(reader);\n                         throw new XMLFieldException(e);\n                     }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // ignore foreign attributes (probably the right thing)\n                 // {any attributes with non-schema namespace}\n             }\n@@ -3929,57 +3268,44 @@ final class XMLSchemaParser extends XMLRepresentation\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_FIELD, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_FIELD,\n+                                    reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_FIELD, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_FIELD, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -3987,120 +3313,101 @@ final class XMLSchemaParser extends XMLRepresentation\n         return xpath;\n     }\n \n-    private boolean fixed(final String strval, final Location location, final QName elementName) throws SmAttributeUseException\n-    {\n-        try\n-        {\n+    private boolean fixed(final String strval, final Location location, final QName elementName)\n+        throws SmAttributeUseException {\n+        try {\n             return trueOrFalse(strval);\n-        }\n-        catch (final SimpleTypeException e)\n-        {\n-            throw new SmAttributeUseException(elementName, new QName(LN_FIXED), getFrozenLocation(location), e);\n+        } catch (final SimpleTypeException e) {\n+            throw new SmAttributeUseException(elementName, new QName(LN_FIXED),\n+                getFrozenLocation(location), e);\n         }\n     }\n \n     /**\n      * xs:fractionDigits\n      */\n-    private XMLFractionDigitsFacet fractionDigitsTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, SmComplexTypeException, AbortException\n-    {\n-        final XMLFractionDigitsFacet facet = new XMLFractionDigitsFacet(simpleType, getFrozenLocation(reader.getLocation()));\n+    private XMLFractionDigitsFacet fractionDigitsTag(final XMLType simpleType,\n+                                                     final XMLStreamReader reader,\n+                                                     final XMLSchemaModule module)\n+        throws XMLStreamException, SmComplexTypeException, AbortException {\n+        final XMLFractionDigitsFacet facet =\n+            new XMLFractionDigitsFacet(simpleType, getFrozenLocation(reader.getLocation()));\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    facet.id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n-                    facet.fixed = fixed(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_VALUE.equals(localName))\n-                {\n+                if (LN_ID.equals(localName)) {\n+                    facet.id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else if (LN_FIXED.equals(localName)) {\n+                    facet.fixed =\n+                        fixed(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n+                } else if (LN_VALUE.equals(localName)) {\n                     final String strval = reader.getAttributeValue(i);\n-                    try\n-                    {\n+                    try {\n                         facet.value = nonNegativeInteger(strval);\n+                    } catch (final SimpleTypeException ignore) {\n+                        throw new SmAttributeUseException(reader.getName(),\n+                            reader.getAttributeName(i), getFrozenLocation(reader.getLocation()),\n+                            ignore);\n                     }\n-                    catch (final SimpleTypeException ignore)\n-                    {\n-                        throw new SmAttributeUseException(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()), ignore);\n-                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                facet.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                facet.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_FRACTION_DIGITS, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_FRACTION_DIGITS,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_FRACTION_DIGITS, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_FRACTION_DIGITS, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -4111,328 +3418,274 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:group (reference)\n      */\n-    private XMLParticleWithModelGroupTerm groupParticleTag(final XMLScope localScope, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLModelGroupUseException, AbortException\n-    {\n+    private XMLParticleWithModelGroupTerm groupParticleTag(final XMLScope localScope,\n+                                                           final XMLStreamReader reader,\n+                                                           final XMLSchemaCache cache,\n+                                                           final XMLSchemaModule module,\n+                                                           final boolean redefine,\n+                                                           final String targetNamespace)\n+        throws XMLStreamException, XMLModelGroupUseException, AbortException {\n         final QName ref;\n         BigInteger minOccurs = BigInteger.ONE;\n         BigInteger maxOccurs = BigInteger.ONE;\n \n-        try\n-        {\n+        try {\n             ref = requiredQName(LN_REF, module.isChameleon(), targetNamespace, reader);\n-        }\n-        catch (final SmComplexTypeException e)\n-        {\n+        } catch (final SmComplexTypeException e) {\n             skipTag(reader);\n             throw new XMLModelGroupUseException(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_MAX_OCCURS.equals(localName))\n-                {\n-                    maxOccurs = maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_MIN_OCCURS.equals(localName))\n-                {\n-                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_REF.equals(localName))\n-                {\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_MAX_OCCURS.equals(localName)) {\n+                    maxOccurs = maxOccurs(reader.getAttributeValue(i), true, reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_MIN_OCCURS.equals(localName)) {\n+                    minOccurs = minOccurs(reader.getAttributeValue(i), reader.getLocation(),\n+                        reader.getName());\n+                } else if (LN_REF.equals(localName)) {\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // don't think we should modify the thing referred to ...\n                 // {any attributes with non-schema namespace}\n             }\n         }\n \n         final XMLModelGroup modelGroup;\n-        if (null != ref)\n-        {\n-            try\n-            {\n+        if (null != ref) {\n+            try {\n                 modelGroup = cache.dereferenceModelGroup(ref, reader.getLocation(), redefine);\n-            }\n-            catch (final SchemaException e)\n-            {\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLModelGroupUseException(e);\n             }\n-        }\n-        else\n-        {\n-            modelGroup = new XMLModelGroup(ModelGroup.SmCompositor.Sequence, localScope, getFrozenLocation(reader.getLocation()));\n+        } else {\n+            modelGroup = new XMLModelGroup(ModelGroup.SmCompositor.Sequence, localScope,\n+                getFrozenLocation(reader.getLocation()));\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_GROUP, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_GROUP,\n+                                    reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_GROUP, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_GROUP, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n \n-        return new XMLParticleWithModelGroupTerm(minOccurs, maxOccurs, modelGroup, getFrozenLocation(reader.getLocation()));\n+        return new XMLParticleWithModelGroupTerm(minOccurs, maxOccurs, modelGroup,\n+            getFrozenLocation(reader.getLocation()));\n     }\n \n     /**\n      * xs:group (definition)\n      */\n-    private XMLModelGroup groupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLModelGroupException, AbortException\n-    {\n+    private XMLModelGroup groupTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                   final XMLSchemaModule module, final boolean redefine,\n+                                   final String targetNamespace)\n+        throws XMLStreamException, XMLModelGroupException, AbortException {\n         final XMLModelGroup modelGroup;\n-        if (!redefine)\n-        {\n-            try\n-            {\n-                modelGroup = cache.registerModelGroup(requiredNCName(LN_NAME, targetNamespace, reader), getFrozenLocation(reader.getLocation()));\n-            }\n-            catch (final SchemaException e)\n-            {\n+        if (!redefine) {\n+            try {\n+                modelGroup = cache\n+                    .registerModelGroup(requiredNCName(LN_NAME, targetNamespace, reader),\n+                        getFrozenLocation(reader.getLocation()));\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLModelGroupException(e);\n             }\n-        }\n-        else\n-        {\n-            try\n-            {\n-                modelGroup = cache.dereferenceModelGroup(requiredNCName(LN_NAME, targetNamespace, reader), reader.getLocation(), redefine);\n-            }\n-            catch (final SchemaException e)\n-            {\n+        } else {\n+            try {\n+                modelGroup = cache\n+                    .dereferenceModelGroup(requiredNCName(LN_NAME, targetNamespace, reader),\n+                        reader.getLocation(), redefine);\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLModelGroupException(e);\n             }\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_NAME.equals(localName))\n-                {\n+                if (LN_NAME.equals(localName)) {\n                     // Already known.\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                modelGroup.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                modelGroup.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean missingACS = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_SEQUENCE.equals(localName))\n-                            {\n-                                missingACS = checkWxsElementMaxOccursUnity(missingACS, LN_GROUP, LN_SEQUENCE, reader.getLocation());\n+                            if (LN_SEQUENCE.equals(localName)) {\n+                                missingACS =\n+                                    checkWxsElementMaxOccursUnity(missingACS, LN_GROUP, LN_SEQUENCE,\n+                                        reader.getLocation());\n                                 modelGroup.setCompositor(ModelGroup.SmCompositor.Sequence);\n-                                compositorWithinGroupTag(reader, cache, module, modelGroup, localName, redefine, targetNamespace);\n+                                compositorWithinGroupTag(reader, cache, module, modelGroup,\n+                                    localName, redefine, targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_CHOICE.equals(localName))\n-                            {\n-                                missingACS = checkWxsElementMaxOccursUnity(missingACS, LN_GROUP, LN_CHOICE, reader.getLocation());\n+                            } else if (LN_CHOICE.equals(localName)) {\n+                                missingACS =\n+                                    checkWxsElementMaxOccursUnity(missingACS, LN_GROUP, LN_CHOICE,\n+                                        reader.getLocation());\n                                 modelGroup.setCompositor(ModelGroup.SmCompositor.Choice);\n-                                compositorWithinGroupTag(reader, cache, module, modelGroup, localName, redefine, targetNamespace);\n+                                compositorWithinGroupTag(reader, cache, module, modelGroup,\n+                                    localName, redefine, targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ALL.equals(localName))\n-                            {\n-                                missingACS = checkWxsElementMaxOccursUnity(missingACS, LN_GROUP, LN_ALL, reader.getLocation());\n+                            } else if (LN_ALL.equals(localName)) {\n+                                missingACS =\n+                                    checkWxsElementMaxOccursUnity(missingACS, LN_GROUP, LN_ALL,\n+                                        reader.getLocation());\n                                 modelGroup.setCompositor(ModelGroup.SmCompositor.All);\n-                                compositorWithinGroupTag(reader, cache, module, modelGroup, localName, redefine, targetNamespace);\n+                                compositorWithinGroupTag(reader, cache, module, modelGroup,\n+                                    localName, redefine, targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_GROUP, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_GROUP,\n+                                    reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_GROUP, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_GROUP, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n \n-        if (null == modelGroup.getCompositor())\n-        {\n+        if (null == modelGroup.getCompositor()) {\n             // Expecting (xs:all | xs:choice | xs:sequence)\n-            m_errors.error(new SmUnexpectedEndException(reader.getName(), getFrozenLocation(reader.getLocation())));\n+            m_errors.error(new SmUnexpectedEndException(reader.getName(),\n+                getFrozenLocation(reader.getLocation())));\n         }\n \n         return modelGroup;\n     }\n \n-    private void importTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void importTag(final XMLSchemaCache cache, final XMLSchemaModule module,\n+                           final XMLStreamReader reader, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         PreCondition.assertArgumentNotNull(module, \"module\");\n-        try\n-        {\n+        try {\n             String schemaLocation = null;\n             String namespace = null;\n             final int attributeCount = reader.getAttributeCount();\n-            for (int i = 0; i < attributeCount; i++)\n-            {\n+            for (int i = 0; i < attributeCount; i++) {\n                 final String namespaceURI = reader.getAttributeNamespace(i);\n-                if (isGlobal(namespaceURI))\n-                {\n+                if (isGlobal(namespaceURI)) {\n                     final String localName = reader.getAttributeLocalName(i);\n-                    if (LN_SCHEMA_LOCATION.equals(localName))\n-                    {\n+                    if (LN_SCHEMA_LOCATION.equals(localName)) {\n                         schemaLocation = reader.getAttributeValue(i);\n-                    }\n-                    else if (LN_NAMESPACE.equals(localName))\n-                    {\n+                    } else if (LN_NAMESPACE.equals(localName)) {\n                         namespace = reader.getAttributeValue(i);\n-                        if (namespace.equals(targetNamespace))\n-                        {\n-                            throw new SmIllegalNamespaceException(LN_IMPORT, targetNamespace, namespace.toString(), new SrcFrozenLocation(reader.getLocation()));\n+                        if (namespace.equals(targetNamespace)) {\n+                            throw new SmIllegalNamespaceException(LN_IMPORT, targetNamespace,\n+                                namespace.toString(), new SrcFrozenLocation(reader.getLocation()));\n                         }\n-                    }\n-                    else if (LN_ID.equals(localName))\n-                    {\n-                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                    }\n-                    else\n-                    {\n-                        reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                }\n-                else if (isWXS(namespaceURI))\n-                {\n-                    reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-                else\n-                {\n+                    } else if (LN_ID.equals(localName)) {\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                    } else {\n+                        reportAttributeInGlobalNamespace(reader.getName(),\n+                            reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n+                    }\n+                } else if (isWXS(namespaceURI)) {\n+                    reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                } else {\n                     // at the moment, we don't have a way to report these, unless we change XMLSchemaModule to also have\n                     // an FAMap, and anyway these will get discarded on transition to the formal schema model.\n                     // {any attributes with non-schema namespace}\n@@ -4441,58 +3694,49 @@ final class XMLSchemaParser extends XMLRepresentation\n \n             annotationContent(LN_IMPORT, reader, module);\n \n-            if (m_processRepeatedNamespaces || !cache.m_seenNamespaces.contains(namespace))\n-            {\n-                parseExternalModule(cache, module, reader.getLocation(), namespace, schemaLocation, ModuleKind.Import);\n+            if (m_processRepeatedNamespaces || !cache.m_seenNamespaces.contains(namespace)) {\n+                parseExternalModule(cache, module, reader.getLocation(), namespace, schemaLocation,\n+                    ModuleKind.Import);\n             }\n-        }\n-        catch (final SmIllegalNamespaceException e)\n-        {\n+        } catch (final SmIllegalNamespaceException e) {\n             m_errors.error(e);\n         }\n     }\n \n-    private void includeTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader) throws XMLStreamException, AbortException\n-    {\n+    private void includeTag(final XMLSchemaCache cache, final XMLSchemaModule module,\n+                            final XMLStreamReader reader)\n+        throws XMLStreamException, AbortException {\n         final int attributeCount = reader.getAttributeCount();\n         String schemaLocation = null;\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_SCHEMA_LOCATION.equals(localName))\n-                {\n+                if (LN_SCHEMA_LOCATION.equals(localName)) {\n                     schemaLocation = reader.getAttributeValue(i);\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // same issue as with import tag: no way to let foreign attributes persist.\n                 // {any attributes with non-schema namespace}\n             }\n         }\n \n-        if (schemaLocation != null)\n-        {\n-            parseExternalModule(cache, module, reader.getLocation(), null, schemaLocation, ModuleKind.Include);\n-        }\n-        else\n-        {\n-            m_errors.error(new SmMissingAttributeException(reader.getName(), new QName(LN_SCHEMA_LOCATION), getFrozenLocation(reader.getLocation())));\n+        if (schemaLocation != null) {\n+            parseExternalModule(cache, module, reader.getLocation(), null, schemaLocation,\n+                ModuleKind.Include);\n+        } else {\n+            m_errors.error(\n+                new SmMissingAttributeException(reader.getName(), new QName(LN_SCHEMA_LOCATION),\n+                    getFrozenLocation(reader.getLocation())));\n         }\n \n         annotationContent(LN_INCLUDE, reader, module);\n@@ -4504,18 +3748,12 @@ final class XMLSchemaParser extends XMLRepresentation\n      * This contradicts the API specification. If this gets too troublesome we should copy the prefix mappings to our\n      * own utility and use that to do the namespace lookup.\n      */\n-    private boolean isBoundPrefix(final String prefix, final String namespaceURI)\n-    {\n-        if (null != namespaceURI)\n-        {\n-            if (XMLConstants.NULL_NS_URI.equals(namespaceURI))\n-            {\n-                if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix))\n-                {\n+    private boolean isBoundPrefix(final String prefix, final String namespaceURI) {\n+        if (null != namespaceURI) {\n+            if (XMLConstants.NULL_NS_URI.equals(namespaceURI)) {\n+                if (XMLConstants.DEFAULT_NS_PREFIX.equals(prefix)) {\n                     return true;\n-                }\n-                else\n-                {\n+                } else {\n                     // TODO: watch for this problem.\n                     // This contradicts the API specification. If this gets too\n                     // troublesome\n@@ -4524,14 +3762,10 @@ final class XMLSchemaParser extends XMLRepresentation\n                     // to do the namespace lookup.\n                     return true;\n                 }\n-            }\n-            else\n-            {\n+            } else {\n                 return true;\n             }\n-        }\n-        else\n-        {\n+        } else {\n             // The return value is null. This value is not represented in the\n             // API specification\n             // but we assume (reasonably) that it means the prefix is not bound,\n@@ -4546,76 +3780,67 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Note: StaX uses <code>null</code> for the no-name namespace, but this function also accepts the zero-length\n      * string.\n      */\n-    private boolean isGlobal(final String namespaceURI)\n-    {\n+    private boolean isGlobal(final String namespaceURI) {\n         return (null == namespaceURI) || XMLConstants.NULL_NS_URI.equals(namespaceURI);\n     }\n \n     /**\n      * Determines whether the namespace specified is the W3C XML Schema namespace.\n      */\n-    private boolean isWXS(final String namespaceURI)\n-    {\n+    private boolean isWXS(final String namespaceURI) {\n         return XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(namespaceURI);\n     }\n \n-    private XMLIdentityConstraint keyrefTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLIdentityConstraintException, AbortException\n-    {\n+    private XMLIdentityConstraint keyrefTag(final XMLSchemaCache cache,\n+                                            final XMLStreamReader reader,\n+                                            final String targetNamespace,\n+                                            final XMLSchemaModule module)\n+        throws XMLStreamException, XMLIdentityConstraintException, AbortException {\n         final XMLIdentityConstraint keyref;\n-        try\n-        {\n+        try {\n             final QName name = requiredNCName(LN_NAME, targetNamespace, reader);\n \n             module.registerIdentityConstraintName(name, reader.getLocation());\n \n-            keyref = cache.registerIdentityConstraint(IdentityConstraintKind.KeyRef, name, getFrozenLocation(reader.getLocation()));\n-        }\n-        catch (final SchemaException e)\n-        {\n+            keyref = cache.registerIdentityConstraint(IdentityConstraintKind.KeyRef, name,\n+                getFrozenLocation(reader.getLocation()));\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLIdentityConstraintException(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_NAME.equals(localName))\n-                {\n+                if (LN_NAME.equals(localName)) {\n                     // Already known.\n-                }\n-                else if (LN_REFER.equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (LN_REFER.equals(localName)) {\n+                    try {\n                         /* final String name = */\n-                        final QName reference = resolveUsingXMLNamespaces(reader.getAttributeValue(i), reader.getNamespaceContext());\n-                        keyref.keyConstraint = cache.dereferenceIdentityConstraint(reference, reader.getLocation());\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                keyref.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+                        final QName reference =\n+                            resolveUsingXMLNamespaces(reader.getAttributeValue(i),\n+                                reader.getNamespaceContext());\n+                        keyref.keyConstraint =\n+                            cache.dereferenceIdentityConstraint(reference, reader.getLocation());\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                keyref.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n@@ -4623,142 +3848,117 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean missingFields = true;\n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_KEYREF, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_KEYREF,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else if (LN_SELECTOR.equals(localName))\n-                            {\n-                                missingSelector = checkWxsElementMaxOccursUnity(missingSelector, LN_UNIQUE, LN_SELECTOR, reader.getLocation());\n-                                try\n-                                {\n+                            } else if (LN_SELECTOR.equals(localName)) {\n+                                missingSelector =\n+                                    checkWxsElementMaxOccursUnity(missingSelector, LN_UNIQUE,\n+                                        LN_SELECTOR, reader.getLocation());\n+                                try {\n                                     keyref.selector = selectorTag(reader, module);\n-                                }\n-                                catch (final XMLSelectorException e)\n-                                {\n+                                } catch (final XMLSelectorException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_FIELD.equals(localName))\n-                            {\n-                                if (missingSelector)\n-                                {\n-                                    m_errors.error(new SmUnexpectedElementException(reader.getName(), getFrozenLocation(reader.getLocation()), new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_FIELD), getFrozenLocation(reader.getLocation())));\n+                            } else if (LN_FIELD.equals(localName)) {\n+                                if (missingSelector) {\n+                                    m_errors.error(\n+                                        new SmUnexpectedElementException(reader.getName(),\n+                                            getFrozenLocation(reader.getLocation()),\n+                                            new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_FIELD),\n+                                            getFrozenLocation(reader.getLocation())));\n                                 }\n                                 missingFields = false;\n-                                try\n-                                {\n+                                try {\n                                     keyref.fields.add(fieldTag(reader, module));\n-                                }\n-                                catch (final XMLFieldException e)\n-                                {\n+                                } catch (final XMLFieldException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_KEYREF, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_KEYREF, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n-        if (missingFields)\n-        {\n-            m_errors.error(new SmUnexpectedEndException(reader.getName(), getFrozenLocation(reader.getLocation())));\n+        if (missingFields) {\n+            m_errors.error(new SmUnexpectedEndException(reader.getName(),\n+                getFrozenLocation(reader.getLocation())));\n         }\n         return keyref;\n     }\n \n-    private XMLIdentityConstraint keyTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLIdentityConstraintException, AbortException\n-    {\n+    private XMLIdentityConstraint keyTag(final XMLSchemaCache cache, final XMLStreamReader reader,\n+                                         final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLIdentityConstraintException, AbortException {\n         final XMLIdentityConstraint constraint;\n-        try\n-        {\n+        try {\n             final QName name = requiredNCName(LN_NAME, targetNamespace, reader);\n \n             module.registerIdentityConstraintName(name, reader.getLocation());\n \n-            constraint = cache.registerIdentityConstraint(IdentityConstraintKind.Key, name, getFrozenLocation(reader.getLocation()));\n-        }\n-        catch (final SchemaException e)\n-        {\n+            constraint = cache.registerIdentityConstraint(IdentityConstraintKind.Key, name,\n+                getFrozenLocation(reader.getLocation()));\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLIdentityConstraintException(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_NAME.equals(localName))\n-                {\n+                if (LN_NAME.equals(localName)) {\n                     // Already known.\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                constraint.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                constraint.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n@@ -4766,217 +3966,175 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean missingFields = true;\n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_KEY, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_KEY,\n+                                    reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else if (LN_SELECTOR.equals(localName))\n-                            {\n-                                missingSelector = checkWxsElementMaxOccursUnity(missingSelector, LN_UNIQUE, LN_SELECTOR, reader.getLocation());\n-                                try\n-                                {\n+                            } else if (LN_SELECTOR.equals(localName)) {\n+                                missingSelector =\n+                                    checkWxsElementMaxOccursUnity(missingSelector, LN_UNIQUE,\n+                                        LN_SELECTOR, reader.getLocation());\n+                                try {\n                                     constraint.selector = selectorTag(reader, module);\n-                                }\n-                                catch (final XMLSelectorException e)\n-                                {\n+                                } catch (final XMLSelectorException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_FIELD.equals(localName))\n-                            {\n-                                if (missingSelector)\n-                                {\n-                                    m_errors.error(new SmUnexpectedElementException(reader.getName(), getFrozenLocation(reader.getLocation()), new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_FIELD), getFrozenLocation(reader.getLocation())));\n+                            } else if (LN_FIELD.equals(localName)) {\n+                                if (missingSelector) {\n+                                    m_errors.error(\n+                                        new SmUnexpectedElementException(reader.getName(),\n+                                            getFrozenLocation(reader.getLocation()),\n+                                            new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_FIELD),\n+                                            getFrozenLocation(reader.getLocation())));\n                                 }\n                                 missingFields = false;\n-                                try\n-                                {\n+                                try {\n                                     constraint.fields.add(fieldTag(reader, module));\n-                                }\n-                                catch (final XMLFieldException e)\n-                                {\n+                                } catch (final XMLFieldException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_KEY, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_KEY, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n-        if (missingFields)\n-        {\n-            m_errors.error(new SmUnexpectedEndException(reader.getName(), getFrozenLocation(reader.getLocation())));\n+        if (missingFields) {\n+            m_errors.error(new SmUnexpectedEndException(reader.getName(),\n+                getFrozenLocation(reader.getLocation())));\n         }\n         return constraint;\n     }\n \n-    private String lang(final String initialValue) throws SimpleTypeException\n-    {\n+    private String lang(final String initialValue) throws SimpleTypeException {\n         return validateString(initialValue, NativeType.LANGUAGE);\n     }\n \n     /**\n      * xs:length, xs:maxLength, xs:minLength\n      */\n-    private XMLLength lengthTag(final XMLType type, final boolean minimum, final boolean maximum, final String contextName, final XMLSchemaModule module, final XMLStreamReader reader) throws XMLStreamException, SmComplexTypeException, AbortException\n-    {\n+    private XMLLength lengthTag(final XMLType type, final boolean minimum, final boolean maximum,\n+                                final String contextName, final XMLSchemaModule module,\n+                                final XMLStreamReader reader)\n+        throws XMLStreamException, SmComplexTypeException, AbortException {\n         final XMLLength length = new XMLLength(type, getFrozenLocation(reader.getLocation()));\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_VALUE.equals(localName))\n-                {\n-                    if (minimum)\n-                    {\n-                        try\n-                        {\n+                if (LN_VALUE.equals(localName)) {\n+                    if (minimum) {\n+                        try {\n                             length.minLength = nonNegativeInteger(reader.getAttributeValue(i));\n-                        }\n-                        catch (final SimpleTypeException e)\n-                        {\n-                            reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n+                        } catch (final SimpleTypeException e) {\n+                            reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                                reader.getLocation(), e);\n                         }\n                     }\n-                    if (maximum)\n-                    {\n-                        try\n-                        {\n+                    if (maximum) {\n+                        try {\n                             length.maxLength = nonNegativeInteger(reader.getAttributeValue(i));\n-                        }\n-                        catch (final SimpleTypeException e)\n-                        {\n-                            reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n+                        } catch (final SimpleTypeException e) {\n+                            reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                                reader.getLocation(), e);\n                         }\n                     }\n+                } else if (LN_FIXED.equals(localName)) {\n+                    length.fixed =\n+                        fixed(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n+                } else if (LN_ID.equals(localName)) {\n+                    length.id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_FIXED.equals(localName))\n-                {\n-                    length.fixed = fixed(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    length.id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                length.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                length.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, contextName, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, contextName,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(contextName, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(contextName, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -4987,8 +4145,10 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:list\n      */\n-    private void listTag(final XMLType listType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void listTag(final XMLType listType, final XMLSchemaModule module,\n+                         final XMLStreamReader reader, final XMLSchemaCache cache,\n+                         final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         listType.setBase(ANY_SIMPLE_TYPE, DerivationMethod.List);\n \n         // Use this to detect missing both itemType attribute and <simpleType>\n@@ -5000,39 +4160,31 @@ final class XMLSchemaParser extends XMLRepresentation\n         listType.itemRef = null;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ITEM_TYPE.equals(localName))\n-                {\n-                    try\n-                    {\n-                        listType.itemRef = typeRef(reader.getAttributeValue(i), LN_ITEM_TYPE, module.isChameleon(), targetNamespace, reader);\n-                        ensureReferenceType(listType.itemRef.getName(), reader.getLocation(), redefine, cache);\n-                    }\n-                    catch (final SmComplexTypeException e)\n-                    {\n+                if (LN_ITEM_TYPE.equals(localName)) {\n+                    try {\n+                        listType.itemRef =\n+                            typeRef(reader.getAttributeValue(i), LN_ITEM_TYPE, module.isChameleon(),\n+                                targetNamespace, reader);\n+                        ensureReferenceType(listType.itemRef.getName(), reader.getLocation(),\n+                            redefine, cache);\n+                    } catch (final SmComplexTypeException e) {\n                         m_errors.error(e);\n                     }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // I don't think we want foreign attributes here, do we?\n                 // {any attributes with non-schema namespace}\n             }\n@@ -5041,109 +4193,85 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean missingST = true;\n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_SIMPLE_TYPE.equals(localName))\n-                            {\n-                                if (null == listType.itemRef)\n-                                {\n-                                    missingST = checkWxsElementMaxOccursUnity(missingST, LN_LIST, LN_SIMPLE_TYPE, reader.getLocation());\n-                                    listType.itemRef = simpleTypeLocalTag(new XMLScope(listType), cache, module, reader, false, targetNamespace);\n+                            if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                if (null == listType.itemRef) {\n+                                    missingST = checkWxsElementMaxOccursUnity(missingST, LN_LIST,\n+                                        LN_SIMPLE_TYPE, reader.getLocation());\n+                                    listType.itemRef =\n+                                        simpleTypeLocalTag(new XMLScope(listType), cache, module,\n+                                            reader, false, targetNamespace);\n                                     firstElement = false;\n+                                } else {\n+                                    m_errors.error(new SmSimpleTypeListException(\n+                                        getFrozenLocation(reader.getLocation())));\n                                 }\n-                                else\n-                                {\n-                                    m_errors.error(new SmSimpleTypeListException(getFrozenLocation(reader.getLocation())));\n-                                }\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_LIST, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_LIST,\n+                                    reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_LIST, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_LIST, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n \n-        if (null == listType.itemRef)\n-        {\n+        if (null == listType.itemRef) {\n             m_errors.error(new SmSimpleTypeListException(getFrozenLocation(reader.getLocation())));\n         }\n     }\n \n     /**\n      * Parse the maxOccurs attribute.\n-     * \n-     * @param strval\n-     *            The attribute value.\n-     * @param unbounded\n-     *            Determines whether \"unbounded\" is an acceptable value.\n-     * @param location\n-     *            The parser location.\n-     * @param elementName\n-     *            The element name containing the attribute.\n+     *\n+     * @param strval      The attribute value.\n+     * @param unbounded   Determines whether \"unbounded\" is an acceptable value.\n+     * @param location    The parser location.\n+     * @param elementName The element name containing the attribute.\n      */\n-    private BigInteger maxOccurs(final String strval, final boolean unbounded, final Location location, final QName elementName) \n-        throws AbortException\n-    {\n-        if (unbounded)\n-        {\n-            if (\"unbounded\".equals(strval))\n-            {\n+    private BigInteger maxOccurs(final String strval, final boolean unbounded,\n+                                 final Location location, final QName elementName)\n+        throws AbortException {\n+        if (unbounded) {\n+            if (\"unbounded\".equals(strval)) {\n                 return XMLParticle.UNBOUNDED;\n             }\n         }\n-        try\n-        {\n+        try {\n             return nonNegativeInteger(strval);\n-        }\n-        catch (final SimpleTypeException e)\n-        {\n+        } catch (final SimpleTypeException e) {\n             reportAttributeUseError(elementName, new QName(LN_MAX_OCCURS), location, e);\n             return BigInteger.ONE;\n         }\n@@ -5152,97 +4280,81 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:maxExclusive, xs:maxInclusive, xs:minExclusive, xs:minInclusive\n      */\n-    private XMLMinMaxFacet minmaxTag(final XMLType simpleType, final FacetKind kind, final String elementName, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, SmComplexTypeException, AbortException\n-    {\n-        final XMLMinMaxFacet minmax = new XMLMinMaxFacet(kind, elementName, simpleType, getFrozenLocation(reader.getLocation()));\n+    private XMLMinMaxFacet minmaxTag(final XMLType simpleType, final FacetKind kind,\n+                                     final String elementName, final XMLStreamReader reader,\n+                                     final XMLSchemaModule module)\n+        throws XMLStreamException, SmComplexTypeException, AbortException {\n+        final XMLMinMaxFacet minmax = new XMLMinMaxFacet(kind, elementName, simpleType,\n+            getFrozenLocation(reader.getLocation()));\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_VALUE.equals(localName))\n-                {\n+                if (LN_VALUE.equals(localName)) {\n                     minmax.value = reader.getAttributeValue(i);\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n-                    minmax.fixed = fixed(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    minmax.id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                minmax.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+                } else if (LN_FIXED.equals(localName)) {\n+                    minmax.fixed =\n+                        fixed(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n+                } else if (LN_ID.equals(localName)) {\n+                    minmax.id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                minmax.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, elementName, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, elementName,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(elementName, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(elementName, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -5252,52 +4364,41 @@ final class XMLSchemaParser extends XMLRepresentation\n \n     /**\n      * Parse the minOccurs attribute.\n-     * \n-     * @param strval\n-     *            The attribute value.\n-     * @param location\n-     *            The parser location.\n-     * @param elementName\n-     *            The element name containing the attribute.\n+     *\n+     * @param strval      The attribute value.\n+     * @param location    The parser location.\n+     * @param elementName The element name containing the attribute.\n      */\n-    private BigInteger minOccurs(final String strval, final Location location, QName elementName) \n-        throws AbortException\n-    {\n-        try\n-        {\n+    private BigInteger minOccurs(final String strval, final Location location, QName elementName)\n+        throws AbortException {\n+        try {\n             return nonNegativeInteger(strval);\n-        }\n-        catch (final SimpleTypeException e)\n-        {\n-            m_errors.error(new SmAttributeUseException(elementName, new QName(LN_MIN_OCCURS), getFrozenLocation(location), e));\n+        } catch (final SimpleTypeException e) {\n+            m_errors.error(new SmAttributeUseException(elementName, new QName(LN_MIN_OCCURS),\n+                getFrozenLocation(location), e));\n             return BigInteger.ONE;\n         }\n     }\n \n-    private String name(final String initialValue) \n-        throws SimpleTypeException\n-    {\n+    private String name(final String initialValue)\n+        throws SimpleTypeException {\n         final SimpleType atomicType = bootstrap.getAtomicType(NativeType.NCNAME);\n-        try\n-        {\n+        try {\n             final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n-            if (value.size() > 0)\n+            if (value.size() > 0) {\n                 return atoms.getString(value.get(0));\n-        }\n-        catch (DatatypeException dte)\n-        {\n+            }\n+        } catch (DatatypeException dte) {\n             throw new SimpleTypeException(initialValue, atomicType, dte);\n         }\n         return null;\n     }\n \n-    private NamespaceConstraint namespaces(final String initialValue, final String targetNamespace) \n-        throws SimpleTypeException\n-    {\n+    private NamespaceConstraint namespaces(final String initialValue, final String targetNamespace)\n+        throws SimpleTypeException {\n         final String strval = initialValue.trim();\n \n-        if (strval.length() == 0)\n-        {\n+        if (strval.length() == 0) {\n             // A reading of the specification might suggest an empty set\n             // of namespaces that cannot be matched by any element.\n             // The Microsoft interpretation of namespace=\"\" is that\n@@ -5305,36 +4406,22 @@ final class XMLSchemaParser extends XMLRepresentation\n             // so the default is ##any.\n             // http://www.w3.org/Bugs/Public/show_bug.cgi?id=4066\n             return NamespaceConstraint.Any();\n-        }\n-        else if (strval.equals(\"##any\"))\n-        {\n+        } else if (strval.equals(\"##any\")) {\n             return NamespaceConstraint.Any();\n-        }\n-        else if (strval.equals(\"##other\"))\n-        {\n+        } else if (strval.equals(\"##other\")) {\n             return NamespaceConstraint.exclude(targetNamespace);\n-        }\n-        else\n-        {\n+        } else {\n             final HashSet<String> namespaces = new HashSet<String>();\n             final StringTokenizer tokenizer = new StringTokenizer(strval);\n-            while (tokenizer.hasMoreTokens())\n-            {\n+            while (tokenizer.hasMoreTokens()) {\n                 final String token = tokenizer.nextToken();\n-                if (token.equals(\"##targetNamespace\"))\n-                {\n+                if (token.equals(\"##targetNamespace\")) {\n                     namespaces.add(targetNamespace);\n-                }\n-                else if (token.equals(\"##local\"))\n-                {\n+                } else if (token.equals(\"##local\")) {\n                     namespaces.add(XMLConstants.NULL_NS_URI);\n-                }\n-                else if (!token.startsWith(\"##\"))\n-                {\n+                } else if (!token.startsWith(\"##\")) {\n                     namespaces.add(token);\n-                }\n-                else\n-                {\n+                } else {\n                     final DatatypeException cause = new DatatypeException(strval, null);\n                     throw new SimpleTypeException(strval, null, cause);\n                 }\n@@ -5343,88 +4430,71 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private BigInteger nonNegativeInteger(final String initialValue) \n-        throws SimpleTypeException\n-    {\n-      final SimpleType atomicType = bootstrap.getAtomicType(NativeType.NON_NEGATIVE_INTEGER);\n-      try\n-      {\n-          final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getInteger(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, atomicType, dte);\n-      }\n-      return null;\n+    private BigInteger nonNegativeInteger(final String initialValue)\n+        throws SimpleTypeException {\n+        final SimpleType atomicType = bootstrap.getAtomicType(NativeType.NON_NEGATIVE_INTEGER);\n+        try {\n+            final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n+            if (value.size() > 0) {\n+                return atoms.getInteger(value.get(0));\n+            }\n+        } catch (DatatypeException dte) {\n+            throw new SimpleTypeException(initialValue, atomicType, dte);\n+        }\n+        return null;\n     }\n \n     /**\n      * xs:notation\n      */\n-    private XMLNotation notationTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLNotationException, AbortException\n-    {\n+    private XMLNotation notationTag(final XMLSchemaCache cache, final XMLStreamReader reader,\n+                                    final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLNotationException, AbortException {\n         final XMLNotation notation;\n-        try\n-        {\n-            notation = cache.registerNotation(requiredNCName(LN_NAME, targetNamespace, reader), getFrozenLocation(reader.getLocation()));\n-        }\n-        catch (final SchemaException e)\n-        {\n+        try {\n+            notation = cache.registerNotation(requiredNCName(LN_NAME, targetNamespace, reader),\n+                getFrozenLocation(reader.getLocation()));\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLNotationException(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_NAME.equals(localName))\n-                {\n+                if (LN_NAME.equals(localName)) {\n                     // Already have it.\n-                }\n-                else if (LN_PUBLIC.equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (LN_PUBLIC.equals(localName)) {\n+                    try {\n                         notation.setPublicId(token(reader.getAttributeValue(i)));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_SYSTEM.equals(localName))\n-                {\n+                } else if (LN_SYSTEM.equals(localName)) {\n                     notation.setSystemId(reader.getAttributeValue(i));\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                notation.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                notation.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n-        if (null == notation.getPublicId() && null == notation.getSystemId())\n-        {\n+        if (null == notation.getPublicId() && null == notation.getSystemId()) {\n             // Either public or system should be defined.\n-            m_errors.error(new SmMissingAttributeException(reader.getName(), new QName(LN_PUBLIC), getFrozenLocation(reader.getLocation())));\n+            m_errors.error(new SmMissingAttributeException(reader.getName(), new QName(LN_PUBLIC),\n+                getFrozenLocation(reader.getLocation())));\n         }\n \n         annotationContent(LN_NOTATION, reader, module);\n@@ -5432,90 +4502,81 @@ final class XMLSchemaParser extends XMLRepresentation\n         return notation;\n     }\n \n-    private QName optionalQName(final String initialValue, final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader) throws SmComplexTypeException\n-    {\n-        if (null != initialValue)\n-        {\n-            if (isChameleon)\n-            {\n-                try\n-                {\n-                    return resolveUsingTargetNamespace(initialValue, targetNamespace, reader.getNamespaceContext());\n-                }\n-                catch (final SimpleTypeException e)\n-                {\n-                    throw new SmAttributeUseException(reader.getName(), new QName(attributeName), getFrozenLocation(reader.getLocation()), e);\n-                }\n-            }\n-            else\n-            {\n-                try\n-                {\n+    private QName optionalQName(final String initialValue, final String attributeName,\n+                                final boolean isChameleon, final String targetNamespace,\n+                                final XMLStreamReader reader) throws SmComplexTypeException {\n+        if (null != initialValue) {\n+            if (isChameleon) {\n+                try {\n+                    return resolveUsingTargetNamespace(initialValue, targetNamespace,\n+                        reader.getNamespaceContext());\n+                } catch (final SimpleTypeException e) {\n+                    throw new SmAttributeUseException(reader.getName(), new QName(attributeName),\n+                        getFrozenLocation(reader.getLocation()), e);\n+                }\n+            } else {\n+                try {\n                     return resolveUsingXMLNamespaces(initialValue, reader.getNamespaceContext());\n-                }\n-                catch (final SimpleTypeException e)\n-                {\n-                    throw new SmAttributeUseException(reader.getName(), new QName(attributeName), getFrozenLocation(reader.getLocation()), e);\n+                } catch (final SimpleTypeException e) {\n+                    throw new SmAttributeUseException(reader.getName(), new QName(attributeName),\n+                        getFrozenLocation(reader.getLocation()), e);\n                 }\n             }\n         }\n         return null;\n     }\n \n-    private void parseExternalModule(final XMLSchemaCache cache, final XMLSchemaModule parent, final Location location, final String namespace, final String schemaLocation, final ModuleKind moduleKind) throws AbortException\n-    {\n+    private void parseExternalModule(final XMLSchemaCache cache, final XMLSchemaModule parent,\n+                                     final Location location, final String namespace,\n+                                     final String schemaLocation, final ModuleKind moduleKind)\n+        throws AbortException {\n //        PreCondition.assertArgumentNotNull(schemaLocation, \"schemaLocation\");\n \n-        if (null == m_catalog)\n-        {\n+        if (null == m_catalog) {\n             throw new AssertionError(\"catalog required for include, import or redefine.\");\n         }\n         // TODO: here, we use StringToURIParser on the namespace. we should be able to pass a string, instead.\n         String parentSystemId = parent.getSystemId();\n-        if (parentSystemId == null)\n+        if (parentSystemId == null) {\n             parentSystemId = \"\";\n-        final URI catalogURI = m_catalog.resolveNamespaceAndSchemaLocation(StringToURIParser.parse(parentSystemId), namespace, schemaLocation);\n+        }\n+        final URI catalogURI = m_catalog\n+            .resolveNamespaceAndSchemaLocation(StringToURIParser.parse(parentSystemId), namespace,\n+                schemaLocation);\n \n         // If the catalogURI is null, we will not parse (obviously), and we will not raise an error.\n         // If the missing schema is a problem, that problem will be evident during component resolution,\n         // where an error will be raised.\n-        if (catalogURI != null)\n-        {\n-            try\n-            {\n-                if (null == m_resolver)\n-                {\n+        if (catalogURI != null) {\n+            try {\n+                if (null == m_resolver) {\n                     throw new AssertionError(\"resolver required for include, import or redefine.\");\n                 }\n                 final InputStream source = m_resolver.resolveInputStream(catalogURI);\n-                final XMLSchemaModule module = new XMLSchemaModule(parent, schemaLocation, catalogURI.toString());\n-                switch (moduleKind)\n-                {\n-                    case Include:\n-                    {\n+                final XMLSchemaModule module =\n+                    new XMLSchemaModule(parent, schemaLocation, catalogURI.toString());\n+                switch (moduleKind) {\n+                    case Include: {\n                         module.setIncludeFlag();\n                     }\n                     break;\n-                    case Import:\n-                    {\n+                    case Import: {\n                         module.setImportFlag();\n                     }\n                     break;\n-                    case Redefine:\n-                    {\n+                    case Redefine: {\n                         module.setRedefineFlag();\n                     }\n                     break;\n-                    default:\n-                    {\n+                    default: {\n                         throw new AssertionError(moduleKind);\n                     }\n                 }\n-                final XMLSchemaParser parser = new XMLSchemaParser(bootstrap, m_errors, m_catalog, m_resolver, m_processRepeatedNamespaces);\n+                final XMLSchemaParser parser =\n+                    new XMLSchemaParser(bootstrap, m_errors, m_catalog, m_resolver,\n+                        m_processRepeatedNamespaces);\n                 parser.parse(catalogURI.toString(), source, cache, module);\n-            }\n-            catch (final IOException e)\n-            {\n+            } catch (final IOException e) {\n                 // Do nothing. It's not an error.\n             }\n         }\n@@ -5524,93 +4585,77 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:pattern\n      */\n-    private XMLPatternFacet patternTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n-        final XMLPatternFacet pattern = new XMLPatternFacet(simpleType, getFrozenLocation(reader.getLocation()));\n+    private XMLPatternFacet patternTag(final XMLType simpleType, final XMLStreamReader reader,\n+                                       final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException {\n+        final XMLPatternFacet pattern =\n+            new XMLPatternFacet(simpleType, getFrozenLocation(reader.getLocation()));\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_VALUE.equals(localName))\n-                {\n+                if (LN_VALUE.equals(localName)) {\n                     pattern.value = reader.getAttributeValue(i);\n+                } else if (LN_ID.equals(localName)) {\n+                    pattern.id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    pattern.id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                pattern.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                pattern.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_PATTERN, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_PATTERN,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_PATTERN, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_PATTERN, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -5618,283 +4663,238 @@ final class XMLSchemaParser extends XMLRepresentation\n         return pattern;\n     }\n \n-    private BigInteger positiveInteger(final String initialValue) \n-        throws SimpleTypeException\n-    {\n-      final SimpleType atomicType = bootstrap.getAtomicType(NativeType.POSITIVE_INTEGER);\n-      try\n-      {\n-          final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getInteger(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, atomicType, dte);\n-      }\n-      return null;\n+    private BigInteger positiveInteger(final String initialValue)\n+        throws SimpleTypeException {\n+        final SimpleType atomicType = bootstrap.getAtomicType(NativeType.POSITIVE_INTEGER);\n+        try {\n+            final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n+            if (value.size() > 0) {\n+                return atoms.getInteger(value.get(0));\n+            }\n+        } catch (DatatypeException dte) {\n+            throw new SimpleTypeException(initialValue, atomicType, dte);\n+        }\n+        return null;\n     }\n \n-    private ProcessContentsMode processContents(final String strval) throws SimpleTypeException\n-    {\n-        if (\"lax\".equals(strval))\n-        {\n+    private ProcessContentsMode processContents(final String strval) throws SimpleTypeException {\n+        if (\"lax\".equals(strval)) {\n             return ProcessContentsMode.Lax;\n-        }\n-        else if (\"skip\".equals(strval))\n-        {\n+        } else if (\"skip\".equals(strval)) {\n             return ProcessContentsMode.Skip;\n-        }\n-        else if (\"strict\".equals(strval))\n-        {\n+        } else if (\"strict\".equals(strval)) {\n             return ProcessContentsMode.Strict;\n-        }\n-        else\n-        {\n+        } else {\n             final DatatypeException cause = new DatatypeException(strval, null);\n             throw new SimpleTypeException(strval, null, cause);\n         }\n     }\n \n-    private boolean qualified(final String strval) throws SimpleTypeException\n-    {\n-        if (\"qualified\".equals(strval))\n-        {\n+    private boolean qualified(final String strval) throws SimpleTypeException {\n+        if (\"qualified\".equals(strval)) {\n             return true;\n-        }\n-        else if (\"unqualified\".equals(strval))\n-        {\n+        } else if (\"unqualified\".equals(strval)) {\n             return false;\n-        }\n-        else\n-        {\n+        } else {\n             final DatatypeException cause = new DatatypeException(strval, null);\n             throw new SimpleTypeException(strval, null, cause);\n         }\n     }\n \n-    private void redefineTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void redefineTag(final XMLSchemaCache cache, final XMLSchemaModule module,\n+                             final XMLStreamReader reader, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         {\n             String schemaLocation = null;\n             final int attributeCount = reader.getAttributeCount();\n-            for (int i = 0; i < attributeCount; i++)\n-            {\n+            for (int i = 0; i < attributeCount; i++) {\n                 final String namespaceURI = reader.getAttributeNamespace(i);\n-                if (isGlobal(namespaceURI))\n-                {\n+                if (isGlobal(namespaceURI)) {\n                     final String localName = reader.getAttributeLocalName(i);\n-                    if (LN_SCHEMA_LOCATION.equals(localName))\n-                    {\n+                    if (LN_SCHEMA_LOCATION.equals(localName)) {\n                         schemaLocation = reader.getAttributeValue(i);\n-                    }\n-                    else if (LN_ID.equals(localName))\n-                    {\n-                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                    }\n-                    else\n-                    {\n-                        reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                    }\n-                }\n-                else if (isWXS(namespaceURI))\n-                {\n-                    reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-                else\n-                {\n+                    } else if (LN_ID.equals(localName)) {\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                    } else {\n+                        reportAttributeInGlobalNamespace(reader.getName(),\n+                            reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n+                    }\n+                } else if (isWXS(namespaceURI)) {\n+                    reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                } else {\n                     // like import and include, there's no way to expose these in the end.\n                     // we might reconsider if we want to have the modules available somehow.\n                     // {any attributes with non-schema namespace}\n                 }\n             }\n \n-            if (schemaLocation != null)\n-            {\n-                parseExternalModule(cache, module, reader.getLocation(), null, schemaLocation, ModuleKind.Redefine);\n-            }\n-            else\n-            {\n-                m_errors.error(new SmMissingAttributeException(reader.getName(), new QName(LN_SCHEMA_LOCATION), getFrozenLocation(reader.getLocation())));\n+            if (schemaLocation != null) {\n+                parseExternalModule(cache, module, reader.getLocation(), null, schemaLocation,\n+                    ModuleKind.Redefine);\n+            } else {\n+                m_errors.error(\n+                    new SmMissingAttributeException(reader.getName(), new QName(LN_SCHEMA_LOCATION),\n+                        getFrozenLocation(reader.getLocation())));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_REDEFINE, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_REDEFINE,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else if (LN_SIMPLE_TYPE.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    simpleTypeGlobalTag(reader, cache, module, true, targetNamespace);\n-                                }\n-                                catch (final XMLSimpleTypeException e)\n-                                {\n+                            } else if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                try {\n+                                    simpleTypeGlobalTag(reader, cache, module, true,\n+                                        targetNamespace);\n+                                } catch (final XMLSimpleTypeException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_COMPLEX_TYPE.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    complexTypeGlobalTag(reader, cache, module, true, targetNamespace);\n-                                }\n-                                catch (final XMLComplexTypeException e)\n-                                {\n+                            } else if (LN_COMPLEX_TYPE.equals(localName)) {\n+                                try {\n+                                    complexTypeGlobalTag(reader, cache, module, true,\n+                                        targetNamespace);\n+                                } catch (final XMLComplexTypeException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_GROUP.equals(localName))\n-                            {\n-                                try\n-                                {\n+                            } else if (LN_GROUP.equals(localName)) {\n+                                try {\n                                     groupTag(reader, cache, module, true, targetNamespace);\n-                                }\n-                                catch (final XMLModelGroupException e)\n-                                {\n+                                } catch (final XMLModelGroupException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                            {\n-                                try\n-                                {\n+                            } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                try {\n                                     attribGroupTag(reader, cache, module, true, targetNamespace);\n-                                }\n-                                catch (final XMLAttributeGroupException e)\n-                                {\n+                                } catch (final XMLAttributeGroupException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_REDEFINE, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_REDEFINE, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private QName referenceOptional(final XMLStreamReader reader, final String localName, final XMLSchemaModule module, final String targetNamespace) throws AbortException\n-    {\n+    private QName referenceOptional(final XMLStreamReader reader, final String localName,\n+                                    final XMLSchemaModule module, final String targetNamespace)\n+        throws AbortException {\n         final String srcval = reader.getAttributeValue(null, localName);\n-        if (null != srcval)\n-        {\n-            if (module.isChameleon())\n-            {\n-                try\n-                {\n-                    return resolveUsingTargetNamespace(srcval, targetNamespace, reader.getNamespaceContext());\n-                }\n-                catch (final SimpleTypeException e)\n-                {\n-                    m_errors.error(new SmAttributeUseException(reader.getName(), new QName(localName), getFrozenLocation(reader.getLocation()), e));\n+        if (null != srcval) {\n+            if (module.isChameleon()) {\n+                try {\n+                    return resolveUsingTargetNamespace(srcval, targetNamespace,\n+                        reader.getNamespaceContext());\n+                } catch (final SimpleTypeException e) {\n+                    m_errors.error(\n+                        new SmAttributeUseException(reader.getName(), new QName(localName),\n+                            getFrozenLocation(reader.getLocation()), e));\n                     return null;\n                 }\n-            }\n-            else\n-            {\n-                try\n-                {\n+            } else {\n+                try {\n                     return resolveUsingXMLNamespaces(srcval, reader.getNamespaceContext());\n-                }\n-                catch (final SimpleTypeException e)\n-                {\n-                    m_errors.error(new SmAttributeUseException(reader.getName(), new QName(localName), getFrozenLocation(reader.getLocation()), e));\n+                } catch (final SimpleTypeException e) {\n+                    m_errors.error(\n+                        new SmAttributeUseException(reader.getName(), new QName(localName),\n+                            getFrozenLocation(reader.getLocation()), e));\n                     return null;\n                 }\n             }\n-        }\n-        else\n-        {\n+        } else {\n             return null;\n         }\n     }\n \n-    private void reportAttributeInGlobalNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location) throws AbortException\n-    {\n+    private void reportAttributeInGlobalNamespace(final QName elementName,\n+                                                  final QName attributeName,\n+                                                  final SrcFrozenLocation location)\n+        throws AbortException {\n         m_errors.error(new CvcUnexpectedAttributeException(elementName, attributeName, location));\n     }\n \n-    private void reportAttributeInWxsNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location) throws AbortException\n-    {\n+    private void reportAttributeInWxsNamespace(final QName elementName, final QName attributeName,\n+                                               final SrcFrozenLocation location)\n+        throws AbortException {\n         m_errors.error(new CvcUnexpectedAttributeException(elementName, attributeName, location));\n     }\n \n-    private void reportAttributeInXmlNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location) throws AbortException\n-    {\n+    private void reportAttributeInXmlNamespace(final QName elementName, final QName attributeName,\n+                                               final SrcFrozenLocation location)\n+        throws AbortException {\n         m_errors.error(new CvcUnexpectedAttributeException(elementName, attributeName, location));\n     }\n \n-    private void reportAttributeUseError(final QName elementName, final QName attributeName, final Location location, final SimpleTypeException cause) throws AbortException\n-    {\n-        m_errors.error(new SmAttributeUseException(elementName, attributeName, getFrozenLocation(location), cause));\n+    private void reportAttributeUseError(final QName elementName, final QName attributeName,\n+                                         final Location location, final SimpleTypeException cause)\n+        throws AbortException {\n+        m_errors.error(\n+            new SmAttributeUseException(elementName, attributeName, getFrozenLocation(location),\n+                cause));\n     }\n \n-    private void reportUnexpectedElementTag(final String contextName, final QName unexpectedName, final Location location) throws AbortException\n-    {\n-        m_errors.error(new SmUnexpectedElementException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), getFrozenLocation(location), unexpectedName, getFrozenLocation(location)));\n+    private void reportUnexpectedElementTag(final String contextName, final QName unexpectedName,\n+                                            final Location location) throws AbortException {\n+        m_errors.error(new SmUnexpectedElementException(\n+            new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), getFrozenLocation(location),\n+            unexpectedName, getFrozenLocation(location)));\n     }\n \n-    private void reportUnexpectedEnd(final String contextName, final Location location) throws AbortException\n-    {\n-        m_errors.error(new SmUnexpectedEndException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), getFrozenLocation(location)));\n+    private void reportUnexpectedEnd(final String contextName, final Location location)\n+        throws AbortException {\n+        m_errors.error(\n+            new SmUnexpectedEndException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName),\n+                getFrozenLocation(location)));\n     }\n \n-    private void reportUnexpectedNonWhiteSpaceTextInElementOnlyContent(final String contextName, final String text, final Location location) throws AbortException\n-    {\n-        m_errors.error(new CvcUnexpectedNonWhiteSpaceTextInElementOnlyContentException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), text, getFrozenLocation(location)));\n+    private void reportUnexpectedNonWhiteSpaceTextInElementOnlyContent(final String contextName,\n+                                                                       final String text,\n+                                                                       final Location location)\n+        throws AbortException {\n+        m_errors.error(new CvcUnexpectedNonWhiteSpaceTextInElementOnlyContentException(\n+            new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), text,\n+            getFrozenLocation(location)));\n     }\n \n     /**\n@@ -5902,72 +4902,66 @@ final class XMLSchemaParser extends XMLRepresentation\n      * The \"name\" attribute is validated to exist and to be of type xs:NCName. <br/>\n      * The name computed adopts the targetNamespace name of the module being parsed.\n      */\n-    private QName requiredNCName(final String attributeName, final String targetNamespace, final XMLStreamReader reader) \n-        throws SmComplexTypeException\n-    {\n+    private QName requiredNCName(final String attributeName, final String targetNamespace,\n+                                 final XMLStreamReader reader)\n+        throws SmComplexTypeException {\n         final String name = reader.getAttributeValue(null, attributeName);\n-        if (name != null)\n-        {\n+        if (name != null) {\n             final SimpleType type = bootstrap.getAtomicType(NativeType.NCNAME);\n-            try\n-            {\n+            try {\n                 final List<XmlAtom> value = type.validate(name, atoms);\n-                if (value.size() > 0)\n+                if (value.size() > 0) {\n                     return new QName(targetNamespace, atoms.getString(value.get(0)));\n-            }\n-            catch (DatatypeException dte)\n-            {\n+                }\n+            } catch (DatatypeException dte) {\n                 SimpleTypeException ste = new SimpleTypeException(name, type, dte);\n-                throw new SmAttributeUseException(reader.getName(), new QName(attributeName), getFrozenLocation(reader.getLocation()), ste);\n+                throw new SmAttributeUseException(reader.getName(), new QName(attributeName),\n+                    getFrozenLocation(reader.getLocation()), ste);\n             }\n         }\n-        throw new SmMissingAttributeException(reader.getName(), new QName(attributeName), getFrozenLocation(reader.getLocation()));\n+        throw new SmMissingAttributeException(reader.getName(), new QName(attributeName),\n+            getFrozenLocation(reader.getLocation()));\n     }\n \n     /**\n      * Obtains the required {@link #LN_BASE} or {@link #LN_REF} attribute as an expanded-QName.\n      */\n-    private QName requiredQName(final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader) throws SmComplexTypeException\n-    {\n+    private QName requiredQName(final String attributeName, final boolean isChameleon,\n+                                final String targetNamespace, final XMLStreamReader reader)\n+        throws SmComplexTypeException {\n         final String strval = reader.getAttributeValue(null, attributeName);\n-        if (null != strval)\n-        {\n+        if (null != strval) {\n             return optionalQName(strval, attributeName, isChameleon, targetNamespace, reader);\n-        }\n-        else\n-        {\n-            throw new SmMissingAttributeException(reader.getName(), new QName(attributeName), getFrozenLocation(reader.getLocation()));\n+        } else {\n+            throw new SmMissingAttributeException(reader.getName(), new QName(attributeName),\n+                getFrozenLocation(reader.getLocation()));\n         }\n     }\n \n-    private QName resolveUsingTargetNamespace(final String name, final String targetNamespace, final NamespaceContext ctxt) throws SimpleTypeException\n-    {\n+    private QName resolveUsingTargetNamespace(final String name, final String targetNamespace,\n+                                              final NamespaceContext ctxt)\n+        throws SimpleTypeException {\n         PreCondition.assertArgumentNotNull(name);\n         final String prefix = getPrefix(name);\n-        if (prefix.length() > 0)\n-        {\n+        if (prefix.length() > 0) {\n             final String namespaceURI = ctxt.getNamespaceURI(prefix);\n             checkPrefixBound(prefix, namespaceURI, name);\n             return new QName(conditionNamespaceURI(namespaceURI), getLocalName(name), prefix);\n-        }\n-        else\n-        {\n+        } else {\n             return new QName(targetNamespace, name);\n         }\n     }\n \n-    private QName resolveUsingXMLNamespaces(final String initialValue, final NamespaceContext ctxt) throws SimpleTypeException\n-    {\n+    private QName resolveUsingXMLNamespaces(final String initialValue, final NamespaceContext ctxt)\n+        throws SimpleTypeException {\n         PreCondition.assertArgumentNotNull(initialValue);\n         final String prefix = getPrefix(initialValue);\n-        if (prefix.length() > 0)\n-        {\n+        if (prefix.length() > 0) {\n             final String namespaceURI = ctxt.getNamespaceURI(prefix);\n             checkPrefixBound(prefix, namespaceURI, initialValue);\n-            return new QName(conditionNamespaceURI(namespaceURI), getLocalName(initialValue), prefix);\n-        }\n-        else\n-        {\n+            return new QName(conditionNamespaceURI(namespaceURI), getLocalName(initialValue),\n+                prefix);\n+        } else {\n             final String namespaceURI = ctxt.getNamespaceURI(XMLConstants.DEFAULT_NS_PREFIX);\n             checkPrefixBound(prefix, namespaceURI, initialValue);\n             return new QName(conditionNamespaceURI(namespaceURI), initialValue);\n@@ -5978,179 +4972,154 @@ final class XMLSchemaParser extends XMLRepresentation\n      * xs:restriction (in xs:complexContent) <br/>\n      * We don't return anything because this affects multiple aspects of the complex type.\n      */\n-    private void restrictionInComplexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n-        if (redefine)\n-        {\n-            try\n-            {\n-                final QName baseName = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n+    private void restrictionInComplexContentTag(final XMLType complexType,\n+                                                final XMLStreamReader reader,\n+                                                final XMLSchemaCache cache,\n+                                                final XMLSchemaModule module,\n+                                                final boolean redefine,\n+                                                final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n+        if (redefine) {\n+            try {\n+                final QName baseName =\n+                    requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n                 ensureReferenceType(baseName, reader.getLocation(), redefine, cache);\n-            }\n-            catch (final SchemaException e)\n-            {\n+            } catch (final SchemaException e) {\n                 m_errors.error(e.getCause());\n             }\n-        }\n-        else\n-        {\n-            try\n-            {\n-                baseTypeDefinitionInComplexContent(complexType, DerivationMethod.Restriction, reader, redefine, cache, module, targetNamespace);\n-            }\n-            catch (final SchemaException e)\n-            {\n+        } else {\n+            try {\n+                baseTypeDefinitionInComplexContent(complexType, DerivationMethod.Restriction,\n+                    reader, redefine, cache, module, targetNamespace);\n+            } catch (final SchemaException e) {\n                 m_errors.error(e);\n             }\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_BASE.equals(localName))\n-                {\n+                if (LN_BASE.equals(localName)) {\n                     // Already known.\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // this moves the attributes up to the type, which may or may not be right.\n-                complexType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+                complexType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n-        final ContentModelMachine<String> machine = new ContentModelMachine<String>(restrictionInComplexContentTable, EPSILON);\n+        final ContentModelMachine<String> machine =\n+            new ContentModelMachine<String>(restrictionInComplexContentTable, EPSILON);\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (!machine.step(localName))\n-                            {\n-                                reportUnexpectedElementTag(LN_RESTRICTION, reader.getName(), reader.getLocation());\n+                            if (!machine.step(localName)) {\n+                                reportUnexpectedElementTag(LN_RESTRICTION, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n-                            }\n-                            else\n-                            {\n-                                if (LN_GROUP.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = groupParticleTag(new XMLScope(complexType), reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLModelGroupUseException e)\n-                                    {\n+                            } else {\n+                                if (LN_GROUP.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel =\n+                                            groupParticleTag(new XMLScope(complexType), reader,\n+                                                cache, module, redefine, targetNamespace);\n+                                    } catch (final XMLModelGroupUseException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ALL.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.All, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLCompositorOutsideGroupException e)\n-                                    {\n+                                } else if (LN_ALL.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel =\n+                                            compositorOutsideGroupTag(ModelGroup.SmCompositor.All,\n+                                                new XMLScope(complexType), localName, reader, cache,\n+                                                module, redefine, targetNamespace);\n+                                    } catch (final XMLCompositorOutsideGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_CHOICE.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.Choice, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLCompositorOutsideGroupException e)\n-                                    {\n+                                } else if (LN_CHOICE.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel = compositorOutsideGroupTag(\n+                                            ModelGroup.SmCompositor.Choice,\n+                                            new XMLScope(complexType), localName, reader, cache,\n+                                            module, redefine, targetNamespace);\n+                                    } catch (final XMLCompositorOutsideGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_SEQUENCE.equals(localName))\n-                                {\n-                                    complexType.m_contentKind = complexType.m_contentKind.isMixed() ? XMLContentTypeKind.Mixed : XMLContentTypeKind.ElementOnly;\n-                                    try\n-                                    {\n-                                        complexType.m_contentModel = compositorOutsideGroupTag(ModelGroup.SmCompositor.Sequence, new XMLScope(complexType), localName, reader, cache, module, redefine, targetNamespace);\n-                                    }\n-                                    catch (final XMLCompositorOutsideGroupException e)\n-                                    {\n+                                } else if (LN_SEQUENCE.equals(localName)) {\n+                                    complexType.m_contentKind =\n+                                        complexType.m_contentKind.isMixed() ?\n+                                            XMLContentTypeKind.Mixed :\n+                                            XMLContentTypeKind.ElementOnly;\n+                                    try {\n+                                        complexType.m_contentModel = compositorOutsideGroupTag(\n+                                            ModelGroup.SmCompositor.Sequence,\n+                                            new XMLScope(complexType), localName, reader, cache,\n+                                            module, redefine, targetNamespace);\n+                                    } catch (final XMLCompositorOutsideGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ATTRIBUTE.equals(localName))\n-                                {\n-                                    attributeLocalTag(reader, cache, module, redefine, targetNamespace, complexType.getAttributeUses(), complexType.prohibited, new XMLScope(complexType));\n-                                }\n-                                else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                                {\n-                                    try\n-                                    {\n-                                        complexType.getAttributeGroups().add(attribGroupRefTag(reader, cache, module, targetNamespace));\n-                                    }\n-                                    catch (final XMLAttributeGroupException e)\n-                                    {\n+                                } else if (LN_ATTRIBUTE.equals(localName)) {\n+                                    attributeLocalTag(reader, cache, module, redefine,\n+                                        targetNamespace, complexType.getAttributeUses(),\n+                                        complexType.prohibited, new XMLScope(complexType));\n+                                } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                    try {\n+                                        complexType.getAttributeGroups().add(\n+                                            attribGroupRefTag(reader, cache, module,\n+                                                targetNamespace));\n+                                    } catch (final XMLAttributeGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ANY_ATTRIBUTE.equals(localName))\n-                                {\n-                                    complexType.attributeWildcard = anyAttributeTag(reader, targetNamespace, module);\n-                                }\n-                                else if (LN_ANNOTATION.equals(localName))\n-                                {\n+                                } else if (LN_ANY_ATTRIBUTE.equals(localName)) {\n+                                    complexType.attributeWildcard =\n+                                        anyAttributeTag(reader, targetNamespace, module);\n+                                } else if (LN_ANNOTATION.equals(localName)) {\n                                     annotationTag(reader, module);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     throw new AssertionError(reader.getName());\n                                 }\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n-                    if (!machine.end())\n-                    {\n+                case XMLStreamConstants.END_ELEMENT: {\n+                    if (!machine.end()) {\n                         reportUnexpectedEnd(LN_RESTRICTION, reader.getLocation());\n                         skipTag(reader);\n                     }\n@@ -6159,12 +5128,10 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -6174,57 +5141,54 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:restriction (simple content)\n      */\n-    private void restrictionInSimpleContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void restrictionInSimpleContentTag(final XMLType complexType,\n+                                               final XMLStreamReader reader,\n+                                               final XMLSchemaCache cache,\n+                                               final XMLSchemaModule module, final boolean redefine,\n+                                               final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         // We're restriction a simple type by adding facets so it makes sense\n         // that we are going to need an\n         // anonymous type to hang the facets from\n-        complexType.simpleType = cache.registerAnonymousType(new XMLScope(complexType), getFrozenLocation(reader.getLocation()));\n+        complexType.simpleType = cache.registerAnonymousType(new XMLScope(complexType),\n+            getFrozenLocation(reader.getLocation()));\n         complexType.simpleType.setSimpleFlag();\n \n-        try\n-        {\n-            final QName baseName = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n+        try {\n+            final QName baseName =\n+                requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n             ensureReferenceType(baseName, reader.getLocation(), redefine, cache);\n             final XMLTypeRef baseType = new XMLTypeRef(baseName);\n             complexType.setBase(baseType, DerivationMethod.Restriction);\n-        }\n-        catch (final SchemaException e)\n-        {\n+        } catch (final SchemaException e) {\n             m_errors.error(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_BASE.equals(localName))\n-                {\n+                if (LN_BASE.equals(localName)) {\n                     // Aleady known.\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                complexType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                complexType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n-        final ContentModelMachine<String> machine = new ContentModelMachine<String>(restrictionInSimpleContentTable, EPSILON);\n+        final ContentModelMachine<String> machine =\n+            new ContentModelMachine<String>(restrictionInSimpleContentTable, EPSILON);\n         boolean missingMaxInclusive = true;\n         boolean missingMinExclusive = true;\n         boolean missingMinInclusive = true;\n@@ -6232,193 +5196,155 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean missingMinLength = true;\n         boolean missingMaxLength = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (!machine.step(localName))\n-                            {\n-                                reportUnexpectedElementTag(LN_COMPLEX_CONTENT, reader.getName(), reader.getLocation());\n+                            if (!machine.step(localName)) {\n+                                reportUnexpectedElementTag(LN_COMPLEX_CONTENT, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n-                            }\n-                            else\n-                            {\n-                                if (LN_SIMPLE_TYPE.equals(localName))\n-                                {\n-                                    complexType.simpleType.setBase(simpleTypeLocalTag(new XMLScope(complexType), cache, module, reader, redefine, targetNamespace), DerivationMethod.Restriction);\n-                                }\n-                                else if (LN_ENUMERATION.equals(localName))\n-                                {\n-                                    complexType.simpleType.getEnumerations().add(enumerationTag(complexType.simpleType, reader, module));\n-                                }\n-                                else if (LN_MAX_EXCLUSIVE.equals(localName))\n-                                {\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getMinMaxFacets().add(minmaxTag(complexType.simpleType, FacetKind.MaxExclusive, localName, reader, module));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                            } else {\n+                                if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                    complexType.simpleType.setBase(\n+                                        simpleTypeLocalTag(new XMLScope(complexType), cache, module,\n+                                            reader, redefine, targetNamespace),\n+                                        DerivationMethod.Restriction);\n+                                } else if (LN_ENUMERATION.equals(localName)) {\n+                                    complexType.simpleType.getEnumerations().add(\n+                                        enumerationTag(complexType.simpleType, reader, module));\n+                                } else if (LN_MAX_EXCLUSIVE.equals(localName)) {\n+                                    try {\n+                                        complexType.simpleType.getMinMaxFacets().add(\n+                                            minmaxTag(complexType.simpleType,\n+                                                FacetKind.MaxExclusive, localName, reader, module));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_MAX_INCLUSIVE.equals(localName))\n-                                {\n-                                    missingMaxInclusive = checkWxsElementMaxOccursUnity(missingMaxInclusive, LN_RESTRICTION, LN_MAX_INCLUSIVE, reader.getLocation());\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getMinMaxFacets().add(minmaxTag(complexType.simpleType, FacetKind.MaxInclusive, localName, reader, module));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_MAX_INCLUSIVE.equals(localName)) {\n+                                    missingMaxInclusive =\n+                                        checkWxsElementMaxOccursUnity(missingMaxInclusive,\n+                                            LN_RESTRICTION, LN_MAX_INCLUSIVE, reader.getLocation());\n+                                    try {\n+                                        complexType.simpleType.getMinMaxFacets().add(\n+                                            minmaxTag(complexType.simpleType,\n+                                                FacetKind.MaxInclusive, localName, reader, module));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_MIN_EXCLUSIVE.equals(localName))\n-                                {\n-                                    missingMinExclusive = checkWxsElementMaxOccursUnity(missingMinExclusive, LN_RESTRICTION, LN_MIN_EXCLUSIVE, reader.getLocation());\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getMinMaxFacets().add(minmaxTag(complexType.simpleType, FacetKind.MinExclusive, localName, reader, module));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_MIN_EXCLUSIVE.equals(localName)) {\n+                                    missingMinExclusive =\n+                                        checkWxsElementMaxOccursUnity(missingMinExclusive,\n+                                            LN_RESTRICTION, LN_MIN_EXCLUSIVE, reader.getLocation());\n+                                    try {\n+                                        complexType.simpleType.getMinMaxFacets().add(\n+                                            minmaxTag(complexType.simpleType,\n+                                                FacetKind.MinExclusive, localName, reader, module));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_MIN_INCLUSIVE.equals(localName))\n-                                {\n-                                    missingMinInclusive = checkWxsElementMaxOccursUnity(missingMinInclusive, LN_RESTRICTION, LN_MIN_INCLUSIVE, reader.getLocation());\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getMinMaxFacets().add(minmaxTag(complexType.simpleType, FacetKind.MinInclusive, localName, reader, module));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_MIN_INCLUSIVE.equals(localName)) {\n+                                    missingMinInclusive =\n+                                        checkWxsElementMaxOccursUnity(missingMinInclusive,\n+                                            LN_RESTRICTION, LN_MIN_INCLUSIVE, reader.getLocation());\n+                                    try {\n+                                        complexType.simpleType.getMinMaxFacets().add(\n+                                            minmaxTag(complexType.simpleType,\n+                                                FacetKind.MinInclusive, localName, reader, module));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_LENGTH.equals(localName))\n-                                {\n-                                    missingLength = checkWxsElementMaxOccursUnity(missingLength, LN_RESTRICTION, LN_LENGTH, reader.getLocation());\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getLengthFacets().add(lengthTag(complexType, true, true, localName, module, reader));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_LENGTH.equals(localName)) {\n+                                    missingLength =\n+                                        checkWxsElementMaxOccursUnity(missingLength, LN_RESTRICTION,\n+                                            LN_LENGTH, reader.getLocation());\n+                                    try {\n+                                        complexType.simpleType.getLengthFacets().add(\n+                                            lengthTag(complexType, true, true, localName, module,\n+                                                reader));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_MIN_LENGTH.equals(localName))\n-                                {\n-                                    missingMinLength = checkWxsElementMaxOccursUnity(missingMinLength, LN_RESTRICTION, LN_MIN_LENGTH, reader.getLocation());\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getLengthFacets().add(lengthTag(complexType, true, false, localName, module, reader));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_MIN_LENGTH.equals(localName)) {\n+                                    missingMinLength =\n+                                        checkWxsElementMaxOccursUnity(missingMinLength,\n+                                            LN_RESTRICTION, LN_MIN_LENGTH, reader.getLocation());\n+                                    try {\n+                                        complexType.simpleType.getLengthFacets().add(\n+                                            lengthTag(complexType, true, false, localName, module,\n+                                                reader));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_MAX_LENGTH.equals(localName))\n-                                {\n-                                    missingMaxLength = checkWxsElementMaxOccursUnity(missingMaxLength, LN_RESTRICTION, LN_MAX_LENGTH, reader.getLocation());\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getLengthFacets().add(lengthTag(complexType, false, true, localName, module, reader));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_MAX_LENGTH.equals(localName)) {\n+                                    missingMaxLength =\n+                                        checkWxsElementMaxOccursUnity(missingMaxLength,\n+                                            LN_RESTRICTION, LN_MAX_LENGTH, reader.getLocation());\n+                                    try {\n+                                        complexType.simpleType.getLengthFacets().add(\n+                                            lengthTag(complexType, false, true, localName, module,\n+                                                reader));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_WHITE_SPACE.equals(localName))\n-                                {\n-                                    try\n-                                    {\n-                                        complexType.simpleType.setWhiteSpacePolicy(whiteSpaceTag(reader, module));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_WHITE_SPACE.equals(localName)) {\n+                                    try {\n+                                        complexType.simpleType\n+                                            .setWhiteSpacePolicy(whiteSpaceTag(reader, module));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_PATTERN.equals(localName))\n-                                {\n-                                    complexType.simpleType.getPatternFacets().add(patternTag(complexType.simpleType, reader, module));\n-                                }\n-                                else if (LN_FRACTION_DIGITS.equals(localName))\n-                                {\n-                                    try\n-                                    {\n-                                        complexType.simpleType.getFractionDigitsFacets().add(fractionDigitsTag(complexType.simpleType, reader, module));\n-                                    }\n-                                    catch (final SmComplexTypeException e)\n-                                    {\n+                                } else if (LN_PATTERN.equals(localName)) {\n+                                    complexType.simpleType.getPatternFacets()\n+                                        .add(patternTag(complexType.simpleType, reader, module));\n+                                } else if (LN_FRACTION_DIGITS.equals(localName)) {\n+                                    try {\n+                                        complexType.simpleType.getFractionDigitsFacets().add(\n+                                            fractionDigitsTag(complexType.simpleType, reader,\n+                                                module));\n+                                    } catch (final SmComplexTypeException e) {\n                                         m_errors.error(e);\n                                     }\n-                                }\n-                                else if (LN_TOTAL_DIGITS.equals(localName))\n-                                {\n-                                    complexType.simpleType.getTotalDigitsFacets().add(totalDigitsTag(complexType.simpleType, reader, module));\n-                                }\n-                                else if (LN_ATTRIBUTE.equals(localName))\n-                                {\n-                                    attributeLocalTag(reader, cache, module, redefine, targetNamespace, complexType.getAttributeUses(), complexType.prohibited, new XMLScope(complexType));\n-                                }\n-                                else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                                {\n-                                    try\n-                                    {\n-                                        complexType.getAttributeGroups().add(attribGroupRefTag(reader, cache, module, targetNamespace));\n-                                    }\n-                                    catch (final XMLAttributeGroupException e)\n-                                    {\n+                                } else if (LN_TOTAL_DIGITS.equals(localName)) {\n+                                    complexType.simpleType.getTotalDigitsFacets().add(\n+                                        totalDigitsTag(complexType.simpleType, reader, module));\n+                                } else if (LN_ATTRIBUTE.equals(localName)) {\n+                                    attributeLocalTag(reader, cache, module, redefine,\n+                                        targetNamespace, complexType.getAttributeUses(),\n+                                        complexType.prohibited, new XMLScope(complexType));\n+                                } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                    try {\n+                                        complexType.getAttributeGroups().add(\n+                                            attribGroupRefTag(reader, cache, module,\n+                                                targetNamespace));\n+                                    } catch (final XMLAttributeGroupException e) {\n                                         m_errors.error(e.getCause());\n                                     }\n-                                }\n-                                else if (LN_ANY_ATTRIBUTE.equals(localName))\n-                                {\n-                                    complexType.attributeWildcard = anyAttributeTag(reader, targetNamespace, module);\n-                                }\n-                                else if (LN_ANNOTATION.equals(localName))\n-                                {\n+                                } else if (LN_ANY_ATTRIBUTE.equals(localName)) {\n+                                    complexType.attributeWildcard =\n+                                        anyAttributeTag(reader, targetNamespace, module);\n+                                } else if (LN_ANNOTATION.equals(localName)) {\n                                     annotationTag(reader, module);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     throw new AssertionError(reader.getName());\n                                 }\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n-                    if (!machine.end())\n-                    {\n+                case XMLStreamConstants.END_ELEMENT: {\n+                    if (!machine.end()) {\n                         reportUnexpectedEnd(LN_RESTRICTION, reader.getLocation());\n                     }\n                     done = true;\n@@ -6426,12 +5352,10 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -6441,53 +5365,41 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:restriction (simple type)\n      */\n-    private void restrictionTag(final XMLType simpleType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n-        if (!redefine)\n-        {\n-        }\n-        else\n-        {\n+    private void restrictionTag(final XMLType simpleType, final XMLSchemaModule module,\n+                                final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n+        if (!redefine) {\n+        } else {\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_BASE.equals(localName))\n-                {\n-                    try\n-                    {\n-                        final QName name = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n-                        if (!redefine)\n-                        {\n+                if (LN_BASE.equals(localName)) {\n+                    try {\n+                        final QName name =\n+                            requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n+                        if (!redefine) {\n                             ensureReferenceType(name, reader.getLocation(), redefine, cache);\n                             simpleType.setBase(new XMLTypeRef(name), DerivationMethod.Restriction);\n                         }\n-                    }\n-                    catch (final SmComplexTypeException e)\n-                    {\n+                    } catch (final SmComplexTypeException e) {\n                         m_errors.error(e);\n                     }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // i'm pretty sure we don't want this. ?\n                 // {any attributes with non-schema namespace}\n             }\n@@ -6503,335 +5415,271 @@ final class XMLSchemaParser extends XMLRepresentation\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_SIMPLE_TYPE.equals(localName))\n-                            {\n-                                if (null == simpleType.getBaseRef())\n-                                {\n-                                    final XMLTypeRef baseType = simpleTypeLocalTag(new XMLScope(simpleType), cache, module, reader, redefine, targetNamespace);\n+                            if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                if (null == simpleType.getBaseRef()) {\n+                                    final XMLTypeRef baseType =\n+                                        simpleTypeLocalTag(new XMLScope(simpleType), cache, module,\n+                                            reader, redefine, targetNamespace);\n                                     simpleType.setBase(baseType, DerivationMethod.Restriction);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     // Already set by either a \"base\" attribute\n                                     // or a preceding xs:simpleType sibling.\n-                                    m_errors.error(new SmSimpleTypeRestrictionException(getFrozenLocation(reader.getLocation())));\n+                                    m_errors.error(new SmSimpleTypeRestrictionException(\n+                                        getFrozenLocation(reader.getLocation())));\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ENUMERATION.equals(localName))\n-                            {\n-                                simpleType.getEnumerations().add(enumerationTag(simpleType, reader, module));\n+                            } else if (LN_ENUMERATION.equals(localName)) {\n+                                simpleType.getEnumerations()\n+                                    .add(enumerationTag(simpleType, reader, module));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_MAX_EXCLUSIVE.equals(localName))\n-                            {\n-                                missingMaxExclusive = checkWxsElementMaxOccursUnity(missingMaxExclusive, LN_RESTRICTION, LN_MAX_EXCLUSIVE, reader.getLocation());\n-                                try\n-                                {\n-                                    simpleType.getMinMaxFacets().add(minmaxTag(simpleType, FacetKind.MaxExclusive, localName, reader, module));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_MAX_EXCLUSIVE.equals(localName)) {\n+                                missingMaxExclusive =\n+                                    checkWxsElementMaxOccursUnity(missingMaxExclusive,\n+                                        LN_RESTRICTION, LN_MAX_EXCLUSIVE, reader.getLocation());\n+                                try {\n+                                    simpleType.getMinMaxFacets().add(\n+                                        minmaxTag(simpleType, FacetKind.MaxExclusive, localName,\n+                                            reader, module));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_MAX_INCLUSIVE.equals(localName))\n-                            {\n-                                missingMaxInclusive = checkWxsElementMaxOccursUnity(missingMaxInclusive, LN_RESTRICTION, LN_MAX_INCLUSIVE, reader.getLocation());\n-                                try\n-                                {\n-                                    simpleType.getMinMaxFacets().add(minmaxTag(simpleType, FacetKind.MaxInclusive, localName, reader, module));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_MAX_INCLUSIVE.equals(localName)) {\n+                                missingMaxInclusive =\n+                                    checkWxsElementMaxOccursUnity(missingMaxInclusive,\n+                                        LN_RESTRICTION, LN_MAX_INCLUSIVE, reader.getLocation());\n+                                try {\n+                                    simpleType.getMinMaxFacets().add(\n+                                        minmaxTag(simpleType, FacetKind.MaxInclusive, localName,\n+                                            reader, module));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_MIN_EXCLUSIVE.equals(localName))\n-                            {\n-                                missingMinExclusive = checkWxsElementMaxOccursUnity(missingMinExclusive, LN_RESTRICTION, LN_MIN_EXCLUSIVE, reader.getLocation());\n-                                try\n-                                {\n-                                    simpleType.getMinMaxFacets().add(minmaxTag(simpleType, FacetKind.MinExclusive, localName, reader, module));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_MIN_EXCLUSIVE.equals(localName)) {\n+                                missingMinExclusive =\n+                                    checkWxsElementMaxOccursUnity(missingMinExclusive,\n+                                        LN_RESTRICTION, LN_MIN_EXCLUSIVE, reader.getLocation());\n+                                try {\n+                                    simpleType.getMinMaxFacets().add(\n+                                        minmaxTag(simpleType, FacetKind.MinExclusive, localName,\n+                                            reader, module));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_MIN_INCLUSIVE.equals(localName))\n-                            {\n-                                missingMinInclusive = checkWxsElementMaxOccursUnity(missingMinInclusive, LN_RESTRICTION, LN_MIN_INCLUSIVE, reader.getLocation());\n-                                try\n-                                {\n-                                    simpleType.getMinMaxFacets().add(minmaxTag(simpleType, FacetKind.MinInclusive, localName, reader, module));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_MIN_INCLUSIVE.equals(localName)) {\n+                                missingMinInclusive =\n+                                    checkWxsElementMaxOccursUnity(missingMinInclusive,\n+                                        LN_RESTRICTION, LN_MIN_INCLUSIVE, reader.getLocation());\n+                                try {\n+                                    simpleType.getMinMaxFacets().add(\n+                                        minmaxTag(simpleType, FacetKind.MinInclusive, localName,\n+                                            reader, module));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_LENGTH.equals(localName))\n-                            {\n-                                missingLength = checkWxsElementMaxOccursUnity(missingLength, LN_RESTRICTION, LN_LENGTH, reader.getLocation());\n-                                try\n-                                {\n-                                    simpleType.getLengthFacets().add(lengthTag(simpleType, true, true, localName, module, reader));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_LENGTH.equals(localName)) {\n+                                missingLength =\n+                                    checkWxsElementMaxOccursUnity(missingLength, LN_RESTRICTION,\n+                                        LN_LENGTH, reader.getLocation());\n+                                try {\n+                                    simpleType.getLengthFacets().add(\n+                                        lengthTag(simpleType, true, true, localName, module,\n+                                            reader));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_MIN_LENGTH.equals(localName))\n-                            {\n-                                missingMinLength = checkWxsElementMaxOccursUnity(missingMinLength, LN_RESTRICTION, LN_MIN_LENGTH, reader.getLocation());\n-                                try\n-                                {\n-                                    simpleType.getLengthFacets().add(lengthTag(simpleType, true, false, localName, module, reader));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_MIN_LENGTH.equals(localName)) {\n+                                missingMinLength =\n+                                    checkWxsElementMaxOccursUnity(missingMinLength, LN_RESTRICTION,\n+                                        LN_MIN_LENGTH, reader.getLocation());\n+                                try {\n+                                    simpleType.getLengthFacets().add(\n+                                        lengthTag(simpleType, true, false, localName, module,\n+                                            reader));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_MAX_LENGTH.equals(localName))\n-                            {\n-                                missingMaxLength = checkWxsElementMaxOccursUnity(missingMaxLength, LN_RESTRICTION, LN_MAX_LENGTH, reader.getLocation());\n-                                try\n-                                {\n-                                    simpleType.getLengthFacets().add(lengthTag(simpleType, false, true, localName, module, reader));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_MAX_LENGTH.equals(localName)) {\n+                                missingMaxLength =\n+                                    checkWxsElementMaxOccursUnity(missingMaxLength, LN_RESTRICTION,\n+                                        LN_MAX_LENGTH, reader.getLocation());\n+                                try {\n+                                    simpleType.getLengthFacets().add(\n+                                        lengthTag(simpleType, false, true, localName, module,\n+                                            reader));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_WHITE_SPACE.equals(localName))\n-                            {\n-                                try\n-                                {\n+                            } else if (LN_WHITE_SPACE.equals(localName)) {\n+                                try {\n                                     simpleType.setWhiteSpacePolicy(whiteSpaceTag(reader, module));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_PATTERN.equals(localName))\n-                            {\n-                                simpleType.getPatternFacets().add(patternTag(simpleType, reader, module));\n+                            } else if (LN_PATTERN.equals(localName)) {\n+                                simpleType.getPatternFacets()\n+                                    .add(patternTag(simpleType, reader, module));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_FRACTION_DIGITS.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    simpleType.getFractionDigitsFacets().add(fractionDigitsTag(simpleType, reader, module));\n-                                }\n-                                catch (final SmComplexTypeException e)\n-                                {\n+                            } else if (LN_FRACTION_DIGITS.equals(localName)) {\n+                                try {\n+                                    simpleType.getFractionDigitsFacets()\n+                                        .add(fractionDigitsTag(simpleType, reader, module));\n+                                } catch (final SmComplexTypeException e) {\n                                     m_errors.error(e);\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_TOTAL_DIGITS.equals(localName))\n-                            {\n-                                simpleType.getTotalDigitsFacets().add(totalDigitsTag(simpleType, reader, module));\n+                            } else if (LN_TOTAL_DIGITS.equals(localName)) {\n+                                simpleType.getTotalDigitsFacets()\n+                                    .add(totalDigitsTag(simpleType, reader, module));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_RESTRICTION, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_RESTRICTION,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_RESTRICTION, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_RESTRICTION, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private void schemaTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n+    private void schemaTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                           final XMLSchemaModule module) throws XMLStreamException, AbortException {\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_TARGET_NAMESPACE.equals(localName))\n-                {\n+                if (LN_TARGET_NAMESPACE.equals(localName)) {\n                     module.setTargetNamespace(reader.getAttributeValue(i));\n-                    if (!module.isInclude() && !m_processRepeatedNamespaces && cache.m_seenNamespaces.contains(module.getTargetNamespace()))\n-                    {\n+                    if (!module.isInclude() && !m_processRepeatedNamespaces &&\n+                        cache.m_seenNamespaces.contains(module.getTargetNamespace())) {\n                         // Ignore this schema.\n                         skipTag(reader);\n                         return;\n                     }\n-                }\n-                else if (\"elementFormDefault\".equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (\"elementFormDefault\".equals(localName)) {\n+                    try {\n                         module.elementQualified = qualified(reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (\"attributeFormDefault\".equals(localName))\n-                {\n-                    try\n-                    {\n+                } else if (\"attributeFormDefault\".equals(localName)) {\n+                    try {\n                         module.attributeQualified = qualified(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (\"blockDefault\".equals(localName))\n-                {\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction, DerivationMethod.Substitution), module.blockDefault);\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (\"finalDefault\".equals(localName))\n-                {\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction), module.finalDefault);\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    module.m_id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (\"version\".equals(localName))\n-                {\n-                    try\n-                    {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (\"blockDefault\".equals(localName)) {\n+                    try {\n+                        control(reader.getAttributeValue(i), EnumSet\n+                            .of(DerivationMethod.Extension, DerivationMethod.Restriction,\n+                                DerivationMethod.Substitution), module.blockDefault);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (\"finalDefault\".equals(localName)) {\n+                    try {\n+                        control(reader.getAttributeValue(i),\n+                            EnumSet.of(DerivationMethod.Extension, DerivationMethod.Restriction),\n+                            module.finalDefault);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    module.m_id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else if (\"version\".equals(localName)) {\n+                    try {\n                         module.m_version = token(reader.getAttributeValue(i));\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (XMLConstants.XML_NS_URI.equals(namespaceURI))\n-            {\n+            } else if (XMLConstants.XML_NS_URI.equals(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (\"lang\".equals(localName))\n-                {\n-                    try\n-                    {\n+                if (\"lang\".equals(localName)) {\n+                    try {\n                         module.m_lang = lang(reader.getAttributeValue(i));\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else\n-                {\n-                    reportAttributeInXmlNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else {\n+                    reportAttributeInXmlNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // sadly, because this is a module, it's the same problem as for\n                 // import and include and redefine, so we can't report foreign attributes usefully.\n                 // {any attributes with non-schema namespace}\n             }\n         }\n \n-        if (module.isRedefine() || module.isInclude())\n-        {\n-            if (module.getTargetNamespace() != null)\n-            {\n-                if ((module.getContainingModule().getTargetNamespace() == null) || (!module.getContainingModule().getTargetNamespace().equals(module.getTargetNamespace())))\n-                {\n-                    if (module.isRedefine())\n-                    {\n-                        m_errors.error(new SmRedefinitionNamespaceMismatchException(getFrozenLocation(reader.getLocation())));\n-                    }\n-                    else\n-                    {\n-                        m_errors.error(new SmInclusionNamespaceMismatchException(getFrozenLocation(reader.getLocation())));\n+        if (module.isRedefine() || module.isInclude()) {\n+            if (module.getTargetNamespace() != null) {\n+                if ((module.getContainingModule().getTargetNamespace() == null) ||\n+                    (!module.getContainingModule().getTargetNamespace()\n+                        .equals(module.getTargetNamespace()))) {\n+                    if (module.isRedefine()) {\n+                        m_errors.error(new SmRedefinitionNamespaceMismatchException(\n+                            getFrozenLocation(reader.getLocation())));\n+                    } else {\n+                        m_errors.error(new SmInclusionNamespaceMismatchException(\n+                            getFrozenLocation(reader.getLocation())));\n                     }\n                     skipTag(reader);\n                     return;\n@@ -6843,208 +5691,152 @@ final class XMLSchemaParser extends XMLRepresentation\n         // we can compute the targetNamespace.\n         final String targetNamespace = module.computeTargetNamespace();\n \n-        if (module.getTargetNamespace() != null)\n-        {\n+        if (module.getTargetNamespace() != null) {\n             cache.m_seenNamespaces.add(module.getTargetNamespace());\n         }\n \n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_COMPLEX_TYPE.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    final XMLType complexType = complexTypeGlobalTag(reader, cache, module, false, targetNamespace);\n+                            if (LN_COMPLEX_TYPE.equals(localName)) {\n+                                try {\n+                                    final XMLType complexType =\n+                                        complexTypeGlobalTag(reader, cache, module, false,\n+                                            targetNamespace);\n                                     cache.m_globalTypes.put(complexType.getName(), complexType);\n-                                }\n-                                catch (final XMLComplexTypeException e)\n-                                {\n+                                } catch (final XMLComplexTypeException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n-                            }\n-                            else if (LN_SIMPLE_TYPE.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    final XMLType simpleType = simpleTypeGlobalTag(reader, cache, module, false, targetNamespace);\n+                            } else if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                try {\n+                                    final XMLType simpleType =\n+                                        simpleTypeGlobalTag(reader, cache, module, false,\n+                                            targetNamespace);\n                                     cache.m_globalTypes.put(simpleType.getName(), simpleType);\n-                                }\n-                                catch (final XMLSimpleTypeException e)\n-                                {\n+                                } catch (final XMLSimpleTypeException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n-                            }\n-                            else if (LN_ELEMENT.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    final XMLElement element = elementTag(reader, cache, module, targetNamespace);\n+                            } else if (LN_ELEMENT.equals(localName)) {\n+                                try {\n+                                    final XMLElement element =\n+                                        elementTag(reader, cache, module, targetNamespace);\n                                     cache.m_elements.put(element.getName(), element);\n-                                }\n-                                catch (final XMLElementException e)\n-                                {\n+                                } catch (final XMLElementException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n-                            }\n-                            else if (LN_ATTRIBUTE.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    final XMLAttribute attribute = attributeTag(reader, cache, module, targetNamespace);\n+                            } else if (LN_ATTRIBUTE.equals(localName)) {\n+                                try {\n+                                    final XMLAttribute attribute =\n+                                        attributeTag(reader, cache, module, targetNamespace);\n                                     cache.m_attributes.put(attribute.getName(), attribute);\n-                                }\n-                                catch (final XMLAttributeException e)\n-                                {\n+                                } catch (final XMLAttributeException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n-                            }\n-                            else if (LN_GROUP.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    final XMLModelGroup group = groupTag(reader, cache, module, false, targetNamespace);\n+                            } else if (LN_GROUP.equals(localName)) {\n+                                try {\n+                                    final XMLModelGroup group =\n+                                        groupTag(reader, cache, module, false, targetNamespace);\n                                     cache.m_modelGroups.put(group.getName(), group);\n-                                }\n-                                catch (final XMLModelGroupException e)\n-                                {\n+                                } catch (final XMLModelGroupException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n-                            }\n-                            else if (LN_ATTRIBUTE_GROUP.equals(localName))\n-                            {\n-                                try\n-                                {\n-                                    final XMLAttributeGroup attributeGroup = attribGroupTag(reader, cache, module, false, targetNamespace);\n-                                    cache.m_attributeGroups.put(attributeGroup.getName(), attributeGroup);\n-                                }\n-                                catch (final XMLAttributeGroupException e)\n-                                {\n+                            } else if (LN_ATTRIBUTE_GROUP.equals(localName)) {\n+                                try {\n+                                    final XMLAttributeGroup attributeGroup =\n+                                        attribGroupTag(reader, cache, module, false,\n+                                            targetNamespace);\n+                                    cache.m_attributeGroups\n+                                        .put(attributeGroup.getName(), attributeGroup);\n+                                } catch (final XMLAttributeGroupException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n-                            }\n-                            else if (LN_INCLUDE.equals(localName))\n-                            {\n+                            } else if (LN_INCLUDE.equals(localName)) {\n                                 includeTag(cache, module, reader);\n-                            }\n-                            else if (LN_IMPORT.equals(localName))\n-                            {\n+                            } else if (LN_IMPORT.equals(localName)) {\n                                 importTag(cache, module, reader, targetNamespace);\n-                            }\n-                            else if (LN_REDEFINE.equals(localName))\n-                            {\n+                            } else if (LN_REDEFINE.equals(localName)) {\n                                 redefineTag(cache, module, reader, targetNamespace);\n-                            }\n-                            else if (LN_NOTATION.equals(localName))\n-                            {\n-                                try\n-                                {\n+                            } else if (LN_NOTATION.equals(localName)) {\n+                                try {\n                                     /* final NotationImpl notation = */\n                                     notationTag(cache, reader, targetNamespace, module);\n-                                }\n-                                catch (final XMLNotationException e)\n-                                {\n+                                } catch (final XMLNotationException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_SCHEMA, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_SCHEMA, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private RestrictedXPath selectorTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, XMLSelectorException, AbortException\n-    {\n+    private RestrictedXPath selectorTag(final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLSelectorException, AbortException {\n         RestrictedXPath xpath = null;\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_XPATH.equals(localName))\n-                {\n+                if (LN_XPATH.equals(localName)) {\n                     final String original = reader.getAttributeValue(i);\n-                    try\n-                    {\n+                    try {\n                         xpath = xpath(original, reader.getLocation(), reader.getName());\n-                    }\n-                    catch (final SmAttributeUseException e)\n-                    {\n+                    } catch (final SmAttributeUseException e) {\n                         skipTag(reader);\n                         throw new XMLSelectorException(e);\n                     }\n-                    if (xpath.isAttribute())\n-                    {\n+                    if (xpath.isAttribute()) {\n                         final DatatypeException dte = new DatatypeException(original, null);\n-                        final SimpleTypeException ste = new SimpleTypeException(original, null, dte);\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), ste);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                        final SimpleTypeException ste =\n+                            new SimpleTypeException(original, null, dte);\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), ste);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // nowhere to put foreign attributes.\n                 // {any attributes with non-schema namespace}\n             }\n@@ -7052,57 +5844,45 @@ final class XMLSchemaParser extends XMLRepresentation\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_SELECTOR, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_SELECTOR,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_SELECTOR, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_SELECTOR, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -7113,93 +5893,72 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:simpleContent\n      */\n-    private void simpleContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void simpleContentTag(final XMLType complexType, final XMLStreamReader reader,\n+                                  final XMLSchemaCache cache, final XMLSchemaModule module,\n+                                  final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         complexType.m_contentKind = XMLContentTypeKind.Simple;\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // the only place to put foreign attributes is the parent. we don't do that; discard.\n             }\n         }\n \n-        final ContentModelMachine<String> machine = new ContentModelMachine<String>(simpleContentTable, EPSILON);\n+        final ContentModelMachine<String> machine =\n+            new ContentModelMachine<String>(simpleContentTable, EPSILON);\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (!machine.step(localName))\n-                            {\n-                                reportUnexpectedElementTag(LN_SIMPLE_CONTENT, reader.getName(), reader.getLocation());\n+                            if (!machine.step(localName)) {\n+                                reportUnexpectedElementTag(LN_SIMPLE_CONTENT, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n-                            }\n-                            else\n-                            {\n-                                if (LN_EXTENSION.equals(localName))\n-                                {\n-                                    extensionInSimpleContentTag(complexType, module, reader, cache, redefine, targetNamespace);\n-                                }\n-                                else if (LN_RESTRICTION.equals(localName))\n-                                {\n-                                    restrictionInSimpleContentTag(complexType, reader, cache, module, redefine, targetNamespace);\n-                                }\n-                                else if (LN_ANNOTATION.equals(localName))\n-                                {\n+                            } else {\n+                                if (LN_EXTENSION.equals(localName)) {\n+                                    extensionInSimpleContentTag(complexType, module, reader, cache,\n+                                        redefine, targetNamespace);\n+                                } else if (LN_RESTRICTION.equals(localName)) {\n+                                    restrictionInSimpleContentTag(complexType, reader, cache,\n+                                        module, redefine, targetNamespace);\n+                                } else if (LN_ANNOTATION.equals(localName)) {\n                                     annotationTag(reader, module);\n-                                }\n-                                else\n-                                {\n+                                } else {\n                                     throw new AssertionError(reader.getName());\n                                 }\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n-                    if (!machine.end())\n-                    {\n+                case XMLStreamConstants.END_ELEMENT: {\n+                    if (!machine.end()) {\n                         reportUnexpectedEnd(LN_SIMPLE_CONTENT, reader.getLocation());\n                     }\n                     done = true;\n@@ -7207,12 +5966,10 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -7223,121 +5980,110 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Content for an xs:simpleType (either global or local definition). <br>\n      * Content: (xs:annotation?, (xs:restriction | xs:list | xs:union))\n      */\n-    private void simpleTypeContentTag(final XMLType simpleType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void simpleTypeContentTag(final XMLType simpleType, final XMLSchemaModule module,\n+                                      final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                      final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         // Derivation property must be null so that we check that we got the\n         // required child elements.\n         boolean firstElement = true;\n         boolean missingRLU = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_RESTRICTION.equals(localName))\n-                            {\n-                                missingRLU = checkWxsElementMaxOccursUnity(missingRLU, LN_SIMPLE_TYPE, LN_RESTRICTION, reader.getLocation());\n-                                restrictionTag(simpleType, module, reader, cache, redefine, targetNamespace);\n+                            if (LN_RESTRICTION.equals(localName)) {\n+                                missingRLU =\n+                                    checkWxsElementMaxOccursUnity(missingRLU, LN_SIMPLE_TYPE,\n+                                        LN_RESTRICTION, reader.getLocation());\n+                                restrictionTag(simpleType, module, reader, cache, redefine,\n+                                    targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_LIST.equals(localName))\n-                            {\n-                                missingRLU = checkWxsElementMaxOccursUnity(missingRLU, LN_SIMPLE_TYPE, LN_LIST, reader.getLocation());\n-                                listTag(simpleType, module, reader, cache, redefine, targetNamespace);\n+                            } else if (LN_LIST.equals(localName)) {\n+                                missingRLU =\n+                                    checkWxsElementMaxOccursUnity(missingRLU, LN_SIMPLE_TYPE,\n+                                        LN_LIST, reader.getLocation());\n+                                listTag(simpleType, module, reader, cache, redefine,\n+                                    targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_UNION.equals(localName))\n-                            {\n-                                missingRLU = checkWxsElementMaxOccursUnity(missingRLU, LN_SIMPLE_TYPE, LN_UNION, reader.getLocation());\n-                                unionTag(simpleType, module, reader, cache, redefine, targetNamespace);\n+                            } else if (LN_UNION.equals(localName)) {\n+                                missingRLU =\n+                                    checkWxsElementMaxOccursUnity(missingRLU, LN_SIMPLE_TYPE,\n+                                        LN_UNION, reader.getLocation());\n+                                unionTag(simpleType, module, reader, cache, redefine,\n+                                    targetNamespace);\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_SIMPLE_CONTENT, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_SIMPLE_CONTENT,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_SIMPLE_CONTENT, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_SIMPLE_CONTENT, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                     // Ignore.\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n \n-        if (missingRLU)\n-        {\n+        if (missingRLU) {\n             // Expecting xs:restriction | xs:list | xs:union\n-            m_errors.error(new SmUnexpectedEndException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_SIMPLE_TYPE), getFrozenLocation(reader.getLocation())));\n+            m_errors.error(new SmUnexpectedEndException(\n+                new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_SIMPLE_TYPE),\n+                getFrozenLocation(reader.getLocation())));\n         }\n     }\n \n     /**\n      * xs:simpleType (global definition)\n      */\n-    private XMLType simpleTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLSimpleTypeException, AbortException\n-    {\n+    private XMLType simpleTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache,\n+                                        final XMLSchemaModule module, final boolean redefine,\n+                                        final String targetNamespace)\n+        throws XMLStreamException, XMLSimpleTypeException, AbortException {\n         final XMLType simpleType;\n-        if (!redefine)\n-        {\n-            try\n-            {\n-                simpleType = cache.registerType(requiredNCName(LN_NAME, targetNamespace, reader), getFrozenLocation(reader.getLocation()));\n-            }\n-            catch (final SchemaException e)\n-            {\n+        if (!redefine) {\n+            try {\n+                simpleType = cache.registerType(requiredNCName(LN_NAME, targetNamespace, reader),\n+                    getFrozenLocation(reader.getLocation()));\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLSimpleTypeException(e);\n             }\n-        }\n-        else\n-        {\n-            try\n-            {\n-                simpleType = cache.dereferenceType(requiredNCName(LN_NAME, targetNamespace, reader), reader.getLocation(), redefine);\n-            }\n-            catch (final SchemaException e)\n-            {\n+        } else {\n+            try {\n+                simpleType = cache.dereferenceType(requiredNCName(LN_NAME, targetNamespace, reader),\n+                    reader.getLocation(), redefine);\n+            } catch (final SchemaException e) {\n                 skipTag(reader);\n                 throw new XMLSimpleTypeException(e);\n             }\n@@ -7345,51 +6091,39 @@ final class XMLSchemaParser extends XMLRepresentation\n         simpleType.setSimpleFlag();\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_FINAL.equals(localName))\n-                {\n-                    try\n-                    {\n-                        control(reader.getAttributeValue(i), EnumSet.of(DerivationMethod.List, DerivationMethod.Union, DerivationMethod.Restriction), simpleType.getFinal());\n-                    }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n-                }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_NAME.equals(localName))\n-                {\n+                if (LN_FINAL.equals(localName)) {\n+                    try {\n+                        control(reader.getAttributeValue(i), EnumSet\n+                            .of(DerivationMethod.List, DerivationMethod.Union,\n+                                DerivationMethod.Restriction), simpleType.getFinal());\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n+                    }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else if (LN_NAME.equals(localName)) {\n                     // Already known.\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                simpleType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                simpleType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n-        if (!redefine)\n-        {\n-        }\n-        else\n-        {\n+        if (!redefine) {\n+        } else {\n         }\n         simpleTypeContentTag(simpleType, module, reader, cache, redefine, targetNamespace);\n         return simpleType;\n@@ -7398,34 +6132,33 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:simpleType (local definition)\n      */\n-    private XMLTypeRef simpleTypeLocalTag(final XMLScope scope, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n-        final XMLType simpleType = cache.registerAnonymousType(scope, getFrozenLocation(reader.getLocation()));\n+    private XMLTypeRef simpleTypeLocalTag(final XMLScope scope, final XMLSchemaCache cache,\n+                                          final XMLSchemaModule module,\n+                                          final XMLStreamReader reader, final boolean redefine,\n+                                          final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n+        final XMLType simpleType =\n+            cache.registerAnonymousType(scope, getFrozenLocation(reader.getLocation()));\n         simpleType.setSimpleFlag();\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n+                if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                simpleType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                simpleType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n@@ -7437,174 +6170,141 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Skips the remaining content and end element (used during development).\n      */\n-    private void skipTag(final XMLStreamReader reader) throws XMLStreamException\n-    {\n+    private void skipTag(final XMLStreamReader reader) throws XMLStreamException {\n         boolean done = false;\n \n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     skipTag(reader);\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n-                case XMLStreamConstants.CHARACTERS:\n-                {\n+                case XMLStreamConstants.CHARACTERS: {\n                 }\n                 break;\n-                case XMLStreamConstants.COMMENT:\n-                {\n+                case XMLStreamConstants.COMMENT: {\n                 }\n                 break;\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n     }\n \n-    private String token(final String initialValue) \n-        throws SimpleTypeException\n-    {\n+    private String token(final String initialValue)\n+        throws SimpleTypeException {\n         // this is really kinda silly, you know.  major overkill to insure\n         // that whitespace is handled.\n-      final SimpleType atomicType = bootstrap.getAtomicType(NativeType.TOKEN);\n-      try\n-      {\n-          final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getString(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, atomicType, dte);\n-      }\n-      return null;\n+        final SimpleType atomicType = bootstrap.getAtomicType(NativeType.TOKEN);\n+        try {\n+            final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n+            if (value.size() > 0) {\n+                return atoms.getString(value.get(0));\n+            }\n+        } catch (DatatypeException dte) {\n+            throw new SimpleTypeException(initialValue, atomicType, dte);\n+        }\n+        return null;\n     }\n \n     /**\n      * xs:totalDigits\n      */\n-    private XMLTotalDigitsFacet totalDigitsTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n-    {\n-        final XMLTotalDigitsFacet facet = new XMLTotalDigitsFacet(simpleType, getFrozenLocation(reader.getLocation()));\n+    private XMLTotalDigitsFacet totalDigitsTag(final XMLType simpleType,\n+                                               final XMLStreamReader reader,\n+                                               final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException {\n+        final XMLTotalDigitsFacet facet =\n+            new XMLTotalDigitsFacet(simpleType, getFrozenLocation(reader.getLocation()));\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_ID.equals(localName))\n-                {\n-                    facet.id = checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n-                    try\n-                    {\n-                        facet.fixed = fixed(reader.getAttributeValue(i), reader.getLocation(), reader.getName());\n-                    }\n-                    catch (final SmAttributeUseException e)\n-                    {\n+                if (LN_ID.equals(localName)) {\n+                    facet.id =\n+                        checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                            module);\n+                } else if (LN_FIXED.equals(localName)) {\n+                    try {\n+                        facet.fixed = fixed(reader.getAttributeValue(i), reader.getLocation(),\n+                            reader.getName());\n+                    } catch (final SmAttributeUseException e) {\n                         m_errors.error(e);\n                     }\n-                }\n-                else if (LN_VALUE.equals(localName))\n-                {\n+                } else if (LN_VALUE.equals(localName)) {\n                     final String strval = reader.getAttributeValue(i);\n-                    try\n-                    {\n+                    try {\n                         facet.value = positiveInteger(strval);\n+                    } catch (final SimpleTypeException e) {\n+                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i),\n+                            reader.getLocation(), e);\n                     }\n-                    catch (final SimpleTypeException e)\n-                    {\n-                        reportAttributeUseError(reader.getName(), reader.getAttributeName(i), reader.getLocation(), e);\n-                    }\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                facet.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                facet.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_TOTAL_DIGITS, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_TOTAL_DIGITS,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_TOTAL_DIGITS, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_TOTAL_DIGITS, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -7612,18 +6312,15 @@ final class XMLSchemaParser extends XMLRepresentation\n         return facet;\n     }\n \n-    private boolean trueOrFalse(final String initialValue) throws SimpleTypeException\n-    {\n+    private boolean trueOrFalse(final String initialValue) throws SimpleTypeException {\n         // this one's actually worthwhile, though.\n         final SimpleType type = bootstrap.getAtomicType(NativeType.BOOLEAN);\n-        try\n-        {\n+        try {\n             final List<XmlAtom> value = type.validate(initialValue, atoms);\n-            if (value.size() > 0)\n+            if (value.size() > 0) {\n                 return atoms.getBoolean(value.get(0));\n-        }\n-        catch (DatatypeException dte)\n-        {\n+            }\n+        } catch (DatatypeException dte) {\n             throw new SimpleTypeException(initialValue, type, dte);\n         }\n         return false;\n@@ -7633,20 +6330,22 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Obtains a {@link #LN_TYPE}, {@link #LN_ITEM_TYPE} or tokenized {@link #LN_MEMBER_TYPES} attribute value as type\n      * reference.\n      */\n-    private XMLTypeRef typeRef(final String initialValue, final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader) throws SmComplexTypeException\n-    {\n-        if (null != initialValue)\n-        {\n-            return new XMLTypeRef(optionalQName(initialValue, attributeName, isChameleon, targetNamespace, reader));\n-        }\n-        else\n-        {\n-            throw new SmMissingAttributeException(reader.getName(), new QName(attributeName), getFrozenLocation(reader.getLocation()));\n+    private XMLTypeRef typeRef(final String initialValue, final String attributeName,\n+                               final boolean isChameleon, final String targetNamespace,\n+                               final XMLStreamReader reader) throws SmComplexTypeException {\n+        if (null != initialValue) {\n+            return new XMLTypeRef(\n+                optionalQName(initialValue, attributeName, isChameleon, targetNamespace, reader));\n+        } else {\n+            throw new SmMissingAttributeException(reader.getName(), new QName(attributeName),\n+                getFrozenLocation(reader.getLocation()));\n         }\n     }\n \n-    private void unionTag(final XMLType unionType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n-    {\n+    private void unionTag(final XMLType unionType, final XMLSchemaModule module,\n+                          final XMLStreamReader reader, final XMLSchemaCache cache,\n+                          final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException {\n         unionType.setBase(ANY_SIMPLE_TYPE, DerivationMethod.Union);\n \n         // Use this to detect missing both memberTypes attribute and\n@@ -7658,159 +6357,132 @@ final class XMLSchemaParser extends XMLRepresentation\n         unionType.memberRefs.clear();\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_MEMBER_TYPES.equals(localName))\n-                {\n-                    final StringTokenizer tokenizer = new StringTokenizer(reader.getAttributeValue(i), \" \");\n-                    while (tokenizer.hasMoreTokens())\n-                    {\n+                if (LN_MEMBER_TYPES.equals(localName)) {\n+                    final StringTokenizer tokenizer =\n+                        new StringTokenizer(reader.getAttributeValue(i), \" \");\n+                    while (tokenizer.hasMoreTokens()) {\n                         final String token = tokenizer.nextToken();\n-                        try\n-                        {\n-                            final XMLTypeRef memberType = typeRef(token, LN_MEMBER_TYPES, module.isChameleon(), targetNamespace, reader);\n-                            ensureReferenceType(memberType.getName(), reader.getLocation(), redefine, cache);\n+                        try {\n+                            final XMLTypeRef memberType =\n+                                typeRef(token, LN_MEMBER_TYPES, module.isChameleon(),\n+                                    targetNamespace, reader);\n+                            ensureReferenceType(memberType.getName(), reader.getLocation(),\n+                                redefine, cache);\n                             unionType.memberRefs.add(memberType);\n-                        }\n-                        catch (final SmComplexTypeException e)\n-                        {\n+                        } catch (final SmComplexTypeException e) {\n                             m_errors.error(e);\n                         }\n                     }\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                unionType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                unionType.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_SIMPLE_TYPE.equals(localName))\n-                            {\n-                                unionType.memberRefs.add(simpleTypeLocalTag(new XMLScope(unionType), cache, module, reader, false, targetNamespace));\n+                            if (LN_SIMPLE_TYPE.equals(localName)) {\n+                                unionType.memberRefs.add(\n+                                    simpleTypeLocalTag(new XMLScope(unionType), cache, module,\n+                                        reader, false, targetNamespace));\n                                 firstElement = false;\n-                            }\n-                            else if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_UNION, reader.getLocation());\n+                            } else if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_UNION,\n+                                    reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_UNION, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_UNION, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n-        if (unionType.memberRefs.isEmpty())\n-        {\n+        if (unionType.memberRefs.isEmpty()) {\n             m_errors.error(new SmSimpleTypeUnionException(getFrozenLocation(reader.getLocation())));\n         }\n     }\n \n-    private XMLIdentityConstraint uniqueTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLIdentityConstraintException, AbortException\n-    {\n+    private XMLIdentityConstraint uniqueTag(final XMLSchemaCache cache,\n+                                            final XMLStreamReader reader,\n+                                            final String targetNamespace,\n+                                            final XMLSchemaModule module)\n+        throws XMLStreamException, XMLIdentityConstraintException, AbortException {\n         final XMLIdentityConstraint unique;\n-        try\n-        {\n+        try {\n             final QName name = requiredNCName(LN_NAME, targetNamespace, reader);\n             module.registerIdentityConstraintName(name, reader.getLocation());\n-            unique = cache.registerIdentityConstraint(IdentityConstraintKind.Unique, name, getFrozenLocation(reader.getLocation()));\n-        }\n-        catch (final SchemaException e)\n-        {\n+            unique = cache.registerIdentityConstraint(IdentityConstraintKind.Unique, name,\n+                getFrozenLocation(reader.getLocation()));\n+        } catch (final SchemaException e) {\n             skipTag(reader);\n             throw new XMLIdentityConstraintException(e);\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_NAME.equals(localName))\n-                {\n+                if (LN_NAME.equals(localName)) {\n                     // Already known.\n+                } else if (LN_ID.equals(localName)) {\n+                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(),\n+                        module);\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n                 }\n-                else if (LN_ID.equals(localName))\n-                {\n-                    checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n-                unique.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n+                unique.foreignAttributes\n+                    .put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n \n@@ -7818,171 +6490,134 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean missingFields = true;\n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_UNIQUE, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_UNIQUE,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else if (LN_SELECTOR.equals(localName))\n-                            {\n-                                missingSelector = checkWxsElementMaxOccursUnity(missingSelector, LN_UNIQUE, LN_SELECTOR, reader.getLocation());\n-                                try\n-                                {\n+                            } else if (LN_SELECTOR.equals(localName)) {\n+                                missingSelector =\n+                                    checkWxsElementMaxOccursUnity(missingSelector, LN_UNIQUE,\n+                                        LN_SELECTOR, reader.getLocation());\n+                                try {\n                                     unique.selector = selectorTag(reader, module);\n-                                }\n-                                catch (final XMLSelectorException e)\n-                                {\n+                                } catch (final XMLSelectorException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else if (LN_FIELD.equals(localName))\n-                            {\n-                                if (missingSelector)\n-                                {\n-                                    m_errors.error(new SmUnexpectedElementException(reader.getName(), getFrozenLocation(reader.getLocation()), new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_FIELD), getFrozenLocation(reader.getLocation())));\n+                            } else if (LN_FIELD.equals(localName)) {\n+                                if (missingSelector) {\n+                                    m_errors.error(\n+                                        new SmUnexpectedElementException(reader.getName(),\n+                                            getFrozenLocation(reader.getLocation()),\n+                                            new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, LN_FIELD),\n+                                            getFrozenLocation(reader.getLocation())));\n                                 }\n                                 missingFields = false;\n-                                try\n-                                {\n+                                try {\n                                     unique.fields.add(fieldTag(reader, module));\n-                                }\n-                                catch (final XMLFieldException e)\n-                                {\n+                                } catch (final XMLFieldException e) {\n                                     m_errors.error(e.getCause());\n                                 }\n                                 firstElement = false;\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_UNIQUE, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_UNIQUE, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n         }\n-        if (missingFields)\n-        {\n-            m_errors.error(new SmUnexpectedEndException(reader.getName(), getFrozenLocation(reader.getLocation())));\n+        if (missingFields) {\n+            m_errors.error(new SmUnexpectedEndException(reader.getName(),\n+                getFrozenLocation(reader.getLocation())));\n         }\n         return unique;\n     }\n \n-    private XMLCardinality use(final String strval) throws SimpleTypeException\n-    {\n-        if (\"optional\".equals(strval))\n-        {\n+    private XMLCardinality use(final String strval) throws SimpleTypeException {\n+        if (\"optional\".equals(strval)) {\n             return XMLCardinality.OPTIONAL;\n-        }\n-        else if (\"prohibited\".equals(strval))\n-        {\n+        } else if (\"prohibited\".equals(strval)) {\n             return XMLCardinality.NONE;\n-        }\n-        else if (\"required\".equals(strval))\n-        {\n+        } else if (\"required\".equals(strval)) {\n             return XMLCardinality.EXACTLY_ONE;\n-        }\n-        else\n-        {\n+        } else {\n             final DatatypeException dte = new DatatypeException(strval, null);\n             throw new SimpleTypeException(strval, null, dte);\n         }\n     }\n \n-    private String validateString(final String initialValue, final NativeType derivedType) \n-        throws SimpleTypeException\n-    {\n+    private String validateString(final String initialValue, final NativeType derivedType)\n+        throws SimpleTypeException {\n         // under what circumstances does one *need* to validate a string?\n-      final SimpleType type = bootstrap.getAtomicType(derivedType);\n-      try\n-      {\n-          final List<XmlAtom> value = type.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getString(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, type, dte);\n-      }\n-      return null;\n+        final SimpleType type = bootstrap.getAtomicType(derivedType);\n+        try {\n+            final List<XmlAtom> value = type.validate(initialValue, atoms);\n+            if (value.size() > 0) {\n+                return atoms.getString(value.get(0));\n+            }\n+        } catch (DatatypeException dte) {\n+            throw new SimpleTypeException(initialValue, type, dte);\n+        }\n+        return null;\n     }\n \n-    private WhiteSpacePolicy whiteSpaceTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, SmComplexTypeException, AbortException\n-    {\n+    private WhiteSpacePolicy whiteSpaceTag(final XMLStreamReader reader,\n+                                           final XMLSchemaModule module)\n+        throws XMLStreamException, SmComplexTypeException, AbortException {\n         WhiteSpacePolicy policy = WhiteSpacePolicy.PRESERVE;\n         final int attributeCount = reader.getAttributeCount();\n-        for (int i = 0; i < attributeCount; i++)\n-        {\n+        for (int i = 0; i < attributeCount; i++) {\n             final String namespaceURI = reader.getAttributeNamespace(i);\n-            if (isGlobal(namespaceURI))\n-            {\n+            if (isGlobal(namespaceURI)) {\n                 final String localName = reader.getAttributeLocalName(i);\n-                if (LN_VALUE.equals(localName))\n-                {\n+                if (LN_VALUE.equals(localName)) {\n                     final String value = reader.getAttributeValue(i);\n-                    if (\"preserve\".equals(value))\n-                    {\n+                    if (\"preserve\".equals(value)) {\n                         policy = WhiteSpacePolicy.PRESERVE;\n-                    }\n-                    else if (\"replace\".equals(value))\n-                    {\n+                    } else if (\"replace\".equals(value)) {\n                         policy = WhiteSpacePolicy.REPLACE;\n-                    }\n-                    else if (\"collapse\".equals(value))\n-                    {\n+                    } else if (\"collapse\".equals(value)) {\n                         policy = WhiteSpacePolicy.COLLAPSE;\n-                    }\n-                    else\n-                    {\n+                    } else {\n                         final DatatypeException dte = new DatatypeException(value, null);\n                         final SimpleTypeException ste = new SimpleTypeException(value, null, dte);\n-                        throw new SmAttributeUseException(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()), ste);\n+                        throw new SmAttributeUseException(reader.getName(),\n+                            reader.getAttributeName(i), getFrozenLocation(reader.getLocation()),\n+                            ste);\n                     }\n-                }\n-                else if (LN_FIXED.equals(localName))\n-                {\n+                } else if (LN_FIXED.equals(localName)) {\n                     // TODO: how can we handle the 'fixed' attribute on the whitespace facet\n                     // in the architecture of schema model that defines it as an enumeration?\n                     // a completely correct solution would check all ancestor types when encountering\n@@ -7995,18 +6630,14 @@ final class XMLSchemaParser extends XMLRepresentation\n                     // nor checking whether ancestors have a fixed whitespace policy.\n                     //\n                     // Which is what this empty block now achieves. Win?\n-                }\n-                else\n-                {\n-                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-                }\n-            }\n-            else if (isWXS(namespaceURI))\n-            {\n-                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i), getFrozenLocation(reader.getLocation()));\n-            }\n-            else\n-            {\n+                } else {\n+                    reportAttributeInGlobalNamespace(reader.getName(), reader.getAttributeName(i),\n+                        getFrozenLocation(reader.getLocation()));\n+                }\n+            } else if (isWXS(namespaceURI)) {\n+                reportAttributeInWxsNamespace(reader.getName(), reader.getAttributeName(i),\n+                    getFrozenLocation(reader.getLocation()));\n+            } else {\n                 // pointless to preserve; there's no place to surface these.\n                 // {any attributes with non-schema namespace}\n             }\n@@ -8014,57 +6645,45 @@ final class XMLSchemaParser extends XMLRepresentation\n \n         boolean firstElement = true;\n         boolean done = false;\n-        while (!done)\n-        {\n+        while (!done) {\n             final int event = reader.next();\n \n-            switch (event)\n-            {\n-                case XMLStreamConstants.START_ELEMENT:\n-                {\n+            switch (event) {\n+                case XMLStreamConstants.START_ELEMENT: {\n                     m_pms.pushContext();\n-                    try\n-                    {\n+                    try {\n                         copyNamespaces(reader, m_pms);\n-                        if (isWXS(reader.getNamespaceURI()))\n-                        {\n+                        if (isWXS(reader.getNamespaceURI())) {\n                             final String localName = reader.getLocalName();\n-                            if (LN_ANNOTATION.equals(localName))\n-                            {\n-                                firstElement = checkAnnotationMaxOccursUnity(firstElement, LN_WHITE_SPACE, reader.getLocation());\n+                            if (LN_ANNOTATION.equals(localName)) {\n+                                firstElement =\n+                                    checkAnnotationMaxOccursUnity(firstElement, LN_WHITE_SPACE,\n+                                        reader.getLocation());\n                                 annotationTag(reader, module);\n-                            }\n-                            else\n-                            {\n-                                reportUnexpectedElementTag(LN_WHITE_SPACE, reader.getName(), reader.getLocation());\n+                            } else {\n+                                reportUnexpectedElementTag(LN_WHITE_SPACE, reader.getName(),\n+                                    reader.getLocation());\n                                 skipTag(reader);\n                             }\n-                        }\n-                        else\n-                        {\n+                        } else {\n                             skipTag(reader);\n                             firstElement = false;\n                         }\n-                    }\n-                    finally\n-                    {\n+                    } finally {\n                         m_pms.popContext();\n                     }\n                 }\n                 break;\n-                case XMLStreamConstants.END_ELEMENT:\n-                {\n+                case XMLStreamConstants.END_ELEMENT: {\n                     done = true;\n                 }\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 case XMLStreamConstants.COMMENT:\n-                case XMLStreamConstants.PROCESSING_INSTRUCTION:\n-                {\n+                case XMLStreamConstants.PROCESSING_INSTRUCTION: {\n                 }\n                 break;\n-                default:\n-                {\n+                default: {\n                     throw new UnsupportedOperationException(Integer.toString(event));\n                 }\n             }\n@@ -8072,47 +6691,37 @@ final class XMLSchemaParser extends XMLRepresentation\n         return policy;\n     }\n \n-    private RestrictedXPath xpath(final String strval, final Location location, final QName elementName) throws SmAttributeUseException\n-    {\n-        try\n-        {\n+    private RestrictedXPath xpath(final String strval, final Location location,\n+                                  final QName elementName) throws SmAttributeUseException {\n+        try {\n             final String token = token(strval);\n             return m_xp.parseXPath(token, m_pms);\n-        }\n-        catch (final SimpleTypeException e)\n-        {\n-            throw new SmAttributeUseException(elementName, new QName(LN_XPATH), getFrozenLocation(location), e);\n+        } catch (final SimpleTypeException e) {\n+            throw new SmAttributeUseException(elementName, new QName(LN_XPATH),\n+                getFrozenLocation(location), e);\n         }\n     }\n \n-    private enum ModuleKind\n-    {\n+    private enum ModuleKind {\n         Import, Include, Redefine\n     }\n \n-    private static SrcFrozenLocation getFrozenLocation(final Location location)\n-    {\n+    private static SrcFrozenLocation getFrozenLocation(final Location location) {\n         PreCondition.assertArgumentNotNull(location, \"location\");\n         return new SrcFrozenLocation(location);\n     }\n \n-    private static boolean isWhiteSpace(final String strval)\n-    {\n-        if (null != strval)\n-        {\n+    private static boolean isWhiteSpace(final String strval) {\n+        if (null != strval) {\n             final int n = strval.length();\n \n-            for (int i = 0; i < n; i++)\n-            {\n+            for (int i = 0; i < n; i++) {\n                 final char ch = strval.charAt(i);\n \n                 // The follwing pattern is denormalized for speed.\n-                if ((ch == 0x20) || (ch == 0x09) || (ch == 0xD) || (ch == 0xA))\n-                {\n+                if ((ch == 0x20) || (ch == 0x09) || (ch == 0xD) || (ch == 0xA)) {\n                     // Try the next one, all must be whiteSpace.\n-                }\n-                else\n-                {\n+                } else {\n                     return false;\n                 }\n             }\n@@ -8124,8 +6733,7 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * (xs:annotation?, xs:simpleType)\n      */\n-    private static ContentModelTable<String> makeAttributeTable()\n-    {\n+    private static ContentModelTable<String> makeAttributeTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8143,8 +6751,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         return table;\n     }\n \n-    private static ContentModelTable<String> makeComplexContentTable()\n-    {\n+    private static ContentModelTable<String> makeComplexContentTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8162,8 +6769,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         return table;\n     }\n \n-    private static ContentModelTable<String> makeComplexTypeTable()\n-    {\n+    private static ContentModelTable<String> makeComplexTypeTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8205,8 +6811,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         return table;\n     }\n \n-    private static ContentModelTable<String> makeExtensionInComplexContentTable()\n-    {\n+    private static ContentModelTable<String> makeExtensionInComplexContentTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8250,8 +6855,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         return table;\n     }\n \n-    private static ContentModelTable<String> makeExtensionInSimpleContentTable()\n-    {\n+    private static ContentModelTable<String> makeExtensionInSimpleContentTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8273,8 +6877,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         return table;\n     }\n \n-    private static ContentModelTable<String> makeRestrictionInComplexContentTable()\n-    {\n+    private static ContentModelTable<String> makeRestrictionInComplexContentTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8318,8 +6921,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         return table;\n     }\n \n-    private static ContentModelTable<String> makeRestrictionInSimpleContentTable()\n-    {\n+    private static ContentModelTable<String> makeRestrictionInSimpleContentTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8393,8 +6995,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         return table;\n     }\n \n-    private static ContentModelTable<String> makeSimpleContentTable()\n-    {\n+    private static ContentModelTable<String> makeSimpleContentTable() {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n \n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n@@ -8415,53 +7016,58 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Return the local-name part of the lexical xs:QName. <br/>\n      * The input is assumed to be lexically valid.\n-     * \n-     * @param qualifiedName\n-     *            The lexical xs:QName.\n+     *\n+     * @param qualifiedName The lexical xs:QName.\n      */\n-    private static String getLocalName(final String qualifiedName)\n-    {\n+    private static String getLocalName(final String qualifiedName) {\n         return qualifiedName.substring(qualifiedName.indexOf(\":\") + 1);\n     }\n \n     /**\n      * Return the prefix part of the lexical xs:QName. If there is no colon separator, returns the empty string. <br/>\n      * The input is assumed to be lexically valid.\n-     * \n-     * @param qualifiedName\n-     *            The lexical xs:QName.\n+     *\n+     * @param qualifiedName The lexical xs:QName.\n      */\n-    private static String getPrefix(final String qualifiedName)\n-    {\n+    private static String getPrefix(final String qualifiedName) {\n         final int index = qualifiedName.indexOf(':');\n-        if (index == -1)\n-        {\n+        if (index == -1) {\n             return XMLConstants.DEFAULT_NS_PREFIX;\n-        }\n-        else\n-        {\n+        } else {\n             return qualifiedName.substring(0, index);\n         }\n     }\n \n     private static final ContentModelTable<String> attributeTable = makeAttributeTable();\n+\n     private static final ContentModelTable<String> complexContentTable = makeComplexContentTable();\n+\n     private static final ContentModelTable<String> complexTypeTable = makeComplexTypeTable();\n \n     private static final String EPSILON = \"\";\n-    private static final ContentModelTable<String> extensionInComplexContentTable = makeExtensionInComplexContentTable();\n-    private static final ContentModelTable<String> extensionInSimpleContentTable = makeExtensionInSimpleContentTable();\n-    private static final ContentModelTable<String> restrictionInComplexContentTable = makeRestrictionInComplexContentTable();\n-    private static final ContentModelTable<String> restrictionInSimpleContentTable = makeRestrictionInSimpleContentTable();\n+\n+    private static final ContentModelTable<String> extensionInComplexContentTable =\n+        makeExtensionInComplexContentTable();\n+\n+    private static final ContentModelTable<String> extensionInSimpleContentTable =\n+        makeExtensionInSimpleContentTable();\n+\n+    private static final ContentModelTable<String> restrictionInComplexContentTable =\n+        makeRestrictionInComplexContentTable();\n+\n+    private static final ContentModelTable<String> restrictionInSimpleContentTable =\n+        makeRestrictionInSimpleContentTable();\n+\n     private static final ContentModelTable<String> simpleContentTable = makeSimpleContentTable();\n \n     private final FAMap foreignAttributes = new FAMap();\n \n     private final XMLTypeRef ANY_SIMPLE_TYPE;\n+\n     private final XMLTypeRef ANY_TYPE;\n \n     private final CanonicalAtomBridge atoms;\n-    \n+\n     private final ComponentProvider bootstrap;\n \n     private final SchemaCatalog m_catalog;\n",
            "diff_size": 5256
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/371/XMLSchemaParser.java\nindex 1bd055728dc..d92061bf4e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/371/XMLSchemaParser.java\n@@ -25,7 +25,6 @@ import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.StringTokenizer;\n-\n import javax.xml.XMLConstants;\n import javax.xml.namespace.NamespaceContext;\n import javax.xml.namespace.QName;\n@@ -34,7 +33,6 @@ import javax.xml.stream.XMLInputFactory;\n import javax.xml.stream.XMLStreamConstants;\n import javax.xml.stream.XMLStreamException;\n import javax.xml.stream.XMLStreamReader;\n-\n import org.genxdm.bridgekit.atoms.XmlAtom;\n import org.genxdm.bridgekit.misc.StringToURIParser;\n import org.genxdm.exceptions.GenXDMException;\n@@ -138,6 +136,7 @@ import org.genxdm.xs.types.SimpleType;\n  * <li>Maximise the feedback from parsing by choosing when to throw/catch\n  * </ul>\n  */\n+\n final class XMLSchemaParser extends XMLRepresentation\n {\n     public XMLSchemaParser(final ComponentProvider bootstrap, final SchemaExceptionHandler errors, final SchemaCatalog catalog, final CatalogResolver resolver, boolean processRepeatedNamespaces)\n@@ -154,12 +153,12 @@ final class XMLSchemaParser extends XMLRepresentation\n         ANY_TYPE = new XMLTypeRef(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, \"anyType\"));\n     }\n \n-    public void parse(final String systemId, final InputStream istream, final XMLSchemaCache cache, final XMLSchemaModule module) throws AbortException\n+    public void parse(final String systemId, final InputStream istream, final XMLSchemaCache cache, final XMLSchemaModule module)\n+        throws AbortException\n     {\n         PreCondition.assertArgumentNotNull(cache, \"cache\");\n         PreCondition.assertArgumentNotNull(module, \"module\");\n-\n-        if(!module.isChameleon())\n+        if (!module.isChameleon())\n         {\n             if (cache.m_seenSystemIds.contains(systemId))\n             {\n@@ -172,28 +171,28 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n         else\n         {\n-        \t// For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n-        \t// request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n-    \t\tString computedTns = module.computeTargetNamespace();\n-        \tHashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);\n-        \tif(tnsSet != null)\n-        \t{\n-        \t\tif(tnsSet.contains(computedTns))\n-        \t\t{\n-        \t\t\t// Stop parsing.  We've already parsed this chameleon into this namespace.\n-        \t\t\treturn;\n-        \t\t}\n-        \t\telse\n-        \t\t{\n-        \t\t\ttnsSet.add(computedTns);\n-        \t\t}\n-        \t}\n-        \telse\n-        \t{\n-        \t\tfinal HashSet<String> newList = new HashSet<String>();\n-        \t\tnewList.add(computedTns);\n-        \t\tcache.m_seenChameleonsLocation2Tns.put(systemId, newList);\n-        \t}\n+            // For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n+            // request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n+            String computedTns = module.computeTargetNamespace();\n+            HashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);\n+            if (tnsSet != null)\n+            {\n+                if (tnsSet.contains(computedTns))\n+                {\n+                    // Stop parsing.  We've already parsed this chameleon into this namespace.\n+                    return;\n+                }\n+                else\n+                {\n+                    tnsSet.add(computedTns);\n+                }\n+            }\n+            else\n+            {\n+                final HashSet<String> newList = new HashSet<String>();\n+                newList.add(computedTns);\n+                cache.m_seenChameleonsLocation2Tns.put(systemId, newList);\n+            }\n         }\n \n         final XMLInputFactory factory = XMLInputFactory.newInstance();\n@@ -232,11 +231,9 @@ final class XMLSchemaParser extends XMLRepresentation\n                 throw new GenXDMException(xse);\n             }\n         }\n-        \n         try\n         {\n             boolean done = false;\n-\n             while (!done)\n             {\n                 final int event = reader.next();\n@@ -283,6 +280,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                     default:\n                     {\n                         // ignore\n+\n                     }\n                 }\n             }\n@@ -309,7 +307,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void annotationContent(final String contextName, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+    private void annotationContent(final String contextName, final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         boolean firstElement = true;\n         boolean done = false;\n@@ -368,6 +367,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -378,7 +378,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void annotationTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+    private void annotationTag(final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n@@ -404,6 +405,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // ignore foreign attributes?\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -457,6 +459,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -470,11 +473,12 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:anyAttribute.\n      */\n-    private XMLWildcard anyAttributeTag(final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+\n+    private XMLWildcard anyAttributeTag(final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         ProcessContentsMode processContents = ProcessContentsMode.Strict;\n         NamespaceConstraint namespaceConstraint = NamespaceConstraint.Any();\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -572,6 +576,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -589,14 +594,14 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:any\n      */\n-    private XMLParticle anyElementTag(final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+\n+    private XMLParticle anyElementTag(final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         ProcessContentsMode processContents = ProcessContentsMode.Strict;\n         NamespaceConstraint namespaceConstraint = NamespaceConstraint.Any();\n-\n         BigInteger minOccurs = BigInteger.ONE;\n         BigInteger maxOccurs = BigInteger.ONE;\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -702,6 +707,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -710,13 +716,15 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n+\n         final XMLWildcard wildcard = new XMLWildcard(processContents, namespaceConstraint);\n         wildcard.foreignAttributes.putAll(foreignAttributes);\n         foreignAttributes.clear();\n         return new XMLParticleWithWildcardTerm(minOccurs, maxOccurs, wildcard, getFrozenLocation(reader.getLocation()));\n     }\n \n-    private void appinfoTag(final XMLStreamReader reader) throws XMLStreamException, AbortException\n+    private void appinfoTag(final XMLStreamReader reader)\n+        throws XMLStreamException, AbortException\n     {\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n@@ -727,7 +735,8 @@ final class XMLSchemaParser extends XMLRepresentation\n                 final String localName = reader.getAttributeLocalName(i);\n                 if (LN_SOURCE.equals(localName))\n                 {\n-                    /* final String source = */reader.getAttributeValue(i);\n+                    /* final String source = */\n+                    reader.getAttributeValue(i);\n                 }\n                 else\n                 {\n@@ -742,6 +751,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // foreign attributes not allowed on appinfo (I think)\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -775,6 +785,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -785,7 +796,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void assertRefAbsent(final QName ref, final Location location) throws AbortException\n+    private void assertRefAbsent(final QName ref, final Location location)\n+        throws AbortException\n     {\n         if (null != ref)\n         {\n@@ -796,7 +808,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:attributeGroup (reference)\n      */\n-    private XMLAttributeGroup attribGroupRefTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws XMLStreamException, XMLAttributeGroupException, AbortException\n+\n+    private XMLAttributeGroup attribGroupRefTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace)\n+        throws XMLStreamException, XMLAttributeGroupException, AbortException\n     {\n         final QName ref;\n         try\n@@ -822,6 +836,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n                 else if (LN_REF.equals(localName))\n                 {\n+\n                 }\n                 else\n                 {\n@@ -850,6 +865,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n         attributeGroup.foreignAttributes.putAll(foreignAttributes);\n         foreignAttributes.clear();\n+\n         boolean firstElement = true;\n         boolean done = false;\n         while (!done)\n@@ -900,6 +916,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -908,14 +925,15 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         return attributeGroup;\n     }\n \n     /**\n      * xs:attributeGroup (global definition)\n      */\n-    private XMLAttributeGroup attribGroupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLAttributeGroupException, AbortException\n+\n+    private XMLAttributeGroup attribGroupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, XMLAttributeGroupException, AbortException\n     {\n         final XMLAttributeGroup attributeGroup;\n         final LinkedList<XMLAttributeUse> savedLocalAttributes;\n@@ -952,16 +970,12 @@ final class XMLSchemaParser extends XMLRepresentation\n                 skipTag(reader);\n                 throw new XMLAttributeGroupException(e);\n             }\n-\n             savedLocalAttributes = new LinkedList<XMLAttributeUse>(attributeGroup.getAttributeUses());\n             attributeGroup.getAttributeUses().clear();\n-\n             savedReferencedAttributeGroups = new LinkedList<XMLAttributeGroup>(attributeGroup.getGroups());\n             attributeGroup.getGroups().clear();\n-\n             savedProhibited = new HashSet<QName>(attributeGroup.prohibited);\n             attributeGroup.prohibited.clear();\n-\n             savedWildcard = attributeGroup.wildcard;\n             attributeGroup.wildcard = null;\n         }\n@@ -980,6 +994,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 else if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else\n                 {\n@@ -1088,6 +1103,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -1096,7 +1112,6 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         if (!redefine)\n         {\n             return attributeGroup;\n@@ -1111,7 +1126,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:attribute (reference or local definition)\n      */\n-    private void attributeLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final LinkedList<XMLAttributeUse> attributeUses, final HashSet<QName> prohibited, final XMLScope scope) throws XMLStreamException, AbortException\n+\n+    private void attributeLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final LinkedList<XMLAttributeUse> attributeUses, final HashSet<QName> prohibited, final XMLScope scope)\n+        throws XMLStreamException, AbortException\n     {\n         String name = null;\n         XMLTypeRef type = null;\n@@ -1120,10 +1137,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean qualified = module.attributeQualified;\n         XMLValueConstraint valueConstraint = null;\n         String id = null;\n-\n         boolean seenForm = false;\n         boolean seenDefault = false;\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -1183,6 +1198,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n                 else if (LN_REF.equals(localName))\n                 {\n+\n                 }\n                 else if (LN_TYPE.equals(localName))\n                 {\n@@ -1233,7 +1249,7 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n \n         // The following test only applies to local attributes.\n-        if ((null != ref) && (seenForm || (null != type)))\n+        if ( (null != ref) && (seenForm || (null != type)))\n         {\n             m_errors.error(new SmAttributeRefPresentException(getFrozenLocation(reader.getLocation())));\n         }\n@@ -1291,7 +1307,12 @@ final class XMLSchemaParser extends XMLRepresentation\n                                     {\n                                         m_errors.error(new SrcAttributeTypeAndSimpleTypePresentException(getFrozenLocation(reader.getLocation())));\n                                     }\n-                                    attribute.typeRef = simpleTypeLocalTag(new XMLScope(attribute), cache, module, reader, redefine, targetNamespace);\n+                                    attribute.typeRef = simpleTypeLocalTag(new XMLScope(attribute),\n+                                        cache,\n+                                            module,\n+                                                reader,\n+                                                    redefine,\n+                                                        targetNamespace);\n                                 }\n                                 else if (LN_ANNOTATION.equals(localName))\n                                 {\n@@ -1328,6 +1349,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -1342,7 +1364,6 @@ final class XMLSchemaParser extends XMLRepresentation\n         {\n             final boolean required = (use.getMinOccurs() > 0);\n             final XMLAttributeUse attributeUse = new XMLAttributeUse(required, attribute, valueConstraint);\n-\n             attributeUses.add(attributeUse);\n         }\n         else\n@@ -1355,7 +1376,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:attribute (global definition).\n      */\n-    private XMLAttribute attributeTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws XMLStreamException, XMLAttributeException, AbortException\n+\n+    private XMLAttribute attributeTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace)\n+        throws XMLStreamException, XMLAttributeException, AbortException\n     {\n         final XMLAttribute attribute;\n         try\n@@ -1370,7 +1393,6 @@ final class XMLSchemaParser extends XMLRepresentation\n \n         boolean missingTypeAttribute = true;\n         // boolean seenDefault = false;\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -1381,6 +1403,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else if (LN_TYPE.equals(localName))\n                 {\n@@ -1499,6 +1522,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -1507,14 +1531,15 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         return attribute;\n     }\n \n     /**\n      * This function is common to extension and restriction of simple content.\n      */\n-    private QName baseTypeDefinitionInComplexContent(final XMLType complexType, final DerivationMethod derivation, final XMLStreamReader reader, final boolean redefine, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws SchemaException, AbortException\n+\n+    private QName baseTypeDefinitionInComplexContent(final XMLType complexType, final DerivationMethod derivation, final XMLStreamReader reader, final boolean redefine, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace)\n+        throws SchemaException, AbortException\n     {\n         final QName baseName = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n         ensureReferenceType(baseName, reader.getLocation(), redefine, cache);\n@@ -1529,7 +1554,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Used to ensure that a child xs:annotation occurs a maximumn number of once.\n      */\n-    private boolean checkAnnotationMaxOccursUnity(final boolean allowed, final String contextName, final Location location) throws AbortException\n+\n+    private boolean checkAnnotationMaxOccursUnity(final boolean allowed, final String contextName, final Location location)\n+        throws AbortException\n     {\n         return checkWxsElementMaxOccursUnity(allowed, contextName, LN_ANNOTATION, location);\n     }\n@@ -1548,7 +1575,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      *            The module being parsed - used to record the xs:ID values to ensure uniqueness.\n      * @return The xs:ID value as a String.\n      */\n-    private String checkID(final String attributeValue, final Location location, final QName elementName, final XMLSchemaModule module) throws AbortException\n+\n+    private String checkID(final String attributeValue, final Location location, final QName elementName, final XMLSchemaModule module)\n+        throws AbortException\n     {\n         try\n         {\n@@ -1567,12 +1596,12 @@ final class XMLSchemaParser extends XMLRepresentation\n         return null;\n     }\n \n-    private String checkIDValue(final String strval, final Location location, final XMLSchemaModule module) throws SimpleTypeException, SmDuplicateIDException\n+    private String checkIDValue(final String strval, final Location location, final XMLSchemaModule module)\n+        throws SimpleTypeException, SmDuplicateIDException\n     {\n         PreCondition.assertArgumentNotNull(strval, LN_ID);\n \n         final SimpleType idType = bootstrap.getAtomicType(NativeType.ID);\n-\n         final List<XmlAtom> value;\n         try\n         {\n@@ -1593,7 +1622,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         return null;\n     }\n \n-    private void checkPrefixBound(final String prefix, final String namespaceURI, final String initialValue) throws SimpleTypeException\n+    private void checkPrefixBound(final String prefix, final String namespaceURI, final String initialValue)\n+        throws SimpleTypeException\n     {\n         if (!isBoundPrefix(prefix, namespaceURI))\n         {\n@@ -1606,7 +1636,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Used to ensure that a particular child element occurs a maximum number of once.\n      */\n-    private boolean checkWxsElementMaxOccursUnity(final boolean missing, final String contextName, final String unexpectedName, final Location location) throws AbortException\n+\n+    private boolean checkWxsElementMaxOccursUnity(final boolean missing, final String contextName, final String unexpectedName, final Location location)\n+        throws AbortException\n     {\n         if (!missing)\n         {\n@@ -1619,7 +1651,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * xs:complexContent <br/>\n      * We don't return anything because this affects multiple aspects of the complex type.\n      */\n-    private void complexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void complexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         PreCondition.assertArgumentNotNull(complexType, LN_COMPLEX_TYPE);\n \n@@ -1661,6 +1695,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // complex content tag disappears on parse, so no foreign attributes remain.\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -1730,6 +1765,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -1744,7 +1780,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * This does not correspond to a specific tag. <br/>\n      * Used to parse the content of xs:complexType (global and local), but not the same as xs:complexContent.\n      */\n-    private void complexTypeContent(final XMLType complexType, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void complexTypeContent(final XMLType complexType, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         final ContentModelMachine<String> machine = new ContentModelMachine<String>(complexTypeTable, EPSILON);\n         boolean done = false;\n@@ -1880,6 +1918,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore\n+\n                 }\n                 break;\n                 default:\n@@ -1893,7 +1932,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:complexType (global definition)\n      */\n-    private XMLType complexTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLComplexTypeException, AbortException\n+\n+    private XMLType complexTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, XMLComplexTypeException, AbortException\n     {\n         final XMLType complexType;\n         if (!redefine)\n@@ -1907,7 +1948,6 @@ final class XMLSchemaParser extends XMLRepresentation\n                 skipTag(reader);\n                 throw new XMLComplexTypeException(e);\n             }\n-\n             complexType.setComplexFlag();\n             complexType.setBase(ANY_TYPE, DerivationMethod.Restriction);\n             complexType.getBlock().addAll(module.blockDefault);\n@@ -1935,6 +1975,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else if (LN_MIXED.equals(localName))\n                 {\n@@ -2001,9 +2042,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 complexType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n-\n         complexTypeContent(complexType, cache, module, reader, redefine, targetNamespace);\n-\n         if (!redefine)\n         {\n             return complexType;\n@@ -2018,7 +2057,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:complexType (local definition)\n      */\n-    private XMLTypeRef complexTypeLocalTag(final XMLScope scope, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private XMLTypeRef complexTypeLocalTag(final XMLScope scope, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         final XMLType complexType = cache.registerAnonymousType(scope, getFrozenLocation(reader.getLocation()));\n         complexType.setComplexFlag();\n@@ -2063,22 +2104,20 @@ final class XMLSchemaParser extends XMLRepresentation\n                 complexType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n-\n         complexTypeContent(complexType, cache, module, reader, redefine, targetNamespace);\n-\n         return new XMLTypeRef(complexType);\n     }\n \n     /**\n      * xs:sequence, xs:choice or xs:all (outside a group)\n      */\n-    private XMLParticleWithModelGroupTerm compositorOutsideGroupTag(final ModelGroup.SmCompositor compositor, final XMLScope compositorScope, final String contextName, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLCompositorOutsideGroupException, AbortException\n+\n+    private XMLParticleWithModelGroupTerm compositorOutsideGroupTag(final ModelGroup.SmCompositor compositor, final XMLScope compositorScope, final String contextName, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, XMLCompositorOutsideGroupException, AbortException\n     {\n         final XMLModelGroup group = new XMLModelGroup(compositor, compositorScope, getFrozenLocation(reader.getLocation()));\n-\n         BigInteger minOccurs = BigInteger.ONE;\n         BigInteger maxOccurs = BigInteger.ONE;\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -2259,6 +2298,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -2267,13 +2307,18 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-        return new XMLParticleWithModelGroupTerm(minOccurs, maxOccurs, group, getFrozenLocation(reader.getLocation()));\n+        return new XMLParticleWithModelGroupTerm(minOccurs,\n+            maxOccurs,\n+                group,\n+                    getFrozenLocation(reader.getLocation()));\n     }\n \n     /**\n      * xs:sequence, xs:choice or xs:all (within a group)\n      */\n-    private XMLModelGroup compositorWithinGroupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLModelGroup group, final String contextName, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private XMLModelGroup compositorWithinGroupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLModelGroup group, final String contextName, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n@@ -2298,11 +2343,13 @@ final class XMLSchemaParser extends XMLRepresentation\n             else\n             {\n                 // the only place to put these attributes is on the parent. we don't do that; discard.\n+\n             }\n         }\n \n         // If doing a redefine, make a copy of the original group so that we can\n         // mutate the original.\n+\n         final XMLModelGroup originalGroupCopy;\n         if (redefine)\n         {\n@@ -2519,6 +2566,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -2538,10 +2586,11 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Use to parse the LN_BLOCK and LN_FINAL attributes that control substitution and derivation.\n      */\n-    private void control(final String strval, final EnumSet<DerivationMethod> allValue, final EnumSet<DerivationMethod> resultSet) throws SimpleTypeException\n+\n+    private void control(final String strval, final EnumSet<DerivationMethod> allValue, final EnumSet<DerivationMethod> resultSet)\n+        throws SimpleTypeException\n     {\n         resultSet.clear();\n-\n         if (strval.equals(\"#all\"))\n         {\n             resultSet.addAll(allValue);\n@@ -2627,6 +2676,7 @@ final class XMLSchemaParser extends XMLRepresentation\n      * This should be called for all elements immediately after the stack has been pushed. The stack should be popped in\n      * the\n      */\n+\n     private void copyNamespaces(final XMLStreamReader parser, final PrefixMappingSupport pms)\n     {\n         final int namespaceCount = parser.getNamespaceCount();\n@@ -2647,7 +2697,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private XMLAttribute determineLocalAttribute(final String name, final boolean qualified, final QName ref, final XMLSchemaCache cache, final XMLStreamReader parser, final String targetNamespace, final XMLScope scope) throws SchemaException\n+    private XMLAttribute determineLocalAttribute(final String name, final boolean qualified, final QName ref, final XMLSchemaCache cache, final XMLStreamReader parser, final String targetNamespace, final XMLScope scope)\n+        throws SchemaException\n     {\n         if (null != name)\n         {\n@@ -2686,7 +2737,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Determines whether the local element is a local definition or a reference. <br/>\n      * Imposes the constraint that one of the ref and name must be present, but not both.\n      */\n-    private XMLElement determineLocalElement(final String name, final boolean qualified, final XMLTypeRef typeRef, final QName ref, final XMLSchemaCache cache, final XMLStreamReader parser, final String targetNamespace, final XMLScope scope) throws SchemaException\n+\n+    private XMLElement determineLocalElement(final String name, final boolean qualified, final XMLTypeRef typeRef, final QName ref, final XMLSchemaCache cache, final XMLStreamReader parser, final String targetNamespace, final XMLScope scope)\n+        throws SchemaException\n     {\n         if ((null != name) && (null == ref))\n         {\n@@ -2717,7 +2770,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void documentationTag(final XMLStreamReader reader) throws XMLStreamException, AbortException\n+    private void documentationTag(final XMLStreamReader reader)\n+        throws XMLStreamException, AbortException\n     {\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n@@ -2728,7 +2782,8 @@ final class XMLSchemaParser extends XMLRepresentation\n                 final String localName = reader.getAttributeLocalName(i);\n                 if (LN_SOURCE.equals(localName))\n                 {\n-                    /* final String source = */reader.getAttributeValue(i);\n+                    /* final String source = */\n+                    reader.getAttributeValue(i);\n                 }\n                 else\n                 {\n@@ -2742,7 +2797,8 @@ final class XMLSchemaParser extends XMLRepresentation\n                 {\n                     try\n                     {\n-                        /* final String language = */lang(reader.getAttributeValue(i));\n+                        /* final String language = */\n+                        lang(reader.getAttributeValue(i));\n                     }\n                     catch (final SimpleTypeException e)\n                     {\n@@ -2762,6 +2818,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // foreign attributes not allowed on documentation tag\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -2795,6 +2852,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -2805,7 +2863,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void elementContent(final XMLElement element, final QName ref, final XMLSchemaModule module, final XMLSchemaCache cache, final XMLStreamReader reader, final boolean redefine, final String targetNamespace, final boolean seenType) throws XMLStreamException, AbortException\n+    private void elementContent(final XMLElement element, final QName ref, final XMLSchemaModule module, final XMLSchemaCache cache, final XMLStreamReader reader, final boolean redefine, final String targetNamespace, final boolean seenType)\n+        throws XMLStreamException, AbortException\n     {\n         boolean firstElement = true;\n         boolean done = false;\n@@ -2831,7 +2890,12 @@ final class XMLSchemaParser extends XMLRepresentation\n                                 {\n                                     m_errors.error(new SmElementSimpleTypeXorComplexTypeException(getFrozenLocation(reader.getLocation())));\n                                 }\n-                                element.typeRef = complexTypeLocalTag(new XMLScope(element), reader, cache, module, redefine, targetNamespace);\n+                                element.typeRef = complexTypeLocalTag(new XMLScope(element),\n+                                    reader,\n+                                        cache,\n+                                            module,\n+                                                redefine,\n+                                                    targetNamespace);\n                                 firstElement = false;\n                             }\n                             else if (LN_SIMPLE_TYPE.equals(localName))\n@@ -2841,7 +2905,12 @@ final class XMLSchemaParser extends XMLRepresentation\n                                 {\n                                     m_errors.error(new SmElementSimpleTypeXorComplexTypeException(getFrozenLocation(reader.getLocation())));\n                                 }\n-                                element.typeRef = simpleTypeLocalTag(new XMLScope(element), cache, module, reader, redefine, targetNamespace);\n+                                element.typeRef = simpleTypeLocalTag(new XMLScope(element),\n+                                    cache,\n+                                        module,\n+                                            reader,\n+                                                redefine,\n+                                                    targetNamespace);\n                                 firstElement = false;\n                             }\n                             else if (LN_UNIQUE.equals(localName))\n@@ -2916,6 +2985,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -2929,7 +2999,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:element (reference or local definition)\n      */\n-    private XMLParticle elementLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final XMLScope scope) throws XMLStreamException, XMLElementException, AbortException\n+\n+    private XMLParticle elementLocalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final XMLScope scope)\n+        throws XMLStreamException, XMLElementException, AbortException\n     {\n         String name = null;\n         XMLTypeRef typeRef = null;\n@@ -2940,7 +3012,6 @@ final class XMLSchemaParser extends XMLRepresentation\n         final EnumSet<DerivationMethod> block = EnumSet.copyOf(module.blockDefault);\n         boolean qualified = module.elementQualified;\n         XMLValueConstraint valueConstraint = null;\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -3034,6 +3105,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 else if (LN_REF.equals(localName))\n                 {\n                     // Already got it.\n+\n                 }\n                 else if (LN_TYPE.equals(localName))\n                 {\n@@ -3073,10 +3145,9 @@ final class XMLSchemaParser extends XMLRepresentation\n             skipTag(reader);\n             throw new XMLElementException(e);\n         }\n-        if ( (name != null) || (ref == null) )  // not an element reference; new definition \n+        if ( (name != null) || (ref == null))  // not an element reference; new definition \n             element.foreignAttributes.putAll(foreignAttributes);\n         foreignAttributes.clear(); // clear regardless.\n-\n         if (null == ref)\n         {\n             element.setNillableFlag(nillable);\n@@ -3096,7 +3167,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:element (global definition)\n      */\n-    private XMLElement elementTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace) throws XMLStreamException, XMLElementException, AbortException\n+\n+    private XMLElement elementTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final String targetNamespace)\n+        throws XMLStreamException, XMLElementException, AbortException\n     {\n         final XMLElement element;\n         try\n@@ -3108,7 +3181,6 @@ final class XMLSchemaParser extends XMLRepresentation\n             skipTag(reader);\n             throw new XMLElementException(e);\n         }\n-\n         for (final DerivationMethod derivation : module.blockDefault)\n         {\n             // TODO: note the comment here and for finalDefault. is more work needed?\n@@ -3119,7 +3191,6 @@ final class XMLSchemaParser extends XMLRepresentation\n                 element.getBlock().add(derivation);\n             }\n         }\n-\n         for (final DerivationMethod derivation : module.finalDefault)\n         {\n             // Note: finalDefault may contain other values than extension or\n@@ -3131,7 +3202,6 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n \n         boolean seenType = false;\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -3201,6 +3271,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 else if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else if (LN_NILLABLE.equals(localName))\n                 {\n@@ -3252,9 +3323,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 element.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n-\n         elementContent(element, null, module, cache, reader, false, targetNamespace, seenType);\n-\n         return element;\n     }\n \n@@ -3263,7 +3332,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Reference to a global element declaration or local definition (local definitions cannot be referenced). The\n      * number of occurrences can only be zero or one when xs:element is used within xs:all.\n      */\n-    private XMLParticle elementWithinAllTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final XMLScope scope) throws XMLStreamException, XMLElementException, AbortException\n+\n+    private XMLParticle elementWithinAllTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace, final XMLScope scope)\n+        throws XMLStreamException, XMLElementException, AbortException\n     {\n         String name = null;\n         XMLTypeRef typeRef = null;\n@@ -3274,7 +3345,6 @@ final class XMLSchemaParser extends XMLRepresentation\n         final EnumSet<DerivationMethod> block = EnumSet.copyOf(module.blockDefault);\n         boolean qualified = module.elementQualified;\n         XMLValueConstraint valueConstraint = null;\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -3357,6 +3427,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 else if (LN_REF.equals(localName))\n                 {\n                     // Already got it.\n+\n                 }\n                 else if (LN_MAX_OCCURS.equals(localName))\n                 {\n@@ -3405,23 +3476,21 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n         element.foreignAttributes.putAll(foreignAttributes);\n         foreignAttributes.clear();\n-\n         element.setNillableFlag(nillable);\n         element.getBlock().addAll(block);\n-\n         elementContent(element, ref, module, cache, reader, redefine, targetNamespace, (null != typeRef));\n-\n         return new XMLParticleWithElementTerm(minOccurs, maxOccurs, element, valueConstraint, getFrozenLocation(reader.getLocation()));\n     }\n \n-    private void ensureReferenceType(final QName name, final Location location, final boolean mustExist, final XMLSchemaCache cache) throws AbortException\n+    private void ensureReferenceType(final QName name, final Location location, final boolean mustExist, final XMLSchemaCache cache)\n+        throws AbortException\n     {\n         PreCondition.assertArgumentNotNull(name);\n-\n         if (name.getNamespaceURI().equals(XMLConstants.W3C_XML_SCHEMA_NS_URI))\n         {\n             // Do nothing. This will be caught later if a dangling reference\n             // exists.\n+\n         }\n         else\n         {\n@@ -3439,10 +3508,11 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:enumeration\n      */\n-    private XMLEnumeration enumerationTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+\n+    private XMLEnumeration enumerationTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         final XMLEnumeration enumeration = new XMLEnumeration(simpleType, getFrozenLocation(reader.getLocation()));\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -3456,7 +3526,8 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n                 else if (LN_VALUE.equals(localName))\n                 {\n-                    enumeration.setValue(reader.getAttributeValue(i), m_pms.getPrefixResolverSnapshot());\n+                    enumeration.setValue(reader.getAttributeValue(i),\n+m_pms.getPrefixResolverSnapshot());\n                 }\n                 else\n                 {\n@@ -3472,6 +3543,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 // the api schema model collapses all of the enumerations into a list.\n                 // at least, i think it does. if not, then this should get turned back on.\n //                enumeration.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n+\n             }\n         }\n \n@@ -3524,6 +3596,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -3539,7 +3612,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * xs:extension (complex content) <br/>\n      * We don't return anything because this affects multiple aspects of the complex type.\n      */\n-    private void extensionInComplexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void extensionInComplexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         try\n         {\n@@ -3574,6 +3649,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                     else if (LN_BASE.equals(localName))\n                     {\n                         // Already known.\n+\n                     }\n                     else\n                     {\n@@ -3587,6 +3663,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 else\n                 {\n                     // the only place to put foreign atts is on the parent. we don't do that; discard.\n+\n                 }\n             }\n \n@@ -3733,6 +3810,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                     case XMLStreamConstants.COMMENT:\n                     case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                     {\n+\n                     }\n                     break;\n                     default:\n@@ -3751,7 +3829,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:extension (simple content)\n      */\n-    private void extensionInSimpleContentTag(final XMLType complexType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void extensionInSimpleContentTag(final XMLType complexType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         // When extending simple content we're adding attributes to this complex\n         // type.\n@@ -3775,12 +3855,12 @@ final class XMLSchemaParser extends XMLRepresentation\n                 final String localName = reader.getAttributeLocalName(i);\n                 if (LN_ID.equals(localName))\n                 {\n-\n                     checkID(reader.getAttributeValue(i), reader.getLocation(), reader.getName(), module);\n                 }\n                 else if (LN_BASE.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else\n                 {\n@@ -3875,6 +3955,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -3885,7 +3966,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private RestrictedXPath fieldTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, XMLFieldException, AbortException\n+    private RestrictedXPath fieldTag(final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLFieldException, AbortException\n     {\n         RestrictedXPath xpath = null;\n         final int attributeCount = reader.getAttributeCount();\n@@ -3924,6 +4006,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // ignore foreign attributes (probably the right thing)\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -3976,6 +4059,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -3987,7 +4071,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         return xpath;\n     }\n \n-    private boolean fixed(final String strval, final Location location, final QName elementName) throws SmAttributeUseException\n+    private boolean fixed(final String strval, final Location location, final QName elementName)\n+        throws SmAttributeUseException\n     {\n         try\n         {\n@@ -4002,10 +4087,11 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:fractionDigits\n      */\n-    private XMLFractionDigitsFacet fractionDigitsTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, SmComplexTypeException, AbortException\n+\n+    private XMLFractionDigitsFacet fractionDigitsTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, SmComplexTypeException, AbortException\n     {\n         final XMLFractionDigitsFacet facet = new XMLFractionDigitsFacet(simpleType, getFrozenLocation(reader.getLocation()));\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -4097,6 +4183,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -4111,12 +4198,13 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:group (reference)\n      */\n-    private XMLParticleWithModelGroupTerm groupParticleTag(final XMLScope localScope, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLModelGroupUseException, AbortException\n+\n+    private XMLParticleWithModelGroupTerm groupParticleTag(final XMLScope localScope, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, XMLModelGroupUseException, AbortException\n     {\n         final QName ref;\n         BigInteger minOccurs = BigInteger.ONE;\n         BigInteger maxOccurs = BigInteger.ONE;\n-\n         try\n         {\n             ref = requiredQName(LN_REF, module.isChameleon(), targetNamespace, reader);\n@@ -4148,6 +4236,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n                 else if (LN_REF.equals(localName))\n                 {\n+\n                 }\n                 else\n                 {\n@@ -4162,6 +4251,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // don't think we should modify the thing referred to ...\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -4233,6 +4323,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -4241,14 +4332,15 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         return new XMLParticleWithModelGroupTerm(minOccurs, maxOccurs, modelGroup, getFrozenLocation(reader.getLocation()));\n     }\n \n     /**\n      * xs:group (definition)\n      */\n-    private XMLModelGroup groupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLModelGroupException, AbortException\n+\n+    private XMLModelGroup groupTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, XMLModelGroupException, AbortException\n     {\n         final XMLModelGroup modelGroup;\n         if (!redefine)\n@@ -4286,6 +4378,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else\n                 {\n@@ -4374,6 +4467,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -4382,17 +4476,16 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         if (null == modelGroup.getCompositor())\n         {\n             // Expecting (xs:all | xs:choice | xs:sequence)\n             m_errors.error(new SmUnexpectedEndException(reader.getName(), getFrozenLocation(reader.getLocation())));\n         }\n-\n         return modelGroup;\n     }\n \n-    private void importTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final String targetNamespace) throws XMLStreamException, AbortException\n+    private void importTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         PreCondition.assertArgumentNotNull(module, \"module\");\n         try\n@@ -4436,11 +4529,10 @@ final class XMLSchemaParser extends XMLRepresentation\n                     // at the moment, we don't have a way to report these, unless we change XMLSchemaModule to also have\n                     // an FAMap, and anyway these will get discarded on transition to the formal schema model.\n                     // {any attributes with non-schema namespace}\n+\n                 }\n             }\n-\n             annotationContent(LN_IMPORT, reader, module);\n-\n             if (m_processRepeatedNamespaces || !cache.m_seenNamespaces.contains(namespace))\n             {\n                 parseExternalModule(cache, module, reader.getLocation(), namespace, schemaLocation, ModuleKind.Import);\n@@ -4452,7 +4544,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void includeTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader) throws XMLStreamException, AbortException\n+    private void includeTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader)\n+        throws XMLStreamException, AbortException\n     {\n         final int attributeCount = reader.getAttributeCount();\n         String schemaLocation = null;\n@@ -4483,9 +4576,9 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // same issue as with import tag: no way to let foreign attributes persist.\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n-\n         if (schemaLocation != null)\n         {\n             parseExternalModule(cache, module, reader.getLocation(), null, schemaLocation, ModuleKind.Include);\n@@ -4494,7 +4587,6 @@ final class XMLSchemaParser extends XMLRepresentation\n         {\n             m_errors.error(new SmMissingAttributeException(reader.getName(), new QName(LN_SCHEMA_LOCATION), getFrozenLocation(reader.getLocation())));\n         }\n-\n         annotationContent(LN_INCLUDE, reader, module);\n     }\n \n@@ -4504,6 +4596,7 @@ final class XMLSchemaParser extends XMLRepresentation\n      * This contradicts the API specification. If this gets too troublesome we should copy the prefix mappings to our\n      * own utility and use that to do the namespace lookup.\n      */\n+\n     private boolean isBoundPrefix(final String prefix, final String namespaceURI)\n     {\n         if (null != namespaceURI)\n@@ -4546,6 +4639,7 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Note: StaX uses <code>null</code> for the no-name namespace, but this function also accepts the zero-length\n      * string.\n      */\n+\n     private boolean isGlobal(final String namespaceURI)\n     {\n         return (null == namespaceURI) || XMLConstants.NULL_NS_URI.equals(namespaceURI);\n@@ -4554,20 +4648,20 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Determines whether the namespace specified is the W3C XML Schema namespace.\n      */\n+\n     private boolean isWXS(final String namespaceURI)\n     {\n         return XMLConstants.W3C_XML_SCHEMA_NS_URI.equals(namespaceURI);\n     }\n \n-    private XMLIdentityConstraint keyrefTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLIdentityConstraintException, AbortException\n+    private XMLIdentityConstraint keyrefTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLIdentityConstraintException, AbortException\n     {\n         final XMLIdentityConstraint keyref;\n         try\n         {\n             final QName name = requiredNCName(LN_NAME, targetNamespace, reader);\n-\n             module.registerIdentityConstraintName(name, reader.getLocation());\n-\n             keyref = cache.registerIdentityConstraint(IdentityConstraintKind.KeyRef, name, getFrozenLocation(reader.getLocation()));\n         }\n         catch (final SchemaException e)\n@@ -4586,6 +4680,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else if (LN_REFER.equals(localName))\n                 {\n@@ -4700,6 +4795,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -4715,15 +4811,14 @@ final class XMLSchemaParser extends XMLRepresentation\n         return keyref;\n     }\n \n-    private XMLIdentityConstraint keyTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLIdentityConstraintException, AbortException\n+    private XMLIdentityConstraint keyTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLIdentityConstraintException, AbortException\n     {\n         final XMLIdentityConstraint constraint;\n         try\n         {\n             final QName name = requiredNCName(LN_NAME, targetNamespace, reader);\n-\n             module.registerIdentityConstraintName(name, reader.getLocation());\n-\n             constraint = cache.registerIdentityConstraint(IdentityConstraintKind.Key, name, getFrozenLocation(reader.getLocation()));\n         }\n         catch (final SchemaException e)\n@@ -4742,6 +4837,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else if (LN_ID.equals(localName))\n                 {\n@@ -4843,6 +4939,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -4858,7 +4955,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         return constraint;\n     }\n \n-    private String lang(final String initialValue) throws SimpleTypeException\n+    private String lang(final String initialValue)\n+        throws SimpleTypeException\n     {\n         return validateString(initialValue, NativeType.LANGUAGE);\n     }\n@@ -4866,7 +4964,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:length, xs:maxLength, xs:minLength\n      */\n-    private XMLLength lengthTag(final XMLType type, final boolean minimum, final boolean maximum, final String contextName, final XMLSchemaModule module, final XMLStreamReader reader) throws XMLStreamException, SmComplexTypeException, AbortException\n+\n+    private XMLLength lengthTag(final XMLType type, final boolean minimum, final boolean maximum, final String contextName, final XMLSchemaModule module, final XMLStreamReader reader)\n+        throws XMLStreamException, SmComplexTypeException, AbortException\n     {\n         final XMLLength length = new XMLLength(type, getFrozenLocation(reader.getLocation()));\n         final int attributeCount = reader.getAttributeCount();\n@@ -4973,6 +5073,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -4987,7 +5088,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:list\n      */\n-    private void listTag(final XMLType listType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void listTag(final XMLType listType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         listType.setBase(ANY_SIMPLE_TYPE, DerivationMethod.List);\n \n@@ -5035,6 +5138,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // I don't think we want foreign attributes here, do we?\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -5101,6 +5205,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -5109,7 +5214,6 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         if (null == listType.itemRef)\n         {\n             m_errors.error(new SmSimpleTypeListException(getFrozenLocation(reader.getLocation())));\n@@ -5128,7 +5232,8 @@ final class XMLSchemaParser extends XMLRepresentation\n      * @param elementName\n      *            The element name containing the attribute.\n      */\n-    private BigInteger maxOccurs(final String strval, final boolean unbounded, final Location location, final QName elementName) \n+\n+    private BigInteger maxOccurs(final String strval, final boolean unbounded, final Location location, final QName elementName)\n         throws AbortException\n     {\n         if (unbounded)\n@@ -5152,10 +5257,11 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:maxExclusive, xs:maxInclusive, xs:minExclusive, xs:minInclusive\n      */\n-    private XMLMinMaxFacet minmaxTag(final XMLType simpleType, final FacetKind kind, final String elementName, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, SmComplexTypeException, AbortException\n+\n+    private XMLMinMaxFacet minmaxTag(final XMLType simpleType, final FacetKind kind, final String elementName, final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, SmComplexTypeException, AbortException\n     {\n         final XMLMinMaxFacet minmax = new XMLMinMaxFacet(kind, elementName, simpleType, getFrozenLocation(reader.getLocation()));\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -5239,6 +5345,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -5260,7 +5367,8 @@ final class XMLSchemaParser extends XMLRepresentation\n      * @param elementName\n      *            The element name containing the attribute.\n      */\n-    private BigInteger minOccurs(final String strval, final Location location, QName elementName) \n+\n+    private BigInteger minOccurs(final String strval, final Location location, QName elementName)\n         throws AbortException\n     {\n         try\n@@ -5269,12 +5377,15 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n         catch (final SimpleTypeException e)\n         {\n-            m_errors.error(new SmAttributeUseException(elementName, new QName(LN_MIN_OCCURS), getFrozenLocation(location), e));\n+            m_errors.error(new SmAttributeUseException(elementName,\n+                new QName(LN_MIN_OCCURS),\n+                    getFrozenLocation(location),\n+                        e));\n             return BigInteger.ONE;\n         }\n     }\n \n-    private String name(final String initialValue) \n+    private String name(final String initialValue)\n         throws SimpleTypeException\n     {\n         final SimpleType atomicType = bootstrap.getAtomicType(NativeType.NCNAME);\n@@ -5291,11 +5402,10 @@ final class XMLSchemaParser extends XMLRepresentation\n         return null;\n     }\n \n-    private NamespaceConstraint namespaces(final String initialValue, final String targetNamespace) \n+    private NamespaceConstraint namespaces(final String initialValue, final String targetNamespace)\n         throws SimpleTypeException\n     {\n         final String strval = initialValue.trim();\n-\n         if (strval.length() == 0)\n         {\n             // A reading of the specification might suggest an empty set\n@@ -5343,27 +5453,29 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private BigInteger nonNegativeInteger(final String initialValue) \n+    private BigInteger nonNegativeInteger(final String initialValue)\n         throws SimpleTypeException\n     {\n-      final SimpleType atomicType = bootstrap.getAtomicType(NativeType.NON_NEGATIVE_INTEGER);\n-      try\n-      {\n-          final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getInteger(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, atomicType, dte);\n-      }\n-      return null;\n+        final SimpleType atomicType = bootstrap.getAtomicType(NativeType.NON_NEGATIVE_INTEGER);\n+        try\n+        {\n+            final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n+            if (value.size() > 0)\n+                return atoms.getInteger(value.get(0));\n+        }\n+        catch (DatatypeException dte)\n+        {\n+            throw new SimpleTypeException(initialValue, atomicType, dte);\n+        }\n+        return null;\n     }\n \n     /**\n      * xs:notation\n      */\n-    private XMLNotation notationTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLNotationException, AbortException\n+\n+    private XMLNotation notationTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLNotationException, AbortException\n     {\n         final XMLNotation notation;\n         try\n@@ -5386,6 +5498,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_NAME.equals(localName))\n                 {\n                     // Already have it.\n+\n                 }\n                 else if (LN_PUBLIC.equals(localName))\n                 {\n@@ -5420,19 +5533,17 @@ final class XMLSchemaParser extends XMLRepresentation\n                 notation.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n-\n         if (null == notation.getPublicId() && null == notation.getSystemId())\n         {\n             // Either public or system should be defined.\n             m_errors.error(new SmMissingAttributeException(reader.getName(), new QName(LN_PUBLIC), getFrozenLocation(reader.getLocation())));\n         }\n-\n         annotationContent(LN_NOTATION, reader, module);\n-\n         return notation;\n     }\n \n-    private QName optionalQName(final String initialValue, final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader) throws SmComplexTypeException\n+    private QName optionalQName(final String initialValue, final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader)\n+        throws SmComplexTypeException\n     {\n         if (null != initialValue)\n         {\n@@ -5462,10 +5573,10 @@ final class XMLSchemaParser extends XMLRepresentation\n         return null;\n     }\n \n-    private void parseExternalModule(final XMLSchemaCache cache, final XMLSchemaModule parent, final Location location, final String namespace, final String schemaLocation, final ModuleKind moduleKind) throws AbortException\n+    private void parseExternalModule(final XMLSchemaCache cache, final XMLSchemaModule parent, final Location location, final String namespace, final String schemaLocation, final ModuleKind moduleKind)\n+        throws AbortException\n     {\n //        PreCondition.assertArgumentNotNull(schemaLocation, \"schemaLocation\");\n-\n         if (null == m_catalog)\n         {\n             throw new AssertionError(\"catalog required for include, import or redefine.\");\n@@ -5474,7 +5585,10 @@ final class XMLSchemaParser extends XMLRepresentation\n         String parentSystemId = parent.getSystemId();\n         if (parentSystemId == null)\n             parentSystemId = \"\";\n-        final URI catalogURI = m_catalog.resolveNamespaceAndSchemaLocation(StringToURIParser.parse(parentSystemId), namespace, schemaLocation);\n+\n+        final URI catalogURI = m_catalog.resolveNamespaceAndSchemaLocation(StringToURIParser.parse(parentSystemId),\n+namespace,\n+schemaLocation);\n \n         // If the catalogURI is null, we will not parse (obviously), and we will not raise an error.\n         // If the missing schema is a problem, that problem will be evident during component resolution,\n@@ -5487,8 +5601,10 @@ final class XMLSchemaParser extends XMLRepresentation\n                 {\n                     throw new AssertionError(\"resolver required for include, import or redefine.\");\n                 }\n+\n                 final InputStream source = m_resolver.resolveInputStream(catalogURI);\n                 final XMLSchemaModule module = new XMLSchemaModule(parent, schemaLocation, catalogURI.toString());\n+\n                 switch (moduleKind)\n                 {\n                     case Include:\n@@ -5511,12 +5627,14 @@ final class XMLSchemaParser extends XMLRepresentation\n                         throw new AssertionError(moduleKind);\n                     }\n                 }\n+\n                 final XMLSchemaParser parser = new XMLSchemaParser(bootstrap, m_errors, m_catalog, m_resolver, m_processRepeatedNamespaces);\n                 parser.parse(catalogURI.toString(), source, cache, module);\n             }\n             catch (final IOException e)\n             {\n                 // Do nothing. It's not an error.\n+\n             }\n         }\n     }\n@@ -5524,10 +5642,11 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:pattern\n      */\n-    private XMLPatternFacet patternTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+\n+    private XMLPatternFacet patternTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         final XMLPatternFacet pattern = new XMLPatternFacet(simpleType, getFrozenLocation(reader.getLocation()));\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -5607,6 +5726,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -5618,24 +5738,25 @@ final class XMLSchemaParser extends XMLRepresentation\n         return pattern;\n     }\n \n-    private BigInteger positiveInteger(final String initialValue) \n+    private BigInteger positiveInteger(final String initialValue)\n         throws SimpleTypeException\n     {\n-      final SimpleType atomicType = bootstrap.getAtomicType(NativeType.POSITIVE_INTEGER);\n-      try\n-      {\n-          final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getInteger(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, atomicType, dte);\n-      }\n-      return null;\n+        final SimpleType atomicType = bootstrap.getAtomicType(NativeType.POSITIVE_INTEGER);\n+        try\n+        {\n+            final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n+            if (value.size() > 0)\n+                return atoms.getInteger(value.get(0));\n+        }\n+        catch (DatatypeException dte)\n+        {\n+            throw new SimpleTypeException(initialValue, atomicType, dte);\n+        }\n+        return null;\n     }\n \n-    private ProcessContentsMode processContents(final String strval) throws SimpleTypeException\n+    private ProcessContentsMode processContents(final String strval)\n+        throws SimpleTypeException\n     {\n         if (\"lax\".equals(strval))\n         {\n@@ -5656,7 +5777,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private boolean qualified(final String strval) throws SimpleTypeException\n+    private boolean qualified(final String strval)\n+        throws SimpleTypeException\n     {\n         if (\"qualified\".equals(strval))\n         {\n@@ -5673,7 +5795,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void redefineTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final String targetNamespace) throws XMLStreamException, AbortException\n+    private void redefineTag(final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         {\n             String schemaLocation = null;\n@@ -5706,9 +5829,9 @@ final class XMLSchemaParser extends XMLRepresentation\n                     // like import and include, there's no way to expose these in the end.\n                     // we might reconsider if we want to have the modules available somehow.\n                     // {any attributes with non-schema namespace}\n+\n                 }\n             }\n-\n             if (schemaLocation != null)\n             {\n                 parseExternalModule(cache, module, reader.getLocation(), null, schemaLocation, ModuleKind.Redefine);\n@@ -5816,6 +5939,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -5826,7 +5950,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private QName referenceOptional(final XMLStreamReader reader, final String localName, final XMLSchemaModule module, final String targetNamespace) throws AbortException\n+    private QName referenceOptional(final XMLStreamReader reader, final String localName, final XMLSchemaModule module, final String targetNamespace)\n+        throws AbortException\n     {\n         final String srcval = reader.getAttributeValue(null, localName);\n         if (null != srcval)\n@@ -5862,37 +5987,44 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void reportAttributeInGlobalNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location) throws AbortException\n+    private void reportAttributeInGlobalNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location)\n+        throws AbortException\n     {\n         m_errors.error(new CvcUnexpectedAttributeException(elementName, attributeName, location));\n     }\n \n-    private void reportAttributeInWxsNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location) throws AbortException\n+    private void reportAttributeInWxsNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location)\n+        throws AbortException\n     {\n         m_errors.error(new CvcUnexpectedAttributeException(elementName, attributeName, location));\n     }\n \n-    private void reportAttributeInXmlNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location) throws AbortException\n+    private void reportAttributeInXmlNamespace(final QName elementName, final QName attributeName, final SrcFrozenLocation location)\n+        throws AbortException\n     {\n         m_errors.error(new CvcUnexpectedAttributeException(elementName, attributeName, location));\n     }\n \n-    private void reportAttributeUseError(final QName elementName, final QName attributeName, final Location location, final SimpleTypeException cause) throws AbortException\n+    private void reportAttributeUseError(final QName elementName, final QName attributeName, final Location location, final SimpleTypeException cause)\n+        throws AbortException\n     {\n         m_errors.error(new SmAttributeUseException(elementName, attributeName, getFrozenLocation(location), cause));\n     }\n \n-    private void reportUnexpectedElementTag(final String contextName, final QName unexpectedName, final Location location) throws AbortException\n+    private void reportUnexpectedElementTag(final String contextName, final QName unexpectedName, final Location location)\n+        throws AbortException\n     {\n         m_errors.error(new SmUnexpectedElementException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), getFrozenLocation(location), unexpectedName, getFrozenLocation(location)));\n     }\n \n-    private void reportUnexpectedEnd(final String contextName, final Location location) throws AbortException\n+    private void reportUnexpectedEnd(final String contextName, final Location location)\n+        throws AbortException\n     {\n         m_errors.error(new SmUnexpectedEndException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), getFrozenLocation(location)));\n     }\n \n-    private void reportUnexpectedNonWhiteSpaceTextInElementOnlyContent(final String contextName, final String text, final Location location) throws AbortException\n+    private void reportUnexpectedNonWhiteSpaceTextInElementOnlyContent(final String contextName, final String text, final Location location)\n+        throws AbortException\n     {\n         m_errors.error(new CvcUnexpectedNonWhiteSpaceTextInElementOnlyContentException(new QName(XMLConstants.W3C_XML_SCHEMA_NS_URI, contextName), text, getFrozenLocation(location)));\n     }\n@@ -5902,7 +6034,8 @@ final class XMLSchemaParser extends XMLRepresentation\n      * The \"name\" attribute is validated to exist and to be of type xs:NCName. <br/>\n      * The name computed adopts the targetNamespace name of the module being parsed.\n      */\n-    private QName requiredNCName(final String attributeName, final String targetNamespace, final XMLStreamReader reader) \n+\n+    private QName requiredNCName(final String attributeName, final String targetNamespace, final XMLStreamReader reader)\n         throws SmComplexTypeException\n     {\n         final String name = reader.getAttributeValue(null, attributeName);\n@@ -5927,7 +6060,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * Obtains the required {@link #LN_BASE} or {@link #LN_REF} attribute as an expanded-QName.\n      */\n-    private QName requiredQName(final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader) throws SmComplexTypeException\n+\n+    private QName requiredQName(final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader)\n+        throws SmComplexTypeException\n     {\n         final String strval = reader.getAttributeValue(null, attributeName);\n         if (null != strval)\n@@ -5940,9 +6075,11 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private QName resolveUsingTargetNamespace(final String name, final String targetNamespace, final NamespaceContext ctxt) throws SimpleTypeException\n+    private QName resolveUsingTargetNamespace(final String name, final String targetNamespace, final NamespaceContext ctxt)\n+        throws SimpleTypeException\n     {\n         PreCondition.assertArgumentNotNull(name);\n+\n         final String prefix = getPrefix(name);\n         if (prefix.length() > 0)\n         {\n@@ -5956,9 +6093,11 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private QName resolveUsingXMLNamespaces(final String initialValue, final NamespaceContext ctxt) throws SimpleTypeException\n+    private QName resolveUsingXMLNamespaces(final String initialValue, final NamespaceContext ctxt)\n+        throws SimpleTypeException\n     {\n         PreCondition.assertArgumentNotNull(initialValue);\n+\n         final String prefix = getPrefix(initialValue);\n         if (prefix.length() > 0)\n         {\n@@ -5978,7 +6117,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * xs:restriction (in xs:complexContent) <br/>\n      * We don't return anything because this affects multiple aspects of the complex type.\n      */\n-    private void restrictionInComplexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void restrictionInComplexContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         if (redefine)\n         {\n@@ -6014,6 +6155,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_BASE.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else if (LN_ID.equals(localName))\n                 {\n@@ -6161,6 +6303,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -6174,18 +6317,20 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:restriction (simple content)\n      */\n-    private void restrictionInSimpleContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void restrictionInSimpleContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         // We're restriction a simple type by adding facets so it makes sense\n         // that we are going to need an\n         // anonymous type to hang the facets from\n         complexType.simpleType = cache.registerAnonymousType(new XMLScope(complexType), getFrozenLocation(reader.getLocation()));\n         complexType.simpleType.setSimpleFlag();\n-\n         try\n         {\n             final QName baseName = requiredQName(LN_BASE, module.isChameleon(), targetNamespace, reader);\n             ensureReferenceType(baseName, reader.getLocation(), redefine, cache);\n+\n             final XMLTypeRef baseType = new XMLTypeRef(baseName);\n             complexType.setBase(baseType, DerivationMethod.Restriction);\n         }\n@@ -6204,6 +6349,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_BASE.equals(localName))\n                 {\n                     // Aleady known.\n+\n                 }\n                 else if (LN_ID.equals(localName))\n                 {\n@@ -6428,6 +6574,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -6441,13 +6588,17 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:restriction (simple type)\n      */\n-    private void restrictionTag(final XMLType simpleType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void restrictionTag(final XMLType simpleType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         if (!redefine)\n         {\n+\n         }\n         else\n         {\n+\n         }\n \n         final int attributeCount = reader.getAttributeCount();\n@@ -6490,6 +6641,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // i'm pretty sure we don't want this. ?\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -6500,7 +6652,6 @@ final class XMLSchemaParser extends XMLRepresentation\n         boolean missingLength = true;\n         boolean missingMinLength = true;\n         boolean missingMaxLength = true;\n-\n         boolean firstElement = true;\n         boolean done = false;\n         while (!done)\n@@ -6695,6 +6846,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -6705,7 +6857,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void schemaTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+    private void schemaTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n@@ -6816,14 +6969,14 @@ final class XMLSchemaParser extends XMLRepresentation\n                 // sadly, because this is a module, it's the same problem as for\n                 // import and include and redefine, so we can't report foreign attributes usefully.\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n-\n         if (module.isRedefine() || module.isInclude())\n         {\n             if (module.getTargetNamespace() != null)\n             {\n-                if ((module.getContainingModule().getTargetNamespace() == null) || (!module.getContainingModule().getTargetNamespace().equals(module.getTargetNamespace())))\n+                if ( (module.getContainingModule().getTargetNamespace() == null) || (!module.getContainingModule().getTargetNamespace().equals(module.getTargetNamespace())))\n                 {\n                     if (module.isRedefine())\n                     {\n@@ -6841,8 +6994,8 @@ final class XMLSchemaParser extends XMLRepresentation\n \n         // Knowing the local targetNamespace, and the ancestors of the module,\n         // we can compute the targetNamespace.\n-        final String targetNamespace = module.computeTargetNamespace();\n \n+        final String targetNamespace = module.computeTargetNamespace();\n         if (module.getTargetNamespace() != null)\n         {\n             cache.m_seenNamespaces.add(module.getTargetNamespace());\n@@ -6991,6 +7144,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -7001,7 +7155,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private RestrictedXPath selectorTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, XMLSelectorException, AbortException\n+    private RestrictedXPath selectorTag(final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLSelectorException, AbortException\n     {\n         RestrictedXPath xpath = null;\n         final int attributeCount = reader.getAttributeCount();\n@@ -7047,6 +7202,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // nowhere to put foreign attributes.\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -7099,6 +7255,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -7113,7 +7270,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:simpleContent\n      */\n-    private void simpleContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void simpleContentTag(final XMLType complexType, final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         complexType.m_contentKind = XMLContentTypeKind.Simple;\n \n@@ -7140,6 +7299,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             else\n             {\n                 // the only place to put foreign attributes is the parent. we don't do that; discard.\n+\n             }\n         }\n \n@@ -7209,6 +7369,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -7223,7 +7384,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Content for an xs:simpleType (either global or local definition). <br>\n      * Content: (xs:annotation?, (xs:restriction | xs:list | xs:union))\n      */\n-    private void simpleTypeContentTag(final XMLType simpleType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private void simpleTypeContentTag(final XMLType simpleType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         // Derivation property must be null so that we check that we got the\n         // required child elements.\n@@ -7296,6 +7459,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n                     // Ignore.\n+\n                 }\n                 break;\n                 default:\n@@ -7304,7 +7468,6 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         if (missingRLU)\n         {\n             // Expecting xs:restriction | xs:list | xs:union\n@@ -7315,7 +7478,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:simpleType (global definition)\n      */\n-    private XMLType simpleTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace) throws XMLStreamException, XMLSimpleTypeException, AbortException\n+\n+    private XMLType simpleTypeGlobalTag(final XMLStreamReader reader, final XMLSchemaCache cache, final XMLSchemaModule module, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, XMLSimpleTypeException, AbortException\n     {\n         final XMLType simpleType;\n         if (!redefine)\n@@ -7369,6 +7534,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 else if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else\n                 {\n@@ -7384,12 +7550,13 @@ final class XMLSchemaParser extends XMLRepresentation\n                 simpleType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n-\n         if (!redefine)\n         {\n+\n         }\n         else\n         {\n+\n         }\n         simpleTypeContentTag(simpleType, module, reader, cache, redefine, targetNamespace);\n         return simpleType;\n@@ -7398,7 +7565,9 @@ final class XMLSchemaParser extends XMLRepresentation\n     /**\n      * xs:simpleType (local definition)\n      */\n-    private XMLTypeRef simpleTypeLocalTag(final XMLScope scope, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+\n+    private XMLTypeRef simpleTypeLocalTag(final XMLScope scope, final XMLSchemaCache cache, final XMLSchemaModule module, final XMLStreamReader reader, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         final XMLType simpleType = cache.registerAnonymousType(scope, getFrozenLocation(reader.getLocation()));\n         simpleType.setSimpleFlag();\n@@ -7428,19 +7597,18 @@ final class XMLSchemaParser extends XMLRepresentation\n                 simpleType.foreignAttributes.put(reader.getAttributeName(i), reader.getAttributeValue(i));\n             }\n         }\n-\n         simpleTypeContentTag(simpleType, module, reader, cache, redefine, targetNamespace);\n-\n         return new XMLTypeRef(simpleType);\n     }\n \n     /**\n      * Skips the remaining content and end element (used during development).\n      */\n-    private void skipTag(final XMLStreamReader reader) throws XMLStreamException\n+\n+    private void skipTag(final XMLStreamReader reader)\n+        throws XMLStreamException\n     {\n         boolean done = false;\n-\n         while (!done)\n         {\n             final int event = reader.next();\n@@ -7459,14 +7627,17 @@ final class XMLSchemaParser extends XMLRepresentation\n                 break;\n                 case XMLStreamConstants.CHARACTERS:\n                 {\n+\n                 }\n                 break;\n                 case XMLStreamConstants.COMMENT:\n                 {\n+\n                 }\n                 break;\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -7477,32 +7648,33 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private String token(final String initialValue) \n+    private String token(final String initialValue)\n         throws SimpleTypeException\n     {\n         // this is really kinda silly, you know.  major overkill to insure\n         // that whitespace is handled.\n-      final SimpleType atomicType = bootstrap.getAtomicType(NativeType.TOKEN);\n-      try\n-      {\n-          final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getString(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, atomicType, dte);\n-      }\n-      return null;\n+        final SimpleType atomicType = bootstrap.getAtomicType(NativeType.TOKEN);\n+        try\n+        {\n+            final List<XmlAtom> value = atomicType.validate(initialValue, atoms);\n+            if (value.size() > 0)\n+                return atoms.getString(value.get(0));\n+        }\n+        catch (DatatypeException dte)\n+        {\n+            throw new SimpleTypeException(initialValue, atomicType, dte);\n+        }\n+        return null;\n     }\n \n     /**\n      * xs:totalDigits\n      */\n-    private XMLTotalDigitsFacet totalDigitsTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, AbortException\n+\n+    private XMLTotalDigitsFacet totalDigitsTag(final XMLType simpleType, final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, AbortException\n     {\n         final XMLTotalDigitsFacet facet = new XMLTotalDigitsFacet(simpleType, getFrozenLocation(reader.getLocation()));\n-\n         final int attributeCount = reader.getAttributeCount();\n         for (int i = 0; i < attributeCount; i++)\n         {\n@@ -7601,6 +7773,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -7612,7 +7785,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         return facet;\n     }\n \n-    private boolean trueOrFalse(final String initialValue) throws SimpleTypeException\n+    private boolean trueOrFalse(final String initialValue)\n+        throws SimpleTypeException\n     {\n         // this one's actually worthwhile, though.\n         final SimpleType type = bootstrap.getAtomicType(NativeType.BOOLEAN);\n@@ -7633,7 +7807,9 @@ final class XMLSchemaParser extends XMLRepresentation\n      * Obtains a {@link #LN_TYPE}, {@link #LN_ITEM_TYPE} or tokenized {@link #LN_MEMBER_TYPES} attribute value as type\n      * reference.\n      */\n-    private XMLTypeRef typeRef(final String initialValue, final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader) throws SmComplexTypeException\n+\n+    private XMLTypeRef typeRef(final String initialValue, final String attributeName, final boolean isChameleon, final String targetNamespace, final XMLStreamReader reader)\n+        throws SmComplexTypeException\n     {\n         if (null != initialValue)\n         {\n@@ -7645,7 +7821,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private void unionTag(final XMLType unionType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace) throws XMLStreamException, AbortException\n+    private void unionTag(final XMLType unionType, final XMLSchemaModule module, final XMLStreamReader reader, final XMLSchemaCache cache, final boolean redefine, final String targetNamespace)\n+        throws XMLStreamException, AbortException\n     {\n         unionType.setBase(ANY_SIMPLE_TYPE, DerivationMethod.Union);\n \n@@ -7672,7 +7849,11 @@ final class XMLSchemaParser extends XMLRepresentation\n                         final String token = tokenizer.nextToken();\n                         try\n                         {\n-                            final XMLTypeRef memberType = typeRef(token, LN_MEMBER_TYPES, module.isChameleon(), targetNamespace, reader);\n+                            final XMLTypeRef memberType = typeRef(token,\n+                                LN_MEMBER_TYPES,\n+                                    module.isChameleon(),\n+                                        targetNamespace,\n+                                            reader);\n                             ensureReferenceType(memberType.getName(), reader.getLocation(), redefine, cache);\n                             unionType.memberRefs.add(memberType);\n                         }\n@@ -7755,6 +7936,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -7769,7 +7951,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private XMLIdentityConstraint uniqueTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module) throws XMLStreamException, XMLIdentityConstraintException, AbortException\n+    private XMLIdentityConstraint uniqueTag(final XMLSchemaCache cache, final XMLStreamReader reader, final String targetNamespace, final XMLSchemaModule module)\n+        throws XMLStreamException, XMLIdentityConstraintException, AbortException\n     {\n         final XMLIdentityConstraint unique;\n         try\n@@ -7794,6 +7977,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if (LN_NAME.equals(localName))\n                 {\n                     // Already known.\n+\n                 }\n                 else if (LN_ID.equals(localName))\n                 {\n@@ -7895,6 +8079,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -7910,7 +8095,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         return unique;\n     }\n \n-    private XMLCardinality use(final String strval) throws SimpleTypeException\n+    private XMLCardinality use(final String strval)\n+        throws SimpleTypeException\n     {\n         if (\"optional\".equals(strval))\n         {\n@@ -7931,25 +8117,26 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n     }\n \n-    private String validateString(final String initialValue, final NativeType derivedType) \n+    private String validateString(final String initialValue, final NativeType derivedType)\n         throws SimpleTypeException\n     {\n         // under what circumstances does one *need* to validate a string?\n-      final SimpleType type = bootstrap.getAtomicType(derivedType);\n-      try\n-      {\n-          final List<XmlAtom> value = type.validate(initialValue, atoms);\n-          if (value.size() > 0)\n-              return atoms.getString(value.get(0));\n-      }\n-      catch (DatatypeException dte)\n-      {\n-          throw new SimpleTypeException(initialValue, type, dte);\n-      }\n-      return null;\n+        final SimpleType type = bootstrap.getAtomicType(derivedType);\n+        try\n+        {\n+            final List<XmlAtom> value = type.validate(initialValue, atoms);\n+            if (value.size() > 0)\n+                return atoms.getString(value.get(0));\n+        }\n+        catch (DatatypeException dte)\n+        {\n+            throw new SimpleTypeException(initialValue, type, dte);\n+        }\n+        return null;\n     }\n \n-    private WhiteSpacePolicy whiteSpaceTag(final XMLStreamReader reader, final XMLSchemaModule module) throws XMLStreamException, SmComplexTypeException, AbortException\n+    private WhiteSpacePolicy whiteSpaceTag(final XMLStreamReader reader, final XMLSchemaModule module)\n+        throws XMLStreamException, SmComplexTypeException, AbortException\n     {\n         WhiteSpacePolicy policy = WhiteSpacePolicy.PRESERVE;\n         final int attributeCount = reader.getAttributeCount();\n@@ -7995,6 +8182,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                     // nor checking whether ancestors have a fixed whitespace policy.\n                     //\n                     // Which is what this empty block now achieves. Win?\n+\n                 }\n                 else\n                 {\n@@ -8009,6 +8197,7 @@ final class XMLSchemaParser extends XMLRepresentation\n             {\n                 // pointless to preserve; there's no place to surface these.\n                 // {any attributes with non-schema namespace}\n+\n             }\n         }\n \n@@ -8061,6 +8250,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 case XMLStreamConstants.COMMENT:\n                 case XMLStreamConstants.PROCESSING_INSTRUCTION:\n                 {\n+\n                 }\n                 break;\n                 default:\n@@ -8072,7 +8262,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         return policy;\n     }\n \n-    private RestrictedXPath xpath(final String strval, final Location location, final QName elementName) throws SmAttributeUseException\n+    private RestrictedXPath xpath(final String strval, final Location location, final QName elementName)\n+        throws SmAttributeUseException\n     {\n         try\n         {\n@@ -8101,7 +8292,6 @@ final class XMLSchemaParser extends XMLRepresentation\n         if (null != strval)\n         {\n             final int n = strval.length();\n-\n             for (int i = 0; i < n; i++)\n             {\n                 final char ch = strval.charAt(i);\n@@ -8110,6 +8300,7 @@ final class XMLSchemaParser extends XMLRepresentation\n                 if ((ch == 0x20) || (ch == 0x09) || (ch == 0xD) || (ch == 0xA))\n                 {\n                     // Try the next one, all must be whiteSpace.\n+\n                 }\n                 else\n                 {\n@@ -8117,17 +8308,16 @@ final class XMLSchemaParser extends XMLRepresentation\n                 }\n             }\n         }\n-\n         return true;\n     }\n \n     /**\n      * (xs:annotation?, xs:simpleType)\n      */\n+\n     private static ContentModelTable<String> makeAttributeTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_SIMPLE_TYPE, ContentModelTable.END);\n@@ -8136,17 +8326,14 @@ final class XMLSchemaParser extends XMLRepresentation\n         final HashMap<String, Integer> ONE = new HashMap<String, Integer>();\n         ONE.put(LN_SIMPLE_TYPE, ContentModelTable.END);\n         ONE.put(EPSILON, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n-\n         return table;\n     }\n \n     private static ContentModelTable<String> makeComplexContentTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_RESTRICTION, ContentModelTable.END);\n@@ -8155,17 +8342,14 @@ final class XMLSchemaParser extends XMLRepresentation\n         final HashMap<String, Integer> ONE = new HashMap<String, Integer>();\n         ONE.put(LN_RESTRICTION, ContentModelTable.END);\n         ONE.put(LN_EXTENSION, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n-\n         return table;\n     }\n \n     private static ContentModelTable<String> makeComplexTypeTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_SIMPLE_CONTENT, ContentModelTable.END);\n@@ -8197,18 +8381,15 @@ final class XMLSchemaParser extends XMLRepresentation\n         TWO.put(LN_ATTRIBUTE_GROUP, 2);\n         TWO.put(LN_ANY_ATTRIBUTE, ContentModelTable.END);\n         TWO.put(EPSILON, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n         table.put(2, TWO);\n-\n         return table;\n     }\n \n     private static ContentModelTable<String> makeExtensionInComplexContentTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_GROUP, 2);\n@@ -8241,19 +8422,16 @@ final class XMLSchemaParser extends XMLRepresentation\n         THREE.put(LN_ATTRIBUTE_GROUP, 3);\n         THREE.put(LN_ANY_ATTRIBUTE, ContentModelTable.END);\n         THREE.put(EPSILON, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n         table.put(2, TWO);\n         table.put(3, THREE);\n-\n         return table;\n     }\n \n     private static ContentModelTable<String> makeExtensionInSimpleContentTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_ATTRIBUTE, 1);\n@@ -8266,17 +8444,14 @@ final class XMLSchemaParser extends XMLRepresentation\n         ONE.put(LN_ATTRIBUTE_GROUP, 1);\n         ONE.put(LN_ANY_ATTRIBUTE, ContentModelTable.END);\n         ONE.put(EPSILON, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n-\n         return table;\n     }\n \n     private static ContentModelTable<String> makeRestrictionInComplexContentTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_GROUP, 2);\n@@ -8309,19 +8484,16 @@ final class XMLSchemaParser extends XMLRepresentation\n         THREE.put(LN_ATTRIBUTE_GROUP, 3);\n         THREE.put(LN_ANY_ATTRIBUTE, ContentModelTable.END);\n         THREE.put(EPSILON, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n         table.put(2, TWO);\n         table.put(3, THREE);\n-\n         return table;\n     }\n \n     private static ContentModelTable<String> makeRestrictionInSimpleContentTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_SIMPLE_TYPE, 2);\n@@ -8384,19 +8556,16 @@ final class XMLSchemaParser extends XMLRepresentation\n         THREE.put(LN_ATTRIBUTE_GROUP, 3);\n         THREE.put(LN_ANY_ATTRIBUTE, ContentModelTable.END);\n         THREE.put(EPSILON, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n         table.put(2, TWO);\n         table.put(3, THREE);\n-\n         return table;\n     }\n \n     private static ContentModelTable<String> makeSimpleContentTable()\n     {\n         final ContentModelTable<String> table = new ContentModelTable<String>();\n-\n         final HashMap<String, Integer> ZERO = new HashMap<String, Integer>();\n         ZERO.put(LN_ANNOTATION, 1);\n         ZERO.put(LN_RESTRICTION, ContentModelTable.END);\n@@ -8405,10 +8574,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         final HashMap<String, Integer> ONE = new HashMap<String, Integer>();\n         ONE.put(LN_RESTRICTION, ContentModelTable.END);\n         ONE.put(LN_EXTENSION, ContentModelTable.END);\n-\n         table.put(0, ZERO);\n         table.put(1, ONE);\n-\n         return table;\n     }\n \n@@ -8419,6 +8586,7 @@ final class XMLSchemaParser extends XMLRepresentation\n      * @param qualifiedName\n      *            The lexical xs:QName.\n      */\n+\n     private static String getLocalName(final String qualifiedName)\n     {\n         return qualifiedName.substring(qualifiedName.indexOf(\":\") + 1);\n@@ -8431,6 +8599,7 @@ final class XMLSchemaParser extends XMLRepresentation\n      * @param qualifiedName\n      *            The lexical xs:QName.\n      */\n+\n     private static String getPrefix(final String qualifiedName)\n     {\n         final int index = qualifiedName.indexOf(':');\n@@ -8447,36 +8616,25 @@ final class XMLSchemaParser extends XMLRepresentation\n     private static final ContentModelTable<String> attributeTable = makeAttributeTable();\n     private static final ContentModelTable<String> complexContentTable = makeComplexContentTable();\n     private static final ContentModelTable<String> complexTypeTable = makeComplexTypeTable();\n-\n     private static final String EPSILON = \"\";\n     private static final ContentModelTable<String> extensionInComplexContentTable = makeExtensionInComplexContentTable();\n     private static final ContentModelTable<String> extensionInSimpleContentTable = makeExtensionInSimpleContentTable();\n     private static final ContentModelTable<String> restrictionInComplexContentTable = makeRestrictionInComplexContentTable();\n     private static final ContentModelTable<String> restrictionInSimpleContentTable = makeRestrictionInSimpleContentTable();\n     private static final ContentModelTable<String> simpleContentTable = makeSimpleContentTable();\n-\n     private final FAMap foreignAttributes = new FAMap();\n-\n     private final XMLTypeRef ANY_SIMPLE_TYPE;\n     private final XMLTypeRef ANY_TYPE;\n-\n     private final CanonicalAtomBridge atoms;\n-    \n     private final ComponentProvider bootstrap;\n-\n     private final SchemaCatalog m_catalog;\n-\n     private final SchemaExceptionHandler m_errors;\n-\n     private final PrefixMappingSupport m_pms;\n-\n     private final boolean m_processRepeatedNamespaces;\n-\n     private final CatalogResolver m_resolver;\n \n     /**\n      * Factory is required for\n      */\n     private final RestrictedXPathParser m_xp;\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 559
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "177",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/371/XMLSchemaParser.java\nindex 1bd055728dc..677a323f1b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/371/XMLSchemaParser.java\n@@ -172,8 +172,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n         else\n         {\n-        \t// For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n-        \t// request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n+        // For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n+         // request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n     \t\tString computedTns = module.computeTargetNamespace();\n         \tHashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);\n         \tif(tnsSet != null)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "177",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/371/XMLSchemaParser.java\nindex 1bd055728dc..c07db83a485 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/371/XMLSchemaParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/371/XMLSchemaParser.java\n@@ -172,8 +172,8 @@ final class XMLSchemaParser extends XMLRepresentation\n         }\n         else\n         {\n-        \t// For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n-        \t// request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n+// For chameleons, we only want to parse them into a particular namespace once.  Subsequent\n+// request to parse them into that namespace should be ignored (i.e. we're going to return from this code block).\n     \t\tString computedTns = module.computeTargetNamespace();\n         \tHashSet<String> tnsSet = cache.m_seenChameleonsLocation2Tns.get(systemId);\n         \tif(tnsSet != null)\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}