{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2261",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2261/NodeLabelsField.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2261/NodeLabelsField.java\nindex 69aae090352..3c587ad1096 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2261/NodeLabelsField.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2261/NodeLabelsField.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import org.neo4j.kernel.impl.store.record.DynamicRecord;\n@@ -40,68 +41,67 @@ import org.neo4j.kernel.impl.store.record.NodeRecord;\n  */\n public class NodeLabelsField\n {\n-    private NodeLabelsField()\n-    {\n-    }\n+  private NodeLabelsField()\n+  {\n+  }\n \n-    public static NodeLabels parseLabelsField( NodeRecord node )\n-    {\n-        long labelField = node.getLabelField();\n-        return fieldPointsToDynamicRecordOfLabels( labelField )\n-                ? new DynamicNodeLabels( node )\n-                : new InlineNodeLabels( node );\n-    }\n+  public static NodeLabels parseLabelsField(NodeRecord node)\n+  {\n+    long labelField = node.getLabelField();\n+    return fieldPointsToDynamicRecordOfLabels(labelField)\n+        ? new DynamicNodeLabels(node)\n+        : new InlineNodeLabels(node);\n+  }\n \n-    public static long[] get( NodeRecord node, NodeStore nodeStore )\n-    {\n-        return fieldPointsToDynamicRecordOfLabels( node.getLabelField() )\n-                ? DynamicNodeLabels.get( node, nodeStore )\n-                : InlineNodeLabels.get( node );\n-    }\n+  public static long[] get(NodeRecord node, NodeStore nodeStore)\n+  {\n+    return fieldPointsToDynamicRecordOfLabels(node.getLabelField())\n+        ? DynamicNodeLabels.get(node, nodeStore)\n+        : InlineNodeLabels.get(node);\n+  }\n \n-    public static long[] get( NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor )\n-    {\n-        return fieldPointsToDynamicRecordOfLabels( node.getLabelField() )\n-               ? DynamicNodeLabels.get( node, dynamicLabelCursor )\n-               : InlineNodeLabels.get( node );\n-    }\n+  public static long[] get(NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor)\n+  {\n+    return fieldPointsToDynamicRecordOfLabels(node.getLabelField())\n+        ? DynamicNodeLabels.get(node, dynamicLabelCursor)\n+        : InlineNodeLabels.get(node);\n+  }\n \n-    public static boolean fieldPointsToDynamicRecordOfLabels( long labelField )\n-    {\n-        return (labelField & 0x8000000000L) != 0;\n-    }\n+  public static boolean fieldPointsToDynamicRecordOfLabels(long labelField)\n+  {\n+    return (labelField & 0x8000000000L) != 0;\n+  }\n \n-    public static long parseLabelsBody( long labelField )\n-    {\n-        return labelField & 0xFFFFFFFFFL;\n-    }\n+  public static long parseLabelsBody(long labelField)\n+  {\n+    return labelField & 0xFFFFFFFFFL;\n+  }\n \n-    /**\n-     * @see NodeRecord\n-     *\n-     * @param labelField label field value from a node record\n-     * @return the id of the dynamic record this label field points to or null if it is an inline label field\n-     */\n-    public static long firstDynamicLabelRecordId( long labelField )\n-    {\n-        assert fieldPointsToDynamicRecordOfLabels( labelField );\n-        return parseLabelsBody( labelField );\n-    }\n+  /**\n+   * @param labelField label field value from a node record\n+   * @return the id of the dynamic record this label field points to or null if it is an inline label field\n+   * @see NodeRecord\n+   */\n+  public static long firstDynamicLabelRecordId(long labelField)\n+  {\n+    assert fieldPointsToDynamicRecordOfLabels(labelField);\n+    return parseLabelsBody(labelField);\n+  }\n \n-    /**\n-     * Checks so that a label id array is sane, i.e. that it's sorted and contains no duplicates.\n-     */\n-    public static boolean isSane( long[] labelIds )\n+  /**\n+   * Checks so that a label id array is sane, i.e. that it's sorted and contains no duplicates.\n+   */\n+  public static boolean isSane(long[] labelIds)\n+  {\n+    long prev = -1;\n+    for (long labelId : labelIds)\n     {\n-        long prev = -1;\n-        for ( long labelId : labelIds )\n-        {\n-            if ( labelId <= prev )\n-            {\n-                return false;\n-            }\n-            prev = labelId;\n-        }\n-        return true;\n+      if (labelId <= prev)\n+      {\n+        return false;\n+      }\n+      prev = labelId;\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2261/NodeLabelsField.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2261/NodeLabelsField.java\nindex 69aae090352..070baa2a2c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2261/NodeLabelsField.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2261/NodeLabelsField.java\n@@ -47,28 +47,22 @@ public class NodeLabelsField\n     public static NodeLabels parseLabelsField( NodeRecord node )\n     {\n         long labelField = node.getLabelField();\n-        return fieldPointsToDynamicRecordOfLabels( labelField )\n-                ? new DynamicNodeLabels( node )\n-                : new InlineNodeLabels( node );\n+        return fieldPointsToDynamicRecordOfLabels( labelField ) ? new DynamicNodeLabels( node ) : new InlineNodeLabels( node );\n     }\n \n     public static long[] get( NodeRecord node, NodeStore nodeStore )\n     {\n-        return fieldPointsToDynamicRecordOfLabels( node.getLabelField() )\n-                ? DynamicNodeLabels.get( node, nodeStore )\n-                : InlineNodeLabels.get( node );\n+        return fieldPointsToDynamicRecordOfLabels( node.getLabelField() ) ? DynamicNodeLabels.get( node, nodeStore ) : InlineNodeLabels.get( node );\n     }\n \n     public static long[] get( NodeRecord node, RecordCursor<DynamicRecord> dynamicLabelCursor )\n     {\n-        return fieldPointsToDynamicRecordOfLabels( node.getLabelField() )\n-               ? DynamicNodeLabels.get( node, dynamicLabelCursor )\n-               : InlineNodeLabels.get( node );\n+        return fieldPointsToDynamicRecordOfLabels( node.getLabelField() ) ? DynamicNodeLabels.get( node, dynamicLabelCursor ) : InlineNodeLabels.get( node );\n     }\n \n     public static boolean fieldPointsToDynamicRecordOfLabels( long labelField )\n     {\n-        return (labelField & 0x8000000000L) != 0;\n+        return ( labelField & 0x8000000000L) != 0;\n     }\n \n     public static long parseLabelsBody( long labelField )\n@@ -100,8 +94,9 @@ public class NodeLabelsField\n             {\n                 return false;\n             }\n-            prev = labelId;\n+\n+prev = labelId;\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}