{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2589",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2589/HilbertSpaceFillingCurve2D.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2589/HilbertSpaceFillingCurve2D.java\nindex e9f5f0c0a0d..7b33c5522e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2589/HilbertSpaceFillingCurve2D.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2589/HilbertSpaceFillingCurve2D.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.gis.spatial.index.curves;\n \n import java.util.EnumMap;\n@@ -31,122 +32,122 @@ import static org.neo4j.gis.spatial.index.curves.HilbertSpaceFillingCurve2D.Dire\n public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n {\n \n-    /**\n-     * Description of the space filling curve structure\n-     */\n-    static class HilbertCurve2D extends CurveRule\n+  /**\n+   * Description of the space filling curve structure\n+   */\n+  static class HilbertCurve2D extends CurveRule\n+  {\n+    private CurveRule[] children;\n+\n+    private HilbertCurve2D(int... npointValues)\n     {\n-        private CurveRule[] children;\n-\n-        private HilbertCurve2D( int... npointValues )\n-        {\n-            super( 2, npointValues );\n-            assert npointValues[0] == 0 || npointValues[0] == 3;\n-        }\n-\n-        private Direction2D direction( int end )\n-        {\n-            int start = npointValues[0];\n-            end -= start;\n-            switch ( end )\n-            {\n-            case 1:\n-                return UP; // move up      00->01\n-            case 2:\n-                return RIGHT; // move right   00->10\n-            case -2:\n-                return LEFT; // move left    11->01\n-            case -1:\n-                return DOWN; // move down    11->10\n-            default:\n-                throw new IllegalArgumentException( \"Illegal direction: \" + end );\n-            }\n-        }\n-\n-        private Direction2D name()\n-        {\n-            return direction( npointValues[1] );\n-        }\n-\n-        private void setChildren( CurveRule... children )\n-        {\n-            this.children = children;\n-        }\n-\n-        @Override\n-        public CurveRule childAt( int npoint )\n-        {\n-            return children[npoint];\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return String.valueOf( name() );\n-        }\n+      super(2, npointValues);\n+      assert npointValues[0] == 0 || npointValues[0] == 3;\n     }\n \n-    enum Direction2D\n+    private Direction2D direction(int end)\n     {\n-        UP, RIGHT, LEFT, DOWN\n+      int start = npointValues[0];\n+      end -= start;\n+      switch (end)\n+      {\n+        case 1:\n+          return UP; // move up      00->01\n+        case 2:\n+          return RIGHT; // move right   00->10\n+        case -2:\n+          return LEFT; // move left    11->01\n+        case -1:\n+          return DOWN; // move down    11->10\n+        default:\n+          throw new IllegalArgumentException(\"Illegal direction: \" + end);\n+      }\n     }\n \n-    private static EnumMap<Direction2D,HilbertCurve2D> curves = new EnumMap<>( Direction2D.class );\n-\n-    private static void addCurveRule( int... npointValues )\n+    private Direction2D name()\n     {\n-        HilbertCurve2D curve = new HilbertCurve2D( npointValues );\n-        Direction2D name = curve.name();\n-        if ( !curves.containsKey( name ) )\n-        {\n-            curves.put( name, curve );\n-        }\n+      return direction(npointValues[1]);\n     }\n \n-    private static void setChildren( Direction2D parent, Direction2D... children )\n+    private void setChildren(CurveRule... children)\n     {\n-        HilbertCurve2D curve = curves.get( parent );\n-        HilbertCurve2D[] childCurves = new HilbertCurve2D[children.length];\n-        for ( int i = 0; i < children.length; i++ )\n-        {\n-            childCurves[i] = curves.get( children[i] );\n-        }\n-        curve.setChildren( childCurves );\n+      this.children = children;\n     }\n \n-    private static final HilbertCurve2D curveUp;\n-\n-    static\n+    @Override\n+    public CurveRule childAt(int npoint)\n     {\n-        addCurveRule( 0, 1, 3, 2 );\n-        addCurveRule( 0, 2, 3, 1 );\n-        addCurveRule( 3, 1, 0, 2 );\n-        addCurveRule( 3, 2, 0, 1 );\n-        setChildren( UP, RIGHT, UP, UP, LEFT );\n-        setChildren( RIGHT, UP, RIGHT, RIGHT, DOWN );\n-        setChildren( DOWN, LEFT, DOWN, DOWN, RIGHT );\n-        setChildren( LEFT, DOWN, LEFT, LEFT, UP );\n-        curveUp = curves.get( UP );\n+      return children[npoint];\n     }\n \n-    public static final int MAX_LEVEL = 63 / 2 - 1;\n-\n-    public HilbertSpaceFillingCurve2D( Envelope range )\n+    @Override\n+    public String toString()\n     {\n-        this( range, MAX_LEVEL );\n+      return String.valueOf(name());\n     }\n+  }\n+\n+  enum Direction2D\n+  {\n+    UP, RIGHT, LEFT, DOWN\n+  }\n \n-    public HilbertSpaceFillingCurve2D( Envelope range, int maxLevel )\n+  private static EnumMap<Direction2D, HilbertCurve2D> curves = new EnumMap<>(Direction2D.class);\n+\n+  private static void addCurveRule(int... npointValues)\n+  {\n+    HilbertCurve2D curve = new HilbertCurve2D(npointValues);\n+    Direction2D name = curve.name();\n+    if (!curves.containsKey(name))\n     {\n-        super( range, maxLevel );\n-        assert maxLevel <= MAX_LEVEL;\n-        assert range.getDimension() == 2;\n+      curves.put(name, curve);\n     }\n+  }\n \n-    @Override\n-    protected CurveRule rootCurve()\n+  private static void setChildren(Direction2D parent, Direction2D... children)\n+  {\n+    HilbertCurve2D curve = curves.get(parent);\n+    HilbertCurve2D[] childCurves = new HilbertCurve2D[children.length];\n+    for (int i = 0; i < children.length; i++)\n     {\n-        return curveUp;\n+      childCurves[i] = curves.get(children[i]);\n     }\n+    curve.setChildren(childCurves);\n+  }\n+\n+  private static final HilbertCurve2D curveUp;\n+\n+  static\n+  {\n+    addCurveRule(0, 1, 3, 2);\n+    addCurveRule(0, 2, 3, 1);\n+    addCurveRule(3, 1, 0, 2);\n+    addCurveRule(3, 2, 0, 1);\n+    setChildren(UP, RIGHT, UP, UP, LEFT);\n+    setChildren(RIGHT, UP, RIGHT, RIGHT, DOWN);\n+    setChildren(DOWN, LEFT, DOWN, DOWN, RIGHT);\n+    setChildren(LEFT, DOWN, LEFT, LEFT, UP);\n+    curveUp = curves.get(UP);\n+  }\n+\n+  public static final int MAX_LEVEL = 63 / 2 - 1;\n+\n+  public HilbertSpaceFillingCurve2D(Envelope range)\n+  {\n+    this(range, MAX_LEVEL);\n+  }\n+\n+  public HilbertSpaceFillingCurve2D(Envelope range, int maxLevel)\n+  {\n+    super(range, maxLevel);\n+    assert maxLevel <= MAX_LEVEL;\n+    assert range.getDimension() == 2;\n+  }\n+\n+  @Override\n+  protected CurveRule rootCurve()\n+  {\n+    return curveUp;\n+  }\n \n }\n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2589/HilbertSpaceFillingCurve2D.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2589/HilbertSpaceFillingCurve2D.java\nindex e9f5f0c0a0d..9cfb067c273 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2589/HilbertSpaceFillingCurve2D.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2589/HilbertSpaceFillingCurve2D.java\n@@ -30,7 +30,6 @@ import static org.neo4j.gis.spatial.index.curves.HilbertSpaceFillingCurve2D.Dire\n \n public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n {\n-\n     /**\n      * Description of the space filling curve structure\n      */\n@@ -148,5 +147,4 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n     {\n         return curveUp;\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "41",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "90",
                    "column": "21",
                    "severity": "error",
                    "message": "'{' at column 21 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "90",
                    "column": "21",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "90",
                    "column": "44",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "43",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "46",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2589/HilbertSpaceFillingCurve2D.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2589/HilbertSpaceFillingCurve2D.java\nindex e9f5f0c0a0d..155885fb5a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2589/HilbertSpaceFillingCurve2D.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2589/HilbertSpaceFillingCurve2D.java\n@@ -20,12 +20,13 @@\n package org.neo4j.gis.spatial.index.curves;\n \n import java.util.EnumMap;\n-\n import org.neo4j.gis.spatial.index.Envelope;\n-\n import static org.neo4j.gis.spatial.index.curves.HilbertSpaceFillingCurve2D.Direction2D.DOWN;\n+\n import static org.neo4j.gis.spatial.index.curves.HilbertSpaceFillingCurve2D.Direction2D.LEFT;\n+\n import static org.neo4j.gis.spatial.index.curves.HilbertSpaceFillingCurve2D.Direction2D.RIGHT;\n+\n import static org.neo4j.gis.spatial.index.curves.HilbertSpaceFillingCurve2D.Direction2D.UP;\n \n public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n@@ -41,12 +42,12 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n         private HilbertCurve2D( int... npointValues )\n         {\n             super( 2, npointValues );\n-            assert npointValues[0] == 0 || npointValues[0] == 3;\n+            assert npointValues[ 0] == 0|| npointValues[ 0] == 3;\n         }\n \n         private Direction2D direction( int end )\n         {\n-            int start = npointValues[0];\n+            int start = npointValues[ 0];\n             end -= start;\n             switch ( end )\n             {\n@@ -54,9 +55,9 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n                 return UP; // move up      00->01\n             case 2:\n                 return RIGHT; // move right   00->10\n-            case -2:\n+            case - 2:\n                 return LEFT; // move left    11->01\n-            case -1:\n+            case - 1:\n                 return DOWN; // move down    11->10\n             default:\n                 throw new IllegalArgumentException( \"Illegal direction: \" + end );\n@@ -65,7 +66,7 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n \n         private Direction2D name()\n         {\n-            return direction( npointValues[1] );\n+            return direction( npointValues[ 1] );\n         }\n \n         private void setChildren( CurveRule... children )\n@@ -76,7 +77,7 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n         @Override\n         public CurveRule childAt( int npoint )\n         {\n-            return children[npoint];\n+            return children[ npoint];\n         }\n \n         @Override\n@@ -86,18 +87,14 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n         }\n     }\n \n-    enum Direction2D\n-    {\n-        UP, RIGHT, LEFT, DOWN\n-    }\n+    enum Direction2D{ UP, RIGHT, LEFT, DOWN}\n \n     private static EnumMap<Direction2D,HilbertCurve2D> curves = new EnumMap<>( Direction2D.class );\n-\n     private static void addCurveRule( int... npointValues )\n     {\n         HilbertCurve2D curve = new HilbertCurve2D( npointValues );\n         Direction2D name = curve.name();\n-        if ( !curves.containsKey( name ) )\n+        if ( ! curves.containsKey( name ) )\n         {\n             curves.put( name, curve );\n         }\n@@ -109,8 +106,9 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n         HilbertCurve2D[] childCurves = new HilbertCurve2D[children.length];\n         for ( int i = 0; i < children.length; i++ )\n         {\n-            childCurves[i] = curves.get( children[i] );\n+            childCurves[i] = curves.get( children[ i] );\n         }\n+\n         curve.setChildren( childCurves );\n     }\n \n@@ -129,7 +127,7 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n         curveUp = curves.get( UP );\n     }\n \n-    public static final int MAX_LEVEL = 63 / 2 - 1;\n+    public static final int MAX_LEVEL = 63/ 2- 1;\n \n     public HilbertSpaceFillingCurve2D( Envelope range )\n     {\n@@ -148,5 +146,4 @@ public class HilbertSpaceFillingCurve2D extends SpaceFillingCurve\n     {\n         return curveUp;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}