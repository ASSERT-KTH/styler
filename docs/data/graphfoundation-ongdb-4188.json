{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4188",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "175",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "209",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "440",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "443",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "446",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "449",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "452",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "455",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "460",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "689",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "742",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "742",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4188/Expression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4188/Expression.java\nindex b998a42ce5e..60386c7d126 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4188/Expression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4188/Expression.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.util.Arrays;\n@@ -34,744 +35,737 @@ import static org.neo4j.codegen.TypeReference.typeReference;\n \n public abstract class Expression extends ExpressionTemplate\n {\n-    public static final Expression TRUE = new Constant( BOOLEAN, Boolean.TRUE )\n-    {\n-        @Override\n-        Expression not()\n-        {\n-            return FALSE;\n-        }\n-    };\n-    public static final Expression FALSE = new Constant( BOOLEAN, Boolean.FALSE )\n-    {\n-        @Override\n-        Expression not()\n-        {\n-            return TRUE;\n-        }\n-    };\n-    public static final Expression NULL = new Constant( OBJECT, null );\n-\n-    protected Expression( TypeReference type )\n+  public static final Expression TRUE = new Constant(BOOLEAN, Boolean.TRUE)\n+  {\n+    @Override\n+    Expression not()\n     {\n-        super( type );\n+      return FALSE;\n     }\n-\n-    public abstract void accept( ExpressionVisitor visitor );\n-\n-    static final Expression SUPER = new Expression( OBJECT )\n+  };\n+  public static final Expression FALSE = new Constant(BOOLEAN, Boolean.FALSE)\n+  {\n+    @Override\n+    Expression not()\n     {\n-        @Override\n-        public void accept( ExpressionVisitor visitor )\n-        {\n-            visitor.loadThis( \"super\" );\n-        }\n-    };\n-\n-    public static Expression gt( final Expression lhs, final Expression rhs )\n-    {\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.gt( lhs, rhs );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return lte( lhs, rhs );\n-            }\n-        };\n+      return TRUE;\n     }\n+  };\n+  public static final Expression NULL = new Constant(OBJECT, null);\n \n-    public static Expression gte( final Expression lhs, final Expression rhs )\n-    {\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.gte( lhs, rhs );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return lt( lhs, rhs );\n-            }\n-        };\n-    }\n+  protected Expression(TypeReference type)\n+  {\n+    super(type);\n+  }\n \n-    public static Expression lt( final Expression lhs, final Expression rhs )\n-    {\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.lt( lhs, rhs );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return gte( lhs, rhs );\n-            }\n-        };\n-    }\n-\n-    public static Expression lte( final Expression lhs, final Expression rhs )\n-    {\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.lte( lhs, rhs );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return gt( lhs, rhs );\n-            }\n-        };\n-    }\n-\n-    public static Expression and( final Expression lhs, final Expression rhs )\n-    {\n-        if ( lhs == FALSE || rhs == FALSE )\n-        {\n-            return FALSE;\n-        }\n-        if ( lhs == TRUE )\n-        {\n-            return rhs;\n-        }\n-        if ( rhs == TRUE )\n-        {\n-            return lhs;\n-        }\n-        Expression[] expressions;\n-        if ( lhs instanceof And )\n-        {\n-            if ( rhs instanceof And )\n-            {\n-                expressions = expressions( ((And) lhs).expressions, ((And) rhs).expressions );\n-            }\n-            else\n-            {\n-                expressions = expressions( ((And) lhs).expressions, rhs );\n-            }\n-        }\n-        else if ( rhs instanceof And )\n-        {\n-            expressions = expressions( lhs, ((And) rhs).expressions );\n-        }\n-        else\n-        {\n-            expressions = new Expression[] {lhs, rhs};\n-        }\n-        return new And( expressions );\n-    }\n-\n-    public static Expression or( final Expression lhs, final Expression rhs )\n-    {\n-        if ( lhs == TRUE || rhs == TRUE )\n-        {\n-            return TRUE;\n-        }\n-        if ( lhs == FALSE )\n-        {\n-            return rhs;\n-        }\n-        if ( rhs == FALSE )\n-        {\n-            return lhs;\n-        }\n-        Expression[] expressions;\n-        if ( lhs instanceof Or )\n-        {\n-            if ( rhs instanceof Or )\n-            {\n-                expressions = expressions( ((Or) lhs).expressions, ((Or) rhs).expressions );\n-            }\n-            else\n-            {\n-                expressions = expressions( ((Or) lhs).expressions, rhs );\n-            }\n-        }\n-        else if ( rhs instanceof Or )\n-        {\n-            expressions = expressions( lhs, ((Or) rhs).expressions );\n-        }\n-        else\n-        {\n-            expressions = new Expression[] {lhs, rhs};\n-        }\n-        return new Or( expressions );\n-    }\n+  public abstract void accept(ExpressionVisitor visitor);\n \n-    private static class And extends Expression\n+  static final Expression SUPER = new Expression(OBJECT)\n+  {\n+    @Override\n+    public void accept(ExpressionVisitor visitor)\n     {\n-        private final Expression[] expressions;\n-\n-        And( Expression[] expressions )\n-        {\n-            super( BOOLEAN );\n-            this.expressions = expressions;\n-        }\n-\n-        @Override\n-        public void accept( ExpressionVisitor visitor )\n-        {\n-            visitor.and( expressions );\n-        }\n+      visitor.loadThis(\"super\");\n     }\n+  };\n \n-    private static class Or extends Expression\n+  public static Expression gt(final Expression lhs, final Expression rhs)\n+  {\n+    return new Expression(BOOLEAN)\n     {\n-        private final Expression[] expressions;\n-\n-        Or( Expression[] expressions )\n-        {\n-            super( BOOLEAN );\n-            this.expressions = expressions;\n-        }\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.gt(lhs, rhs);\n+      }\n \n-        @Override\n-        public void accept( ExpressionVisitor visitor )\n-        {\n-            visitor.or( expressions );\n-        }\n-    }\n+      @Override\n+      Expression not()\n+      {\n+        return lte(lhs, rhs);\n+      }\n+    };\n+  }\n+\n+  public static Expression gte(final Expression lhs, final Expression rhs)\n+  {\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.gte(lhs, rhs);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return lt(lhs, rhs);\n+      }\n+    };\n+  }\n+\n+  public static Expression lt(final Expression lhs, final Expression rhs)\n+  {\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.lt(lhs, rhs);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return gte(lhs, rhs);\n+      }\n+    };\n+  }\n+\n+  public static Expression lte(final Expression lhs, final Expression rhs)\n+  {\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.lte(lhs, rhs);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return gt(lhs, rhs);\n+      }\n+    };\n+  }\n \n-    private static Expression[] expressions( Expression[] some, Expression[] more )\n+  public static Expression and(final Expression lhs, final Expression rhs)\n+  {\n+    if (lhs == FALSE || rhs == FALSE)\n     {\n-        Expression[] result = Arrays.copyOf( some, some.length + more.length );\n-        System.arraycopy( more, 0, result, some.length, more.length );\n-        return result;\n+      return FALSE;\n     }\n-\n-    private static Expression[] expressions( Expression[] some, Expression last )\n+    if (lhs == TRUE)\n     {\n-        Expression[] result = Arrays.copyOf( some, some.length + 1 );\n-        result[some.length] = last;\n-        return result;\n+      return rhs;\n     }\n-\n-    private static Expression[] expressions( Expression first, Expression[] more )\n+    if (rhs == TRUE)\n     {\n-        Expression[] result = new Expression[more.length + 1];\n-        result[0] = first;\n-        System.arraycopy( more, 0, result, 1, more.length );\n-        return result;\n-    }\n-\n-    public static Expression equal( final Expression lhs, final Expression rhs )\n-    {\n-        if ( lhs == NULL )\n-        {\n-            if ( rhs == NULL )\n-            {\n-                return constant( Boolean.TRUE );\n-            }\n-            else\n-            {\n-                return isNull( rhs );\n-            }\n-        }\n-        else if ( rhs == NULL )\n-        {\n-            return isNull( lhs );\n-        }\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.equal( lhs, rhs );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return notEqual( lhs, rhs );\n-            }\n-        };\n-    }\n-\n-    public static Expression isNull( final Expression expression )\n-    {\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.isNull( expression );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return notNull( expression );\n-            }\n-        };\n+      return lhs;\n     }\n-\n-    public static Expression notNull( final Expression expression )\n-    {\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.notNull( expression );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return isNull( expression );\n-            }\n-        };\n+    Expression[] expressions;\n+    if (lhs instanceof And)\n+    {\n+      if (rhs instanceof And)\n+      {\n+        expressions = expressions(((And) lhs).expressions, ((And) rhs).expressions);\n+      } else\n+      {\n+        expressions = expressions(((And) lhs).expressions, rhs);\n+      }\n+    } else if (rhs instanceof And)\n+    {\n+      expressions = expressions(lhs, ((And) rhs).expressions);\n+    } else\n+    {\n+      expressions = new Expression[] {lhs, rhs};\n     }\n+    return new And(expressions);\n+  }\n \n-    public static Expression notEqual( final Expression lhs, final Expression rhs )\n-    {\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.notEqual( lhs, rhs );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return equal( lhs, rhs );\n-            }\n-        };\n+  public static Expression or(final Expression lhs, final Expression rhs)\n+  {\n+    if (lhs == TRUE || rhs == TRUE)\n+    {\n+      return TRUE;\n     }\n-\n-    public static Expression load( final LocalVariable variable )\n+    if (lhs == FALSE)\n     {\n-        return new Expression( variable.type() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.load( variable );\n-            }\n-        };\n+      return rhs;\n     }\n-\n-    public static Expression add( final Expression lhs, final Expression rhs )\n-    {\n-        if ( !lhs.type.equals( rhs.type ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Cannot add variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n-        }\n-\n-        return new Expression( lhs.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.add( lhs, rhs );\n-            }\n-        };\n+    if (rhs == FALSE)\n+    {\n+      return lhs;\n     }\n-\n-    public static Expression subtract( final Expression lhs, final Expression rhs )\n-    {\n-        if ( !lhs.type.equals( rhs.type ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    String.format(\n-                            \"Cannot subtract variables with different types. LHS %s, RHS %s\",\n-                            lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n-        }\n-        return new Expression( lhs.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.subtract( lhs, rhs );\n-            }\n-        };\n+    Expression[] expressions;\n+    if (lhs instanceof Or)\n+    {\n+      if (rhs instanceof Or)\n+      {\n+        expressions = expressions(((Or) lhs).expressions, ((Or) rhs).expressions);\n+      } else\n+      {\n+        expressions = expressions(((Or) lhs).expressions, rhs);\n+      }\n+    } else if (rhs instanceof Or)\n+    {\n+      expressions = expressions(lhs, ((Or) rhs).expressions);\n+    } else\n+    {\n+      expressions = new Expression[] {lhs, rhs};\n     }\n+    return new Or(expressions);\n+  }\n \n-    public static Expression multiply( final Expression lhs, final Expression rhs )\n-    {\n-        if ( !lhs.type.equals( rhs.type ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    String.format(\n-                            \"Cannot multiply variables with different types. LHS %s, RHS %s\",\n-                            lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n-        }\n-        return new Expression( lhs.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.multiply( lhs, rhs );\n-            }\n-        };\n-    }\n+  private static class And extends Expression\n+  {\n+    private final Expression[] expressions;\n \n-    public static Expression constantInt( int value )\n+    And(Expression[] expressions)\n     {\n-        return constant(value);\n+      super(BOOLEAN);\n+      this.expressions = expressions;\n     }\n \n-    public static Expression constantLong( long value )\n+    @Override\n+    public void accept(ExpressionVisitor visitor)\n     {\n-        return constant(value);\n+      visitor.and(expressions);\n     }\n+  }\n \n-    public static Expression constant( final Object value )\n-    {\n-        TypeReference reference;\n-        if ( value == null )\n-        {\n-            return NULL;\n-        }\n-        else if ( value instanceof String )\n-        {\n-            reference = TypeReference.typeReference( String.class );\n-        }\n-        else if ( value instanceof Long )\n-        {\n-            reference = LONG;\n-        }\n-        else if ( value instanceof Integer )\n-        {\n-            reference = INT;\n-        }\n-        else if ( value instanceof Double )\n-        {\n-            reference = DOUBLE;\n-        }\n-        else if ( value instanceof Boolean )\n-        {\n-            return (Boolean) value ? TRUE : FALSE;\n-        }\n-        else if ( value instanceof AnyValue )\n-        {\n-            reference = VALUE;\n-        }\n-        else\n-        {\n-            throw new IllegalArgumentException( \"Not a valid constant!\" );\n-        }\n-\n-        return new Expression( reference )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.constant( value );\n-            }\n-        };\n-    }\n+  private static class Or extends Expression\n+  {\n+    private final Expression[] expressions;\n \n-    private static class Constant extends Expression\n+    Or(Expression[] expressions)\n     {\n-        private final Object value;\n-\n-        Constant( TypeReference type, Object value )\n-        {\n-            super( type );\n-            this.value = value;\n-        }\n-\n-        @Override\n-        public void accept( ExpressionVisitor visitor )\n-        {\n-            visitor.constant( value );\n-        }\n+      super(BOOLEAN);\n+      this.expressions = expressions;\n     }\n \n-    //TODO deduce type from constants\n-    public static Expression newArray( TypeReference baseType, Expression... constants )\n-    {\n-        return new Expression( arrayOf( baseType ) )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.newArray( baseType, constants );\n-            }\n-        };\n-    }\n+    @Override\n+    public void accept(ExpressionVisitor visitor)\n+    {\n+      visitor.or(expressions);\n+    }\n+  }\n+\n+  private static Expression[] expressions(Expression[] some, Expression[] more)\n+  {\n+    Expression[] result = Arrays.copyOf(some, some.length + more.length);\n+    System.arraycopy(more, 0, result, some.length, more.length);\n+    return result;\n+  }\n+\n+  private static Expression[] expressions(Expression[] some, Expression last)\n+  {\n+    Expression[] result = Arrays.copyOf(some, some.length + 1);\n+    result[some.length] = last;\n+    return result;\n+  }\n+\n+  private static Expression[] expressions(Expression first, Expression[] more)\n+  {\n+    Expression[] result = new Expression[more.length + 1];\n+    result[0] = first;\n+    System.arraycopy(more, 0, result, 1, more.length);\n+    return result;\n+  }\n+\n+  public static Expression equal(final Expression lhs, final Expression rhs)\n+  {\n+    if (lhs == NULL)\n+    {\n+      if (rhs == NULL)\n+      {\n+        return constant(Boolean.TRUE);\n+      } else\n+      {\n+        return isNull(rhs);\n+      }\n+    } else if (rhs == NULL)\n+    {\n+      return isNull(lhs);\n+    }\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.equal(lhs, rhs);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return notEqual(lhs, rhs);\n+      }\n+    };\n+  }\n+\n+  public static Expression isNull(final Expression expression)\n+  {\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.isNull(expression);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return notNull(expression);\n+      }\n+    };\n+  }\n+\n+  public static Expression notNull(final Expression expression)\n+  {\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.notNull(expression);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return isNull(expression);\n+      }\n+    };\n+  }\n+\n+  public static Expression notEqual(final Expression lhs, final Expression rhs)\n+  {\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.notEqual(lhs, rhs);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return equal(lhs, rhs);\n+      }\n+    };\n+  }\n \n-    /** get instance field */\n-    public static Expression get( final Expression target, final FieldReference field )\n-    {\n-        return new Expression( field.type() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.getField( target, field );\n-            }\n-        };\n-    }\n+  public static Expression load(final LocalVariable variable)\n+  {\n+    return new Expression(variable.type())\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.load(variable);\n+      }\n+    };\n+  }\n \n-    /** box expression */\n-    public static Expression box( final Expression expression )\n-    {\n-        TypeReference type = expression.type;\n-        if ( type.isPrimitive() )\n-        {\n-            switch ( type.name() )\n-            {\n-            case \"byte\":\n-                type = TypeReference.typeReference( Byte.class );\n-                break;\n-            case \"short\":\n-                type = TypeReference.typeReference( Short.class );\n-                break;\n-            case \"int\":\n-                type = TypeReference.typeReference( Integer.class );\n-                break;\n-            case \"long\":\n-                type = TypeReference.typeReference( Long.class );\n-                break;\n-            case \"char\":\n-                type = TypeReference.typeReference( Character.class );\n-                break;\n-            case \"boolean\":\n-                type = TypeReference.typeReference( Boolean.class );\n-                break;\n-            case \"float\":\n-                type = TypeReference.typeReference( Float.class );\n-                break;\n-            case \"double\":\n-                type = TypeReference.typeReference( Double.class );\n-                break;\n-            default:\n-                break;\n-            }\n-        }\n-        return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.box( expression );\n-            }\n-        };\n+  public static Expression add(final Expression lhs, final Expression rhs)\n+  {\n+    if (!lhs.type.equals(rhs.type))\n+    {\n+      throw new IllegalArgumentException(\n+          String.format(\"Cannot add variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(),\n+              rhs.type.simpleName()));\n     }\n \n-    /** unbox expression */\n-    public static Expression unbox( final Expression expression )\n-    {\n-        TypeReference type;\n-        switch ( expression.type.fullName() )\n-        {\n-        case \"java.lang.Byte\":\n-            type = TypeReference.typeReference( byte.class );\n-            break;\n-        case \"java.lang.Short\":\n-            type = TypeReference.typeReference( short.class );\n-            break;\n-        case \"java.lang.Integer\":\n-            type = TypeReference.typeReference( int.class );\n-            break;\n-        case \"java.lang.Long\":\n-            type = TypeReference.typeReference( long.class );\n-            break;\n-        case \"java.lang.Character\":\n-            type = TypeReference.typeReference( char.class );\n-            break;\n-        case \"java.lang.Boolean\":\n-            type = TypeReference.typeReference( boolean.class );\n-            break;\n-        case \"java.lang.Float\":\n-            type = TypeReference.typeReference( float.class );\n-            break;\n-        case \"java.lang.Double\":\n-            type = TypeReference.typeReference( double.class );\n-            break;\n-        default:\n-            throw new IllegalStateException( \"Cannot unbox \" + expression.type.fullName() );\n-        }\n-        return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.unbox( expression );\n-            }\n-        };\n-    }\n+    return new Expression(lhs.type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.add(lhs, rhs);\n+      }\n+    };\n+  }\n \n-    /** get static field */\n-    public static Expression getStatic( final FieldReference field )\n-    {\n-        return new Expression( field.type() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.getStatic( field );\n-            }\n-        };\n+  public static Expression subtract(final Expression lhs, final Expression rhs)\n+  {\n+    if (!lhs.type.equals(rhs.type))\n+    {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Cannot subtract variables with different types. LHS %s, RHS %s\",\n+              lhs.type.simpleName(),\n+              rhs.type.simpleName()));\n     }\n+    return new Expression(lhs.type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.subtract(lhs, rhs);\n+      }\n+    };\n+  }\n \n-    public static Expression ternary( final Expression test, final Expression onTrue, final Expression onFalse )\n-    {\n-        TypeReference reference = onTrue.type.equals( onFalse.type ) ? onTrue.type : OBJECT;\n-        return new Expression( reference )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.ternary( test, onTrue, onFalse );\n-            }\n-        };\n+  public static Expression multiply(final Expression lhs, final Expression rhs)\n+  {\n+    if (!lhs.type.equals(rhs.type))\n+    {\n+      throw new IllegalArgumentException(\n+          String.format(\n+              \"Cannot multiply variables with different types. LHS %s, RHS %s\",\n+              lhs.type.simpleName(),\n+              rhs.type.simpleName()));\n     }\n+    return new Expression(lhs.type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.multiply(lhs, rhs);\n+      }\n+    };\n+  }\n \n-    public static Expression invoke(\n-            final Expression target, final MethodReference method,\n-            final Expression... arguments )\n-    {\n-        return new Expression( method.returns() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.invoke( target, method, arguments );\n-            }\n-        };\n-    }\n+  public static Expression constantInt(int value)\n+  {\n+    return constant(value);\n+  }\n \n-    public static Expression invoke( final MethodReference method, final Expression... parameters )\n-    {\n-        return new Expression( method.returns() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.invoke( method, parameters );\n-            }\n-        };\n-    }\n+  public static Expression constantLong(long value)\n+  {\n+    return constant(value);\n+  }\n \n-    public static Expression cast( Class<?> type, Expression expression )\n+  public static Expression constant(final Object value)\n+  {\n+    TypeReference reference;\n+    if (value == null)\n     {\n-        return cast( typeReference( type ), expression );\n-    }\n-\n-    public static Expression cast( final TypeReference type, Expression expression )\n+      return NULL;\n+    } else if (value instanceof String)\n     {\n-        return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.cast( type, expression );\n-            }\n-        };\n-    }\n-\n-    public static Expression newInstance( Class<?> type )\n+      reference = TypeReference.typeReference(String.class);\n+    } else if (value instanceof Long)\n     {\n-        return newInstance( typeReference( type ) );\n-    }\n-\n-    public static Expression newInstance( final TypeReference type )\n+      reference = LONG;\n+    } else if (value instanceof Integer)\n     {\n-        return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.newInstance( type );\n-            }\n-        };\n-    }\n-\n-    public static Expression not( final Expression expression )\n+      reference = INT;\n+    } else if (value instanceof Double)\n+    {\n+      reference = DOUBLE;\n+    } else if (value instanceof Boolean)\n+    {\n+      return (Boolean) value ? TRUE : FALSE;\n+    } else if (value instanceof AnyValue)\n     {\n-        return expression.not();\n+      reference = VALUE;\n+    } else\n+    {\n+      throw new IllegalArgumentException(\"Not a valid constant!\");\n     }\n \n-    Expression not()\n+    return new Expression(reference)\n     {\n-        return notExpr( this );\n-    }\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.constant(value);\n+      }\n+    };\n+  }\n \n-    private static Expression notExpr( final Expression expression )\n-    {\n-        assert expression.type == BOOLEAN : \"Can only apply not() to boolean expressions\";\n-        return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.not( expression );\n-            }\n-\n-            @Override\n-            Expression not()\n-            {\n-                return expression;\n-            }\n-        };\n-    }\n+  private static class Constant extends Expression\n+  {\n+    private final Object value;\n \n-    public static Expression toDouble( final Expression expression )\n+    Constant(TypeReference type, Object value)\n     {\n-        return new Expression( DOUBLE )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.longToDouble( expression );\n-            }\n-        };\n+      super(type);\n+      this.value = value;\n     }\n \n-    public static Expression pop( Expression expression )\n+    @Override\n+    public void accept(ExpressionVisitor visitor)\n     {\n-        return new Expression( expression.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.pop( expression );\n-            }\n-        };\n+      visitor.constant(value);\n     }\n+  }\n \n-    @Override\n-    Expression materialize( CodeBlock method )\n+  //TODO deduce type from constants\n+  public static Expression newArray(TypeReference baseType, Expression... constants)\n+  {\n+    return new Expression(arrayOf(baseType))\n     {\n-        return this;\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.newArray(baseType, constants);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * get instance field\n+   */\n+  public static Expression get(final Expression target, final FieldReference field)\n+  {\n+    return new Expression(field.type())\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.getField(target, field);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * box expression\n+   */\n+  public static Expression box(final Expression expression)\n+  {\n+    TypeReference type = expression.type;\n+    if (type.isPrimitive())\n+    {\n+      switch (type.name())\n+      {\n+        case \"byte\":\n+          type = TypeReference.typeReference(Byte.class);\n+          break;\n+        case \"short\":\n+          type = TypeReference.typeReference(Short.class);\n+          break;\n+        case \"int\":\n+          type = TypeReference.typeReference(Integer.class);\n+          break;\n+        case \"long\":\n+          type = TypeReference.typeReference(Long.class);\n+          break;\n+        case \"char\":\n+          type = TypeReference.typeReference(Character.class);\n+          break;\n+        case \"boolean\":\n+          type = TypeReference.typeReference(Boolean.class);\n+          break;\n+        case \"float\":\n+          type = TypeReference.typeReference(Float.class);\n+          break;\n+        case \"double\":\n+          type = TypeReference.typeReference(Double.class);\n+          break;\n+        default:\n+          break;\n+      }\n     }\n+    return new Expression(type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.box(expression);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * unbox expression\n+   */\n+  public static Expression unbox(final Expression expression)\n+  {\n+    TypeReference type;\n+    switch (expression.type.fullName())\n+    {\n+      case \"java.lang.Byte\":\n+        type = TypeReference.typeReference(byte.class);\n+        break;\n+      case \"java.lang.Short\":\n+        type = TypeReference.typeReference(short.class);\n+        break;\n+      case \"java.lang.Integer\":\n+        type = TypeReference.typeReference(int.class);\n+        break;\n+      case \"java.lang.Long\":\n+        type = TypeReference.typeReference(long.class);\n+        break;\n+      case \"java.lang.Character\":\n+        type = TypeReference.typeReference(char.class);\n+        break;\n+      case \"java.lang.Boolean\":\n+        type = TypeReference.typeReference(boolean.class);\n+        break;\n+      case \"java.lang.Float\":\n+        type = TypeReference.typeReference(float.class);\n+        break;\n+      case \"java.lang.Double\":\n+        type = TypeReference.typeReference(double.class);\n+        break;\n+      default:\n+        throw new IllegalStateException(\"Cannot unbox \" + expression.type.fullName());\n+    }\n+    return new Expression(type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.unbox(expression);\n+      }\n+    };\n+  }\n+\n+  /**\n+   * get static field\n+   */\n+  public static Expression getStatic(final FieldReference field)\n+  {\n+    return new Expression(field.type())\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.getStatic(field);\n+      }\n+    };\n+  }\n+\n+  public static Expression ternary(final Expression test, final Expression onTrue, final Expression onFalse)\n+  {\n+    TypeReference reference = onTrue.type.equals(onFalse.type) ? onTrue.type : OBJECT;\n+    return new Expression(reference)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.ternary(test, onTrue, onFalse);\n+      }\n+    };\n+  }\n+\n+  public static Expression invoke(\n+      final Expression target, final MethodReference method,\n+      final Expression... arguments)\n+  {\n+    return new Expression(method.returns())\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.invoke(target, method, arguments);\n+      }\n+    };\n+  }\n \n-    @Override\n-    void templateAccept( CodeBlock method, ExpressionVisitor visitor )\n+  public static Expression invoke(final MethodReference method, final Expression... parameters)\n+  {\n+    return new Expression(method.returns())\n     {\n-        throw new UnsupportedOperationException( \"simple expressions should not be invoked as templates\" );\n-    }\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.invoke(method, parameters);\n+      }\n+    };\n+  }\n+\n+  public static Expression cast(Class<?> type, Expression expression)\n+  {\n+    return cast(typeReference(type), expression);\n+  }\n+\n+  public static Expression cast(final TypeReference type, Expression expression)\n+  {\n+    return new Expression(type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.cast(type, expression);\n+      }\n+    };\n+  }\n+\n+  public static Expression newInstance(Class<?> type)\n+  {\n+    return newInstance(typeReference(type));\n+  }\n+\n+  public static Expression newInstance(final TypeReference type)\n+  {\n+    return new Expression(type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.newInstance(type);\n+      }\n+    };\n+  }\n+\n+  public static Expression not(final Expression expression)\n+  {\n+    return expression.not();\n+  }\n+\n+  Expression not()\n+  {\n+    return notExpr(this);\n+  }\n+\n+  private static Expression notExpr(final Expression expression)\n+  {\n+    assert expression.type == BOOLEAN : \"Can only apply not() to boolean expressions\";\n+    return new Expression(BOOLEAN)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.not(expression);\n+      }\n+\n+      @Override\n+      Expression not()\n+      {\n+        return expression;\n+      }\n+    };\n+  }\n \n-    @Override\n-    public String toString()\n+  public static Expression toDouble(final Expression expression)\n+  {\n+    return new Expression(DOUBLE)\n     {\n-        StringBuilder result = new StringBuilder().append( \"Expression[\" );\n-        accept( new ExpressionToString( result ) );\n-        return result.append( ']' ).toString();\n-    }\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.longToDouble(expression);\n+      }\n+    };\n+  }\n+\n+  public static Expression pop(Expression expression)\n+  {\n+    return new Expression(expression.type)\n+    {\n+      @Override\n+      public void accept(ExpressionVisitor visitor)\n+      {\n+        visitor.pop(expression);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  Expression materialize(CodeBlock method)\n+  {\n+    return this;\n+  }\n+\n+  @Override\n+  void templateAccept(CodeBlock method, ExpressionVisitor visitor)\n+  {\n+    throw new UnsupportedOperationException(\"simple expressions should not be invoked as templates\");\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder result = new StringBuilder().append(\"Expression[\");\n+    accept(new ExpressionToString(result));\n+    return result.append(']').toString();\n+  }\n }\n",
            "diff_size": 1137
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "384",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4188/Expression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4188/Expression.java\nindex b998a42ce5e..7b49359e876 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4188/Expression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4188/Expression.java\n@@ -42,7 +42,8 @@ public abstract class Expression extends ExpressionTemplate\n             return FALSE;\n         }\n     };\n-    public static final Expression FALSE = new Constant( BOOLEAN, Boolean.FALSE )\n+\n+public static final Expression FALSE = new Constant( BOOLEAN, Boolean.FALSE )\n     {\n         @Override\n         Expression not()\n@@ -50,7 +51,8 @@ public abstract class Expression extends ExpressionTemplate\n             return TRUE;\n         }\n     };\n-    public static final Expression NULL = new Constant( OBJECT, null );\n+\n+public static final Expression NULL = new Constant( OBJECT, null );\n \n     protected Expression( TypeReference type )\n     {\n@@ -146,15 +148,18 @@ public abstract class Expression extends ExpressionTemplate\n         {\n             return FALSE;\n         }\n-        if ( lhs == TRUE )\n+\n+if ( lhs == TRUE )\n         {\n             return rhs;\n         }\n-        if ( rhs == TRUE )\n+\n+if ( rhs == TRUE )\n         {\n             return lhs;\n         }\n-        Expression[] expressions;\n+\n+Expression[] expressions;\n         if ( lhs instanceof And )\n         {\n             if ( rhs instanceof And )\n@@ -172,7 +177,7 @@ public abstract class Expression extends ExpressionTemplate\n         }\n         else\n         {\n-            expressions = new Expression[] {lhs, rhs};\n+            expressions = new Expression[]{lhs, rhs};\n         }\n         return new And( expressions );\n     }\n@@ -183,15 +188,18 @@ public abstract class Expression extends ExpressionTemplate\n         {\n             return TRUE;\n         }\n-        if ( lhs == FALSE )\n+\n+if ( lhs == FALSE )\n         {\n             return rhs;\n         }\n-        if ( rhs == FALSE )\n+\n+if ( rhs == FALSE )\n         {\n             return lhs;\n         }\n-        Expression[] expressions;\n+\n+Expression[] expressions;\n         if ( lhs instanceof Or )\n         {\n             if ( rhs instanceof Or )\n@@ -209,7 +217,7 @@ public abstract class Expression extends ExpressionTemplate\n         }\n         else\n         {\n-            expressions = new Expression[] {lhs, rhs};\n+            expressions = new Expression[]{lhs, rhs};\n         }\n         return new Or( expressions );\n     }\n@@ -373,10 +381,8 @@ public abstract class Expression extends ExpressionTemplate\n     {\n         if ( !lhs.type.equals( rhs.type ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Cannot add variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n-        }\n+            throw new IllegalArgumentException( String.format( \"Cannot add variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(), rhs.type.simpleName() ) );\n+    }\n \n         return new Expression( lhs.type )\n         {\n@@ -392,12 +398,9 @@ public abstract class Expression extends ExpressionTemplate\n     {\n         if ( !lhs.type.equals( rhs.type ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format(\n-                            \"Cannot subtract variables with different types. LHS %s, RHS %s\",\n-                            lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n-        }\n+            throw new IllegalArgumentException( String.format( \"Cannot subtract variables with different types. LHS %s, RHS %s\",\n+                            lhs.type.simpleName(), rhs.type.simpleName() ) );\n+    }\n         return new Expression( lhs.type )\n         {\n             @Override\n@@ -412,12 +415,9 @@ public abstract class Expression extends ExpressionTemplate\n     {\n         if ( !lhs.type.equals( rhs.type ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format(\n-                            \"Cannot multiply variables with different types. LHS %s, RHS %s\",\n-                            lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n-        }\n+            throw new IllegalArgumentException( String.format( \"Cannot multiply variables with different types. LHS %s, RHS %s\",\n+                            lhs.type.simpleName(), rhs.type.simpleName() ) );\n+    }\n         return new Expression( lhs.type )\n         {\n             @Override\n@@ -642,9 +642,7 @@ public abstract class Expression extends ExpressionTemplate\n         };\n     }\n \n-    public static Expression invoke(\n-            final Expression target, final MethodReference method,\n-            final Expression... arguments )\n+    public static Expression invoke( final Expression target, final MethodReference method, final Expression... arguments )\n     {\n         return new Expression( method.returns() )\n         {\n@@ -774,4 +772,4 @@ public abstract class Expression extends ExpressionTemplate\n         accept( new ExpressionToString( result ) );\n         return result.append( ']' ).toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "147",
                    "column": "26",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "189",
                    "column": "25",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "312",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "329",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "346",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "363",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "386",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "403",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "420",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "730",
                    "column": "42",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "739",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "770",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "775",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4188/Expression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4188/Expression.java\nindex b998a42ce5e..10c5ed8a6b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4188/Expression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4188/Expression.java\n@@ -20,36 +20,41 @@\n package org.neo4j.codegen;\n \n import java.util.Arrays;\n-\n import org.neo4j.values.AnyValue;\n-\n import static org.neo4j.codegen.TypeReference.BOOLEAN;\n+\n import static org.neo4j.codegen.TypeReference.DOUBLE;\n+\n import static org.neo4j.codegen.TypeReference.INT;\n+\n import static org.neo4j.codegen.TypeReference.LONG;\n+\n import static org.neo4j.codegen.TypeReference.OBJECT;\n+\n import static org.neo4j.codegen.TypeReference.VALUE;\n+\n import static org.neo4j.codegen.TypeReference.arrayOf;\n+\n import static org.neo4j.codegen.TypeReference.typeReference;\n \n public abstract class Expression extends ExpressionTemplate\n {\n     public static final Expression TRUE = new Constant( BOOLEAN, Boolean.TRUE )\n+{\n+    @Override Expression not()\n     {\n-        @Override\n-        Expression not()\n-        {\n-            return FALSE;\n-        }\n-    };\n+        return FALSE;\n+    }\n+};\n+\n     public static final Expression FALSE = new Constant( BOOLEAN, Boolean.FALSE )\n+{\n+    @Override Expression not()\n     {\n-        @Override\n-        Expression not()\n-        {\n-            return TRUE;\n-        }\n-    };\n+        return TRUE;\n+    }\n+};\n+\n     public static final Expression NULL = new Constant( OBJECT, null );\n \n     protected Expression( TypeReference type )\n@@ -57,103 +62,103 @@ public abstract class Expression extends ExpressionTemplate\n         super( type );\n     }\n \n-    public abstract void accept( ExpressionVisitor visitor );\n+    public abstract void accept( ExpressionVisitor visitor )\n+    ;\n \n     static final Expression SUPER = new Expression( OBJECT )\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n     {\n-        @Override\n-        public void accept( ExpressionVisitor visitor )\n-        {\n-            visitor.loadThis( \"super\" );\n-        }\n-    };\n+        visitor.loadThis( \"super\" );\n+    }\n+};\n \n     public static Expression gt( final Expression lhs, final Expression rhs )\n     {\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.gt( lhs, rhs );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.gt( lhs, rhs );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return lte( lhs, rhs );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return lte( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression gte( final Expression lhs, final Expression rhs )\n     {\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.gte( lhs, rhs );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.gte( lhs, rhs );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return lt( lhs, rhs );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return lt( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression lt( final Expression lhs, final Expression rhs )\n     {\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.lt( lhs, rhs );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.lt( lhs, rhs );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return gte( lhs, rhs );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return gte( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression lte( final Expression lhs, final Expression rhs )\n     {\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.lte( lhs, rhs );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.lte( lhs, rhs );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return gt( lhs, rhs );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return gt( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression and( final Expression lhs, final Expression rhs )\n     {\n-        if ( lhs == FALSE || rhs == FALSE )\n+        if ( lhs == FALSE|| rhs == FALSE )\n         {\n             return FALSE;\n         }\n+\n         if ( lhs == TRUE )\n         {\n             return rhs;\n         }\n+\n         if ( rhs == TRUE )\n         {\n             return lhs;\n         }\n+\n         Expression[] expressions;\n         if ( lhs instanceof And )\n         {\n@@ -166,31 +171,36 @@ public abstract class Expression extends ExpressionTemplate\n                 expressions = expressions( ((And) lhs).expressions, rhs );\n             }\n         }\n-        else if ( rhs instanceof And )\n+        else\n+        if ( rhs instanceof And )\n         {\n             expressions = expressions( lhs, ((And) rhs).expressions );\n         }\n         else\n-        {\n-            expressions = new Expression[] {lhs, rhs};\n-        }\n+            {\n+                expressions = new Expression[] { lhs, rhs };\n+            }\n+\n         return new And( expressions );\n     }\n \n     public static Expression or( final Expression lhs, final Expression rhs )\n     {\n-        if ( lhs == TRUE || rhs == TRUE )\n+        if ( lhs == TRUE|| rhs == TRUE )\n         {\n             return TRUE;\n         }\n+\n         if ( lhs == FALSE )\n         {\n             return rhs;\n         }\n+\n         if ( rhs == FALSE )\n         {\n             return lhs;\n         }\n+\n         Expression[] expressions;\n         if ( lhs instanceof Or )\n         {\n@@ -203,14 +213,16 @@ public abstract class Expression extends ExpressionTemplate\n                 expressions = expressions( ((Or) lhs).expressions, rhs );\n             }\n         }\n-        else if ( rhs instanceof Or )\n+        else\n+        if ( rhs instanceof Or )\n         {\n             expressions = expressions( lhs, ((Or) rhs).expressions );\n         }\n         else\n-        {\n-            expressions = new Expression[] {lhs, rhs};\n-        }\n+            {\n+                expressions = new Expression[] { lhs, rhs };\n+            }\n+\n         return new Or( expressions );\n     }\n \n@@ -283,159 +295,149 @@ public abstract class Expression extends ExpressionTemplate\n                 return isNull( rhs );\n             }\n         }\n-        else if ( rhs == NULL )\n+        else\n+        if ( rhs == NULL )\n         {\n             return isNull( lhs );\n         }\n+\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.equal( lhs, rhs );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.equal( lhs, rhs );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return notEqual( lhs, rhs );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return notEqual( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression isNull( final Expression expression )\n     {\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.isNull( expression );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.isNull( expression );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return notNull( expression );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return notNull( expression );\n+    }\n+};\n     }\n \n     public static Expression notNull( final Expression expression )\n     {\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.notNull( expression );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.notNull( expression );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return isNull( expression );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return isNull( expression );\n+    }\n+};\n     }\n \n     public static Expression notEqual( final Expression lhs, final Expression rhs )\n     {\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.notEqual( lhs, rhs );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.notEqual( lhs, rhs );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return equal( lhs, rhs );\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return equal( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression load( final LocalVariable variable )\n     {\n         return new Expression( variable.type() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.load( variable );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.load( variable );\n+    }\n+};\n     }\n \n     public static Expression add( final Expression lhs, final Expression rhs )\n     {\n-        if ( !lhs.type.equals( rhs.type ) )\n+        if ( ! lhs.type.equals( rhs.type ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format( \"Cannot add variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n+            throw new IllegalArgumentException( String.format( \"Cannot add variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(), rhs.type.simpleName() ) );\n         }\n \n         return new Expression( lhs.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.add( lhs, rhs );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.add( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression subtract( final Expression lhs, final Expression rhs )\n     {\n-        if ( !lhs.type.equals( rhs.type ) )\n+        if ( ! lhs.type.equals( rhs.type ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format(\n-                            \"Cannot subtract variables with different types. LHS %s, RHS %s\",\n-                            lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n+            throw new IllegalArgumentException( String.format( \"Cannot subtract variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(), rhs.type.simpleName() ) );\n         }\n+\n         return new Expression( lhs.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.subtract( lhs, rhs );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.subtract( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression multiply( final Expression lhs, final Expression rhs )\n     {\n-        if ( !lhs.type.equals( rhs.type ) )\n+        if ( ! lhs.type.equals( rhs.type ) )\n         {\n-            throw new IllegalArgumentException(\n-                    String.format(\n-                            \"Cannot multiply variables with different types. LHS %s, RHS %s\",\n-                            lhs.type.simpleName(),\n-                            rhs.type.simpleName() ) );\n+            throw new IllegalArgumentException( String.format( \"Cannot multiply variables with different types. LHS %s, RHS %s\", lhs.type.simpleName(), rhs.type.simpleName() ) );\n         }\n+\n         return new Expression( lhs.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.multiply( lhs, rhs );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.multiply( lhs, rhs );\n+    }\n+};\n     }\n \n     public static Expression constantInt( int value )\n     {\n-        return constant(value);\n+        return constant( value );\n     }\n \n     public static Expression constantLong( long value )\n     {\n-        return constant(value);\n+        return constant( value );\n     }\n \n     public static Expression constant( final Object value )\n@@ -445,43 +447,49 @@ public abstract class Expression extends ExpressionTemplate\n         {\n             return NULL;\n         }\n-        else if ( value instanceof String )\n+        else\n+        if ( value instanceof String )\n         {\n             reference = TypeReference.typeReference( String.class );\n         }\n-        else if ( value instanceof Long )\n-        {\n-            reference = LONG;\n-        }\n-        else if ( value instanceof Integer )\n-        {\n-            reference = INT;\n-        }\n-        else if ( value instanceof Double )\n-        {\n-            reference = DOUBLE;\n-        }\n-        else if ( value instanceof Boolean )\n-        {\n-            return (Boolean) value ? TRUE : FALSE;\n-        }\n-        else if ( value instanceof AnyValue )\n-        {\n-            reference = VALUE;\n-        }\n         else\n-        {\n-            throw new IllegalArgumentException( \"Not a valid constant!\" );\n-        }\n-\n-        return new Expression( reference )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n+            if ( value instanceof Long )\n+            {\n+                reference = LONG;\n+            }\n+                else\n+            if ( value instanceof Integer )\n+            {\n+                reference = INT;\n+            }\n+                else\n+            if ( value instanceof Double )\n+            {\n+                reference = DOUBLE;\n+            }\n+                else\n+            if ( value instanceof Boolean )\n             {\n-                visitor.constant( value );\n+                return (Boolean) value ? TRUE : FALSE;\n             }\n-        };\n+                else\n+            if ( value instanceof AnyValue )\n+            {\n+                reference = VALUE;\n+            }\n+                else\n+            {\n+                throw new IllegalArgumentException( \"Not a valid constant!\" );\n+            }\n+\n+        return new Expression( reference )\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.constant( value );\n+    }\n+};\n     }\n \n     private static class Constant extends Expression\n@@ -502,32 +510,35 @@ public abstract class Expression extends ExpressionTemplate\n     }\n \n     //TODO deduce type from constants\n+\n     public static Expression newArray( TypeReference baseType, Expression... constants )\n     {\n         return new Expression( arrayOf( baseType ) )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.newArray( baseType, constants );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.newArray( baseType, constants );\n+    }\n+};\n     }\n \n     /** get instance field */\n+\n     public static Expression get( final Expression target, final FieldReference field )\n     {\n         return new Expression( field.type() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.getField( target, field );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.getField( target, field );\n+    }\n+};\n     }\n \n     /** box expression */\n+\n     public static Expression box( final Expression expression )\n     {\n         TypeReference type = expression.type;\n@@ -563,17 +574,19 @@ public abstract class Expression extends ExpressionTemplate\n                 break;\n             }\n         }\n+\n         return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.box( expression );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.box( expression );\n+    }\n+};\n     }\n \n     /** unbox expression */\n+\n     public static Expression unbox( final Expression expression )\n     {\n         TypeReference type;\n@@ -606,66 +619,66 @@ public abstract class Expression extends ExpressionTemplate\n         default:\n             throw new IllegalStateException( \"Cannot unbox \" + expression.type.fullName() );\n         }\n+\n         return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.unbox( expression );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.unbox( expression );\n+    }\n+};\n     }\n \n     /** get static field */\n+\n     public static Expression getStatic( final FieldReference field )\n     {\n         return new Expression( field.type() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.getStatic( field );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.getStatic( field );\n+    }\n+};\n     }\n \n     public static Expression ternary( final Expression test, final Expression onTrue, final Expression onFalse )\n     {\n         TypeReference reference = onTrue.type.equals( onFalse.type ) ? onTrue.type : OBJECT;\n         return new Expression( reference )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.ternary( test, onTrue, onFalse );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.ternary( test, onTrue, onFalse );\n+    }\n+};\n     }\n \n-    public static Expression invoke(\n-            final Expression target, final MethodReference method,\n-            final Expression... arguments )\n+    public static Expression invoke( final Expression target, final MethodReference method, final Expression ... arguments )\n     {\n         return new Expression( method.returns() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.invoke( target, method, arguments );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.invoke( target, method, arguments );\n+    }\n+};\n     }\n \n-    public static Expression invoke( final MethodReference method, final Expression... parameters )\n+    public static Expression invoke( final MethodReference method, final Expression ... parameters )\n     {\n         return new Expression( method.returns() )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.invoke( method, parameters );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.invoke( method, parameters );\n+    }\n+};\n     }\n \n     public static Expression cast( Class<?> type, Expression expression )\n@@ -676,13 +689,13 @@ public abstract class Expression extends ExpressionTemplate\n     public static Expression cast( final TypeReference type, Expression expression )\n     {\n         return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.cast( type, expression );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.cast( type, expression );\n+    }\n+};\n     }\n \n     public static Expression newInstance( Class<?> type )\n@@ -693,13 +706,13 @@ public abstract class Expression extends ExpressionTemplate\n     public static Expression newInstance( final TypeReference type )\n     {\n         return new Expression( type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.newInstance( type );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.newInstance( type );\n+    }\n+};\n     }\n \n     public static Expression not( final Expression expression )\n@@ -714,55 +727,52 @@ public abstract class Expression extends ExpressionTemplate\n \n     private static Expression notExpr( final Expression expression )\n     {\n-        assert expression.type == BOOLEAN : \"Can only apply not() to boolean expressions\";\n+        assert expression.type == BOOLEAN: \"Can only apply not() to boolean expressions\";\n         return new Expression( BOOLEAN )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.not( expression );\n-            }\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.not( expression );\n+    }\n \n-            @Override\n-            Expression not()\n-            {\n-                return expression;\n-            }\n-        };\n+    @Override Expression not()\n+    {\n+        return expression;\n+    }\n+};\n     }\n \n     public static Expression toDouble( final Expression expression )\n     {\n         return new Expression( DOUBLE )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.longToDouble( expression );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.longToDouble( expression );\n+    }\n+};\n     }\n \n     public static Expression pop( Expression expression )\n     {\n         return new Expression( expression.type )\n-        {\n-            @Override\n-            public void accept( ExpressionVisitor visitor )\n-            {\n-                visitor.pop( expression );\n-            }\n-        };\n+{\n+    @Override\n+    public void accept( ExpressionVisitor visitor )\n+    {\n+        visitor.pop( expression );\n+    }\n+};\n     }\n \n-    @Override\n-    Expression materialize( CodeBlock method )\n+    @Override Expression materialize( CodeBlock method )\n     {\n         return this;\n     }\n \n-    @Override\n-    void templateAccept( CodeBlock method, ExpressionVisitor visitor )\n+    @Override void templateAccept( CodeBlock method, ExpressionVisitor visitor )\n     {\n         throw new UnsupportedOperationException( \"simple expressions should not be invoked as templates\" );\n     }\n@@ -774,4 +784,4 @@ public abstract class Expression extends ExpressionTemplate\n         accept( new ExpressionToString( result ) );\n         return result.append( ']' ).toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 373
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}