{
    "project_name": "zanata-zanata-platform",
    "error_id": "39",
    "information": {
        "errors": [
            {
                "line": "185",
                "column": "20",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    public int hashCode() {\n        assert false : \"hashCode not designed\";\n        return 42; // any arbitrary constant will do\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/39/AbstractStatistic.java\nindex 00425f8e08d..f5b6ba30827 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/39/AbstractStatistic.java\n@@ -182,6 +182,7 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n-        return 42; // any arbitrary constant will do\n-    }\n+        return 42;\n+    // any arbitrary constant will do\n+     }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "187",
                    "column": "16",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/39/AbstractStatistic.java\nindex 00425f8e08d..696984a80f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/39/AbstractStatistic.java\n@@ -9,179 +9,181 @@ import org.zanata.common.ContentState;\n  */\n public abstract class AbstractStatistic implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-\n-    private int approved;\n-    private int needReview;\n-    private int untranslated;\n-    private int translated;\n-    private int rejected;\n-\n-    protected AbstractStatistic() {\n-    }\n-\n-    protected AbstractStatistic(int approved, int needReview, int untranslated,\n-            int translated, int rejected) {\n-        this.approved = approved;\n-        this.needReview = needReview;\n-        this.untranslated = untranslated;\n-        this.translated = translated;\n-        this.rejected = rejected;\n-    }\n-\n-    public synchronized void increment(ContentState state, int count) {\n-        set(state, get(state) + count);\n-    }\n-\n-    public synchronized void decrement(ContentState state, int count) {\n-        set(state, get(state) - count);\n-    }\n-\n-    public synchronized void set(ContentState state, int value) {\n-        switch (state) {\n-        case Translated:\n-            translated = value;\n-            break;\n-        case NeedReview:\n-            needReview = value;\n-            break;\n-        case New:\n-            untranslated = value;\n-            break;\n-        case Approved:\n-            approved = value;\n-            break;\n-        case Rejected:\n-            rejected = value;\n-            break;\n-        default:\n-            throw new RuntimeException(\"not implemented for state \"\n-                    + state.name());\n-        }\n-    }\n-\n-    public synchronized int get(ContentState state) {\n-        switch (state) {\n-        case Translated:\n-            return translated;\n-        case NeedReview:\n-            return needReview;\n-        case New:\n-            return untranslated;\n-        case Approved:\n-            return approved;\n-        case Rejected:\n-            return rejected;\n-        default:\n-            throw new RuntimeException(\"not implemented for state \"\n-                    + state.name());\n-        }\n-    }\n-\n-    public synchronized void add(AbstractStatistic other) {\n-        approved += other.getApproved();\n-        needReview += other.getNeedReview();\n-        untranslated += other.getUntranslated();\n-        translated += other.getTranslated();\n-        rejected += other.getRejected();\n-    }\n-\n-    protected synchronized void set(AbstractStatistic other) {\n-        approved = other.getApproved();\n-        needReview = other.getNeedReview();\n-        untranslated = other.getUntranslated();\n-        translated = other.getTranslated();\n-        rejected = other.getRejected();\n-    }\n-\n-    public synchronized int getTotal() {\n-        return approved + needReview + untranslated + translated + rejected;\n-    }\n-\n-    public synchronized int getApproved() {\n-        return approved;\n-    }\n-\n-    public synchronized int getNeedReview() {\n-        return needReview;\n-    }\n-\n-    public synchronized int getUntranslated() {\n-        return untranslated;\n-    }\n-\n-    public synchronized int getTranslated() {\n-        return translated + approved;\n-    }\n-\n-    public synchronized int getRejected() {\n-        return rejected;\n-    }\n-\n-    public synchronized double getPercentage(ContentState contentState) {\n-        switch (contentState) {\n-            case Translated:\n-                return getPercentTranslated();\n-            case NeedReview:\n-                return getPercentFuzzy();\n-            case New:\n-                return getPercentUntranslated();\n-            case Approved:\n-                return getPercentApproved();\n-            case Rejected:\n-                return getPercentRejected();\n-            default:\n-                throw new RuntimeException(\"not implemented for state \"\n-                    + contentState.name());\n-        }\n-    }\n-\n-    public synchronized double getPercentTranslated() {\n-        return getPercentage(getTranslated());\n-    }\n-\n-    public synchronized double getPercentFuzzy() {\n-        return getPercentage(getNeedReview());\n-    }\n-\n-    public synchronized double getPercentRejected() {\n-        return getPercentage(getRejected());\n-    }\n-\n-    public synchronized double getPercentApproved() {\n-        return getPercentage(getApproved());\n-    }\n-\n-    public synchronized double getPercentUntranslated() {\n-        return getPercentage(getUntranslated());\n-    }\n-\n-    private double getPercentage(double value) {\n-        long total = getTotal();\n-        if (total <= 0) {\n-            return 0;\n-        }\n-        double percent = 100d * value / total;\n-        return percent;\n-    }\n-\n-    @Override\n-    public synchronized boolean equals(Object obj) {\n-        if (obj == this)\n-            return true;\n-        if (obj == null)\n-            return false;\n-        if (obj instanceof AbstractStatistic) {\n-            AbstractStatistic o = (AbstractStatistic) obj;\n-            return (approved == o.getApproved() && needReview == o.getNeedReview()\n-                    && untranslated == o.getUntranslated()\n-                    && translated == o.getTranslated() && rejected == o.getRejected());\n-        }\n-        return false;\n-    }\n-\n-    public int hashCode() {\n-        assert false : \"hashCode not designed\";\n-        return 42; // any arbitrary constant will do\n-    }\n+  private static final long serialVersionUID = 1L;\n+\n+  private int approved;\n+  private int needReview;\n+  private int untranslated;\n+  private int translated;\n+  private int rejected;\n+\n+  protected AbstractStatistic() {\n+  }\n+\n+  protected AbstractStatistic(int approved, int needReview, int untranslated,\n+                              int translated, int rejected) {\n+    this.approved = approved;\n+    this.needReview = needReview;\n+    this.untranslated = untranslated;\n+    this.translated = translated;\n+    this.rejected = rejected;\n+  }\n+\n+  public synchronized void increment(ContentState state, int count) {\n+    set(state, get(state) + count);\n+  }\n+\n+  public synchronized void decrement(ContentState state, int count) {\n+    set(state, get(state) - count);\n+  }\n+\n+  public synchronized void set(ContentState state, int value) {\n+    switch (state) {\n+    case Translated:\n+      translated = value;\n+      break;\n+    case NeedReview:\n+      needReview = value;\n+      break;\n+    case New:\n+      untranslated = value;\n+      break;\n+    case Approved:\n+      approved = value;\n+      break;\n+    case Rejected:\n+      rejected = value;\n+      break;\n+    default:\n+      throw new RuntimeException(\"not implemented for state \"\n+        + state.name());\n+    }\n+  }\n+\n+  public synchronized int get(ContentState state) {\n+    switch (state) {\n+    case Translated:\n+      return translated;\n+    case NeedReview:\n+      return needReview;\n+    case New:\n+      return untranslated;\n+    case Approved:\n+      return approved;\n+    case Rejected:\n+      return rejected;\n+    default:\n+      throw new RuntimeException(\"not implemented for state \"\n+        + state.name());\n+    }\n+  }\n+\n+  public synchronized void add(AbstractStatistic other) {\n+    approved += other.getApproved();\n+    needReview += other.getNeedReview();\n+    untranslated += other.getUntranslated();\n+    translated += other.getTranslated();\n+    rejected += other.getRejected();\n+  }\n+\n+  protected synchronized void set(AbstractStatistic other) {\n+    approved = other.getApproved();\n+    needReview = other.getNeedReview();\n+    untranslated = other.getUntranslated();\n+    translated = other.getTranslated();\n+    rejected = other.getRejected();\n+  }\n+\n+  public synchronized int getTotal() {\n+    return approved + needReview + untranslated + translated + rejected;\n+  }\n+\n+  public synchronized int getApproved() {\n+    return approved;\n+  }\n+\n+  public synchronized int getNeedReview() {\n+    return needReview;\n+  }\n+\n+  public synchronized int getUntranslated() {\n+    return untranslated;\n+  }\n+\n+  public synchronized int getTranslated() {\n+    return translated + approved;\n+  }\n+\n+  public synchronized int getRejected() {\n+    return rejected;\n+  }\n+\n+  public synchronized double getPercentage(ContentState contentState) {\n+    switch (contentState) {\n+    case Translated:\n+      return getPercentTranslated();\n+    case NeedReview:\n+      return getPercentFuzzy();\n+    case New:\n+      return getPercentUntranslated();\n+    case Approved:\n+      return getPercentApproved();\n+    case Rejected:\n+      return getPercentRejected();\n+    default:\n+      throw new RuntimeException(\"not implemented for state \"\n+        + contentState.name());\n+    }\n+  }\n+\n+  public synchronized double getPercentTranslated() {\n+    return getPercentage(getTranslated());\n+  }\n+\n+  public synchronized double getPercentFuzzy() {\n+    return getPercentage(getNeedReview());\n+  }\n+\n+  public synchronized double getPercentRejected() {\n+    return getPercentage(getRejected());\n+  }\n+\n+  public synchronized double getPercentApproved() {\n+    return getPercentage(getApproved());\n+  }\n+\n+  public synchronized double getPercentUntranslated() {\n+    return getPercentage(getUntranslated());\n+  }\n+\n+  private double getPercentage(double value) {\n+    long total = getTotal();\n+    if (total <= 0) {\n+      return 0;\n+    }\n+    double percent = 100d * value / total;\n+    return percent;\n+  }\n+\n+  @Override\n+  public synchronized boolean equals(Object obj) {\n+    if (obj == this) {\n+      return true;\n+    }\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (obj instanceof AbstractStatistic) {\n+      AbstractStatistic o = (AbstractStatistic) obj;\n+      return (approved == o.getApproved() && needReview == o.getNeedReview()\n+        && untranslated == o.getUntranslated()\n+        && translated == o.getTranslated() && rejected == o.getRejected());\n+    }\n+    return false;\n+  }\n+\n+  public int hashCode() {\n+    assert false : \"hashCode not designed\";\n+    return 42; // any arbitrary constant will do\n+  }\n }\n",
            "diff_size": 177
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/39/AbstractStatistic.java\nindex 00425f8e08d..d2bedb2548e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/39/AbstractStatistic.java\n@@ -182,6 +182,7 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n-        return 42; // any arbitrary constant will do\n+        return 42;\n+// any arbitrary constant will do\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "181",
                    "column": "20",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/39/AbstractStatistic.java\nindex 00425f8e08d..81f57ae05f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/39/AbstractStatistic.java\n@@ -1,16 +1,15 @@\n package org.zanata.ui.model.statistic;\n \n import java.io.Serializable;\n-\n import org.zanata.common.ContentState;\n \n /**\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n-public abstract class AbstractStatistic implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n \n+public abstract class AbstractStatistic implements Serializable {\n+    private static final long serialVersionUID = 1L;\n     private int approved;\n     private int needReview;\n     private int untranslated;\n@@ -20,8 +19,7 @@ public abstract class AbstractStatistic implements Serializable {\n     protected AbstractStatistic() {\n     }\n \n-    protected AbstractStatistic(int approved, int needReview, int untranslated,\n-            int translated, int rejected) {\n+    protected AbstractStatistic(int approved, int needReview, int untranslated, int translated, int rejected) {\n         this.approved = approved;\n         this.needReview = needReview;\n         this.untranslated = untranslated;\n@@ -55,8 +53,7 @@ public abstract class AbstractStatistic implements Serializable {\n             rejected = value;\n             break;\n         default:\n-            throw new RuntimeException(\"not implemented for state \"\n-                    + state.name());\n+            throw new RuntimeException(\"not implemented for state \" + state.name());\n         }\n     }\n \n@@ -73,8 +70,7 @@ public abstract class AbstractStatistic implements Serializable {\n         case Rejected:\n             return rejected;\n         default:\n-            throw new RuntimeException(\"not implemented for state \"\n-                    + state.name());\n+            throw new RuntimeException(\"not implemented for state \" + state.name());\n         }\n     }\n \n@@ -120,19 +116,18 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public synchronized double getPercentage(ContentState contentState) {\n         switch (contentState) {\n-            case Translated:\n-                return getPercentTranslated();\n-            case NeedReview:\n-                return getPercentFuzzy();\n-            case New:\n-                return getPercentUntranslated();\n-            case Approved:\n-                return getPercentApproved();\n-            case Rejected:\n-                return getPercentRejected();\n-            default:\n-                throw new RuntimeException(\"not implemented for state \"\n-                    + contentState.name());\n+        case Translated:\n+            return getPercentTranslated();\n+        case NeedReview:\n+            return getPercentFuzzy();\n+        case New:\n+            return getPercentUntranslated();\n+        case Approved:\n+            return getPercentApproved();\n+        case Rejected:\n+            return getPercentRejected();\n+        default:\n+            throw new RuntimeException(\"not implemented for state \" + contentState.name());\n         }\n     }\n \n@@ -174,8 +169,9 @@ public abstract class AbstractStatistic implements Serializable {\n         if (obj instanceof AbstractStatistic) {\n             AbstractStatistic o = (AbstractStatistic) obj;\n             return (approved == o.getApproved() && needReview == o.getNeedReview()\n-                    && untranslated == o.getUntranslated()\n-                    && translated == o.getTranslated() && rejected == o.getRejected());\n+            && untranslated == o.getUntranslated()\n+            && translated == o.getTranslated()\n+            && rejected == o.getRejected());\n         }\n         return false;\n     }\n@@ -184,4 +180,4 @@ public abstract class AbstractStatistic implements Serializable {\n         assert false : \"hashCode not designed\";\n         return 42; // any arbitrary constant will do\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/39/AbstractStatistic.java\nindex 00425f8e08d..f5b6ba30827 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/39/AbstractStatistic.java\n@@ -182,6 +182,7 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n-        return 42; // any arbitrary constant will do\n-    }\n+        return 42;\n+    // any arbitrary constant will do\n+     }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/39/AbstractStatistic.java\nindex 00425f8e08d..2946040e373 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/39/AbstractStatistic.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/39/AbstractStatistic.java\n@@ -182,6 +182,7 @@ public abstract class AbstractStatistic implements Serializable {\n \n     public int hashCode() {\n         assert false : \"hashCode not designed\";\n-        return 42; // any arbitrary constant will do\n-    }\n+        return 42;\n+        // any arbitrary constant will do\n+     }\n }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}