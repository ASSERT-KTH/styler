{
    "project_name": "neo4j-neo4j",
    "error_id": "1635",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "130",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "96",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "column": "175",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "104",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "104",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "column": "183",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "101",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "column": "180",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "114",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1635/NativeIndexUpdater.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1635/NativeIndexUpdater.java\nindex c292b31fb48..3efefd34a7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1635/NativeIndexUpdater.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1635/NativeIndexUpdater.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.index.internal.gbptree.Writer;\n@@ -30,26 +31,26 @@ import org.neo4j.values.storable.Value;\n import static org.neo4j.kernel.impl.index.schema.NativeIndexKey.Inclusion.NEUTRAL;\n \n class NativeIndexUpdater<KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue>\n-        implements IndexUpdater\n+  implements IndexUpdater\n {\n     private final KEY treeKey;\n     private final VALUE treeValue;\n-    private final ConflictDetectingValueMerger<KEY,VALUE,Value[]> conflictDetectingValueMerger = new ThrowingConflictDetector<>( true );\n-    private Writer<KEY,VALUE> writer;\n+    private final ConflictDetectingValueMerger<KEY, VALUE, Value[]> conflictDetectingValueMerger = new ThrowingConflictDetector<>(true);\n+    private Writer<KEY, VALUE> writer;\n \n     private boolean closed = true;\n \n-    NativeIndexUpdater( KEY treeKey, VALUE treeValue )\n+    NativeIndexUpdater(KEY treeKey, VALUE treeValue)\n     {\n         this.treeKey = treeKey;\n         this.treeValue = treeValue;\n     }\n \n-    NativeIndexUpdater<KEY,VALUE> initialize( Writer<KEY,VALUE> writer )\n+    NativeIndexUpdater<KEY, VALUE> initialize(Writer<KEY, VALUE> writer)\n     {\n-        if ( !closed )\n+        if (!closed)\n         {\n-            throw new IllegalStateException( \"Updater still open\" );\n+            throw new IllegalStateException(\"Updater still open\");\n         }\n \n         this.writer = writer;\n@@ -58,96 +59,100 @@ class NativeIndexUpdater<KEY extends NativeIndexKey<KEY>, VALUE extends NativeIn\n     }\n \n     @Override\n-    public void process( IndexEntryUpdate<?> update ) throws IndexEntryConflictException\n+    public void process(IndexEntryUpdate<?> update) throws IndexEntryConflictException\n     {\n         assertOpen();\n-        ValueIndexEntryUpdate<?> valueUpdate = asValueUpdate( update );\n-        processUpdate( treeKey, treeValue, valueUpdate, writer, conflictDetectingValueMerger );\n+        ValueIndexEntryUpdate<?> valueUpdate = asValueUpdate(update);\n+        processUpdate(treeKey, treeValue, valueUpdate, writer, conflictDetectingValueMerger);\n     }\n \n     @Override\n     public void close()\n     {\n         closed = true;\n-        IOUtils.closeAllUnchecked( writer );\n+        IOUtils.closeAllUnchecked(writer);\n     }\n \n     private void assertOpen()\n     {\n-        if ( closed )\n+        if (closed)\n         {\n-            throw new IllegalStateException( \"Updater has been closed\" );\n+            throw new IllegalStateException(\"Updater has been closed\");\n         }\n     }\n \n-    static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processUpdate( KEY treeKey, VALUE treeValue,\n-            ValueIndexEntryUpdate<?> update, Writer<KEY,VALUE> writer, ConflictDetectingValueMerger<KEY,VALUE,Value[]> conflictDetectingValueMerger )\n-            throws IndexEntryConflictException\n+    static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processUpdate(KEY treeKey, VALUE treeValue,\n+                                                                                                ValueIndexEntryUpdate<?> update, Writer<KEY, VALUE> writer,\n+                                                                                                ConflictDetectingValueMerger<KEY, VALUE, Value[]> conflictDetectingValueMerger)\n+      throws IndexEntryConflictException\n     {\n-        switch ( update.updateMode() )\n+        switch (update.updateMode())\n         {\n-        case ADDED:\n-            processAdd( treeKey, treeValue, update, writer, conflictDetectingValueMerger );\n-            break;\n-        case CHANGED:\n-            processChange( treeKey, treeValue, update, writer, conflictDetectingValueMerger );\n-            break;\n-        case REMOVED:\n-            processRemove( treeKey, update, writer );\n-            break;\n-        default:\n-            throw new IllegalArgumentException();\n+            case ADDED:\n+                processAdd(treeKey, treeValue, update, writer, conflictDetectingValueMerger);\n+                break;\n+            case CHANGED:\n+                processChange(treeKey, treeValue, update, writer, conflictDetectingValueMerger);\n+                break;\n+            case REMOVED:\n+                processRemove(treeKey, update, writer);\n+                break;\n+            default:\n+                throw new IllegalArgumentException();\n         }\n     }\n \n-    private static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processRemove( KEY treeKey,\n-            ValueIndexEntryUpdate<?> update, Writer<KEY,VALUE> writer )\n+    private static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processRemove(KEY treeKey,\n+                                                                                                        ValueIndexEntryUpdate<?> update,\n+                                                                                                        Writer<KEY, VALUE> writer)\n     {\n         // todo Do we need to verify that we actually removed something at all?\n         // todo Difference between online and recovery?\n-        initializeKeyFromUpdate( treeKey, update.getEntityId(), update.values() );\n-        writer.remove( treeKey );\n+        initializeKeyFromUpdate(treeKey, update.getEntityId(), update.values());\n+        writer.remove(treeKey);\n     }\n \n-    private static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processChange( KEY treeKey, VALUE treeValue,\n-            ValueIndexEntryUpdate<?> update, Writer<KEY,VALUE> writer,\n-            ConflictDetectingValueMerger<KEY,VALUE,Value[]> conflictDetectingValueMerger )\n-            throws IndexEntryConflictException\n+    private static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processChange(KEY treeKey, VALUE treeValue,\n+                                                                                                        ValueIndexEntryUpdate<?> update,\n+                                                                                                        Writer<KEY, VALUE> writer,\n+                                                                                                        ConflictDetectingValueMerger<KEY, VALUE, Value[]> conflictDetectingValueMerger)\n+      throws IndexEntryConflictException\n     {\n         // Remove old entry\n-        initializeKeyFromUpdate( treeKey, update.getEntityId(), update.beforeValues() );\n-        writer.remove( treeKey );\n+        initializeKeyFromUpdate(treeKey, update.getEntityId(), update.beforeValues());\n+        writer.remove(treeKey);\n         // Insert new entry\n-        initializeKeyFromUpdate( treeKey, update.getEntityId(), update.values() );\n-        treeValue.from( update.values() );\n-        conflictDetectingValueMerger.controlConflictDetection( treeKey );\n-        writer.merge( treeKey, treeValue, conflictDetectingValueMerger );\n-        conflictDetectingValueMerger.checkConflict( update.values() );\n+        initializeKeyFromUpdate(treeKey, update.getEntityId(), update.values());\n+        treeValue.from(update.values());\n+        conflictDetectingValueMerger.controlConflictDetection(treeKey);\n+        writer.merge(treeKey, treeValue, conflictDetectingValueMerger);\n+        conflictDetectingValueMerger.checkConflict(update.values());\n     }\n \n-    private static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processAdd( KEY treeKey, VALUE treeValue,\n-            ValueIndexEntryUpdate<?> update, Writer<KEY,VALUE> writer, ConflictDetectingValueMerger<KEY,VALUE,Value[]> conflictDetectingValueMerger )\n-            throws IndexEntryConflictException\n+    private static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void processAdd(KEY treeKey, VALUE treeValue,\n+                                                                                                     ValueIndexEntryUpdate<?> update, Writer<KEY, VALUE> writer,\n+                                                                                                     ConflictDetectingValueMerger<KEY, VALUE, Value[]> conflictDetectingValueMerger)\n+      throws IndexEntryConflictException\n     {\n-        initializeKeyAndValueFromUpdate( treeKey, treeValue, update.getEntityId(), update.values() );\n-        conflictDetectingValueMerger.controlConflictDetection( treeKey );\n-        writer.merge( treeKey, treeValue, conflictDetectingValueMerger );\n-        conflictDetectingValueMerger.checkConflict( update.values() );\n+        initializeKeyAndValueFromUpdate(treeKey, treeValue, update.getEntityId(), update.values());\n+        conflictDetectingValueMerger.controlConflictDetection(treeKey);\n+        writer.merge(treeKey, treeValue, conflictDetectingValueMerger);\n+        conflictDetectingValueMerger.checkConflict(update.values());\n     }\n \n-    static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void initializeKeyAndValueFromUpdate( KEY treeKey, VALUE treeValue,\n-            long entityId, Value[] values )\n+    static <KEY extends NativeIndexKey<KEY>, VALUE extends NativeIndexValue> void initializeKeyAndValueFromUpdate(KEY treeKey, VALUE treeValue,\n+                                                                                                                  long entityId, Value[] values)\n     {\n-        initializeKeyFromUpdate( treeKey, entityId, values );\n-        treeValue.from( values );\n+        initializeKeyFromUpdate(treeKey, entityId, values);\n+        treeValue.from(values);\n     }\n \n-    static <KEY extends NativeIndexKey<KEY>> void initializeKeyFromUpdate( KEY treeKey, long entityId, Value[] values )\n+    static <KEY extends NativeIndexKey<KEY>> void initializeKeyFromUpdate(KEY treeKey, long entityId, Value[] values)\n     {\n-        treeKey.initialize( entityId );\n-        for ( int i = 0; i < values.length; i++ )\n+        treeKey.initialize(entityId);\n+        for (int i = 0; i < values.length; i++)\n         {\n-            treeKey.initFromValue( i, values[i], NEUTRAL );\n+            treeKey.initFromValue(i, values[i], NEUTRAL);\n         }\n     }\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}