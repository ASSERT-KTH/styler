{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "79",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Autowired private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n\n    private final UnidentifiedIncomingObjectService unknownChargePointService = new UnidentifiedIncomingObjectService(100);\n\n    @Override\n    public Optional<RegistrationStatus> getRegistrationStatus(String chargeBoxId) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/9/ChargePointHelperServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/9/ChargePointHelperServiceImpl.java\nindex 4787d634ae7..72d4e166eee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/9/ChargePointHelperServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/9/ChargePointHelperServiceImpl.java\n@@ -16,6 +16,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n+\n package de.rwth.idsg.steve.service;\n \n import com.google.common.util.concurrent.Striped;\n@@ -63,170 +64,176 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n @Service\n public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n \n-    private final boolean autoRegisterUnknownStations = CONFIG.getOcpp().isAutoRegisterUnknownStations();\n-    private final Striped<Lock> isRegisteredLocks = Striped.lock(16);\n-\n-    @Autowired private GenericRepository genericRepository;\n-\n-    // SOAP-based charge points are stored in DB with an endpoint address\n-    @Autowired private ChargePointRepository chargePointRepository;\n-\n-    // For WebSocket-based charge points, the active sessions are stored in memory\n-    @Autowired private Ocpp12WebSocketEndpoint ocpp12WebSocketEndpoint;\n-    @Autowired private Ocpp15WebSocketEndpoint ocpp15WebSocketEndpoint;\n-    @Autowired private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n-\n-    private final UnidentifiedIncomingObjectService unknownChargePointService = new UnidentifiedIncomingObjectService(100);\n-\n-    @Override\n-    public Optional<RegistrationStatus> getRegistrationStatus(String chargeBoxId) {\n-        Lock l = isRegisteredLocks.get(chargeBoxId);\n-        l.lock();\n-        try {\n-            Optional<RegistrationStatus> status = getRegistrationStatusInternal(chargeBoxId);\n-            if (status.isEmpty()) {\n-                unknownChargePointService.processNewUnidentified(chargeBoxId);\n-            }\n-            return status;\n-        } finally {\n-            l.unlock();\n-        }\n-    }\n-\n-    @Override\n-    public Statistics getStats() {\n-        Statistics stats = genericRepository.getStats();\n-        stats.setNumOcpp12JChargeBoxes(ocpp12WebSocketEndpoint.getNumberOfChargeBoxes());\n-        stats.setNumOcpp15JChargeBoxes(ocpp15WebSocketEndpoint.getNumberOfChargeBoxes());\n-        stats.setNumOcpp16JChargeBoxes(ocpp16WebSocketEndpoint.getNumberOfChargeBoxes());\n-\n-        List<ConnectorStatus> latestList = chargePointRepository.getChargePointConnectorStatus();\n-        stats.setStatusCountMap(ConnectorStatusCountFilter.getStatusCountMap(latestList));\n-\n-        return stats;\n-    }\n-\n-    @Override\n-    public List<OcppJsonStatus> getOcppJsonStatus() {\n-        Map<String, Deque<SessionContext>> ocpp12Map = ocpp12WebSocketEndpoint.getACopy();\n-        Map<String, Deque<SessionContext>> ocpp15Map = ocpp15WebSocketEndpoint.getACopy();\n-        Map<String, Deque<SessionContext>> ocpp16Map = ocpp16WebSocketEndpoint.getACopy();\n-\n-        List<String> idList = extractIds(Arrays.asList(ocpp12Map, ocpp15Map, ocpp16Map));\n-        Map<String, Integer> primaryKeyLookup = chargePointRepository.getChargeBoxIdPkPair(idList);\n-\n-        DateTime now = DateTime.now();\n-        List<OcppJsonStatus> returnList = new ArrayList<>();\n-\n-        appendList(ocpp12Map, returnList, now, OcppVersion.V_12, primaryKeyLookup);\n-        appendList(ocpp15Map, returnList, now, OcppVersion.V_15, primaryKeyLookup);\n-        appendList(ocpp16Map, returnList, now, OcppVersion.V_16, primaryKeyLookup);\n-        return returnList;\n+  private final boolean autoRegisterUnknownStations = CONFIG.getOcpp().isAutoRegisterUnknownStations();\n+  private final Striped<Lock> isRegisteredLocks = Striped.lock(16);\n+\n+  @Autowired\n+  private GenericRepository genericRepository;\n+\n+  // SOAP-based charge points are stored in DB with an endpoint address\n+  @Autowired\n+  private ChargePointRepository chargePointRepository;\n+\n+  // For WebSocket-based charge points, the active sessions are stored in memory\n+  @Autowired\n+  private Ocpp12WebSocketEndpoint ocpp12WebSocketEndpoint;\n+  @Autowired\n+  private Ocpp15WebSocketEndpoint ocpp15WebSocketEndpoint;\n+  @Autowired\n+  private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n+\n+  private final UnidentifiedIncomingObjectService unknownChargePointService =\n+    new UnidentifiedIncomingObjectService(100);\n+\n+  @Override\n+  public Optional<RegistrationStatus> getRegistrationStatus(String chargeBoxId) {\n+    Lock l = isRegisteredLocks.get(chargeBoxId);\n+    l.lock();\n+    try {\n+      Optional<RegistrationStatus> status = getRegistrationStatusInternal(chargeBoxId);\n+      if (status.isEmpty()) {\n+        unknownChargePointService.processNewUnidentified(chargeBoxId);\n+      }\n+      return status;\n+    } finally {\n+      l.unlock();\n     }\n-\n-    @Override\n-    public List<ChargePointSelect> getChargePoints(OcppVersion version, List<RegistrationStatus> inStatusFilter) {\n-        switch (version) {\n-            case V_12:\n-                return getChargePoints(OcppProtocol.V_12_SOAP, inStatusFilter, ocpp12WebSocketEndpoint);\n-            case V_15:\n-                return getChargePoints(OcppProtocol.V_15_SOAP, inStatusFilter, ocpp15WebSocketEndpoint);\n-            case V_16:\n-                return getChargePoints(OcppProtocol.V_16_SOAP, inStatusFilter, ocpp16WebSocketEndpoint);\n-            default:\n-                throw new IllegalArgumentException(\"Unknown OCPP version: \" + version);\n-        }\n+  }\n+\n+  @Override\n+  public Statistics getStats() {\n+    Statistics stats = genericRepository.getStats();\n+    stats.setNumOcpp12JChargeBoxes(ocpp12WebSocketEndpoint.getNumberOfChargeBoxes());\n+    stats.setNumOcpp15JChargeBoxes(ocpp15WebSocketEndpoint.getNumberOfChargeBoxes());\n+    stats.setNumOcpp16JChargeBoxes(ocpp16WebSocketEndpoint.getNumberOfChargeBoxes());\n+\n+    List<ConnectorStatus> latestList = chargePointRepository.getChargePointConnectorStatus();\n+    stats.setStatusCountMap(ConnectorStatusCountFilter.getStatusCountMap(latestList));\n+\n+    return stats;\n+  }\n+\n+  @Override\n+  public List<OcppJsonStatus> getOcppJsonStatus() {\n+    Map<String, Deque<SessionContext>> ocpp12Map = ocpp12WebSocketEndpoint.getACopy();\n+    Map<String, Deque<SessionContext>> ocpp15Map = ocpp15WebSocketEndpoint.getACopy();\n+    Map<String, Deque<SessionContext>> ocpp16Map = ocpp16WebSocketEndpoint.getACopy();\n+\n+    List<String> idList = extractIds(Arrays.asList(ocpp12Map, ocpp15Map, ocpp16Map));\n+    Map<String, Integer> primaryKeyLookup = chargePointRepository.getChargeBoxIdPkPair(idList);\n+\n+    DateTime now = DateTime.now();\n+    List<OcppJsonStatus> returnList = new ArrayList<>();\n+\n+    appendList(ocpp12Map, returnList, now, OcppVersion.V_12, primaryKeyLookup);\n+    appendList(ocpp15Map, returnList, now, OcppVersion.V_15, primaryKeyLookup);\n+    appendList(ocpp16Map, returnList, now, OcppVersion.V_16, primaryKeyLookup);\n+    return returnList;\n+  }\n+\n+  @Override\n+  public List<ChargePointSelect> getChargePoints(OcppVersion version, List<RegistrationStatus> inStatusFilter) {\n+    switch (version) {\n+      case V_12:\n+        return getChargePoints(OcppProtocol.V_12_SOAP, inStatusFilter, ocpp12WebSocketEndpoint);\n+      case V_15:\n+        return getChargePoints(OcppProtocol.V_15_SOAP, inStatusFilter, ocpp15WebSocketEndpoint);\n+      case V_16:\n+        return getChargePoints(OcppProtocol.V_16_SOAP, inStatusFilter, ocpp16WebSocketEndpoint);\n+      default:\n+        throw new IllegalArgumentException(\"Unknown OCPP version: \" + version);\n     }\n-\n-    @Override\n-    public List<UnidentifiedIncomingObject> getUnknownChargePoints() {\n-        return unknownChargePointService.getObjects();\n+  }\n+\n+  @Override\n+  public List<UnidentifiedIncomingObject> getUnknownChargePoints() {\n+    return unknownChargePointService.getObjects();\n+  }\n+\n+  @Override\n+  public void removeUnknown(String chargeBoxId) {\n+    unknownChargePointService.remove(chargeBoxId);\n+  }\n+\n+  @Override\n+  public void removeUnknown(List<String> chargeBoxIdList) {\n+    unknownChargePointService.removeAll(chargeBoxIdList);\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // Helpers\n+  // -------------------------------------------------------------------------\n+\n+  private Optional<RegistrationStatus> getRegistrationStatusInternal(String chargeBoxId) {\n+    // 1. exit if already registered\n+    Optional<String> status = chargePointRepository.getRegistrationStatus(chargeBoxId);\n+    if (status.isPresent()) {\n+      try {\n+        return Optional.ofNullable(RegistrationStatus.fromValue(status.get()));\n+      } catch (Exception e) {\n+        // in cases where the database entry (string) is altered, and therefore cannot be converted to enum\n+        log.error(\"Exception happened\", e);\n+        return Optional.empty();\n+      }\n     }\n \n-    @Override\n-    public void removeUnknown(String chargeBoxId) {\n-        unknownChargePointService.remove(chargeBoxId);\n+    // 2. ok, this chargeBoxId is unknown. exit if auto-register is disabled\n+    if (!autoRegisterUnknownStations) {\n+      return Optional.empty();\n     }\n \n-    @Override\n-    public void removeUnknown(List<String> chargeBoxIdList) {\n-        unknownChargePointService.removeAll(chargeBoxIdList);\n+    // 3. chargeBoxId is unknown and auto-register is enabled. insert chargeBoxId\n+    try {\n+      chargePointRepository.addChargePointList(Collections.singletonList(chargeBoxId));\n+      log.warn(\"Auto-registered unknown chargebox '{}'\", chargeBoxId);\n+      return Optional.of(RegistrationStatus.ACCEPTED); // default db value is accepted\n+    } catch (Exception e) {\n+      log.error(\"Failed to auto-register unknown chargebox '\" + chargeBoxId + \"'\", e);\n+      return Optional.empty();\n     }\n+  }\n \n-    // -------------------------------------------------------------------------\n-    // Helpers\n-    // -------------------------------------------------------------------------\n-\n-    private Optional<RegistrationStatus> getRegistrationStatusInternal(String chargeBoxId) {\n-        // 1. exit if already registered\n-        Optional<String> status = chargePointRepository.getRegistrationStatus(chargeBoxId);\n-        if (status.isPresent()) {\n-            try {\n-                return Optional.ofNullable(RegistrationStatus.fromValue(status.get()));\n-            } catch (Exception e) {\n-                // in cases where the database entry (string) is altered, and therefore cannot be converted to enum\n-                log.error(\"Exception happened\", e);\n-                return Optional.empty();\n-            }\n-        }\n-\n-        // 2. ok, this chargeBoxId is unknown. exit if auto-register is disabled\n-        if (!autoRegisterUnknownStations) {\n-            return Optional.empty();\n-        }\n-\n-        // 3. chargeBoxId is unknown and auto-register is enabled. insert chargeBoxId\n-        try {\n-            chargePointRepository.addChargePointList(Collections.singletonList(chargeBoxId));\n-            log.warn(\"Auto-registered unknown chargebox '{}'\", chargeBoxId);\n-            return Optional.of(RegistrationStatus.ACCEPTED); // default db value is accepted\n-        } catch (Exception e) {\n-            log.error(\"Failed to auto-register unknown chargebox '\" + chargeBoxId + \"'\", e);\n-            return Optional.empty();\n-        }\n-    }\n-\n-    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter,\n-                                                    AbstractWebSocketEndpoint jsonEndpoint) {\n-        List<String> statusFilter = inStatusFilter.stream()\n-                                                  .map(RegistrationStatus::value)\n-                                                  .collect(Collectors.toList());\n-\n-        List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n-        for (String chargeBoxId : jsonEndpoint.getChargeBoxIdList()) {\n-            returnList.add(new ChargePointSelect(OcppTransport.JSON, chargeBoxId));\n-        }\n-        return returnList;\n-    }\n+  private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter,\n+                                                  AbstractWebSocketEndpoint jsonEndpoint) {\n+    List<String> statusFilter = inStatusFilter.stream()\n+      .map(RegistrationStatus::value)\n+      .collect(Collectors.toList());\n \n-    private static List<String> extractIds(List<Map<String, Deque<SessionContext>>> ocppMaps) {\n-        return ocppMaps.stream()\n-                       .map(Map::keySet)\n-                       .flatMap(Collection::stream)\n-                       .collect(Collectors.toList());\n+    List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n+    for (String chargeBoxId : jsonEndpoint.getChargeBoxIdList()) {\n+      returnList.add(new ChargePointSelect(OcppTransport.JSON, chargeBoxId));\n     }\n-\n-    private static void appendList(Map<String, Deque<SessionContext>> map, List<OcppJsonStatus> returnList,\n-                                   DateTime now, OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n-\n-        for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n-            String chargeBoxId = entry.getKey();\n-            Deque<SessionContext> endpointDeque = entry.getValue();\n-\n-            for (SessionContext ctx : endpointDeque) {\n-                DateTime openSince = ctx.getOpenSince();\n-\n-                OcppJsonStatus status = OcppJsonStatus.builder()\n-                                                      .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n-                                                      .chargeBoxId(chargeBoxId)\n-                                                      .connectedSinceDT(openSince)\n-                                                      .connectedSince(DateTimeUtils.humanize(openSince))\n-                                                      .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n-                                                      .version(version)\n-                                                      .build();\n-\n-                returnList.add(status);\n-            }\n-        }\n+    return returnList;\n+  }\n+\n+  private static List<String> extractIds(List<Map<String, Deque<SessionContext>>> ocppMaps) {\n+    return ocppMaps.stream()\n+      .map(Map::keySet)\n+      .flatMap(Collection::stream)\n+      .collect(Collectors.toList());\n+  }\n+\n+  private static void appendList(Map<String, Deque<SessionContext>> map, List<OcppJsonStatus> returnList,\n+                                 DateTime now, OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n+\n+    for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n+      String chargeBoxId = entry.getKey();\n+      Deque<SessionContext> endpointDeque = entry.getValue();\n+\n+      for (SessionContext ctx : endpointDeque) {\n+        DateTime openSince = ctx.getOpenSince();\n+\n+        OcppJsonStatus status = OcppJsonStatus.builder()\n+          .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n+          .chargeBoxId(chargeBoxId)\n+          .connectedSinceDT(openSince)\n+          .connectedSince(DateTimeUtils.humanize(openSince))\n+          .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n+          .version(version)\n+          .build();\n+\n+        returnList.add(status);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 230
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/9/ChargePointHelperServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/9/ChargePointHelperServiceImpl.java\nindex 4787d634ae7..e187eff7d2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/9/ChargePointHelperServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/9/ChargePointHelperServiceImpl.java\n@@ -15,8 +15,7 @@\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n- */\n-package de.rwth.idsg.steve.service;\n+ */package de.rwth.idsg.steve.service;\n \n import com.google.common.util.concurrent.Striped;\n import de.rwth.idsg.steve.ocpp.OcppProtocol;\n@@ -179,20 +178,18 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         try {\n             chargePointRepository.addChargePointList(Collections.singletonList(chargeBoxId));\n             log.warn(\"Auto-registered unknown chargebox '{}'\", chargeBoxId);\n-            return Optional.of(RegistrationStatus.ACCEPTED); // default db value is accepted\n+            return Optional.of(RegistrationStatus.ACCEPTED);\n+// default db value is accepted\n         } catch (Exception e) {\n             log.error(\"Failed to auto-register unknown chargebox '\" + chargeBoxId + \"'\", e);\n             return Optional.empty();\n         }\n     }\n \n-    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter,\n-                                                    AbstractWebSocketEndpoint jsonEndpoint) {\n-        List<String> statusFilter = inStatusFilter.stream()\n-                                                  .map(RegistrationStatus::value)\n+    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter, AbstractWebSocketEndpoint jsonEndpoint) {\n+    List<String> statusFilter = inStatusFilter.stream().map(RegistrationStatus::value)\n                                                   .collect(Collectors.toList());\n-\n-        List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n+List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n         for (String chargeBoxId : jsonEndpoint.getChargeBoxIdList()) {\n             returnList.add(new ChargePointSelect(OcppTransport.JSON, chargeBoxId));\n         }\n@@ -200,33 +197,29 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n     }\n \n     private static List<String> extractIds(List<Map<String, Deque<SessionContext>>> ocppMaps) {\n-        return ocppMaps.stream()\n-                       .map(Map::keySet)\n+        return ocppMaps.stream().map(Map::keySet)\n                        .flatMap(Collection::stream)\n                        .collect(Collectors.toList());\n     }\n \n     private static void appendList(Map<String, Deque<SessionContext>> map, List<OcppJsonStatus> returnList,\n                                    DateTime now, OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n-\n-        for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n+    for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n             String chargeBoxId = entry.getKey();\n             Deque<SessionContext> endpointDeque = entry.getValue();\n \n             for (SessionContext ctx : endpointDeque) {\n                 DateTime openSince = ctx.getOpenSince();\n \n-                OcppJsonStatus status = OcppJsonStatus.builder()\n-                                                      .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n+                OcppJsonStatus status = OcppJsonStatus.builder().chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n                                                       .chargeBoxId(chargeBoxId)\n                                                       .connectedSinceDT(openSince)\n                                                       .connectedSince(DateTimeUtils.humanize(openSince))\n                                                       .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n                                                       .version(version)\n                                                       .build();\n-\n-                returnList.add(status);\n+returnList.add(status);\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/9/ChargePointHelperServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/9/ChargePointHelperServiceImpl.java\nindex 4787d634ae7..4ab016d0a5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/9/ChargePointHelperServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/9/ChargePointHelperServiceImpl.java\n@@ -41,7 +41,6 @@ import ocpp.cs._2015._10.RegistrationStatus;\n import org.joda.time.DateTime;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -59,13 +58,14 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 24.03.2015\n  */\n+\n+\n @Slf4j\n @Service\n public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n-\n-    private final boolean autoRegisterUnknownStations = CONFIG.getOcpp().isAutoRegisterUnknownStations();\n+    private final boolean autoRegisterUnknownStations = CONFIG.getOcpp()\n+        .isAutoRegisterUnknownStations();\n     private final Striped<Lock> isRegisteredLocks = Striped.lock(16);\n-\n     @Autowired private GenericRepository genericRepository;\n \n     // SOAP-based charge points are stored in DB with an endpoint address\n@@ -75,9 +75,7 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n     @Autowired private Ocpp12WebSocketEndpoint ocpp12WebSocketEndpoint;\n     @Autowired private Ocpp15WebSocketEndpoint ocpp15WebSocketEndpoint;\n     @Autowired private Ocpp16WebSocketEndpoint ocpp16WebSocketEndpoint;\n-\n     private final UnidentifiedIncomingObjectService unknownChargePointService = new UnidentifiedIncomingObjectService(100);\n-\n     @Override\n     public Optional<RegistrationStatus> getRegistrationStatus(String chargeBoxId) {\n         Lock l = isRegisteredLocks.get(chargeBoxId);\n@@ -89,7 +87,7 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n             }\n             return status;\n         } finally {\n-            l.unlock();\n+                  l.unlock();\n         }\n     }\n \n@@ -102,7 +100,6 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n \n         List<ConnectorStatus> latestList = chargePointRepository.getChargePointConnectorStatus();\n         stats.setStatusCountMap(ConnectorStatusCountFilter.getStatusCountMap(latestList));\n-\n         return stats;\n     }\n \n@@ -111,13 +108,10 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         Map<String, Deque<SessionContext>> ocpp12Map = ocpp12WebSocketEndpoint.getACopy();\n         Map<String, Deque<SessionContext>> ocpp15Map = ocpp15WebSocketEndpoint.getACopy();\n         Map<String, Deque<SessionContext>> ocpp16Map = ocpp16WebSocketEndpoint.getACopy();\n-\n         List<String> idList = extractIds(Arrays.asList(ocpp12Map, ocpp15Map, ocpp16Map));\n         Map<String, Integer> primaryKeyLookup = chargePointRepository.getChargeBoxIdPkPair(idList);\n-\n         DateTime now = DateTime.now();\n         List<OcppJsonStatus> returnList = new ArrayList<>();\n-\n         appendList(ocpp12Map, returnList, now, OcppVersion.V_12, primaryKeyLookup);\n         appendList(ocpp15Map, returnList, now, OcppVersion.V_15, primaryKeyLookup);\n         appendList(ocpp16Map, returnList, now, OcppVersion.V_16, primaryKeyLookup);\n@@ -129,10 +123,13 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         switch (version) {\n             case V_12:\n                 return getChargePoints(OcppProtocol.V_12_SOAP, inStatusFilter, ocpp12WebSocketEndpoint);\n+\n             case V_15:\n                 return getChargePoints(OcppProtocol.V_15_SOAP, inStatusFilter, ocpp15WebSocketEndpoint);\n+\n             case V_16:\n                 return getChargePoints(OcppProtocol.V_16_SOAP, inStatusFilter, ocpp16WebSocketEndpoint);\n+\n             default:\n                 throw new IllegalArgumentException(\"Unknown OCPP version: \" + version);\n         }\n@@ -171,6 +168,7 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         }\n \n         // 2. ok, this chargeBoxId is unknown. exit if auto-register is disabled\n+\n         if (!autoRegisterUnknownStations) {\n             return Optional.empty();\n         }\n@@ -186,13 +184,12 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n         }\n     }\n \n-    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter,\n-                                                    AbstractWebSocketEndpoint jsonEndpoint) {\n+    private List<ChargePointSelect> getChargePoints(OcppProtocol protocol, List<RegistrationStatus> inStatusFilter, AbstractWebSocketEndpoint jsonEndpoint) {\n         List<String> statusFilter = inStatusFilter.stream()\n-                                                  .map(RegistrationStatus::value)\n-                                                  .collect(Collectors.toList());\n-\n+            .map(RegistrationStatus::value)\n+            .collect(Collectors.toList());\n         List<ChargePointSelect> returnList = chargePointRepository.getChargePointSelect(protocol, statusFilter);\n+\n         for (String chargeBoxId : jsonEndpoint.getChargeBoxIdList()) {\n             returnList.add(new ChargePointSelect(OcppTransport.JSON, chargeBoxId));\n         }\n@@ -201,32 +198,31 @@ public class ChargePointHelperServiceImpl implements ChargePointHelperService {\n \n     private static List<String> extractIds(List<Map<String, Deque<SessionContext>>> ocppMaps) {\n         return ocppMaps.stream()\n-                       .map(Map::keySet)\n-                       .flatMap(Collection::stream)\n-                       .collect(Collectors.toList());\n+            .map(Map::keySet)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n     }\n \n-    private static void appendList(Map<String, Deque<SessionContext>> map, List<OcppJsonStatus> returnList,\n-                                   DateTime now, OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n-\n+    private static void appendList(Map<String, Deque<SessionContext>> map,\n+                                   List<OcppJsonStatus> returnList,\n+                                   DateTime now,\n+                                   OcppVersion version, Map<String, Integer> primaryKeyLookup) {\n         for (Map.Entry<String, Deque<SessionContext>> entry : map.entrySet()) {\n             String chargeBoxId = entry.getKey();\n             Deque<SessionContext> endpointDeque = entry.getValue();\n \n             for (SessionContext ctx : endpointDeque) {\n                 DateTime openSince = ctx.getOpenSince();\n-\n                 OcppJsonStatus status = OcppJsonStatus.builder()\n-                                                      .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n-                                                      .chargeBoxId(chargeBoxId)\n-                                                      .connectedSinceDT(openSince)\n-                                                      .connectedSince(DateTimeUtils.humanize(openSince))\n-                                                      .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n-                                                      .version(version)\n-                                                      .build();\n-\n+                    .chargeBoxPk(primaryKeyLookup.get(chargeBoxId))\n+                    .chargeBoxId(chargeBoxId)\n+                    .connectedSinceDT(openSince)\n+                    .connectedSince(DateTimeUtils.humanize(openSince))\n+                    .connectionDuration(DateTimeUtils.timeElapsed(openSince, now))\n+                    .version(version)\n+                    .build();\n                 returnList.add(status);\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}