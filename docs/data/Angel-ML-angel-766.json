{
    "project_name": "Angel-ML-angel",
    "error_id": "766",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/766/MatrixMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/766/MatrixMeta.java\nindex c840d7fbeb4..6c6eaee0609 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/766/MatrixMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/766/MatrixMeta.java\n@@ -58,7 +58,7 @@ public class MatrixMeta {\n   /**\r\n    * Create a MatrixMeta\r\n    *\r\n-   * @param matrixContext matrix context\r\n+   * @param matrixContext  matrix context\r\n    * @param partitionMetas matrix partitions meta\r\n    */\r\n   public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n@@ -139,7 +139,7 @@ public class MatrixMeta {\n   /**\r\n    * Gets attribute.\r\n    *\r\n-   * @param key the key\r\n+   * @param key   the key\r\n    * @param value the default value\r\n    * @return the attribute\r\n    */\r\n@@ -210,7 +210,7 @@ public class MatrixMeta {\n   /**\r\n    * Add meta for a partition\r\n    *\r\n-   * @param id partition id\r\n+   * @param id   partition id\r\n    * @param meta partition meta\r\n    */\r\n   public void addPartitionMeta(int id, PartitionMeta meta) {\r\n@@ -258,7 +258,7 @@ public class MatrixMeta {\n    * Set the stored pss for a partition\r\n    *\r\n    * @param partId partition id\r\n-   * @param psIds the stored pss\r\n+   * @param psIds  the stored pss\r\n    */\r\n   public void setPss(int partId, List<ParameterServerId> psIds) {\r\n     PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n@@ -341,7 +341,7 @@ public class MatrixMeta {\n    * Add the stored ps for the partition\r\n    *\r\n    * @param partId partition id\r\n-   * @param psId ps id\r\n+   * @param psId   ps id\r\n    */\r\n   public void addPs(int partId, ParameterServerId psId) {\r\n     PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/766/MatrixMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/766/MatrixMeta.java\nindex c840d7fbeb4..e0343a3ca2b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/766/MatrixMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/766/MatrixMeta.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.ml.matrix;\r\n \r\n import com.tencent.angel.conf.MatrixConf;\r\n@@ -387,8 +386,8 @@ public class MatrixMeta {\n    * @throws ClassNotFoundException if server partition storage class is not found\r\n    */\r\n   public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n+      throws ClassNotFoundException {\n+  return matrixContext.getPartitionStorageClass();\r\n   }\r\n \r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "351",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "422",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/766/MatrixMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/766/MatrixMeta.java\nindex c840d7fbeb4..92f55e61451 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/766/MatrixMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/766/MatrixMeta.java\n@@ -16,43 +16,46 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.ml.matrix;\r\n-\r\n-import com.tencent.angel.conf.MatrixConf;\r\n-import com.tencent.angel.ml.math2.utils.RowType;\r\n-import com.tencent.angel.ps.ParameterServerId;\r\n-import com.tencent.angel.ps.storage.partition.IServerPartition;\r\n-import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\r\n-import com.tencent.angel.ps.storage.vector.element.IElement;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.HashSet;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n+package com.tencent.angel.ml.matrix;\n+\n+import com.tencent.angel.conf.MatrixConf;\n+import com.tencent.angel.ml.math2.utils.RowType;\n+import com.tencent.angel.ps.ParameterServerId;\n+import com.tencent.angel.ps.storage.partition.IServerPartition;\n+import com.tencent.angel.ps.storage.partition.storage.IServerPartitionStorage;\n+import com.tencent.angel.ps.storage.vector.element.IElement;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Set;\r\n \r\n /**\r\n  * The meta of matrix.\r\n- */\r\n+ */\n+\n public class MatrixMeta {\r\n \r\n   /**\r\n    * Matrix basic parameters\r\n-   */\r\n+   */\n+\n   private final MatrixContext matrixContext;\r\n \r\n   /**\r\n    * Matrix partitions parameters\r\n-   */\r\n+   */\n   private final Map<Integer, PartitionMeta> partitionMetas;\r\n \r\n   /**\r\n    * Create a MatrixMeta\r\n    *\r\n    * @param mContext matrix context\r\n-   */\r\n-  public MatrixMeta(MatrixContext mContext) {\r\n-    this(mContext, new HashMap<>());\r\n+   */\n+\n+  public MatrixMeta(MatrixContext mContext) {\n+    this(mContext, new HashMap<>());\n   }\r\n \r\n   /**\r\n@@ -60,80 +63,89 @@ public class MatrixMeta {\n    *\r\n    * @param matrixContext matrix context\r\n    * @param partitionMetas matrix partitions meta\r\n-   */\r\n-  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\r\n-    this.matrixContext = matrixContext;\r\n-    this.partitionMetas = partitionMetas;\r\n+   */\n+\n+  public MatrixMeta(MatrixContext matrixContext, Map<Integer, PartitionMeta> partitionMetas) {\n+    this.matrixContext = matrixContext;\n+    this.partitionMetas = partitionMetas;\n   }\r\n \r\n   /**\r\n    * Get matrix id\r\n    *\r\n    * @return the id\r\n-   */\r\n-  public int getId() {\r\n-    return matrixContext.getMatrixId();\r\n+   */\n+\n+  public int getId() {\n+    return matrixContext.getMatrixId();\n   }\r\n \r\n   /**\r\n    * Gets row num.\r\n    *\r\n    * @return the row num\r\n-   */\r\n-  public int getRowNum() {\r\n-    return matrixContext.getRowNum();\r\n+   */\n+\n+  public int getRowNum() {\n+    return matrixContext.getRowNum();\n   }\r\n \r\n   /**\r\n    * Gets col num.\r\n    *\r\n    * @return the col num\r\n-   */\r\n-  public long getColNum() {\r\n-    return matrixContext.getColNum();\r\n+   */\n+\n+  public long getColNum() {\n+    return matrixContext.getColNum();\n   }\r\n \r\n   /**\r\n    * Get number of non-zero elements\r\n    *\r\n    * @return number of non-zero elements\r\n-   */\r\n-  public long getValidIndexNum() {\r\n-    return matrixContext.getValidIndexNum();\r\n+   */\n+\n+  public long getValidIndexNum() {\n+    return matrixContext.getValidIndexNum();\n   }\r\n \r\n   /**\r\n    * get index range start\r\n-   */\r\n-  public long getIndexStart() {\r\n-    return matrixContext.getIndexStart();\r\n+   */\n+\n+  public long getIndexStart() {\n+    return matrixContext.getIndexStart();\n   }\r\n \r\n   /**\r\n    * Get index range end\r\n    *\r\n    * @return index range end\r\n-   */\r\n-  public long getIndexEnd() {\r\n-    return matrixContext.getIndexEnd();\r\n+   */\n+\n+  public long getIndexEnd() {\n+    return matrixContext.getIndexEnd();\n   }\r\n \r\n   /**\r\n    * Gets name.\r\n    *\r\n    * @return the name\r\n-   */\r\n-  public String getName() {\r\n-    return matrixContext.getName();\r\n+   */\n+\n+  public String getName() {\n+    return matrixContext.getName();\n   }\r\n \r\n   /**\r\n    * Gets row type.\r\n    *\r\n    * @return the row type\r\n-   */\r\n-  public RowType getRowType() {\r\n-    return matrixContext.getRowType();\r\n+   */\n+\n+  public RowType getRowType() {\n+    return matrixContext.getRowType();\n   }\r\n \r\n   /**\r\n@@ -142,12 +154,13 @@ public class MatrixMeta {\n    * @param key the key\r\n    * @param value the default value\r\n    * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key, String value) {\r\n-    if (!matrixContext.getAttributes().containsKey(key)) {\r\n-      return value;\r\n-    }\r\n-    return matrixContext.getAttributes().get(key);\r\n+   */\n+\n+  public String getAttribute(String key, String value) {\n+    if (!matrixContext.getAttributes().containsKey(key)) {\n+      return value;\n+    }\n+    return matrixContext.getAttributes().get(key);\n   }\r\n \r\n   /**\r\n@@ -155,56 +168,62 @@ public class MatrixMeta {\n    *\r\n    * @param key the key\r\n    * @return the attribute\r\n-   */\r\n-  public String getAttribute(String key) {\r\n-    return matrixContext.getAttributes().get(key);\r\n+   */\n+\n+  public String getAttribute(String key) {\n+    return matrixContext.getAttributes().get(key);\n   }\r\n \r\n   /**\r\n    * Is average.\r\n    *\r\n    * @return the result\r\n-   */\r\n-  public boolean isAverage() {\r\n-    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\r\n-    return Boolean.parseBoolean(average);\r\n+   */\n+\n+  public boolean isAverage() {\n+    String average = getAttribute(MatrixConf.MATRIX_AVERAGE, MatrixConf.DEFAULT_MATRIX_AVERAGE);\n+    return Boolean.parseBoolean(average);\n   }\r\n \r\n   /**\r\n    * Is hogwild.\r\n    *\r\n    * @return the result\r\n-   */\r\n-  public boolean isHogwild() {\r\n-    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\r\n-    return Boolean.parseBoolean(hogwild);\r\n+   */\n+\n+  public boolean isHogwild() {\n+    String hogwild = getAttribute(MatrixConf.MATRIX_HOGWILD, MatrixConf.DEFAULT_MATRIX_HOGWILD);\n+    return Boolean.parseBoolean(hogwild);\n   }\r\n \r\n   /**\r\n    * Gets staleness.\r\n    *\r\n    * @return the staleness\r\n-   */\r\n-  public int getStaleness() {\r\n-    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\r\n+   */\n+\n+  public int getStaleness() {\n+    return Integer.parseInt(getAttribute(MatrixConf.MATRIX_STALENESS, \"0\"));\n   }\r\n \r\n   /**\r\n    * Get partitions meta\r\n    *\r\n    * @return all partitions meta\r\n-   */\r\n-  public Map<Integer, PartitionMeta> getPartitionMetas() {\r\n-    return partitionMetas;\r\n+   */\n+\n+  public Map<Integer, PartitionMeta> getPartitionMetas() {\n+    return partitionMetas;\n   }\r\n \r\n   /**\r\n    * Get matrix context\r\n    *\r\n    * @return matrix context\r\n-   */\r\n-  public MatrixContext getMatrixContext() {\r\n-    return matrixContext;\r\n+   */\n+\n+  public MatrixContext getMatrixContext() {\n+    return matrixContext;\n   }\r\n \r\n   /**\r\n@@ -212,9 +231,10 @@ public class MatrixMeta {\n    *\r\n    * @param id partition id\r\n    * @param meta partition meta\r\n-   */\r\n-  public void addPartitionMeta(int id, PartitionMeta meta) {\r\n-    partitionMetas.put(id, meta);\r\n+   */\n+\n+  public void addPartitionMeta(int id, PartitionMeta meta) {\n+    partitionMetas.put(id, meta);\n   }\r\n \r\n   /**\r\n@@ -222,9 +242,10 @@ public class MatrixMeta {\n    *\r\n    * @param partId partition id\r\n    * @return partition meta\r\n-   */\r\n-  public PartitionMeta getPartitionMeta(int partId) {\r\n-    return partitionMetas.get(partId);\r\n+   */\n+\n+  public PartitionMeta getPartitionMeta(int partId) {\n+    return partitionMetas.get(partId);\n   }\r\n \r\n   /**\r\n@@ -232,26 +253,28 @@ public class MatrixMeta {\n    *\r\n    * @param partId partition id\r\n    * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getPss();\r\n+   */\n+\n+  public List<ParameterServerId> getPss(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getPss();\n   }\r\n \r\n   /**\r\n    * Get the stored pss for the whole matrix\r\n    *\r\n    * @return the stored pss\r\n-   */\r\n-  public List<ParameterServerId> getPss() {\r\n-    Set<ParameterServerId> pss = new HashSet<>();\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      pss.add(partMeta.getMasterPs());\r\n-    }\r\n-    return new ArrayList<>(pss);\r\n+   */\n+\n+  public List<ParameterServerId> getPss() {\n+    Set<ParameterServerId> pss = new HashSet<>();\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      pss.add(partMeta.getMasterPs());\n+    }\n+    return new ArrayList<>(pss);\n   }\r\n \r\n   /**\r\n@@ -259,13 +282,14 @@ public class MatrixMeta {\n    *\r\n    * @param partId partition id\r\n    * @param psIds the stored pss\r\n-   */\r\n-  public void setPss(int partId, List<ParameterServerId> psIds) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.setPss(psIds);\r\n+   */\n+\n+  public void setPss(int partId, List<ParameterServerId> psIds) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.setPss(psIds);\n   }\r\n \r\n   /**\r\n@@ -273,68 +297,72 @@ public class MatrixMeta {\n    *\r\n    * @param partId partition id\r\n    * @return the master stored ps\r\n-   */\r\n-  public ParameterServerId getMasterPs(int partId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return null;\r\n-    }\r\n-    return partitionMeta.getMasterPs();\r\n+   */\n+\n+  public ParameterServerId getMasterPs(int partId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return null;\n+    }\n+    return partitionMeta.getMasterPs();\n   }\r\n \r\n   /**\r\n    * Get matrix attributes\r\n    *\r\n    * @return matrix attributes\r\n-   */\r\n-  public Map<String, String> getAttributes() {\r\n-    return matrixContext.getAttributes();\r\n+   */\n+\n+  public Map<String, String> getAttributes() {\n+    return matrixContext.getAttributes();\n   }\r\n \r\n   /**\r\n    * Get the block row number for the matrix\r\n    *\r\n    * @return the block row number for the matrix\r\n-   */\r\n-  public int getBlockRowNum() {\r\n-    return matrixContext.getMaxRowNumInBlock();\r\n+   */\n+\n+  public int getBlockRowNum() {\n+    return matrixContext.getMaxRowNumInBlock();\n   }\r\n \r\n   /**\r\n    * Get the block column number for the matrix\r\n    *\r\n    * @return the block column number for the matrix\r\n-   */\r\n-  public long getBlockColNum() {\r\n-    return matrixContext.getMaxColNumInBlock();\r\n-  }\r\n-\r\n-  @Override\r\n-  public String toString() {\r\n-    StringBuilder sb = new StringBuilder();\r\n-    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\r\n-    sb.append(\"partitions:\").append(\"\\n\");\r\n-    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\r\n-    parts.sort((PartitionMeta p1, PartitionMeta p2) -> p1.getPartId() - p2.getPartId());\r\n-    int size = parts.size();\r\n-    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\r\n-    for (int i = 0; i < size; i++) {\r\n-      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i))\r\n-          .append(\"\\n\");\r\n-    }\r\n-\r\n-    return sb.toString();\r\n+   */\n+\n+  public long getBlockColNum() {\n+    return matrixContext.getMaxColNumInBlock();\n+  }\n+\n+  @Override\n+  public String toString() {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"MatrixContext:\").append(matrixContext).append(\"\\n\");\n+    sb.append(\"partitions:\").append(\"\\n\");\n+    List<PartitionMeta> parts = new ArrayList<>(partitionMetas.values());\n+    parts.sort((PartitionMeta p1, PartitionMeta p2)-> p1.getPartId() - p2.getPartId());\n+\n+    int size = parts.size();\n+    sb.append(\"total partitoin number:\" + size).append(\"\\n\");\n+    for (int i = 0; i < size; i++) {\n+      sb.append(\"partition \").append(parts.get(i).getPartId()).append(\":\").append(parts.get(i)).append(\"\\n\");\n+    }\n+    return sb.toString();\n   }\r\n \r\n   /**\r\n    * Remove the stored ps for all partitions\r\n    *\r\n    * @param psId ps id\r\n-   */\r\n-  public void removePs(ParameterServerId psId) {\r\n-    for (PartitionMeta partMeta : partitionMetas.values()) {\r\n-      partMeta.removePs(psId);\r\n-    }\r\n+   */\n+\n+  public void removePs(ParameterServerId psId) {\n+    for (PartitionMeta partMeta : partitionMetas.values()) {\n+      partMeta.removePs(psId);\n+    }\n   }\r\n \r\n   /**\r\n@@ -342,22 +370,24 @@ public class MatrixMeta {\n    *\r\n    * @param partId partition id\r\n    * @param psId ps id\r\n-   */\r\n-  public void addPs(int partId, ParameterServerId psId) {\r\n-    PartitionMeta partitionMeta = partitionMetas.get(partId);\r\n-    if (partitionMeta == null) {\r\n-      return;\r\n-    }\r\n-    partitionMeta.addReplicationPS(psId);\r\n+   */\n+\n+  public void addPs(int partId, ParameterServerId psId) {\n+    PartitionMeta partitionMeta = partitionMetas.get(partId);\n+    if (partitionMeta == null) {\n+      return;\n+    }\n+    partitionMeta.addReplicationPS(psId);\n   }\r\n \r\n   /**\r\n    * Get estimate sparsity\r\n    *\r\n    * @return estimate sparsity\r\n-   */\r\n-  public double getEstSparsity() {\r\n-    return matrixContext.getEstSparsity();\r\n+   */\n+\n+  public double getEstSparsity() {\n+    return matrixContext.getEstSparsity();\n   }\r\n \r\n   /**\r\n@@ -365,9 +395,10 @@ public class MatrixMeta {\n    *\r\n    * @return null if this parameter is not set\r\n    * @throws ClassNotFoundException if value class is not found\r\n-   */\r\n-  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\r\n-    return matrixContext.getValueType();\r\n+   */\n+\n+  public Class<? extends IElement> getValueClass() throws ClassNotFoundException {\n+    return matrixContext.getValueType();\n   }\r\n \r\n   /**\r\n@@ -375,9 +406,10 @@ public class MatrixMeta {\n    *\r\n    * @return matrix server partition class\r\n    * @throws ClassNotFoundException if server partition class is not found\r\n-   */\r\n-  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionClass();\r\n+   */\n+\n+  public Class<? extends IServerPartition> getPartitionClass() throws ClassNotFoundException {\n+    return matrixContext.getPartitionClass();\n   }\r\n \r\n   /**\r\n@@ -385,10 +417,10 @@ public class MatrixMeta {\n    *\r\n    * @return matrix server partition storage class, null means not set by user\r\n    * @throws ClassNotFoundException if server partition storage class is not found\r\n-   */\r\n-  public Class<? extends IServerPartitionStorage> getPartitionStorageClass()\r\n-      throws ClassNotFoundException {\r\n-    return matrixContext.getPartitionStorageClass();\r\n-  }\r\n-\r\n-}\r\n+   */\n+\n+  public Class<? extends IServerPartitionStorage> getPartitionStorageClass() throws ClassNotFoundException {\n+    return matrixContext.getPartitionStorageClass();\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 193
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}