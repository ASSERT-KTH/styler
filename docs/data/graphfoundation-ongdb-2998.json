{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2998",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2998/RelationshipChainExplorer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2998/RelationshipChainExplorer.java\nindex 197cb618aa6..4852e345d77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2998/RelationshipChainExplorer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2998/RelationshipChainExplorer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.repair;\n \n import org.neo4j.kernel.impl.store.RecordStore;\n@@ -29,58 +30,58 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n \n public class RelationshipChainExplorer\n {\n-    private final RecordStore<RelationshipRecord> recordStore;\n+  private final RecordStore<RelationshipRecord> recordStore;\n \n-    public RelationshipChainExplorer( RecordStore<RelationshipRecord> recordStore )\n-    {\n-        this.recordStore = recordStore;\n-    }\n+  public RelationshipChainExplorer(RecordStore<RelationshipRecord> recordStore)\n+  {\n+    this.recordStore = recordStore;\n+  }\n \n-    public RecordSet<RelationshipRecord> exploreRelationshipRecordChainsToDepthTwo( RelationshipRecord record )\n+  public RecordSet<RelationshipRecord> exploreRelationshipRecordChainsToDepthTwo(RelationshipRecord record)\n+  {\n+    RecordSet<RelationshipRecord> records = new RecordSet<>();\n+    for (RelationshipNodeField nodeField : RelationshipNodeField.values())\n     {\n-        RecordSet<RelationshipRecord> records = new RecordSet<>();\n-        for ( RelationshipNodeField nodeField : RelationshipNodeField.values() )\n-        {\n-            long nodeId = nodeField.get( record );\n-            records.addAll( expandChains( expandChainInBothDirections( record, nodeId ), nodeId ) );\n-        }\n-        return records;\n+      long nodeId = nodeField.get(record);\n+      records.addAll(expandChains(expandChainInBothDirections(record, nodeId), nodeId));\n     }\n+    return records;\n+  }\n \n-    private RecordSet<RelationshipRecord> expandChains( RecordSet<RelationshipRecord> records, long otherNodeId )\n+  private RecordSet<RelationshipRecord> expandChains(RecordSet<RelationshipRecord> records, long otherNodeId)\n+  {\n+    RecordSet<RelationshipRecord> chains = new RecordSet<>();\n+    for (RelationshipRecord record : records)\n     {\n-        RecordSet<RelationshipRecord> chains = new RecordSet<>();\n-        for ( RelationshipRecord record : records )\n-        {\n-            chains.addAll( expandChainInBothDirections( record,\n-                    record.getFirstNode() == otherNodeId ? record.getSecondNode() : record.getFirstNode() ) );\n-        }\n-        return chains;\n+      chains.addAll(expandChainInBothDirections(record,\n+          record.getFirstNode() == otherNodeId ? record.getSecondNode() : record.getFirstNode()));\n     }\n+    return chains;\n+  }\n \n-    private RecordSet<RelationshipRecord> expandChainInBothDirections( RelationshipRecord record, long nodeId )\n-    {\n-        return expandChain( record, nodeId, PREV ).union( expandChain( record, nodeId, NEXT ) );\n-    }\n+  private RecordSet<RelationshipRecord> expandChainInBothDirections(RelationshipRecord record, long nodeId)\n+  {\n+    return expandChain(record, nodeId, PREV).union(expandChain(record, nodeId, NEXT));\n+  }\n \n-    protected RecordSet<RelationshipRecord> followChainFromNode( long nodeId, long relationshipId )\n-    {\n-        return expandChain( recordStore.getRecord( relationshipId, recordStore.newRecord(), NORMAL ), nodeId, NEXT );\n-    }\n+  protected RecordSet<RelationshipRecord> followChainFromNode(long nodeId, long relationshipId)\n+  {\n+    return expandChain(recordStore.getRecord(relationshipId, recordStore.newRecord(), NORMAL), nodeId, NEXT);\n+  }\n \n-    private RecordSet<RelationshipRecord> expandChain( RelationshipRecord record, long nodeId,\n-                                                       RelationshipChainDirection direction )\n+  private RecordSet<RelationshipRecord> expandChain(RelationshipRecord record, long nodeId,\n+                                                    RelationshipChainDirection direction)\n+  {\n+    RecordSet<RelationshipRecord> chain = new RecordSet<>();\n+    chain.add(record);\n+    RelationshipRecord currentRecord = record;\n+    long nextRelId = direction.fieldFor(nodeId, currentRecord).relOf(currentRecord);\n+    while (currentRecord.inUse() && !direction.fieldFor(nodeId, currentRecord).endOfChain(currentRecord))\n     {\n-        RecordSet<RelationshipRecord> chain = new RecordSet<>();\n-        chain.add( record );\n-        RelationshipRecord currentRecord = record;\n-        long nextRelId = direction.fieldFor( nodeId, currentRecord ).relOf( currentRecord );\n-        while ( currentRecord.inUse() && !direction.fieldFor( nodeId, currentRecord ).endOfChain( currentRecord ) )\n-        {\n-            currentRecord = recordStore.getRecord( nextRelId, recordStore.newRecord(), FORCE );\n-            chain.add( currentRecord );\n-            nextRelId = direction.fieldFor( nodeId, currentRecord ).relOf( currentRecord );\n-        }\n-        return chain;\n+      currentRecord = recordStore.getRecord(nextRelId, recordStore.newRecord(), FORCE);\n+      chain.add(currentRecord);\n+      nextRelId = direction.fieldFor(nodeId, currentRecord).relOf(currentRecord);\n     }\n+    return chain;\n+  }\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2998/RelationshipChainExplorer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2998/RelationshipChainExplorer.java\nindex 197cb618aa6..553665f8a4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2998/RelationshipChainExplorer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2998/RelationshipChainExplorer.java\n@@ -44,7 +44,8 @@ public class RelationshipChainExplorer\n             long nodeId = nodeField.get( record );\n             records.addAll( expandChains( expandChainInBothDirections( record, nodeId ), nodeId ) );\n         }\n-        return records;\n+\n+return records;\n     }\n \n     private RecordSet<RelationshipRecord> expandChains( RecordSet<RelationshipRecord> records, long otherNodeId )\n@@ -55,7 +56,8 @@ public class RelationshipChainExplorer\n             chains.addAll( expandChainInBothDirections( record,\n                     record.getFirstNode() == otherNodeId ? record.getSecondNode() : record.getFirstNode() ) );\n         }\n-        return chains;\n+\n+return chains;\n     }\n \n     private RecordSet<RelationshipRecord> expandChainInBothDirections( RelationshipRecord record, long nodeId )\n@@ -68,9 +70,8 @@ public class RelationshipChainExplorer\n         return expandChain( recordStore.getRecord( relationshipId, recordStore.newRecord(), NORMAL ), nodeId, NEXT );\n     }\n \n-    private RecordSet<RelationshipRecord> expandChain( RelationshipRecord record, long nodeId,\n-                                                       RelationshipChainDirection direction )\n-    {\n+    private RecordSet<RelationshipRecord> expandChain( RelationshipRecord record, long nodeId, RelationshipChainDirection direction )\n+{\n         RecordSet<RelationshipRecord> chain = new RecordSet<>();\n         chain.add( record );\n         RelationshipRecord currentRecord = record;\n@@ -81,6 +82,7 @@ public class RelationshipChainExplorer\n             chain.add( currentRecord );\n             nextRelId = direction.fieldFor( nodeId, currentRecord ).relOf( currentRecord );\n         }\n-        return chain;\n+\n+return chain;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}