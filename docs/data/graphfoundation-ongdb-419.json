{
    "project_name": "graphfoundation-ongdb",
    "error_id": "419",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/419/CustomNameExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/419/CustomNameExtractor.java\nindex 4245d660091..a6986aecec4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/419/CustomNameExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/419/CustomNameExtractor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.compilerutils;\n \n import java.util.Optional;\n@@ -28,29 +29,29 @@ import org.neo4j.procedure.UserAggregationFunction;\n \n public class CustomNameExtractor\n {\n-    private CustomNameExtractor()\n-    {\n+  private CustomNameExtractor()\n+  {\n \n-    }\n+  }\n \n-    /**\n-     * Extracts user-defined names, usually from a {@link Procedure}, {@link UserFunction}\n-     * or {@link UserAggregationFunction}.\n-     *\n-     * As such, extracted strings are assumed to be non-null.\n-     */\n-    public static Optional<String> getName( Supplier<String> nameSupplier, Supplier<String> valueSupplier )\n+  /**\n+   * Extracts user-defined names, usually from a {@link Procedure}, {@link UserFunction}\n+   * or {@link UserAggregationFunction}.\n+   * <p>\n+   * As such, extracted strings are assumed to be non-null.\n+   */\n+  public static Optional<String> getName(Supplier<String> nameSupplier, Supplier<String> valueSupplier)\n+  {\n+    String name = nameSupplier.get().trim();\n+    if (!name.isEmpty())\n+    {\n+      return Optional.of(name);\n+    }\n+    String value = valueSupplier.get().trim();\n+    if (!value.isEmpty())\n     {\n-        String name = nameSupplier.get().trim();\n-        if ( !name.isEmpty() )\n-        {\n-            return Optional.of( name );\n-        }\n-        String value = valueSupplier.get().trim();\n-        if ( !value.isEmpty() )\n-        {\n-            return Optional.of( value );\n-        }\n-        return Optional.empty();\n+      return Optional.of(value);\n     }\n+    return Optional.empty();\n+  }\n }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/419/CustomNameExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/419/CustomNameExtractor.java\nindex 4245d660091..d876b5b0c12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/419/CustomNameExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/419/CustomNameExtractor.java\n@@ -30,8 +30,7 @@ public class CustomNameExtractor\n {\n     private CustomNameExtractor()\n     {\n-\n-    }\n+}\n \n     /**\n      * Extracts user-defined names, usually from a {@link Procedure}, {@link UserFunction}\n@@ -46,11 +45,13 @@ public class CustomNameExtractor\n         {\n             return Optional.of( name );\n         }\n-        String value = valueSupplier.get().trim();\n+\n+String value = valueSupplier.get().trim();\n         if ( !value.isEmpty() )\n         {\n             return Optional.of( value );\n         }\n-        return Optional.empty();\n+\n+return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}