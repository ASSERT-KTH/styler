{
    "project_name": "Activiti-Activiti",
    "error_id": "95",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.validation.validator.impl;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/95/ExternalInvocationTaskValidator.java\nindex fe1d8faba52..10c9e667291 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/95/ExternalInvocationTaskValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/95/ExternalInvocationTaskValidator.java\nindex fe1d8faba52..d68b71cf34e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/95/ExternalInvocationTaskValidator.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n@@ -22,73 +23,73 @@ import org.activiti.validation.validator.ProcessLevelValidator;\n \n public abstract class ExternalInvocationTaskValidator extends ProcessLevelValidator {\n \n-  protected void validateFieldDeclarationsForEmail(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n-    boolean toDefined = false;\n-    boolean textOrHtmlDefined = false;\n-\n-    for (FieldExtension fieldExtension : fieldExtensions) {\n-      if (fieldExtension.getFieldName().equals(\"to\")) {\n-        toDefined = true;\n-      }\n-      if (fieldExtension.getFieldName().equals(\"html\")) {\n-        textOrHtmlDefined = true;\n-      }\n-      if (fieldExtension.getFieldName().equals(\"htmlVar\")) {\n-        textOrHtmlDefined = true;\n-      }\n-      if (fieldExtension.getFieldName().equals(\"text\")) {\n-        textOrHtmlDefined = true;\n-      }\n-      if (fieldExtension.getFieldName().equals(\"textVar\")) {\n-        textOrHtmlDefined = true;\n-      }\n+    protected void validateFieldDeclarationsForEmail(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n+        boolean toDefined = false;\n+        boolean textOrHtmlDefined = false;\n+\n+        for (FieldExtension fieldExtension : fieldExtensions) {\n+            if (fieldExtension.getFieldName().equals(\"to\")) {\n+                toDefined = true;\n+            }\n+            if (fieldExtension.getFieldName().equals(\"html\")) {\n+                textOrHtmlDefined = true;\n+            }\n+            if (fieldExtension.getFieldName().equals(\"htmlVar\")) {\n+                textOrHtmlDefined = true;\n+            }\n+            if (fieldExtension.getFieldName().equals(\"text\")) {\n+                textOrHtmlDefined = true;\n+            }\n+            if (fieldExtension.getFieldName().equals(\"textVar\")) {\n+                textOrHtmlDefined = true;\n+            }\n+        }\n+\n+        if (!toDefined) {\n+            addError(errors, Problems.MAIL_TASK_NO_RECIPIENT, process, task, \"No recipient is defined on the mail activity\");\n+        }\n+        if (!textOrHtmlDefined) {\n+            addError(errors, Problems.MAIL_TASK_NO_CONTENT, process, task, \"Text, html, textVar or htmlVar field should be provided\");\n+        }\n     }\n \n-    if (!toDefined) {\n-      addError(errors, Problems.MAIL_TASK_NO_RECIPIENT, process, task, \"No recipient is defined on the mail activity\");\n-    }\n-    if (!textOrHtmlDefined) {\n-      addError(errors, Problems.MAIL_TASK_NO_CONTENT, process, task, \"Text, html, textVar or htmlVar field should be provided\");\n-    }\n-  }\n+    protected void validateFieldDeclarationsForShell(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n+        boolean shellCommandDefined = false;\n \n-  protected void validateFieldDeclarationsForShell(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n-    boolean shellCommandDefined = false;\n+        for (FieldExtension fieldExtension : fieldExtensions) {\n+            String fieldName = fieldExtension.getFieldName();\n+            String fieldValue = fieldExtension.getStringValue();\n \n-    for (FieldExtension fieldExtension : fieldExtensions) {\n-      String fieldName = fieldExtension.getFieldName();\n-      String fieldValue = fieldExtension.getStringValue();\n+            if (fieldName.equals(\"command\")) {\n+                shellCommandDefined = true;\n+            }\n \n-      if (fieldName.equals(\"command\")) {\n-        shellCommandDefined = true;\n-      }\n+            if ((fieldName.equals(\"wait\") || fieldName.equals(\"redirectError\") || fieldName.equals(\"cleanEnv\")) && !fieldValue.toLowerCase().equals(\"true\") && !fieldValue.toLowerCase().equals(\"false\")) {\n+                addError(errors, Problems.SHELL_TASK_INVALID_PARAM, process, task, \"Undefined parameter value for shell field\");\n+            }\n \n-      if ((fieldName.equals(\"wait\") || fieldName.equals(\"redirectError\") || fieldName.equals(\"cleanEnv\")) && !fieldValue.toLowerCase().equals(\"true\") && !fieldValue.toLowerCase().equals(\"false\")) {\n-        addError(errors, Problems.SHELL_TASK_INVALID_PARAM, process, task, \"Undefined parameter value for shell field\");\n-      }\n+        }\n \n+        if (!shellCommandDefined) {\n+            addError(errors, Problems.SHELL_TASK_NO_COMMAND, process, task, \"No shell command is defined on the shell activity\");\n+        }\n     }\n \n-    if (!shellCommandDefined) {\n-      addError(errors, Problems.SHELL_TASK_NO_COMMAND, process, task, \"No shell command is defined on the shell activity\");\n-    }\n-  }\n-  \n-  protected void validateFieldDeclarationsForDmn(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n-    boolean keyDefined = false;\n-\n-    for (FieldExtension fieldExtension : fieldExtensions) {\n-      String fieldName = fieldExtension.getFieldName();\n-      String fieldValue = fieldExtension.getStringValue();\n-\n-      if (fieldName.equals(\"decisionTableReferenceKey\") && fieldValue != null && fieldValue.length() > 0) {\n-        keyDefined = true;\n-      }\n-    }\n+    protected void validateFieldDeclarationsForDmn(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n+        boolean keyDefined = false;\n+\n+        for (FieldExtension fieldExtension : fieldExtensions) {\n+            String fieldName = fieldExtension.getFieldName();\n+            String fieldValue = fieldExtension.getStringValue();\n+\n+            if (fieldName.equals(\"decisionTableReferenceKey\") && fieldValue != null && fieldValue.length() > 0) {\n+                keyDefined = true;\n+            }\n+        }\n \n-    if (!keyDefined) {\n-      addError(errors, Problems.DMN_TASK_NO_KEY, process, task, \"No decision table reference key is defined on the dmn activity\");\n+        if (!keyDefined) {\n+            addError(errors, Problems.DMN_TASK_NO_KEY, process, task, \"No decision table reference key is defined on the dmn activity\");\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/95/ExternalInvocationTaskValidator.java\nindex fe1d8faba52..4fc63660da0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/95/ExternalInvocationTaskValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n@@ -75,7 +76,7 @@ public abstract class ExternalInvocationTaskValidator extends ProcessLevelValida\n   }\n   \n   protected void validateFieldDeclarationsForDmn(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n-    boolean keyDefined = false;\n+  boolean keyDefined = false;\n \n     for (FieldExtension fieldExtension : fieldExtensions) {\n       String fieldName = fieldExtension.getFieldName();\n@@ -91,4 +92,4 @@ public abstract class ExternalInvocationTaskValidator extends ProcessLevelValida\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/95/ExternalInvocationTaskValidator.java\nindex fe1d8faba52..5e469e94958 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/95/ExternalInvocationTaskValidator.java\n@@ -13,19 +13,20 @@\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n-\n import org.activiti.bpmn.model.FieldExtension;\n import org.activiti.bpmn.model.TaskWithFieldExtensions;\n import org.activiti.validation.ValidationError;\n import org.activiti.validation.validator.Problems;\n import org.activiti.validation.validator.ProcessLevelValidator;\n \n+\n public abstract class ExternalInvocationTaskValidator extends ProcessLevelValidator {\n \n-  protected void validateFieldDeclarationsForEmail(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n+  protected void validateFieldDeclarationsForEmail(org.activiti.bpmn.model.Process process,\n+                                                   TaskWithFieldExtensions task,\n+                                                   List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n     boolean toDefined = false;\n     boolean textOrHtmlDefined = false;\n-\n     for (FieldExtension fieldExtension : fieldExtensions) {\n       if (fieldExtension.getFieldName().equals(\"to\")) {\n         toDefined = true;\n@@ -43,7 +44,6 @@ public abstract class ExternalInvocationTaskValidator extends ProcessLevelValida\n         textOrHtmlDefined = true;\n       }\n     }\n-\n     if (!toDefined) {\n       addError(errors, Problems.MAIL_TASK_NO_RECIPIENT, process, task, \"No recipient is defined on the mail activity\");\n     }\n@@ -52,43 +52,38 @@ public abstract class ExternalInvocationTaskValidator extends ProcessLevelValida\n     }\n   }\n \n-  protected void validateFieldDeclarationsForShell(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n+  protected void validateFieldDeclarationsForShell(org.activiti.bpmn.model.Process process,\n+                                                   TaskWithFieldExtensions task,\n+                                                   List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n     boolean shellCommandDefined = false;\n-\n     for (FieldExtension fieldExtension : fieldExtensions) {\n-      String fieldName = fieldExtension.getFieldName();\n-      String fieldValue = fieldExtension.getStringValue();\n-\n-      if (fieldName.equals(\"command\")) {\n-        shellCommandDefined = true;\n-      }\n-\n-      if ((fieldName.equals(\"wait\") || fieldName.equals(\"redirectError\") || fieldName.equals(\"cleanEnv\")) && !fieldValue.toLowerCase().equals(\"true\") && !fieldValue.toLowerCase().equals(\"false\")) {\n-        addError(errors, Problems.SHELL_TASK_INVALID_PARAM, process, task, \"Undefined parameter value for shell field\");\n-      }\n-\n+        String fieldName = fieldExtension.getFieldName();\n+        String fieldValue = fieldExtension.getStringValue();\n+        if (fieldName.equals(\"command\")) {\n+          shellCommandDefined = true;\n+        }\n+        if ((fieldName.equals(\"wait\") || fieldName.equals(\"redirectError\") || fieldName.equals(\"cleanEnv\")) && !fieldValue.toLowerCase().equals(\"true\") && !fieldValue.toLowerCase().equals(\"false\")) {\n+          addError(errors, Problems.SHELL_TASK_INVALID_PARAM, process, task, \"Undefined parameter value for shell field\");\n+        }\n     }\n-\n     if (!shellCommandDefined) {\n       addError(errors, Problems.SHELL_TASK_NO_COMMAND, process, task, \"No shell command is defined on the shell activity\");\n     }\n   }\n-  \n-  protected void validateFieldDeclarationsForDmn(org.activiti.bpmn.model.Process process, TaskWithFieldExtensions task, List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n-    boolean keyDefined = false;\n \n+  protected void validateFieldDeclarationsForDmn(org.activiti.bpmn.model.Process process,\n+                                                 TaskWithFieldExtensions task,\n+                                                 List<FieldExtension> fieldExtensions, List<ValidationError> errors) {\n+    boolean keyDefined = false;\n     for (FieldExtension fieldExtension : fieldExtensions) {\n-      String fieldName = fieldExtension.getFieldName();\n-      String fieldValue = fieldExtension.getStringValue();\n-\n-      if (fieldName.equals(\"decisionTableReferenceKey\") && fieldValue != null && fieldValue.length() > 0) {\n-        keyDefined = true;\n-      }\n+        String fieldName = fieldExtension.getFieldName();\n+        String fieldValue = fieldExtension.getStringValue();\n+        if (fieldName.equals(\"decisionTableReferenceKey\") && fieldValue != null && fieldValue.length() > 0) {\n+          keyDefined = true;\n+        }\n     }\n-\n     if (!keyDefined) {\n       addError(errors, Problems.DMN_TASK_NO_KEY, process, task, \"No decision table reference key is defined on the dmn activity\");\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/95/ExternalInvocationTaskValidator.java\nindex fe1d8faba52..10c9e667291 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/95/ExternalInvocationTaskValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/95/ExternalInvocationTaskValidator.java\nindex fe1d8faba52..10c9e667291 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/95/ExternalInvocationTaskValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/95/ExternalInvocationTaskValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}