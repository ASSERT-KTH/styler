{
    "project_name": "CESNET-perun",
    "error_id": "226",
    "information": {
        "errors": [
            {
                "line": "1718",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t}\n\t};\n\t\n\tprivate static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n\t\tif (parms.contains(\"facilityName\")) return ac.getFacilityByName(parms.readString(\"facilityName\"));\n\t\telse return ac.getFacilityById(parms.readInt(\"facility\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/226/FacilitiesManagerMethod.java\nindex b0ddf7c7fd8..c837b00fd98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/226/FacilitiesManagerMethod.java\n@@ -1715,7 +1715,7 @@ public enum FacilitiesManagerMethod implements ManagerMethod {\n \t\t\treturn null;\n \t\t}\n \t};\n-\t\n+\n \tprivate static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\tif (parms.contains(\"facilityName\")) return ac.getFacilityByName(parms.readString(\"facilityName\"));\n \t\telse return ac.getFacilityById(parms.readInt(\"facility\"));\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/226/FacilitiesManagerMethod.java\nindex b0ddf7c7fd8..c33f1308726 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/226/FacilitiesManagerMethod.java\n@@ -14,1710 +14,1699 @@ import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n public enum FacilitiesManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Searches for the Facility with specified id.\n-\t *\n-\t * @param id int Facility <code>id</code>\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacilityById {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilityById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Searches the Facility by its name.\n-\t *\n-\t * @param name String Facility name\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacilityByName {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilityByName(parms.readString(\"name\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Lists all users assigned to facility containing resources where service is assigned.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facilityName String Facility name\n-\t * @return List<User> assigned users\n-\t */\n-\t/*#\n-\t * Lists all users assigned to facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<User> assigned users\n-\t */\n-\t/*#\n-\t * Lists all users assigned to facility containing resources where service is assigned.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<User> assigned users\n-\t */\n-\t/*#\n-\t * Lists all users assigned to facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<User> assigned users\n-\t */\n-\tgetAssignedUsers {\n-\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"service\"))\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms),ac.getServiceById(parms.readInt(\"service\")));\n-\t\t\telse\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets all possible rich facilities with all their owners.\n-\t *\n-\t * @return List<RichFacility> rich facilities\n-\t */\n-\tgetRichFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<RichFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getRichFacilities(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Searches for the Facilities by theirs destination.\n-\t *\n-\t * @param destination String Destination\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacilitiesByDestination {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesByDestination(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"destination\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all facilities that have set the attribute 'attributeName' with the value 'attributeValue'.\n-\t * Searching only def and opt attributes. Large attributes are not supported.\n-\t *\n-\t * @param attributeName String\n-\t * @param attributeValue String\n-\t * @return List<Facility> facilities with the specified attribute\n-\t */\n-\tgetFacilitiesByAttribute {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesByAttribute(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all facilities.\n-\t *\n-\t * @return List<Facility> All facilities\n-\t */\n-\tgetFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilities(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets count of all facilities.\n-\t * @return int Facilities count\n-\t */\n-\tgetFacilitiesCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesCount(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns owners of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Owner> Facility owners\n-\t */\n-\t/*#\n-\t * Returns owners of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Owner> Facility owners\n-\t */\n-\tgetOwners {\n-\n-\t\t@Override\n-\t\tpublic List<Owner> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getOwners(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\taddOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tOwner owner;\n-\t\t\tif (parms.contains(\"ownerName\")) owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n-\t\t\telse owner = ac.getOwnerById(parms.readInt(\"owner\"));\n-\n-\t\t\tac.getFacilitiesManager().addOwner(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\towner);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\tremoveOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tOwner owner;\n-\t\t\tif (parms.contains(\"ownerName\")) owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n-\t\t\telse owner = ac.getOwnerById(parms.readInt(\"owner\"));\n-\n-\t\t\tac.getFacilitiesManager().removeOwner(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\towner);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Vo> List of VOs\n-\t */\n-\t/*#\n-\t * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Vo> List of VOs\n-\t */\n-\tgetAllowedVos {\n-\n-\t\t@Override\n-\t\tpublic List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAllowedVos(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all assigned groups on Facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by Service.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO and Service.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by Service.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO and Service.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\tgetAllowedGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\t\t\tService service = null;\n-\t\t\tVo vo = null;\n-\t\t\tif (parms.contains(\"vo\")) {\n-\t\t\t\tvo = ac.getVoById(parms.readInt(\"vo\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\tservice = ac.getServiceById(parms.readInt(\"service\"));\n-\t\t\t}\n-\t\t\treturn ac.getFacilitiesManager().getAllowedGroups(ac.getSession(), facility, vo, service);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all assigned RichGroups on Facility with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\tgetAllowedRichGroupsWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\tService service = null;\n-\t\t\tVo vo = null;\n-\t\t\tif (parms.contains(\"vo\")) {\n-\t\t\t\tvo = ac.getVoById(parms.readInt(\"vo\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\tservice = ac.getServiceById(parms.readInt(\"service\"));\n-\t\t\t}\n-\t\t\treturn ac.getFacilitiesManager().getAllowedRichGroupsWithAttributes(ac.getSession(), facility, vo, service, parms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all resources assigned to a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Resource> Resources\n-\t */\n-\t/*#\n-\t * Returns all resources assigned to a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Resource> Resources\n-\t */\n-\tgetAssignedResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all rich resources assigned to a facility with VO property filled.\n-\t * @param facilityName String Facility name\n-\t * @return List<RichResource> Resources\n-\t */\n-\t/*#\n-\t * Returns all rich resources assigned to a facility with VO property filled.\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<RichResource> Resources\n-\t */\n-\tgetAssignedRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates a facility. Caller is automatically set as facility manager.\n-\t * Facility Object must contain name which can contain only a-Z0-9.-_ and space characters.\n-\t * Parameter description is optional.\n-\t * Other parameters are ignored.\n-\t * @param facility Facility JSON object\n-\t * @return Facility Created Facility object\n-\t * @exampleParam facility { \"name\" : \"the best-facility_7\" }\n-\t */\n-\t/*#\n-\t * Creates a facility. Caller is automatically set as facility manager.\n-\t * @param name String name of a facility - can contain only a-Z0-9.-_ and space characters.\n-\t * @param description String description of a facility\n-\t * @return Facility Created Facility object\n-\t * @exampleParam name \"the best-facility_7\"\n-\t * @exampleParam description \"A description with information.\"\n-\t */\n-\tcreateFacility {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"facility\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().createFacility(ac.getSession(),\n-\t\t\t\t\t\tparms.read(\"facility\", Facility.class));\n-\t\t\t} else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n-\t\t\t\tString name = parms.readString(\"name\");\n-\t\t\t\tString description = parms.readString(\"description\");\n-\t\t\t\tFacility facility = new Facility(0, name, description);\n-\t\t\t\treturn ac.getFacilitiesManager().createFacility(ac.getSession(), facility);\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facilityName String Facility name\n-\t */\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facilityName String Facility name\n-\t * @param force Boolean if true deletes all constrains of facility before deleting facility\n-\t */\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facility int Facility <code>id</code>\n-\t * @param force Boolean if true deletes all constrains of facility before deleting facility\n-\t */\n-\tdeleteFacility {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"force\")){\n-\t\t\t\tac.getFacilitiesManager().deleteFacility(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tparms.readBoolean(\"force\"));\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().deleteFacility(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tfalse);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update a facility (facility name)\n-\t *\n-\t * @param facility Facility JSON object\n-\t * @return Facility updated Facility object\n-\t */\n-\tupdateFacility {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().updateFacility(ac.getSession(),\n-\t\t\t\t\tparms.read(\"facility\", Facility.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of all facilities owned by the owner.\n-\t * @param owner int Owner <code>id</code>\n-\t * @return List<Facility> Owner's facilities\n-\t */\n-\tgetOwnerFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getOwnerFacilities(ac.getSession(),\n-\t\t\t\t\tac.getOwnerById(parms.readInt(\"owner\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Lists hosts of a Facility.\n-\t * @param facilityName String Facility name\n-\t * @return List<Host> Hosts\n-\t */\n-\t/*#\n-\t * Lists hosts of a Facility.\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Host> Hosts\n-\t */\n-\tgetHosts {\n-\t\t@Override\n-\t\tpublic List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHosts(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a host by its <code>id</code>.\n-\t * @param id int Host <code>id</code>\n-\t * @return Host Host object\n-\t */\n-\tgetHostById {\n-\t\t@Override\n-\t\tpublic Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHostById(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns hosts by hostname. (from all facilities)\n-\t * @param hostname String hostname of hosts\n-\t * @return List<Host> all hosts with this hostname, empty arrayList if none exists\n-\t */\n-\tgetHostsByHostname {\n-\t\t@Override\n-\t\tpublic List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHostsByHostname(ac.getSession(), parms.readString(\"hostname\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return facility which has the host.\n-\t * @param host int Host <code>id</code>\n-\t * @return Facility Facility object\n-\t */\n-\tgetFacilityForHost {\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilityForHost(ac.getSession(),\n-\t\t\t\t\tac.getHostById(parms.readInt(\"host\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Count hosts of Facility.\n-\t * @param facilityName String Facility name\n-\t * @return int Hosts count\n-\t */\n-\t/*#\n-\t * Count hosts of Facility.\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int Hosts count\n-\t */\n-\tgetHostsCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHostsCount(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds hosts to the Facility.\n-\t *\n-\t * @param hostnames List<String> Host names\n-\t * @param facilityName String Facility name\n-\t * @return List<Host> Hosts with <code>id</code>'s set.\n-\t */\n-\t/*#\n-\t * Adds hosts to the Facility.\n-\t *\n-\t * @param hostnames List<String> Host names\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Host> Hosts with <code>id</code>'s set.\n-\t */\n-\taddHosts {\n-\t\t@Override\n-\t\tpublic List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\tList<String> hostnames = parms.readList(\"hostnames\", String.class);\n-\n-\t\t\treturn ac.getFacilitiesManager().addHosts(ac.getSession(), facility, hostnames);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove hosts from a Facility.\n-\t * @param hosts List<Integer> List of Host IDs\n-\t * @param facilityName String Facility name\n-\t */\n-\t/*#\n-\t * Remove hosts from a Facility.\n-\t * @param hosts List<Integer> List of Host IDs\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tremoveHosts {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\t//TODO: optimalizovat?\n-\t\t\tint[] ids = parms.readArrayOfInts(\"hosts\");\n-\t\t\tList<Host> hosts = new ArrayList<Host>(ids.length);\n-\t\t\tfor (int i : ids) {\n-\t\t\t\thosts.add(ac.getHostById(i));\n-\t\t\t}\n-\n-\t\t\tac.getFacilitiesManager().removeHosts(ac.getSession(),\n-\t\t\t\t\thosts,\n-\t\t\t\t\tfacility);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds host to a Facility.\n-\t * @param hostname String Hostname\n-\t * @param facilityName String Facility name\n-\t * @return Host Host with <code>id</code> set.\n-\t */\n-\t/*#\n-\t * Adds host to a Facility.\n-\t * @param hostname String Hostname\n-\t * @param facility int Facility <code>id</code>\n-\t * @return Host Host with <code>id</code> set.\n-\t */\n-\taddHost {\n-\t\t@Override\n-\t\tpublic Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\tString hostname = parms.readString(\"hostname\");\n-\t\t\tHost host = new Host();\n-\t\t\thost.setHostname(hostname);\n-\n-\t\t\treturn ac.getFacilitiesManager().addHost(ac.getSession(), host, facility);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a host.\n-\t * @param host int Host <code>id</code>\n-\t */\n-\tremoveHost {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tint id = parms.readInt(\"host\");\n-\n-\t\t\tHost host = ac.getFacilitiesManager().getHostById(ac.getSession(), id);\n-\n-\t\t\tac.getFacilitiesManager().removeHost(ac.getSession(), host);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove host from the Facility based on hostname. If there is ambiguity, method throws exception and no host is removed.\n-\t *\n-\t * @param hostname String hostname\n-\t * @throw HostNotExistsException When host doesn't exist or is not unique by name\n-\t */\n-\tremoveHostByHostname {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().removeHostByHostname(ac.getSession(), parms.readString(\"hostname\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get facilities where the service is defined..\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\t/*#\n-\t * Get facilities which are assigned to a Group (via resource).\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\t/*#\n-\t * Get facilities which have the member access on.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\t/*#\n-\t * Get facilities which have the user access on.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\tgetAssignedFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t} else if (parms.contains(\"group\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t} else if (parms.contains(\"member\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t} else if (parms.contains(\"user\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"service or group or member of user\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds a Facility admin.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Adds a group administrator to the Facility.\n-\t *\n-\t *  @param facilityName String Facility name\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\t/*#\n-\t * Adds a Facility admin.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Adds a group administrator to the Facility.\n-\t *\n-\t *  @param facility int Facility <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\taddAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getFacilitiesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a Facility admin.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Removes a group administrator of the Facility.\n-\t *\n-\t *  @param facilityName String Facility name\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\t/*#\n-\t * Removes a Facility admin.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Removes a group administrator of the Facility.\n-\t *\n-\t *  @param facility int Facility <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\tremoveAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getFacilitiesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all facility administrators for supported role and given facility.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all facility administrators of the given facility for supported role\n-\t */\n-\t/*#\n-\t * Get all Facility admins.\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<User> List of Users who are admins in the facility.\n-\t */\n-\t/*#\n-\t * Get list of all facility administrators for supported role and given facility.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all facility administrators of the given facility for supported role\n-\t */\n-\t/*#\n-\t * Get all Facility admins.\n-\t *\n-\t * @deprecated\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<User> List of Users who are admins in the facility.\n-\t */\n-\tgetAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getFacilitiesManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility direct admins.\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<User> list of admins of the facility\n-\t */\n-\tgetDirectAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getDirectAdmins(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility group admins.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Group> admins\n-\t */\n-\t/*#\n-\t * Get all Facility group admins.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Group> admins\n-\t */\n-\tgetAdminGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getAdminGroups(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all richUser administrators for the facility and supported role with specific attributes.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n-\t */\n-\t/*#\n-\t * Get all Facility admins as RichUsers\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<RichUser> admins\n-\t */\n-\t/*#\n-\t * Get list of all richUser administrators for the facility and supported role with specific attributes.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n-\t */\n-\t/*#\n-    * Get all Facility admins as RichUsers\n-\t*\n-\t* @deprecated\n-    * @param facility int Facility <code>id</code>\n-    * @return List<RichUser> admins\n-    */\n-\tgetRichAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tparms.readList(\"specificAttributes\", String.class),\n-\t\t\t\t\t\tparms.readBoolean(\"allUserAttributes\"),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getFacilitiesManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility admins as RichUsers with all their non-null user attributes\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\t/*#\n-\t* Get all Facility admins as RichUsers with all their non-null user attributes\n-\t*\n-\t* @deprecated\n-\t* @param facility int Facility <code>id</code>\n-\t* @return List<RichUser> admins with attributes\n-\t*/\n-\tgetRichAdminsWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getRichAdminsWithAttributes(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility admins as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\t/*#\n-\t* Get all Facility admins as RichUsers with specific attributes (from user namespace)\n-\t*\n-\t* @deprecated\n-\t* @param facility int Facility <code>id</code>\n-\t* @param specificAttributes List<String> list of attributes URNs\n-\t* @return List<RichUser> admins with attributes\n-\t*/\n-\tgetRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility admins, which are assigned directly,\n-\t * as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> direct admins with attributes\n-\t */\n-\t/*#\n-\t* Get all Facility admins, which are assigned directly,\n-\t* as RichUsers with specific attributes (from user namespace)\n-\t*\n-\t* @deprecated\n-\t* @param facility int Facility <code>id</code>\n-\t* @param specificAttributes List<String> list of attributes URNs\n-\t* @return List<RichUser> direct admins with attributes\n-\t*/\n-\tgetDirectRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of Facilities, where the user is an Administrator.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Facility> Found Facilities\n-\t */\n-\tgetFacilitiesWhereUserIsAdmin {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all facilities where exists host with the specific hostname\n-\t *\n-\t * @param hostname String specific hostname\n-\t * @return List<Facility> Found Facilities\n-\t */\n-\tgetFacilitiesByHostName {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesByHostName(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"hostname\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all users which can use this facility\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n-\t * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n-\t * @return List<User> list of allowed users\n-\t */\n-\t/*#\n-\t * Return all users which can use this facility\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n-\t * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n-\t * @return List<User> list of allowed users\n-\t */\n-\tgetAllowedUsers {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"vo\")) {\n-\t\t\t\tif(parms.contains(\"service\")) {\n-\t\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t\t} else {\n-\t\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tnull);\n-\t\t\t\t}\n-\t\t\t} else if(parms.contains(\"service\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tnull,\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\tcopyOwners {\n-\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility srcFacility;\n-\t\t\tif (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n-\t\t\telse srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n-\n-\t\t\tFacility destFacility;\n-\t\t\tif (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n-\t\t\telse destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n-\n-\t\t\tac.getFacilitiesManager().copyOwners(ac.getSession(),\n-\t\t\t\t\tsrcFacility,\n-\t\t\t\t\tdestFacility);\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\tcopyManagers {\n-\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility srcFacility;\n-\t\t\tif (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n-\t\t\telse srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n-\n-\t\t\tFacility destFacility;\n-\t\t\tif (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n-\t\t\telse destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n-\n-\t\t\tac.getFacilitiesManager().copyManagers(ac.getSession(),\n-\t\t\t\t\tsrcFacility,\n-\t\t\t\t\tdestFacility);\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\tcopyAttributes {\n-\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility srcFacility;\n-\t\t\tif (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n-\t\t\telse srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n-\n-\t\t\tFacility destFacility;\n-\t\t\tif (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n-\t\t\telse destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n-\n-\t\t\tac.getFacilitiesManager().copyAttributes(ac.getSession(),\n-\t\t\t\t\tsrcFacility,\n-\t\t\t\t\tdestFacility);\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of contact groups for the Owner.\n-\t *\n-\t * @param owner int Owner <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the User.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the Group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the Facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the Facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\tgetFacilityContactGroups {\n-\t\t@Override\n-\t\tpublic List<ContactGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"owner\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getOwnerById(parms.readInt(\"owner\")));\n-\t\t\t} else if(parms.contains(\"user\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else if(parms.contains(\"group\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t} else if(parms.contains(\"facility\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"owner or user or group or facility\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get contact group for the facility and the name.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param name String name of the contact group\n-\t * @return ContactGroup contactGroup for the facility and the name\n-\t */\n-\t/*#\n-\t * Get contact group for the facility and the name.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param name String name of the contact group\n-\t * @return ContactGroup contactGroup for the facility and the name\n-\t */\n-\tgetFacilityContactGroup {\n-\t\t@Override\n-\t\tpublic ContactGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif((parms.contains(\"facility\") || parms.contains(\"facilityName\")) && parms.contains(\"name\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroup(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms), parms.readString(\"name\"));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"facility and name or facilityName and name\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all exist contact group names.\n-\t *\n-\t * @return List<String> list of contact group names\n-\t */\n-\tgetAllContactGroupNames {\n-\t\t@Override\n-\t\tpublic List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAllContactGroupNames(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add all contacts in list of facilities contact groups\n-\t *\n-\t * @param contactGroupsToAdd List<ContactGroup> list of contact groups to add\n-\t */\n-\taddFacilityContacts {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().addFacilityContacts(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"contactGroupsToAdd\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add all contacts in the contact group\n-\t *\n-\t * @param contactGroupToAdd ContactGroup contact group to add\n-\t */\n-\taddFacilityContact {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().addFacilityContact(ac.getSession(),\n-\t\t\t\t\tparms.read(\"contactGroupToAdd\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove all contacts in list of facilities contact groups\n-\t *\n-\t * @param contactGroupsToRemove List<ContactGroup> list of contact groups to remove\n-\t */\n-\tremoveFacilityContacts {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().removeFacilityContacts(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"contactGroupsToRemove\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove all contacts in the contact group\n-\t *\n-\t * @param contactGroupToRemove ContactGroup contact group to remove\n-\t */\n-\tremoveFacilityContact {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().removeFacilityContact(ac.getSession(),\n-\t\t\t\t\tparms.read(\"contactGroupToRemove\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return assigned security teams for specific facility\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<SecurityTeam> assigned security teams fot given facility\n-\t * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n-\t */\n-\t/*#\n-\t * Return assigned security teams for specific facility\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<SecurityTeam> assigned security teams fot given facility\n-\t * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n-\t */\n-\tgetAssignedSecurityTeams {\n-\t\t@Override\n-\t\tpublic List<SecurityTeam> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAssignedSecurityTeams(ac.getSession(), getFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign given security team to given facility (means the facility trusts the security team)\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n-\t */\n-\t/*#\n-\t * Assign given security team to given facility (means the facility trusts the security team)\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n-\t */\n-\tassignSecurityTeam {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getFacilitiesManager().assignSecurityTeam(ac.getSession(), getFacility(ac, parms),\n-\t\t\t\t\tac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove (Unassign) given security team from given facility\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n-\t */\n-\t/*#\n-\t * Remove (Unassign) given security team from given facility\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n-\t */\n-\tremoveSecurityTeam {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getFacilitiesManager().removeSecurityTeam(ac.getSession(), getFacility(ac, parms),\n-\t\t\t\t\tac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Set ban for user on facility.\n-\t *\n-\t * @param banOnFacility BanOnFacility JSON object\n-\t * @return BanOnFacility Created banOnFacility\n-\t */\n-\tsetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\treturn ac.getFacilitiesManager().setBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnFacility\", BanOnFacility.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get Ban for user on facility by it's id.\n-\t *\n-\t * @param banId int BanOnFacility <code>id</code>\n-\t * @return BanOnFacility banOnFacility\n-\t */\n-\tgetBanById {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBanById(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get ban by userId and facilityId.\n-\t *\n-\t * @param userId int User <code>id</code>\n-\t * @param facilityId int Facility <code>id</code>\n-\t * @return BanOnFacility banOnFacility\n-\t */\n-\tgetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for user on any facility.\n-\t *\n-\t * @param userId int User <code>id</code>\n-\t * @return List<BanOnFacility> userBansOnFacilities\n-\t */\n-\tgetBansForUser {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBansForUser(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for user on the facility.\n-\t *\n-\t * @param facilityId int Facility <code>id</code>\n-\t * @return List<BanOnFacility> usersBansOnFacility\n-\t */\n-\tgetBansForFacility {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBansForFacility(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"facilityId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update existing ban (description, validation timestamp)\n-\t *\n-\t * @param banOnFacility BanOnFacility JSON object\n-\t * @return BanOnFacility updated banOnFacility\n-\t */\n-\tupdateBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\treturn ac.getFacilitiesManager().updateBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnFacility\", BanOnFacility.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove specific ban by it's id.\n-\t *\n-\t * @param banId int BanOnFacility <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove specific ban by userId and facilityId.\n-\t *\n-\t * @param userId int User <code>id</code>\n-\t * @param facilityId int Facility <code>id</code>\n-\t */\n-\tremoveBan {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"banId\")) {\n-\t\t\t\tac.getFacilitiesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t};\n-\t\n-\tprivate static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\tif (parms.contains(\"facilityName\")) return ac.getFacilityByName(parms.readString(\"facilityName\"));\n-\t\telse return ac.getFacilityById(parms.readInt(\"facility\"));\n-\t}\n+    /*#\n+     * Searches for the Facility with specified id.\n+     *\n+     * @param id int Facility <code>id</code>\n+     * @return Facility Found facility\n+     */\n+    getFacilityById {\n+        @Override\n+        public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilityById(parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Searches the Facility by its name.\n+     *\n+     * @param name String Facility name\n+     * @return Facility Found facility\n+     */\n+    getFacilityByName {\n+        @Override\n+        public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilityByName(parms.readString(\"name\"));\n+        }\n+    },\n+\n+    /*#\n+     * Lists all users assigned to facility containing resources where service is assigned.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @param facilityName String Facility name\n+     * @return List<User> assigned users\n+     */\n+    /*#\n+     * Lists all users assigned to facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<User> assigned users\n+     */\n+    /*#\n+     * Lists all users assigned to facility containing resources where service is assigned.\n+     *\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @return List<User> assigned users\n+     */\n+    /*#\n+     * Lists all users assigned to facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<User> assigned users\n+     */\n+    getAssignedUsers {\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"service\")) {\n+                return ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms), ac.getServiceById(parms.readInt(\"service\")));\n+            } else {\n+                return ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Gets all possible rich facilities with all their owners.\n+     *\n+     * @return List<RichFacility> rich facilities\n+     */\n+    getRichFacilities {\n+        @Override\n+        public List<RichFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getRichFacilities(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Searches for the Facilities by theirs destination.\n+     *\n+     * @param destination String Destination\n+     * @return Facility Found facility\n+     */\n+    getFacilitiesByDestination {\n+        @Override\n+        public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getFacilitiesByDestination(ac.getSession(),\n+                    parms.readString(\"destination\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all facilities that have set the attribute 'attributeName' with the value 'attributeValue'.\n+     * Searching only def and opt attributes. Large attributes are not supported.\n+     *\n+     * @param attributeName String\n+     * @param attributeValue String\n+     * @return List<Facility> facilities with the specified attribute\n+     */\n+    getFacilitiesByAttribute {\n+        @Override\n+        public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getFacilitiesByAttribute(ac.getSession(),\n+                    parms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n+        }\n+    },\n+\n+    /*#\n+     * List all facilities.\n+     *\n+     * @return List<Facility> All facilities\n+     */\n+    getFacilities {\n+        @Override\n+        public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getFacilities(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Gets count of all facilities.\n+     * @return int Facilities count\n+     */\n+    getFacilitiesCount {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getFacilitiesCount(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Returns owners of a facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<Owner> Facility owners\n+     */\n+    /*#\n+     * Returns owners of a facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Owner> Facility owners\n+     */\n+    getOwners {\n+        @Override\n+        public List<Owner> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getOwners(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Add owner of a facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @param ownerName String Owner name\n+     */\n+    /*#\n+     * Add owner of a facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @param owner int Owner <code>id</code>\n+     */\n+    /*#\n+     * Add owner of a facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param ownerName String Owner name\n+     */\n+    /*#\n+     * Add owner of a facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param owner int Owner <code>id</code>\n+     */\n+    addOwner {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            Owner owner;\n+            if (parms.contains(\"ownerName\")) {\n+                owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n+            } else {\n+                owner = ac.getOwnerById(parms.readInt(\"owner\"));\n+            }\n+\n+            ac.getFacilitiesManager().addOwner(ac.getSession(),\n+                    getFacility(ac, parms),\n+                    owner);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove owner of a facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @param ownerName String Owner name\n+     */\n+    /*#\n+     * Remove owner of a facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param ownerName String Owner name\n+     */\n+    /*#\n+     * Remove owner of a facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @param owner int Owner <code>id</code>\n+     */\n+    /*#\n+     * Remove owner of a facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param owner int Owner <code>id</code>\n+     */\n+    removeOwner {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            Owner owner;\n+            if (parms.contains(\"ownerName\")) {\n+                owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n+            } else {\n+                owner = ac.getOwnerById(parms.readInt(\"owner\"));\n+            }\n+\n+            ac.getFacilitiesManager().removeOwner(ac.getSession(),\n+                    getFacility(ac, parms),\n+                    owner);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<Vo> List of VOs\n+     */\n+    /*#\n+     * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Vo> List of VOs\n+     */\n+    getAllowedVos {\n+        @Override\n+        public List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getAllowedVos(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Get all assigned groups on Facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<Group> assigned groups\n+     */\n+    /*#\n+     * Get all assigned groups on Facility filtered by VO.\n+     *\n+     * @param facilityName String Facility name\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @return List<Group> assigned groups\n+     */\n+    /*#\n+     * Get all assigned groups on Facility filtered by Service.\n+     *\n+     * @param facilityName String Facility name\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @return List<Group> assigned groups\n+     */\n+    /*#\n+     * Get all assigned groups on Facility filtered by VO and Service.\n+     *\n+     * @param facilityName String Facility name\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @return List<Group> assigned groups\n+     */\n+    /*#\n+     * Get all assigned groups on Facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Group> assigned groups\n+     */\n+    /*#\n+     * Get all assigned groups on Facility filtered by VO.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @return List<Group> assigned groups\n+     */\n+    /*#\n+     * Get all assigned groups on Facility filtered by Service.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @return List<Group> assigned groups\n+     */\n+    /*#\n+     * Get all assigned groups on Facility filtered by VO and Service.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @return List<Group> assigned groups\n+     */\n+    getAllowedGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            Facility facility = getFacility(ac, parms);\n+            Service service = null;\n+            Vo vo = null;\n+            if (parms.contains(\"vo\")) {\n+                vo = ac.getVoById(parms.readInt(\"vo\"));\n+            }\n+            if (parms.contains(\"service\")) {\n+                service = ac.getServiceById(parms.readInt(\"service\"));\n+            }\n+            return ac.getFacilitiesManager().getAllowedGroups(ac.getSession(), facility, vo, service);\n+        }\n+    },\n+\n+    /*#\n+     * Get all assigned RichGroups on Facility with specified set of attributes.\n+     *\n+     * @param facilityName String Facility name\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    /*#\n+     * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n+     *\n+     * @param facilityName String Facility name\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    /*#\n+     * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n+     *\n+     * @param facilityName String Facility name\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    /*#\n+     * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n+     *\n+     * @param facilityName String Facility name\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    /*#\n+     * Get all assigned RichGroups on Facility with specified set of attributes.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    /*#\n+     * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    /*#\n+     * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    /*#\n+     * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param vo int Vo <code>id</code> to filter groups by\n+     * @param service int Service <code>id</code> to filter groups by\n+     * @param attrNames List<String> Attribute names\n+     * @return List<RichGroup> assigned groups\n+     * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+     */\n+    getAllowedRichGroupsWithAttributes {\n+        @Override\n+        public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            Facility facility = getFacility(ac, parms);\n+\n+            Service service = null;\n+            Vo vo = null;\n+            if (parms.contains(\"vo\")) {\n+                vo = ac.getVoById(parms.readInt(\"vo\"));\n+            }\n+            if (parms.contains(\"service\")) {\n+                service = ac.getServiceById(parms.readInt(\"service\"));\n+            }\n+            return ac.getFacilitiesManager().getAllowedRichGroupsWithAttributes(ac.getSession(), facility, vo, service, parms.readList(\"attrNames\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all resources assigned to a facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<Resource> Resources\n+     */\n+    /*#\n+     * Returns all resources assigned to a facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Resource> Resources\n+     */\n+    getAssignedResources {\n+        @Override\n+        public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getAssignedResources(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Returns all rich resources assigned to a facility with VO property filled.\n+     * @param facilityName String Facility name\n+     * @return List<RichResource> Resources\n+     */\n+    /*#\n+     * Returns all rich resources assigned to a facility with VO property filled.\n+     * @param facility int Facility <code>id</code>\n+     * @return List<RichResource> Resources\n+     */\n+    getAssignedRichResources {\n+        @Override\n+        public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getAssignedRichResources(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Creates a facility. Caller is automatically set as facility manager.\n+     * Facility Object must contain name which can contain only a-Z0-9.-_ and space characters.\n+     * Parameter description is optional.\n+     * Other parameters are ignored.\n+     * @param facility Facility JSON object\n+     * @return Facility Created Facility object\n+     * @exampleParam facility { \"name\" : \"the best-facility_7\" }\n+     */\n+    /*#\n+     * Creates a facility. Caller is automatically set as facility manager.\n+     * @param name String name of a facility - can contain only a-Z0-9.-_ and space characters.\n+     * @param description String description of a facility\n+     * @return Facility Created Facility object\n+     * @exampleParam name \"the best-facility_7\"\n+     * @exampleParam description \"A description with information.\"\n+     */\n+    createFacility {\n+        @Override\n+        public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"facility\")) {\n+                return ac.getFacilitiesManager().createFacility(ac.getSession(),\n+                        parms.read(\"facility\", Facility.class));\n+            } else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n+                String name = parms.readString(\"name\");\n+                String description = parms.readString(\"description\");\n+                Facility facility = new Facility(0, name, description);\n+                return ac.getFacilitiesManager().createFacility(ac.getSession(), facility);\n+            } else {\n+                throw new RpcException(RpcException.Type.WRONG_PARAMETER);\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Deletes a facility.\n+     * @param facilityName String Facility name\n+     */\n+    /*#\n+     * Deletes a facility.\n+     * @param facilityName String Facility name\n+     * @param force Boolean if true deletes all constrains of facility before deleting facility\n+     */\n+    /*#\n+     * Deletes a facility.\n+     * @param facility int Facility <code>id</code>\n+     */\n+    /*#\n+     * Deletes a facility.\n+     * @param facility int Facility <code>id</code>\n+     * @param force Boolean if true deletes all constrains of facility before deleting facility\n+     */\n+    deleteFacility {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"force\")) {\n+                ac.getFacilitiesManager().deleteFacility(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        parms.readBoolean(\"force\"));\n+                return null;\n+            } else {\n+                ac.getFacilitiesManager().deleteFacility(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        false);\n+                return null;\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Update a facility (facility name)\n+     *\n+     * @param facility Facility JSON object\n+     * @return Facility updated Facility object\n+     */\n+    updateFacility {\n+        @Override\n+        public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().updateFacility(ac.getSession(),\n+                    parms.read(\"facility\", Facility.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of all facilities owned by the owner.\n+     * @param owner int Owner <code>id</code>\n+     * @return List<Facility> Owner's facilities\n+     */\n+    getOwnerFacilities {\n+        @Override\n+        public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getOwnerFacilities(ac.getSession(),\n+                    ac.getOwnerById(parms.readInt(\"owner\")));\n+        }\n+    },\n+\n+    /*#\n+     * Lists hosts of a Facility.\n+     * @param facilityName String Facility name\n+     * @return List<Host> Hosts\n+     */\n+    /*#\n+     * Lists hosts of a Facility.\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Host> Hosts\n+     */\n+    getHosts {\n+        @Override\n+        public List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getHosts(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Returns a host by its <code>id</code>.\n+     * @param id int Host <code>id</code>\n+     * @return Host Host object\n+     */\n+    getHostById {\n+        @Override\n+        public Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getHostById(ac.getSession(), parms.readInt(\"id\"));\n+        }\n+    },\n+\n+    /*#\n+     * Returns hosts by hostname. (from all facilities)\n+     * @param hostname String hostname of hosts\n+     * @return List<Host> all hosts with this hostname, empty arrayList if none exists\n+     */\n+    getHostsByHostname {\n+        @Override\n+        public List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getHostsByHostname(ac.getSession(), parms.readString(\"hostname\"));\n+        }\n+    },\n+\n+    /*#\n+     * Return facility which has the host.\n+     * @param host int Host <code>id</code>\n+     * @return Facility Facility object\n+     */\n+    getFacilityForHost {\n+        @Override\n+        public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getFacilityForHost(ac.getSession(),\n+                    ac.getHostById(parms.readInt(\"host\")));\n+        }\n+    },\n+\n+    /*#\n+     * Count hosts of Facility.\n+     * @param facilityName String Facility name\n+     * @return int Hosts count\n+     */\n+    /*#\n+     * Count hosts of Facility.\n+     * @param facility int Facility <code>id</code>\n+     * @return int Hosts count\n+     */\n+    getHostsCount {\n+        @Override\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getHostsCount(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Adds hosts to the Facility.\n+     *\n+     * @param hostnames List<String> Host names\n+     * @param facilityName String Facility name\n+     * @return List<Host> Hosts with <code>id</code>'s set.\n+     */\n+    /*#\n+     * Adds hosts to the Facility.\n+     *\n+     * @param hostnames List<String> Host names\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Host> Hosts with <code>id</code>'s set.\n+     */\n+    addHosts {\n+        @Override\n+        public List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            Facility facility = getFacility(ac, parms);\n+\n+            List<String> hostnames = parms.readList(\"hostnames\", String.class);\n+\n+            return ac.getFacilitiesManager().addHosts(ac.getSession(), facility, hostnames);\n+        }\n+    },\n+\n+    /*#\n+     * Remove hosts from a Facility.\n+     * @param hosts List<Integer> List of Host IDs\n+     * @param facilityName String Facility name\n+     */\n+    /*#\n+     * Remove hosts from a Facility.\n+     * @param hosts List<Integer> List of Host IDs\n+     * @param facility int Facility <code>id</code>\n+     */\n+    removeHosts {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            Facility facility = getFacility(ac, parms);\n+\n+            //TODO: optimalizovat?\n+            int[] ids = parms.readArrayOfInts(\"hosts\");\n+            List<Host> hosts = new ArrayList<Host>(ids.length);\n+            for (int i : ids) {\n+                hosts.add(ac.getHostById(i));\n+            }\n+\n+            ac.getFacilitiesManager().removeHosts(ac.getSession(),\n+                    hosts,\n+                    facility);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Adds host to a Facility.\n+     * @param hostname String Hostname\n+     * @param facilityName String Facility name\n+     * @return Host Host with <code>id</code> set.\n+     */\n+    /*#\n+     * Adds host to a Facility.\n+     * @param hostname String Hostname\n+     * @param facility int Facility <code>id</code>\n+     * @return Host Host with <code>id</code> set.\n+     */\n+    addHost {\n+        @Override\n+        public Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            Facility facility = getFacility(ac, parms);\n+\n+            String hostname = parms.readString(\"hostname\");\n+            Host host = new Host();\n+            host.setHostname(hostname);\n+\n+            return ac.getFacilitiesManager().addHost(ac.getSession(), host, facility);\n+        }\n+    },\n+\n+    /*#\n+     * Removes a host.\n+     * @param host int Host <code>id</code>\n+     */\n+    removeHost {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            int id = parms.readInt(\"host\");\n+\n+            Host host = ac.getFacilitiesManager().getHostById(ac.getSession(), id);\n+\n+            ac.getFacilitiesManager().removeHost(ac.getSession(), host);\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove host from the Facility based on hostname. If there is ambiguity, method throws exception and no host is removed.\n+     *\n+     * @param hostname String hostname\n+     * @throw HostNotExistsException When host doesn't exist or is not unique by name\n+     */\n+    removeHostByHostname {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            ac.getFacilitiesManager().removeHostByHostname(ac.getSession(), parms.readString(\"hostname\"));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get facilities where the service is defined..\n+     *\n+     * @param service int Service <code>id</code>\n+     * @return List<Facility> Assigned facilities\n+     */\n+    /*#\n+     * Get facilities which are assigned to a Group (via resource).\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<Facility> Assigned facilities\n+     */\n+    /*#\n+     * Get facilities which have the member access on.\n+     *\n+     * @param member int Member <code>id</code>\n+     * @return List<Facility> Assigned facilities\n+     */\n+    /*#\n+     * Get facilities which have the user access on.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<Facility> Assigned facilities\n+     */\n+    getAssignedFacilities {\n+        @Override\n+        public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"service\")) {\n+                return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n+                        ac.getServiceById(parms.readInt(\"service\")));\n+            } else if (parms.contains(\"group\")) {\n+                return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")));\n+            } else if (parms.contains(\"member\")) {\n+                return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n+                        ac.getMemberById(parms.readInt(\"member\")));\n+            } else if (parms.contains(\"user\")) {\n+                return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"service or group or member of user\");\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Adds a Facility admin.\n+     *\n+     * @param facilityName String Facility name\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     *  Adds a group administrator to the Facility.\n+     *\n+     *  @param facilityName String Facility name\n+     *  @param authorizedGroup int Group <code>id</code>\n+     */\n+    /*#\n+     * Adds a Facility admin.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     *  Adds a group administrator to the Facility.\n+     *\n+     *  @param facility int Facility <code>id</code>\n+     *  @param authorizedGroup int Group <code>id</code>\n+     */\n+    addAdmin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+            if (parms.contains(\"user\")) {\n+                ac.getFacilitiesManager().addAdmin(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                ac.getFacilitiesManager().addAdmin(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Removes a Facility admin.\n+     *\n+     * @param facilityName String Facility name\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     *  Removes a group administrator of the Facility.\n+     *\n+     *  @param facilityName String Facility name\n+     *  @param authorizedGroup int Group <code>id</code>\n+     */\n+    /*#\n+     * Removes a Facility admin.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param user int User <code>id</code>\n+     */\n+    /*#\n+     *  Removes a group administrator of the Facility.\n+     *\n+     *  @param facility int Facility <code>id</code>\n+     *  @param authorizedGroup int Group <code>id</code>\n+     */\n+    removeAdmin {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+            if (parms.contains(\"user\")) {\n+                ac.getFacilitiesManager().removeAdmin(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else {\n+                ac.getFacilitiesManager().removeAdmin(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+            }\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Get list of all facility administrators for supported role and given facility.\n+     *\n+     * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+     *\n+     * Supported roles: FacilityAdmin\n+     *\n+     * @param facilityName String Facility name\n+     * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n+     *\n+     * @return List<User> list of all facility administrators of the given facility for supported role\n+     */\n+    /*#\n+     * Get all Facility admins.\n+     *\n+     * @deprecated\n+     * @param facilityName String Facility name\n+     * @return List<User> List of Users who are admins in the facility.\n+     */\n+    /*#\n+     * Get list of all facility administrators for supported role and given facility.\n+     *\n+     * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+     *\n+     * Supported roles: FacilityAdmin\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n+     *\n+     * @return List<User> list of all facility administrators of the given facility for supported role\n+     */\n+    /*#\n+     * Get all Facility admins.\n+     *\n+     * @deprecated\n+     * @param facility int Facility <code>id</code>\n+     * @return List<User> List of Users who are admins in the facility.\n+     */\n+    getAdmins {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            if (parms.contains(\"onlyDirectAdmins\")) {\n+                return ac.getFacilitiesManager().getAdmins(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        parms.readBoolean(\"onlyDirectAdmins\"));\n+            } else {\n+                return ac.getFacilitiesManager().getAdmins(ac.getSession(),\n+                        getFacility(ac, parms));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get all Facility direct admins.\n+     *\n+     * @deprecated\n+     * @param facilityName String Facility name\n+     * @return List<User> list of admins of the facility\n+     */\n+    getDirectAdmins {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getDirectAdmins(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Get all Facility group admins.\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<Group> admins\n+     */\n+    /*#\n+     * Get all Facility group admins.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Group> admins\n+     */\n+    getAdminGroups {\n+        @Override\n+        public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getAdminGroups(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Get list of all richUser administrators for the facility and supported role with specific attributes.\n+     *\n+     * Supported roles: FacilityAdmin\n+     *\n+     * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n+     * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+     *\n+     * @param facilityName String Facility name\n+     * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+     * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+     * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n+     *\n+     * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n+     */\n+    /*#\n+     * Get all Facility admins as RichUsers\n+     *\n+     * @deprecated\n+     * @param facilityName String Facility name\n+     * @return List<RichUser> admins\n+     */\n+    /*#\n+     * Get list of all richUser administrators for the facility and supported role with specific attributes.\n+     *\n+     * Supported roles: FacilityAdmin\n+     *\n+     * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n+     * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+     * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+     * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n+     *\n+     * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n+     */\n+    /*#\n+     * Get all Facility admins as RichUsers\n+     *\n+     * @deprecated\n+     * @param facility int Facility <code>id</code>\n+     * @return List<RichUser> admins\n+     */\n+    getRichAdmins {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            if (parms.contains(\"onlyDirectAdmins\")) {\n+                return ac.getFacilitiesManager().getRichAdmins(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        parms.readList(\"specificAttributes\", String.class),\n+                        parms.readBoolean(\"allUserAttributes\"),\n+                        parms.readBoolean(\"onlyDirectAdmins\"));\n+            } else {\n+                return ac.getFacilitiesManager().getRichAdmins(ac.getSession(),\n+                        getFacility(ac, parms));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get all Facility admins as RichUsers with all their non-null user attributes\n+     *\n+     * @deprecated\n+     * @param facilityName String Facility name\n+     * @return List<RichUser> admins with attributes\n+     */\n+    /*#\n+     * Get all Facility admins as RichUsers with all their non-null user attributes\n+     *\n+     * @deprecated\n+     * @param facility int Facility <code>id</code>\n+     * @return List<RichUser> admins with attributes\n+     */\n+    getRichAdminsWithAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getRichAdminsWithAttributes(ac.getSession(),\n+                    getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Get all Facility admins as RichUsers with specific attributes (from user namespace)\n+     *\n+     * @deprecated\n+     * @param facilityName String Facility name\n+     * @param specificAttributes List<String> list of attributes URNs\n+     * @return List<RichUser> admins with attributes\n+     */\n+    /*#\n+     * Get all Facility admins as RichUsers with specific attributes (from user namespace)\n+     *\n+     * @deprecated\n+     * @param facility int Facility <code>id</code>\n+     * @param specificAttributes List<String> list of attributes URNs\n+     * @return List<RichUser> admins with attributes\n+     */\n+    getRichAdminsWithSpecificAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getRichAdminsWithSpecificAttributes(ac.getSession(),\n+                    getFacility(ac, parms),\n+                    parms.readList(\"specificAttributes\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Get all Facility admins, which are assigned directly,\n+     * as RichUsers with specific attributes (from user namespace)\n+     *\n+     * @deprecated\n+     * @param facilityName String Facility name\n+     * @param specificAttributes List<String> list of attributes URNs\n+     * @return List<RichUser> direct admins with attributes\n+     */\n+    /*#\n+     * Get all Facility admins, which are assigned directly,\n+     * as RichUsers with specific attributes (from user namespace)\n+     *\n+     * @deprecated\n+     * @param facility int Facility <code>id</code>\n+     * @param specificAttributes List<String> list of attributes URNs\n+     * @return List<RichUser> direct admins with attributes\n+     */\n+    getDirectRichAdminsWithSpecificAttributes {\n+        @Override\n+        public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(),\n+                    getFacility(ac, parms),\n+                    parms.readList(\"specificAttributes\", String.class));\n+        }\n+    },\n+\n+    /*#\n+     * Returns list of Facilities, where the user is an Administrator.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<Facility> Found Facilities\n+     */\n+    getFacilitiesWhereUserIsAdmin {\n+        @Override\n+        public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getFacilitiesWhereUserIsAdmin(ac.getSession(),\n+                    ac.getUserById(parms.readInt(\"user\")));\n+        }\n+    },\n+\n+    /*#\n+     * Return all facilities where exists host with the specific hostname\n+     *\n+     * @param hostname String specific hostname\n+     * @return List<Facility> Found Facilities\n+     */\n+    getFacilitiesByHostName {\n+        @Override\n+        public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getFacilitiesByHostName(ac.getSession(),\n+                    parms.readString(\"hostname\"));\n+        }\n+    },\n+\n+    /*#\n+     * Return all users which can use this facility\n+     *\n+     * @param facilityName String Facility name\n+     * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n+     * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n+     * @return List<User> list of allowed users\n+     */\n+    /*#\n+     * Return all users which can use this facility\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n+     * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n+     * @return List<User> list of allowed users\n+     */\n+    getAllowedUsers {\n+        @Override\n+        public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"vo\")) {\n+                if (parms.contains(\"service\")) {\n+                    return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n+                            getFacility(ac, parms),\n+                            ac.getVoById(parms.readInt(\"vo\")),\n+                            ac.getServiceById(parms.readInt(\"service\")));\n+                } else {\n+                    return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n+                            getFacility(ac, parms),\n+                            ac.getVoById(parms.readInt(\"vo\")),\n+                            null);\n+                }\n+            } else if (parms.contains(\"service\")) {\n+                return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n+                        getFacility(ac, parms),\n+                        null,\n+                        ac.getServiceById(parms.readInt(\"service\")));\n+            } else {\n+                return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n+                        getFacility(ac, parms));\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Copy owners from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacilityName String facility name\n+     * @param destFacilityName String facility name\n+     */\n+    /*#\n+     * Copy owners from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacility int facility <code>id</code>\n+     * @param destFacilityName String facility name\n+     */\n+    /*#\n+     * Copy owners from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacilityName String facility name\n+     * @param destFacility int facility <code>id</code>\n+     */\n+    /*#\n+     * Copy owners from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacility int facility <code>id</code>\n+     * @param destFacility int facility <code>id</code>\n+     */\n+    copyOwners {\n+        @Override\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            Facility srcFacility;\n+            if (parms.contains(\"srcFacilityName\")) {\n+                srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n+            } else {\n+                srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n+            }\n+\n+            Facility destFacility;\n+            if (parms.contains(\"destFacilityName\")) {\n+                destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n+            } else {\n+                destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n+            }\n+\n+            ac.getFacilitiesManager().copyOwners(ac.getSession(),\n+                    srcFacility,\n+                    destFacility);\n+\n+            return null;\n+\n+        }\n+    },\n+\n+    /*#\n+     * Copy managers from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacilityName String facility name\n+     * @param destFacilityName String facility name\n+     */\n+    /*#\n+     * Copy managers from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacility int facility <code>id</code>\n+     * @param destFacilityName String facility name\n+     */\n+    /*#\n+     * Copy managers from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacilityName String facility name\n+     * @param destFacility int facility <code>id</code>\n+     */\n+    /*#\n+     * Copy managers from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacility int facility <code>id</code>\n+     * @param destFacility int facility <code>id</code>\n+     */\n+    copyManagers {\n+        @Override\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            Facility srcFacility;\n+            if (parms.contains(\"srcFacilityName\")) {\n+                srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n+            } else {\n+                srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n+            }\n+\n+            Facility destFacility;\n+            if (parms.contains(\"destFacilityName\")) {\n+                destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n+            } else {\n+                destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n+            }\n+\n+            ac.getFacilitiesManager().copyManagers(ac.getSession(),\n+                    srcFacility,\n+                    destFacility);\n+\n+            return null;\n+\n+        }\n+    },\n+\n+    /*#\n+     * Copy attributes (settings) from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacilityName String facility name\n+     * @param destFacilityName String facility name\n+     */\n+    /*#\n+     * Copy attributes (settings) from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacility int facility <code>id</code>\n+     * @param destFacilityName String facility name\n+     */\n+    /*#\n+     * Copy attributes (settings) from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacilityName String facility name\n+     * @param destFacility int facility <code>id</code>\n+     */\n+    /*#\n+     * Copy attributes (settings) from source facility to destination facility.\n+     * You must be facility manager of both.\n+     *\n+     * @param srcFacility int facility <code>id</code>\n+     * @param destFacility int facility <code>id</code>\n+     */\n+    copyAttributes {\n+        @Override\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            Facility srcFacility;\n+            if (parms.contains(\"srcFacilityName\")) {\n+                srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n+            } else {\n+                srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n+            }\n+\n+            Facility destFacility;\n+            if (parms.contains(\"destFacilityName\")) {\n+                destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n+            } else {\n+                destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n+            }\n+\n+            ac.getFacilitiesManager().copyAttributes(ac.getSession(),\n+                    srcFacility,\n+                    destFacility);\n+\n+            return null;\n+\n+        }\n+    },\n+\n+    /*#\n+     * Get list of contact groups for the Owner.\n+     *\n+     * @param owner int Owner <code>id</code>\n+     * @return List<ContactGroup> list of assigned contact groups\n+     */\n+    /*#\n+     * Get list of contact groups for the User.\n+     *\n+     * @param user int User <code>id</code>\n+     * @return List<ContactGroup> list of assigned contact groups\n+     */\n+    /*#\n+     * Get list of contact groups for the Group.\n+     *\n+     * @param group int Group <code>id</code>\n+     * @return List<ContactGroup> list of assigned contact groups\n+     */\n+    /*#\n+     * Get list of contact groups for the Facility.\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<ContactGroup> list of assigned contact groups\n+     */\n+    /*#\n+     * Get list of contact groups for the Facility.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<ContactGroup> list of assigned contact groups\n+     */\n+    getFacilityContactGroups {\n+        @Override\n+        public List<ContactGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"owner\")) {\n+                return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n+                        ac.getOwnerById(parms.readInt(\"owner\")));\n+            } else if (parms.contains(\"user\")) {\n+                return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n+                        ac.getUserById(parms.readInt(\"user\")));\n+            } else if (parms.contains(\"group\")) {\n+                return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n+                        ac.getGroupById(parms.readInt(\"group\")));\n+            } else if (parms.contains(\"facility\")) {\n+                return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n+                        getFacility(ac, parms));\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"owner or user or group or facility\");\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get contact group for the facility and the name.\n+     *\n+     * @param facilityName String Facility name\n+     * @param name String name of the contact group\n+     * @return ContactGroup contactGroup for the facility and the name\n+     */\n+    /*#\n+     * Get contact group for the facility and the name.\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param name String name of the contact group\n+     * @return ContactGroup contactGroup for the facility and the name\n+     */\n+    getFacilityContactGroup {\n+        @Override\n+        public ContactGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if ((parms.contains(\"facility\") || parms.contains(\"facilityName\")) && parms.contains(\"name\")) {\n+                return ac.getFacilitiesManager().getFacilityContactGroup(ac.getSession(),\n+                        getFacility(ac, parms), parms.readString(\"name\"));\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"facility and name or facilityName and name\");\n+            }\n+        }\n+    },\n+\n+    /*#\n+     * Get all exist contact group names.\n+     *\n+     * @return List<String> list of contact group names\n+     */\n+    getAllContactGroupNames {\n+        @Override\n+        public List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getAllContactGroupNames(ac.getSession());\n+        }\n+    },\n+\n+    /*#\n+     * Add all contacts in list of facilities contact groups\n+     *\n+     * @param contactGroupsToAdd List<ContactGroup> list of contact groups to add\n+     */\n+    addFacilityContacts {\n+        @Override\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            ac.getFacilitiesManager().addFacilityContacts(ac.getSession(),\n+                    parms.readList(\"contactGroupsToAdd\", ContactGroup.class));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Add all contacts in the contact group\n+     *\n+     * @param contactGroupToAdd ContactGroup contact group to add\n+     */\n+    addFacilityContact {\n+        @Override\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            ac.getFacilitiesManager().addFacilityContact(ac.getSession(),\n+                    parms.read(\"contactGroupToAdd\", ContactGroup.class));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove all contacts in list of facilities contact groups\n+     *\n+     * @param contactGroupsToRemove List<ContactGroup> list of contact groups to remove\n+     */\n+    removeFacilityContacts {\n+        @Override\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            ac.getFacilitiesManager().removeFacilityContacts(ac.getSession(),\n+                    parms.readList(\"contactGroupsToRemove\", ContactGroup.class));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove all contacts in the contact group\n+     *\n+     * @param contactGroupToRemove ContactGroup contact group to remove\n+     */\n+    removeFacilityContact {\n+        @Override\n+        public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            ac.getFacilitiesManager().removeFacilityContact(ac.getSession(),\n+                    parms.read(\"contactGroupToRemove\", ContactGroup.class));\n+\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Return assigned security teams for specific facility\n+     *\n+     * @param facilityName String Facility name\n+     * @return List<SecurityTeam> assigned security teams fot given facility\n+     * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n+     */\n+    /*#\n+     * Return assigned security teams for specific facility\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @return List<SecurityTeam> assigned security teams fot given facility\n+     * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n+     */\n+    getAssignedSecurityTeams {\n+        @Override\n+        public List<SecurityTeam> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getFacilitiesManager().getAssignedSecurityTeams(ac.getSession(), getFacility(ac, parms));\n+        }\n+    },\n+\n+    /*#\n+     * Assign given security team to given facility (means the facility trusts the security team)\n+     *\n+     * @param facilityName String Facility name\n+     * @param securityTeam int SecurityTeam <code>id</code>\n+     * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n+     * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+     * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n+     */\n+    /*#\n+     * Assign given security team to given facility (means the facility trusts the security team)\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param securityTeam int SecurityTeam <code>id</code>\n+     * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n+     * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+     * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n+     */\n+    assignSecurityTeam {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getFacilitiesManager().assignSecurityTeam(ac.getSession(), getFacility(ac, parms),\n+                    ac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     * Remove (Unassign) given security team from given facility\n+     *\n+     * @param facilityName String Facility name\n+     * @param securityTeam int SecurityTeam <code>id</code>\n+     * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n+     * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+     * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n+     */\n+    /*#\n+     * Remove (Unassign) given security team from given facility\n+     *\n+     * @param facility int Facility <code>id</code>\n+     * @param securityTeam int SecurityTeam <code>id</code>\n+     * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n+     * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+     * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n+     */\n+    removeSecurityTeam {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getFacilitiesManager().removeSecurityTeam(ac.getSession(), getFacility(ac, parms),\n+                    ac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n+            return null;\n+        }\n+    },\n+\n+    /*#\n+     *  Set ban for user on facility.\n+     *\n+     * @param banOnFacility BanOnFacility JSON object\n+     * @return BanOnFacility Created banOnFacility\n+     */\n+    setBan {\n+        @Override\n+        public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            return ac.getFacilitiesManager().setBan(ac.getSession(),\n+                    parms.read(\"banOnFacility\", BanOnFacility.class));\n+\n+        }\n+    },\n+\n+    /*#\n+     *  Get Ban for user on facility by it's id.\n+     *\n+     * @param banId int BanOnFacility <code>id</code>\n+     * @return BanOnFacility banOnFacility\n+     */\n+    getBanById {\n+        @Override\n+        public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getBanById(ac.getSession(),\n+                    parms.readInt(\"banId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     *  Get ban by userId and facilityId.\n+     *\n+     * @param userId int User <code>id</code>\n+     * @param facilityId int Facility <code>id</code>\n+     * @return BanOnFacility banOnFacility\n+     */\n+    getBan {\n+        @Override\n+        public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getBan(ac.getSession(),\n+                    parms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Get all bans for user on any facility.\n+     *\n+     * @param userId int User <code>id</code>\n+     * @return List<BanOnFacility> userBansOnFacilities\n+     */\n+    getBansForUser {\n+        @Override\n+        public List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getBansForUser(ac.getSession(),\n+                    parms.readInt(\"userId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Get all bans for user on the facility.\n+     *\n+     * @param facilityId int Facility <code>id</code>\n+     * @return List<BanOnFacility> usersBansOnFacility\n+     */\n+    getBansForFacility {\n+        @Override\n+        public List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+\n+            return ac.getFacilitiesManager().getBansForFacility(ac.getSession(),\n+                    parms.readInt(\"facilityId\"));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Update existing ban (description, validation timestamp)\n+     *\n+     * @param banOnFacility BanOnFacility JSON object\n+     * @return BanOnFacility updated banOnFacility\n+     */\n+    updateBan {\n+        @Override\n+        public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            return ac.getFacilitiesManager().updateBan(ac.getSession(),\n+                    parms.read(\"banOnFacility\", BanOnFacility.class));\n+\n+        }\n+    },\n+\n+    /*#\n+     * Remove specific ban by it's id.\n+     *\n+     * @param banId int BanOnFacility <code>id</code>\n+     */\n+    /*#\n+     * Remove specific ban by userId and facilityId.\n+     *\n+     * @param userId int User <code>id</code>\n+     * @param facilityId int Facility <code>id</code>\n+     */\n+    removeBan {\n+        @Override\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            parms.stateChangingCheck();\n+\n+            if (parms.contains(\"banId\")) {\n+                ac.getFacilitiesManager().removeBan(ac.getSession(),\n+                        parms.readInt(\"banId\"));\n+            } else {\n+                ac.getFacilitiesManager().removeBan(ac.getSession(),\n+                        parms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n+            }\n+            return null;\n+        }\n+    };\n+\n+    private static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n+        if (parms.contains(\"facilityName\")) {\n+            return ac.getFacilityByName(parms.readString(\"facilityName\"));\n+        } else {\n+            return ac.getFacilityById(parms.readInt(\"facility\"));\n+        }\n+    }\n }\n",
            "diff_size": 1706
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/226/FacilitiesManagerMethod.java\nindex b0ddf7c7fd8..0cec793aa90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/226/FacilitiesManagerMethod.java\n@@ -2,1722 +2,1671 @@ package cz.metacentrum.perun.rpc.methods;\n \n import cz.metacentrum.perun.core.api.SecurityTeam;\n import cz.metacentrum.perun.core.api.*;\n-\n import java.util.ArrayList;\n import java.util.List;\n-\n import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.rpc.ApiCaller;\n import cz.metacentrum.perun.rpc.ManagerMethod;\n import cz.metacentrum.perun.core.api.exceptions.RpcException;\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n+\n public enum FacilitiesManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Searches for the Facility with specified id.\n-\t *\n-\t * @param id int Facility <code>id</code>\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacilityById {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilityById(parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Searches the Facility by its name.\n-\t *\n-\t * @param name String Facility name\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacilityByName {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilityByName(parms.readString(\"name\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Lists all users assigned to facility containing resources where service is assigned.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facilityName String Facility name\n-\t * @return List<User> assigned users\n-\t */\n-\t/*#\n-\t * Lists all users assigned to facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<User> assigned users\n-\t */\n-\t/*#\n-\t * Lists all users assigned to facility containing resources where service is assigned.\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<User> assigned users\n-\t */\n-\t/*#\n-\t * Lists all users assigned to facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<User> assigned users\n-\t */\n-\tgetAssignedUsers {\n-\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"service\"))\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms),ac.getServiceById(parms.readInt(\"service\")));\n-\t\t\telse\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets all possible rich facilities with all their owners.\n-\t *\n-\t * @return List<RichFacility> rich facilities\n-\t */\n-\tgetRichFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<RichFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getRichFacilities(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Searches for the Facilities by theirs destination.\n-\t *\n-\t * @param destination String Destination\n-\t * @return Facility Found facility\n-\t */\n-\tgetFacilitiesByDestination {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesByDestination(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"destination\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all facilities that have set the attribute 'attributeName' with the value 'attributeValue'.\n-\t * Searching only def and opt attributes. Large attributes are not supported.\n-\t *\n-\t * @param attributeName String\n-\t * @param attributeValue String\n-\t * @return List<Facility> facilities with the specified attribute\n-\t */\n-\tgetFacilitiesByAttribute {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesByAttribute(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * List all facilities.\n-\t *\n-\t * @return List<Facility> All facilities\n-\t */\n-\tgetFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilities(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Gets count of all facilities.\n-\t * @return int Facilities count\n-\t */\n-\tgetFacilitiesCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesCount(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns owners of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Owner> Facility owners\n-\t */\n-\t/*#\n-\t * Returns owners of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Owner> Facility owners\n-\t */\n-\tgetOwners {\n-\n-\t\t@Override\n-\t\tpublic List<Owner> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getOwners(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Add owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\taddOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tOwner owner;\n-\t\t\tif (parms.contains(\"ownerName\")) owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n-\t\t\telse owner = ac.getOwnerById(parms.readInt(\"owner\"));\n-\n-\t\t\tac.getFacilitiesManager().addOwner(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\towner);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param ownerName String Owner name\n-\t */\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove owner of a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param owner int Owner <code>id</code>\n-\t */\n-\tremoveOwner {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tOwner owner;\n-\t\t\tif (parms.contains(\"ownerName\")) owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n-\t\t\telse owner = ac.getOwnerById(parms.readInt(\"owner\"));\n-\n-\t\t\tac.getFacilitiesManager().removeOwner(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\towner);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Vo> List of VOs\n-\t */\n-\t/*#\n-\t * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Vo> List of VOs\n-\t */\n-\tgetAllowedVos {\n-\n-\t\t@Override\n-\t\tpublic List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAllowedVos(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all assigned groups on Facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by Service.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO and Service.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by Service.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\t/*#\n-\t * Get all assigned groups on Facility filtered by VO and Service.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @return List<Group> assigned groups\n-\t */\n-\tgetAllowedGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\t\t\tService service = null;\n-\t\t\tVo vo = null;\n-\t\t\tif (parms.contains(\"vo\")) {\n-\t\t\t\tvo = ac.getVoById(parms.readInt(\"vo\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\tservice = ac.getServiceById(parms.readInt(\"service\"));\n-\t\t\t}\n-\t\t\treturn ac.getFacilitiesManager().getAllowedGroups(ac.getSession(), facility, vo, service);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all assigned RichGroups on Facility with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\t/*#\n-\t * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int Vo <code>id</code> to filter groups by\n-\t * @param service int Service <code>id</code> to filter groups by\n-\t * @param attrNames List<String> Attribute names\n-\t * @return List<RichGroup> assigned groups\n-\t * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n-\t */\n-\tgetAllowedRichGroupsWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\tService service = null;\n-\t\t\tVo vo = null;\n-\t\t\tif (parms.contains(\"vo\")) {\n-\t\t\t\tvo = ac.getVoById(parms.readInt(\"vo\"));\n-\t\t\t}\n-\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\tservice = ac.getServiceById(parms.readInt(\"service\"));\n-\t\t\t}\n-\t\t\treturn ac.getFacilitiesManager().getAllowedRichGroupsWithAttributes(ac.getSession(), facility, vo, service, parms.readList(\"attrNames\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all resources assigned to a facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Resource> Resources\n-\t */\n-\t/*#\n-\t * Returns all resources assigned to a facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Resource> Resources\n-\t */\n-\tgetAssignedResources {\n-\n-\t\t@Override\n-\t\tpublic List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAssignedResources(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns all rich resources assigned to a facility with VO property filled.\n-\t * @param facilityName String Facility name\n-\t * @return List<RichResource> Resources\n-\t */\n-\t/*#\n-\t * Returns all rich resources assigned to a facility with VO property filled.\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<RichResource> Resources\n-\t */\n-\tgetAssignedRichResources {\n-\n-\t\t@Override\n-\t\tpublic List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAssignedRichResources(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Creates a facility. Caller is automatically set as facility manager.\n-\t * Facility Object must contain name which can contain only a-Z0-9.-_ and space characters.\n-\t * Parameter description is optional.\n-\t * Other parameters are ignored.\n-\t * @param facility Facility JSON object\n-\t * @return Facility Created Facility object\n-\t * @exampleParam facility { \"name\" : \"the best-facility_7\" }\n-\t */\n-\t/*#\n-\t * Creates a facility. Caller is automatically set as facility manager.\n-\t * @param name String name of a facility - can contain only a-Z0-9.-_ and space characters.\n-\t * @param description String description of a facility\n-\t * @return Facility Created Facility object\n-\t * @exampleParam name \"the best-facility_7\"\n-\t * @exampleParam description \"A description with information.\"\n-\t */\n-\tcreateFacility {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"facility\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().createFacility(ac.getSession(),\n-\t\t\t\t\t\tparms.read(\"facility\", Facility.class));\n-\t\t\t} else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n-\t\t\t\tString name = parms.readString(\"name\");\n-\t\t\t\tString description = parms.readString(\"description\");\n-\t\t\t\tFacility facility = new Facility(0, name, description);\n-\t\t\t\treturn ac.getFacilitiesManager().createFacility(ac.getSession(), facility);\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.WRONG_PARAMETER);\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facilityName String Facility name\n-\t */\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facilityName String Facility name\n-\t * @param force Boolean if true deletes all constrains of facility before deleting facility\n-\t */\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Deletes a facility.\n-\t * @param facility int Facility <code>id</code>\n-\t * @param force Boolean if true deletes all constrains of facility before deleting facility\n-\t */\n-\tdeleteFacility {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"force\")){\n-\t\t\t\tac.getFacilitiesManager().deleteFacility(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tparms.readBoolean(\"force\"));\n-\t\t\t\treturn null;\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().deleteFacility(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tfalse);\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update a facility (facility name)\n-\t *\n-\t * @param facility Facility JSON object\n-\t * @return Facility updated Facility object\n-\t */\n-\tupdateFacility {\n-\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().updateFacility(ac.getSession(),\n-\t\t\t\t\tparms.read(\"facility\", Facility.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of all facilities owned by the owner.\n-\t * @param owner int Owner <code>id</code>\n-\t * @return List<Facility> Owner's facilities\n-\t */\n-\tgetOwnerFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getOwnerFacilities(ac.getSession(),\n-\t\t\t\t\tac.getOwnerById(parms.readInt(\"owner\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Lists hosts of a Facility.\n-\t * @param facilityName String Facility name\n-\t * @return List<Host> Hosts\n-\t */\n-\t/*#\n-\t * Lists hosts of a Facility.\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Host> Hosts\n-\t */\n-\tgetHosts {\n-\t\t@Override\n-\t\tpublic List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHosts(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns a host by its <code>id</code>.\n-\t * @param id int Host <code>id</code>\n-\t * @return Host Host object\n-\t */\n-\tgetHostById {\n-\t\t@Override\n-\t\tpublic Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHostById(ac.getSession(), parms.readInt(\"id\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns hosts by hostname. (from all facilities)\n-\t * @param hostname String hostname of hosts\n-\t * @return List<Host> all hosts with this hostname, empty arrayList if none exists\n-\t */\n-\tgetHostsByHostname {\n-\t\t@Override\n-\t\tpublic List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHostsByHostname(ac.getSession(), parms.readString(\"hostname\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return facility which has the host.\n-\t * @param host int Host <code>id</code>\n-\t * @return Facility Facility object\n-\t */\n-\tgetFacilityForHost {\n-\t\t@Override\n-\t\tpublic Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilityForHost(ac.getSession(),\n-\t\t\t\t\tac.getHostById(parms.readInt(\"host\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Count hosts of Facility.\n-\t * @param facilityName String Facility name\n-\t * @return int Hosts count\n-\t */\n-\t/*#\n-\t * Count hosts of Facility.\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int Hosts count\n-\t */\n-\tgetHostsCount {\n-\t\t@Override\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getHostsCount(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds hosts to the Facility.\n-\t *\n-\t * @param hostnames List<String> Host names\n-\t * @param facilityName String Facility name\n-\t * @return List<Host> Hosts with <code>id</code>'s set.\n-\t */\n-\t/*#\n-\t * Adds hosts to the Facility.\n-\t *\n-\t * @param hostnames List<String> Host names\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Host> Hosts with <code>id</code>'s set.\n-\t */\n-\taddHosts {\n-\t\t@Override\n-\t\tpublic List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\tList<String> hostnames = parms.readList(\"hostnames\", String.class);\n-\n-\t\t\treturn ac.getFacilitiesManager().addHosts(ac.getSession(), facility, hostnames);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove hosts from a Facility.\n-\t * @param hosts List<Integer> List of Host IDs\n-\t * @param facilityName String Facility name\n-\t */\n-\t/*#\n-\t * Remove hosts from a Facility.\n-\t * @param hosts List<Integer> List of Host IDs\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tremoveHosts {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\t//TODO: optimalizovat?\n-\t\t\tint[] ids = parms.readArrayOfInts(\"hosts\");\n-\t\t\tList<Host> hosts = new ArrayList<Host>(ids.length);\n-\t\t\tfor (int i : ids) {\n-\t\t\t\thosts.add(ac.getHostById(i));\n-\t\t\t}\n-\n-\t\t\tac.getFacilitiesManager().removeHosts(ac.getSession(),\n-\t\t\t\t\thosts,\n-\t\t\t\t\tfacility);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds host to a Facility.\n-\t * @param hostname String Hostname\n-\t * @param facilityName String Facility name\n-\t * @return Host Host with <code>id</code> set.\n-\t */\n-\t/*#\n-\t * Adds host to a Facility.\n-\t * @param hostname String Hostname\n-\t * @param facility int Facility <code>id</code>\n-\t * @return Host Host with <code>id</code> set.\n-\t */\n-\taddHost {\n-\t\t@Override\n-\t\tpublic Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility facility = getFacility(ac, parms);\n-\n-\t\t\tString hostname = parms.readString(\"hostname\");\n-\t\t\tHost host = new Host();\n-\t\t\thost.setHostname(hostname);\n-\n-\t\t\treturn ac.getFacilitiesManager().addHost(ac.getSession(), host, facility);\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a host.\n-\t * @param host int Host <code>id</code>\n-\t */\n-\tremoveHost {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tint id = parms.readInt(\"host\");\n-\n-\t\t\tHost host = ac.getFacilitiesManager().getHostById(ac.getSession(), id);\n-\n-\t\t\tac.getFacilitiesManager().removeHost(ac.getSession(), host);\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove host from the Facility based on hostname. If there is ambiguity, method throws exception and no host is removed.\n-\t *\n-\t * @param hostname String hostname\n-\t * @throw HostNotExistsException When host doesn't exist or is not unique by name\n-\t */\n-\tremoveHostByHostname {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().removeHostByHostname(ac.getSession(), parms.readString(\"hostname\"));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get facilities where the service is defined..\n-\t *\n-\t * @param service int Service <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\t/*#\n-\t * Get facilities which are assigned to a Group (via resource).\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\t/*#\n-\t * Get facilities which have the member access on.\n-\t *\n-\t * @param member int Member <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\t/*#\n-\t * Get facilities which have the user access on.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Facility> Assigned facilities\n-\t */\n-\tgetAssignedFacilities {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"service\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t} else if (parms.contains(\"group\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t} else if (parms.contains(\"member\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getMemberById(parms.readInt(\"member\")));\n-\t\t\t} else if (parms.contains(\"user\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"service or group or member of user\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Adds a Facility admin.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Adds a group administrator to the Facility.\n-\t *\n-\t *  @param facilityName String Facility name\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\t/*#\n-\t * Adds a Facility admin.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Adds a group administrator to the Facility.\n-\t *\n-\t *  @param facility int Facility <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\taddAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getFacilitiesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().addAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Removes a Facility admin.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Removes a group administrator of the Facility.\n-\t *\n-\t *  @param facilityName String Facility name\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\t/*#\n-\t * Removes a Facility admin.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param user int User <code>id</code>\n-\t */\n-\t/*#\n-\t *  Removes a group administrator of the Facility.\n-\t *\n-\t *  @param facility int Facility <code>id</code>\n-\t *  @param authorizedGroup int Group <code>id</code>\n-\t */\n-\tremoveAdmin {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\t\t\tif (parms.contains(\"user\")) {\n-\t\t\t\tac.getFacilitiesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().removeAdmin(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"authorizedGroup\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all facility administrators for supported role and given facility.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all facility administrators of the given facility for supported role\n-\t */\n-\t/*#\n-\t * Get all Facility admins.\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<User> List of Users who are admins in the facility.\n-\t */\n-\t/*#\n-\t * Get list of all facility administrators for supported role and given facility.\n-\t *\n-\t * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<User> list of all facility administrators of the given facility for supported role\n-\t */\n-\t/*#\n-\t * Get all Facility admins.\n-\t *\n-\t * @deprecated\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<User> List of Users who are admins in the facility.\n-\t */\n-\tgetAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getFacilitiesManager().getAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility direct admins.\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<User> list of admins of the facility\n-\t */\n-\tgetDirectAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getDirectAdmins(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility group admins.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<Group> admins\n-\t */\n-\t/*#\n-\t * Get all Facility group admins.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Group> admins\n-\t */\n-\tgetAdminGroups {\n-\n-\t\t@Override\n-\t\tpublic List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getAdminGroups(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of all richUser administrators for the facility and supported role with specific attributes.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n-\t */\n-\t/*#\n-\t * Get all Facility admins as RichUsers\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<RichUser> admins\n-\t */\n-\t/*#\n-\t * Get list of all richUser administrators for the facility and supported role with specific attributes.\n-\t *\n-\t * Supported roles: FacilityAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n-\t */\n-\t/*#\n+ /*#\n+  * Searches for the Facility with specified id.\n+  *\n+  * @param id int Facility <code>id</code>\n+  * @return Facility Found facility\n+  */\n+\n+\n+ getFacilityById {\n+  @Override\n+  public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilityById(parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Searches the Facility by its name.\n+  *\n+  * @param name String Facility name\n+  * @return Facility Found facility\n+  */\n+\n+\n+ getFacilityByName {\n+  @Override\n+  public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilityByName(parms.readString(\"name\"));\n+  }\n+ },\n+\n+ /*#\n+  * Lists all users assigned to facility containing resources where service is assigned.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @param facilityName String Facility name\n+  * @return List<User> assigned users\n+  */\n+ /*#\n+  * Lists all users assigned to facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<User> assigned users\n+  */\n+ /*#\n+  * Lists all users assigned to facility containing resources where service is assigned.\n+  *\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @return List<User> assigned users\n+  */\n+ /*#\n+  * Lists all users assigned to facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<User> assigned users\n+  */\n+\n+\n+ getAssignedUsers {\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"service\")) return ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms), ac.getServiceById(parms.readInt(\"service\")));\n+   else return ac.getFacilitiesManager().getAssignedUsers(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Gets all possible rich facilities with all their owners.\n+  *\n+  * @return List<RichFacility> rich facilities\n+  */\n+\n+\n+ getRichFacilities {\n+  @Override\n+  public List<RichFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getRichFacilities(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Searches for the Facilities by theirs destination.\n+  *\n+  * @param destination String Destination\n+  * @return Facility Found facility\n+  */\n+\n+\n+ getFacilitiesByDestination {\n+  @Override\n+  public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getFacilitiesByDestination(ac.getSession(), parms.readString(\"destination\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all facilities that have set the attribute 'attributeName' with the value 'attributeValue'.\n+  * Searching only def and opt attributes. Large attributes are not supported.\n+  *\n+  * @param attributeName String\n+  * @param attributeValue String\n+  * @return List<Facility> facilities with the specified attribute\n+  */\n+\n+\n+ getFacilitiesByAttribute {\n+  @Override\n+  public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getFacilitiesByAttribute(ac.getSession(), parms.readString(\"attributeName\"), parms.readString(\"attributeValue\"));\n+  }\n+ },\n+\n+ /*#\n+  * List all facilities.\n+  *\n+  * @return List<Facility> All facilities\n+  */\n+\n+\n+ getFacilities {\n+  @Override\n+  public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getFacilities(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Gets count of all facilities.\n+  * @return int Facilities count\n+  */\n+\n+\n+ getFacilitiesCount {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getFacilitiesCount(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Returns owners of a facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<Owner> Facility owners\n+  */\n+ /*#\n+  * Returns owners of a facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Owner> Facility owners\n+  */\n+\n+\n+ getOwners {\n+  @Override\n+  public List<Owner> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getOwners(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Add owner of a facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @param ownerName String Owner name\n+  */\n+ /*#\n+  * Add owner of a facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @param owner int Owner <code>id</code>\n+  */\n+ /*#\n+  * Add owner of a facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param ownerName String Owner name\n+  */\n+ /*#\n+  * Add owner of a facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param owner int Owner <code>id</code>\n+  */\n+\n+\n+ addOwner {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   Owner owner;\n+   if (parms.contains(\"ownerName\")) owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n+   else owner = ac.getOwnerById(parms.readInt(\"owner\"));\n+   ac.getFacilitiesManager().addOwner(ac.getSession(), getFacility(ac, parms), owner);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove owner of a facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @param ownerName String Owner name\n+  */\n+ /*#\n+  * Remove owner of a facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param ownerName String Owner name\n+  */\n+ /*#\n+  * Remove owner of a facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @param owner int Owner <code>id</code>\n+  */\n+ /*#\n+  * Remove owner of a facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param owner int Owner <code>id</code>\n+  */\n+\n+\n+ removeOwner {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   Owner owner;\n+   if (parms.contains(\"ownerName\")) owner = ac.getOwnerByName(parms.readString(\"ownerName\"));\n+   else owner = ac.getOwnerById(parms.readInt(\"owner\"));\n+   ac.getFacilitiesManager().removeOwner(ac.getSession(), getFacility(ac, parms), owner);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<Vo> List of VOs\n+  */\n+ /*#\n+  * Return all VO which can use a facility. (VO must have the resource which belongs to this facility.)\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Vo> List of VOs\n+  */\n+\n+\n+ getAllowedVos {\n+  @Override\n+  public List<Vo> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getAllowedVos(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Get all assigned groups on Facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<Group> assigned groups\n+  */\n+ /*#\n+  * Get all assigned groups on Facility filtered by VO.\n+  *\n+  * @param facilityName String Facility name\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @return List<Group> assigned groups\n+  */\n+ /*#\n+  * Get all assigned groups on Facility filtered by Service.\n+  *\n+  * @param facilityName String Facility name\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @return List<Group> assigned groups\n+  */\n+ /*#\n+  * Get all assigned groups on Facility filtered by VO and Service.\n+  *\n+  * @param facilityName String Facility name\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @return List<Group> assigned groups\n+  */\n+ /*#\n+  * Get all assigned groups on Facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Group> assigned groups\n+  */\n+ /*#\n+  * Get all assigned groups on Facility filtered by VO.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @return List<Group> assigned groups\n+  */\n+ /*#\n+  * Get all assigned groups on Facility filtered by Service.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @return List<Group> assigned groups\n+  */\n+ /*#\n+  * Get all assigned groups on Facility filtered by VO and Service.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @return List<Group> assigned groups\n+  */\n+\n+\n+ getAllowedGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   Facility facility = getFacility(ac, parms);\n+   Service service = null;\n+   Vo vo = null;\n+   if (parms.contains(\"vo\")) {\n+    vo = ac.getVoById(parms.readInt(\"vo\"));\n+   }\n+   if (parms.contains(\"service\")) {\n+    service = ac.getServiceById(parms.readInt(\"service\"));\n+   }\n+\n+   return ac.getFacilitiesManager().getAllowedGroups(ac.getSession(), facility, vo, service);\n+  }\n+ },\n+\n+ /*#\n+  * Get all assigned RichGroups on Facility with specified set of attributes.\n+  *\n+  * @param facilityName String Facility name\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+ /*#\n+  * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n+  *\n+  * @param facilityName String Facility name\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+ /*#\n+  * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n+  *\n+  * @param facilityName String Facility name\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+ /*#\n+  * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n+  *\n+  * @param facilityName String Facility name\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+ /*#\n+  * Get all assigned RichGroups on Facility with specified set of attributes.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+ /*#\n+  * Get all assigned RichGroups on Facility filtered by VO with specified set of attributes.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+ /*#\n+  * Get all assigned RichGroups on Facility filtered by Service with specified set of attributes.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+ /*#\n+  * Get all assigned RichGroups on Facility filtered by VO and Service with specified set of attributes.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param vo int Vo <code>id</code> to filter groups by\n+  * @param service int Service <code>id</code> to filter groups by\n+  * @param attrNames List<String> Attribute names\n+  * @return List<RichGroup> assigned groups\n+  * @exampleParam attrNames [ \"urn:perun:group:attribute-def:core:name\" , \"urn:perun:group:attribute-def:def:synchronizationEnabled\" ]\n+  */\n+\n+\n+ getAllowedRichGroupsWithAttributes {\n+  @Override\n+  public List<RichGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   Facility facility = getFacility(ac, parms);\n+   Service service = null;\n+   Vo vo = null;\n+   if (parms.contains(\"vo\")) {\n+    vo = ac.getVoById(parms.readInt(\"vo\"));\n+   }\n+   if (parms.contains(\"service\")) {\n+    service = ac.getServiceById(parms.readInt(\"service\"));\n+   }\n+\n+   return ac.getFacilitiesManager().getAllowedRichGroupsWithAttributes(ac.getSession(), facility, vo, service, parms.readList(\"attrNames\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all resources assigned to a facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<Resource> Resources\n+  */\n+ /*#\n+  * Returns all resources assigned to a facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Resource> Resources\n+  */\n+\n+\n+ getAssignedResources {\n+  @Override\n+  public List<Resource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getAssignedResources(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Returns all rich resources assigned to a facility with VO property filled.\n+  * @param facilityName String Facility name\n+  * @return List<RichResource> Resources\n+  */\n+ /*#\n+  * Returns all rich resources assigned to a facility with VO property filled.\n+  * @param facility int Facility <code>id</code>\n+  * @return List<RichResource> Resources\n+  */\n+\n+\n+ getAssignedRichResources {\n+  @Override\n+  public List<RichResource> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getAssignedRichResources(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Creates a facility. Caller is automatically set as facility manager.\n+  * Facility Object must contain name which can contain only a-Z0-9.-_ and space characters.\n+  * Parameter description is optional.\n+  * Other parameters are ignored.\n+  * @param facility Facility JSON object\n+  * @return Facility Created Facility object\n+  * @exampleParam facility { \"name\" : \"the best-facility_7\" }\n+  */\n+ /*#\n+  * Creates a facility. Caller is automatically set as facility manager.\n+  * @param name String name of a facility - can contain only a-Z0-9.-_ and space characters.\n+  * @param description String description of a facility\n+  * @return Facility Created Facility object\n+  * @exampleParam name \"the best-facility_7\"\n+  * @exampleParam description \"A description with information.\"\n+  */\n+\n+\n+ createFacility {\n+  @Override\n+  public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"facility\")) {\n+    return ac.getFacilitiesManager().createFacility(ac.getSession(), parms.read(\"facility\", Facility.class));\n+   } else if (parms.contains(\"name\") && parms.contains(\"description\")) {\n+    String name = parms.readString(\"name\");\n+    String description = parms.readString(\"description\");\n+    Facility facility = new Facility(0, name, description);\n+    return ac.getFacilitiesManager().createFacility(ac.getSession(), facility);\n+   } else {\n+    throw new RpcException(RpcException.Type.WRONG_PARAMETER);\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Deletes a facility.\n+  * @param facilityName String Facility name\n+  */\n+ /*#\n+  * Deletes a facility.\n+  * @param facilityName String Facility name\n+  * @param force Boolean if true deletes all constrains of facility before deleting facility\n+  */\n+ /*#\n+  * Deletes a facility.\n+  * @param facility int Facility <code>id</code>\n+  */\n+ /*#\n+  * Deletes a facility.\n+  * @param facility int Facility <code>id</code>\n+  * @param force Boolean if true deletes all constrains of facility before deleting facility\n+  */\n+\n+\n+ deleteFacility {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"force\")) {\n+    ac.getFacilitiesManager().deleteFacility(ac.getSession(), getFacility(ac, parms), parms.readBoolean(\"force\"));\n+    return null;\n+   } else {\n+    ac.getFacilitiesManager().deleteFacility(ac.getSession(), getFacility(ac, parms), false);\n+    return null;\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Update a facility (facility name)\n+  *\n+  * @param facility Facility JSON object\n+  * @return Facility updated Facility object\n+  */\n+\n+\n+ updateFacility {\n+  @Override\n+  public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().updateFacility(ac.getSession(), parms.read(\"facility\", Facility.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of all facilities owned by the owner.\n+  * @param owner int Owner <code>id</code>\n+  * @return List<Facility> Owner's facilities\n+  */\n+\n+\n+ getOwnerFacilities {\n+  @Override\n+  public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getOwnerFacilities(ac.getSession(), ac.getOwnerById(parms.readInt(\"owner\")));\n+  }\n+ },\n+\n+ /*#\n+  * Lists hosts of a Facility.\n+  * @param facilityName String Facility name\n+  * @return List<Host> Hosts\n+  */\n+ /*#\n+  * Lists hosts of a Facility.\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Host> Hosts\n+  */\n+\n+\n+ getHosts {\n+  @Override\n+  public List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getHosts(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Returns a host by its <code>id</code>.\n+  * @param id int Host <code>id</code>\n+  * @return Host Host object\n+  */\n+\n+\n+ getHostById {\n+  @Override\n+  public Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getHostById(ac.getSession(), parms.readInt(\"id\"));\n+  }\n+ },\n+\n+ /*#\n+  * Returns hosts by hostname. (from all facilities)\n+  * @param hostname String hostname of hosts\n+  * @return List<Host> all hosts with this hostname, empty arrayList if none exists\n+  */\n+\n+\n+ getHostsByHostname {\n+  @Override\n+  public List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getHostsByHostname(ac.getSession(), parms.readString(\"hostname\"));\n+  }\n+ },\n+\n+ /*#\n+  * Return facility which has the host.\n+  * @param host int Host <code>id</code>\n+  * @return Facility Facility object\n+  */\n+\n+\n+ getFacilityForHost {\n+  @Override\n+  public Facility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getFacilityForHost(ac.getSession(), ac.getHostById(parms.readInt(\"host\")));\n+  }\n+ },\n+\n+ /*#\n+  * Count hosts of Facility.\n+  * @param facilityName String Facility name\n+  * @return int Hosts count\n+  */\n+ /*#\n+  * Count hosts of Facility.\n+  * @param facility int Facility <code>id</code>\n+  * @return int Hosts count\n+  */\n+\n+\n+ getHostsCount {\n+  @Override\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getHostsCount(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Adds hosts to the Facility.\n+  *\n+  * @param hostnames List<String> Host names\n+  * @param facilityName String Facility name\n+  * @return List<Host> Hosts with <code>id</code>'s set.\n+  */\n+ /*#\n+  * Adds hosts to the Facility.\n+  *\n+  * @param hostnames List<String> Host names\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Host> Hosts with <code>id</code>'s set.\n+  */\n+\n+\n+ addHosts {\n+  @Override\n+  public List<Host> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   Facility facility = getFacility(ac, parms);\n+   List<String> hostnames = parms.readList(\"hostnames\", String.class);\n+   return ac.getFacilitiesManager().addHosts(ac.getSession(), facility, hostnames);\n+  }\n+ },\n+\n+ /*#\n+  * Remove hosts from a Facility.\n+  * @param hosts List<Integer> List of Host IDs\n+  * @param facilityName String Facility name\n+  */\n+ /*#\n+  * Remove hosts from a Facility.\n+  * @param hosts List<Integer> List of Host IDs\n+  * @param facility int Facility <code>id</code>\n+  */\n+\n+\n+ removeHosts {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   Facility facility = getFacility(ac, parms);\n+\n+   //TODO: optimalizovat?\n+   int[] ids = parms.readArrayOfInts(\"hosts\");\n+   List<Host> hosts = new ArrayList<Host>(ids.length);\n+   for (int i : ids) {\n+    hosts.add(ac.getHostById(i));\n+   }\n+   ac.getFacilitiesManager().removeHosts(ac.getSession(), hosts, facility);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Adds host to a Facility.\n+  * @param hostname String Hostname\n+  * @param facilityName String Facility name\n+  * @return Host Host with <code>id</code> set.\n+  */\n+ /*#\n+  * Adds host to a Facility.\n+  * @param hostname String Hostname\n+  * @param facility int Facility <code>id</code>\n+  * @return Host Host with <code>id</code> set.\n+  */\n+\n+\n+ addHost {\n+  @Override\n+  public Host call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   Facility facility = getFacility(ac, parms);\n+   String hostname = parms.readString(\"hostname\");\n+   Host host = new Host();\n+   host.setHostname(hostname);\n+   return ac.getFacilitiesManager().addHost(ac.getSession(), host, facility);\n+  }\n+ },\n+\n+ /*#\n+  * Removes a host.\n+  * @param host int Host <code>id</code>\n+  */\n+\n+\n+ removeHost {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+\n+   int id = parms.readInt(\"host\");\n+   Host host = ac.getFacilitiesManager().getHostById(ac.getSession(), id);\n+   ac.getFacilitiesManager().removeHost(ac.getSession(), host);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove host from the Facility based on hostname. If there is ambiguity, method throws exception and no host is removed.\n+  *\n+  * @param hostname String hostname\n+  * @throw HostNotExistsException When host doesn't exist or is not unique by name\n+  */\n+\n+\n+ removeHostByHostname {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   ac.getFacilitiesManager().removeHostByHostname(ac.getSession(), parms.readString(\"hostname\"));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get facilities where the service is defined..\n+  *\n+  * @param service int Service <code>id</code>\n+  * @return List<Facility> Assigned facilities\n+  */\n+ /*#\n+  * Get facilities which are assigned to a Group (via resource).\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<Facility> Assigned facilities\n+  */\n+ /*#\n+  * Get facilities which have the member access on.\n+  *\n+  * @param member int Member <code>id</code>\n+  * @return List<Facility> Assigned facilities\n+  */\n+ /*#\n+  * Get facilities which have the user access on.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<Facility> Assigned facilities\n+  */\n+\n+\n+ getAssignedFacilities {\n+  @Override\n+  public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"service\")) {\n+    return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")));\n+   } else if (parms.contains(\"group\")) {\n+    return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+   } else if (parms.contains(\"member\")) {\n+           return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(), ac.getMemberById(parms.readInt(\"member\")));\n+          } else if (parms.contains(\"user\")) {\n+           return ac.getFacilitiesManager().getAssignedFacilities(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+          } else {\n+           throw new RpcException(RpcException.Type.MISSING_VALUE, \"service or group or member of user\");\n+          }\n+  }\n+ },\n+\n+ /*#\n+  * Adds a Facility admin.\n+  *\n+  * @param facilityName String Facility name\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  *  Adds a group administrator to the Facility.\n+  *\n+  *  @param facilityName String Facility name\n+  *  @param authorizedGroup int Group <code>id</code>\n+  */\n+ /*#\n+  * Adds a Facility admin.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  *  Adds a group administrator to the Facility.\n+  *\n+  *  @param facility int Facility <code>id</code>\n+  *  @param authorizedGroup int Group <code>id</code>\n+  */\n+\n+\n+ addAdmin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getFacilitiesManager().addAdmin(ac.getSession(), getFacility(ac, parms), ac.getUserById(parms.readInt(\"user\")));\n+   } else {\n+    ac.getFacilitiesManager().addAdmin(ac.getSession(), getFacility(ac, parms), ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Removes a Facility admin.\n+  *\n+  * @param facilityName String Facility name\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  *  Removes a group administrator of the Facility.\n+  *\n+  *  @param facilityName String Facility name\n+  *  @param authorizedGroup int Group <code>id</code>\n+  */\n+ /*#\n+  * Removes a Facility admin.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param user int User <code>id</code>\n+  */\n+ /*#\n+  *  Removes a group administrator of the Facility.\n+  *\n+  *  @param facility int Facility <code>id</code>\n+  *  @param authorizedGroup int Group <code>id</code>\n+  */\n+\n+\n+ removeAdmin {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   if (parms.contains(\"user\")) {\n+    ac.getFacilitiesManager().removeAdmin(ac.getSession(), getFacility(ac, parms), ac.getUserById(parms.readInt(\"user\")));\n+   } else {\n+    ac.getFacilitiesManager().removeAdmin(ac.getSession(), getFacility(ac, parms), ac.getGroupById(parms.readInt(\"authorizedGroup\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get list of all facility administrators for supported role and given facility.\n+  *\n+  * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+  *\n+  * Supported roles: FacilityAdmin\n+  *\n+  * @param facilityName String Facility name\n+  * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n+  *\n+  * @return List<User> list of all facility administrators of the given facility for supported role\n+  */\n+ /*#\n+  * Get all Facility admins.\n+  *\n+  * @deprecated\n+  * @param facilityName String Facility name\n+  * @return List<User> List of Users who are admins in the facility.\n+  */\n+ /*#\n+  * Get list of all facility administrators for supported role and given facility.\n+  *\n+  * If onlyDirectAdmins is == true, return only direct admins of the group for supported role.\n+  *\n+  * Supported roles: FacilityAdmin\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param onlyDirectAdmins boolean if true, get only direct facility administrators (if false, get both direct and indirect)\n+  *\n+  * @return List<User> list of all facility administrators of the given facility for supported role\n+  */\n+ /*#\n+  * Get all Facility admins.\n+  *\n+  * @deprecated\n+  * @param facility int Facility <code>id</code>\n+  * @return List<User> List of Users who are admins in the facility.\n+  */\n+\n+\n+ getAdmins {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"onlyDirectAdmins\")) {\n+    return ac.getFacilitiesManager().getAdmins(ac.getSession(), getFacility(ac, parms), parms.readBoolean(\"onlyDirectAdmins\"));\n+   } else {\n+    return ac.getFacilitiesManager().getAdmins(ac.getSession(), getFacility(ac, parms));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Get all Facility direct admins.\n+  *\n+  * @deprecated\n+  * @param facilityName String Facility name\n+  * @return List<User> list of admins of the facility\n+  */\n+\n+\n+ getDirectAdmins {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getDirectAdmins(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Get all Facility group admins.\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<Group> admins\n+  */\n+ /*#\n+  * Get all Facility group admins.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Group> admins\n+  */\n+\n+\n+ getAdminGroups {\n+  @Override\n+  public List<Group> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getAdminGroups(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Get list of all richUser administrators for the facility and supported role with specific attributes.\n+  *\n+  * Supported roles: FacilityAdmin\n+  *\n+  * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n+  * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+  *\n+  * @param facilityName String Facility name\n+  * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+  * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+  * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n+  *\n+  * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n+  */\n+ /*#\n+  * Get all Facility admins as RichUsers\n+  *\n+  * @deprecated\n+  * @param facilityName String Facility name\n+  * @return List<RichUser> admins\n+  */\n+ /*#\n+  * Get list of all richUser administrators for the facility and supported role with specific attributes.\n+  *\n+  * Supported roles: FacilityAdmin\n+  *\n+  * If \"onlyDirectAdmins\" is true, return only direct admins of the facility for supported role with specific attributes.\n+  * If \"allUserAttributes\" is true, do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param specificAttributes List<String> list of specified attributes which are needed in object richUser\n+  * @param allUserAttributes boolean if == true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+  * @param onlyDirectAdmins boolean if == true, get only direct facility administrators (if false, get both direct and indirect)\n+  *\n+  * @return List<RichUser> list of RichUser administrators for the facility and supported role with attributes\n+  */\n+ /*#\n     * Get all Facility admins as RichUsers\n-\t*\n-\t* @deprecated\n+ *\n+ * @deprecated\n     * @param facility int Facility <code>id</code>\n     * @return List<RichUser> admins\n     */\n-\tgetRichAdmins {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif(parms.contains(\"onlyDirectAdmins\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tparms.readList(\"specificAttributes\", String.class),\n-\t\t\t\t\t\tparms.readBoolean(\"allUserAttributes\"),\n-\t\t\t\t\t\tparms.readBoolean(\"onlyDirectAdmins\"));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getFacilitiesManager().getRichAdmins(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility admins as RichUsers with all their non-null user attributes\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\t/*#\n-\t* Get all Facility admins as RichUsers with all their non-null user attributes\n-\t*\n-\t* @deprecated\n-\t* @param facility int Facility <code>id</code>\n-\t* @return List<RichUser> admins with attributes\n-\t*/\n-\tgetRichAdminsWithAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getRichAdminsWithAttributes(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility admins as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> admins with attributes\n-\t */\n-\t/*#\n-\t* Get all Facility admins as RichUsers with specific attributes (from user namespace)\n-\t*\n-\t* @deprecated\n-\t* @param facility int Facility <code>id</code>\n-\t* @param specificAttributes List<String> list of attributes URNs\n-\t* @return List<RichUser> admins with attributes\n-\t*/\n-\tgetRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all Facility admins, which are assigned directly,\n-\t * as RichUsers with specific attributes (from user namespace)\n-\t *\n-\t * @deprecated\n-\t * @param facilityName String Facility name\n-\t * @param specificAttributes List<String> list of attributes URNs\n-\t * @return List<RichUser> direct admins with attributes\n-\t */\n-\t/*#\n-\t* Get all Facility admins, which are assigned directly,\n-\t* as RichUsers with specific attributes (from user namespace)\n-\t*\n-\t* @deprecated\n-\t* @param facility int Facility <code>id</code>\n-\t* @param specificAttributes List<String> list of attributes URNs\n-\t* @return List<RichUser> direct admins with attributes\n-\t*/\n-\tgetDirectRichAdminsWithSpecificAttributes {\n-\n-\t\t@Override\n-\t\tpublic List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(),\n-\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\tparms.readList(\"specificAttributes\", String.class));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of Facilities, where the user is an Administrator.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<Facility> Found Facilities\n-\t */\n-\tgetFacilitiesWhereUserIsAdmin {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesWhereUserIsAdmin(ac.getSession(),\n-\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all facilities where exists host with the specific hostname\n-\t *\n-\t * @param hostname String specific hostname\n-\t * @return List<Facility> Found Facilities\n-\t */\n-\tgetFacilitiesByHostName {\n-\n-\t\t@Override\n-\t\tpublic List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getFacilitiesByHostName(ac.getSession(),\n-\t\t\t\t\tparms.readString(\"hostname\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return all users which can use this facility\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n-\t * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n-\t * @return List<User> list of allowed users\n-\t */\n-\t/*#\n-\t * Return all users which can use this facility\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n-\t * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n-\t * @return List<User> list of allowed users\n-\t */\n-\tgetAllowedUsers {\n-\t\t@Override\n-\t\tpublic List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"vo\")) {\n-\t\t\t\tif(parms.contains(\"service\")) {\n-\t\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t\t} else {\n-\t\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\t\tac.getVoById(parms.readInt(\"vo\")),\n-\t\t\t\t\t\t\tnull);\n-\t\t\t\t}\n-\t\t\t} else if(parms.contains(\"service\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms),\n-\t\t\t\t\t\tnull,\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")));\n-\t\t\t} else {\n-\t\t\t\treturn ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Copy owners from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\tcopyOwners {\n-\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility srcFacility;\n-\t\t\tif (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n-\t\t\telse srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n-\n-\t\t\tFacility destFacility;\n-\t\t\tif (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n-\t\t\telse destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n-\n-\t\t\tac.getFacilitiesManager().copyOwners(ac.getSession(),\n-\t\t\t\t\tsrcFacility,\n-\t\t\t\t\tdestFacility);\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Copy managers from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\tcopyManagers {\n-\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility srcFacility;\n-\t\t\tif (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n-\t\t\telse srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n-\n-\t\t\tFacility destFacility;\n-\t\t\tif (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n-\t\t\telse destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n-\n-\t\t\tac.getFacilitiesManager().copyManagers(ac.getSession(),\n-\t\t\t\t\tsrcFacility,\n-\t\t\t\t\tdestFacility);\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacilityName String facility name\n-\t */\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacilityName String facility name\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\t/*#\n-\t * Copy attributes (settings) from source facility to destination facility.\n-\t * You must be facility manager of both.\n-\t *\n-\t * @param srcFacility int facility <code>id</code>\n-\t * @param destFacility int facility <code>id</code>\n-\t */\n-\tcopyAttributes {\n-\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tFacility srcFacility;\n-\t\t\tif (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n-\t\t\telse srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n-\n-\t\t\tFacility destFacility;\n-\t\t\tif (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n-\t\t\telse destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n-\n-\t\t\tac.getFacilitiesManager().copyAttributes(ac.getSession(),\n-\t\t\t\t\tsrcFacility,\n-\t\t\t\t\tdestFacility);\n-\n-\t\t\treturn null;\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get list of contact groups for the Owner.\n-\t *\n-\t * @param owner int Owner <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the User.\n-\t *\n-\t * @param user int User <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the Group.\n-\t *\n-\t * @param group int Group <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the Facility.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\t/*#\n-\t * Get list of contact groups for the Facility.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ContactGroup> list of assigned contact groups\n-\t */\n-\tgetFacilityContactGroups {\n-\t\t@Override\n-\t\tpublic List<ContactGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"owner\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getOwnerById(parms.readInt(\"owner\")));\n-\t\t\t} else if(parms.contains(\"user\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getUserById(parms.readInt(\"user\")));\n-\t\t\t} else if(parms.contains(\"group\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tac.getGroupById(parms.readInt(\"group\")));\n-\t\t\t} else if(parms.contains(\"facility\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"owner or user or group or facility\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get contact group for the facility and the name.\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param name String name of the contact group\n-\t * @return ContactGroup contactGroup for the facility and the name\n-\t */\n-\t/*#\n-\t * Get contact group for the facility and the name.\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param name String name of the contact group\n-\t * @return ContactGroup contactGroup for the facility and the name\n-\t */\n-\tgetFacilityContactGroup {\n-\t\t@Override\n-\t\tpublic ContactGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif((parms.contains(\"facility\") || parms.contains(\"facilityName\")) && parms.contains(\"name\")) {\n-\t\t\t\treturn ac.getFacilitiesManager().getFacilityContactGroup(ac.getSession(),\n-\t\t\t\t\t\tgetFacility(ac, parms), parms.readString(\"name\"));\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"facility and name or facilityName and name\");\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all exist contact group names.\n-\t *\n-\t * @return List<String> list of contact group names\n-\t */\n-\tgetAllContactGroupNames {\n-\t\t@Override\n-\t\tpublic List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAllContactGroupNames(ac.getSession());\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add all contacts in list of facilities contact groups\n-\t *\n-\t * @param contactGroupsToAdd List<ContactGroup> list of contact groups to add\n-\t */\n-\taddFacilityContacts {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().addFacilityContacts(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"contactGroupsToAdd\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Add all contacts in the contact group\n-\t *\n-\t * @param contactGroupToAdd ContactGroup contact group to add\n-\t */\n-\taddFacilityContact {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().addFacilityContact(ac.getSession(),\n-\t\t\t\t\tparms.read(\"contactGroupToAdd\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove all contacts in list of facilities contact groups\n-\t *\n-\t * @param contactGroupsToRemove List<ContactGroup> list of contact groups to remove\n-\t */\n-\tremoveFacilityContacts {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().removeFacilityContacts(ac.getSession(),\n-\t\t\t\t\tparms.readList(\"contactGroupsToRemove\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove all contacts in the contact group\n-\t *\n-\t * @param contactGroupToRemove ContactGroup contact group to remove\n-\t */\n-\tremoveFacilityContact {\n-\t\t@Override\n-\t\tpublic Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tac.getFacilitiesManager().removeFacilityContact(ac.getSession(),\n-\t\t\t\t\tparms.read(\"contactGroupToRemove\", ContactGroup.class));\n-\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return assigned security teams for specific facility\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @return List<SecurityTeam> assigned security teams fot given facility\n-\t * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n-\t */\n-\t/*#\n-\t * Return assigned security teams for specific facility\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<SecurityTeam> assigned security teams fot given facility\n-\t * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n-\t */\n-\tgetAssignedSecurityTeams {\n-\t\t@Override\n-\t\tpublic List<SecurityTeam> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getFacilitiesManager().getAssignedSecurityTeams(ac.getSession(), getFacility(ac, parms));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Assign given security team to given facility (means the facility trusts the security team)\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n-\t */\n-\t/*#\n-\t * Assign given security team to given facility (means the facility trusts the security team)\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n-\t */\n-\tassignSecurityTeam {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getFacilitiesManager().assignSecurityTeam(ac.getSession(), getFacility(ac, parms),\n-\t\t\t\t\tac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove (Unassign) given security team from given facility\n-\t *\n-\t * @param facilityName String Facility name\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n-\t */\n-\t/*#\n-\t * Remove (Unassign) given security team from given facility\n-\t *\n-\t * @param facility int Facility <code>id</code>\n-\t * @param securityTeam int SecurityTeam <code>id</code>\n-\t * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n-\t * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n-\t * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n-\t */\n-\tremoveSecurityTeam {\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getFacilitiesManager().removeSecurityTeam(ac.getSession(), getFacility(ac, parms),\n-\t\t\t\t\tac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Set ban for user on facility.\n-\t *\n-\t * @param banOnFacility BanOnFacility JSON object\n-\t * @return BanOnFacility Created banOnFacility\n-\t */\n-\tsetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\treturn ac.getFacilitiesManager().setBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnFacility\", BanOnFacility.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get Ban for user on facility by it's id.\n-\t *\n-\t * @param banId int BanOnFacility <code>id</code>\n-\t * @return BanOnFacility banOnFacility\n-\t */\n-\tgetBanById {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBanById(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t *  Get ban by userId and facilityId.\n-\t *\n-\t * @param userId int User <code>id</code>\n-\t * @param facilityId int Facility <code>id</code>\n-\t * @return BanOnFacility banOnFacility\n-\t */\n-\tgetBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for user on any facility.\n-\t *\n-\t * @param userId int User <code>id</code>\n-\t * @return List<BanOnFacility> userBansOnFacilities\n-\t */\n-\tgetBansForUser {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBansForUser(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Get all bans for user on the facility.\n-\t *\n-\t * @param facilityId int Facility <code>id</code>\n-\t * @return List<BanOnFacility> usersBansOnFacility\n-\t */\n-\tgetBansForFacility {\n-\n-\t\t@Override\n-\t\tpublic List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getFacilitiesManager().getBansForFacility(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"facilityId\"));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Update existing ban (description, validation timestamp)\n-\t *\n-\t * @param banOnFacility BanOnFacility JSON object\n-\t * @return BanOnFacility updated banOnFacility\n-\t */\n-\tupdateBan {\n-\n-\t\t@Override\n-\t\tpublic BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\treturn ac.getFacilitiesManager().updateBan(ac.getSession(),\n-\t\t\t\t\tparms.read(\"banOnFacility\", BanOnFacility.class));\n-\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Remove specific ban by it's id.\n-\t *\n-\t * @param banId int BanOnFacility <code>id</code>\n-\t */\n-\t/*#\n-\t * Remove specific ban by userId and facilityId.\n-\t *\n-\t * @param userId int User <code>id</code>\n-\t * @param facilityId int Facility <code>id</code>\n-\t */\n-\tremoveBan {\n-\n-\t\t@Override\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tparms.stateChangingCheck();\n-\n-\t\t\tif(parms.contains(\"banId\")) {\n-\t\t\t\tac.getFacilitiesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"banId\"));\n-\t\t\t} else {\n-\t\t\t\tac.getFacilitiesManager().removeBan(ac.getSession(),\n-\t\t\t\t\tparms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t};\n-\t\n-\tprivate static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\tif (parms.contains(\"facilityName\")) return ac.getFacilityByName(parms.readString(\"facilityName\"));\n-\t\telse return ac.getFacilityById(parms.readInt(\"facility\"));\n-\t}\n-}\n+\n+\n+ getRichAdmins {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"onlyDirectAdmins\")) {\n+    return ac.getFacilitiesManager().getRichAdmins(ac.getSession(), getFacility(ac, parms), parms.readList(\"specificAttributes\", String.class), parms.readBoolean(\"allUserAttributes\"), parms.readBoolean(\"onlyDirectAdmins\"));\n+   } else {\n+    return ac.getFacilitiesManager().getRichAdmins(ac.getSession(), getFacility(ac, parms));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Get all Facility admins as RichUsers with all their non-null user attributes\n+  *\n+  * @deprecated\n+  * @param facilityName String Facility name\n+  * @return List<RichUser> admins with attributes\n+  */\n+ /*#\n+ * Get all Facility admins as RichUsers with all their non-null user attributes\n+ *\n+ * @deprecated\n+ * @param facility int Facility <code>id</code>\n+ * @return List<RichUser> admins with attributes\n+ */\n+\n+\n+ getRichAdminsWithAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getRichAdminsWithAttributes(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Get all Facility admins as RichUsers with specific attributes (from user namespace)\n+  *\n+  * @deprecated\n+  * @param facilityName String Facility name\n+  * @param specificAttributes List<String> list of attributes URNs\n+  * @return List<RichUser> admins with attributes\n+  */\n+ /*#\n+ * Get all Facility admins as RichUsers with specific attributes (from user namespace)\n+ *\n+ * @deprecated\n+ * @param facility int Facility <code>id</code>\n+ * @param specificAttributes List<String> list of attributes URNs\n+ * @return List<RichUser> admins with attributes\n+ */\n+\n+\n+ getRichAdminsWithSpecificAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getRichAdminsWithSpecificAttributes(ac.getSession(), getFacility(ac, parms), parms.readList(\"specificAttributes\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Get all Facility admins, which are assigned directly,\n+  * as RichUsers with specific attributes (from user namespace)\n+  *\n+  * @deprecated\n+  * @param facilityName String Facility name\n+  * @param specificAttributes List<String> list of attributes URNs\n+  * @return List<RichUser> direct admins with attributes\n+  */\n+ /*#\n+ * Get all Facility admins, which are assigned directly,\n+ * as RichUsers with specific attributes (from user namespace)\n+ *\n+ * @deprecated\n+ * @param facility int Facility <code>id</code>\n+ * @param specificAttributes List<String> list of attributes URNs\n+ * @return List<RichUser> direct admins with attributes\n+ */\n+\n+\n+ getDirectRichAdminsWithSpecificAttributes {\n+  @Override\n+  public List<RichUser> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getDirectRichAdminsWithSpecificAttributes(ac.getSession(), getFacility(ac, parms), parms.readList(\"specificAttributes\", String.class));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of Facilities, where the user is an Administrator.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<Facility> Found Facilities\n+  */\n+\n+\n+ getFacilitiesWhereUserIsAdmin {\n+  @Override\n+  public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getFacilitiesWhereUserIsAdmin(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+  }\n+ },\n+\n+ /*#\n+  * Return all facilities where exists host with the specific hostname\n+  *\n+  * @param hostname String specific hostname\n+  * @return List<Facility> Found Facilities\n+  */\n+\n+\n+ getFacilitiesByHostName {\n+  @Override\n+  public List<Facility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getFacilitiesByHostName(ac.getSession(), parms.readString(\"hostname\"));\n+  }\n+ },\n+\n+ /*#\n+  * Return all users which can use this facility\n+  *\n+  * @param facilityName String Facility name\n+  * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n+  * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n+  * @return List<User> list of allowed users\n+  */\n+ /*#\n+  * Return all users which can use this facility\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param vo int VO <code>id</code>, if provided, filter out users who aren't in specific VO\n+  * @param service int Service <code>id</code>, if provided, filter out users who aren't allowed to use the service on the facility\n+  * @return List<User> list of allowed users\n+  */\n+\n+\n+ getAllowedUsers {\n+  @Override\n+  public List<User> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"vo\")) {\n+    if (parms.contains(\"service\")) {\n+     return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(),\n+getFacility(ac, parms),\n+ac.getVoById(parms.readInt(\"vo\")),\n+ac.getServiceById(parms.readInt(\"service\")));\n+    } else {\n+     return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(), getFacility(ac, parms), ac.getVoById(parms.readInt(\"vo\")), null);\n+    }\n+   } else if (parms.contains(\"service\")) {\n+    return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(), getFacility(ac, parms), null, ac.getServiceById(parms.readInt(\"service\")));\n+   } else {\n+    return ac.getFacilitiesManager().getAllowedUsers(ac.getSession(), getFacility(ac, parms));\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Copy owners from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacilityName String facility name\n+  * @param destFacilityName String facility name\n+  */\n+ /*#\n+  * Copy owners from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacility int facility <code>id</code>\n+  * @param destFacilityName String facility name\n+  */\n+ /*#\n+  * Copy owners from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacilityName String facility name\n+  * @param destFacility int facility <code>id</code>\n+  */\n+ /*#\n+  * Copy owners from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacility int facility <code>id</code>\n+  * @param destFacility int facility <code>id</code>\n+  */\n+\n+\n+ copyOwners {\n+  @Override\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   Facility srcFacility;\n+   if (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n+   else srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n+   Facility destFacility;\n+   if (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n+   else destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n+   ac.getFacilitiesManager().copyOwners(ac.getSession(), srcFacility, destFacility);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Copy managers from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacilityName String facility name\n+  * @param destFacilityName String facility name\n+  */\n+ /*#\n+  * Copy managers from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacility int facility <code>id</code>\n+  * @param destFacilityName String facility name\n+  */\n+ /*#\n+  * Copy managers from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacilityName String facility name\n+  * @param destFacility int facility <code>id</code>\n+  */\n+ /*#\n+  * Copy managers from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacility int facility <code>id</code>\n+  * @param destFacility int facility <code>id</code>\n+  */\n+\n+\n+ copyManagers {\n+  @Override\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   Facility srcFacility;\n+   if (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n+   else srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n+   Facility destFacility;\n+   if (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n+   else destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n+   ac.getFacilitiesManager().copyManagers(ac.getSession(), srcFacility, destFacility);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Copy attributes (settings) from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacilityName String facility name\n+  * @param destFacilityName String facility name\n+  */\n+ /*#\n+  * Copy attributes (settings) from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacility int facility <code>id</code>\n+  * @param destFacilityName String facility name\n+  */\n+ /*#\n+  * Copy attributes (settings) from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacilityName String facility name\n+  * @param destFacility int facility <code>id</code>\n+  */\n+ /*#\n+  * Copy attributes (settings) from source facility to destination facility.\n+  * You must be facility manager of both.\n+  *\n+  * @param srcFacility int facility <code>id</code>\n+  * @param destFacility int facility <code>id</code>\n+  */\n+\n+\n+ copyAttributes {\n+  @Override\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   Facility srcFacility;\n+   if (parms.contains(\"srcFacilityName\")) srcFacility = ac.getFacilityByName(parms.readString(\"srcFacilityName\"));\n+   else srcFacility = ac.getFacilityById(parms.readInt(\"srcFacility\"));\n+   Facility destFacility;\n+   if (parms.contains(\"destFacilityName\")) destFacility = ac.getFacilityByName(parms.readString(\"destFacilityName\"));\n+   else destFacility = ac.getFacilityById(parms.readInt(\"destFacility\"));\n+   ac.getFacilitiesManager().copyAttributes(ac.getSession(), srcFacility, destFacility);\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Get list of contact groups for the Owner.\n+  *\n+  * @param owner int Owner <code>id</code>\n+  * @return List<ContactGroup> list of assigned contact groups\n+  */\n+ /*#\n+  * Get list of contact groups for the User.\n+  *\n+  * @param user int User <code>id</code>\n+  * @return List<ContactGroup> list of assigned contact groups\n+  */\n+ /*#\n+  * Get list of contact groups for the Group.\n+  *\n+  * @param group int Group <code>id</code>\n+  * @return List<ContactGroup> list of assigned contact groups\n+  */\n+ /*#\n+  * Get list of contact groups for the Facility.\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<ContactGroup> list of assigned contact groups\n+  */\n+ /*#\n+  * Get list of contact groups for the Facility.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<ContactGroup> list of assigned contact groups\n+  */\n+\n+\n+ getFacilityContactGroups {\n+  @Override\n+  public List<ContactGroup> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"owner\")) {\n+    return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(), ac.getOwnerById(parms.readInt(\"owner\")));\n+   } else if (parms.contains(\"user\")) {\n+    return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(), ac.getUserById(parms.readInt(\"user\")));\n+   } else if (parms.contains(\"group\")) {\n+           return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(), ac.getGroupById(parms.readInt(\"group\")));\n+          } else if (parms.contains(\"facility\")) {\n+           return ac.getFacilitiesManager().getFacilityContactGroups(ac.getSession(), getFacility(ac, parms));\n+          } else {\n+           throw new RpcException(RpcException.Type.MISSING_VALUE, \"owner or user or group or facility\");\n+          }\n+  }\n+ },\n+\n+ /*#\n+  * Get contact group for the facility and the name.\n+  *\n+  * @param facilityName String Facility name\n+  * @param name String name of the contact group\n+  * @return ContactGroup contactGroup for the facility and the name\n+  */\n+ /*#\n+  * Get contact group for the facility and the name.\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param name String name of the contact group\n+  * @return ContactGroup contactGroup for the facility and the name\n+  */\n+\n+\n+ getFacilityContactGroup {\n+  @Override\n+  public ContactGroup call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if ((parms.contains(\"facility\") || parms.contains(\"facilityName\")) && parms.contains(\"name\")) {\n+    return ac.getFacilitiesManager().getFacilityContactGroup(ac.getSession(), getFacility(ac, parms), parms.readString(\"name\"));\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE, \"facility and name or facilityName and name\");\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Get all exist contact group names.\n+  *\n+  * @return List<String> list of contact group names\n+  */\n+\n+\n+ getAllContactGroupNames {\n+  @Override\n+  public List<String> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getAllContactGroupNames(ac.getSession());\n+  }\n+ },\n+\n+ /*#\n+  * Add all contacts in list of facilities contact groups\n+  *\n+  * @param contactGroupsToAdd List<ContactGroup> list of contact groups to add\n+  */\n+\n+\n+ addFacilityContacts {\n+  @Override\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   ac.getFacilitiesManager().addFacilityContacts(ac.getSession(), parms.readList(\"contactGroupsToAdd\", ContactGroup.class));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Add all contacts in the contact group\n+  *\n+  * @param contactGroupToAdd ContactGroup contact group to add\n+  */\n+\n+\n+ addFacilityContact {\n+  @Override\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   ac.getFacilitiesManager().addFacilityContact(ac.getSession(), parms.read(\"contactGroupToAdd\", ContactGroup.class));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove all contacts in list of facilities contact groups\n+  *\n+  * @param contactGroupsToRemove List<ContactGroup> list of contact groups to remove\n+  */\n+\n+\n+ removeFacilityContacts {\n+  @Override\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   ac.getFacilitiesManager().removeFacilityContacts(ac.getSession(), parms.readList(\"contactGroupsToRemove\", ContactGroup.class));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove all contacts in the contact group\n+  *\n+  * @param contactGroupToRemove ContactGroup contact group to remove\n+  */\n+\n+\n+ removeFacilityContact {\n+  @Override\n+  public Object call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   ac.getFacilitiesManager().removeFacilityContact(ac.getSession(), parms.read(\"contactGroupToRemove\", ContactGroup.class));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Return assigned security teams for specific facility\n+  *\n+  * @param facilityName String Facility name\n+  * @return List<SecurityTeam> assigned security teams fot given facility\n+  * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n+  */\n+ /*#\n+  * Return assigned security teams for specific facility\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @return List<SecurityTeam> assigned security teams fot given facility\n+  * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n+  */\n+\n+\n+ getAssignedSecurityTeams {\n+  @Override\n+  public List<SecurityTeam> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getAssignedSecurityTeams(ac.getSession(), getFacility(ac, parms));\n+  }\n+ },\n+\n+ /*#\n+  * Assign given security team to given facility (means the facility trusts the security team)\n+  *\n+  * @param facilityName String Facility name\n+  * @param securityTeam int SecurityTeam <code>id</code>\n+  * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n+  * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+  * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n+  */\n+ /*#\n+  * Assign given security team to given facility (means the facility trusts the security team)\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param securityTeam int SecurityTeam <code>id</code>\n+  * @throw SecurityTeamAlreadyAssignedException When SecurityTeam with given <code>id</code> is already assigned.\n+  * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+  * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n+  */\n+\n+\n+ assignSecurityTeam {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getFacilitiesManager().assignSecurityTeam(ac.getSession(), getFacility(ac, parms), ac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Remove (Unassign) given security team from given facility\n+  *\n+  * @param facilityName String Facility name\n+  * @param securityTeam int SecurityTeam <code>id</code>\n+  * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n+  * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+  * @throw FacilityNotExistsException When Facility with given name doesn't exists.\n+  */\n+ /*#\n+  * Remove (Unassign) given security team from given facility\n+  *\n+  * @param facility int Facility <code>id</code>\n+  * @param securityTeam int SecurityTeam <code>id</code>\n+  * @throw SecurityTeamNotAssignedException When SecurityTeam with given <code>id</code> is not assigned.\n+  * @throw SecurityTeamNotExistsException When SecurityTeam with given <code>id</code> doesn't exists.\n+  * @throw FacilityNotExistsException When Facility with given <code>id</code> doesn't exists.\n+  */\n+\n+\n+ removeSecurityTeam {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getFacilitiesManager().removeSecurityTeam(ac.getSession(), getFacility(ac, parms), ac.getSecurityTeamById(parms.readInt(\"securityTeam\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  *  Set ban for user on facility.\n+  *\n+  * @param banOnFacility BanOnFacility JSON object\n+  * @return BanOnFacility Created banOnFacility\n+  */\n+\n+\n+ setBan {\n+  @Override\n+  public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   return ac.getFacilitiesManager().setBan(ac.getSession(), parms.read(\"banOnFacility\", BanOnFacility.class));\n+  }\n+ },\n+\n+ /*#\n+  *  Get Ban for user on facility by it's id.\n+  *\n+  * @param banId int BanOnFacility <code>id</code>\n+  * @return BanOnFacility banOnFacility\n+  */\n+\n+\n+ getBanById {\n+  @Override\n+  public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getBanById(ac.getSession(), parms.readInt(\"banId\"));\n+  }\n+ },\n+\n+ /*#\n+  *  Get ban by userId and facilityId.\n+  *\n+  * @param userId int User <code>id</code>\n+  * @param facilityId int Facility <code>id</code>\n+  * @return BanOnFacility banOnFacility\n+  */\n+\n+\n+ getBan {\n+  @Override\n+  public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getBan(ac.getSession(), parms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n+  }\n+ },\n+\n+ /*#\n+  * Get all bans for user on any facility.\n+  *\n+  * @param userId int User <code>id</code>\n+  * @return List<BanOnFacility> userBansOnFacilities\n+  */\n+\n+\n+ getBansForUser {\n+  @Override\n+  public List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getBansForUser(ac.getSession(), parms.readInt(\"userId\"));\n+  }\n+ },\n+\n+ /*#\n+  * Get all bans for user on the facility.\n+  *\n+  * @param facilityId int Facility <code>id</code>\n+  * @return List<BanOnFacility> usersBansOnFacility\n+  */\n+\n+\n+ getBansForFacility {\n+  @Override\n+  public List<BanOnFacility> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getFacilitiesManager().getBansForFacility(ac.getSession(), parms.readInt(\"facilityId\"));\n+  }\n+ },\n+\n+ /*#\n+  * Update existing ban (description, validation timestamp)\n+  *\n+  * @param banOnFacility BanOnFacility JSON object\n+  * @return BanOnFacility updated banOnFacility\n+  */\n+\n+\n+ updateBan {\n+  @Override\n+  public BanOnFacility call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   return ac.getFacilitiesManager().updateBan(ac.getSession(), parms.read(\"banOnFacility\", BanOnFacility.class));\n+  }\n+ },\n+\n+ /*#\n+  * Remove specific ban by it's id.\n+  *\n+  * @param banId int BanOnFacility <code>id</code>\n+  */\n+ /*#\n+  * Remove specific ban by userId and facilityId.\n+  *\n+  * @param userId int User <code>id</code>\n+  * @param facilityId int Facility <code>id</code>\n+  */\n+\n+\n+ removeBan {\n+  @Override\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   parms.stateChangingCheck();\n+   if (parms.contains(\"banId\")) {\n+    ac.getFacilitiesManager().removeBan(ac.getSession(), parms.readInt(\"banId\"));\n+   } else {\n+    ac.getFacilitiesManager().removeBan(ac.getSession(), parms.readInt(\"userId\"), parms.readInt(\"facilityId\"));\n+   }\n+\n+   return null;\n+  }\n+ };\n+\n+ private static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n+  if (parms.contains(\"facilityName\")) return ac.getFacilityByName(parms.readString(\"facilityName\"));\n+  else return ac.getFacilityById(parms.readInt(\"facility\"));\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 1706
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/226/FacilitiesManagerMethod.java\nindex b0ddf7c7fd8..c837b00fd98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/226/FacilitiesManagerMethod.java\n@@ -1715,7 +1715,7 @@ public enum FacilitiesManagerMethod implements ManagerMethod {\n \t\t\treturn null;\n \t\t}\n \t};\n-\t\n+\n \tprivate static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\tif (parms.contains(\"facilityName\")) return ac.getFacilityByName(parms.readString(\"facilityName\"));\n \t\telse return ac.getFacilityById(parms.readInt(\"facility\"));\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/226/FacilitiesManagerMethod.java\nindex b0ddf7c7fd8..71bc1270301 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/226/FacilitiesManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/226/FacilitiesManagerMethod.java\n@@ -1714,9 +1714,8 @@ public enum FacilitiesManagerMethod implements ManagerMethod {\n \t\t\t}\n \t\t\treturn null;\n \t\t}\n-\t};\n-\t\n-\tprivate static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n+\t}\n+\t;private static Facility getFacility(ApiCaller ac, Deserializer parms) throws PerunException {\n \t\tif (parms.contains(\"facilityName\")) return ac.getFacilityByName(parms.readString(\"facilityName\"));\n \t\telse return ac.getFacilityById(parms.readInt(\"facility\"));\n \t}\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}