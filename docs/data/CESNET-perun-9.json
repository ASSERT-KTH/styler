{
    "project_name": "CESNET-perun",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "1079",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\ttry {\n\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery +\n\t\t\t\t\t\"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n\t\t\t        USER_MAPPER);\n\t\t} catch(EmptyResultDataAccessException ex) {\n\t\t\treturn new ArrayList<User>();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/9/UsersManagerImpl.java\nindex fde4406b2c2..dae4fba29ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/9/UsersManagerImpl.java\n@@ -1077,7 +1077,7 @@ public class UsersManagerImpl implements UsersManagerImplApi {\n \t\ttry {\n \t\t\treturn namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery +\n \t\t\t\t\t\"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n-\t\t\t        USER_MAPPER);\n+\t\t\t\t\t\t\tUSER_MAPPER);\n \t\t} catch(EmptyResultDataAccessException ex) {\n \t\t\treturn new ArrayList<User>();\n \t\t} catch(RuntimeException ex) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/9/UsersManagerImpl.java\nindex fde4406b2c2..9362a0c7c9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/9/UsersManagerImpl.java\n@@ -30,1347 +30,1371 @@ import java.util.regex.Pattern;\n  */\n public class UsersManagerImpl implements UsersManagerImplApi {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(UsersManagerImpl.class);\n-\n-\t// time window size for mail validation if not taken from peruns configuration file\n-\tprivate final static int VALIDATION_ALLOWED_HOURS = 6;\n-\n-\t// If user extSource is older than 'number' months, it is not defined as ACTIVE in methods\n-\t// INACTIVE userExtSources are skipped in counting max loa for user\n-\tprivate static final int MAX_OLD_OF_ACTIVE_USER_EXTSOURCE = 13;\n-\n-\t// Part of the SQL script used for getting the User object\n-\tprotected final static String userMappingSelectQuery = \"users.id as users_id, users.first_name as users_first_name, users.last_name as users_last_name, \" +\n-\t\t\"users.middle_name as users_middle_name, users.title_before as users_title_before, users.title_after as users_title_after, \" +\n-\t\t\"users.created_at as users_created_at, users.created_by as users_created_by, users.modified_by as users_modified_by, users.modified_at as users_modified_at, \" +\n-\t\t\"users.sponsored_acc as users_sponsored_acc, users.service_acc as users_service_acc, users.created_by_uid as users_created_by_uid, users.modified_by_uid as users_modified_by_uid\";\n-\n-\tprotected final static String userExtSourceMappingSelectQuery = \"user_ext_sources.id as user_ext_sources_id, user_ext_sources.login_ext as user_ext_sources_login_ext, \" +\n-\t\t\"user_ext_sources.user_id as user_ext_sources_user_id, user_ext_sources.loa as user_ext_sources_loa, user_ext_sources.created_at as user_ext_sources_created_at, user_ext_sources.created_by as user_ext_sources_created_by, \" +\n-\t\t\"user_ext_sources.modified_by as user_ext_sources_modified_by, user_ext_sources.modified_at as user_ext_sources_modified_at, \" +\n-\t\t\"user_ext_sources.created_by_uid as ues_created_by_uid, user_ext_sources.modified_by_uid as ues_modified_by_uid\";\n-\n-\tprivate static Map<String, Pattern> userExtSourcePersistentPatterns;\n-\n-\tstatic {\n-\t\t// Prepare userExtSourcePersistentPatterns for matching regex from perun property file.\n-\t\t// It is done in advance because of performance.\n-\t\tuserExtSourcePersistentPatterns = new HashMap<>();\n-\t\tString persistentConfig = BeansUtils.getCoreConfig().getUserExtSourcesPersistent();\n-\t\tfor (String extSource : persistentConfig.split(\";\")) {\n-\t\t\tString[] extSourceTuple = extSource.split(\",\", 2);\n-\t\t\tif (extSourceTuple.length > 1) {\n-\t\t\t\tuserExtSourcePersistentPatterns.put(extSourceTuple[0], Pattern.compile(extSourceTuple[1]));\n-\t\t\t} else {\n-\t\t\t\tuserExtSourcePersistentPatterns.put(extSource, Pattern.compile(\".*\"));\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate JdbcPerunTemplate jdbc;\n-\tprivate NamedParameterJdbcTemplate  namedParameterJdbcTemplate;\n-\n-\tprotected static final RowMapper<User> USER_MAPPER = new RowMapper<User>() {\n-\t\t@Override\n-\t\tpublic User mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\treturn new User(rs.getInt(\"users_id\"), rs.getString(\"users_first_name\"), rs.getString(\"users_last_name\"),\n-\t\t\t\t\trs.getString(\"users_middle_name\"), rs.getString(\"users_title_before\"), rs.getString(\"users_title_after\"),\n-\t\t\t\t\trs.getString(\"users_created_at\"), rs.getString(\"users_created_by\"), rs.getString(\"users_modified_at\"), rs.getString(\"users_modified_by\"), rs.getBoolean(\"users_service_acc\"),\n-\t\t\t\t\trs.getBoolean(\"users_sponsored_acc\"),\n-\t\t\t\t\trs.getInt(\"users_created_by_uid\") == 0 ? null : rs.getInt(\"users_created_by_uid\"), rs.getInt(\"users_modified_by_uid\") == 0 ? null : rs.getInt(\"users_modified_by_uid\"));\n-\t\t}\n-\t};\n-\n-\tprivate static final RowMapper<UserExtSource> USEREXTSOURCE_MAPPER = new RowMapper<UserExtSource>() {\n-\t\t@Override\n-\t\tpublic UserExtSource mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tExtSource extSource = new ExtSource();\n-\t\t\textSource.setId(rs.getInt(\"ext_sources_id\"));\n-\t\t\textSource.setName(rs.getString(\"ext_sources_name\"));\n-\t\t\textSource.setType(rs.getString(\"ext_sources_type\"));\n-\t\t\textSource.setCreatedAt(rs.getString(\"ext_sources_created_at\"));\n-\t\t\textSource.setCreatedBy(rs.getString(\"ext_sources_created_by\"));\n-\t\t\textSource.setModifiedAt(rs.getString(\"ext_sources_modified_at\"));\n-\t\t\textSource.setModifiedBy(rs.getString(\"ext_sources_modified_by\"));\n-\t\t\tif(rs.getInt(\"ext_sources_modified_by_uid\") == 0) extSource.setModifiedByUid(null);\n-\t\t\telse extSource.setModifiedByUid(rs.getInt(\"ext_sources_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"ext_sources_created_by_uid\") == 0) extSource.setCreatedByUid(null);\n-\t\t\telse extSource.setCreatedByUid(rs.getInt(\"ext_sources_created_by_uid\"));\n-\n-\t\t\tboolean persistent = false;\n-\t\t\tPattern p = userExtSourcePersistentPatterns.get(rs.getString(\"ext_sources_name\"));\n-\t\t\tif (p != null) {\n-\t\t\t\tif (p.matcher(rs.getString(\"user_ext_sources_login_ext\")).matches()) {\n-\t\t\t\t\tpersistent = true;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn new UserExtSource(rs.getInt(\"user_ext_sources_id\"), extSource, rs.getString(\"user_ext_sources_login_ext\"),\n-\t\t\t\t\trs.getInt(\"user_ext_sources_user_id\"), rs.getInt(\"user_ext_sources_loa\"), persistent,\n-\t\t\t\t\trs.getString(\"user_ext_sources_created_at\"), rs.getString(\"user_ext_sources_created_by\"),\n-\t\t\t\t\trs.getString(\"user_ext_sources_modified_at\"), rs.getString(\"user_ext_sources_modified_by\"),\n-\t\t\t\t\trs.getInt(\"ues_created_by_uid\") == 0 ? null : rs.getInt(\"ues_created_by_uid\"),\n-\t\t\t\t\trs.getInt(\"ues_modified_by_uid\") == 0 ? null : rs.getInt(\"ues_modified_by_uid\"));\n-\t\t}\n-\t};\n-\n-        protected static final ResultSetExtractor<List<Pair<User,String>>> USERBLACKLIST_EXTRACTOR = new ResultSetExtractor<List<Pair<User,String>>>(){\n-            @Override\n-            public List<Pair<User,String>> extractData(ResultSet rs) throws SQLException{\n-                List<Pair<User, String>> result = new ArrayList<>();\n-\n-                int row = 0;\n-                while(rs.next()){\n-                    result.add(new Pair<User, String>(USER_MAPPER.mapRow(rs, row), rs.getString(\"description\")));\n-                    row++;\n+    private final static Logger log = LoggerFactory.getLogger(UsersManagerImpl.class);\n+\n+    // time window size for mail validation if not taken from peruns configuration file\n+    private final static int VALIDATION_ALLOWED_HOURS = 6;\n+\n+    // If user extSource is older than 'number' months, it is not defined as ACTIVE in methods\n+    // INACTIVE userExtSources are skipped in counting max loa for user\n+    private static final int MAX_OLD_OF_ACTIVE_USER_EXTSOURCE = 13;\n+\n+    // Part of the SQL script used for getting the User object\n+    protected final static String userMappingSelectQuery = \"users.id as users_id, users.first_name as users_first_name, users.last_name as users_last_name, \" +\n+            \"users.middle_name as users_middle_name, users.title_before as users_title_before, users.title_after as users_title_after, \" +\n+            \"users.created_at as users_created_at, users.created_by as users_created_by, users.modified_by as users_modified_by, users.modified_at as users_modified_at, \" +\n+            \"users.sponsored_acc as users_sponsored_acc, users.service_acc as users_service_acc, users.created_by_uid as users_created_by_uid, users.modified_by_uid as users_modified_by_uid\";\n+\n+    protected final static String userExtSourceMappingSelectQuery = \"user_ext_sources.id as user_ext_sources_id, user_ext_sources.login_ext as user_ext_sources_login_ext, \" +\n+            \"user_ext_sources.user_id as user_ext_sources_user_id, user_ext_sources.loa as user_ext_sources_loa, user_ext_sources.created_at as user_ext_sources_created_at, user_ext_sources.created_by as user_ext_sources_created_by, \" +\n+            \"user_ext_sources.modified_by as user_ext_sources_modified_by, user_ext_sources.modified_at as user_ext_sources_modified_at, \" +\n+            \"user_ext_sources.created_by_uid as ues_created_by_uid, user_ext_sources.modified_by_uid as ues_modified_by_uid\";\n+\n+    private static Map<String, Pattern> userExtSourcePersistentPatterns;\n+\n+    static {\n+        // Prepare userExtSourcePersistentPatterns for matching regex from perun property file.\n+        // It is done in advance because of performance.\n+        userExtSourcePersistentPatterns = new HashMap<>();\n+        String persistentConfig = BeansUtils.getCoreConfig().getUserExtSourcesPersistent();\n+        for (String extSource : persistentConfig.split(\";\")) {\n+            String[] extSourceTuple = extSource.split(\",\", 2);\n+            if (extSourceTuple.length > 1) {\n+                userExtSourcePersistentPatterns.put(extSourceTuple[0], Pattern.compile(extSourceTuple[1]));\n+            } else {\n+                userExtSourcePersistentPatterns.put(extSource, Pattern.compile(\".*\"));\n+            }\n+        }\n+    }\n+\n+    private JdbcPerunTemplate jdbc;\n+    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+    protected static final RowMapper<User> USER_MAPPER = new RowMapper<User>() {\n+        @Override\n+        public User mapRow(ResultSet rs, int i) throws SQLException {\n+            return new User(rs.getInt(\"users_id\"), rs.getString(\"users_first_name\"), rs.getString(\"users_last_name\"),\n+                    rs.getString(\"users_middle_name\"), rs.getString(\"users_title_before\"), rs.getString(\"users_title_after\"),\n+                    rs.getString(\"users_created_at\"), rs.getString(\"users_created_by\"), rs.getString(\"users_modified_at\"), rs.getString(\"users_modified_by\"), rs.getBoolean(\"users_service_acc\"),\n+                    rs.getBoolean(\"users_sponsored_acc\"),\n+                    rs.getInt(\"users_created_by_uid\") == 0 ? null : rs.getInt(\"users_created_by_uid\"), rs.getInt(\"users_modified_by_uid\") == 0 ? null : rs.getInt(\"users_modified_by_uid\"));\n+        }\n+    };\n+\n+    private static final RowMapper<UserExtSource> USEREXTSOURCE_MAPPER = new RowMapper<UserExtSource>() {\n+        @Override\n+        public UserExtSource mapRow(ResultSet rs, int i) throws SQLException {\n+            ExtSource extSource = new ExtSource();\n+            extSource.setId(rs.getInt(\"ext_sources_id\"));\n+            extSource.setName(rs.getString(\"ext_sources_name\"));\n+            extSource.setType(rs.getString(\"ext_sources_type\"));\n+            extSource.setCreatedAt(rs.getString(\"ext_sources_created_at\"));\n+            extSource.setCreatedBy(rs.getString(\"ext_sources_created_by\"));\n+            extSource.setModifiedAt(rs.getString(\"ext_sources_modified_at\"));\n+            extSource.setModifiedBy(rs.getString(\"ext_sources_modified_by\"));\n+            if (rs.getInt(\"ext_sources_modified_by_uid\") == 0) {\n+                extSource.setModifiedByUid(null);\n+            } else {\n+                extSource.setModifiedByUid(rs.getInt(\"ext_sources_modified_by_uid\"));\n+            }\n+            if (rs.getInt(\"ext_sources_created_by_uid\") == 0) {\n+                extSource.setCreatedByUid(null);\n+            } else {\n+                extSource.setCreatedByUid(rs.getInt(\"ext_sources_created_by_uid\"));\n+            }\n+\n+            boolean persistent = false;\n+            Pattern p = userExtSourcePersistentPatterns.get(rs.getString(\"ext_sources_name\"));\n+            if (p != null) {\n+                if (p.matcher(rs.getString(\"user_ext_sources_login_ext\")).matches()) {\n+                    persistent = true;\n+                }\n+            }\n+\n+            return new UserExtSource(rs.getInt(\"user_ext_sources_id\"), extSource, rs.getString(\"user_ext_sources_login_ext\"),\n+                    rs.getInt(\"user_ext_sources_user_id\"), rs.getInt(\"user_ext_sources_loa\"), persistent,\n+                    rs.getString(\"user_ext_sources_created_at\"), rs.getString(\"user_ext_sources_created_by\"),\n+                    rs.getString(\"user_ext_sources_modified_at\"), rs.getString(\"user_ext_sources_modified_by\"),\n+                    rs.getInt(\"ues_created_by_uid\") == 0 ? null : rs.getInt(\"ues_created_by_uid\"),\n+                    rs.getInt(\"ues_modified_by_uid\") == 0 ? null : rs.getInt(\"ues_modified_by_uid\"));\n+        }\n+    };\n+\n+    protected static final ResultSetExtractor<List<Pair<User, String>>> USERBLACKLIST_EXTRACTOR = new ResultSetExtractor<List<Pair<User, String>>>() {\n+        @Override\n+        public List<Pair<User, String>> extractData(ResultSet rs) throws SQLException {\n+            List<Pair<User, String>> result = new ArrayList<>();\n+\n+            int row = 0;\n+            while (rs.next()) {\n+                result.add(new Pair<User, String>(USER_MAPPER.mapRow(rs, row), rs.getString(\"description\")));\n+                row++;\n+            }\n+\n+            return result;\n+        }\n+    };\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param perunPool connection pool\n+     */\n+    public UsersManagerImpl(DataSource perunPool) {\n+        this.jdbc = new JdbcPerunTemplate(perunPool);\n+        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n+    }\n+\n+    @Override\n+    public User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where users.id=? \", USER_MAPPER, id);\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new UserNotExistsException(\"user id=\" + id);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + userMappingSelectQuery +\n+                    \" from users, user_ext_sources \" +\n+                    \"where users.id=user_ext_sources.user_id and user_ext_sources.login_ext=? and user_ext_sources.ext_sources_id=? \", USER_MAPPER, userExtSource.getLogin(), userExtSource.getExtSource().getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new UserNotExistsException(\"userExtSource=\" + userExtSource.toString());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery +\n+                    \" from users join user_ext_sources on users.id=user_ext_sources.user_id join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\"\n+                    + \" where ext_sources.type=? and user_ext_sources.login_ext=?\", USER_MAPPER, extSourceType, login);\n+        } catch (EmptyResultDataAccessException ex) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users, members \" +\n+                    \"where members.id=? and members.user_id=users.id\", USER_MAPPER, member.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new ConsistencyErrorException(\"Member has to have a corresponding User\", ex);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery + \" from users, members \" +\n+                    \"where members.user_id=users.id and members.vo_id=?\", USER_MAPPER, vo.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsers(PerunSession sess) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery +\n+                    \"  from users\", USER_MAPPER);\n+        } catch (EmptyResultDataAccessException ex) {\n+            // Return empty list\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery +\n+                    \" from users, specific_user_users where users.id=specific_user_users.specific_user_id and specific_user_users.status='0' and specific_user_users.user_id=?\", USER_MAPPER, user.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            // Return empty list\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery +\n+                    \" from users, specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and specific_user_users.specific_user_id=? \" +\n+                    \" and specific_user_users.type=?\", USER_MAPPER, specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+        } catch (EmptyResultDataAccessException ex) {\n+            // Return empty list\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException {\n+        try {\n+            int numAffected = jdbc.update(\"delete from specific_user_users where user_id=? and specific_user_id=? and specific_user_users.type=?\",\n+                    user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+            if (numAffected == 0) {\n+                throw new SpecificUserOwnerAlreadyRemovedException(\"SpecificUser-Owner: \" + user + \" , SpecificUser: \" + specificUser);\n+            }\n+\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"insert into specific_user_users(user_id,specific_user_id,status,created_by_uid,modified_at,type) values (?,?,'0',?,\" + Compatibility.getSysdate() + \",?)\",\n+                    user.getId(), specificUser.getId(), sess.getPerunPrincipal().getUserId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"update specific_user_users set status='0', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\",\n+                    sess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+        } catch (RuntimeException er) {\n+            throw new InternalErrorException(er);\n+        }\n+    }\n+\n+    @Override\n+    public void disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"update specific_user_users set status='1', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\",\n+                    sess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+        } catch (RuntimeException er) {\n+            throw new InternalErrorException(er);\n+        }\n+    }\n+\n+    @Override\n+    public boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+        try {\n+            int numberOfExistences = jdbc.queryForInt(\"select count(1) from specific_user_users where user_id=? and specific_user_id=? and type=?\",\n+                    user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+            if (numberOfExistences == 1) {\n+                return true;\n+            } else if (numberOfExistences > 1) {\n+                throw new ConsistencyErrorException(\"Ownership between user \" + user + \" and specificUser \" + specificUser + \" exists more than once.\");\n+            }\n+            return false;\n+        } catch (EmptyResultDataAccessException e) {\n+            return false;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery +\n+                    \"  from users where users.service_acc='1' or users.sponsored_acc='1'\", USER_MAPPER);\n+        } catch (EmptyResultDataAccessException ex) {\n+            // Return empty list\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void deleteUser(PerunSession sess, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n+        try {\n+            // delete all relations like  user -> sponsor -> service\n+            jdbc.update(\"delete from specific_user_users where specific_user_id=? or user_id=?\", user.getId(), user.getId());\n+            int numAffected = jdbc.update(\"delete from users where id=?\", user.getId());\n+            if (numAffected == 0) {\n+                if (user.isSpecificUser()) {\n+                    throw new SpecificUserAlreadyRemovedException(\"SpecificUser: \" + user);\n+                }\n+                throw new UserAlreadyRemovedException(\"User: \" + user);\n+            }\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public User createUser(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            int newId = Utils.getNewId(jdbc, \"users_id_seq\");\n+            char serviceAcc = '0';\n+            char sponsoredAcc = '0';\n+            if (user.isServiceUser()) {\n+                serviceAcc = '1';\n+            }\n+            if (user.isSponsoredUser()) {\n+                sponsoredAcc = '1';\n+            }\n+            jdbc.update(\"insert into users(id,first_name,last_name,middle_name,title_before,title_after,created_by,modified_by,service_acc,sponsored_acc,created_by_uid,modified_by_uid)\" +\n+                            \" values (?,?,?,?,?,?,?,?,?,?,?,?)\", newId, user.getFirstName(), user.getLastName(), user.getMiddleName(),\n+                    user.getTitleBefore(), user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), \"\" + serviceAcc, \"\" + sponsoredAcc,\n+                    sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+            user.setId(newId);\n+\n+            return user;\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public User setSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n+        try {\n+            if (specificUserType.equals(SpecificUserType.SERVICE)) {\n+                jdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        \"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                user.setServiceUser(true);\n+            } else if (specificUserType.equals(SpecificUserType.SPONSORED)) {\n+                jdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        \"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                user.setSponsoredUser(true);\n+            } else {\n+                throw new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n+            }\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+\n+        return user;\n+    }\n+\n+    @Override\n+    public User unsetSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n+        try {\n+            if (specificUserType.equals(SpecificUserType.SERVICE)) {\n+                jdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        \"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                user.setServiceUser(false);\n+            } else if (specificUserType.equals(SpecificUserType.SPONSORED)) {\n+                jdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        \"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                user.setSponsoredUser(false);\n+            } else {\n+                throw new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n+            }\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+\n+        return user;\n+    }\n+\n+    @Override\n+    public User updateUser(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            User userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n+\n+            if (userDb == null) {\n+                throw new ConsistencyErrorException(\"Updating non existing user\");\n+            }\n+\n+            if ((user.getFirstName() != null && !user.getFirstName().equals(userDb.getFirstName())) ||\n+                    (user.getFirstName() == null && userDb.getFirstName() != null)) {\n+                jdbc.update(\"update users set first_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        user.getFirstName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                userDb.setFirstName(user.getFirstName());\n+            }\n+            if (user.getLastName() != null && !user.getLastName().equals(userDb.getLastName())) {\n+                jdbc.update(\"update users set last_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        user.getLastName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                userDb.setLastName(user.getLastName());\n+            }\n+            if ((user.getMiddleName() != null && !user.getMiddleName().equals(userDb.getMiddleName())) ||\n+                    (user.getMiddleName() == null && userDb.getMiddleName() != null)) {\n+                jdbc.update(\"update users set middle_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        user.getMiddleName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                userDb.setMiddleName(user.getMiddleName());\n+            }\n+            if ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) ||\n+                    (user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n+                jdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        user.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                userDb.setTitleBefore(user.getTitleBefore());\n+            }\n+            if ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) ||\n+                    (user.getTitleAfter() == null && userDb.getTitleAfter() != null)) {\n+                jdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                userDb.setTitleAfter(user.getTitleAfter());\n+            }\n+\n+            return userDb;\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public User updateNameTitles(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            User userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n+\n+            if (userDb == null) {\n+                throw new ConsistencyErrorException(\"Updating titles for non existing user\");\n+            }\n+\n+            // changed condition to updateUser case to handle: fill, change and remove\n+\n+            if ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) ||\n+                    (user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n+                jdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        user.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                userDb.setTitleBefore(user.getTitleBefore());\n+            }\n+            if ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) ||\n+                    ((user.getTitleAfter() == null && userDb.getTitleAfter() != null))) {\n+                jdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+                userDb.setTitleAfter(user.getTitleAfter());\n+            }\n+\n+            return userDb;\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"update user_ext_sources set last_access=\" + Compatibility.getSysdate() + \" where id=?\", userExtSource.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n+        try {\n+            UserExtSource userExtSourceDb = jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n+                    \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n+                    \" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, userExtSource.getId());\n+\n+            if (userExtSourceDb == null) {\n+                throw new ConsistencyErrorException(\"Updating non existing userExtSource\");\n+            }\n+\n+            if (userExtSource.getLoa() != userExtSourceDb.getLoa()) {\n+                jdbc.update(\"update user_ext_sources set loa=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                        userExtSource.getLoa(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n+            }\n+            if (userExtSource.getLogin() != null && !userExtSourceDb.getLogin().equals(userExtSource.getLogin())) {\n+                try {\n+                    jdbc.update(\"update user_ext_sources set login_ext=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n+                            userExtSource.getLogin(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n+                } catch (DuplicateKeyException ex) {\n+                    throw new UserExtSourceExistsException(\"UES with same login already exists: \" + userExtSource);\n+                }\n+            }\n+\n+            return userExtSource;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException {\n+        try {\n+            Utils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n+\n+            int ueaId = Utils.getNewId(jdbc, \"user_ext_sources_id_seq\");\n+\n+            log.trace(\"Adding new user ext source: ueaId {}, user.getId() {}, userExtSource.getLogin() {}, userExtSource.getLoa() {}, userExtSource.getExtSource().getId() {}, \" +\n+                    \"sess.getPerunPrincipal().getActor() {}, sess.getPerunPrincipal().getActor() {}, \" +\n+                    \"sess.getPerunPrincipal().getUser().getId() {}, sess.getPerunPrincipal().getUser().getId() {}\", new Object[] {ueaId, user.getId(), userExtSource.getLogin(),\n+                    userExtSource.getLoa(), userExtSource.getExtSource().getId(),\n+                    sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(),\n+                    sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId()});\n+            jdbc.update(\"insert into user_ext_sources (id, user_id, login_ext, loa, ext_sources_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid) \" +\n+                            \"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\",\n+                    ueaId, user.getId(), userExtSource.getLogin(), userExtSource.getLoa(), userExtSource.getExtSource().getId(),\n+                    sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+\n+            userExtSource.setId(ueaId);\n+            userExtSource.setUserId(user.getId());\n+\n+            return userExtSource;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n+                    \" from user_ext_sources left join ext_sources \" +\n+                    \" on user_ext_sources.ext_sources_id=ext_sources.id \" +\n+                    \" where ext_sources.id=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, source.getId(), extLogin);\n+        } catch (EmptyResultDataAccessException e) {\n+            throw new UserExtSourceNotExistsException(\"ExtSource: \" + source + \" for extLogin \" + extLogin, e);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+        //get now date\n+        LocalDate date = LocalDate.now();\n+        date = date.minusMonths(MAX_OLD_OF_ACTIVE_USER_EXTSOURCE);\n+\n+        try {\n+            String query = \"select \" + userExtSourceMappingSelectQuery + \", \" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n+                    \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where \" +\n+                    \" user_ext_sources.user_id=? and \" +\n+                    \" user_ext_sources.last_access > \" + Compatibility.toDate(\"'\" + date + \"'\", \"'YYYY-MM-DD'\");\n+\n+            return jdbc.query(query, USEREXTSOURCE_MAPPER, user.getId());\n+        } catch (EmptyResultDataAccessException ex) {\n+            return new ArrayList<>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n+                    \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n+                    \" ext_sources.type=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, extType, extLogin);\n+        } catch (EmptyResultDataAccessException ex) {\n+            return new ArrayList<UserExtSource>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+        try {\n+            return jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n+                    \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n+                    \" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, id);\n+        } catch (EmptyResultDataAccessException e) {\n+            throw new UserExtSourceNotExistsException(e);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"SELECT \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n+                    \" FROM user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\" +\n+                    \" WHERE user_ext_sources.user_id=?\", USEREXTSOURCE_MAPPER, user.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n+        try {\n+            int numAffected = jdbc.update(\"delete from user_ext_sources where id=?\", userExtSource.getId());\n+            if (numAffected == 0) {\n+                throw new UserExtSourceAlreadyRemovedException(\"User: \" + user + \" , UserExtSource: \" + userExtSource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"delete from user_ext_sources where user_id=?\", user.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" +\n+                            \" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" +\n+                            \" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" +\n+                            \" join members on groups_members.member_id=members.id where members.user_id=?) \" +\n+                            \" and authz.role_id=(select id from roles where roles.name=?))) \",\n+                    GroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" +\n+                            \" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" +\n+                            \" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" +\n+                            \" join members on groups_members.member_id=members.id where members.user_id=?) \" +\n+                            \" and authz.role_id=(select id from roles where roles.name=?))) and groups.vo_id=? \",\n+                    GroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName(), vo.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Group>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from authz join vos on authz.vo_id=vos.id \" +\n+                            \" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n+                            \" left outer join members on members.id=groups_members.member_id \" +\n+                            \" where (authz.user_id=? or members.user_id=?) and authz.role_id=(select id from roles where name=?)\",\n+                    VosManagerImpl.VO_MAPPER, user.getId(), user.getId(), Role.VOADMIN.getRoleName());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<Vo>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from users join members on users.id=members.user_id, vos where \" +\n+                    \"users.id=? and members.vo_id=vos.id\", VosManagerImpl.VO_MAPPER, user.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            // If user is not member of any vo, just return empty list\n+            return new ArrayList<Vo>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery +\n+                            \" from users, user_attr_values where \" +\n+                            \" user_attr_values.attr_value=? and users.id=user_attr_values.user_id and user_attr_values.attr_id=?\",\n+                    USER_MAPPER, BeansUtils.attributeValueToString(attribute), attribute.getId());\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefinition, String attributeValue) throws InternalErrorException {\n+        String value = \"\";\n+        String operator = \"=\";\n+        if (attributeDefinition.getType().equals(String.class.getName())) {\n+            value = attributeValue.trim();\n+            operator = \"=\";\n+        } else if (attributeDefinition.getType().equals(Integer.class.getName())) {\n+            value = attributeValue.trim();\n+            operator = \"=\";\n+        } else if (attributeDefinition.getType().equals(Boolean.class.getName())) {\n+            value = attributeValue.trim();\n+            operator = \"=\";\n+        } else if (attributeDefinition.getType().equals(ArrayList.class.getName())) {\n+            value = \"%\" + attributeValue.trim() + \"%\";\n+            operator = \"like\";\n+        } else if (attributeDefinition.getType().equals(LinkedHashMap.class.getName())) {\n+            value = \"%\" + attributeValue.trim() + \"%\";\n+            operator = \"like\";\n+        }\n+\n+        // FIXME - this doesn't work for map attributes, since they are not in attr_value column\n+        // if fixed, we could add LargeString and LargeArrayList\n+\n+        String query = \"select \" + userMappingSelectQuery + \" from users, user_attr_values where \" +\n+                \" user_attr_values.attr_value \" + operator + \" :value and users.id=user_attr_values.user_id and user_attr_values.attr_id=:attr_id\";\n+\n+        MapSqlParameterSource namedParams = new MapSqlParameterSource();\n+        namedParams.addValue(\"value\", value);\n+        namedParams.addValue(\"attr_id\", attributeDefinition.getId());\n+\n+        try {\n+            return namedParameterJdbcTemplate.query(query, namedParams, USER_MAPPER);\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n+        Set<User> users = new HashSet<User>();\n+\n+        log.debug(\"Searching for users using searchString '{}'\", searchString);\n+\n+        // Search by mail (member)\n+        users.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n+                \" from users, members, member_attr_values, attr_names \" +\n+                \"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n+                \"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n+                \"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+        // Search preferred email (user)\n+        users.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n+                \" from users, user_attr_values, attr_names \" +\n+                \"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n+                \"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n+                \"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+        // Search logins in userExtSources\n+        users.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n+                \" from users, user_ext_sources \" +\n+                \"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n+\n+        // Search logins in attributes: login-namespace:*\n+        users.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n+                        \" from attr_names, user_attr_values, users \" +\n+                        \"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" +\n+                        \"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n+                USER_MAPPER, searchString));\n+\n+        // Search by userId\n+        try {\n+            int userId = Integer.parseInt(searchString);\n+            users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n+        } catch (NumberFormatException e) {\n+            // IGNORE\n+        }\n+\n+        users.addAll(findUsersByName(sess, searchString));\n+\n+        return new ArrayList<User>(users);\n+    }\n+\n+    @Override\n+    public List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n+        Set<User> users = new HashSet<User>();\n+\n+        log.debug(\"Searching for users using searchString '{}'\", searchString);\n+\n+        // Search by mail (member)\n+        users.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n+                \" from users, members, member_attr_values, attr_names \" +\n+                \"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n+                \"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n+                \"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+        // Search preferred email (user)\n+        users.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n+                \" from users, user_attr_values, attr_names \" +\n+                \"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n+                \"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n+                \"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+        // Search logins in userExtSources\n+        users.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n+                \" from users, user_ext_sources \" +\n+                \"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n+\n+        // Search logins in attributes: login-namespace:*\n+        users.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n+                        \" from attr_names, user_attr_values, users \" +\n+                        \"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" +\n+                        \"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n+                USER_MAPPER, searchString));\n+\n+        // Search by userId\n+        try {\n+            int userId = Integer.parseInt(searchString);\n+            users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n+        } catch (NumberFormatException e) {\n+            // IGNORE\n+        }\n+\n+        users.addAll(findUsersByExactName(sess, searchString));\n+\n+        return new ArrayList<User>(users);\n+    }\n+\n+    @Override\n+    public List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n+        if (searchString == null || searchString.isEmpty()) {\n+            return new ArrayList<User>();\n+        }\n+\n+        // Convert to lower case\n+        searchString = searchString.toLowerCase();\n+        log.debug(\"Search string '{}' converted into the lowercase\", searchString);\n+\n+        // Convert to ASCII\n+        searchString = Utils.utftoasci(searchString);\n+        log.debug(\"Search string '{}' converted into the ASCII\", searchString);\n+\n+        // remove spaces from the search string\n+        searchString = searchString.replaceAll(\" \", \"\");\n+\n+        log.debug(\"Searching users by name using searchString '{}'\", searchString);\n+\n+        // the searchString is already lower cased and converted into the ASCII\n+        try {\n+            if (Compatibility.isOracle()) {\n+                // Search users' names\n+                return (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" +\n+                                \"where lower(\" + Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\") + \") like '%' || ? || '%'\",\n+                        USER_MAPPER, searchString));\n+            } else if (Compatibility.isPostgreSql()) {\n+                return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n+                                \"where strpos(lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \"),?) > 0\",\n+                        USER_MAPPER, searchString);\n+            } else if (Compatibility.isHSQLDB()) {\n+                return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n+                                \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \") like '%' || ? || '%'\",\n+                        USER_MAPPER, searchString);\n+            } else {\n+                throw new InternalErrorException(\"Unsupported db type\");\n+            }\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n+\n+        if (titleBefore.isEmpty()) {\n+            titleBefore = \"%\";\n+        }\n+        if (firstName.isEmpty()) {\n+            firstName = \"%\";\n+        }\n+        if (middleName.isEmpty()) {\n+            middleName = \"%\";\n+        }\n+        if (lastName.isEmpty()) {\n+            lastName = \"%\";\n+        }\n+        if (titleAfter.isEmpty()) {\n+            titleAfter = \"%\";\n+        }\n+\n+        // the searchString is already lower cased\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" +\n+                            \" where coalesce(lower(\" + Compatibility.convertToAscii(\"users.title_before\") + \"), '%') like ? and lower(\" + Compatibility.convertToAscii(\"users.first_name\") + \") like ? and coalesce(lower(\" + Compatibility.convertToAscii(\"users.middle_name\") + \"),'%') like ? and \" +\n+                            \"lower(\" + Compatibility.convertToAscii(\"users.last_name\") + \") like ? and coalesce(lower(\" + Compatibility.convertToAscii(\"users.title_after\") + \"), '%') like ?\",\n+                    USER_MAPPER, titleBefore, firstName, middleName, lastName, titleAfter);\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n+        if (searchString == null || searchString.isEmpty()) {\n+            return new ArrayList<User>();\n+        }\n+\n+        // Convert to lower case\n+        searchString = searchString.toLowerCase();\n+        log.debug(\"Search string '{}' converted into the lowercase\", searchString);\n+\n+        // Convert to ASCII\n+        searchString = Utils.utftoasci(searchString);\n+        log.debug(\"Search string '{}' converted into the ASCII\", searchString);\n+\n+        // remove spaces from the search string\n+        searchString = searchString.replaceAll(\" \", \"\");\n+\n+        log.debug(\"Searching users by name using searchString '{}'\", searchString);\n+\n+        // the searchString is already lower cased and converted into the ASCII\n+        try {\n+            if (Compatibility.isOracle()) {\n+                // Search users' names\n+                return (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \"\n+                                + \"where lower(\" + Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\") + \")=?\",\n+                        USER_MAPPER, searchString));\n+            } else if (Compatibility.isPostgreSql()) {\n+                return jdbc.query(\"select \" + userMappingSelectQuery + \" from users \"\n+                                + \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=?\",\n+                        USER_MAPPER, searchString);\n+            } else if (Compatibility.isHSQLDB()) {\n+                return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n+                                \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=?\",\n+                        USER_MAPPER, searchString);\n+            } else {\n+                throw new InternalErrorException(\"Unsupported db type\");\n+            }\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n+        try {\n+            int numberOfExistences = jdbc.queryForInt(\"select count(1) from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName());\n+            if (numberOfExistences == 1) {\n+                return true;\n+            } else if (numberOfExistences > 1) {\n+                throw new ConsistencyErrorException(\"User \" + user + \" is PERUNADMIN more than once.\");\n+            }\n+            return false;\n+        } catch (EmptyResultDataAccessException e) {\n+            return false;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean userExists(PerunSession sess, User user) throws InternalErrorException {\n+        Utils.notNull(user, \"user\");\n+        try {\n+            int numberOfExistences = jdbc.queryForInt(\"select count(1) from users where id=? and service_acc=? and sponsored_acc=?\", user.getId(), user.isServiceUser() ? \"1\" : \"0\", user.isSponsoredUser() ? \"1\" : \"0\");\n+            if (numberOfExistences == 1) {\n+                return true;\n+            } else if (numberOfExistences > 1) {\n+                throw new ConsistencyErrorException(\"User \" + user + \" exists more than once.\");\n+            }\n+            return false;\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n+        if (!userExtSourceExists(sess, userExtSource)) {\n+            throw new UserExtSourceNotExistsException(\"UserExtSource: \" + userExtSource);\n+        }\n+    }\n+\n+    @Override\n+    public void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+\n+        try {\n+            int numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where id=?\", id);\n+            if (numberOfExistences == 0) {\n+                throw new UserExtSourceNotExistsException(\"UserExtSource with ID=\" + id + \" doesn't exists.\");\n+            }\n+            if (numberOfExistences > 1) {\n+                throw new ConsistencyErrorException(\"UserExtSource wit ID=\" + id + \" exists more than once.\");\n+            }\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n+        if (isLoginReserved(sess, namespace, login)) {\n+            throw new AlreadyReservedLoginException(namespace, login);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException {\n+        Utils.notNull(namespace, \"loginNamespace\");\n+        Utils.notNull(login, \"userLogin\");\n+\n+        try {\n+            int numberOfExistences = jdbc.queryForInt(\"select count(1) from application_reserved_logins where namespace=? and login=?\",\n+                    namespace, login);\n+            if (numberOfExistences == 1) {\n+                return true;\n+            } else if (numberOfExistences > 1) {\n+                throw new ConsistencyErrorException(\"Login \" + login + \" in namespace \" + namespace + \" is reserved more than once.\");\n+            }\n+            return false;\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+        Utils.notNull(userExtSource, \"userExtSource\");\n+        Utils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n+        Utils.notNull(userExtSource.getExtSource(), \"userExtSource.getExtSource\");\n+\n+        try {\n+\n+            // check by ext identity (login/ext source ID)\n+            if (userExtSource.getUserId() >= 0) {\n+                int numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=? and user_id=?\",\n+                        userExtSource.getLogin(), userExtSource.getExtSource().getId(), userExtSource.getUserId());\n+                if (numberOfExistences == 1) {\n+                    return true;\n+                } else if (numberOfExistences > 1) {\n+                    throw new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n+                }\n+                return false;\n+            } else {\n+                int numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=?\",\n+                        userExtSource.getLogin(), userExtSource.getExtSource().getId());\n+                if (numberOfExistences == 1) {\n+                    return true;\n+                } else if (numberOfExistences > 1) {\n+                    throw new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n                 }\n+                return false;\n+            }\n+\n+        } catch (EmptyResultDataAccessException ex) {\n+            return false;\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n+        // If usersIds is empty, we can immediately return empty results\n+        if (usersIds.size() == 0) {\n+            return new ArrayList<User>();\n+        }\n+\n+        try {\n+            return namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery +\n+                            \"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n+                    USER_MAPPER);\n+        } catch (EmptyResultDataAccessException ex) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"select \" + userMappingSelectQuery + \" from users where \" +\n+                    \"users.id not in (select user_id from members) order by last_name, first_name\", USER_MAPPER);\n+        } catch (EmptyResultDataAccessException e) {\n+            return new ArrayList<User>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException {\n+\n+        try {\n+            jdbc.update(\"delete from cabinet_authorships where userid=?\", user.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException {\n+\n+        List<Pair<String, String>> result = new ArrayList<Pair<String, String>>();\n+\n+        try {\n+            List<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n+                @Override\n+                public Integer mapRow(ResultSet rs, int arg1) throws SQLException {\n+                    return rs.getInt(\"id\");\n+                }\n+            }, user.getId());\n+\n+            for (Integer id : ids) {\n+\n+                result.addAll(jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n+                    @Override\n+                    public Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n+                        return new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n+                    }\n+                }, id));\n \n-                return result;\n             }\n-        };\n-\n-\t/**\n-\t * Constructor.\n-\t *\n-\t * @param perunPool connection pool\n-\t */\n-\tpublic UsersManagerImpl(DataSource perunPool) {\n-\t\tthis.jdbc = new JdbcPerunTemplate(perunPool);\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n-\t}\n-\n-\t@Override\n-\tpublic User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where users.id=? \", USER_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new UserNotExistsException(\"user id=\" + id);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where users.id=user_ext_sources.user_id and user_ext_sources.login_ext=? and user_ext_sources.ext_sources_id=? \", USER_MAPPER, userExtSource.getLogin(), userExtSource.getExtSource().getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new UserNotExistsException(\"userExtSource=\" + userExtSource.toString());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users join user_ext_sources on users.id=user_ext_sources.user_id join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\"\n-\t\t\t\t\t+ \" where ext_sources.type=? and user_ext_sources.login_ext=?\", USER_MAPPER, extSourceType, login);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users, members \" +\n-\t\t\t\t\t\"where members.id=? and members.user_id=users.id\", USER_MAPPER, member.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member has to have a corresponding User\", ex);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users, members \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.vo_id=?\", USER_MAPPER, vo.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsers(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\"  from users\", USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, specific_user_users where users.id=specific_user_users.specific_user_id and specific_user_users.status='0' and specific_user_users.user_id=?\", USER_MAPPER, user.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and specific_user_users.specific_user_id=? \" +\n-\t\t\t\t\t\" and specific_user_users.type=?\", USER_MAPPER, specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException {\n-\t\ttry {\n-\t\t\tint numAffected = jdbc.update(\"delete from specific_user_users where user_id=? and specific_user_id=? and specific_user_users.type=?\",\n-\t\t\t\t\tuser.getId(), specificUser.getId(),specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t\tif(numAffected == 0) throw new SpecificUserOwnerAlreadyRemovedException(\"SpecificUser-Owner: \" + user + \" , SpecificUser: \" + specificUser);\n-\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into specific_user_users(user_id,specific_user_id,status,created_by_uid,modified_at,type) values (?,?,'0',?,\" + Compatibility.getSysdate() + \",?)\",\n-\t\t\t\t\tuser.getId(), specificUser.getId(), sess.getPerunPrincipal().getUserId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update specific_user_users set status='0', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\",\n-\t\t\t\t\tsess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t} catch (RuntimeException er) {\n-\t\t\tthrow new InternalErrorException(er);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update specific_user_users set status='1', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\",\n-\t\t\t\t\tsess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t} catch (RuntimeException er) {\n-\t\t\tthrow new InternalErrorException(er);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from specific_user_users where user_id=? and specific_user_id=? and type=?\",\n-\t\t\t\t\tuser.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Ownership between user \" + user + \" and specificUser \" + specificUser +  \" exists more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn false;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\"  from users where users.service_acc='1' or users.sponsored_acc='1'\", USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUser(PerunSession sess, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n-\t\ttry {\n-\t\t\t// delete all relations like  user -> sponsor -> service\n-\t\t\tjdbc.update(\"delete from specific_user_users where specific_user_id=? or user_id=?\", user.getId(), user.getId());\n-\t\t\tint numAffected = jdbc.update(\"delete from users where id=?\", user.getId());\n-\t\t\tif(numAffected == 0) {\n-\t\t\t\tif (user.isSpecificUser()) throw new SpecificUserAlreadyRemovedException(\"SpecificUser: \" + user);\n-\t\t\t\tthrow new UserAlreadyRemovedException(\"User: \" + user);\n-\t\t\t}\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User createUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint newId = Utils.getNewId(jdbc, \"users_id_seq\");\n-\t\t\tchar serviceAcc = '0';\n-\t\t\tchar sponsoredAcc = '0';\n-\t\t\tif (user.isServiceUser()) {\n-\t\t\t\tserviceAcc = '1';\n-\t\t\t}\n-\t\t\tif (user.isSponsoredUser()) {\n-\t\t\t\tsponsoredAcc = '1';\n-\t\t\t}\n-\t\t\tjdbc.update(\"insert into users(id,first_name,last_name,middle_name,title_before,title_after,created_by,modified_by,service_acc,sponsored_acc,created_by_uid,modified_by_uid)\" +\n-\t\t\t\t\t\" values (?,?,?,?,?,?,?,?,?,?,?,?)\", newId, user.getFirstName(), user.getLastName(), user.getMiddleName(),\n-\t\t\t\t\tuser.getTitleBefore(), user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), \"\" + serviceAcc, \"\" + sponsoredAcc,\n-\t\t\t\t\tsess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tuser.setId(newId);\n-\n-\t\t\treturn user;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User setSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tif(specificUserType.equals(SpecificUserType.SERVICE)) {\n-\t\t\t\tjdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setServiceUser(true);\n-\t\t\t} else if(specificUserType.equals(SpecificUserType.SPONSORED)) {\n-\t\t\t\tjdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setSponsoredUser(true);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n-\t\t\t}\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic User unsetSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tif(specificUserType.equals(SpecificUserType.SERVICE)) {\n-\t\t\t\tjdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setServiceUser(false);\n-\t\t\t} else if(specificUserType.equals(SpecificUserType.SPONSORED)) {\n-\t\t\t\tjdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setSponsoredUser(false);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n-\t\t\t}\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic User updateUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tUser userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n-\n-\t\t\tif (userDb == null) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Updating non existing user\");\n-\t\t\t}\n-\n-\t\t\tif ((user.getFirstName() != null && !user.getFirstName().equals(userDb.getFirstName())) ||\n-\t\t\t\t\t\t\t(user.getFirstName() == null && userDb.getFirstName() != null)) {\n-\t\t\t\tjdbc.update(\"update users set first_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getFirstName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setFirstName(user.getFirstName());\n-\t\t\t}\n-\t\t\tif (user.getLastName() != null && !user.getLastName().equals(userDb.getLastName())) {\n-\t\t\t\tjdbc.update(\"update users set last_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getLastName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setLastName(user.getLastName());\n-\t\t\t}\n-\t\t\tif ((user.getMiddleName() != null && !user.getMiddleName().equals(userDb.getMiddleName())) ||\n-\t\t\t\t\t\t\t(user.getMiddleName() == null && userDb.getMiddleName() != null)) {\n-\t\t\t\tjdbc.update(\"update users set middle_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getMiddleName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setMiddleName(user.getMiddleName());\n-\t\t\t}\n-\t\t\tif ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) ||\n-\t\t\t\t\t\t\t(user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n-\t\t\t\tjdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleBefore(user.getTitleBefore());\n-\t\t\t}\n-\t\t\tif ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) ||\n-\t\t\t\t\t\t\t(user.getTitleAfter() == null && userDb.getTitleAfter() != null)) {\n-\t\t\t\tjdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleAfter(user.getTitleAfter());\n-\t\t\t}\n-\n-\t\t\treturn userDb;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User updateNameTitles(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tUser userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n-\n-\t\t\tif (userDb == null) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Updating titles for non existing user\");\n-\t\t\t}\n-\n-\t\t\t// changed condition to updateUser case to handle: fill, change and remove\n-\n-\t\t\tif ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) ||\n-\t\t\t\t\t(user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n-\t\t\t\tjdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleBefore(user.getTitleBefore());\n-\t\t\t}\n-\t\t\tif ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) ||\n-\t\t\t\t\t((user.getTitleAfter() == null && userDb.getTitleAfter() != null))) {\n-\t\t\t\tjdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleAfter(user.getTitleAfter());\n-\t\t\t}\n-\n-\t\t\treturn userDb;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update user_ext_sources set last_access=\" + Compatibility.getSysdate() + \" where id=?\", userExtSource.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n-\t\ttry {\n-\t\t\tUserExtSource userExtSourceDb = jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n-\t\t\t\t\t\" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, userExtSource.getId());\n-\n-\t\t\tif (userExtSourceDb == null) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Updating non existing userExtSource\");\n-\t\t\t}\n-\n-\t\t\tif (userExtSource.getLoa() != userExtSourceDb.getLoa()) {\n-\t\t\t\tjdbc.update(\"update user_ext_sources set loa=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuserExtSource.getLoa(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n-\t\t\t}\n-\t\t\tif (userExtSource.getLogin() != null && !userExtSourceDb.getLogin().equals(userExtSource.getLogin())) {\n-\t\t\t\ttry {\n-\t\t\t\t\tjdbc.update(\"update user_ext_sources set login_ext=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\tuserExtSource.getLogin(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n-\t\t\t\t} catch (DuplicateKeyException ex) {\n-\t\t\t\t\tthrow new UserExtSourceExistsException(\"UES with same login already exists: \" + userExtSource);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn userExtSource;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tUtils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n-\n-\t\t\tint ueaId = Utils.getNewId(jdbc, \"user_ext_sources_id_seq\");\n-\n-\t\t\tlog.trace(\"Adding new user ext source: ueaId {}, user.getId() {}, userExtSource.getLogin() {}, userExtSource.getLoa() {}, userExtSource.getExtSource().getId() {}, \" +\n-\t\t\t\t\t\"sess.getPerunPrincipal().getActor() {}, sess.getPerunPrincipal().getActor() {}, \" +\n-\t\t\t\t\t\"sess.getPerunPrincipal().getUser().getId() {}, sess.getPerunPrincipal().getUser().getId() {}\", new Object[]{ueaId, user.getId(), userExtSource.getLogin(),\n-\t\t\t\t\t\tuserExtSource.getLoa(), userExtSource.getExtSource().getId(),\n-\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(),\n-\t\t\t\tsess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId()});\n-\t\t\tjdbc.update(\"insert into user_ext_sources (id, user_id, login_ext, loa, ext_sources_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\",\n-\t\t\t\t\tueaId, user.getId(), userExtSource.getLogin(), userExtSource.getLoa(), userExtSource.getExtSource().getId(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\n-\t\t\tuserExtSource.setId(ueaId);\n-\t\t\tuserExtSource.setUserId(user.getId());\n-\n-\t\t\treturn userExtSource;\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t        \" from user_ext_sources left join ext_sources \" +\n-\t\t\t\t\t\" on user_ext_sources.ext_sources_id=ext_sources.id \" +\n-\t\t\t\t\t\" where ext_sources.id=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, source.getId(), extLogin);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new UserExtSourceNotExistsException(\"ExtSource: \" + source + \" for extLogin \" + extLogin, e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//get now date\n-\t\tLocalDate date = LocalDate.now();\n-\t\tdate = date.minusMonths(MAX_OLD_OF_ACTIVE_USER_EXTSOURCE);\n-\n-\t\ttry {\n-\t\t\tString query = \"select \" + userExtSourceMappingSelectQuery + \", \" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where \" +\n-\t\t\t\t\t\" user_ext_sources.user_id=? and \" +\n-\t\t\t\t\t\" user_ext_sources.last_access > \" + Compatibility.toDate(\"'\" + date + \"'\", \"'YYYY-MM-DD'\");\n-\n-\t\t\treturn jdbc.query(query, USEREXTSOURCE_MAPPER, user.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<>();\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n-\t\t\t\t\t\t\t\" ext_sources.type=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, extType, extLogin);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<UserExtSource>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n-\t\t\t\t\t\" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new UserExtSourceNotExistsException(e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t        \" FROM user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\" +\n-\t\t\t        \" WHERE user_ext_sources.user_id=?\", USEREXTSOURCE_MAPPER, user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n-\t\ttry {\n-\t\t\tint numAffected = jdbc.update(\"delete from user_ext_sources where id=?\", userExtSource.getId());\n-\t\t\tif(numAffected == 0) throw new UserExtSourceAlreadyRemovedException(\"User: \" + user + \" , UserExtSource: \" + userExtSource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from user_ext_sources where user_id=?\",user.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" +\n-\t\t\t\t\t\t\t\" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" +\n-\t\t\t\t\t\t\t\" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" +\n-\t\t\t\t\t\t\t\" join members on groups_members.member_id=members.id where members.user_id=?) \" +\n-\t\t\t\t\t\t\t\" and authz.role_id=(select id from roles where roles.name=?))) \",\n-\t\t\t\t\tGroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" +\n-\t\t\t\t\t\t\t\" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" +\n-\t\t\t\t\t\t\t\" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" +\n-\t\t\t\t\t\t\t\" join members on groups_members.member_id=members.id where members.user_id=?) \" +\n-\t\t\t\t\t\t\t\" and authz.role_id=(select id from roles where roles.name=?))) and groups.vo_id=? \",\n-\t\t\t\t\tGroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName(), vo.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from authz join vos on authz.vo_id=vos.id \" +\n-\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n-\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\" where (authz.user_id=? or members.user_id=?) and authz.role_id=(select id from roles where name=?)\",\n-\t\t\t\t\tVosManagerImpl.VO_MAPPER, user.getId(), user.getId(), Role.VOADMIN.getRoleName());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Vo>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from users join members on users.id=members.user_id, vos where \" +\n-\t\t\t\t\t\"users.id=? and members.vo_id=vos.id\", VosManagerImpl.VO_MAPPER, user.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\t// If user is not member of any vo, just return empty list\n-\t\t\treturn new ArrayList<Vo>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values where \" +\n-\t\t\t\t\t\" user_attr_values.attr_value=? and users.id=user_attr_values.user_id and user_attr_values.attr_id=?\",\n-\t\t\t\t\tUSER_MAPPER, BeansUtils.attributeValueToString(attribute), attribute.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefinition, String attributeValue) throws InternalErrorException {\n-\t\tString value = \"\";\n-\t\tString operator = \"=\";\n-\t\tif (attributeDefinition.getType().equals(String.class.getName())) {\n-\t\t\tvalue = attributeValue.trim();\n-\t\t\toperator = \"=\";\n-\t\t} else if (attributeDefinition.getType().equals(Integer.class.getName())) {\n-\t\t\tvalue = attributeValue.trim();\n-\t\t\toperator = \"=\";\n-\t\t}  else if (attributeDefinition.getType().equals(Boolean.class.getName())) {\n-\t\t\tvalue = attributeValue.trim();\n-\t\t\toperator = \"=\";\n-\t\t} else if (attributeDefinition.getType().equals(ArrayList.class.getName())) {\n-\t\t\tvalue = \"%\" + attributeValue.trim() + \"%\";\n-\t\t\toperator = \"like\";\n-\t\t} else if (attributeDefinition.getType().equals(LinkedHashMap.class.getName())) {\n-\t\t\tvalue = \"%\" + attributeValue.trim() + \"%\";\n-\t\t\toperator = \"like\";\n-\t\t}\n-\n-\t\t// FIXME - this doesn't work for map attributes, since they are not in attr_value column\n-\t\t// if fixed, we could add LargeString and LargeArrayList\n-\n-\t\tString query = \"select \" + userMappingSelectQuery + \" from users, user_attr_values where \" +\n-\t\t\t\" user_attr_values.attr_value \" + operator + \" :value and users.id=user_attr_values.user_id and user_attr_values.attr_id=:attr_id\";\n-\n-\t\tMapSqlParameterSource namedParams = new MapSqlParameterSource();\n-\t\tnamedParams.addValue(\"value\", value);\n-\t\tnamedParams.addValue(\"attr_id\", attributeDefinition.getId());\n-\n-\t\ttry {\n-\t\t\treturn namedParameterJdbcTemplate.query(query, namedParams, USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tSet<User> users = new HashSet<User>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" +\n-\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByName(sess, searchString));\n-\n-\t\treturn new ArrayList<User>(users);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tSet<User> users = new HashSet<User>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" +\n-\t\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByExactName(sess, searchString));\n-\n-\t\treturn new ArrayList<User>(users);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tif (searchString == null || searchString.isEmpty()) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t}\n-\n-\t\t// Convert to lower case\n-\t\tsearchString = searchString.toLowerCase();\n-\t\tlog.debug(\"Search string '{}' converted into the lowercase\", searchString);\n-\n-\t\t// Convert to ASCII\n-\t\tsearchString = Utils.utftoasci(searchString);\n-\t\tlog.debug(\"Search string '{}' converted into the ASCII\", searchString);\n-\n-\t\t// remove spaces from the search string\n-\t\tsearchString = searchString.replaceAll(\" \", \"\");\n-\n-\t\tlog.debug(\"Searching users by name using searchString '{}'\", searchString);\n-\n-\t\t// the searchString is already lower cased and converted into the ASCII\n-\t\ttry {\n-\t\t\tif (Compatibility.isOracle()) {\n-\t\t\t\t// Search users' names\n-\t\t\t\treturn (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" +\n-\t\t\t\t\t\t\t\"where lower(\"+Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\")+\") like '%' || ? || '%'\",\n-\t\t\t\t\t\t\tUSER_MAPPER, searchString));\n-\t\t\t} else if (Compatibility.isPostgreSql()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n-\t\t\t\t\t\t\"where strpos(lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\"),?) > 0\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else if (Compatibility.isHSQLDB()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n-\t\t\t\t\t\t\t\t\"where lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\") like '%' || ? || '%'\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n-\n-\t\tif (titleBefore.isEmpty()) {\n-\t\t\ttitleBefore = \"%\";\n-\t\t}\n-\t\tif (firstName.isEmpty()) {\n-\t\t\tfirstName = \"%\";\n-\t\t}\n-\t\tif (middleName.isEmpty()) {\n-\t\t\tmiddleName = \"%\";\n-\t\t}\n-\t\tif (lastName.isEmpty()) {\n-\t\t\tlastName = \"%\";\n-\t\t}\n-\t\tif (titleAfter.isEmpty()) {\n-\t\t\ttitleAfter = \"%\";\n-\t\t}\n-\n-\t\t// the searchString is already lower cased\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" +\n-\t\t\t\t\t\" where coalesce(lower(\"+Compatibility.convertToAscii(\"users.title_before\")+\"), '%') like ? and lower(\"+Compatibility.convertToAscii(\"users.first_name\")+\") like ? and coalesce(lower(\"+Compatibility.convertToAscii(\"users.middle_name\")+\"),'%') like ? and \" +\n-\t\t\t\t\t\"lower(\"+Compatibility.convertToAscii(\"users.last_name\")+\") like ? and coalesce(lower(\"+Compatibility.convertToAscii(\"users.title_after\")+\"), '%') like ?\",\n-\t\t\t\t\tUSER_MAPPER, titleBefore, firstName, middleName, lastName, titleAfter);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tif (searchString == null || searchString.isEmpty()) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t}\n-\n-\t\t// Convert to lower case\n-\t\tsearchString = searchString.toLowerCase();\n-\t\tlog.debug(\"Search string '{}' converted into the lowercase\", searchString);\n-\n-\t\t// Convert to ASCII\n-\t\tsearchString = Utils.utftoasci(searchString);\n-\t\tlog.debug(\"Search string '{}' converted into the ASCII\", searchString);\n-\n-\t\t// remove spaces from the search string\n-\t\tsearchString = searchString.replaceAll(\" \", \"\");\n-\n-\t\tlog.debug(\"Searching users by name using searchString '{}'\", searchString);\n-\n-\t\t// the searchString is already lower cased and converted into the ASCII\n-\t\ttry {\n-\t\t\tif (Compatibility.isOracle()) {\n-\t\t\t\t// Search users' names\n-\t\t\t\treturn (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \"\n-\t\t\t\t\t\t\t\t+ \"where lower(\" + Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\") + \")=?\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString));\n-\t\t\t} else if (Compatibility.isPostgreSql()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users \"\n-\t\t\t\t\t\t\t\t+ \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=?\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else if (Compatibility.isHSQLDB()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n-\t\t\t\t\t\t\t\t\"where lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\")=?\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName());\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"User \" + user + \" is PERUNADMIN more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn false;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean userExists(PerunSession sess, User user) throws InternalErrorException {\n-\t\tUtils.notNull(user, \"user\");\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from users where id=? and service_acc=? and sponsored_acc=?\", user.getId(), user.isServiceUser() ? \"1\" : \"0\", user.isSponsoredUser() ? \"1\" : \"0\");\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"User \" + user + \" exists more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\tif(!userExtSourceExists(sess, userExtSource)) throw new UserExtSourceNotExistsException(\"UserExtSource: \" + userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where id=?\", id);\n-\t\t\tif (numberOfExistences == 0) throw new UserExtSourceNotExistsException(\"UserExtSource with ID=\" + id + \" doesn't exists.\");\n-\t\t\tif (numberOfExistences > 1) throw new ConsistencyErrorException(\"UserExtSource wit ID=\" + id + \" exists more than once.\");\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n-\t\tif(isLoginReserved(sess, namespace, login)) throw new AlreadyReservedLoginException(namespace, login);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException {\n-\t\tUtils.notNull(namespace, \"loginNamespace\");\n-\t\tUtils.notNull(login, \"userLogin\");\n-\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from application_reserved_logins where namespace=? and login=?\",\n-\t\t\t\t\tnamespace, login);\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Login \" + login + \" in namespace \" + namespace + \" is reserved more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\tUtils.notNull(userExtSource, \"userExtSource\");\n-\t\tUtils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n-\t\tUtils.notNull(userExtSource.getExtSource(), \"userExtSource.getExtSource\");\n-\n-\t\ttry {\n-\n-\t\t\t// check by ext identity (login/ext source ID)\n-\t\t\tif (userExtSource.getUserId() >= 0) {\n-\t\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=? and user_id=?\",\n-\t\t\t\t\t\tuserExtSource.getLogin(), userExtSource.getExtSource().getId(), userExtSource.getUserId());\n-\t\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-\t\t\t} else {\n-\t\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=?\",\n-\t\t\t\t\t\tuserExtSource.getLogin(), userExtSource.getExtSource().getId());\n-\t\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n-\t\t// If usersIds is empty, we can immediately return empty results\n-\t\tif (usersIds.size() == 0) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t}\n-\n-\t\ttry {\n-\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n-\t\t\t        USER_MAPPER);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users where \" +\n-\t\t\t\t\t\"users.id not in (select user_id from members) order by last_name, first_name\", USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from cabinet_authorships where userid=?\", user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException {\n-\n-\t\tList<Pair<String, String>> result = new ArrayList<Pair<String,String>>();\n-\n-\t\ttry {\n-\t\t\tList<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Integer mapRow(ResultSet rs, int arg1) throws SQLException {\n-\t\t\t\t\treturn rs.getInt(\"id\");\n-\t\t\t\t}\n-\t\t\t},user.getId());\n-\n-\t\t\tfor (Integer id : ids) {\n-\n-\t\t\t\tresult.addAll(jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n-\t\t\t\t\t\treturn new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n-\t\t\t\t\t}\n-\t\t\t\t}, id));\n-\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\treturn result;\n-\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUsersReservedLogins(User user) throws InternalErrorException {\n-\n-\t\ttry {\n-\t\t\tList<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Integer mapRow(ResultSet rs, int arg1)\n-\t\t\t\tthrows SQLException {\n-\t\t\t\treturn rs.getInt(\"id\");\n-\t\t\t\t}\n-\t\t\t},user.getId());\n-\n-\t\t\tfor (Integer id : ids) {\n-\n-\t\t\t\tjdbc.update(\"delete from application_reserved_logins where app_id=?\", id);\n-\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic int requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException {\n-\n-\t\tint id = Utils.getNewId(jdbc, \"mailchange_id_seq\");\n-\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into mailchange(id, value, user_id, created_by, created_by_uid) values (?,?,?,?,?) \",\n-\t\t\t\t\tid, email, user.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\treturn id;\n-\n-\t}\n-\n-\t@Override\n-\tpublic String getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException {\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n \n-\t\tint changeId = Integer.parseInt(i, Character.MAX_RADIX);\n+        return result;\n \n-\t\tint validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n+    }\n \n-\t\t// get new email if possible\n-\t\tString newEmail = \"\";\n-\t\ttry {\n-\t\t\tif (Compatibility.isPostgreSql()) {\n-\t\t\t\t// postgres\n-\t\t\t\tnewEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (now() - interval '\"+validWindow+\" hours'))\", String.class, changeId, user.getId());\n-\t\t\t} else {\n-\t\t\t\t// oracle\n-\t\t\t\tnewEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\"+validWindow+\"' HOUR))\", String.class, changeId, user.getId());\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new InternalErrorException(\"Preferred mail change request with ID=\"+changeId+\" doesn't exists or isn't valid anymore.\");\n-\t\t}\n+    @Override\n+    public void deleteUsersReservedLogins(User user) throws InternalErrorException {\n \n-\t\treturn newEmail;\n+        try {\n+            List<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n+                @Override\n+                public Integer mapRow(ResultSet rs, int arg1)\n+                        throws SQLException {\n+                    return rs.getInt(\"id\");\n+                }\n+            }, user.getId());\n+\n+            for (Integer id : ids) {\n \n-\t}\n+                jdbc.update(\"delete from application_reserved_logins where app_id=?\", id);\n \n-\t@Override\n-\tpublic void removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException {\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n \n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from mailchange where user_id=?\", user.getId());\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to remove preferred mail change requests for user: \"+user, ex);\n-\t\t}\n+    }\n \n-\t}\n+    @Override\n+    public int requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException {\n \n-\t@Override\n-\tpublic List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException {\n+        int id = Utils.getNewId(jdbc, \"mailchange_id_seq\");\n \n-\t\tint validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n+        try {\n+            jdbc.update(\"insert into mailchange(id, value, user_id, created_by, created_by_uid) values (?,?,?,?,?) \",\n+                    id, email, user.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n \n-\t\ttry {\n-\t\t\tif (Compatibility.isPostgreSql()) {\n+        return id;\n \n-\t\t\t\treturn jdbc.query(\"select value from mailchange where user_id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"value\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId());\n+    }\n \n-\t\t\t} else {\n+    @Override\n+    public String getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException {\n \n-\t\t\t\treturn jdbc.query(\"select value from mailchange where user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\"+validWindow+\"' HOUR))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"value\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId());\n+        int changeId = Integer.parseInt(i, Character.MAX_RADIX);\n \n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<String>();\n-\t\t}\n+        int validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n+\n+        // get new email if possible\n+        String newEmail = \"\";\n+        try {\n+            if (Compatibility.isPostgreSql()) {\n+                // postgres\n+                newEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", String.class, changeId, user.getId());\n+            } else {\n+                // oracle\n+                newEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\" + validWindow + \"' HOUR))\", String.class, changeId, user.getId());\n+            }\n+        } catch (EmptyResultDataAccessException ex) {\n+            throw new InternalErrorException(\"Preferred mail change request with ID=\" + changeId + \" doesn't exists or isn't valid anymore.\");\n+        }\n \n-\t}\n+        return newEmail;\n \n-\t@Override\n-\tpublic String loadPasswordResetRequest(User user, int requestId) throws InternalErrorException {\n+    }\n \n-\t\tint validWindow = BeansUtils.getCoreConfig().getPwdresetValidationWindow();\n+    @Override\n+    public void removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException {\n \n-\t\tString result = \"\";\n-\t\ttry {\n-\t\t\tif (Compatibility.isPostgreSql()) {\n+        try {\n+            jdbc.update(\"delete from mailchange where user_id=?\", user.getId());\n+        } catch (Exception ex) {\n+            throw new InternalErrorException(\"Unable to remove preferred mail change requests for user: \" + user, ex);\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException {\n+\n+        int validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n+\n+        try {\n+            if (Compatibility.isPostgreSql()) {\n+\n+                return jdbc.query(\"select value from mailchange where user_id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n+                    @Override\n+                    public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+                        return resultSet.getString(\"value\");\n+                    }\n+                }, user.getId());\n+\n+            } else {\n+\n+                return jdbc.query(\"select value from mailchange where user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\" + validWindow + \"' HOUR))\", new RowMapper<String>() {\n+                    @Override\n+                    public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+                        return resultSet.getString(\"value\");\n+                    }\n+                }, user.getId());\n+\n+            }\n+        } catch (EmptyResultDataAccessException ex) {\n+            return new ArrayList<String>();\n+        }\n+\n+    }\n+\n+    @Override\n+    public String loadPasswordResetRequest(User user, int requestId) throws InternalErrorException {\n+\n+        int validWindow = BeansUtils.getCoreConfig().getPwdresetValidationWindow();\n+\n+        String result = \"\";\n+        try {\n+            if (Compatibility.isPostgreSql()) {\n+\n+                result = jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n+                    @Override\n+                    public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+                        return resultSet.getString(\"namespace\");\n+                    }\n+                }, user.getId(), requestId);\n+\n+            } else {\n+\n+                result = jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\" + validWindow + \"' HOUR))\", new RowMapper<String>() {\n+                    @Override\n+                    public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+                        return resultSet.getString(\"namespace\");\n+                    }\n+                }, user.getId(), requestId);\n+\n+            }\n+\n+            jdbc.update(\"delete from pwdreset where user_id=? and id=?\", user.getId(), requestId);\n+            return result;\n+\n+        } catch (EmptyResultDataAccessException ex) {\n+            return result;\n+        }\n+\n+    }\n+\n+    @Override\n+    public void removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException {\n+\n+        try {\n+            jdbc.update(\"delete from pwdreset where user_id=?\", user.getId());\n+        } catch (Exception ex) {\n+            throw new InternalErrorException(\"Unable to remove password reset requests for user: \" + user, ex);\n+        }\n+\n+    }\n+\n+    @Override\n+    public int getUsersCount(PerunSession sess) throws InternalErrorException {\n+        try {\n+            return jdbc.queryForInt(\"select count(*) from users\");\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+        if (!userExists(sess, user)) {\n+            throw new UserNotExistsException(\"User: \" + user);\n+        }\n+    }\n+\n+    @Override\n+    public Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n+\n+        PasswordManagerModule module = getPasswordManagerModule(session, namespace);\n+        if (module != null) {\n+            return module.generateAccount(session, parameters);\n+        }\n+        return null;\n+\n+    }\n+\n+    @Override\n+    public PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n+\n+        if (namespace == null || namespace.isEmpty()) {\n+            throw new InternalErrorException(\"Login-namespace to get password manager module must be specified.\");\n+        }\n+\n+        namespace = namespace.replaceAll(\"[^A-Za-z0-9]\", \"\");\n+        namespace = Character.toUpperCase(namespace.charAt(0)) + namespace.substring(1);\n+\n+        try {\n+            return (PasswordManagerModule) Class.forName(\"cz.metacentrum.perun.core.impl.modules.pwdmgr.\" + namespace + \"PasswordManagerModule\").newInstance();\n+        } catch (Exception ex) {\n+            throw new InternalErrorException(\"Unable to instantiate password manager module.\", ex);\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n+        try {\n+            return jdbc.query(\"SELECT \" + userMappingSelectQuery + \" FROM users JOIN members_sponsored ms ON (users.id=ms.sponsor_id)\" +\n+                    \"WHERE ms.active='1' AND ms.sponsored_id=? \", USER_MAPPER, sponsoredMember.getId());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public void deleteSponsorLinks(PerunSession sess, User sponsor) throws InternalErrorException {\n+        try {\n+            jdbc.update(\"DELETE FROM members_sponsored WHERE sponsor_id=?\", sponsor.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws InternalErrorException {\n+        try {\n+            StringBuilder sb = new StringBuilder(\"SELECT DISTINCT \" + userMappingSelectQuery + \" FROM users \" +\n+                    \"  JOIN user_ext_sources ues ON users.id = ues.user_id \" +\n+                    \"  JOIN user_ext_source_attr_values v ON ues.id = v.user_ext_source_id\" +\n+                    \"  JOIN attr_names a ON (v.attr_id = a.id AND a.attr_name=?)\" +\n+                    \"  WHERE v.attr_value LIKE ? \");\n+            List<String> args = new ArrayList<>();\n+            args.add(attributeName);\n+            args.add(\"%\" + valueEnd);\n+            for (String excl : excludeValueEnds) {\n+                sb.append(\" AND v.attr_value NOT LIKE ?\");\n+                args.add(\"%\" + excl);\n+            }\n+            return jdbc.query(sb.toString(), USER_MAPPER, args.toArray());\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n \n-\t\t\t\tresult = jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"namespace\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId(), requestId);\n-\n-\t\t\t} else {\n-\n-\t\t\t\tresult =  jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\"+validWindow+\"' HOUR))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"namespace\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId(), requestId);\n-\n-\t\t\t}\n-\n-\t\t\tjdbc.update(\"delete from pwdreset where user_id=? and id=?\", user.getId(), requestId);\n-\t\t\treturn result;\n-\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn result;\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from pwdreset where user_id=?\", user.getId());\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to remove password reset requests for user: \"+user, ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic int getUsersCount(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(*) from users\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tif(!userExists(sess, user)) throw new UserNotExistsException(\"User: \" + user);\n-\t}\n-\n-\t@Override\n-\tpublic Map<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n-\n-\t\tPasswordManagerModule module = getPasswordManagerModule(session, namespace);\n-\t\tif (module != null) {\n-\t\t\treturn module.generateAccount(session, parameters);\n-\t\t}\n-\t\treturn null;\n-\n-\t}\n-\n-\t@Override\n-\tpublic PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n-\n-\t\tif (namespace == null || namespace.isEmpty()) throw new InternalErrorException(\"Login-namespace to get password manager module must be specified.\");\n-\n-\t\tnamespace = namespace.replaceAll(\"[^A-Za-z0-9]\", \"\");\n-\t\tnamespace = Character.toUpperCase(namespace.charAt(0)) + namespace.substring(1);\n-\n-\t\ttry {\n-\t\t\treturn (PasswordManagerModule) Class.forName(\"cz.metacentrum.perun.core.impl.modules.pwdmgr.\" + namespace + \"PasswordManagerModule\").newInstance();\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to instantiate password manager module.\", ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + userMappingSelectQuery + \" FROM users JOIN members_sponsored ms ON (users.id=ms.sponsor_id)\" +\n-\t\t\t\t\t\"WHERE ms.active='1' AND ms.sponsored_id=? \", USER_MAPPER, sponsoredMember.getId());\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteSponsorLinks(PerunSession sess, User sponsor) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"DELETE FROM members_sponsored WHERE sponsor_id=?\", sponsor.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tStringBuilder sb = new StringBuilder(\"SELECT DISTINCT \" + userMappingSelectQuery + \" FROM users \" +\n-\t\t\t\t\t\"  JOIN user_ext_sources ues ON users.id = ues.user_id \" +\n-\t\t\t\t\t\"  JOIN user_ext_source_attr_values v ON ues.id = v.user_ext_source_id\" +\n-\t\t\t\t\t\"  JOIN attr_names a ON (v.attr_id = a.id AND a.attr_name=?)\" +\n-\t\t\t\t\t\"  WHERE v.attr_value LIKE ? \");\n-\t\t\tList<String> args = new ArrayList<>();\n-\t\t\targs.add(attributeName);\n-\t\t\targs.add(\"%\"+valueEnd);\n-\t\t\tfor(String excl : excludeValueEnds) {\n-\t\t\t\tsb.append(\" AND v.attr_value NOT LIKE ?\");\n-\t\t\t\targs.add(\"%\"+excl);\n-\t\t\t}\n-\t\t\treturn jdbc.query(sb.toString(), USER_MAPPER, args.toArray());\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n+    }\n }\n",
            "diff_size": 2541
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/9/UsersManagerImpl.java\nindex fde4406b2c2..7f79d1f1cb3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/9/UsersManagerImpl.java\n@@ -13,7 +13,6 @@ import org.springframework.jdbc.core.ResultSetExtractor;\n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n-\n import javax.sql.DataSource;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n@@ -28,1349 +27,1152 @@ import java.util.regex.Pattern;\n  * @author Slavek Licehammer glory@ics.muni.cz\n  * @author Sona Mastrakova\n  */\n+\n+\n public class UsersManagerImpl implements UsersManagerImplApi {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(UsersManagerImpl.class);\n-\n-\t// time window size for mail validation if not taken from peruns configuration file\n-\tprivate final static int VALIDATION_ALLOWED_HOURS = 6;\n-\n-\t// If user extSource is older than 'number' months, it is not defined as ACTIVE in methods\n-\t// INACTIVE userExtSources are skipped in counting max loa for user\n-\tprivate static final int MAX_OLD_OF_ACTIVE_USER_EXTSOURCE = 13;\n-\n-\t// Part of the SQL script used for getting the User object\n-\tprotected final static String userMappingSelectQuery = \"users.id as users_id, users.first_name as users_first_name, users.last_name as users_last_name, \" +\n-\t\t\"users.middle_name as users_middle_name, users.title_before as users_title_before, users.title_after as users_title_after, \" +\n-\t\t\"users.created_at as users_created_at, users.created_by as users_created_by, users.modified_by as users_modified_by, users.modified_at as users_modified_at, \" +\n-\t\t\"users.sponsored_acc as users_sponsored_acc, users.service_acc as users_service_acc, users.created_by_uid as users_created_by_uid, users.modified_by_uid as users_modified_by_uid\";\n-\n-\tprotected final static String userExtSourceMappingSelectQuery = \"user_ext_sources.id as user_ext_sources_id, user_ext_sources.login_ext as user_ext_sources_login_ext, \" +\n-\t\t\"user_ext_sources.user_id as user_ext_sources_user_id, user_ext_sources.loa as user_ext_sources_loa, user_ext_sources.created_at as user_ext_sources_created_at, user_ext_sources.created_by as user_ext_sources_created_by, \" +\n-\t\t\"user_ext_sources.modified_by as user_ext_sources_modified_by, user_ext_sources.modified_at as user_ext_sources_modified_at, \" +\n-\t\t\"user_ext_sources.created_by_uid as ues_created_by_uid, user_ext_sources.modified_by_uid as ues_modified_by_uid\";\n-\n-\tprivate static Map<String, Pattern> userExtSourcePersistentPatterns;\n-\n-\tstatic {\n-\t\t// Prepare userExtSourcePersistentPatterns for matching regex from perun property file.\n-\t\t// It is done in advance because of performance.\n-\t\tuserExtSourcePersistentPatterns = new HashMap<>();\n-\t\tString persistentConfig = BeansUtils.getCoreConfig().getUserExtSourcesPersistent();\n-\t\tfor (String extSource : persistentConfig.split(\";\")) {\n-\t\t\tString[] extSourceTuple = extSource.split(\",\", 2);\n-\t\t\tif (extSourceTuple.length > 1) {\n-\t\t\t\tuserExtSourcePersistentPatterns.put(extSourceTuple[0], Pattern.compile(extSourceTuple[1]));\n-\t\t\t} else {\n-\t\t\t\tuserExtSourcePersistentPatterns.put(extSource, Pattern.compile(\".*\"));\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate JdbcPerunTemplate jdbc;\n-\tprivate NamedParameterJdbcTemplate  namedParameterJdbcTemplate;\n-\n-\tprotected static final RowMapper<User> USER_MAPPER = new RowMapper<User>() {\n-\t\t@Override\n-\t\tpublic User mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\treturn new User(rs.getInt(\"users_id\"), rs.getString(\"users_first_name\"), rs.getString(\"users_last_name\"),\n-\t\t\t\t\trs.getString(\"users_middle_name\"), rs.getString(\"users_title_before\"), rs.getString(\"users_title_after\"),\n-\t\t\t\t\trs.getString(\"users_created_at\"), rs.getString(\"users_created_by\"), rs.getString(\"users_modified_at\"), rs.getString(\"users_modified_by\"), rs.getBoolean(\"users_service_acc\"),\n-\t\t\t\t\trs.getBoolean(\"users_sponsored_acc\"),\n-\t\t\t\t\trs.getInt(\"users_created_by_uid\") == 0 ? null : rs.getInt(\"users_created_by_uid\"), rs.getInt(\"users_modified_by_uid\") == 0 ? null : rs.getInt(\"users_modified_by_uid\"));\n-\t\t}\n-\t};\n-\n-\tprivate static final RowMapper<UserExtSource> USEREXTSOURCE_MAPPER = new RowMapper<UserExtSource>() {\n-\t\t@Override\n-\t\tpublic UserExtSource mapRow(ResultSet rs, int i) throws SQLException {\n-\t\t\tExtSource extSource = new ExtSource();\n-\t\t\textSource.setId(rs.getInt(\"ext_sources_id\"));\n-\t\t\textSource.setName(rs.getString(\"ext_sources_name\"));\n-\t\t\textSource.setType(rs.getString(\"ext_sources_type\"));\n-\t\t\textSource.setCreatedAt(rs.getString(\"ext_sources_created_at\"));\n-\t\t\textSource.setCreatedBy(rs.getString(\"ext_sources_created_by\"));\n-\t\t\textSource.setModifiedAt(rs.getString(\"ext_sources_modified_at\"));\n-\t\t\textSource.setModifiedBy(rs.getString(\"ext_sources_modified_by\"));\n-\t\t\tif(rs.getInt(\"ext_sources_modified_by_uid\") == 0) extSource.setModifiedByUid(null);\n-\t\t\telse extSource.setModifiedByUid(rs.getInt(\"ext_sources_modified_by_uid\"));\n-\t\t\tif(rs.getInt(\"ext_sources_created_by_uid\") == 0) extSource.setCreatedByUid(null);\n-\t\t\telse extSource.setCreatedByUid(rs.getInt(\"ext_sources_created_by_uid\"));\n-\n-\t\t\tboolean persistent = false;\n-\t\t\tPattern p = userExtSourcePersistentPatterns.get(rs.getString(\"ext_sources_name\"));\n-\t\t\tif (p != null) {\n-\t\t\t\tif (p.matcher(rs.getString(\"user_ext_sources_login_ext\")).matches()) {\n-\t\t\t\t\tpersistent = true;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn new UserExtSource(rs.getInt(\"user_ext_sources_id\"), extSource, rs.getString(\"user_ext_sources_login_ext\"),\n-\t\t\t\t\trs.getInt(\"user_ext_sources_user_id\"), rs.getInt(\"user_ext_sources_loa\"), persistent,\n-\t\t\t\t\trs.getString(\"user_ext_sources_created_at\"), rs.getString(\"user_ext_sources_created_by\"),\n-\t\t\t\t\trs.getString(\"user_ext_sources_modified_at\"), rs.getString(\"user_ext_sources_modified_by\"),\n-\t\t\t\t\trs.getInt(\"ues_created_by_uid\") == 0 ? null : rs.getInt(\"ues_created_by_uid\"),\n-\t\t\t\t\trs.getInt(\"ues_modified_by_uid\") == 0 ? null : rs.getInt(\"ues_modified_by_uid\"));\n-\t\t}\n-\t};\n-\n-        protected static final ResultSetExtractor<List<Pair<User,String>>> USERBLACKLIST_EXTRACTOR = new ResultSetExtractor<List<Pair<User,String>>>(){\n-            @Override\n-            public List<Pair<User,String>> extractData(ResultSet rs) throws SQLException{\n-                List<Pair<User, String>> result = new ArrayList<>();\n \n-                int row = 0;\n-                while(rs.next()){\n-                    result.add(new Pair<User, String>(USER_MAPPER.mapRow(rs, row), rs.getString(\"description\")));\n-                    row++;\n+ private final static Logger log = LoggerFactory.getLogger(UsersManagerImpl.class);\n+\n+ // time window size for mail validation if not taken from peruns configuration file\n+ private final static int VALIDATION_ALLOWED_HOURS = 6;\n+\n+ // If user extSource is older than 'number' months, it is not defined as ACTIVE in methods\n+ // INACTIVE userExtSources are skipped in counting max loa for user\n+ private static final int MAX_OLD_OF_ACTIVE_USER_EXTSOURCE = 13;\n+\n+ // Part of the SQL script used for getting the User object\n+\n+\n+ protected final static String userMappingSelectQuery = \"users.id as users_id, users.first_name as users_first_name, users.last_name as users_last_name, \" + \"users.middle_name as users_middle_name, users.title_before as users_title_before, users.title_after as users_title_after, \" + \"users.created_at as users_created_at, users.created_by as users_created_by, users.modified_by as users_modified_by, users.modified_at as users_modified_at, \" + \"users.sponsored_acc as users_sponsored_acc, users.service_acc as users_service_acc, users.created_by_uid as users_created_by_uid, users.modified_by_uid as users_modified_by_uid\";\n+\n+\n+ protected final static String userExtSourceMappingSelectQuery = \"user_ext_sources.id as user_ext_sources_id, user_ext_sources.login_ext as user_ext_sources_login_ext, \" + \"user_ext_sources.user_id as user_ext_sources_user_id, user_ext_sources.loa as user_ext_sources_loa, user_ext_sources.created_at as user_ext_sources_created_at, user_ext_sources.created_by as user_ext_sources_created_by, \" + \"user_ext_sources.modified_by as user_ext_sources_modified_by, user_ext_sources.modified_at as user_ext_sources_modified_at, \" + \"user_ext_sources.created_by_uid as ues_created_by_uid, user_ext_sources.modified_by_uid as ues_modified_by_uid\";\n+ private static Map<String, Pattern> userExtSourcePersistentPatterns;\n+\n+ static {\n+  // Prepare userExtSourcePersistentPatterns for matching regex from perun property file.\n+  // It is done in advance because of performance.\n+  userExtSourcePersistentPatterns = new HashMap<>();\n+  String persistentConfig = BeansUtils.getCoreConfig().getUserExtSourcesPersistent();\n+  for (String extSource : persistentConfig.split(\";\")) {\n+   String[] extSourceTuple = extSource.split(\",\", 2);\n+   if (extSourceTuple.length > 1) {\n+    userExtSourcePersistentPatterns.put(extSourceTuple[0], Pattern.compile(extSourceTuple[1]));\n+   } else {\n+    userExtSourcePersistentPatterns.put(extSource, Pattern.compile(\".*\"));\n+   }\n+  }\n+ }\n+\n+ private JdbcPerunTemplate jdbc;\n+ private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+\n+ protected static final RowMapper<User> USER_MAPPER = new RowMapper<User>() {\n+  @Override\n+  public User mapRow(ResultSet rs, int i) throws SQLException {\n+   return new User(rs.getInt(\"users_id\"), rs.getString(\"users_first_name\"), rs.getString(\"users_last_name\"), rs.getString(\"users_middle_name\"), rs.getString(\"users_title_before\"), rs.getString(\"users_title_after\"), rs.getString(\"users_created_at\"), rs.getString(\"users_created_by\"), rs.getString(\"users_modified_at\"), rs.getString(\"users_modified_by\"), rs.getBoolean(\"users_service_acc\"), rs.getBoolean(\"users_sponsored_acc\"), rs.getInt(\"users_created_by_uid\") == 0 ? null : rs.getInt(\"users_created_by_uid\"), rs.getInt(\"users_modified_by_uid\") == 0 ? null : rs.getInt(\"users_modified_by_uid\"));\n+  }\n+                                        };\n+ private static final RowMapper<UserExtSource> USEREXTSOURCE_MAPPER = new RowMapper<UserExtSource>() {\n+  @Override\n+  public UserExtSource mapRow(ResultSet rs, int i) throws SQLException {\n+   ExtSource extSource = new ExtSource();\n+   extSource.setId(rs.getInt(\"ext_sources_id\"));\n+   extSource.setName(rs.getString(\"ext_sources_name\"));\n+   extSource.setType(rs.getString(\"ext_sources_type\"));\n+   extSource.setCreatedAt(rs.getString(\"ext_sources_created_at\"));\n+   extSource.setCreatedBy(rs.getString(\"ext_sources_created_by\"));\n+   extSource.setModifiedAt(rs.getString(\"ext_sources_modified_at\"));\n+   extSource.setModifiedBy(rs.getString(\"ext_sources_modified_by\"));\n+   if (rs.getInt(\"ext_sources_modified_by_uid\") == 0) extSource.setModifiedByUid(null);\n+   else extSource.setModifiedByUid(rs.getInt(\"ext_sources_modified_by_uid\"));\n+   if (rs.getInt(\"ext_sources_created_by_uid\") == 0) extSource.setCreatedByUid(null);\n+   else extSource.setCreatedByUid(rs.getInt(\"ext_sources_created_by_uid\"));\n+\n+   boolean persistent = false;\n+   Pattern p = userExtSourcePersistentPatterns.get(rs.getString(\"ext_sources_name\"));\n+   if (p != null) {\n+    if (p.matcher(rs.getString(\"user_ext_sources_login_ext\")).matches()) {\n+     persistent = true;\n+    }\n+   }\n+\n+   return new UserExtSource(rs.getInt(\"user_ext_sources_id\"), extSource, rs.getString(\"user_ext_sources_login_ext\"), rs.getInt(\"user_ext_sources_user_id\"), rs.getInt(\"user_ext_sources_loa\"), persistent, rs.getString(\"user_ext_sources_created_at\"), rs.getString(\"user_ext_sources_created_by\"), rs.getString(\"user_ext_sources_modified_at\"), rs.getString(\"user_ext_sources_modified_by\"), rs.getInt(\"ues_created_by_uid\") == 0 ? null : rs.getInt(\"ues_created_by_uid\"), rs.getInt(\"ues_modified_by_uid\") == 0 ? null : rs.getInt(\"ues_modified_by_uid\"));\n+  }\n+                                               };\n+\n+\n+ protected static final ResultSetExtractor<List<Pair<User, String>>> USERBLACKLIST_EXTRACTOR = new ResultSetExtractor<List<Pair<User, String>>>() {\n+  @Override\n+  public List<Pair<User, String>> extractData(ResultSet rs) throws SQLException {\n+   List<Pair<User, String>> result = new ArrayList<>();\n+   int row = 0;\n+   while (rs.next()) {\n+    result.add(new Pair<User, String>(USER_MAPPER.mapRow(rs, row), rs.getString(\"description\")));\n+    row++;\n+   }\n+\n+   return result;\n+  }\n+                                                                     };\n+\n+ /**\n+  * Constructor.\n+  *\n+  * @param perunPool connection pool\n+  */\n+\n+\n+ public UsersManagerImpl(DataSource perunPool) {\n+  this.jdbc = new JdbcPerunTemplate(perunPool);\n+  this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n+ }\n+\n+ @Override\n+ public User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where users.id=? \", USER_MAPPER, id);\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new UserNotExistsException(\"user id=\" + id);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users, user_ext_sources \" + \"where users.id=user_ext_sources.user_id and user_ext_sources.login_ext=? and user_ext_sources.ext_sources_id=? \", USER_MAPPER, userExtSource.getLogin(), userExtSource.getExtSource().getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new UserNotExistsException(\"userExtSource=\" + userExtSource.toString());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \" from users join user_ext_sources on users.id=user_ext_sources.user_id join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\" + \" where ext_sources.type=? and user_ext_sources.login_ext=?\", USER_MAPPER, extSourceType, login);\n+  } catch (EmptyResultDataAccessException ex) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users, members \" + \"where members.id=? and members.user_id=users.id\", USER_MAPPER, member.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new ConsistencyErrorException(\"Member has to have a corresponding User\", ex);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \" from users, members \" + \"where members.user_id=users.id and members.vo_id=?\", USER_MAPPER, vo.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsers(PerunSession sess) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users\", USER_MAPPER);\n+  } catch (EmptyResultDataAccessException ex) {\n+   // Return empty list\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \" from users, specific_user_users where users.id=specific_user_users.specific_user_id and specific_user_users.status='0' and specific_user_users.user_id=?\", USER_MAPPER, user.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   // Return empty list\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \" from users, specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and specific_user_users.specific_user_id=? \" + \" and specific_user_users.type=?\", USER_MAPPER, specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+  } catch (EmptyResultDataAccessException ex) {\n+   // Return empty list\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException {\n+  try {\n+   int numAffected = jdbc.update(\"delete from specific_user_users where user_id=? and specific_user_id=? and specific_user_users.type=?\", user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+   if (numAffected == 0) throw new SpecificUserOwnerAlreadyRemovedException(\"SpecificUser-Owner: \" + user + \" , SpecificUser: \" + specificUser);\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"insert into specific_user_users(user_id,specific_user_id,status,created_by_uid,modified_at,type) values (?,?,'0',?,\" + Compatibility.getSysdate() + \",?)\", user.getId(), specificUser.getId(), sess.getPerunPrincipal().getUserId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"update specific_user_users set status='0', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\", sess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+  } catch (RuntimeException er) {\n+   throw new InternalErrorException(er);\n+  }\n+ }\n+\n+ @Override\n+ public void disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"update specific_user_users set status='1', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\", sess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+  } catch (RuntimeException er) {\n+   throw new InternalErrorException(er);\n+  }\n+ }\n+\n+ @Override\n+ public boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+  try {\n+   int numberOfExistences = jdbc.queryForInt(\"select count(1) from specific_user_users where user_id=? and specific_user_id=? and type=?\", user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n+   if (numberOfExistences == 1) {\n+    return true;\n+   } else if (numberOfExistences > 1) {\n+    throw new ConsistencyErrorException(\"Ownership between user \" + user + \" and specificUser \" + specificUser + \" exists more than once.\");\n+   }\n+\n+   return false;\n+  } catch (EmptyResultDataAccessException e) {\n+   return false;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users where users.service_acc='1' or users.sponsored_acc='1'\",\n+   USER_MAPPER);\n+  } catch (EmptyResultDataAccessException ex) {\n+   // Return empty list\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void deleteUser(PerunSession sess, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n+  try {\n+   // delete all relations like  user -> sponsor -> service\n+   jdbc.update(\"delete from specific_user_users where specific_user_id=? or user_id=?\", user.getId(), user.getId());\n+\n+   int numAffected = jdbc.update(\"delete from users where id=?\", user.getId());\n+   if (numAffected == 0) {\n+    if (user.isSpecificUser()) throw new SpecificUserAlreadyRemovedException(\"SpecificUser: \" + user);\n+    throw new UserAlreadyRemovedException(\"User: \" + user);\n+   }\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public User createUser(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   int newId = Utils.getNewId(jdbc, \"users_id_seq\");\n+   char serviceAcc ='0';\n+   char sponsoredAcc ='0';\n+   if (user.isServiceUser()) {\n+    serviceAcc = '1';\n+   }\n+   if (user.isSponsoredUser()) {\n+    sponsoredAcc = '1';\n+   }\n+   jdbc.update(\"insert into users(id,first_name,last_name,middle_name,title_before,title_after,created_by,modified_by,service_acc,sponsored_acc,created_by_uid,modified_by_uid)\" + \" values (?,?,?,?,?,?,?,?,?,?,?,?)\", newId, user.getFirstName(), user.getLastName(), user.getMiddleName(), user.getTitleBefore(), user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), \"\" + serviceAcc, \"\" + sponsoredAcc, sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+   user.setId(newId);\n+   return user;\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public User setSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n+  try {\n+   if (specificUserType.equals(SpecificUserType.SERVICE)) {\n+    jdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", \"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    user.setServiceUser(true);\n+   } else if (specificUserType.equals(SpecificUserType.SPONSORED)) {\n+    jdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", \"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    user.setSponsoredUser(true);\n+   } else {\n+    throw new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n+   }\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+\n+  return user;\n+ }\n+\n+ @Override\n+ public User unsetSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n+  try {\n+   if (specificUserType.equals(SpecificUserType.SERVICE)) {\n+    jdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", \"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    user.setServiceUser(false);\n+   } else if (specificUserType.equals(SpecificUserType.SPONSORED)) {\n+    jdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", \"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    user.setSponsoredUser(false);\n+   } else {\n+    throw new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n+   }\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+\n+  return user;\n+ }\n+\n+ @Override\n+ public User updateUser(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   User userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n+   if (userDb == null) {\n+    throw new ConsistencyErrorException(\"Updating non existing user\");\n+   }\n+   if ((user.getFirstName() != null && !user.getFirstName().equals(userDb.getFirstName())) || (user.getFirstName() == null && userDb.getFirstName() != null)) {\n+    jdbc.update(\"update users set first_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", user.getFirstName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    userDb.setFirstName(user.getFirstName());\n+   }\n+   if (user.getLastName() != null && !user.getLastName().equals(userDb.getLastName())) {\n+    jdbc.update(\"update users set last_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", user.getLastName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    userDb.setLastName(user.getLastName());\n+   }\n+   if ((user.getMiddleName() != null && !user.getMiddleName().equals(userDb.getMiddleName())) || (user.getMiddleName() == null && userDb.getMiddleName() != null)) {\n+    jdbc.update(\"update users set middle_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", user.getMiddleName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    userDb.setMiddleName(user.getMiddleName());\n+   }\n+   if ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) || (user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n+    jdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", user.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    userDb.setTitleBefore(user.getTitleBefore());\n+   }\n+   if ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) || (user.getTitleAfter() == null && userDb.getTitleAfter() != null)) {\n+    jdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    userDb.setTitleAfter(user.getTitleAfter());\n+   }\n+\n+   return userDb;\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public User updateNameTitles(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   User userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n+   if (userDb == null) {\n+    throw new ConsistencyErrorException(\"Updating titles for non existing user\");\n+   }\n+\n+   // changed condition to updateUser case to handle: fill, change and remove\n+   if ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) || (user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n+    jdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", user.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    userDb.setTitleBefore(user.getTitleBefore());\n+   }\n+   if ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) || ((user.getTitleAfter() == null && userDb.getTitleAfter() != null))) {\n+    jdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n+    userDb.setTitleAfter(user.getTitleAfter());\n+   }\n+\n+   return userDb;\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"update user_ext_sources set last_access=\" + Compatibility.getSysdate() + \" where id=?\",\n+   userExtSource.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n+  try {\n+   UserExtSource userExtSourceDb = jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" + \" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, userExtSource.getId());\n+   if (userExtSourceDb == null) {\n+    throw new ConsistencyErrorException(\"Updating non existing userExtSource\");\n+   }\n+   if (userExtSource.getLoa() != userExtSourceDb.getLoa()) {\n+    jdbc.update(\"update user_ext_sources set loa=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", userExtSource.getLoa(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n+   }\n+   if (userExtSource.getLogin() != null && !userExtSourceDb.getLogin().equals(userExtSource.getLogin())) {\n+    try {\n+     jdbc.update(\"update user_ext_sources set login_ext=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\", userExtSource.getLogin(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n+    } catch (DuplicateKeyException ex) {\n+     throw new UserExtSourceExistsException(\"UES with same login already exists: \" + userExtSource);\n+    }\n+   }\n+\n+   return userExtSource;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException {\n+  try {\n+   Utils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n+\n+   int ueaId = Utils.getNewId(jdbc, \"user_ext_sources_id_seq\");\n+   log.trace(\"Adding new user ext source: ueaId {}, user.getId() {}, userExtSource.getLogin() {}, userExtSource.getLoa() {}, userExtSource.getExtSource().getId() {}, \" + \"sess.getPerunPrincipal().getActor() {}, sess.getPerunPrincipal().getActor() {}, \" + \"sess.getPerunPrincipal().getUser().getId() {}, sess.getPerunPrincipal().getUser().getId() {}\", new Object[] {ueaId, user.getId(), userExtSource.getLogin(), userExtSource.getLoa(), userExtSource.getExtSource().getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId()});\n+   jdbc.update(\"insert into user_ext_sources (id, user_id, login_ext, loa, ext_sources_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid) \" + \"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\", ueaId, user.getId(), userExtSource.getLogin(), userExtSource.getLoa(), userExtSource.getExtSource().getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n+   userExtSource.setId(ueaId);\n+   userExtSource.setUserId(user.getId());\n+   return userExtSource;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + \" from user_ext_sources left join ext_sources \" + \" on user_ext_sources.ext_sources_id=ext_sources.id \" + \" where ext_sources.id=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, source.getId(), extLogin);\n+  } catch (EmptyResultDataAccessException e) {\n+   throw new UserExtSourceNotExistsException(\"ExtSource: \" + source + \" for extLogin \" + extLogin, e);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+  //get now date\n+  LocalDate date = LocalDate.now();\n+  date = date.minusMonths(MAX_OLD_OF_ACTIVE_USER_EXTSOURCE);\n+\n+  try {\n+   String query = \"select \" + userExtSourceMappingSelectQuery + \", \" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where \" + \" user_ext_sources.user_id=? and \" + \" user_ext_sources.last_access > \" + Compatibility.toDate(\"'\" + date + \"'\", \"'YYYY-MM-DD'\");\n+   return jdbc.query(query, USEREXTSOURCE_MAPPER, user.getId());\n+  } catch (EmptyResultDataAccessException ex) {\n+   return new ArrayList<>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" + \" ext_sources.type=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, extType, extLogin);\n+  } catch (EmptyResultDataAccessException ex) {\n+   return new ArrayList<UserExtSource>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+  try {\n+   return jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + \" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" + \" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, id);\n+  } catch (EmptyResultDataAccessException e) {\n+   throw new UserExtSourceNotExistsException(e);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"SELECT \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery + \" FROM user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\" + \" WHERE user_ext_sources.user_id=?\", USEREXTSOURCE_MAPPER, user.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n+  try {\n+   int numAffected = jdbc.update(\"delete from user_ext_sources where id=?\", userExtSource.getId());\n+   if (numAffected == 0) throw new UserExtSourceAlreadyRemovedException(\"User: \" + user + \" , UserExtSource: \" + userExtSource);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from user_ext_sources where user_id=?\", user.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" + \" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" + \" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" + \" join members on groups_members.member_id=members.id where members.user_id=?) \" + \" and authz.role_id=(select id from roles where roles.name=?))) \", GroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" + \" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" + \" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" + \" join members on groups_members.member_id=members.id where members.user_id=?) \" + \" and authz.role_id=(select id from roles where roles.name=?))) and groups.vo_id=? \", GroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName(), vo.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Group>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from authz join vos on authz.vo_id=vos.id \" + \" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" + \" left outer join members on members.id=groups_members.member_id \" + \" where (authz.user_id=? or members.user_id=?) and authz.role_id=(select id from roles where name=?)\", VosManagerImpl.VO_MAPPER, user.getId(), user.getId(), Role.VOADMIN.getRoleName());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<Vo>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from users join members on users.id=members.user_id, vos where \" + \"users.id=? and members.vo_id=vos.id\", VosManagerImpl.VO_MAPPER, user.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   // If user is not member of any vo, just return empty list\n+   return new ArrayList<Vo>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \" from users, user_attr_values where \" + \" user_attr_values.attr_value=? and users.id=user_attr_values.user_id and user_attr_values.attr_id=?\", USER_MAPPER, BeansUtils.attributeValueToString(attribute), attribute.getId());\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefinition, String attributeValue) throws InternalErrorException {\n+  String value = \"\";\n+  String operator = \"=\";\n+  if (attributeDefinition.getType().equals(String.class.getName())) {\n+   value = attributeValue.trim();\n+   operator = \"=\";\n+  } else if (attributeDefinition.getType().equals(Integer.class.getName())) {\n+   value = attributeValue.trim();\n+   operator = \"=\";\n+  } else if (attributeDefinition.getType().equals(Boolean.class.getName())) {\n+          value = attributeValue.trim();\n+          operator = \"=\";\n+         } else if (attributeDefinition.getType().equals(ArrayList.class.getName())) {\n+          value = \"%\" + attributeValue.trim() + \"%\";\n+          operator = \"like\";\n+         } else if (attributeDefinition.getType().equals(LinkedHashMap.class.getName())) {\n+                 value = \"%\" + attributeValue.trim() + \"%\";\n+                 operator = \"like\";\n                 }\n \n-                return result;\n+  // FIXME - this doesn't work for map attributes, since they are not in attr_value column\n+  // if fixed, we could add LargeString and LargeArrayList\n+  String query = \"select \" + userMappingSelectQuery + \" from users, user_attr_values where \" + \" user_attr_values.attr_value \" + operator + \" :value and users.id=user_attr_values.user_id and user_attr_values.attr_id=:attr_id\";\n+  MapSqlParameterSource namedParams = new MapSqlParameterSource();\n+  namedParams.addValue(\"value\", value);\n+  namedParams.addValue(\"attr_id\", attributeDefinition.getId());\n+\n+  try {\n+   return namedParameterJdbcTemplate.query(query, namedParams, USER_MAPPER);\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n+  Set<User> users = new HashSet<User>();\n+  log.debug(\"Searching for users using searchString '{}'\", searchString);\n+\n+  // Search by mail (member)\n+  users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users, members, member_attr_values, attr_names \" + \"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" + \"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" + \"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+  // Search preferred email (user)\n+  users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users, user_attr_values, attr_names \" + \"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" + \"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" + \"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+  // Search logins in userExtSources\n+  users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users, user_ext_sources \" + \"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n+\n+  // Search logins in attributes: login-namespace:*\n+  users.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery + \" from attr_names, user_attr_values, users \" + \"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" + \"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\", USER_MAPPER, searchString));\n+\n+  // Search by userId\n+\n+  try {\n+   int userId = Integer.parseInt(searchString);\n+   users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n+  } catch (NumberFormatException e) {\n+   // IGNORE\n+\n+  }\n+  users.addAll(findUsersByName(sess, searchString));\n+  return new ArrayList<User>(users);\n+ }\n+\n+ @Override\n+ public List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n+  Set<User> users = new HashSet<User>();\n+  log.debug(\"Searching for users using searchString '{}'\", searchString);\n+\n+  // Search by mail (member)\n+  users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users, members, member_attr_values, attr_names \" + \"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" + \"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" + \"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+  // Search preferred email (user)\n+  users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users, user_attr_values, attr_names \" + \"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" + \"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" + \"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n+\n+  // Search logins in userExtSources\n+  users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users, user_ext_sources \" + \"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n+\n+  // Search logins in attributes: login-namespace:*\n+  users.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery + \" from attr_names, user_attr_values, users \" + \"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" + \"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\", USER_MAPPER, searchString));\n+\n+  // Search by userId\n+\n+  try {\n+   int userId = Integer.parseInt(searchString);\n+   users.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n+  } catch (NumberFormatException e) {\n+   // IGNORE\n+\n+  }\n+  users.addAll(findUsersByExactName(sess, searchString));\n+  return new ArrayList<User>(users);\n+ }\n+\n+ @Override\n+ public List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n+  if (searchString == null || searchString.isEmpty()) {\n+   return new ArrayList<User>();\n+  }\n+\n+  // Convert to lower case\n+  searchString = searchString.toLowerCase();\n+  log.debug(\"Search string '{}' converted into the lowercase\", searchString);\n+\n+  // Convert to ASCII\n+  searchString = Utils.utftoasci(searchString);\n+  log.debug(\"Search string '{}' converted into the ASCII\", searchString);\n+\n+  // remove spaces from the search string\n+  searchString = searchString.replaceAll(\" \", \"\");\n+  log.debug(\"Searching users by name using searchString '{}'\", searchString);\n+\n+  // the searchString is already lower cased and converted into the ASCII\n+\n+  try {\n+   if (Compatibility.isOracle()) {\n+    // Search users' names\n+    return (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" + \"where lower(\" + Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\") + \") like '%' || ? || '%'\", USER_MAPPER, searchString));\n+   } else if (Compatibility.isPostgreSql()) {\n+    return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" + \"where strpos(lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \"),?) > 0\", USER_MAPPER, searchString);\n+   } else if (Compatibility.isHSQLDB()) {\n+           return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" + \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \") like '%' || ? || '%'\", USER_MAPPER, searchString);\n+          } else {\n+           throw new InternalErrorException(\"Unsupported db type\");\n+          }\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n+  if (titleBefore.isEmpty()) {\n+   titleBefore = \"%\";\n+  }\n+  if (firstName.isEmpty()) {\n+   firstName = \"%\";\n+  }\n+  if (middleName.isEmpty()) {\n+   middleName = \"%\";\n+  }\n+  if (lastName.isEmpty()) {\n+   lastName = \"%\";\n+  }\n+  if (titleAfter.isEmpty()) {\n+   titleAfter = \"%\";\n+  }\n+\n+  // the searchString is already lower cased\n+\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" + \" where coalesce(lower(\" + Compatibility.convertToAscii(\"users.title_before\") + \"), '%') like ? and lower(\" + Compatibility.convertToAscii(\"users.first_name\") + \") like ? and coalesce(lower(\" + Compatibility.convertToAscii(\"users.middle_name\") + \"),'%') like ? and \" + \"lower(\" + Compatibility.convertToAscii(\"users.last_name\") + \") like ? and coalesce(lower(\" + Compatibility.convertToAscii(\"users.title_after\") + \"), '%') like ?\", USER_MAPPER, titleBefore, firstName, middleName, lastName, titleAfter);\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n+  if (searchString == null || searchString.isEmpty()) {\n+   return new ArrayList<User>();\n+  }\n+\n+  // Convert to lower case\n+  searchString = searchString.toLowerCase();\n+  log.debug(\"Search string '{}' converted into the lowercase\", searchString);\n+\n+  // Convert to ASCII\n+  searchString = Utils.utftoasci(searchString);\n+  log.debug(\"Search string '{}' converted into the ASCII\", searchString);\n+\n+  // remove spaces from the search string\n+  searchString = searchString.replaceAll(\" \", \"\");\n+  log.debug(\"Searching users by name using searchString '{}'\", searchString);\n+\n+  // the searchString is already lower cased and converted into the ASCII\n+\n+  try {\n+   if (Compatibility.isOracle()) {\n+    // Search users' names\n+    return (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" + \"where lower(\" + Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\") + \")=?\", USER_MAPPER, searchString));\n+   } else if (Compatibility.isPostgreSql()) {\n+    return jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" + \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=?\", USER_MAPPER, searchString);\n+   } else if (Compatibility.isHSQLDB()) {\n+           return jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" + \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=?\", USER_MAPPER, searchString);\n+          } else {\n+           throw new InternalErrorException(\"Unsupported db type\");\n+          }\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   int numberOfExistences = jdbc.queryForInt(\"select count(1) from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName());\n+   if (numberOfExistences == 1) {\n+    return true;\n+   } else if (numberOfExistences > 1) {\n+    throw new ConsistencyErrorException(\"User \" + user + \" is PERUNADMIN more than once.\");\n+   }\n+\n+   return false;\n+  } catch (EmptyResultDataAccessException e) {\n+   return false;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public boolean userExists(PerunSession sess, User user) throws InternalErrorException {\n+  Utils.notNull(user, \"user\");\n+\n+  try {\n+   int numberOfExistences = jdbc.queryForInt(\"select count(1) from users where id=? and service_acc=? and sponsored_acc=?\", user.getId(), user.isServiceUser() ? \"1\" : \"0\", user.isSponsoredUser() ? \"1\" : \"0\");\n+   if (numberOfExistences == 1) {\n+    return true;\n+   } else if (numberOfExistences > 1) {\n+    throw new ConsistencyErrorException(\"User \" + user + \" exists more than once.\");\n+   }\n+\n+   return false;\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n+  if (!userExtSourceExists(sess, userExtSource)) throw new UserExtSourceNotExistsException(\"UserExtSource: \" + userExtSource);\n+ }\n+\n+ @Override\n+ public void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+  try {\n+   int numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where id=?\", id);\n+   if (numberOfExistences == 0) throw new UserExtSourceNotExistsException(\"UserExtSource with ID=\" + id + \" doesn't exists.\");\n+   if (numberOfExistences > 1) throw new ConsistencyErrorException(\"UserExtSource wit ID=\" + id + \" exists more than once.\");\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n+  if (isLoginReserved(sess, namespace, login)) throw new AlreadyReservedLoginException(namespace, login);\n+ }\n+\n+ @Override\n+ public boolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException {\n+  Utils.notNull(namespace, \"loginNamespace\");\n+  Utils.notNull(login, \"userLogin\");\n+\n+  try {\n+   int numberOfExistences = jdbc.queryForInt(\"select count(1) from application_reserved_logins where namespace=? and login=?\", namespace, login);\n+   if (numberOfExistences == 1) {\n+    return true;\n+   } else if (numberOfExistences > 1) {\n+    throw new ConsistencyErrorException(\"Login \" + login + \" in namespace \" + namespace + \" is reserved more than once.\");\n+   }\n+\n+   return false;\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+  Utils.notNull(userExtSource, \"userExtSource\");\n+  Utils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n+  Utils.notNull(userExtSource.getExtSource(), \"userExtSource.getExtSource\");\n+\n+  try {\n+\n+   // check by ext identity (login/ext source ID)\n+   if (userExtSource.getUserId() >= 0) {\n+    int numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=? and user_id=?\", userExtSource.getLogin(), userExtSource.getExtSource().getId(), userExtSource.getUserId());\n+    if (numberOfExistences == 1) {\n+     return true;\n+    } else if (numberOfExistences > 1) {\n+     throw new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n+    }\n+\n+    return false;\n+   } else {\n+    int numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=?\", userExtSource.getLogin(), userExtSource.getExtSource().getId());\n+    if (numberOfExistences == 1) {\n+     return true;\n+    } else if (numberOfExistences > 1) {\n+     throw new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n+    }\n+\n+    return false;\n+   }\n+  } catch (EmptyResultDataAccessException ex) {\n+   return false;\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n+  // If usersIds is empty, we can immediately return empty results\n+  if (usersIds.size() == 0) {\n+   return new ArrayList<User>();\n+  }\n+\n+  try {\n+   return namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery + \"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n+   USER_MAPPER);\n+  } catch (EmptyResultDataAccessException ex) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"select \" + userMappingSelectQuery + \" from users where \" + \"users.id not in (select user_id from members) order by last_name, first_name\", USER_MAPPER);\n+  } catch (EmptyResultDataAccessException e) {\n+   return new ArrayList<User>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from cabinet_authorships where userid=?\", user.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException {\n+  List<Pair<String, String>> result = new ArrayList<Pair<String, String>>();\n+  try {\n+   List<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n+                        @Override\n+                        public Integer mapRow(ResultSet rs, int arg1) throws SQLException {\n+                         return rs.getInt(\"id\");\n+                        }\n+                       }, user.getId());\n+   for (Integer id : ids) {\n+    result.addAll(jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n+                   @Override\n+                   public Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n+                    return new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n+                   }\n+                  }, id));\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  return result;\n+ }\n+\n+ @Override\n+ public void deleteUsersReservedLogins(User user) throws InternalErrorException {\n+  try {\n+   List<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n+                        @Override\n+                        public Integer mapRow(ResultSet rs, int arg1) throws SQLException {\n+                         return rs.getInt(\"id\");\n+                        }\n+                       }, user.getId());\n+   for (Integer id : ids) {\n+    jdbc.update(\"delete from application_reserved_logins where app_id=?\", id);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public int requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException {\n+  int id = Utils.getNewId(jdbc, \"mailchange_id_seq\");\n+  try {\n+   jdbc.update(\"insert into mailchange(id, value, user_id, created_by, created_by_uid) values (?,?,?,?,?) \", id, email, user.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  return id;\n+ }\n+\n+ @Override\n+ public String getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException {\n+  int changeId = Integer.parseInt(i, Character.MAX_RADIX);\n+  int validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n+\n+  // get new email if possible\n+  String newEmail = \"\";\n+  try {\n+   if (Compatibility.isPostgreSql()) {\n+    // postgres\n+    newEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", String.class, changeId, user.getId());\n+   } else {\n+    // oracle\n+    newEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\" + validWindow + \"' HOUR))\", String.class, changeId, user.getId());\n+   }\n+  } catch (EmptyResultDataAccessException ex) {\n+   throw new InternalErrorException(\"Preferred mail change request with ID=\" + changeId + \" doesn't exists or isn't valid anymore.\");\n+  }\n+\n+  return newEmail;\n+ }\n+\n+ @Override\n+ public void removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from mailchange where user_id=?\", user.getId());\n+  } catch (Exception ex) {\n+   throw new InternalErrorException(\"Unable to remove preferred mail change requests for user: \" + user, ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException {\n+  int validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n+  try {\n+   if (Compatibility.isPostgreSql()) {\n+    return jdbc.query(\"select value from mailchange where user_id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n+            @Override\n+            public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+             return resultSet.getString(\"value\");\n             }\n-        };\n-\n-\t/**\n-\t * Constructor.\n-\t *\n-\t * @param perunPool connection pool\n-\t */\n-\tpublic UsersManagerImpl(DataSource perunPool) {\n-\t\tthis.jdbc = new JdbcPerunTemplate(perunPool);\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n-\t}\n-\n-\t@Override\n-\tpublic User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where users.id=? \", USER_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new UserNotExistsException(\"user id=\" + id);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where users.id=user_ext_sources.user_id and user_ext_sources.login_ext=? and user_ext_sources.ext_sources_id=? \", USER_MAPPER, userExtSource.getLogin(), userExtSource.getExtSource().getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new UserNotExistsException(\"userExtSource=\" + userExtSource.toString());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users join user_ext_sources on users.id=user_ext_sources.user_id join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\"\n-\t\t\t\t\t+ \" where ext_sources.type=? and user_ext_sources.login_ext=?\", USER_MAPPER, extSourceType, login);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users, members \" +\n-\t\t\t\t\t\"where members.id=? and members.user_id=users.id\", USER_MAPPER, member.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Member has to have a corresponding User\", ex);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users, members \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.vo_id=?\", USER_MAPPER, vo.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsers(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\"  from users\", USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, specific_user_users where users.id=specific_user_users.specific_user_id and specific_user_users.status='0' and specific_user_users.user_id=?\", USER_MAPPER, user.getId());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status='0' and specific_user_users.specific_user_id=? \" +\n-\t\t\t\t\t\" and specific_user_users.type=?\", USER_MAPPER, specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException {\n-\t\ttry {\n-\t\t\tint numAffected = jdbc.update(\"delete from specific_user_users where user_id=? and specific_user_id=? and specific_user_users.type=?\",\n-\t\t\t\t\tuser.getId(), specificUser.getId(),specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t\tif(numAffected == 0) throw new SpecificUserOwnerAlreadyRemovedException(\"SpecificUser-Owner: \" + user + \" , SpecificUser: \" + specificUser);\n-\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into specific_user_users(user_id,specific_user_id,status,created_by_uid,modified_at,type) values (?,?,'0',?,\" + Compatibility.getSysdate() + \",?)\",\n-\t\t\t\t\tuser.getId(), specificUser.getId(), sess.getPerunPrincipal().getUserId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update specific_user_users set status='0', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\",\n-\t\t\t\t\tsess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t} catch (RuntimeException er) {\n-\t\t\tthrow new InternalErrorException(er);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update specific_user_users set status='1', modified_at=\" + Compatibility.getSysdate() + \", modified_by_uid=? where user_id=? and specific_user_id=? and type=?\",\n-\t\t\t\t\tsess.getPerunPrincipal().getUserId(), user.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t} catch (RuntimeException er) {\n-\t\t\tthrow new InternalErrorException(er);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from specific_user_users where user_id=? and specific_user_id=? and type=?\",\n-\t\t\t\t\tuser.getId(), specificUser.getId(), specificUser.getMajorSpecificType().getSpecificUserType());\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Ownership between user \" + user + \" and specificUser \" + specificUser +  \" exists more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn false;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\"  from users where users.service_acc='1' or users.sponsored_acc='1'\", USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\t// Return empty list\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUser(PerunSession sess, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n-\t\ttry {\n-\t\t\t// delete all relations like  user -> sponsor -> service\n-\t\t\tjdbc.update(\"delete from specific_user_users where specific_user_id=? or user_id=?\", user.getId(), user.getId());\n-\t\t\tint numAffected = jdbc.update(\"delete from users where id=?\", user.getId());\n-\t\t\tif(numAffected == 0) {\n-\t\t\t\tif (user.isSpecificUser()) throw new SpecificUserAlreadyRemovedException(\"SpecificUser: \" + user);\n-\t\t\t\tthrow new UserAlreadyRemovedException(\"User: \" + user);\n-\t\t\t}\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User createUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint newId = Utils.getNewId(jdbc, \"users_id_seq\");\n-\t\t\tchar serviceAcc = '0';\n-\t\t\tchar sponsoredAcc = '0';\n-\t\t\tif (user.isServiceUser()) {\n-\t\t\t\tserviceAcc = '1';\n-\t\t\t}\n-\t\t\tif (user.isSponsoredUser()) {\n-\t\t\t\tsponsoredAcc = '1';\n-\t\t\t}\n-\t\t\tjdbc.update(\"insert into users(id,first_name,last_name,middle_name,title_before,title_after,created_by,modified_by,service_acc,sponsored_acc,created_by_uid,modified_by_uid)\" +\n-\t\t\t\t\t\" values (?,?,?,?,?,?,?,?,?,?,?,?)\", newId, user.getFirstName(), user.getLastName(), user.getMiddleName(),\n-\t\t\t\t\tuser.getTitleBefore(), user.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), \"\" + serviceAcc, \"\" + sponsoredAcc,\n-\t\t\t\t\tsess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\t\t\tuser.setId(newId);\n-\n-\t\t\treturn user;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User setSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tif(specificUserType.equals(SpecificUserType.SERVICE)) {\n-\t\t\t\tjdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setServiceUser(true);\n-\t\t\t} else if(specificUserType.equals(SpecificUserType.SPONSORED)) {\n-\t\t\t\tjdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"1\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setSponsoredUser(true);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n-\t\t\t}\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic User unsetSpecificUserType(PerunSession sess, User user, SpecificUserType specificUserType) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tif(specificUserType.equals(SpecificUserType.SERVICE)) {\n-\t\t\t\tjdbc.update(\"update users set service_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setServiceUser(false);\n-\t\t\t} else if(specificUserType.equals(SpecificUserType.SPONSORED)) {\n-\t\t\t\tjdbc.update(\"update users set sponsored_acc=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\"0\", sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuser.setSponsoredUser(false);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported specific user type \" + specificUserType.getSpecificUserType());\n-\t\t\t}\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic User updateUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tUser userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n-\n-\t\t\tif (userDb == null) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Updating non existing user\");\n-\t\t\t}\n-\n-\t\t\tif ((user.getFirstName() != null && !user.getFirstName().equals(userDb.getFirstName())) ||\n-\t\t\t\t\t\t\t(user.getFirstName() == null && userDb.getFirstName() != null)) {\n-\t\t\t\tjdbc.update(\"update users set first_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getFirstName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setFirstName(user.getFirstName());\n-\t\t\t}\n-\t\t\tif (user.getLastName() != null && !user.getLastName().equals(userDb.getLastName())) {\n-\t\t\t\tjdbc.update(\"update users set last_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getLastName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setLastName(user.getLastName());\n-\t\t\t}\n-\t\t\tif ((user.getMiddleName() != null && !user.getMiddleName().equals(userDb.getMiddleName())) ||\n-\t\t\t\t\t\t\t(user.getMiddleName() == null && userDb.getMiddleName() != null)) {\n-\t\t\t\tjdbc.update(\"update users set middle_name=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getMiddleName(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setMiddleName(user.getMiddleName());\n-\t\t\t}\n-\t\t\tif ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) ||\n-\t\t\t\t\t\t\t(user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n-\t\t\t\tjdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleBefore(user.getTitleBefore());\n-\t\t\t}\n-\t\t\tif ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) ||\n-\t\t\t\t\t\t\t(user.getTitleAfter() == null && userDb.getTitleAfter() != null)) {\n-\t\t\t\tjdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleAfter(user.getTitleAfter());\n-\t\t\t}\n-\n-\t\t\treturn userDb;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User updateNameTitles(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tUser userDb = jdbc.queryForObject(\"select \" + userMappingSelectQuery + \" from users where id=? \", USER_MAPPER, user.getId());\n-\n-\t\t\tif (userDb == null) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Updating titles for non existing user\");\n-\t\t\t}\n-\n-\t\t\t// changed condition to updateUser case to handle: fill, change and remove\n-\n-\t\t\tif ((user.getTitleBefore() != null && !user.getTitleBefore().equals(userDb.getTitleBefore())) ||\n-\t\t\t\t\t(user.getTitleBefore() == null && userDb.getTitleBefore() != null)) {\n-\t\t\t\tjdbc.update(\"update users set title_before=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleBefore(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleBefore(user.getTitleBefore());\n-\t\t\t}\n-\t\t\tif ((user.getTitleAfter() != null && !user.getTitleAfter().equals(userDb.getTitleAfter())) ||\n-\t\t\t\t\t((user.getTitleAfter() == null && userDb.getTitleAfter() != null))) {\n-\t\t\t\tjdbc.update(\"update users set title_after=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuser.getTitleAfter(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), user.getId());\n-\t\t\t\tuserDb.setTitleAfter(user.getTitleAfter());\n-\t\t\t}\n-\n-\t\t\treturn userDb;\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"update user_ext_sources set last_access=\" + Compatibility.getSysdate() + \" where id=?\", userExtSource.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n-\t\ttry {\n-\t\t\tUserExtSource userExtSourceDb = jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n-\t\t\t\t\t\" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, userExtSource.getId());\n-\n-\t\t\tif (userExtSourceDb == null) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Updating non existing userExtSource\");\n-\t\t\t}\n-\n-\t\t\tif (userExtSource.getLoa() != userExtSourceDb.getLoa()) {\n-\t\t\t\tjdbc.update(\"update user_ext_sources set loa=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\tuserExtSource.getLoa(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n-\t\t\t}\n-\t\t\tif (userExtSource.getLogin() != null && !userExtSourceDb.getLogin().equals(userExtSource.getLogin())) {\n-\t\t\t\ttry {\n-\t\t\t\t\tjdbc.update(\"update user_ext_sources set login_ext=?, modified_by=?, modified_by_uid=?, modified_at=\" + Compatibility.getSysdate() + \" where id=?\",\n-\t\t\t\t\t\t\tuserExtSource.getLogin(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), userExtSource.getId());\n-\t\t\t\t} catch (DuplicateKeyException ex) {\n-\t\t\t\t\tthrow new UserExtSourceExistsException(\"UES with same login already exists: \" + userExtSource);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn userExtSource;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tUtils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n-\n-\t\t\tint ueaId = Utils.getNewId(jdbc, \"user_ext_sources_id_seq\");\n-\n-\t\t\tlog.trace(\"Adding new user ext source: ueaId {}, user.getId() {}, userExtSource.getLogin() {}, userExtSource.getLoa() {}, userExtSource.getExtSource().getId() {}, \" +\n-\t\t\t\t\t\"sess.getPerunPrincipal().getActor() {}, sess.getPerunPrincipal().getActor() {}, \" +\n-\t\t\t\t\t\"sess.getPerunPrincipal().getUser().getId() {}, sess.getPerunPrincipal().getUser().getId() {}\", new Object[]{ueaId, user.getId(), userExtSource.getLogin(),\n-\t\t\t\t\t\tuserExtSource.getLoa(), userExtSource.getExtSource().getId(),\n-\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(),\n-\t\t\t\tsess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId()});\n-\t\t\tjdbc.update(\"insert into user_ext_sources (id, user_id, login_ext, loa, ext_sources_id, created_by, created_at, modified_by, modified_at, created_by_uid, modified_by_uid) \" +\n-\t\t\t\t\t\"values (?,?,?,?,?,?,\" + Compatibility.getSysdate() + \",?,\" + Compatibility.getSysdate() + \",?,?)\",\n-\t\t\t\t\tueaId, user.getId(), userExtSource.getLogin(), userExtSource.getLoa(), userExtSource.getExtSource().getId(),\n-\t\t\t\t\tsess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId(), sess.getPerunPrincipal().getUserId());\n-\n-\t\t\tuserExtSource.setId(ueaId);\n-\t\t\tuserExtSource.setUserId(user.getId());\n-\n-\t\t\treturn userExtSource;\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t        \" from user_ext_sources left join ext_sources \" +\n-\t\t\t\t\t\" on user_ext_sources.ext_sources_id=ext_sources.id \" +\n-\t\t\t\t\t\" where ext_sources.id=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, source.getId(), extLogin);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new UserExtSourceNotExistsException(\"ExtSource: \" + source + \" for extLogin \" + extLogin, e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//get now date\n-\t\tLocalDate date = LocalDate.now();\n-\t\tdate = date.minusMonths(MAX_OLD_OF_ACTIVE_USER_EXTSOURCE);\n-\n-\t\ttry {\n-\t\t\tString query = \"select \" + userExtSourceMappingSelectQuery + \", \" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where \" +\n-\t\t\t\t\t\" user_ext_sources.user_id=? and \" +\n-\t\t\t\t\t\" user_ext_sources.last_access > \" + Compatibility.toDate(\"'\" + date + \"'\", \"'YYYY-MM-DD'\");\n-\n-\t\t\treturn jdbc.query(query, USEREXTSOURCE_MAPPER, user.getId());\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<>();\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n-\t\t\t\t\t\t\t\" ext_sources.type=? and user_ext_sources.login_ext=?\", USEREXTSOURCE_MAPPER, extType, extLogin);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<UserExtSource>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForObject(\"select \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t\t\t\" from user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id where\" +\n-\t\t\t\t\t\" user_ext_sources.id=?\", USEREXTSOURCE_MAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\tthrow new UserExtSourceNotExistsException(e);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + userExtSourceMappingSelectQuery + \",\" + ExtSourcesManagerImpl.extSourceMappingSelectQuery +\n-\t\t\t        \" FROM user_ext_sources left join ext_sources on user_ext_sources.ext_sources_id=ext_sources.id\" +\n-\t\t\t        \" WHERE user_ext_sources.user_id=?\", USEREXTSOURCE_MAPPER, user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n-\t\ttry {\n-\t\t\tint numAffected = jdbc.update(\"delete from user_ext_sources where id=?\", userExtSource.getId());\n-\t\t\tif(numAffected == 0) throw new UserExtSourceAlreadyRemovedException(\"User: \" + user + \" , UserExtSource: \" + userExtSource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from user_ext_sources where user_id=?\",user.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" +\n-\t\t\t\t\t\t\t\" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" +\n-\t\t\t\t\t\t\t\" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" +\n-\t\t\t\t\t\t\t\" join members on groups_members.member_id=members.id where members.user_id=?) \" +\n-\t\t\t\t\t\t\t\" and authz.role_id=(select id from roles where roles.name=?))) \",\n-\t\t\t\t\tGroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select distinct \" + GroupsManagerImpl.groupMappingSelectQuery + \" from groups where groups.id in \" +\n-\t\t\t\t\t\t\t\" (select group_id from authz where ( authz.user_id=? or  authz.authorized_group_id in \" +\n-\t\t\t\t\t\t\t\" (select distinct groups.id from groups join groups_members on groups_members.group_id=groups.id \" +\n-\t\t\t\t\t\t\t\" join members on groups_members.member_id=members.id where members.user_id=?) \" +\n-\t\t\t\t\t\t\t\" and authz.role_id=(select id from roles where roles.name=?))) and groups.vo_id=? \",\n-\t\t\t\t\tGroupsManagerImpl.GROUP_MAPPER, user.getId(), user.getId(), Role.GROUPADMIN.getRoleName(), vo.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Group>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from authz join vos on authz.vo_id=vos.id \" +\n-\t\t\t\t\t\" left outer join groups_members on groups_members.group_id=authz.authorized_group_id \" +\n-\t\t\t\t\t\" left outer join members on members.id=groups_members.member_id \" +\n-\t\t\t\t\t\" where (authz.user_id=? or members.user_id=?) and authz.role_id=(select id from roles where name=?)\",\n-\t\t\t\t\tVosManagerImpl.VO_MAPPER, user.getId(), user.getId(), Role.VOADMIN.getRoleName());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<Vo>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + VosManagerImpl.voMappingSelectQuery + \" from users join members on users.id=members.user_id, vos where \" +\n-\t\t\t\t\t\"users.id=? and members.vo_id=vos.id\", VosManagerImpl.VO_MAPPER, user.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\t// If user is not member of any vo, just return empty list\n-\t\t\treturn new ArrayList<Vo>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values where \" +\n-\t\t\t\t\t\" user_attr_values.attr_value=? and users.id=user_attr_values.user_id and user_attr_values.attr_id=?\",\n-\t\t\t\t\tUSER_MAPPER, BeansUtils.attributeValueToString(attribute), attribute.getId());\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefinition, String attributeValue) throws InternalErrorException {\n-\t\tString value = \"\";\n-\t\tString operator = \"=\";\n-\t\tif (attributeDefinition.getType().equals(String.class.getName())) {\n-\t\t\tvalue = attributeValue.trim();\n-\t\t\toperator = \"=\";\n-\t\t} else if (attributeDefinition.getType().equals(Integer.class.getName())) {\n-\t\t\tvalue = attributeValue.trim();\n-\t\t\toperator = \"=\";\n-\t\t}  else if (attributeDefinition.getType().equals(Boolean.class.getName())) {\n-\t\t\tvalue = attributeValue.trim();\n-\t\t\toperator = \"=\";\n-\t\t} else if (attributeDefinition.getType().equals(ArrayList.class.getName())) {\n-\t\t\tvalue = \"%\" + attributeValue.trim() + \"%\";\n-\t\t\toperator = \"like\";\n-\t\t} else if (attributeDefinition.getType().equals(LinkedHashMap.class.getName())) {\n-\t\t\tvalue = \"%\" + attributeValue.trim() + \"%\";\n-\t\t\toperator = \"like\";\n-\t\t}\n-\n-\t\t// FIXME - this doesn't work for map attributes, since they are not in attr_value column\n-\t\t// if fixed, we could add LargeString and LargeArrayList\n-\n-\t\tString query = \"select \" + userMappingSelectQuery + \" from users, user_attr_values where \" +\n-\t\t\t\" user_attr_values.attr_value \" + operator + \" :value and users.id=user_attr_values.user_id and user_attr_values.attr_id=:attr_id\";\n-\n-\t\tMapSqlParameterSource namedParams = new MapSqlParameterSource();\n-\t\tnamedParams.addValue(\"value\", value);\n-\t\tnamedParams.addValue(\"attr_id\", attributeDefinition.getId());\n-\n-\t\ttry {\n-\t\t\treturn namedParameterJdbcTemplate.query(query, namedParams, USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tSet<User> users = new HashSet<User>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\t\"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" +\n-\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByName(sess, searchString));\n-\n-\t\treturn new ArrayList<User>(users);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tSet<User> users = new HashSet<User>();\n-\n-\t\tlog.debug(\"Searching for users using searchString '{}'\", searchString);\n-\n-\t\t// Search by mail (member)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, members, member_attr_values, attr_names \" +\n-\t\t\t\t\"where members.user_id=users.id and members.id=member_attr_values.member_id and member_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:member:attribute-def:def:mail' and \" +\n-\t\t\t\t\"lower(member_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search preferred email (user)\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_attr_values, attr_names \" +\n-\t\t\t\t\"where users.id=user_attr_values.user_id and user_attr_values.attr_id=attr_names.id and \" +\n-\t\t\t\t\"attr_names.attr_name='urn:perun:user:attribute-def:def:preferredMail' and \" +\n-\t\t\t\t\"lower(user_attr_values.attr_value)=lower(?)\", USER_MAPPER, searchString.toLowerCase()));\n-\n-\t\t// Search logins in userExtSources\n-\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\" from users, user_ext_sources \" +\n-\t\t\t\t\"where user_ext_sources.login_ext=? and user_ext_sources.user_id=users.id\", USER_MAPPER, searchString));\n-\n-\t\t// Search logins in attributes: login-namespace:*\n-\t\tusers.addAll(jdbc.query(\"select distinct \" + userMappingSelectQuery +\n-\t\t\t\t\t\t\" from attr_names, user_attr_values, users \" +\n-\t\t\t\t\t\t\"where attr_names.friendly_name like 'login-namespace:%' and user_attr_values.attr_value=? \" +\n-\t\t\t\t\t\t\"and attr_names.id=user_attr_values.attr_id and user_attr_values.user_id=users.id\",\n-\t\t\t\tUSER_MAPPER, searchString));\n-\n-\t\t// Search by userId\n-\t\ttry {\n-\t\t\tint userId = Integer.parseInt(searchString);\n-\t\t\tusers.addAll(jdbc.query(\"select \" + userMappingSelectQuery + \" from users where id=?\", USER_MAPPER, userId));\n-\t\t} catch (NumberFormatException e) {\n-\t\t\t// IGNORE\n-\t\t}\n-\n-\t\tusers.addAll(findUsersByExactName(sess, searchString));\n-\n-\t\treturn new ArrayList<User>(users);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tif (searchString == null || searchString.isEmpty()) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t}\n-\n-\t\t// Convert to lower case\n-\t\tsearchString = searchString.toLowerCase();\n-\t\tlog.debug(\"Search string '{}' converted into the lowercase\", searchString);\n-\n-\t\t// Convert to ASCII\n-\t\tsearchString = Utils.utftoasci(searchString);\n-\t\tlog.debug(\"Search string '{}' converted into the ASCII\", searchString);\n-\n-\t\t// remove spaces from the search string\n-\t\tsearchString = searchString.replaceAll(\" \", \"\");\n-\n-\t\tlog.debug(\"Searching users by name using searchString '{}'\", searchString);\n-\n-\t\t// the searchString is already lower cased and converted into the ASCII\n-\t\ttry {\n-\t\t\tif (Compatibility.isOracle()) {\n-\t\t\t\t// Search users' names\n-\t\t\t\treturn (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" +\n-\t\t\t\t\t\t\t\"where lower(\"+Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\")+\") like '%' || ? || '%'\",\n-\t\t\t\t\t\t\tUSER_MAPPER, searchString));\n-\t\t\t} else if (Compatibility.isPostgreSql()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n-\t\t\t\t\t\t\"where strpos(lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\"),?) > 0\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else if (Compatibility.isHSQLDB()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n-\t\t\t\t\t\t\t\t\"where lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\") like '%' || ? || '%'\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n-\n-\t\tif (titleBefore.isEmpty()) {\n-\t\t\ttitleBefore = \"%\";\n-\t\t}\n-\t\tif (firstName.isEmpty()) {\n-\t\t\tfirstName = \"%\";\n-\t\t}\n-\t\tif (middleName.isEmpty()) {\n-\t\t\tmiddleName = \"%\";\n-\t\t}\n-\t\tif (lastName.isEmpty()) {\n-\t\t\tlastName = \"%\";\n-\t\t}\n-\t\tif (titleAfter.isEmpty()) {\n-\t\t\ttitleAfter = \"%\";\n-\t\t}\n-\n-\t\t// the searchString is already lower cased\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users \" +\n-\t\t\t\t\t\" where coalesce(lower(\"+Compatibility.convertToAscii(\"users.title_before\")+\"), '%') like ? and lower(\"+Compatibility.convertToAscii(\"users.first_name\")+\") like ? and coalesce(lower(\"+Compatibility.convertToAscii(\"users.middle_name\")+\"),'%') like ? and \" +\n-\t\t\t\t\t\"lower(\"+Compatibility.convertToAscii(\"users.last_name\")+\") like ? and coalesce(lower(\"+Compatibility.convertToAscii(\"users.title_after\")+\"), '%') like ?\",\n-\t\t\t\t\tUSER_MAPPER, titleBefore, firstName, middleName, lastName, titleAfter);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\tif (searchString == null || searchString.isEmpty()) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t}\n-\n-\t\t// Convert to lower case\n-\t\tsearchString = searchString.toLowerCase();\n-\t\tlog.debug(\"Search string '{}' converted into the lowercase\", searchString);\n-\n-\t\t// Convert to ASCII\n-\t\tsearchString = Utils.utftoasci(searchString);\n-\t\tlog.debug(\"Search string '{}' converted into the ASCII\", searchString);\n-\n-\t\t// remove spaces from the search string\n-\t\tsearchString = searchString.replaceAll(\" \", \"\");\n-\n-\t\tlog.debug(\"Searching users by name using searchString '{}'\", searchString);\n-\n-\t\t// the searchString is already lower cased and converted into the ASCII\n-\t\ttry {\n-\t\t\tif (Compatibility.isOracle()) {\n-\t\t\t\t// Search users' names\n-\t\t\t\treturn (jdbc.query(\"select \" + userMappingSelectQuery + \" from users \"\n-\t\t\t\t\t\t\t\t+ \"where lower(\" + Compatibility.convertToAscii(\"users.first_name || users.middle_name || users.last_name\") + \")=?\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString));\n-\t\t\t} else if (Compatibility.isPostgreSql()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users \"\n-\t\t\t\t\t\t\t\t+ \"where lower(\" + Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\") + \")=?\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else if (Compatibility.isHSQLDB()) {\n-\t\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \"  from users \" +\n-\t\t\t\t\t\t\t\t\"where lower(\"+Compatibility.convertToAscii(\"COALESCE(users.first_name,'') || COALESCE(users.middle_name,'') || COALESCE(users.last_name,'')\")+\")=?\",\n-\t\t\t\t\t\tUSER_MAPPER, searchString);\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported db type\");\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.getRoleName());\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"User \" + user + \" is PERUNADMIN more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn false;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean userExists(PerunSession sess, User user) throws InternalErrorException {\n-\t\tUtils.notNull(user, \"user\");\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from users where id=? and service_acc=? and sponsored_acc=?\", user.getId(), user.isServiceUser() ? \"1\" : \"0\", user.isSponsoredUser() ? \"1\" : \"0\");\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"User \" + user + \" exists more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\tif(!userExtSourceExists(sess, userExtSource)) throw new UserExtSourceNotExistsException(\"UserExtSource: \" + userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where id=?\", id);\n-\t\t\tif (numberOfExistences == 0) throw new UserExtSourceNotExistsException(\"UserExtSource with ID=\" + id + \" doesn't exists.\");\n-\t\t\tif (numberOfExistences > 1) throw new ConsistencyErrorException(\"UserExtSource wit ID=\" + id + \" exists more than once.\");\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n-\t\tif(isLoginReserved(sess, namespace, login)) throw new AlreadyReservedLoginException(namespace, login);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException {\n-\t\tUtils.notNull(namespace, \"loginNamespace\");\n-\t\tUtils.notNull(login, \"userLogin\");\n-\n-\t\ttry {\n-\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from application_reserved_logins where namespace=? and login=?\",\n-\t\t\t\t\tnamespace, login);\n-\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\treturn true;\n-\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Login \" + login + \" in namespace \" + namespace + \" is reserved more than once.\");\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\tUtils.notNull(userExtSource, \"userExtSource\");\n-\t\tUtils.notNull(userExtSource.getLogin(), \"userExtSource.getLogin\");\n-\t\tUtils.notNull(userExtSource.getExtSource(), \"userExtSource.getExtSource\");\n-\n-\t\ttry {\n-\n-\t\t\t// check by ext identity (login/ext source ID)\n-\t\t\tif (userExtSource.getUserId() >= 0) {\n-\t\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=? and user_id=?\",\n-\t\t\t\t\t\tuserExtSource.getLogin(), userExtSource.getExtSource().getId(), userExtSource.getUserId());\n-\t\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-\t\t\t} else {\n-\t\t\t\tint numberOfExistences = jdbc.queryForInt(\"select count(1) from user_ext_sources where login_ext=? and ext_sources_id=?\",\n-\t\t\t\t\t\tuserExtSource.getLogin(), userExtSource.getExtSource().getId());\n-\t\t\t\tif (numberOfExistences == 1) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t} else if (numberOfExistences > 1) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(\"UserExtSource \" + userExtSource + \" exists more than once.\");\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn false;\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n-\t\t// If usersIds is empty, we can immediately return empty results\n-\t\tif (usersIds.size() == 0) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t}\n-\n-\t\ttry {\n-\t\t\treturn namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery +\n-\t\t\t\t\t\"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n-\t\t\t        USER_MAPPER);\n-\t\t} catch(EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"select \" + userMappingSelectQuery + \" from users where \" +\n-\t\t\t\t\t\"users.id not in (select user_id from members) order by last_name, first_name\", USER_MAPPER);\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new ArrayList<User>();\n-\t\t} catch(RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from cabinet_authorships where userid=?\", user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException {\n-\n-\t\tList<Pair<String, String>> result = new ArrayList<Pair<String,String>>();\n-\n-\t\ttry {\n-\t\t\tList<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Integer mapRow(ResultSet rs, int arg1) throws SQLException {\n-\t\t\t\t\treturn rs.getInt(\"id\");\n-\t\t\t\t}\n-\t\t\t},user.getId());\n-\n-\t\t\tfor (Integer id : ids) {\n-\n-\t\t\t\tresult.addAll(jdbc.query(\"select namespace,login from application_reserved_logins where app_id=?\", new RowMapper<Pair<String, String>>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic Pair<String, String> mapRow(ResultSet rs, int arg1) throws SQLException {\n-\t\t\t\t\t\treturn new Pair<String, String>(rs.getString(\"namespace\"), rs.getString(\"login\"));\n-\t\t\t\t\t}\n-\t\t\t\t}, id));\n-\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\treturn result;\n-\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUsersReservedLogins(User user) throws InternalErrorException {\n-\n-\t\ttry {\n-\t\t\tList<Integer> ids = jdbc.query(\"select id from application where user_id=?\", new RowMapper<Integer>() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic Integer mapRow(ResultSet rs, int arg1)\n-\t\t\t\tthrows SQLException {\n-\t\t\t\treturn rs.getInt(\"id\");\n-\t\t\t\t}\n-\t\t\t},user.getId());\n-\n-\t\t\tfor (Integer id : ids) {\n-\n-\t\t\t\tjdbc.update(\"delete from application_reserved_logins where app_id=?\", id);\n-\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic int requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException {\n-\n-\t\tint id = Utils.getNewId(jdbc, \"mailchange_id_seq\");\n-\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into mailchange(id, value, user_id, created_by, created_by_uid) values (?,?,?,?,?) \",\n-\t\t\t\t\tid, email, user.getId(), sess.getPerunPrincipal().getActor(), sess.getPerunPrincipal().getUserId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\treturn id;\n-\n-\t}\n-\n-\t@Override\n-\tpublic String getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException {\n-\n-\t\tint changeId = Integer.parseInt(i, Character.MAX_RADIX);\n-\n-\t\tint validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n-\n-\t\t// get new email if possible\n-\t\tString newEmail = \"\";\n-\t\ttry {\n-\t\t\tif (Compatibility.isPostgreSql()) {\n-\t\t\t\t// postgres\n-\t\t\t\tnewEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (now() - interval '\"+validWindow+\" hours'))\", String.class, changeId, user.getId());\n-\t\t\t} else {\n-\t\t\t\t// oracle\n-\t\t\t\tnewEmail = jdbc.queryForObject(\"select value from mailchange where id=? and user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\"+validWindow+\"' HOUR))\", String.class, changeId, user.getId());\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\tthrow new InternalErrorException(\"Preferred mail change request with ID=\"+changeId+\" doesn't exists or isn't valid anymore.\");\n-\t\t}\n-\n-\t\treturn newEmail;\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from mailchange where user_id=?\", user.getId());\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to remove preferred mail change requests for user: \"+user, ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\tint validWindow = BeansUtils.getCoreConfig().getMailchangeValidationWindow();\n-\n-\t\ttry {\n-\t\t\tif (Compatibility.isPostgreSql()) {\n-\n-\t\t\t\treturn jdbc.query(\"select value from mailchange where user_id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"value\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId());\n-\n-\t\t\t} else {\n-\n-\t\t\t\treturn jdbc.query(\"select value from mailchange where user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\"+validWindow+\"' HOUR))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"value\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId());\n-\n-\t\t\t}\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn new ArrayList<String>();\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic String loadPasswordResetRequest(User user, int requestId) throws InternalErrorException {\n-\n-\t\tint validWindow = BeansUtils.getCoreConfig().getPwdresetValidationWindow();\n-\n-\t\tString result = \"\";\n-\t\ttry {\n-\t\t\tif (Compatibility.isPostgreSql()) {\n-\n-\t\t\t\tresult = jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"namespace\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId(), requestId);\n-\n-\t\t\t} else {\n-\n-\t\t\t\tresult =  jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\"+validWindow+\"' HOUR))\", new RowMapper<String>() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic String mapRow(ResultSet resultSet, int i) throws SQLException {\n-\t\t\t\t\t\treturn resultSet.getString(\"namespace\");\n-\t\t\t\t\t}\n-\t\t\t\t}, user.getId(), requestId);\n-\n-\t\t\t}\n-\n-\t\t\tjdbc.update(\"delete from pwdreset where user_id=? and id=?\", user.getId(), requestId);\n-\t\t\treturn result;\n-\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn result;\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from pwdreset where user_id=?\", user.getId());\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to remove password reset requests for user: \"+user, ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic int getUsersCount(PerunSession sess) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"select count(*) from users\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tif(!userExists(sess, user)) throw new UserNotExistsException(\"User: \" + user);\n-\t}\n-\n-\t@Override\n-\tpublic Map<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n-\n-\t\tPasswordManagerModule module = getPasswordManagerModule(session, namespace);\n-\t\tif (module != null) {\n-\t\t\treturn module.generateAccount(session, parameters);\n-\t\t}\n-\t\treturn null;\n-\n-\t}\n-\n-\t@Override\n-\tpublic PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n-\n-\t\tif (namespace == null || namespace.isEmpty()) throw new InternalErrorException(\"Login-namespace to get password manager module must be specified.\");\n-\n-\t\tnamespace = namespace.replaceAll(\"[^A-Za-z0-9]\", \"\");\n-\t\tnamespace = Character.toUpperCase(namespace.charAt(0)) + namespace.substring(1);\n-\n-\t\ttry {\n-\t\t\treturn (PasswordManagerModule) Class.forName(\"cz.metacentrum.perun.core.impl.modules.pwdmgr.\" + namespace + \"PasswordManagerModule\").newInstance();\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(\"Unable to instantiate password manager module.\", ex);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT \" + userMappingSelectQuery + \" FROM users JOIN members_sponsored ms ON (users.id=ms.sponsor_id)\" +\n-\t\t\t\t\t\"WHERE ms.active='1' AND ms.sponsored_id=? \", USER_MAPPER, sponsoredMember.getId());\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteSponsorLinks(PerunSession sess, User sponsor) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"DELETE FROM members_sponsored WHERE sponsor_id=?\", sponsor.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tStringBuilder sb = new StringBuilder(\"SELECT DISTINCT \" + userMappingSelectQuery + \" FROM users \" +\n-\t\t\t\t\t\"  JOIN user_ext_sources ues ON users.id = ues.user_id \" +\n-\t\t\t\t\t\"  JOIN user_ext_source_attr_values v ON ues.id = v.user_ext_source_id\" +\n-\t\t\t\t\t\"  JOIN attr_names a ON (v.attr_id = a.id AND a.attr_name=?)\" +\n-\t\t\t\t\t\"  WHERE v.attr_value LIKE ? \");\n-\t\t\tList<String> args = new ArrayList<>();\n-\t\t\targs.add(attributeName);\n-\t\t\targs.add(\"%\"+valueEnd);\n-\t\t\tfor(String excl : excludeValueEnds) {\n-\t\t\t\tsb.append(\" AND v.attr_value NOT LIKE ?\");\n-\t\t\t\targs.add(\"%\"+excl);\n-\t\t\t}\n-\t\t\treturn jdbc.query(sb.toString(), USER_MAPPER, args.toArray());\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t}\n-}\n+           }, user.getId());\n+   } else {\n+    return jdbc.query(\"select value from mailchange where user_id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\" + validWindow + \"' HOUR))\", new RowMapper<String>() {\n+            @Override\n+            public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+             return resultSet.getString(\"value\");\n+            }\n+           }, user.getId());\n+   }\n+  } catch (EmptyResultDataAccessException ex) {\n+   return new ArrayList<String>();\n+  }\n+ }\n+\n+ @Override\n+ public String loadPasswordResetRequest(User user, int requestId) throws InternalErrorException {\n+  int validWindow = BeansUtils.getCoreConfig().getPwdresetValidationWindow();\n+  String result = \"\";\n+  try {\n+   if (Compatibility.isPostgreSql()) {\n+    result = jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (now() - interval '\" + validWindow + \" hours'))\", new RowMapper<String>() {\n+              @Override\n+              public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+               return resultSet.getString(\"namespace\");\n+              }\n+             }, user.getId(), requestId);\n+   } else {\n+    result = jdbc.queryForObject(\"select namespace from pwdreset where user_id=? and id=? and (created_at > (SYSTIMESTAMP - INTERVAL '\" + validWindow + \"' HOUR))\", new RowMapper<String>() {\n+              @Override\n+              public String mapRow(ResultSet resultSet, int i) throws SQLException {\n+               return resultSet.getString(\"namespace\");\n+              }\n+             }, user.getId(), requestId);\n+   }\n+   jdbc.update(\"delete from pwdreset where user_id=? and id=?\", user.getId(), requestId);\n+   return result;\n+  } catch (EmptyResultDataAccessException ex) {\n+   return result;\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"delete from pwdreset where user_id=?\", user.getId());\n+  } catch (Exception ex) {\n+   throw new InternalErrorException(\"Unable to remove password reset requests for user: \" + user, ex);\n+  }\n+ }\n+\n+ @Override\n+ public int getUsersCount(PerunSession sess) throws InternalErrorException {\n+  try {\n+   return jdbc.queryForInt(\"select count(*) from users\");\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+  if (!userExists(sess, user)) throw new UserNotExistsException(\"User: \" + user);\n+ }\n+\n+ @Override\n+ public Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n+  PasswordManagerModule module = getPasswordManagerModule(session, namespace);\n+  if (module != null) {\n+   return module.generateAccount(session, parameters);\n+  }\n+\n+  return null;\n+ }\n+\n+ @Override\n+ public PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n+  if (namespace == null || namespace.isEmpty()) throw new InternalErrorException(\"Login-namespace to get password manager module must be specified.\");\n+  namespace = namespace.replaceAll(\"[^A-Za-z0-9]\", \"\");\n+  namespace = Character.toUpperCase(namespace.charAt(0)) + namespace.substring(1);\n+\n+  try {\n+   return (PasswordManagerModule) Class.forName(\"cz.metacentrum.perun.core.impl.modules.pwdmgr.\" + namespace + \"PasswordManagerModule\").newInstance();\n+  } catch (Exception ex) {\n+   throw new InternalErrorException(\"Unable to instantiate password manager module.\", ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n+  try {\n+   return jdbc.query(\"SELECT \" + userMappingSelectQuery + \" FROM users JOIN members_sponsored ms ON (users.id=ms.sponsor_id)\" + \"WHERE ms.active='1' AND ms.sponsored_id=? \", USER_MAPPER, sponsoredMember.getId());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public void deleteSponsorLinks(PerunSession sess, User sponsor) throws InternalErrorException {\n+  try {\n+   jdbc.update(\"DELETE FROM members_sponsored WHERE sponsor_id=?\", sponsor.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws InternalErrorException {\n+  try {\n+   StringBuilder sb = new StringBuilder(\"SELECT DISTINCT \" + userMappingSelectQuery + \" FROM users \" + \"  JOIN user_ext_sources ues ON users.id = ues.user_id \" + \"  JOIN user_ext_source_attr_values v ON ues.id = v.user_ext_source_id\" + \"  JOIN attr_names a ON (v.attr_id = a.id AND a.attr_name=?)\" + \"  WHERE v.attr_value LIKE ? \");\n+   List<String> args = new ArrayList<>();\n+   args.add(attributeName);\n+   args.add(\"%\" + valueEnd);\n+   for (String excl : excludeValueEnds) {\n+    sb.append(\" AND v.attr_value NOT LIKE ?\");\n+    args.add(\"%\" + excl);\n+   }\n+\n+   return jdbc.query(sb.toString(), USER_MAPPER, args.toArray());\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 2356
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/9/UsersManagerImpl.java\nindex fde4406b2c2..dae4fba29ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/9/UsersManagerImpl.java\n@@ -1077,7 +1077,7 @@ public class UsersManagerImpl implements UsersManagerImplApi {\n \t\ttry {\n \t\t\treturn namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery +\n \t\t\t\t\t\"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n-\t\t\t        USER_MAPPER);\n+\t\t\t\t\t\t\tUSER_MAPPER);\n \t\t} catch(EmptyResultDataAccessException ex) {\n \t\t\treturn new ArrayList<User>();\n \t\t} catch(RuntimeException ex) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/9/UsersManagerImpl.java\nindex fde4406b2c2..89b2d8bf1cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/9/UsersManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/9/UsersManagerImpl.java\n@@ -1077,7 +1077,7 @@ public class UsersManagerImpl implements UsersManagerImplApi {\n \t\ttry {\n \t\t\treturn namedParameterJdbcTemplate.query(\"select \" + userMappingSelectQuery +\n \t\t\t\t\t\"  from users where \" + BeansUtils.prepareInSQLClause(usersIds, \"users.id\"),\n-\t\t\t        USER_MAPPER);\n+\t\t\t\t\tUSER_MAPPER);\n \t\t} catch(EmptyResultDataAccessException ex) {\n \t\t\treturn new ArrayList<User>();\n \t\t} catch(RuntimeException ex) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}