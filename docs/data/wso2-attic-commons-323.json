{
    "project_name": "wso2-attic-commons",
    "error_id": "323",
    "information": {
        "errors": [
            {
                "line": "2",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 153).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "/*\n * $HeadURL: http://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk/contrib/src/main/java/org/apache/http/contrib/benchmark/ResultProcessor.java $\n * $Revision: 534594 $\n * $Date: 2007-05-02 12:14:03 -0700 (Wed, 02 May 2007) $\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/323/ResultProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/323/ResultProcessor.java\nindex 917553b1aa3..3e9340f24ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/323/ResultProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/323/ResultProcessor.java\n@@ -28,6 +28,7 @@\n  * <http://www.apache.org/>.\n  *\n  */\n+\n package org.apache.http.contrib.benchmark;\n \n import org.apache.http.HttpHost;\n@@ -36,68 +37,68 @@ import java.text.NumberFormat;\n \n public class ResultProcessor {\n \n-    static NumberFormat nf2 = NumberFormat.getInstance();\n-    static NumberFormat nf3 = NumberFormat.getInstance();\n-    static NumberFormat nf6 = NumberFormat.getInstance();\n+  static NumberFormat nf2 = NumberFormat.getInstance();\n+  static NumberFormat nf3 = NumberFormat.getInstance();\n+  static NumberFormat nf6 = NumberFormat.getInstance();\n \n-    static {\n-        nf2.setMaximumFractionDigits(2);\n-        nf2.setMinimumFractionDigits(2);\n-        nf3.setMaximumFractionDigits(3);\n-        nf3.setMinimumFractionDigits(3);\n-        nf6.setMaximumFractionDigits(6);\n-        nf6.setMinimumFractionDigits(6);\n-    }\n+  static {\n+    nf2.setMaximumFractionDigits(2);\n+    nf2.setMinimumFractionDigits(2);\n+    nf3.setMaximumFractionDigits(3);\n+    nf3.setMinimumFractionDigits(3);\n+    nf6.setMaximumFractionDigits(6);\n+    nf6.setMinimumFractionDigits(6);\n+  }\n \n-    static void printResults(BenchmarkWorker[] workers, HttpHost host,\n-        String uri, long contentLength) {\n+  static void printResults(BenchmarkWorker[] workers, HttpHost host,\n+                           String uri, long contentLength) {\n \n-        double totalTimeNano = 0;\n-        int successCount     = 0;\n-        int failureCount     = 0;\n-        int writeErrors      = 0;\n-        long totalBytesRcvd  = 0;\n+    double totalTimeNano = 0;\n+    int successCount = 0;\n+    int failureCount = 0;\n+    int writeErrors = 0;\n+    long totalBytesRcvd = 0;\n \n-        Stats stats = workers[0].getStats();\n+    Stats stats = workers[0].getStats();\n \n-        for (int i = 0; i < workers.length; i++) {\n-            Stats s = workers[i].getStats();\n-            totalTimeNano  += s.getDuration();\n-            successCount   += s.getSuccessCount();\n-            failureCount   += s.getFailureCount();\n-            writeErrors    += s.getWriteErrors();\n-            totalBytesRcvd += s.getTotalBytesRecv();\n-        }\n+    for (int i = 0; i < workers.length; i++) {\n+      Stats s = workers[i].getStats();\n+      totalTimeNano += s.getDuration();\n+      successCount += s.getSuccessCount();\n+      failureCount += s.getFailureCount();\n+      writeErrors += s.getWriteErrors();\n+      totalBytesRcvd += s.getTotalBytesRecv();\n+    }\n \n-        int threads = workers.length;\n-        double totalTimeMs  = (totalTimeNano / threads) / 1000000; // convert nano secs to milli secs\n-        double timePerReqMs = totalTimeMs / successCount;\n-        double totalTimeSec = totalTimeMs / 1000;\n-        double reqsPerSec   = successCount / totalTimeSec;\n-        long totalBytesSent = contentLength * successCount;\n-        long totalBytes     = totalBytesRcvd + (totalBytesSent > 0 ? totalBytesSent : 0);\n+    int threads = workers.length;\n+    double totalTimeMs = (totalTimeNano / threads) / 1000000; // convert nano secs to milli secs\n+    double timePerReqMs = totalTimeMs / successCount;\n+    double totalTimeSec = totalTimeMs / 1000;\n+    double reqsPerSec = successCount / totalTimeSec;\n+    long totalBytesSent = contentLength * successCount;\n+    long totalBytes = totalBytesRcvd + (totalBytesSent > 0 ? totalBytesSent : 0);\n \n-        System.out.println(\"\\nServer Software:\\t\\t\" + stats.getServerName());\n-        System.out.println(\"Server Hostname:\\t\\t\" + host.getHostName());\n-        System.out.println(\"Server Port:\\t\\t\\t\" +\n-            (host.getPort() > 0 ? host.getPort() : uri.startsWith(\"https\") ? \"443\" : \"80\") + \"\\n\");\n-        System.out.println(\"Document Path:\\t\\t\\t\" + uri);\n-        System.out.println(\"Document Length:\\t\\t\" + stats.getContentLength() + \" bytes\\n\");\n-        System.out.println(\"Concurrency Level:\\t\\t\" + workers.length);\n-        System.out.println(\"Time taken for tests:\\t\\t\" + nf6.format(totalTimeSec) + \" seconds\");\n-        System.out.println(\"Complete requests:\\t\\t\" + successCount);\n-        System.out.println(\"Failed requests:\\t\\t\" + failureCount);\n-        System.out.println(\"Write errors:\\t\\t\\t\" + writeErrors);\n-        System.out.println(\"Total transferred:\\t\\t\" + totalBytes + \" bytes\");\n-        System.out.println(\"Requests per second:\\t\\t\" + nf2.format(reqsPerSec) + \" [#/sec] (mean)\");\n-        System.out.println(\"Time per request:\\t\\t\" + nf3.format(timePerReqMs * workers.length) + \" [ms] (mean)\");\n-        System.out.println(\"Time per request:\\t\\t\" + nf3.format(timePerReqMs) +\n-            \" [ms] (mean, across all concurrent requests)\");\n-        System.out.println(\"Transfer rate:\\t\\t\\t\" +\n-            nf2.format(totalBytesRcvd/1000/totalTimeSec) + \" [Kbytes/sec] received\");\n-        System.out.println(\"\\t\\t\\t\\t\" +\n-            (totalBytesSent > 0 ? nf2.format(totalBytesSent/1000/totalTimeSec) : -1) + \" kb/s sent\");\n-        System.out.println(\"\\t\\t\\t\\t\" +\n-            nf2.format(totalBytes/1000/totalTimeSec) + \" kb/s total\");\n-    }\n+    System.out.println(\"\\nServer Software:\\t\\t\" + stats.getServerName());\n+    System.out.println(\"Server Hostname:\\t\\t\" + host.getHostName());\n+    System.out.println(\"Server Port:\\t\\t\\t\" +\n+      (host.getPort() > 0 ? host.getPort() : uri.startsWith(\"https\") ? \"443\" : \"80\") + \"\\n\");\n+    System.out.println(\"Document Path:\\t\\t\\t\" + uri);\n+    System.out.println(\"Document Length:\\t\\t\" + stats.getContentLength() + \" bytes\\n\");\n+    System.out.println(\"Concurrency Level:\\t\\t\" + workers.length);\n+    System.out.println(\"Time taken for tests:\\t\\t\" + nf6.format(totalTimeSec) + \" seconds\");\n+    System.out.println(\"Complete requests:\\t\\t\" + successCount);\n+    System.out.println(\"Failed requests:\\t\\t\" + failureCount);\n+    System.out.println(\"Write errors:\\t\\t\\t\" + writeErrors);\n+    System.out.println(\"Total transferred:\\t\\t\" + totalBytes + \" bytes\");\n+    System.out.println(\"Requests per second:\\t\\t\" + nf2.format(reqsPerSec) + \" [#/sec] (mean)\");\n+    System.out.println(\"Time per request:\\t\\t\" + nf3.format(timePerReqMs * workers.length) + \" [ms] (mean)\");\n+    System.out.println(\"Time per request:\\t\\t\" + nf3.format(timePerReqMs) +\n+      \" [ms] (mean, across all concurrent requests)\");\n+    System.out.println(\"Transfer rate:\\t\\t\\t\" +\n+      nf2.format(totalBytesRcvd / 1000 / totalTimeSec) + \" [Kbytes/sec] received\");\n+    System.out.println(\"\\t\\t\\t\\t\" +\n+      (totalBytesSent > 0 ? nf2.format(totalBytesSent / 1000 / totalTimeSec) : -1) + \" kb/s sent\");\n+    System.out.println(\"\\t\\t\\t\\t\" +\n+      nf2.format(totalBytes / 1000 / totalTimeSec) + \" kb/s total\");\n+  }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/323/ResultProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/323/ResultProcessor.java\nindex 917553b1aa3..d61f5ce50e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/323/ResultProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/323/ResultProcessor.java\n@@ -51,31 +51,30 @@ public class ResultProcessor {\n \n     static void printResults(BenchmarkWorker[] workers, HttpHost host,\n         String uri, long contentLength) {\n-\n-        double totalTimeNano = 0;\n-        int successCount     = 0;\n-        int failureCount     = 0;\n-        int writeErrors      = 0;\n-        long totalBytesRcvd  = 0;\n+    double totalTimeNano = 0;\n+        int successCount = 0;\n+        int failureCount = 0;\n+        int writeErrors = 0;\n+        long totalBytesRcvd = 0;\n \n         Stats stats = workers[0].getStats();\n \n         for (int i = 0; i < workers.length; i++) {\n             Stats s = workers[i].getStats();\n-            totalTimeNano  += s.getDuration();\n-            successCount   += s.getSuccessCount();\n-            failureCount   += s.getFailureCount();\n-            writeErrors    += s.getWriteErrors();\n+            totalTimeNano += s.getDuration();\n+            successCount += s.getSuccessCount();\n+            failureCount += s.getFailureCount();\n+            writeErrors += s.getWriteErrors();\n             totalBytesRcvd += s.getTotalBytesRecv();\n         }\n \n         int threads = workers.length;\n-        double totalTimeMs  = (totalTimeNano / threads) / 1000000; // convert nano secs to milli secs\n+        double totalTimeMs = (totalTimeNano / threads) / 1000000; // convert nano secs to milli secs\n         double timePerReqMs = totalTimeMs / successCount;\n         double totalTimeSec = totalTimeMs / 1000;\n-        double reqsPerSec   = successCount / totalTimeSec;\n+        double reqsPerSec = successCount / totalTimeSec;\n         long totalBytesSent = contentLength * successCount;\n-        long totalBytes     = totalBytesRcvd + (totalBytesSent > 0 ? totalBytesSent : 0);\n+        long totalBytes = totalBytesRcvd + (totalBytesSent > 0 ? totalBytesSent : 0);\n \n         System.out.println(\"\\nServer Software:\\t\\t\" + stats.getServerName());\n         System.out.println(\"Server Hostname:\\t\\t\" + host.getHostName());\n@@ -100,4 +99,4 @@ public class ResultProcessor {\n         System.out.println(\"\\t\\t\\t\\t\" +\n             nf2.format(totalBytes/1000/totalTimeSec) + \" kb/s total\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "2",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}