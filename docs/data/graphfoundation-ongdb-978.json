{
    "project_name": "graphfoundation-ongdb",
    "error_id": "978",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/978/TreeNodeSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/978/TreeNodeSelector.java\nindex 1b114ebd56d..ad7bd352494 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/978/TreeNodeSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/978/TreeNodeSelector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import static java.lang.String.format;\n@@ -27,121 +28,120 @@ import static java.lang.String.format;\n  */\n class TreeNodeSelector\n {\n-    /**\n-     * Creates {@link TreeNodeFixedSize} instances.\n-     */\n-    static Factory FIXED = new Factory()\n+  /**\n+   * Creates {@link TreeNodeFixedSize} instances.\n+   */\n+  static Factory FIXED = new Factory()\n+  {\n+    @Override\n+    public <KEY, VALUE> TreeNode<KEY, VALUE> create(int pageSize, Layout<KEY, VALUE> layout)\n     {\n-        @Override\n-        public <KEY,VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout )\n-        {\n-            return new TreeNodeFixedSize<>( pageSize, layout );\n-        }\n+      return new TreeNodeFixedSize<>(pageSize, layout);\n+    }\n \n-        @Override\n-        public byte formatIdentifier()\n-        {\n-            return TreeNodeFixedSize.FORMAT_IDENTIFIER;\n-        }\n+    @Override\n+    public byte formatIdentifier()\n+    {\n+      return TreeNodeFixedSize.FORMAT_IDENTIFIER;\n+    }\n \n-        @Override\n-        public byte formatVersion()\n-        {\n-            return TreeNodeFixedSize.FORMAT_VERSION;\n-        }\n-    };\n+    @Override\n+    public byte formatVersion()\n+    {\n+      return TreeNodeFixedSize.FORMAT_VERSION;\n+    }\n+  };\n \n-    /**\n-     * Creates {@link TreeNodeDynamicSize} instances.\n-     */\n-    static Factory DYNAMIC = new Factory()\n+  /**\n+   * Creates {@link TreeNodeDynamicSize} instances.\n+   */\n+  static Factory DYNAMIC = new Factory()\n+  {\n+    @Override\n+    public <KEY, VALUE> TreeNode<KEY, VALUE> create(int pageSize, Layout<KEY, VALUE> layout)\n     {\n-        @Override\n-        public <KEY,VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout )\n-        {\n-            return new TreeNodeDynamicSize<>( pageSize, layout );\n-        }\n+      return new TreeNodeDynamicSize<>(pageSize, layout);\n+    }\n \n-        @Override\n-        public byte formatIdentifier()\n-        {\n-            return TreeNodeDynamicSize.FORMAT_IDENTIFIER;\n-        }\n+    @Override\n+    public byte formatIdentifier()\n+    {\n+      return TreeNodeDynamicSize.FORMAT_IDENTIFIER;\n+    }\n \n-        @Override\n-        public byte formatVersion()\n-        {\n-            return TreeNodeDynamicSize.FORMAT_VERSION;\n-        }\n-    };\n+    @Override\n+    public byte formatVersion()\n+    {\n+      return TreeNodeDynamicSize.FORMAT_VERSION;\n+    }\n+  };\n \n-    /**\n-     * Selects a format based on the given {@link Layout}.\n-     *\n-     * @param layout {@link Layout} dictating which {@link TreeNode} to instantiate.\n-     * @return a {@link Factory} capable of instantiating the selected format.\n-     */\n-    static Factory selectByLayout( Layout<?,?> layout )\n+  /**\n+   * Selects a format based on the given {@link Layout}.\n+   *\n+   * @param layout {@link Layout} dictating which {@link TreeNode} to instantiate.\n+   * @return a {@link Factory} capable of instantiating the selected format.\n+   */\n+  static Factory selectByLayout(Layout<?, ?> layout)\n+  {\n+    // For now the selection is done in a simple fashion, by looking at layout.fixedSize().\n+    return layout.fixedSize() ? FIXED : DYNAMIC;\n+  }\n+\n+  /**\n+   * Selects a format based on the given format specification.\n+   *\n+   * @param formatIdentifier format identifier, see {@link Meta#getFormatIdentifier()}\n+   * @param formatVersion    format version, see {@link Meta#getFormatVersion()}.\n+   * @return a {@link Factory} capable of instantiating the selected format.\n+   */\n+  static Factory selectByFormat(byte formatIdentifier, byte formatVersion)\n+  {\n+    // For now do a simple selection of the two formats we know. Moving forward this can contain\n+    // many more identifiers and different versions of each.\n+    if (formatIdentifier == TreeNodeFixedSize.FORMAT_IDENTIFIER && formatVersion == TreeNodeFixedSize.FORMAT_VERSION)\n     {\n-        // For now the selection is done in a simple fashion, by looking at layout.fixedSize().\n-        return layout.fixedSize() ? FIXED : DYNAMIC;\n+      return FIXED;\n+    } else if (formatIdentifier == TreeNodeDynamicSize.FORMAT_IDENTIFIER && formatVersion == TreeNodeDynamicSize.FORMAT_VERSION)\n+    {\n+      return DYNAMIC;\n     }\n+    throw new IllegalArgumentException(\n+        format(\"Unknown format identifier:%d and version:%d combination\", formatIdentifier, formatVersion));\n+  }\n \n+  /**\n+   * Able to instantiate {@link TreeNode} of a specific format and version.\n+   */\n+  interface Factory\n+  {\n     /**\n-     * Selects a format based on the given format specification.\n+     * Instantiates a {@link TreeNode} of a specific format and version that this factory represents.\n      *\n-     * @param formatIdentifier format identifier, see {@link Meta#getFormatIdentifier()}\n-     * @param formatVersion format version, see {@link Meta#getFormatVersion()}.\n-     * @return a {@link Factory} capable of instantiating the selected format.\n+     * @param pageSize page size, i.e. size of tree nodes.\n+     * @param layout   {@link Layout} that will be used in this format.\n+     * @return the instantiated {@link TreeNode}.\n      */\n-    static Factory selectByFormat( byte formatIdentifier, byte formatVersion )\n-    {\n-        // For now do a simple selection of the two formats we know. Moving forward this can contain\n-        // many more identifiers and different versions of each.\n-        if ( formatIdentifier == TreeNodeFixedSize.FORMAT_IDENTIFIER && formatVersion == TreeNodeFixedSize.FORMAT_VERSION )\n-        {\n-            return FIXED;\n-        }\n-        else if ( formatIdentifier == TreeNodeDynamicSize.FORMAT_IDENTIFIER && formatVersion == TreeNodeDynamicSize.FORMAT_VERSION )\n-        {\n-            return DYNAMIC;\n-        }\n-        throw new IllegalArgumentException(\n-                format( \"Unknown format identifier:%d and version:%d combination\", formatIdentifier, formatVersion ) );\n-    }\n+    <KEY, VALUE> TreeNode<KEY, VALUE> create(int pageSize, Layout<KEY, VALUE> layout);\n \n     /**\n-     * Able to instantiate {@link TreeNode} of a specific format and version.\n+     * Specifies the format identifier of the physical layout of tree nodes.\n+     * A format identifier must be unique among all possible existing format identifiers.\n+     * It's used to differentiate between different types of formats.\n+     * On top of this a specific {@link #formatVersion() format version} can specify a version of this format.\n+     *\n+     * @return format identifier for the specific {@link TreeNode} that this factory represents.\n+     * Can return this w/o instantiating the {@link TreeNode}.\n      */\n-    interface Factory\n-    {\n-        /**\n-         * Instantiates a {@link TreeNode} of a specific format and version that this factory represents.\n-         *\n-         * @param pageSize page size, i.e. size of tree nodes.\n-         * @param layout {@link Layout} that will be used in this format.\n-         * @return the instantiated {@link TreeNode}.\n-         */\n-        <KEY,VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout );\n+    byte formatIdentifier();\n \n-        /**\n-         * Specifies the format identifier of the physical layout of tree nodes.\n-         * A format identifier must be unique among all possible existing format identifiers.\n-         * It's used to differentiate between different types of formats.\n-         * On top of this a specific {@link #formatVersion() format version} can specify a version of this format.\n-         *\n-         * @return format identifier for the specific {@link TreeNode} that this factory represents.\n-         * Can return this w/o instantiating the {@link TreeNode}.\n-         */\n-        byte formatIdentifier();\n-\n-        /**\n-         * Specifies the version of this particular {@link #formatIdentifier() format}. It must be unique\n-         * among all other versions of this {@link #formatIdentifier() format}.\n-         *\n-         * @return format version for the specific {@link TreeNode} that this factory represents.\n-         * Can return this w/o instantiating the {@link TreeNode}.\n-         */\n-        byte formatVersion();\n-    }\n+    /**\n+     * Specifies the version of this particular {@link #formatIdentifier() format}. It must be unique\n+     * among all other versions of this {@link #formatIdentifier() format}.\n+     *\n+     * @return format version for the specific {@link TreeNode} that this factory represents.\n+     * Can return this w/o instantiating the {@link TreeNode}.\n+     */\n+    byte formatVersion();\n+  }\n }\n",
            "diff_size": 139
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/978/TreeNodeSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/978/TreeNodeSelector.java\nindex 1b114ebd56d..a7ce08746f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/978/TreeNodeSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/978/TreeNodeSelector.java\n@@ -81,7 +81,7 @@ class TreeNodeSelector\n      * @param layout {@link Layout} dictating which {@link TreeNode} to instantiate.\n      * @return a {@link Factory} capable of instantiating the selected format.\n      */\n-    static Factory selectByLayout( Layout<?,?> layout )\n+    static Factory selectByLayout( Layout<?, ?> layout )\n     {\n         // For now the selection is done in a simple fashion, by looking at layout.fixedSize().\n         return layout.fixedSize() ? FIXED : DYNAMIC;\n@@ -106,8 +106,7 @@ class TreeNodeSelector\n         {\n             return DYNAMIC;\n         }\n-        throw new IllegalArgumentException(\n-                format( \"Unknown format identifier:%d and version:%d combination\", formatIdentifier, formatVersion ) );\n+        throw new IllegalArgumentException( format( \"Unknown format identifier:%d and version:%d combination\", formatIdentifier, formatVersion ) );\n     }\n \n     /**\n@@ -144,4 +143,4 @@ class TreeNodeSelector\n          */\n         byte formatVersion();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "61",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "103",
                    "column": "69",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "108",
                    "column": "71",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "128",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "128",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 338).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 908).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,299).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/978/TreeNodeSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/978/TreeNodeSelector.java\nindex 1b114ebd56d..45a1a562561 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/978/TreeNodeSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/978/TreeNodeSelector.java\n@@ -25,55 +25,56 @@ import static java.lang.String.format;\n  * Able to select implementation of {@link TreeNode} to use in different scenarios, should be used in favor of directly\n  * instantiating {@link TreeNode} instances.\n  */\n+\n class TreeNodeSelector\n {\n     /**\n      * Creates {@link TreeNodeFixedSize} instances.\n      */\n     static Factory FIXED = new Factory()\n+{\n+    @Override\n+    public < KEY, VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout )\n     {\n-        @Override\n-        public <KEY,VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout )\n-        {\n-            return new TreeNodeFixedSize<>( pageSize, layout );\n-        }\n+        return new TreeNodeFixedSize<>( pageSize, layout );\n+    }\n \n-        @Override\n-        public byte formatIdentifier()\n-        {\n-            return TreeNodeFixedSize.FORMAT_IDENTIFIER;\n-        }\n+    @Override\n+    public byte formatIdentifier()\n+    {\n+        return TreeNodeFixedSize.FORMAT_IDENTIFIER;\n+    }\n \n-        @Override\n-        public byte formatVersion()\n-        {\n-            return TreeNodeFixedSize.FORMAT_VERSION;\n-        }\n-    };\n+    @Override\n+    public byte formatVersion()\n+    {\n+        return TreeNodeFixedSize.FORMAT_VERSION;\n+    }\n+};\n \n     /**\n      * Creates {@link TreeNodeDynamicSize} instances.\n      */\n     static Factory DYNAMIC = new Factory()\n+{\n+    @Override\n+    public < KEY, VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout )\n     {\n-        @Override\n-        public <KEY,VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout )\n-        {\n-            return new TreeNodeDynamicSize<>( pageSize, layout );\n-        }\n+        return new TreeNodeDynamicSize<>( pageSize, layout );\n+    }\n \n-        @Override\n-        public byte formatIdentifier()\n-        {\n-            return TreeNodeDynamicSize.FORMAT_IDENTIFIER;\n-        }\n+    @Override\n+    public byte formatIdentifier()\n+    {\n+        return TreeNodeDynamicSize.FORMAT_IDENTIFIER;\n+    }\n \n-        @Override\n-        public byte formatVersion()\n-        {\n-            return TreeNodeDynamicSize.FORMAT_VERSION;\n-        }\n-    };\n+    @Override\n+    public byte formatVersion()\n+    {\n+        return TreeNodeDynamicSize.FORMAT_VERSION;\n+    }\n+};\n \n     /**\n      * Selects a format based on the given {@link Layout}.\n@@ -81,7 +82,7 @@ class TreeNodeSelector\n      * @param layout {@link Layout} dictating which {@link TreeNode} to instantiate.\n      * @return a {@link Factory} capable of instantiating the selected format.\n      */\n-    static Factory selectByLayout( Layout<?,?> layout )\n+    static Factory selectByLayout( Layout<?, ?> layout )\n     {\n         // For now the selection is done in a simple fashion, by looking at layout.fixedSize().\n         return layout.fixedSize() ? FIXED : DYNAMIC;\n@@ -94,25 +95,28 @@ class TreeNodeSelector\n      * @param formatVersion format version, see {@link Meta#getFormatVersion()}.\n      * @return a {@link Factory} capable of instantiating the selected format.\n      */\n+\n     static Factory selectByFormat( byte formatIdentifier, byte formatVersion )\n     {\n         // For now do a simple selection of the two formats we know. Moving forward this can contain\n         // many more identifiers and different versions of each.\n-        if ( formatIdentifier == TreeNodeFixedSize.FORMAT_IDENTIFIER && formatVersion == TreeNodeFixedSize.FORMAT_VERSION )\n+        if ( formatIdentifier == TreeNodeFixedSize.FORMAT_IDENTIFIER&& formatVersion == TreeNodeFixedSize.FORMAT_VERSION )\n         {\n             return FIXED;\n         }\n-        else if ( formatIdentifier == TreeNodeDynamicSize.FORMAT_IDENTIFIER && formatVersion == TreeNodeDynamicSize.FORMAT_VERSION )\n+        else\n+        if ( formatIdentifier == TreeNodeDynamicSize.FORMAT_IDENTIFIER&& formatVersion == TreeNodeDynamicSize.FORMAT_VERSION )\n         {\n             return DYNAMIC;\n         }\n-        throw new IllegalArgumentException(\n-                format( \"Unknown format identifier:%d and version:%d combination\", formatIdentifier, formatVersion ) );\n+\n+        throw new IllegalArgumentException( format( \"Unknown format identifier:%d and version:%d combination\", formatIdentifier, formatVersion ) );\n     }\n \n     /**\n      * Able to instantiate {@link TreeNode} of a specific format and version.\n      */\n+\n     interface Factory\n     {\n         /**\n@@ -121,8 +125,8 @@ class TreeNodeSelector\n          * @param pageSize page size, i.e. size of tree nodes.\n          * @param layout {@link Layout} that will be used in this format.\n          * @return the instantiated {@link TreeNode}.\n-         */\n-        <KEY,VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout );\n+         */< KEY, VALUE> TreeNode<KEY,VALUE> create( int pageSize, Layout<KEY,VALUE> layout )\n+                                                                                                                                                                                                                                                                                                                                                 ;\n \n         /**\n          * Specifies the format identifier of the physical layout of tree nodes.\n@@ -132,8 +136,8 @@ class TreeNodeSelector\n          *\n          * @return format identifier for the specific {@link TreeNode} that this factory represents.\n          * Can return this w/o instantiating the {@link TreeNode}.\n-         */\n-        byte formatIdentifier();\n+         */ byte formatIdentifier()\nn \n         /**\n          * Specifies the version of this particular {@link #formatIdentifier() format}. It must be unique\n@@ -141,7 +145,6 @@ class TreeNodeSelector\n          *\n          * @return format version for the specific {@link TreeNode} that this factory represents.\n          * Can return this w/o instantiating the {@link TreeNode}.\n-         */\n-        byte formatVersion();\n-    }\n-}\n+         */ byte formatVersion()\n}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}