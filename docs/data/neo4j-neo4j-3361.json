{
    "project_name": "neo4j-neo4j",
    "error_id": "3361",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3361/DijkstraBidirectional.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3361/DijkstraBidirectional.java\nindex 58d2f389699..083fa45af4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3361/DijkstraBidirectional.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3361/DijkstraBidirectional.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.path;\n \n import org.apache.commons.lang3.mutable.MutableDouble;\n@@ -54,7 +55,7 @@ import static org.neo4j.internal.helpers.collection.Iterators.firstOrNull;\n  * Find (one or all) simple shortest path(s) between two nodes.\n  * Shortest referring to least cost evaluated by provided {@link CostEvaluator}.\n  * It starts a traversal from both ends and terminates when path(s) has been found.\n- *\n+ * <p>\n  * Relationships are traversed in the specified directions from the start node,\n  * but in the reverse direction ( {@link org.neo4j.graphdb.Direction#reverse()} ) from the\n  * end node. This doesn't affect {@link org.neo4j.graphdb.Direction#BOTH}.\n@@ -70,13 +71,14 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n \n     /**\n      * Construct a new bidirectional dijkstra algorithm.\n-     * @param expander          The {@link PathExpander} to be used to decide which relationships\n-     *                          to expand for each node\n-     * @param costEvaluator     The {@link CostEvaluator} to be used for calculating cost of a\n-     *                          relationship\n-     * @param epsilon           The tolerance level to be used when comparing floating point numbers.\n+     *\n+     * @param expander      The {@link PathExpander} to be used to decide which relationships\n+     *                      to expand for each node\n+     * @param costEvaluator The {@link CostEvaluator} to be used for calculating cost of a\n+     *                      relationship\n+     * @param epsilon       The tolerance level to be used when comparing floating point numbers.\n      */\n-    public DijkstraBidirectional( EvaluationContext context, PathExpander<Double> expander, CostEvaluator<Double> costEvaluator, double epsilon )\n+    public DijkstraBidirectional(EvaluationContext context, PathExpander<Double> expander, CostEvaluator<Double> costEvaluator, double epsilon)\n     {\n         this.context = context;\n         this.expander = expander;\n@@ -86,46 +88,46 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n     }\n \n     @Override\n-    public Iterable<WeightedPath> findAllPaths( Node start, final Node end )\n+    public Iterable<WeightedPath> findAllPaths(Node start, final Node end)\n     {\n-        final Traverser traverser = traverser( start, end, PathInterestFactory.allShortest( epsilon ) );\n-        return () -> new TopFetchingWeightedPathIterator( traverser.iterator(), costEvaluator, epsilon );\n+        final Traverser traverser = traverser(start, end, PathInterestFactory.allShortest(epsilon));\n+        return () -> new TopFetchingWeightedPathIterator(traverser.iterator(), costEvaluator, epsilon);\n     }\n \n-    private Traverser traverser( Node start, final Node end, PathInterest<Double> interest )\n+    private Traverser traverser(Node start, final Node end, PathInterest<Double> interest)\n     {\n-        final MutableDouble shortestSoFar = new MutableDouble( Double.MAX_VALUE );\n-        final MutableDouble startSideShortest = new MutableDouble( 0 );\n-        final MutableDouble endSideShortest = new MutableDouble( 0 );\n-        PathExpander<Double> dijkstraExpander = new DijkstraBidirectionalPathExpander( expander, shortestSoFar, true,\n-                startSideShortest, endSideShortest, epsilon );\n+        final MutableDouble shortestSoFar = new MutableDouble(Double.MAX_VALUE);\n+        final MutableDouble startSideShortest = new MutableDouble(0);\n+        final MutableDouble endSideShortest = new MutableDouble(0);\n+        PathExpander<Double> dijkstraExpander = new DijkstraBidirectionalPathExpander(expander, shortestSoFar, true,\n+          startSideShortest, endSideShortest, epsilon);\n \n         var transaction = context.transaction();\n-        TraversalDescription side = transaction.traversalDescription().expand( dijkstraExpander, stateFactory )\n-                .order( new DijkstraSelectorFactory( interest, costEvaluator ) )\n-                .evaluator( new DijkstraBidirectionalEvaluator( costEvaluator ) )\n-                .uniqueness( Uniqueness.NODE_PATH );\n+        TraversalDescription side = transaction.traversalDescription().expand(dijkstraExpander, stateFactory)\n+          .order(new DijkstraSelectorFactory(interest, costEvaluator))\n+          .evaluator(new DijkstraBidirectionalEvaluator(costEvaluator))\n+          .uniqueness(Uniqueness.NODE_PATH);\n \n         TraversalDescription startSide = side;\n         TraversalDescription endSide = side.reverse();\n \n         BidirectionalTraversalDescription traversal = transaction.bidirectionalTraversalDescription()\n-                .startSide( startSide )\n-                .endSide( endSide )\n-                .collisionEvaluator( Evaluators.all() )\n-                .collisionPolicy( ( evaluator, pathPredicate ) ->\n-                        new DijkstraBranchCollisionDetector( evaluator, costEvaluator, shortestSoFar, epsilon,\n-                                pathPredicate ) );\n-\n-        lastTraverser = traversal.traverse( start, end );\n+          .startSide(startSide)\n+          .endSide(endSide)\n+          .collisionEvaluator(Evaluators.all())\n+          .collisionPolicy((evaluator, pathPredicate) ->\n+            new DijkstraBranchCollisionDetector(evaluator, costEvaluator, shortestSoFar, epsilon,\n+              pathPredicate));\n+\n+        lastTraverser = traversal.traverse(start, end);\n         return lastTraverser;\n     }\n \n     @Override\n-    public WeightedPath findSinglePath( Node start, Node end )\n+    public WeightedPath findSinglePath(Node start, Node end)\n     {\n-        return firstOrNull( new TopFetchingWeightedPathIterator(\n-                traverser( start, end, PathInterestFactory.single( epsilon ) ).iterator(), costEvaluator, epsilon ) );\n+        return firstOrNull(new TopFetchingWeightedPathIterator(\n+          traverser(start, end, PathInterestFactory.single(epsilon)).iterator(), costEvaluator, epsilon));\n     }\n \n     @Override\n@@ -143,9 +145,9 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n         private final MutableDouble thisSideShortest;\n         private final boolean stopAfterLowestCost;\n \n-        DijkstraBidirectionalPathExpander( PathExpander<Double> source, MutableDouble shortestSoFar,\n-                boolean stopAfterLowestCost, MutableDouble thisSideShortest, MutableDouble otherSideShortest,\n-                double epsilon )\n+        DijkstraBidirectionalPathExpander(PathExpander<Double> source, MutableDouble shortestSoFar,\n+                                          boolean stopAfterLowestCost, MutableDouble thisSideShortest, MutableDouble otherSideShortest,\n+                                          double epsilon)\n         {\n             this.source = source;\n             this.shortestSoFar = shortestSoFar;\n@@ -156,22 +158,22 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n         }\n \n         @Override\n-        public Iterable<Relationship> expand( Path path, BranchState<Double> state )\n+        public Iterable<Relationship> expand(Path path, BranchState<Double> state)\n         {\n             double thisState = state.getState();\n-            thisSideShortest.setValue( thisState );\n-            if ( MathUtil.compare( thisState + otherSideShortest.doubleValue(), shortestSoFar.doubleValue(), epsilon ) > 0 && stopAfterLowestCost )\n+            thisSideShortest.setValue(thisState);\n+            if (MathUtil.compare(thisState + otherSideShortest.doubleValue(), shortestSoFar.doubleValue(), epsilon) > 0 && stopAfterLowestCost)\n             {\n                 return Iterables.emptyResourceIterable();\n             }\n-            return source.expand( path, state );\n+            return source.expand(path, state);\n         }\n \n         @Override\n         public PathExpander<Double> reverse()\n         {\n-            return new DijkstraBidirectionalPathExpander( source.reverse(), shortestSoFar, stopAfterLowestCost,\n-                    otherSideShortest, thisSideShortest, epsilon );\n+            return new DijkstraBidirectionalPathExpander(source.reverse(), shortestSoFar, stopAfterLowestCost,\n+              otherSideShortest, thisSideShortest, epsilon);\n         }\n     }\n \n@@ -179,19 +181,19 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n     {\n         private final CostEvaluator<Double> costEvaluator;\n \n-        DijkstraBidirectionalEvaluator( CostEvaluator<Double> costEvaluator )\n+        DijkstraBidirectionalEvaluator(CostEvaluator<Double> costEvaluator)\n         {\n             this.costEvaluator = costEvaluator;\n         }\n \n         @Override\n-        public Evaluation evaluate( Path path, BranchState<Double> state )\n+        public Evaluation evaluate(Path path, BranchState<Double> state)\n         {\n             double nextState = state.getState();\n-            if ( path.length() > 0 )\n+            if (path.length() > 0)\n             {\n-                nextState += costEvaluator.getCost( path.lastRelationship(), OUTGOING );\n-                state.setState( nextState );\n+                nextState += costEvaluator.getCost(path.lastRelationship(), OUTGOING);\n+                state.setState(nextState);\n             }\n             return Evaluation.EXCLUDE_AND_CONTINUE;\n         }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3361/DijkstraBidirectional.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3361/DijkstraBidirectional.java\nindex 58d2f389699..89a630e01ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3361/DijkstraBidirectional.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3361/DijkstraBidirectional.java\n@@ -116,8 +116,7 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n                 .collisionPolicy( ( evaluator, pathPredicate ) ->\n                         new DijkstraBranchCollisionDetector( evaluator, costEvaluator, shortestSoFar, epsilon,\n                                 pathPredicate ) );\n-\n-        lastTraverser = traversal.traverse( start, end );\n+lastTraverser = traversal.traverse( start, end );\n         return lastTraverser;\n     }\n \n@@ -196,4 +195,4 @@ public class DijkstraBidirectional implements PathFinder<WeightedPath>\n             return Evaluation.EXCLUDE_AND_CONTINUE;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}