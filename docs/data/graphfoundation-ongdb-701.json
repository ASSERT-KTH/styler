{
    "project_name": "graphfoundation-ongdb",
    "error_id": "701",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/701/RecordScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/701/RecordScanner.java\nindex 6f25a86aff8..ac651cbceb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/701/RecordScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/701/RecordScanner.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import org.neo4j.consistency.statistics.Statistics;\n@@ -26,59 +27,56 @@ import org.neo4j.helpers.progress.ProgressMonitorFactory;\n \n abstract class RecordScanner<RECORD> extends ConsistencyCheckerTask\n {\n-    protected final ProgressListener progress;\n-    protected final BoundedIterable<RECORD> store;\n-    protected final RecordProcessor<RECORD> processor;\n-    private final IterableStore[] warmUpStores;\n+  protected final ProgressListener progress;\n+  protected final BoundedIterable<RECORD> store;\n+  protected final RecordProcessor<RECORD> processor;\n+  private final IterableStore[] warmUpStores;\n+\n+  RecordScanner(String name, Statistics statistics, int threads, BoundedIterable<RECORD> store,\n+                ProgressMonitorFactory.MultiPartBuilder builder, RecordProcessor<RECORD> processor,\n+                IterableStore... warmUpStores)\n+  {\n+    super(name, statistics, threads);\n+    this.store = store;\n+    this.processor = processor;\n+    long maxCount = store.maxCount();\n+    this.progress = maxCount == -1\n+        ? builder.progressForUnknownPart(name)\n+        : builder.progressForPart(name, maxCount);\n+    this.warmUpStores = warmUpStores;\n+  }\n \n-    RecordScanner( String name, Statistics statistics, int threads, BoundedIterable<RECORD> store,\n-            ProgressMonitorFactory.MultiPartBuilder builder, RecordProcessor<RECORD> processor,\n-            IterableStore... warmUpStores )\n+  @Override\n+  public void run()\n+  {\n+    statistics.reset();\n+    if (warmUpStores != null)\n     {\n-        super( name, statistics, threads );\n-        this.store = store;\n-        this.processor = processor;\n-        long maxCount = store.maxCount();\n-        this.progress = maxCount == -1\n-                ? builder.progressForUnknownPart( name )\n-                : builder.progressForPart( name, maxCount );\n-        this.warmUpStores = warmUpStores;\n+      for (IterableStore store : warmUpStores)\n+      {\n+        store.warmUpCache();\n+      }\n     }\n-\n-    @Override\n-    public void run()\n+    try\n+    {\n+      scan();\n+    } finally\n     {\n-        statistics.reset();\n-        if ( warmUpStores != null )\n-        {\n-            for ( IterableStore store : warmUpStores )\n-            {\n-                store.warmUpCache();\n-            }\n-        }\n-        try\n-        {\n-            scan();\n-        }\n-        finally\n-        {\n-            try\n-            {\n-                store.close();\n-            }\n-            catch ( Exception e )\n-            {\n-                progress.failed( e );\n-                throw new RuntimeException( e );\n-            }\n-            finally\n-            {\n-                processor.close();\n-                progress.done();\n-            }\n-        }\n-        statistics.print( name );\n+      try\n+      {\n+        store.close();\n+      } catch (Exception e)\n+      {\n+        progress.failed(e);\n+        throw new RuntimeException(e);\n+      } finally\n+      {\n+        processor.close();\n+        progress.done();\n+      }\n     }\n+    statistics.print(name);\n+  }\n \n-    protected abstract void scan();\n+  protected abstract void scan();\n }\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/701/RecordScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/701/RecordScanner.java\nindex 6f25a86aff8..e11b50b14d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/701/RecordScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/701/RecordScanner.java\n@@ -39,10 +39,8 @@ abstract class RecordScanner<RECORD> extends ConsistencyCheckerTask\n         this.store = store;\n         this.processor = processor;\n         long maxCount = store.maxCount();\n-        this.progress = maxCount == -1\n-                ? builder.progressForUnknownPart( name )\n-                : builder.progressForPart( name, maxCount );\n-        this.warmUpStores = warmUpStores;\n+        this.progress = maxCount == -1 ? builder.progressForUnknownPart( name ) : builder.progressForPart( name, maxCount );\n+this.warmUpStores = warmUpStores;\n     }\n \n     @Override\n@@ -81,4 +79,4 @@ abstract class RecordScanner<RECORD> extends ConsistencyCheckerTask\n     }\n \n     protected abstract void scan();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "27",
                    "column": "30",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "50",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/701/RecordScanner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/701/RecordScanner.java\nindex 6f25a86aff8..441ad564b15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/701/RecordScanner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/701/RecordScanner.java\n@@ -24,24 +24,20 @@ import org.neo4j.helpers.collection.BoundedIterable;\n import org.neo4j.helpers.progress.ProgressListener;\n import org.neo4j.helpers.progress.ProgressMonitorFactory;\n \n-abstract class RecordScanner<RECORD> extends ConsistencyCheckerTask\n+abstract class RecordScanner <RECORD> extends ConsistencyCheckerTask\n {\n     protected final ProgressListener progress;\n     protected final BoundedIterable<RECORD> store;\n     protected final RecordProcessor<RECORD> processor;\n     private final IterableStore[] warmUpStores;\n \n-    RecordScanner( String name, Statistics statistics, int threads, BoundedIterable<RECORD> store,\n-            ProgressMonitorFactory.MultiPartBuilder builder, RecordProcessor<RECORD> processor,\n-            IterableStore... warmUpStores )\n+    RecordScanner( String name, Statistics statistics, int threads, BoundedIterable<RECORD> store, ProgressMonitorFactory.MultiPartBuilder builder, RecordProcessor<RECORD> processor, IterableStore... warmUpStores )\n     {\n         super( name, statistics, threads );\n         this.store = store;\n         this.processor = processor;\n         long maxCount = store.maxCount();\n-        this.progress = maxCount == -1\n-                ? builder.progressForUnknownPart( name )\n-                : builder.progressForPart( name, maxCount );\n+        this.progress = maxCount == - 1 ? builder.progressForUnknownPart( name ) : builder.progressForPart( name, maxCount );\n         this.warmUpStores = warmUpStores;\n     }\n \n@@ -51,11 +47,12 @@ abstract class RecordScanner<RECORD> extends ConsistencyCheckerTask\n         statistics.reset();\n         if ( warmUpStores != null )\n         {\n-            for ( IterableStore store : warmUpStores )\n+            for( IterableStore store : warmUpStores)\n             {\n                 store.warmUpCache();\n             }\n         }\n+\n         try\n         {\n             scan();\n@@ -77,8 +74,10 @@ abstract class RecordScanner<RECORD> extends ConsistencyCheckerTask\n                 progress.done();\n             }\n         }\n+\n         statistics.print( name );\n     }\n \n-    protected abstract void scan();\n-}\n+    protected abstract void scan()\n+    ;\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}