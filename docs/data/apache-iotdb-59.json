{
    "project_name": "apache-iotdb",
    "error_id": "59",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.db.qp.logical.crud;\n\nimport org.apache.iotdb.db.metadata.PartialPath;\nimport org.apache.iotdb.db.qp.logical.Operator;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/59/SelectOperator.java\nindex 4c260b906d8..7b171dc5db3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/59/SelectOperator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.logical.crud;\n \n import org.apache.iotdb.db.metadata.PartialPath;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/59/SelectOperator.java\nindex 4c260b906d8..064a30309c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/59/SelectOperator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.logical.crud;\n \n import org.apache.iotdb.db.metadata.PartialPath;\n@@ -29,7 +30,9 @@ import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.List;\n \n-/** this class maintains information from select clause. */\n+/**\n+ * this class maintains information from select clause.\n+ */\n public final class SelectOperator extends Operator {\n \n   private final ZoneId zoneId;\n@@ -43,7 +46,9 @@ public final class SelectOperator extends Operator {\n   private List<PartialPath> pathsCache;\n   private List<String> aggregationFunctionsCache;\n \n-  /** init with tokenIntType, default operatorType is <code>OperatorType.SELECT</code>. */\n+  /**\n+   * init with tokenIntType, default operatorType is <code>OperatorType.SELECT</code>.\n+   */\n   public SelectOperator(int tokenIntType, ZoneId zoneId) {\n     super(tokenIntType);\n     operatorType = OperatorType.SELECT;\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/59/SelectOperator.java\nindex 4c260b906d8..c90a9037a49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/59/SelectOperator.java\n@@ -24,26 +24,24 @@ import org.apache.iotdb.db.query.expression.Expression;\n import org.apache.iotdb.db.query.expression.ResultColumn;\n import org.apache.iotdb.db.query.expression.unary.FunctionExpression;\n import org.apache.iotdb.db.query.expression.unary.TimeSeriesOperand;\n-\n import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.List;\n \n /** this class maintains information from select clause. */\n+\n public final class SelectOperator extends Operator {\n \n   private final ZoneId zoneId;\n-\n   private boolean isLastQuery = false;\n   private boolean hasAggregationFunction = false;\n   private boolean hasTimeSeriesGeneratingFunction = false;\n-\n   private List<ResultColumn> resultColumns = new ArrayList<>();\n-\n   private List<PartialPath> pathsCache;\n   private List<String> aggregationFunctionsCache;\n \n   /** init with tokenIntType, default operatorType is <code>OperatorType.SELECT</code>. */\n+\n   public SelectOperator(int tokenIntType, ZoneId zoneId) {\n     super(tokenIntType);\n     operatorType = OperatorType.SELECT;\n@@ -82,7 +80,6 @@ public final class SelectOperator extends Operator {\n \n   public void setResultColumns(List<ResultColumn> resultColumns) {\n     this.resultColumns = resultColumns;\n-\n     pathsCache = null;\n     aggregationFunctionsCache = null;\n   }\n@@ -98,11 +95,8 @@ public final class SelectOperator extends Operator {\n         Expression expression = resultColumn.getExpression();\n         if (expression instanceof TimeSeriesOperand) {\n           pathsCache.add(((TimeSeriesOperand) expression).getPath());\n-        } else if (expression instanceof FunctionExpression\n-            && expression.isAggregationFunctionExpression()) {\n-          pathsCache.add(\n-              ((TimeSeriesOperand) ((FunctionExpression) expression).getExpressions().get(0))\n-                  .getPath());\n+        } else if (expression instanceof FunctionExpression && expression.isAggregationFunctionExpression()) {\n+          pathsCache.add(((TimeSeriesOperand) ((FunctionExpression) expression).getExpressions().get(0)).getPath());\n         } else {\n           pathsCache.add(null);\n         }\n@@ -119,12 +113,11 @@ public final class SelectOperator extends Operator {\n       aggregationFunctionsCache = new ArrayList<>();\n       for (ResultColumn resultColumn : resultColumns) {\n         Expression expression = resultColumn.getExpression();\n-        aggregationFunctionsCache.add(\n-            expression instanceof FunctionExpression\n-                ? ((FunctionExpression) resultColumn.getExpression()).getFunctionName()\n-                : null);\n+        aggregationFunctionsCache.add(expression instanceof FunctionExpression\n+? ((FunctionExpression) resultColumn.getExpression()).getFunctionName()\n+: null);\n       }\n     }\n     return aggregationFunctionsCache;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/59/SelectOperator.java\nindex 4c260b906d8..7b171dc5db3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/59/SelectOperator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.logical.crud;\n \n import org.apache.iotdb.db.metadata.PartialPath;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/59/SelectOperator.java\nindex 4c260b906d8..7b171dc5db3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/59/SelectOperator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/59/SelectOperator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.qp.logical.crud;\n \n import org.apache.iotdb.db.metadata.PartialPath;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}