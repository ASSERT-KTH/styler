{
    "project_name": "neo4j-neo4j",
    "error_id": "131",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/131/WritableIndexPartition.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/131/WritableIndexPartition.java\nindex c96d6326505..3ee71b8a03a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/131/WritableIndexPartition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/131/WritableIndexPartition.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index.partition;\n \n import org.apache.lucene.index.IndexWriter;\n@@ -33,6 +34,7 @@ import org.neo4j.kernel.api.impl.index.backup.LuceneIndexSnapshots;\n \n /**\n  * Represents a single writable partition of a partitioned lucene index.\n+ *\n  * @see AbstractIndexPartition\n  */\n public class WritableIndexPartition extends AbstractIndexPartition\n@@ -40,11 +42,11 @@ public class WritableIndexPartition extends AbstractIndexPartition\n     private final IndexWriter indexWriter;\n     private final SearcherManager searcherManager;\n \n-    public WritableIndexPartition( Path partitionFolder, Directory directory, IndexWriterConfig writerConfig ) throws IOException\n+    public WritableIndexPartition(Path partitionFolder, Directory directory, IndexWriterConfig writerConfig) throws IOException\n     {\n-        super( partitionFolder, directory );\n-        this.indexWriter = new IndexWriter( directory, writerConfig );\n-        this.searcherManager = new SearcherManager( indexWriter, new Neo4jSearcherFactory() );\n+        super(partitionFolder, directory);\n+        this.indexWriter = new IndexWriter(directory, writerConfig);\n+        this.searcherManager = new SearcherManager(indexWriter, new Neo4jSearcherFactory());\n     }\n \n     /**\n@@ -62,7 +64,7 @@ public class WritableIndexPartition extends AbstractIndexPartition\n     @Override\n     public PartitionSearcher acquireSearcher() throws IOException\n     {\n-        return new PartitionSearcher( searcherManager );\n+        return new PartitionSearcher(searcherManager);\n     }\n \n     /**\n@@ -80,7 +82,7 @@ public class WritableIndexPartition extends AbstractIndexPartition\n     @Override\n     public void close() throws IOException\n     {\n-        IOUtils.closeAll( searcherManager, indexWriter, getDirectory() );\n+        IOUtils.closeAll(searcherManager, indexWriter, getDirectory());\n     }\n \n     /**\n@@ -89,6 +91,6 @@ public class WritableIndexPartition extends AbstractIndexPartition\n     @Override\n     public ResourceIterator<Path> snapshot() throws IOException\n     {\n-        return LuceneIndexSnapshots.forIndex( partitionFolder, indexWriter );\n+        return LuceneIndexSnapshots.forIndex(partitionFolder, indexWriter);\n     }\n }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}