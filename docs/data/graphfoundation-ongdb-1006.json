{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1006",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "191",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1006/HeartbeatState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1006/HeartbeatState.java\nindex e6bbb4ea4d9..c81e37063ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1006/HeartbeatState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1006/HeartbeatState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.heartbeat;\n \n import java.net.URI;\n@@ -37,256 +38,255 @@ import static org.neo4j.cluster.com.message.Message.to;\n  * State machine that implements the {@link Heartbeat} API\n  */\n public enum HeartbeatState\n-        implements State<HeartbeatContext, HeartbeatMessage>\n+    implements State<HeartbeatContext, HeartbeatMessage>\n {\n-    start\n+  start\n+      {\n+        @Override\n+        public HeartbeatState handle(HeartbeatContext context,\n+                                     Message<HeartbeatMessage> message,\n+                                     MessageHolder outgoing\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case addHeartbeatListener:\n+            {\n+              context.addHeartbeatListener(message.getPayload());\n+              break;\n+            }\n+\n+            case removeHeartbeatListener:\n             {\n-                @Override\n-                public HeartbeatState handle( HeartbeatContext context,\n-                                              Message<HeartbeatMessage> message,\n-                                              MessageHolder outgoing\n-                )\n+              context.removeHeartbeatListener(message.getPayload());\n+              break;\n+            }\n+\n+            case join:\n+            {\n+              for (InstanceId instanceId : context.getOtherInstances())\n+              {\n+                // Setup heartbeat timeouts for the other instance\n+                context.setTimeout(\n+                    HeartbeatMessage.i_am_alive + \"-\" + instanceId,\n+                    timeout(HeartbeatMessage.timed_out, message, instanceId));\n+\n+                // Send first heartbeat immediately\n+                outgoing.offer(timeout(HeartbeatMessage.sendHeartbeat, message, instanceId));\n+              }\n+\n+              return heartbeat;\n+            }\n+\n+            default:\n+              break;\n+          }\n+\n+          return this;\n+        }\n+      },\n+\n+  heartbeat\n+      {\n+        @Override\n+        public HeartbeatState handle(HeartbeatContext context,\n+                                     Message<HeartbeatMessage> message,\n+                                     MessageHolder outgoing\n+        )\n+        {\n+          switch (message.getMessageType())\n+          {\n+            case i_am_alive:\n+            {\n+              HeartbeatMessage.IAmAliveState state = message.getPayload();\n+\n+              if (context.isMe(state.getServer()))\n+              {\n+                break;\n+              }\n+\n+              if (state.getServer() == null)\n+              {\n+                break;\n+              }\n+\n+              if (context.alive(state.getServer()))\n+              {\n+                // Send suspicions messages to all non-failed servers\n+                for (InstanceId aliveServer : context.getAlive())\n                 {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case addHeartbeatListener:\n-                        {\n-                            context.addHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n-\n-                        case removeHeartbeatListener:\n-                        {\n-                            context.removeHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n-\n-                        case join:\n-                        {\n-                            for ( InstanceId instanceId : context.getOtherInstances() )\n-                            {\n-                                // Setup heartbeat timeouts for the other instance\n-                                context.setTimeout(\n-                                        HeartbeatMessage.i_am_alive + \"-\" + instanceId,\n-                                        timeout( HeartbeatMessage.timed_out, message, instanceId ) );\n-\n-                                // Send first heartbeat immediately\n-                                outgoing.offer( timeout( HeartbeatMessage.sendHeartbeat, message, instanceId ) );\n-                            }\n-\n-                            return heartbeat;\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n-\n-                    return this;\n+                  if (!aliveServer.equals(context.getMyId()))\n+                  {\n+                    URI aliveServerUri =\n+                        context.getUriForId(aliveServer);\n+                    outgoing.offer(Message.to(HeartbeatMessage.suspicions, aliveServerUri,\n+                        new HeartbeatMessage.SuspicionsState(context.getSuspicionsFor(\n+                            context.getMyId()))));\n+                  }\n                 }\n-            },\n+              }\n+\n+              resetTimeout(context, message, state);\n \n-    heartbeat\n+              // Check if this server knows something that we don't\n+              if (message.hasHeader(\"last-learned\"))\n+              {\n+                long lastLearned = Long.parseLong(message.getHeader(\"last-learned\"));\n+                if (lastLearned > context.getLastKnownLearnedInstanceInCluster())\n+                {\n+                  /*\n+                   * Need to pass the HEADER_INSTANCE_ID header to catchUp state,\n+                   * as the instance in catchUp state should be aware of at least one\n+                   * alive member of the cluster. HEADER_FROM used to be abused for this reason\n+                   * previously, so we leave it here for legacy reasons - should really have\n+                   * no use within the current codebase but mixed version clusters may\n+                   * make use of it.\n+                   */\n+                  Message<LearnerMessage> catchUpMessage = message.copyHeadersTo(\n+                      internal(LearnerMessage.catchUp, lastLearned),\n+                      Message.HEADER_FROM, Message.HEADER_INSTANCE_ID);\n+                  outgoing.offer(catchUpMessage);\n+                }\n+              }\n+\n+              break;\n+            }\n+\n+            case timed_out:\n             {\n-                @Override\n-                public HeartbeatState handle( HeartbeatContext context,\n-                                              Message<HeartbeatMessage> message,\n-                                              MessageHolder outgoing\n-                )\n+              InstanceId server = message.getPayload();\n+              context.getLog(HeartbeatState.class)\n+                  .debug(\"Received timed out for server \" + server);\n+              // Check if this node is no longer a part of the cluster\n+              if (context.getMembers().containsKey(server))\n+              {\n+                context.suspect(server);\n+\n+                context.setTimeout(HeartbeatMessage.i_am_alive + \"-\" +\n+                    server, timeout(HeartbeatMessage.timed_out, message, server));\n+\n+                // Send suspicions messages to all non-failed servers\n+                for (InstanceId aliveServer : context.getAlive())\n                 {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case i_am_alive:\n-                        {\n-                            HeartbeatMessage.IAmAliveState state = message.getPayload();\n-\n-                            if ( context.isMe( state.getServer() ) )\n-                            {\n-                                break;\n-                            }\n-\n-                            if ( state.getServer() == null )\n-                            {\n-                                break;\n-                            }\n-\n-                            if ( context.alive( state.getServer() ) )\n-                            {\n-                                // Send suspicions messages to all non-failed servers\n-                                for ( InstanceId aliveServer : context.getAlive() )\n-                                {\n-                                    if ( !aliveServer.equals( context.getMyId() ) )\n-                                    {\n-                                        URI aliveServerUri =\n-                                                context.getUriForId( aliveServer );\n-                                        outgoing.offer( Message.to( HeartbeatMessage.suspicions, aliveServerUri,\n-                                                new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor(\n-                                                        context.getMyId() ) ) ) );\n-                                    }\n-                                }\n-                            }\n-\n-                            resetTimeout( context, message, state );\n-\n-                            // Check if this server knows something that we don't\n-                            if ( message.hasHeader( \"last-learned\" ) )\n-                            {\n-                                long lastLearned = Long.parseLong( message.getHeader( \"last-learned\" ) );\n-                                if ( lastLearned > context.getLastKnownLearnedInstanceInCluster() )\n-                                {\n-                                    /*\n-                                     * Need to pass the HEADER_INSTANCE_ID header to catchUp state,\n-                                     * as the instance in catchUp state should be aware of at least one\n-                                     * alive member of the cluster. HEADER_FROM used to be abused for this reason\n-                                     * previously, so we leave it here for legacy reasons - should really have\n-                                     * no use within the current codebase but mixed version clusters may\n-                                     * make use of it.\n-                                     */\n-                                    Message<LearnerMessage> catchUpMessage = message.copyHeadersTo(\n-                                            internal( LearnerMessage.catchUp, lastLearned ),\n-                                            Message.HEADER_FROM, Message.HEADER_INSTANCE_ID );\n-                                    outgoing.offer( catchUpMessage );\n-                                }\n-                            }\n-\n-                            break;\n-                        }\n-\n-                        case timed_out:\n-                        {\n-                            InstanceId server = message.getPayload();\n-                            context.getLog( HeartbeatState.class )\n-                                    .debug( \"Received timed out for server \" + server );\n-                            // Check if this node is no longer a part of the cluster\n-                            if ( context.getMembers().containsKey( server ) )\n-                            {\n-                                context.suspect( server );\n-\n-                                context.setTimeout( HeartbeatMessage.i_am_alive + \"-\" +\n-                                        server, timeout( HeartbeatMessage.timed_out, message, server ) );\n-\n-                                // Send suspicions messages to all non-failed servers\n-                                for ( InstanceId aliveServer : context.getAlive() )\n-                                {\n-                                    if ( !aliveServer.equals( context.getMyId() ) )\n-                                    {\n-                                        URI sendTo = context.getUriForId( aliveServer );\n-                                        outgoing.offer( Message.to( HeartbeatMessage.suspicions, sendTo,\n-                                                new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor(\n-                                                        context.getMyId() ) ) ) );\n-                                    }\n-                                }\n-                            }\n-                            else\n-                            {\n-                                // If no longer part of cluster, then don't bother\n-                                context.serverLeftCluster( server );\n-                            }\n-                            break;\n-                        }\n-\n-                        case sendHeartbeat:\n-                        {\n-                            InstanceId to = message.getPayload();\n-\n-                            if ( !context.isMe( to ) )\n-                            {\n-                                // Check if this node is no longer a part of the cluster\n-                                if ( context.getMembers().containsKey( to ) )\n-                                {\n-                                    URI toSendTo = context.getUriForId( to );\n-                                    // Send heartbeat message to given server\n-                                    outgoing.offer( to( HeartbeatMessage.i_am_alive, toSendTo,\n-                                            new HeartbeatMessage.IAmAliveState(\n-                                                    context.getMyId() ) )\n-                                            .setHeader( \"last-learned\",\n-                                                    context.getLastLearnedInstanceId() + \"\" ) );\n-\n-                                    // Set new timeout to send heartbeat to this host\n-                                    context.setTimeout(\n-                                            HeartbeatMessage.sendHeartbeat + \"-\" + to,\n-                                            timeout( HeartbeatMessage.sendHeartbeat, message, to ) );\n-                                }\n-                            }\n-                            break;\n-                        }\n-\n-                        case reset_send_heartbeat:\n-                        {\n-                            InstanceId to = message.getPayload();\n-\n-                            if ( !context.isMe( to ) )\n-                            {\n-                                String timeoutName = HeartbeatMessage.sendHeartbeat + \"-\" + to;\n-                                context.cancelTimeout( timeoutName );\n-                                context.setTimeout( timeoutName, Message.timeout(\n-                                        HeartbeatMessage.sendHeartbeat, message, to ) );\n-                            }\n-                            break;\n-                        }\n-\n-                        case suspicions:\n-                        {\n-                            HeartbeatMessage.SuspicionsState suspicions = message.getPayload();\n-\n-                            InstanceId fromId = new InstanceId(\n-                                    Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) );\n-\n-                            context.getLog( HeartbeatState.class )\n-                                    .debug( format( \"Received suspicions as %s from %s\", suspicions, fromId ) );\n-\n-                            /*\n-                             * Remove ourselves from the suspicions received - we just received a message,\n-                             * it's not normal to be considered failed. Whatever it was, it was transient and now it has\n-                             * passed.\n-                             */\n-                            suspicions.getSuspicions().remove( context.getMyId() );\n-                            context.suspicions( fromId, suspicions.getSuspicions() );\n-\n-                            break;\n-                        }\n-\n-                        case leave:\n-                        {\n-                            context.getLog( HeartbeatState.class ).debug( \"Received leave\" );\n-                            return start;\n-                        }\n-\n-                        case addHeartbeatListener:\n-                        {\n-                            context.addHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n-\n-                        case removeHeartbeatListener:\n-                        {\n-                            context.removeHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n-\n-                    return this;\n+                  if (!aliveServer.equals(context.getMyId()))\n+                  {\n+                    URI sendTo = context.getUriForId(aliveServer);\n+                    outgoing.offer(Message.to(HeartbeatMessage.suspicions, sendTo,\n+                        new HeartbeatMessage.SuspicionsState(context.getSuspicionsFor(\n+                            context.getMyId()))));\n+                  }\n                 }\n+              } else\n+              {\n+                // If no longer part of cluster, then don't bother\n+                context.serverLeftCluster(server);\n+              }\n+              break;\n+            }\n+\n+            case sendHeartbeat:\n+            {\n+              InstanceId to = message.getPayload();\n \n-                private void resetTimeout( HeartbeatContext context, Message<HeartbeatMessage> message,\n-                                           HeartbeatMessage.IAmAliveState state )\n+              if (!context.isMe(to))\n+              {\n+                // Check if this node is no longer a part of the cluster\n+                if (context.getMembers().containsKey(to))\n                 {\n-                    String key = HeartbeatMessage.i_am_alive + \"-\" + state.getServer();\n-                    Message<? extends MessageType> oldTimeout = context.cancelTimeout( key );\n-                    if ( oldTimeout != null && oldTimeout.hasHeader( Message.HEADER_TIMEOUT_COUNT ) )\n-                    {\n-                        int timeoutCount = Integer.parseInt( oldTimeout.getHeader( Message.HEADER_TIMEOUT_COUNT ) );\n-                        if ( timeoutCount > 0 )\n-                        {\n-                            long timeout = context.getTimeoutFor( oldTimeout );\n-                            context.getLog( HeartbeatState.class ).debug(\n-                                    \"Received \" + state + \" after missing \" + timeoutCount +\n-                                            \" (\" + timeout * timeoutCount + \"ms)\" );\n-                        }\n-                    }\n-                    context.setTimeout( key, timeout( HeartbeatMessage.timed_out, message, state.getServer() ) );\n+                  URI toSendTo = context.getUriForId(to);\n+                  // Send heartbeat message to given server\n+                  outgoing.offer(to(HeartbeatMessage.i_am_alive, toSendTo,\n+                      new HeartbeatMessage.IAmAliveState(\n+                          context.getMyId()))\n+                      .setHeader(\"last-learned\",\n+                          context.getLastLearnedInstanceId() + \"\"));\n+\n+                  // Set new timeout to send heartbeat to this host\n+                  context.setTimeout(\n+                      HeartbeatMessage.sendHeartbeat + \"-\" + to,\n+                      timeout(HeartbeatMessage.sendHeartbeat, message, to));\n                 }\n+              }\n+              break;\n+            }\n+\n+            case reset_send_heartbeat:\n+            {\n+              InstanceId to = message.getPayload();\n+\n+              if (!context.isMe(to))\n+              {\n+                String timeoutName = HeartbeatMessage.sendHeartbeat + \"-\" + to;\n+                context.cancelTimeout(timeoutName);\n+                context.setTimeout(timeoutName, Message.timeout(\n+                    HeartbeatMessage.sendHeartbeat, message, to));\n+              }\n+              break;\n+            }\n+\n+            case suspicions:\n+            {\n+              HeartbeatMessage.SuspicionsState suspicions = message.getPayload();\n+\n+              InstanceId fromId = new InstanceId(\n+                  Integer.parseInt(message.getHeader(Message.HEADER_INSTANCE_ID)));\n+\n+              context.getLog(HeartbeatState.class)\n+                  .debug(format(\"Received suspicions as %s from %s\", suspicions, fromId));\n+\n+              /*\n+               * Remove ourselves from the suspicions received - we just received a message,\n+               * it's not normal to be considered failed. Whatever it was, it was transient and now it has\n+               * passed.\n+               */\n+              suspicions.getSuspicions().remove(context.getMyId());\n+              context.suspicions(fromId, suspicions.getSuspicions());\n+\n+              break;\n+            }\n+\n+            case leave:\n+            {\n+              context.getLog(HeartbeatState.class).debug(\"Received leave\");\n+              return start;\n+            }\n+\n+            case addHeartbeatListener:\n+            {\n+              context.addHeartbeatListener(message.getPayload());\n+              break;\n+            }\n+\n+            case removeHeartbeatListener:\n+            {\n+              context.removeHeartbeatListener(message.getPayload());\n+              break;\n+            }\n+\n+            default:\n+              break;\n+          }\n+\n+          return this;\n+        }\n+\n+        private void resetTimeout(HeartbeatContext context, Message<HeartbeatMessage> message,\n+                                  HeartbeatMessage.IAmAliveState state)\n+        {\n+          String key = HeartbeatMessage.i_am_alive + \"-\" + state.getServer();\n+          Message<? extends MessageType> oldTimeout = context.cancelTimeout(key);\n+          if (oldTimeout != null && oldTimeout.hasHeader(Message.HEADER_TIMEOUT_COUNT))\n+          {\n+            int timeoutCount = Integer.parseInt(oldTimeout.getHeader(Message.HEADER_TIMEOUT_COUNT));\n+            if (timeoutCount > 0)\n+            {\n+              long timeout = context.getTimeoutFor(oldTimeout);\n+              context.getLog(HeartbeatState.class).debug(\n+                  \"Received \" + state + \" after missing \" + timeoutCount +\n+                      \" (\" + timeout * timeoutCount + \"ms)\");\n             }\n+          }\n+          context.setTimeout(key, timeout(HeartbeatMessage.timed_out, message, state.getServer()));\n+        }\n+      }\n }\n",
            "diff_size": 437
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "column": "49",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1006/HeartbeatState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1006/HeartbeatState.java\nindex e6bbb4ea4d9..fb5f86ba383 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1006/HeartbeatState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1006/HeartbeatState.java\n@@ -36,70 +36,57 @@ import static org.neo4j.cluster.com.message.Message.to;\n /**\n  * State machine that implements the {@link Heartbeat} API\n  */\n-public enum HeartbeatState\n-        implements State<HeartbeatContext, HeartbeatMessage>\n+public enum HeartbeatState implements State<HeartbeatContext, HeartbeatMessage>\n {\n     start\n-            {\n+{\n                 @Override\n-                public HeartbeatState handle( HeartbeatContext context,\n-                                              Message<HeartbeatMessage> message,\n-                                              MessageHolder outgoing\n-                )\n+                public HeartbeatState handle( HeartbeatContext context, Message<HeartbeatMessage> message,\n+                                              MessageHolder outgoing )\n                 {\n                     switch ( message.getMessageType() )\n                     {\n-                        case addHeartbeatListener:\n+case addHeartbeatListener:\n                         {\n                             context.addHeartbeatListener( message.getPayload() );\n                             break;\n                         }\n-\n-                        case removeHeartbeatListener:\n+    case removeHeartbeatListener:\n                         {\n                             context.removeHeartbeatListener( message.getPayload() );\n                             break;\n                         }\n-\n-                        case join:\n+    case join:\n                         {\n                             for ( InstanceId instanceId : context.getOtherInstances() )\n                             {\n                                 // Setup heartbeat timeouts for the other instance\n-                                context.setTimeout(\n-                                        HeartbeatMessage.i_am_alive + \"-\" + instanceId,\n+                                context.setTimeout( HeartbeatMessage.i_am_alive + \"-\" + instanceId,\n                                         timeout( HeartbeatMessage.timed_out, message, instanceId ) );\n-\n-                                // Send first heartbeat immediately\n+    // Send first heartbeat immediately\n                                 outgoing.offer( timeout( HeartbeatMessage.sendHeartbeat, message, instanceId ) );\n                             }\n \n                             return heartbeat;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n-            },\n-\n-    heartbeat\n-            {\n+            }, heartbeat\n+{\n                 @Override\n-                public HeartbeatState handle( HeartbeatContext context,\n-                                              Message<HeartbeatMessage> message,\n-                                              MessageHolder outgoing\n-                )\n+                public HeartbeatState handle( HeartbeatContext context, Message<HeartbeatMessage> message,\n+                                              MessageHolder outgoing )\n                 {\n                     switch ( message.getMessageType() )\n                     {\n-                        case i_am_alive:\n+case i_am_alive:\n                         {\n                             HeartbeatMessage.IAmAliveState state = message.getPayload();\n-\n-                            if ( context.isMe( state.getServer() ) )\n+if ( context.isMe( state.getServer() ) )\n                             {\n                                 break;\n                             }\n@@ -116,12 +103,9 @@ public enum HeartbeatState\n                                 {\n                                     if ( !aliveServer.equals( context.getMyId() ) )\n                                     {\n-                                        URI aliveServerUri =\n-                                                context.getUriForId( aliveServer );\n-                                        outgoing.offer( Message.to( HeartbeatMessage.suspicions, aliveServerUri,\n-                                                new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor(\n-                                                        context.getMyId() ) ) ) );\n-                                    }\n+                                        URI aliveServerUri = context.getUriForId( aliveServer );\n+outgoing.offer( Message.to( HeartbeatMessage.suspicions, aliveServerUri, new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor( context.getMyId() ) ) ) );\n+    }\n                                 }\n                             }\n \n@@ -131,7 +115,7 @@ public enum HeartbeatState\n                             if ( message.hasHeader( \"last-learned\" ) )\n                             {\n                                 long lastLearned = Long.parseLong( message.getHeader( \"last-learned\" ) );\n-                                if ( lastLearned > context.getLastKnownLearnedInstanceInCluster() )\n+                                if ( lastLearned> context.getLastKnownLearnedInstanceInCluster() )\n                                 {\n                                     /*\n                                      * Need to pass the HEADER_INSTANCE_ID header to catchUp state,\n@@ -141,39 +125,30 @@ public enum HeartbeatState\n                                      * no use within the current codebase but mixed version clusters may\n                                      * make use of it.\n                                      */\n-                                    Message<LearnerMessage> catchUpMessage = message.copyHeadersTo(\n-                                            internal( LearnerMessage.catchUp, lastLearned ),\n-                                            Message.HEADER_FROM, Message.HEADER_INSTANCE_ID );\n-                                    outgoing.offer( catchUpMessage );\n+                                    Message<LearnerMessage> catchUpMessage = message.copyHeadersTo( internal( LearnerMessage.catchUp, lastLearned ), Message.HEADER_FROM, Message.HEADER_INSTANCE_ID );\n+outgoing.offer( catchUpMessage );\n                                 }\n                             }\n \n                             break;\n                         }\n-\n-                        case timed_out:\n+    case timed_out:\n                         {\n                             InstanceId server = message.getPayload();\n-                            context.getLog( HeartbeatState.class )\n-                                    .debug( \"Received timed out for server \" + server );\n-                            // Check if this node is no longer a part of the cluster\n+                            context.getLog( HeartbeatState.class ).debug( \"Received timed out for server \" + server );\n+    // Check if this node is no longer a part of the cluster\n                             if ( context.getMembers().containsKey( server ) )\n                             {\n                                 context.suspect( server );\n-\n-                                context.setTimeout( HeartbeatMessage.i_am_alive + \"-\" +\n-                                        server, timeout( HeartbeatMessage.timed_out, message, server ) );\n-\n-                                // Send suspicions messages to all non-failed servers\n+context.setTimeout( HeartbeatMessage.i_am_alive + \"-\" + server, timeout( HeartbeatMessage.timed_out, message, server ) );\n+    // Send suspicions messages to all non-failed servers\n                                 for ( InstanceId aliveServer : context.getAlive() )\n                                 {\n                                     if ( !aliveServer.equals( context.getMyId() ) )\n                                     {\n                                         URI sendTo = context.getUriForId( aliveServer );\n-                                        outgoing.offer( Message.to( HeartbeatMessage.suspicions, sendTo,\n-                                                new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor(\n-                                                        context.getMyId() ) ) ) );\n-                                    }\n+                                        outgoing.offer( Message.to( HeartbeatMessage.suspicions, sendTo, new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor( context.getMyId() ) ) ) );\n+    }\n                                 }\n                             }\n                             else\n@@ -183,96 +158,74 @@ public enum HeartbeatState\n                             }\n                             break;\n                         }\n-\n-                        case sendHeartbeat:\n+    case sendHeartbeat:\n                         {\n                             InstanceId to = message.getPayload();\n-\n-                            if ( !context.isMe( to ) )\n+if ( !context.isMe( to ) )\n                             {\n                                 // Check if this node is no longer a part of the cluster\n                                 if ( context.getMembers().containsKey( to ) )\n                                 {\n                                     URI toSendTo = context.getUriForId( to );\n                                     // Send heartbeat message to given server\n-                                    outgoing.offer( to( HeartbeatMessage.i_am_alive, toSendTo,\n-                                            new HeartbeatMessage.IAmAliveState(\n-                                                    context.getMyId() ) )\n-                                            .setHeader( \"last-learned\",\n+                                    outgoing.offer( to( HeartbeatMessage.i_am_alive, toSendTo, new HeartbeatMessage.IAmAliveState( context.getMyId() ) ).setHeader( \"last-learned\",\n                                                     context.getLastLearnedInstanceId() + \"\" ) );\n-\n-                                    // Set new timeout to send heartbeat to this host\n-                                    context.setTimeout(\n-                                            HeartbeatMessage.sendHeartbeat + \"-\" + to,\n+    // Set new timeout to send heartbeat to this host\n+                                    context.setTimeout( HeartbeatMessage.sendHeartbeat + \"-\" + to,\n                                             timeout( HeartbeatMessage.sendHeartbeat, message, to ) );\n-                                }\n+    }\n                             }\n                             break;\n                         }\n-\n-                        case reset_send_heartbeat:\n+    case reset_send_heartbeat:\n                         {\n                             InstanceId to = message.getPayload();\n-\n-                            if ( !context.isMe( to ) )\n+if ( !context.isMe( to ) )\n                             {\n                                 String timeoutName = HeartbeatMessage.sendHeartbeat + \"-\" + to;\n                                 context.cancelTimeout( timeoutName );\n-                                context.setTimeout( timeoutName, Message.timeout(\n-                                        HeartbeatMessage.sendHeartbeat, message, to ) );\n+                                context.setTimeout( timeoutName, Message.timeout( HeartbeatMessage.sendHeartbeat, message, to ) );\n                             }\n                             break;\n                         }\n-\n-                        case suspicions:\n+    case suspicions:\n                         {\n                             HeartbeatMessage.SuspicionsState suspicions = message.getPayload();\n-\n-                            InstanceId fromId = new InstanceId(\n-                                    Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) );\n-\n-                            context.getLog( HeartbeatState.class )\n-                                    .debug( format( \"Received suspicions as %s from %s\", suspicions, fromId ) );\n-\n-                            /*\n+InstanceId fromId = new InstanceId( Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) );\n+context.getLog( HeartbeatState.class ).debug( format( \"Received suspicions as %s from %s\", suspicions, fromId ) );\n+    /*\n                              * Remove ourselves from the suspicions received - we just received a message,\n                              * it's not normal to be considered failed. Whatever it was, it was transient and now it has\n                              * passed.\n                              */\n                             suspicions.getSuspicions().remove( context.getMyId() );\n                             context.suspicions( fromId, suspicions.getSuspicions() );\n-\n-                            break;\n+break;\n                         }\n-\n-                        case leave:\n+    case leave:\n                         {\n                             context.getLog( HeartbeatState.class ).debug( \"Received leave\" );\n                             return start;\n                         }\n-\n-                        case addHeartbeatListener:\n+    case addHeartbeatListener:\n                         {\n                             context.addHeartbeatListener( message.getPayload() );\n                             break;\n                         }\n-\n-                        case removeHeartbeatListener:\n+    case removeHeartbeatListener:\n                         {\n                             context.removeHeartbeatListener( message.getPayload() );\n                             break;\n                         }\n-\n-                        default:\n+    default:\n                             break;\n-                    }\n+    }\n \n                     return this;\n                 }\n \n-                private void resetTimeout( HeartbeatContext context, Message<HeartbeatMessage> message,\n-                                           HeartbeatMessage.IAmAliveState state )\n-                {\n+                private void resetTimeout( HeartbeatContext context, Message<HeartbeatMessage> message, HeartbeatMessage.IAmAliveState state )\n+{\n                     String key = HeartbeatMessage.i_am_alive + \"-\" + state.getServer();\n                     Message<? extends MessageType> oldTimeout = context.cancelTimeout( key );\n                     if ( oldTimeout != null && oldTimeout.hasHeader( Message.HEADER_TIMEOUT_COUNT ) )\n@@ -281,12 +234,10 @@ public enum HeartbeatState\n                         if ( timeoutCount > 0 )\n                         {\n                             long timeout = context.getTimeoutFor( oldTimeout );\n-                            context.getLog( HeartbeatState.class ).debug(\n-                                    \"Received \" + state + \" after missing \" + timeoutCount +\n-                                            \" (\" + timeout * timeoutCount + \"ms)\" );\n-                        }\n+                            context.getLog( HeartbeatState.class ).debug( \"Received \" + state + \" after missing \" + timeoutCount + \" (\" + timeout * timeoutCount + \"ms)\" );\n+    }\n                     }\n                     context.setTimeout( key, timeout( HeartbeatMessage.timed_out, message, state.getServer() ) );\n                 }\n             }\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 103
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "80",
                    "severity": "error",
                    "message": "'{' at column 80 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "column": "98",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "column": "105",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 276).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 271).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "column": "105",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 268).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 297).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "232",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "236",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "236",
                    "column": "116",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "238",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 240).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "column": "166",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "242",
                    "column": "200",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "242",
                    "column": "216",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "248",
                    "column": "85",
                    "severity": "error",
                    "message": "'}' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "248",
                    "column": "86",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1006/HeartbeatState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1006/HeartbeatState.java\nindex e6bbb4ea4d9..b9496065251 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1006/HeartbeatState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1006/HeartbeatState.java\n@@ -20,119 +20,103 @@\n package org.neo4j.cluster.protocol.heartbeat;\n \n import java.net.URI;\n-\n import org.neo4j.cluster.InstanceId;\n import org.neo4j.cluster.com.message.Message;\n import org.neo4j.cluster.com.message.MessageHolder;\n import org.neo4j.cluster.com.message.MessageType;\n import org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.LearnerMessage;\n import org.neo4j.cluster.statemachine.State;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.cluster.com.message.Message.internal;\n+\n import static org.neo4j.cluster.com.message.Message.timeout;\n+\n import static org.neo4j.cluster.com.message.Message.to;\n \n /**\n  * State machine that implements the {@link Heartbeat} API\n  */\n-public enum HeartbeatState\n-        implements State<HeartbeatContext, HeartbeatMessage>\n-{\n-    start\n-            {\n-                @Override\n-                public HeartbeatState handle( HeartbeatContext context,\n-                                              Message<HeartbeatMessage> message,\n-                                              MessageHolder outgoing\n-                )\n-                {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case addHeartbeatListener:\n-                        {\n-                            context.addHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n-\n-                        case removeHeartbeatListener:\n-                        {\n-                            context.removeHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n \n-                        case join:\n-                        {\n-                            for ( InstanceId instanceId : context.getOtherInstances() )\n-                            {\n+public enum HeartbeatState implements State<HeartbeatContext,HeartbeatMessage> { start\n+                                                                                 {\n+                                                                                     @Override\n+                                                                                     public HeartbeatState handle( HeartbeatContext context, Message<HeartbeatMessage> message, MessageHolder outgoing )\n+                                                                                     {\n+                                                                                         switch ( message.getMessageType() )\n+                                                                                         {\n+                                                                                         case addHeartbeatListener:\n+                                                                                             {\n+                                                                                                 context.addHeartbeatListener( message.getPayload() );\n+                                                                                                 break;\n+                                                                                             }\n+                                                                                         case removeHeartbeatListener:\n+                                                                                             {\n+                                                                                                 context.removeHeartbeatListener( message.getPayload() );\n+                                                                                                 break;\n+                                                                                             }\n+                                                                                         case join:\n+                                                                                             {\n+                                                                                                 for( InstanceId instanceId : context.getOtherInstances()\n+                                                                                                 )\n+                                                                                                 {\n                                 // Setup heartbeat timeouts for the other instance\n-                                context.setTimeout(\n-                                        HeartbeatMessage.i_am_alive + \"-\" + instanceId,\n-                                        timeout( HeartbeatMessage.timed_out, message, instanceId ) );\n+                                                                                                     context.setTimeout( HeartbeatMessage.i_am_alive + \"-\" + instanceId, timeout( HeartbeatMessage.timed_out, message, instanceId ) );\n \n                                 // Send first heartbeat immediately\n-                                outgoing.offer( timeout( HeartbeatMessage.sendHeartbeat, message, instanceId ) );\n-                            }\n-\n-                            return heartbeat;\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n-\n-                    return this;\n-                }\n-            },\n-\n-    heartbeat\n-            {\n-                @Override\n-                public HeartbeatState handle( HeartbeatContext context,\n-                                              Message<HeartbeatMessage> message,\n-                                              MessageHolder outgoing\n-                )\n-                {\n-                    switch ( message.getMessageType() )\n-                    {\n-                        case i_am_alive:\n-                        {\n-                            HeartbeatMessage.IAmAliveState state = message.getPayload();\n-\n-                            if ( context.isMe( state.getServer() ) )\n-                            {\n-                                break;\n-                            }\n-\n-                            if ( state.getServer() == null )\n-                            {\n-                                break;\n-                            }\n-\n-                            if ( context.alive( state.getServer() ) )\n-                            {\n+                                                                                                     outgoing.offer( timeout( HeartbeatMessage.sendHeartbeat, message, instanceId ) );\n+                                                                                                 }\n+\n+                                                                                                 return heartbeat;\n+                                                                                             }\n+                                                                                         default:\n+                                                                                             break;\n+                                                                                         }\n+\n+                                                                                         return this;\n+                                                                                     }\n+                                                                                 }, heartbeat\n+                                                                                    {\n+                                                                                        @Override\n+                                                                                        public HeartbeatState handle( HeartbeatContext context, Message<HeartbeatMessage> message, MessageHolder outgoing )\n+                                                                                        {\n+                                                                                            switch ( message.getMessageType() )\n+                                                                                            {\n+                                                                                            case i_am_alive:\n+                                                                                                {\n+                                                                                                    HeartbeatMessage.IAmAliveState state = message.getPayload();\n+                                                                                                    if ( context.isMe( state.getServer() ) )\n+                                                                                                    {\n+                                                                                                        break;\n+                                                                                                    }\n+\n+                                                                                                    if ( state.getServer() == null )\n+                                                                                                    {\n+                                                                                                        break;\n+                                                                                                    }\n+\n+                                                                                                    if ( context.alive( state.getServer() ) )\n+                                                                                                    {\n                                 // Send suspicions messages to all non-failed servers\n-                                for ( InstanceId aliveServer : context.getAlive() )\n-                                {\n-                                    if ( !aliveServer.equals( context.getMyId() ) )\n-                                    {\n-                                        URI aliveServerUri =\n-                                                context.getUriForId( aliveServer );\n-                                        outgoing.offer( Message.to( HeartbeatMessage.suspicions, aliveServerUri,\n-                                                new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor(\n-                                                        context.getMyId() ) ) ) );\n-                                    }\n-                                }\n-                            }\n-\n-                            resetTimeout( context, message, state );\n+                                                                                                        for( InstanceId aliveServer : context.getAlive()\n+                                                                                                        )\n+                                                                                                        {\n+                                                                                                            if ( ! aliveServer.equals( context.getMyId() ) )\n+                                                                                                            {\n+                                                                                                                URI aliveServerUri = context.getUriForId( aliveServer );\n+                                                                                                                outgoing.offer( Message.to( HeartbeatMessage.suspicions, aliveServerUri, new HeartbeatMessage. SuspicionsState( context.getSuspicionsFor( context.getMyId() ) ) ) );\n+                                                                                                            }\n+                                                                                                        }\n+                                                                                                    }\n+\n+                                                                                                    resetTimeout( context, message, state );\n \n                             // Check if this server knows something that we don't\n-                            if ( message.hasHeader( \"last-learned\" ) )\n-                            {\n-                                long lastLearned = Long.parseLong( message.getHeader( \"last-learned\" ) );\n-                                if ( lastLearned > context.getLastKnownLearnedInstanceInCluster() )\n-                                {\n+                                                                                                    if ( message.hasHeader( \"last-learned\" ) )\n+                                                                                                    {\n+                                                                                                        long lastLearned = Long.parseLong( message.getHeader( \"last-learned\" ) );\n+                                                                                                        if ( lastLearned > context.getLastKnownLearnedInstanceInCluster() )\n+                                                                                                        {\n                                     /*\n                                      * Need to pass the HEADER_INSTANCE_ID header to catchUp state,\n                                      * as the instance in catchUp state should be aware of at least one\n@@ -141,152 +125,124 @@ public enum HeartbeatState\n                                      * no use within the current codebase but mixed version clusters may\n                                      * make use of it.\n                                      */\n-                                    Message<LearnerMessage> catchUpMessage = message.copyHeadersTo(\n-                                            internal( LearnerMessage.catchUp, lastLearned ),\n-                                            Message.HEADER_FROM, Message.HEADER_INSTANCE_ID );\n-                                    outgoing.offer( catchUpMessage );\n-                                }\n-                            }\n-\n-                            break;\n-                        }\n-\n-                        case timed_out:\n-                        {\n-                            InstanceId server = message.getPayload();\n-                            context.getLog( HeartbeatState.class )\n-                                    .debug( \"Received timed out for server \" + server );\n+                                                                                                            Message<LearnerMessage> catchUpMessage = message.copyHeadersTo( internal( LearnerMessage.catchUp, lastLearned ), Message.HEADER_FROM, Message.HEADER_INSTANCE_ID );\n+                                                                                                            outgoing.offer( catchUpMessage );\n+                                                                                                        }\n+                                                                                                    }\n+\n+                                                                                                    break;\n+                                                                                                }\n+                                                                                            case timed_out:\n+                                                                                                {\n+                                                                                                    InstanceId server = message.getPayload();\n+                                                                                                    context.getLog( HeartbeatState.class ).debug( \"Received timed out for server \" + server );\n                             // Check if this node is no longer a part of the cluster\n-                            if ( context.getMembers().containsKey( server ) )\n-                            {\n-                                context.suspect( server );\n-\n-                                context.setTimeout( HeartbeatMessage.i_am_alive + \"-\" +\n-                                        server, timeout( HeartbeatMessage.timed_out, message, server ) );\n+                                                                                                    if ( context.getMembers().containsKey( server ) )\n+                                                                                                    {\n+                                                                                                        context.suspect( server );\n+                                                                                                        context.setTimeout( HeartbeatMessage.i_am_alive + \"-\" + server, timeout( HeartbeatMessage.timed_out, message, server ) );\n \n                                 // Send suspicions messages to all non-failed servers\n-                                for ( InstanceId aliveServer : context.getAlive() )\n-                                {\n-                                    if ( !aliveServer.equals( context.getMyId() ) )\n-                                    {\n-                                        URI sendTo = context.getUriForId( aliveServer );\n-                                        outgoing.offer( Message.to( HeartbeatMessage.suspicions, sendTo,\n-                                                new HeartbeatMessage.SuspicionsState( context.getSuspicionsFor(\n-                                                        context.getMyId() ) ) ) );\n-                                    }\n-                                }\n-                            }\n-                            else\n-                            {\n+                                                                                                        for( InstanceId aliveServer : context.getAlive()\n+                                                                                                        )\n+                                                                                                        {\n+                                                                                                            if ( ! aliveServer.equals( context.getMyId() ) )\n+                                                                                                            {\n+                                                                                                                URI sendTo = context.getUriForId( aliveServer );\n+                                                                                                                outgoing.offer( Message.to( HeartbeatMessage.suspicions, sendTo, new HeartbeatMessage. SuspicionsState( context.getSuspicionsFor( context.getMyId() ) ) ) );\n+                                                                                                            }\n+                                                                                                        }\n+                                                                                                    }\n+                                                                                                    else\n+                                                                                                    {\n                                 // If no longer part of cluster, then don't bother\n-                                context.serverLeftCluster( server );\n-                            }\n-                            break;\n-                        }\n-\n-                        case sendHeartbeat:\n-                        {\n-                            InstanceId to = message.getPayload();\n-\n-                            if ( !context.isMe( to ) )\n-                            {\n+                                                                                                        context.serverLeftCluster( server );\n+                                                                                                    }\n+\n+                                                                                                    break;\n+                                                                                                }\n+                                                                                            case sendHeartbeat:\n+                                                                                                {\n+                                                                                                    InstanceId to = message.getPayload();\n+                                                                                                    if ( ! context.isMe( to ) )\n+                                                                                                    {\n                                 // Check if this node is no longer a part of the cluster\n-                                if ( context.getMembers().containsKey( to ) )\n-                                {\n-                                    URI toSendTo = context.getUriForId( to );\n+                                                                                                        if ( context.getMembers().containsKey( to ) )\n+                                                                                                        {\n+                                                                                                            URI toSendTo = context.getUriForId( to );\n                                     // Send heartbeat message to given server\n-                                    outgoing.offer( to( HeartbeatMessage.i_am_alive, toSendTo,\n-                                            new HeartbeatMessage.IAmAliveState(\n-                                                    context.getMyId() ) )\n-                                            .setHeader( \"last-learned\",\n-                                                    context.getLastLearnedInstanceId() + \"\" ) );\n+                                                                                                            outgoing.offer( to( HeartbeatMessage.i_am_alive, toSendTo, new HeartbeatMessage. IAmAliveState( context.getMyId() ) ).setHeader( \"last-learned\", context.getLastLearnedInstanceId() + \"\" ) );\n \n                                     // Set new timeout to send heartbeat to this host\n-                                    context.setTimeout(\n-                                            HeartbeatMessage.sendHeartbeat + \"-\" + to,\n-                                            timeout( HeartbeatMessage.sendHeartbeat, message, to ) );\n-                                }\n-                            }\n-                            break;\n-                        }\n-\n-                        case reset_send_heartbeat:\n-                        {\n-                            InstanceId to = message.getPayload();\n-\n-                            if ( !context.isMe( to ) )\n-                            {\n-                                String timeoutName = HeartbeatMessage.sendHeartbeat + \"-\" + to;\n-                                context.cancelTimeout( timeoutName );\n-                                context.setTimeout( timeoutName, Message.timeout(\n-                                        HeartbeatMessage.sendHeartbeat, message, to ) );\n-                            }\n-                            break;\n-                        }\n-\n-                        case suspicions:\n-                        {\n-                            HeartbeatMessage.SuspicionsState suspicions = message.getPayload();\n-\n-                            InstanceId fromId = new InstanceId(\n-                                    Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) );\n-\n-                            context.getLog( HeartbeatState.class )\n-                                    .debug( format( \"Received suspicions as %s from %s\", suspicions, fromId ) );\n+                                                                                                            context.setTimeout( HeartbeatMessage.sendHeartbeat + \"-\" + to, timeout( HeartbeatMessage.sendHeartbeat, message, to ) );\n+                                                                                                        }\n+                                                                                                    }\n+\n+                                                                                                    break;\n+                                                                                                }\n+                                                                                            case reset_send_heartbeat:\n+                                                                                                {\n+                                                                                                    InstanceId to = message.getPayload();\n+                                                                                                    if ( ! context.isMe( to ) )\n+                                                                                                    {\n+                                                                                                        String timeoutName = HeartbeatMessage.sendHeartbeat + \"-\" + to;\n+                                                                                                        context.cancelTimeout( timeoutName );\n+                                                                                                        context.setTimeout( timeoutName, Message.timeout( HeartbeatMessage.sendHeartbeat, message, to ) );\n+                                                                                                    }\n+\n+                                                                                                    break;\n+                                                                                                }\n+                                                                                            case suspicions:\n+                                                                                                {\n+                                                                                                    HeartbeatMessage.SuspicionsState suspicions = message.getPayload();\n+                                                                                                    InstanceId fromId = new InstanceId( Integer.parseInt( message.getHeader( Message.HEADER_INSTANCE_ID ) ) );\n+                                                                                                    context.getLog( HeartbeatState.class ).debug( format( \"Received suspicions as %s from %s\", suspicions, fromId ) );\n \n                             /*\n                              * Remove ourselves from the suspicions received - we just received a message,\n                              * it's not normal to be considered failed. Whatever it was, it was transient and now it has\n                              * passed.\n                              */\n-                            suspicions.getSuspicions().remove( context.getMyId() );\n-                            context.suspicions( fromId, suspicions.getSuspicions() );\n-\n-                            break;\n-                        }\n-\n-                        case leave:\n-                        {\n-                            context.getLog( HeartbeatState.class ).debug( \"Received leave\" );\n-                            return start;\n-                        }\n-\n-                        case addHeartbeatListener:\n-                        {\n-                            context.addHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n-\n-                        case removeHeartbeatListener:\n-                        {\n-                            context.removeHeartbeatListener( message.getPayload() );\n-                            break;\n-                        }\n-\n-                        default:\n-                            break;\n-                    }\n-\n-                    return this;\n-                }\n-\n-                private void resetTimeout( HeartbeatContext context, Message<HeartbeatMessage> message,\n-                                           HeartbeatMessage.IAmAliveState state )\n-                {\n-                    String key = HeartbeatMessage.i_am_alive + \"-\" + state.getServer();\n-                    Message<? extends MessageType> oldTimeout = context.cancelTimeout( key );\n-                    if ( oldTimeout != null && oldTimeout.hasHeader( Message.HEADER_TIMEOUT_COUNT ) )\n-                    {\n-                        int timeoutCount = Integer.parseInt( oldTimeout.getHeader( Message.HEADER_TIMEOUT_COUNT ) );\n-                        if ( timeoutCount > 0 )\n-                        {\n-                            long timeout = context.getTimeoutFor( oldTimeout );\n-                            context.getLog( HeartbeatState.class ).debug(\n-                                    \"Received \" + state + \" after missing \" + timeoutCount +\n-                                            \" (\" + timeout * timeoutCount + \"ms)\" );\n-                        }\n-                    }\n-                    context.setTimeout( key, timeout( HeartbeatMessage.timed_out, message, state.getServer() ) );\n-                }\n-            }\n-}\n+                                                                                                    suspicions.getSuspicions().remove( context.getMyId() );\n+                                                                                                    context.suspicions( fromId, suspicions.getSuspicions() );\n+                                                                                                    break;\n+                                                                                                }\n+                                                                                            case leave:\n+                                                                                                {\n+                                                                                                    context.getLog( HeartbeatState.class ).debug( \"Received leave\" );\n+                                                                                                    return start;\n+                                                                                                }\n+                                                                                            case addHeartbeatListener:\n+                                                                                                {\n+                                                                                                    context.addHeartbeatListener( message.getPayload() );\n+                                                                                                    break;\n+                                                                                                }\n+                                                                                            case removeHeartbeatListener:\n+                                                                                                {\n+                                                                                                    context.removeHeartbeatListener( message.getPayload() );\n+                                                                                                    break;\n+                                                                                                }\n+                                                                                            default:\n+                                                                                                break;\n+                                                                                            }\n+\n+                                                                                            return this;\n+                                                                                        }\n+\n+                                                                                        private void resetTimeout( HeartbeatContext context, Message<HeartbeatMessage> message, HeartbeatMessage.IAmAliveState state )\n+                                                                                        {\n+                                                                                            String key = HeartbeatMessage.i_am_alive + \"-\" + state.getServer();\n+                                                                                            Message<? extends MessageType> oldTimeout = context.cancelTimeout( key );\n+                                                                                            if ( oldTimeout != null&& oldTimeout.hasHeader( Message.HEADER_TIMEOUT_COUNT ) )\n+                                                                                            {\n+                                                                                                int timeoutCount = Integer.parseInt( oldTimeout.getHeader( Message.HEADER_TIMEOUT_COUNT ) );\n+                                                                                                if ( timeoutCount > 0 )\n+                                                                                                {\n+                                                                                                    long timeout = context.getTimeoutFor( oldTimeout );\n+                                                                                                    context.getLog( HeartbeatState.class ).debug( \"Received \" + state+ \" after missing \" + timeoutCount+ \" (\" + timeout* timeoutCount + \"ms)\" );\n+                                                                                                }\n+                                                                                            }\n+\n+                                                                                            context.setTimeout( key, timeout( HeartbeatMessage.timed_out, message, state.getServer() ) );\n+                                                                                        }\n+                                                                                    }}\n\\ No newline at end of file\n",
            "diff_size": 248
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}