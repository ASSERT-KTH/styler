{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2330",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2330/IndexUpdaterMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2330/IndexUpdaterMap.java\nindex 5cc2c88dc06..1a0bf875f87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2330/IndexUpdaterMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2330/IndexUpdaterMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.IOException;\n@@ -37,101 +38,101 @@ import org.neo4j.kernel.impl.store.UnderlyingStorageException;\n /**\n  * Holds currently open index updaters that are created dynamically when requested for any existing index in\n  * the given indexMap.\n- *\n+ * <p>\n  * Also provides a close method for closing and removing any remaining open index updaters.\n- *\n+ * <p>\n  * All updaters retrieved from this map must be either closed manually or handle duplicate calls to close\n  * or must all be closed indirectly by calling close on this updater map.\n  */\n class IndexUpdaterMap implements AutoCloseable, Iterable<IndexUpdater>\n {\n-    private final IndexUpdateMode indexUpdateMode;\n-    private final IndexMap indexMap;\n-    private final Map<SchemaDescriptor,IndexUpdater> updaterMap;\n+  private final IndexUpdateMode indexUpdateMode;\n+  private final IndexMap indexMap;\n+  private final Map<SchemaDescriptor, IndexUpdater> updaterMap;\n \n-    IndexUpdaterMap( IndexMap indexMap, IndexUpdateMode indexUpdateMode )\n-    {\n-        this.indexUpdateMode = indexUpdateMode;\n-        this.indexMap = indexMap;\n-        this.updaterMap = new HashMap<>();\n-    }\n+  IndexUpdaterMap(IndexMap indexMap, IndexUpdateMode indexUpdateMode)\n+  {\n+    this.indexUpdateMode = indexUpdateMode;\n+    this.indexMap = indexMap;\n+    this.updaterMap = new HashMap<>();\n+  }\n \n-    IndexUpdater getUpdater( SchemaDescriptor descriptor )\n+  IndexUpdater getUpdater(SchemaDescriptor descriptor)\n+  {\n+    IndexUpdater updater = updaterMap.get(descriptor);\n+    if (null == updater)\n     {\n-        IndexUpdater updater = updaterMap.get( descriptor );\n-        if ( null == updater )\n-        {\n-            IndexProxy indexProxy = indexMap.getIndexProxy( descriptor );\n-            if ( null != indexProxy )\n-            {\n-                updater = indexProxy.newUpdater( indexUpdateMode );\n-                updaterMap.put( descriptor, updater );\n-            }\n-        }\n-        return updater;\n+      IndexProxy indexProxy = indexMap.getIndexProxy(descriptor);\n+      if (null != indexProxy)\n+      {\n+        updater = indexProxy.newUpdater(indexUpdateMode);\n+        updaterMap.put(descriptor, updater);\n+      }\n     }\n+    return updater;\n+  }\n \n-    @Override\n-    public void close() throws UnderlyingStorageException\n-    {\n-        Set<Pair<SchemaDescriptor,UnderlyingStorageException>> exceptions = null;\n-\n-        for ( Map.Entry<SchemaDescriptor,IndexUpdater> updaterEntry : updaterMap.entrySet() )\n-        {\n-            IndexUpdater updater = updaterEntry.getValue();\n-            try\n-            {\n-                updater.close();\n-            }\n-            catch ( IOException | IndexEntryConflictException e )\n-            {\n-                if ( null == exceptions )\n-                {\n-                    exceptions = new HashSet<>();\n-                }\n-                exceptions.add( Pair.of( updaterEntry.getKey(),\n-                        new UnderlyingStorageException( e ) ) );\n-            }\n-        }\n-\n-        clear();\n+  @Override\n+  public void close() throws UnderlyingStorageException\n+  {\n+    Set<Pair<SchemaDescriptor, UnderlyingStorageException>> exceptions = null;\n \n-        if ( null != exceptions )\n+    for (Map.Entry<SchemaDescriptor, IndexUpdater> updaterEntry : updaterMap.entrySet())\n+    {\n+      IndexUpdater updater = updaterEntry.getValue();\n+      try\n+      {\n+        updater.close();\n+      } catch (IOException | IndexEntryConflictException e)\n+      {\n+        if (null == exceptions)\n         {\n-            throw new MultipleUnderlyingStorageExceptions( exceptions );\n+          exceptions = new HashSet<>();\n         }\n+        exceptions.add(Pair.of(updaterEntry.getKey(),\n+            new UnderlyingStorageException(e)));\n+      }\n     }\n \n-    public void clear()\n-    {\n-        updaterMap.clear();\n-    }\n+    clear();\n \n-    public boolean isEmpty()\n+    if (null != exceptions)\n     {\n-        return updaterMap.isEmpty();\n+      throw new MultipleUnderlyingStorageExceptions(exceptions);\n     }\n+  }\n \n-    public int size()\n-    {\n-        return updaterMap.size();\n-    }\n+  public void clear()\n+  {\n+    updaterMap.clear();\n+  }\n \n-    @Override\n-    public Iterator<IndexUpdater> iterator()\n+  public boolean isEmpty()\n+  {\n+    return updaterMap.isEmpty();\n+  }\n+\n+  public int size()\n+  {\n+    return updaterMap.size();\n+  }\n+\n+  @Override\n+  public Iterator<IndexUpdater> iterator()\n+  {\n+    return new PrefetchingIterator<IndexUpdater>()\n     {\n-        return new PrefetchingIterator<IndexUpdater>()\n+      private Iterator<SchemaDescriptor> descriptors = indexMap.descriptors();\n+\n+      @Override\n+      protected IndexUpdater fetchNextOrNull()\n+      {\n+        if (descriptors.hasNext())\n         {\n-            private Iterator<SchemaDescriptor> descriptors = indexMap.descriptors();\n-            @Override\n-            protected IndexUpdater fetchNextOrNull()\n-            {\n-                if ( descriptors.hasNext() )\n-                {\n-                    return getUpdater( descriptors.next() );\n-                }\n-                return null;\n-            }\n-        };\n-    }\n+          return getUpdater(descriptors.next());\n+        }\n+        return null;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 109
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2330/IndexUpdaterMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2330/IndexUpdaterMap.java\nindex 5cc2c88dc06..38fef1b84b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2330/IndexUpdaterMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2330/IndexUpdaterMap.java\n@@ -75,8 +75,7 @@ class IndexUpdaterMap implements AutoCloseable, Iterable<IndexUpdater>\n     public void close() throws UnderlyingStorageException\n     {\n         Set<Pair<SchemaDescriptor,UnderlyingStorageException>> exceptions = null;\n-\n-        for ( Map.Entry<SchemaDescriptor,IndexUpdater> updaterEntry : updaterMap.entrySet() )\n+for ( Map.Entry<SchemaDescriptor,IndexUpdater> updaterEntry : updaterMap.entrySet() )\n         {\n             IndexUpdater updater = updaterEntry.getValue();\n             try\n@@ -89,14 +88,12 @@ class IndexUpdaterMap implements AutoCloseable, Iterable<IndexUpdater>\n                 {\n                     exceptions = new HashSet<>();\n                 }\n-                exceptions.add( Pair.of( updaterEntry.getKey(),\n-                        new UnderlyingStorageException( e ) ) );\n-            }\n+                exceptions.add( Pair.of( updaterEntry.getKey(), new UnderlyingStorageException( e ) ) );\n+    }\n         }\n \n         clear();\n-\n-        if ( null != exceptions )\n+if ( null != exceptions )\n         {\n             throw new MultipleUnderlyingStorageExceptions( exceptions );\n         }\n@@ -134,4 +131,4 @@ class IndexUpdaterMap implements AutoCloseable, Iterable<IndexUpdater>\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}