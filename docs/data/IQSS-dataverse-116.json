{
    "project_name": "IQSS-dataverse",
    "error_id": "116",
    "information": {
        "errors": [
            {
                "line": "65",
                "column": "42",
                "severity": "error",
                "message": "'{' at column 42 should have line break after.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public boolean isDisplayIdentifier() { return false; }\n    \n    /**\n     * Setup metadata from OIDC provider during creation of the provider representation",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/116/OIDCAuthProvider.java\nindex d9a1baa9e3e..0494003b9ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/116/OIDCAuthProvider.java\n@@ -62,7 +62,8 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @return false\n      */\n     @Override\n-    public boolean isDisplayIdentifier() { return false; }\n+    public boolean isDisplayIdentifier() {\n+      return false; }\n     \n     /**\n      * Setup metadata from OIDC provider during creation of the provider representation\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/116/OIDCAuthProvider.java\nindex d9a1baa9e3e..702b4fb9542 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/116/OIDCAuthProvider.java\n@@ -35,229 +35,245 @@ import java.util.logging.Logger;\n  * TODO: this should not EXTEND, but IMPLEMENT the contract to be used in {@link edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2LoginBackingBean}\n  */\n public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n-    \n-    private static final Logger logger = Logger.getLogger(OIDCAuthProvider.class.getName());\n-    \n-    protected String id = \"oidc\";\n-    protected String title = \"Open ID Connect\";\n-    protected List<String> scope = Arrays.asList(\"openid\", \"email\", \"profile\");\n-    \n-    Issuer issuer;\n-    ClientAuthentication clientAuth;\n-    OIDCProviderMetadata idpMetadata;\n-    \n-    public OIDCAuthProvider(String aClientId, String aClientSecret, String issuerEndpointURL) throws AuthorizationSetupException {\n-        this.clientSecret = aClientSecret; // nedded for state creation\n-        this.clientAuth = new ClientSecretBasic(new ClientID(aClientId), new Secret(aClientSecret));\n-        this.issuer = new Issuer(issuerEndpointURL);\n-        getMetadata();\n-    }\n-    \n-    /**\n-     * Although this is defined in {@link edu.harvard.iq.dataverse.authorization.AuthenticationProvider},\n-     * this needs to be present due to bugs in ELResolver (has been modified for Spring).\n-     * TODO: for the future it might be interesting to make this configurable via the provider JSON (it's used for ORCID!)\n-     * @see <a href=\"https://issues.jboss.org/browse/JBEE-159\">JBoss Issue 159</a>\n-     * @see <a href=\"https://github.com/eclipse-ee4j/el-ri/issues/43\">Jakarta EE Bug 43</a>\n-     * @return false\n-     */\n-    @Override\n-    public boolean isDisplayIdentifier() { return false; }\n-    \n-    /**\n-     * Setup metadata from OIDC provider during creation of the provider representation\n-     * @return The OIDC provider metadata, if successfull\n-     * @throws IOException when sth. goes wrong with the retrieval\n-     * @throws ParseException when the metadata is not parsable\n-     */\n-    void getMetadata() throws AuthorizationSetupException {\n-        try {\n-            this.idpMetadata = getMetadata(this.issuer);\n-        } catch (IOException ex) {\n-            logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not retrievable: \"+ex.getMessage());\n-            throw new AuthorizationSetupException(\"OIDC provider metadata at \"+this.issuer.getValue()+\" not retrievable.\");\n-        } catch (ParseException ex) {\n-            logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not parsable: \"+ex.getMessage());\n-            throw new AuthorizationSetupException(\"OIDC provider metadata at \"+this.issuer.getValue()+\" not parsable.\");\n-        }\n-    \n-        // Assert that the provider supports the code flow\n-        if (! this.idpMetadata.getResponseTypes().stream().filter(idp -> idp.impliesCodeFlow()).findAny().isPresent()) {\n-            throw new AuthorizationSetupException(\"OIDC provider at \"+this.issuer.getValue()+\" does not support code flow, disabling.\");\n-        }\n-    }\n-    \n-    /**\n-     * Retrieve metadata from OIDC provider (moved here to be mock-/spyable)\n-     * @param issuer The OIDC provider (basically a wrapped URL to endpoint)\n-     * @return The OIDC provider metadata, if successfull\n-     * @throws IOException when sth. goes wrong with the retrieval\n-     * @throws ParseException when the metadata is not parsable\n-     */\n-    OIDCProviderMetadata getMetadata(Issuer issuer) throws IOException, ParseException {\n-        // Will resolve the OpenID provider metadata automatically\n-        OIDCProviderConfigurationRequest request = new OIDCProviderConfigurationRequest(issuer);\n-    \n-        // Make HTTP request\n-        HTTPRequest httpRequest = request.toHTTPRequest();\n-        HTTPResponse httpResponse = httpRequest.send();\n-    \n-        // Parse OpenID provider metadata\n-        return OIDCProviderMetadata.parse(httpResponse.getContentAsJSONObject());\n-    }\n-    \n-    /**\n-     * TODO: remove when refactoring package and {@link AbstractOAuth2AuthenticationProvider}\n-     */\n-    @Override\n-    public DefaultApi20 getApiInstance() {\n-        throw new UnsupportedOperationException(\"OIDC provider cannot provide a ScribeJava API instance object\");\n-    }\n-    \n-    /**\n-     * TODO: remove when refactoring package and {@link AbstractOAuth2AuthenticationProvider}\n-     */\n-    @Override\n-    protected ParsedUserResponse parseUserResponse(String responseBody) {\n-        throw new UnsupportedOperationException(\"OIDC provider uses the SDK to parse the response.\");\n-    }\n-    \n-    /**\n-     * Create the authz URL for the OIDC provider\n-     * @param state A randomized state, necessary to secure the authorization flow. @see OAuth2LoginBackingBean.createState()\n-     * @param callbackUrl URL where the provider should send the browser after authn in code flow\n-     * @return\n-     */\n-    @Override\n-    public String buildAuthzUrl(String state, String callbackUrl) {\n-        State stateObject = new State(state);\n-        URI callback = URI.create(callbackUrl);\n-        Nonce nonce = new Nonce();\n-        \n-        AuthenticationRequest req = new AuthenticationRequest.Builder(new ResponseType(\"code\"),\n-                                                                      Scope.parse(this.scope),\n-                                                                      this.clientAuth.getClientID(),\n-                                                                      callback)\n-            .endpointURI(idpMetadata.getAuthorizationEndpointURI())\n-            .state(stateObject)\n-            .nonce(nonce)\n-            .build();\n-        \n-        return req.toURI().toString();\n+\n+  private static final Logger logger = Logger.getLogger(OIDCAuthProvider.class.getName());\n+\n+  protected String id = \"oidc\";\n+  protected String title = \"Open ID Connect\";\n+  protected List<String> scope = Arrays.asList(\"openid\", \"email\", \"profile\");\n+\n+  Issuer issuer;\n+  ClientAuthentication clientAuth;\n+  OIDCProviderMetadata idpMetadata;\n+\n+  public OIDCAuthProvider(String aClientId, String aClientSecret, String issuerEndpointURL)\n+    throws AuthorizationSetupException {\n+    this.clientSecret = aClientSecret; // nedded for state creation\n+    this.clientAuth = new ClientSecretBasic(new ClientID(aClientId), new Secret(aClientSecret));\n+    this.issuer = new Issuer(issuerEndpointURL);\n+    getMetadata();\n+  }\n+\n+  /**\n+   * Although this is defined in {@link edu.harvard.iq.dataverse.authorization.AuthenticationProvider},\n+   * this needs to be present due to bugs in ELResolver (has been modified for Spring).\n+   * TODO: for the future it might be interesting to make this configurable via the provider JSON (it's used for ORCID!)\n+   *\n+   * @return false\n+   * @see <a href=\"https://issues.jboss.org/browse/JBEE-159\">JBoss Issue 159</a>\n+   * @see <a href=\"https://github.com/eclipse-ee4j/el-ri/issues/43\">Jakarta EE Bug 43</a>\n+   */\n+  @Override\n+  public boolean isDisplayIdentifier() {\n+    return false;\n+  }\n+\n+  /**\n+   * Setup metadata from OIDC provider during creation of the provider representation\n+   *\n+   * @return The OIDC provider metadata, if successfull\n+   * @throws IOException    when sth. goes wrong with the retrieval\n+   * @throws ParseException when the metadata is not parsable\n+   */\n+  void getMetadata() throws AuthorizationSetupException {\n+    try {\n+      this.idpMetadata = getMetadata(this.issuer);\n+    } catch (IOException ex) {\n+      logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not retrievable: \" + ex.getMessage());\n+      throw new AuthorizationSetupException(\n+        \"OIDC provider metadata at \" + this.issuer.getValue() + \" not retrievable.\");\n+    } catch (ParseException ex) {\n+      logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not parsable: \" + ex.getMessage());\n+      throw new AuthorizationSetupException(\"OIDC provider metadata at \" + this.issuer.getValue() + \" not parsable.\");\n     }\n-    \n-    /**\n-     * Receive user data from OIDC provider after authn/z has been successfull. (Callback view uses this)\n-     * Request a token and access the resource, parse output and return user details.\n-     * @param code The authz code sent from the provider\n-     * @param redirectUrl The redirect URL (some providers require this when fetching the access token, e. g. Google)\n-     * @return A user record containing all user details accessible for us\n-     * @throws IOException Thrown when communication with the provider fails\n-     * @throws OAuth2Exception Thrown when we cannot access the user details for some reason\n-     * @throws InterruptedException Thrown when the requests thread is failing\n-     * @throws ExecutionException Thrown when the requests thread is failing\n-     */\n-    @Override\n-    public OAuth2UserRecord getUserRecord(String code, String redirectUrl)\n-        throws IOException, OAuth2Exception, InterruptedException, ExecutionException {\n-        // Create grant object\n-        AuthorizationGrant codeGrant = new AuthorizationCodeGrant(new AuthorizationCode(code), URI.create(redirectUrl));\n-    \n-        // Get Access Token first\n-        Optional<BearerAccessToken> accessToken = getAccessToken(codeGrant);\n-        \n-        // Now retrieve User Info\n-        if (accessToken.isPresent()) {\n-            Optional<UserInfo> userInfo = getUserInfo(accessToken.get());\n-            \n-            // Construct our internal user representation\n-            if (userInfo.isPresent()) {\n-                return getUserRecord(userInfo.get());\n-            }\n-        }\n-        \n-        // this should never happen, as we are throwing exceptions like champs before.\n-        throw new OAuth2Exception(-1, \"\", \"auth.providers.token.failGetUser\");\n+\n+    // Assert that the provider supports the code flow\n+    if (!this.idpMetadata.getResponseTypes().stream().filter(idp -> idp.impliesCodeFlow()).findAny().isPresent()) {\n+      throw new AuthorizationSetupException(\n+        \"OIDC provider at \" + this.issuer.getValue() + \" does not support code flow, disabling.\");\n     }\n-    \n-    /**\n-     * Create the OAuth2UserRecord from the OIDC UserInfo.\n-     * TODO: extend to retrieve and insert claims about affiliation and position.\n-     * @param userInfo\n-     * @return the usable user record for processing ing {@link edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2LoginBackingBean}\n-     */\n-    OAuth2UserRecord getUserRecord(UserInfo userInfo) {\n-        return new OAuth2UserRecord(\n-            this.getId(),\n-            userInfo.getSubject().getValue(),\n-            userInfo.getPreferredUsername(),\n-            null,\n-            new AuthenticatedUserDisplayInfo(userInfo.getGivenName(), userInfo.getFamilyName(), userInfo.getEmailAddress(), \"\", \"\"),\n-            null\n-        );\n+  }\n+\n+  /**\n+   * Retrieve metadata from OIDC provider (moved here to be mock-/spyable)\n+   *\n+   * @param issuer The OIDC provider (basically a wrapped URL to endpoint)\n+   * @return The OIDC provider metadata, if successfull\n+   * @throws IOException    when sth. goes wrong with the retrieval\n+   * @throws ParseException when the metadata is not parsable\n+   */\n+  OIDCProviderMetadata getMetadata(Issuer issuer) throws IOException, ParseException {\n+    // Will resolve the OpenID provider metadata automatically\n+    OIDCProviderConfigurationRequest request = new OIDCProviderConfigurationRequest(issuer);\n+\n+    // Make HTTP request\n+    HTTPRequest httpRequest = request.toHTTPRequest();\n+    HTTPResponse httpResponse = httpRequest.send();\n+\n+    // Parse OpenID provider metadata\n+    return OIDCProviderMetadata.parse(httpResponse.getContentAsJSONObject());\n+  }\n+\n+  /**\n+   * TODO: remove when refactoring package and {@link AbstractOAuth2AuthenticationProvider}\n+   */\n+  @Override\n+  public DefaultApi20 getApiInstance() {\n+    throw new UnsupportedOperationException(\"OIDC provider cannot provide a ScribeJava API instance object\");\n+  }\n+\n+  /**\n+   * TODO: remove when refactoring package and {@link AbstractOAuth2AuthenticationProvider}\n+   */\n+  @Override\n+  protected ParsedUserResponse parseUserResponse(String responseBody) {\n+    throw new UnsupportedOperationException(\"OIDC provider uses the SDK to parse the response.\");\n+  }\n+\n+  /**\n+   * Create the authz URL for the OIDC provider\n+   *\n+   * @param state       A randomized state, necessary to secure the authorization flow. @see OAuth2LoginBackingBean.createState()\n+   * @param callbackUrl URL where the provider should send the browser after authn in code flow\n+   * @return\n+   */\n+  @Override\n+  public String buildAuthzUrl(String state, String callbackUrl) {\n+    State stateObject = new State(state);\n+    URI callback = URI.create(callbackUrl);\n+    Nonce nonce = new Nonce();\n+\n+    AuthenticationRequest req = new AuthenticationRequest.Builder(new ResponseType(\"code\"),\n+      Scope.parse(this.scope),\n+      this.clientAuth.getClientID(),\n+      callback)\n+      .endpointURI(idpMetadata.getAuthorizationEndpointURI())\n+      .state(stateObject)\n+      .nonce(nonce)\n+      .build();\n+\n+    return req.toURI().toString();\n+  }\n+\n+  /**\n+   * Receive user data from OIDC provider after authn/z has been successfull. (Callback view uses this)\n+   * Request a token and access the resource, parse output and return user details.\n+   *\n+   * @param code        The authz code sent from the provider\n+   * @param redirectUrl The redirect URL (some providers require this when fetching the access token, e. g. Google)\n+   * @return A user record containing all user details accessible for us\n+   * @throws IOException          Thrown when communication with the provider fails\n+   * @throws OAuth2Exception      Thrown when we cannot access the user details for some reason\n+   * @throws InterruptedException Thrown when the requests thread is failing\n+   * @throws ExecutionException   Thrown when the requests thread is failing\n+   */\n+  @Override\n+  public OAuth2UserRecord getUserRecord(String code, String redirectUrl)\n+    throws IOException, OAuth2Exception, InterruptedException, ExecutionException {\n+    // Create grant object\n+    AuthorizationGrant codeGrant = new AuthorizationCodeGrant(new AuthorizationCode(code), URI.create(redirectUrl));\n+\n+    // Get Access Token first\n+    Optional<BearerAccessToken> accessToken = getAccessToken(codeGrant);\n+\n+    // Now retrieve User Info\n+    if (accessToken.isPresent()) {\n+      Optional<UserInfo> userInfo = getUserInfo(accessToken.get());\n+\n+      // Construct our internal user representation\n+      if (userInfo.isPresent()) {\n+        return getUserRecord(userInfo.get());\n+      }\n     }\n-    \n-    /**\n-     * Retrieve the Access Token from provider. Encapsulate for testing.\n-     * @param grant\n-     * @return The bearer access token used in code (grant) flow. May be empty if SDK could not cast internally.\n-     */\n-    Optional<BearerAccessToken> getAccessToken(AuthorizationGrant grant) throws IOException, OAuth2Exception {\n-        // Request token\n-        HTTPResponse response = new TokenRequest(this.idpMetadata.getTokenEndpointURI(),\n-                                                 this.clientAuth,\n-                                                 grant,\n-                                                 Scope.parse(this.scope))\n-                                        .toHTTPRequest()\n-                                        .send();\n-        \n-        // Parse response\n-        try {\n-            TokenResponse tokenRespone = OIDCTokenResponseParser.parse(response);\n-    \n-            // If error --> oauth2 ex\n-            if (! tokenRespone.indicatesSuccess() ) {\n-                ErrorObject error = tokenRespone.toErrorResponse().getErrorObject();\n-                throw new OAuth2Exception(error.getHTTPStatusCode(), error.getDescription(), \"auth.providers.token.failRetrieveToken\");\n-            }\n-    \n-            // Success --> return token\n-            OIDCTokenResponse successResponse = (OIDCTokenResponse)tokenRespone.toSuccessResponse();\n-            \n-            return Optional.of(successResponse.getOIDCTokens().getBearerAccessToken());\n-            \n-        } catch (ParseException ex) {\n-            throw new OAuth2Exception(-1, ex.getMessage(), \"auth.providers.token.failParseToken\");\n-        }\n+\n+    // this should never happen, as we are throwing exceptions like champs before.\n+    throw new OAuth2Exception(-1, \"\", \"auth.providers.token.failGetUser\");\n+  }\n+\n+  /**\n+   * Create the OAuth2UserRecord from the OIDC UserInfo.\n+   * TODO: extend to retrieve and insert claims about affiliation and position.\n+   *\n+   * @param userInfo\n+   * @return the usable user record for processing ing {@link edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2LoginBackingBean}\n+   */\n+  OAuth2UserRecord getUserRecord(UserInfo userInfo) {\n+    return new OAuth2UserRecord(\n+      this.getId(),\n+      userInfo.getSubject().getValue(),\n+      userInfo.getPreferredUsername(),\n+      null,\n+      new AuthenticatedUserDisplayInfo(userInfo.getGivenName(), userInfo.getFamilyName(), userInfo.getEmailAddress(),\n+        \"\", \"\"),\n+      null\n+    );\n+  }\n+\n+  /**\n+   * Retrieve the Access Token from provider. Encapsulate for testing.\n+   *\n+   * @param grant\n+   * @return The bearer access token used in code (grant) flow. May be empty if SDK could not cast internally.\n+   */\n+  Optional<BearerAccessToken> getAccessToken(AuthorizationGrant grant) throws IOException, OAuth2Exception {\n+    // Request token\n+    HTTPResponse response = new TokenRequest(this.idpMetadata.getTokenEndpointURI(),\n+      this.clientAuth,\n+      grant,\n+      Scope.parse(this.scope))\n+      .toHTTPRequest()\n+      .send();\n+\n+    // Parse response\n+    try {\n+      TokenResponse tokenRespone = OIDCTokenResponseParser.parse(response);\n+\n+      // If error --> oauth2 ex\n+      if (!tokenRespone.indicatesSuccess()) {\n+        ErrorObject error = tokenRespone.toErrorResponse().getErrorObject();\n+        throw new OAuth2Exception(error.getHTTPStatusCode(), error.getDescription(),\n+          \"auth.providers.token.failRetrieveToken\");\n+      }\n+\n+      // Success --> return token\n+      OIDCTokenResponse successResponse = (OIDCTokenResponse) tokenRespone.toSuccessResponse();\n+\n+      return Optional.of(successResponse.getOIDCTokens().getBearerAccessToken());\n+\n+    } catch (ParseException ex) {\n+      throw new OAuth2Exception(-1, ex.getMessage(), \"auth.providers.token.failParseToken\");\n     }\n-    \n-    /**\n-     * Retrieve User Info from provider. Encapsulate for testing.\n-     * @param accessToken The access token to enable reading data from userinfo endpoint\n-     */\n-    Optional<UserInfo> getUserInfo(BearerAccessToken accessToken) throws IOException, OAuth2Exception {\n-        // Retrieve data\n-        HTTPResponse response = new UserInfoRequest(this.idpMetadata.getUserInfoEndpointURI(), accessToken)\n-                                        .toHTTPRequest()\n-                                        .send();\n-        \n-        // Parse/Extract\n-        try {\n-            UserInfoResponse infoResponse = UserInfoResponse.parse(response);\n-    \n-            // If error --> oauth2 ex\n-            if (! infoResponse.indicatesSuccess() ) {\n-                ErrorObject error = infoResponse.toErrorResponse().getErrorObject();\n-                throw new OAuth2Exception(error.getHTTPStatusCode(),\n-                                          error.getDescription(),\n-                                          BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n-            }\n-            \n-            // Success --> return info\n-            return Optional.of(infoResponse.toSuccessResponse().getUserInfo());\n-            \n-        } catch (ParseException ex) {\n-            throw new OAuth2Exception(-1, ex.getMessage(), BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n-        }\n+  }\n+\n+  /**\n+   * Retrieve User Info from provider. Encapsulate for testing.\n+   *\n+   * @param accessToken The access token to enable reading data from userinfo endpoint\n+   */\n+  Optional<UserInfo> getUserInfo(BearerAccessToken accessToken) throws IOException, OAuth2Exception {\n+    // Retrieve data\n+    HTTPResponse response = new UserInfoRequest(this.idpMetadata.getUserInfoEndpointURI(), accessToken)\n+      .toHTTPRequest()\n+      .send();\n+\n+    // Parse/Extract\n+    try {\n+      UserInfoResponse infoResponse = UserInfoResponse.parse(response);\n+\n+      // If error --> oauth2 ex\n+      if (!infoResponse.indicatesSuccess()) {\n+        ErrorObject error = infoResponse.toErrorResponse().getErrorObject();\n+        throw new OAuth2Exception(error.getHTTPStatusCode(),\n+          error.getDescription(),\n+          BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n+      }\n+\n+      // Success --> return info\n+      return Optional.of(infoResponse.toSuccessResponse().getUserInfo());\n+\n+    } catch (ParseException ex) {\n+      throw new OAuth2Exception(-1, ex.getMessage(),\n+        BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n     }\n+  }\n }\n",
            "diff_size": 323
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/116/OIDCAuthProvider.java\nindex d9a1baa9e3e..af27be88d52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/116/OIDCAuthProvider.java\n@@ -22,7 +22,6 @@ import edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2Exception;\n import edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2TokenData;\n import edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2UserRecord;\n import edu.harvard.iq.dataverse.util.BundleUtil;\n-\n import java.io.IOException;\n import java.net.URI;\n import java.util.Arrays;\n@@ -34,18 +33,24 @@ import java.util.logging.Logger;\n /**\n  * TODO: this should not EXTEND, but IMPLEMENT the contract to be used in {@link edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2LoginBackingBean}\n  */\n+\n+\n public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n-    \n+\n     private static final Logger logger = Logger.getLogger(OIDCAuthProvider.class.getName());\n-    \n+\n+\n     protected String id = \"oidc\";\n+\n+\n     protected String title = \"Open ID Connect\";\n+\n+\n     protected List<String> scope = Arrays.asList(\"openid\", \"email\", \"profile\");\n-    \n     Issuer issuer;\n     ClientAuthentication clientAuth;\n     OIDCProviderMetadata idpMetadata;\n-    \n+\n     public OIDCAuthProvider(String aClientId, String aClientSecret, String issuerEndpointURL) throws AuthorizationSetupException {\n         this.clientSecret = aClientSecret; // nedded for state creation\n         this.clientAuth = new ClientSecretBasic(new ClientID(aClientId), new Secret(aClientSecret));\n@@ -61,8 +66,11 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @see <a href=\"https://github.com/eclipse-ee4j/el-ri/issues/43\">Jakarta EE Bug 43</a>\n      * @return false\n      */\n+\n     @Override\n-    public boolean isDisplayIdentifier() { return false; }\n+    public boolean isDisplayIdentifier() {\n+        return false;\n+    }\n     \n     /**\n      * Setup metadata from OIDC provider during creation of the provider representation\n@@ -70,20 +78,22 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @throws IOException when sth. goes wrong with the retrieval\n      * @throws ParseException when the metadata is not parsable\n      */\n+\n     void getMetadata() throws AuthorizationSetupException {\n         try {\n             this.idpMetadata = getMetadata(this.issuer);\n         } catch (IOException ex) {\n-            logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not retrievable: \"+ex.getMessage());\n-            throw new AuthorizationSetupException(\"OIDC provider metadata at \"+this.issuer.getValue()+\" not retrievable.\");\n+            logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not retrievable: \" + ex.getMessage());\n+            throw new AuthorizationSetupException(\"OIDC provider metadata at \" + this.issuer.getValue() + \" not retrievable.\");\n         } catch (ParseException ex) {\n-            logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not parsable: \"+ex.getMessage());\n-            throw new AuthorizationSetupException(\"OIDC provider metadata at \"+this.issuer.getValue()+\" not parsable.\");\n+            logger.severe(\"OIDC provider metadata at \\\"+issuerEndpointURL+\\\" not parsable: \" + ex.getMessage());\n+            throw new AuthorizationSetupException(\"OIDC provider metadata at \" + this.issuer.getValue() + \" not parsable.\");\n         }\n     \n         // Assert that the provider supports the code flow\n-        if (! this.idpMetadata.getResponseTypes().stream().filter(idp -> idp.impliesCodeFlow()).findAny().isPresent()) {\n-            throw new AuthorizationSetupException(\"OIDC provider at \"+this.issuer.getValue()+\" does not support code flow, disabling.\");\n+\n+        if (!this.idpMetadata.getResponseTypes().stream().filter(idp -> idp.impliesCodeFlow()).findAny().isPresent()) {\n+            throw new AuthorizationSetupException(\"OIDC provider at \" + this.issuer.getValue() + \" does not support code flow, disabling.\");\n         }\n     }\n     \n@@ -94,6 +104,7 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @throws IOException when sth. goes wrong with the retrieval\n      * @throws ParseException when the metadata is not parsable\n      */\n+\n     OIDCProviderMetadata getMetadata(Issuer issuer) throws IOException, ParseException {\n         // Will resolve the OpenID provider metadata automatically\n         OIDCProviderConfigurationRequest request = new OIDCProviderConfigurationRequest(issuer);\n@@ -109,6 +120,7 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n     /**\n      * TODO: remove when refactoring package and {@link AbstractOAuth2AuthenticationProvider}\n      */\n+\n     @Override\n     public DefaultApi20 getApiInstance() {\n         throw new UnsupportedOperationException(\"OIDC provider cannot provide a ScribeJava API instance object\");\n@@ -117,6 +129,7 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n     /**\n      * TODO: remove when refactoring package and {@link AbstractOAuth2AuthenticationProvider}\n      */\n+\n     @Override\n     protected ParsedUserResponse parseUserResponse(String responseBody) {\n         throw new UnsupportedOperationException(\"OIDC provider uses the SDK to parse the response.\");\n@@ -128,21 +141,13 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @param callbackUrl URL where the provider should send the browser after authn in code flow\n      * @return\n      */\n+\n     @Override\n     public String buildAuthzUrl(String state, String callbackUrl) {\n         State stateObject = new State(state);\n         URI callback = URI.create(callbackUrl);\n         Nonce nonce = new Nonce();\n-        \n-        AuthenticationRequest req = new AuthenticationRequest.Builder(new ResponseType(\"code\"),\n-                                                                      Scope.parse(this.scope),\n-                                                                      this.clientAuth.getClientID(),\n-                                                                      callback)\n-            .endpointURI(idpMetadata.getAuthorizationEndpointURI())\n-            .state(stateObject)\n-            .nonce(nonce)\n-            .build();\n-        \n+        AuthenticationRequest req = new AuthenticationRequest.Builder(new ResponseType(\"code\"), Scope.parse(this.scope), this.clientAuth.getClientID(), callback).endpointURI(idpMetadata.getAuthorizationEndpointURI()).state(stateObject).nonce(nonce).build();\n         return req.toURI().toString();\n     }\n     \n@@ -157,9 +162,9 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @throws InterruptedException Thrown when the requests thread is failing\n      * @throws ExecutionException Thrown when the requests thread is failing\n      */\n+\n     @Override\n-    public OAuth2UserRecord getUserRecord(String code, String redirectUrl)\n-        throws IOException, OAuth2Exception, InterruptedException, ExecutionException {\n+    public OAuth2UserRecord getUserRecord(String code, String redirectUrl) throws IOException, OAuth2Exception, InterruptedException, ExecutionException {\n         // Create grant object\n         AuthorizationGrant codeGrant = new AuthorizationCodeGrant(new AuthorizationCode(code), URI.create(redirectUrl));\n     \n@@ -186,15 +191,9 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @param userInfo\n      * @return the usable user record for processing ing {@link edu.harvard.iq.dataverse.authorization.providers.oauth2.OAuth2LoginBackingBean}\n      */\n+\n     OAuth2UserRecord getUserRecord(UserInfo userInfo) {\n-        return new OAuth2UserRecord(\n-            this.getId(),\n-            userInfo.getSubject().getValue(),\n-            userInfo.getPreferredUsername(),\n-            null,\n-            new AuthenticatedUserDisplayInfo(userInfo.getGivenName(), userInfo.getFamilyName(), userInfo.getEmailAddress(), \"\", \"\"),\n-            null\n-        );\n+        return new OAuth2UserRecord(this.getId(), userInfo.getSubject().getValue(), userInfo.getPreferredUsername(), null, new AuthenticatedUserDisplayInfo(userInfo.getGivenName(), userInfo.getFamilyName(), userInfo.getEmailAddress(), \"\", \"\"), null);\n     }\n     \n     /**\n@@ -202,30 +201,25 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @param grant\n      * @return The bearer access token used in code (grant) flow. May be empty if SDK could not cast internally.\n      */\n+\n     Optional<BearerAccessToken> getAccessToken(AuthorizationGrant grant) throws IOException, OAuth2Exception {\n         // Request token\n-        HTTPResponse response = new TokenRequest(this.idpMetadata.getTokenEndpointURI(),\n-                                                 this.clientAuth,\n-                                                 grant,\n-                                                 Scope.parse(this.scope))\n-                                        .toHTTPRequest()\n-                                        .send();\n+        HTTPResponse response = new TokenRequest(this.idpMetadata.getTokenEndpointURI(), this.clientAuth, grant, Scope.parse(this.scope)).toHTTPRequest().send();\n         \n         // Parse response\n         try {\n             TokenResponse tokenRespone = OIDCTokenResponseParser.parse(response);\n     \n             // If error --> oauth2 ex\n-            if (! tokenRespone.indicatesSuccess() ) {\n+            if (!tokenRespone.indicatesSuccess()) {\n                 ErrorObject error = tokenRespone.toErrorResponse().getErrorObject();\n                 throw new OAuth2Exception(error.getHTTPStatusCode(), error.getDescription(), \"auth.providers.token.failRetrieveToken\");\n             }\n     \n             // Success --> return token\n-            OIDCTokenResponse successResponse = (OIDCTokenResponse)tokenRespone.toSuccessResponse();\n-            \n+\n+            OIDCTokenResponse successResponse = (OIDCTokenResponse) tokenRespone.toSuccessResponse();\n             return Optional.of(successResponse.getOIDCTokens().getBearerAccessToken());\n-            \n         } catch (ParseException ex) {\n             throw new OAuth2Exception(-1, ex.getMessage(), \"auth.providers.token.failParseToken\");\n         }\n@@ -235,29 +229,27 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * Retrieve User Info from provider. Encapsulate for testing.\n      * @param accessToken The access token to enable reading data from userinfo endpoint\n      */\n+\n     Optional<UserInfo> getUserInfo(BearerAccessToken accessToken) throws IOException, OAuth2Exception {\n         // Retrieve data\n-        HTTPResponse response = new UserInfoRequest(this.idpMetadata.getUserInfoEndpointURI(), accessToken)\n-                                        .toHTTPRequest()\n-                                        .send();\n+        HTTPResponse response = new UserInfoRequest(this.idpMetadata.getUserInfoEndpointURI(), accessToken).toHTTPRequest().send();\n         \n         // Parse/Extract\n         try {\n             UserInfoResponse infoResponse = UserInfoResponse.parse(response);\n     \n             // If error --> oauth2 ex\n-            if (! infoResponse.indicatesSuccess() ) {\n+            if (!infoResponse.indicatesSuccess()) {\n                 ErrorObject error = infoResponse.toErrorResponse().getErrorObject();\n-                throw new OAuth2Exception(error.getHTTPStatusCode(),\n-                                          error.getDescription(),\n-                                          BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n+                throw new OAuth2Exception(error.getHTTPStatusCode(), error.getDescription(), BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n             }\n             \n             // Success --> return info\n             return Optional.of(infoResponse.toSuccessResponse().getUserInfo());\n-            \n         } catch (ParseException ex) {\n-            throw new OAuth2Exception(-1, ex.getMessage(), BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n+            throw new OAuth2Exception(-1,\n+ex.getMessage(),\n+BundleUtil.getStringFromBundle(\"auth.providers.exception.userinfo\", Arrays.asList(this.getTitle())));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 74
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/116/OIDCAuthProvider.java\nindex d9a1baa9e3e..0494003b9ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/116/OIDCAuthProvider.java\n@@ -62,7 +62,8 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @return false\n      */\n     @Override\n-    public boolean isDisplayIdentifier() { return false; }\n+    public boolean isDisplayIdentifier() {\n+      return false; }\n     \n     /**\n      * Setup metadata from OIDC provider during creation of the provider representation\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/116/OIDCAuthProvider.java\nindex d9a1baa9e3e..2d3a7a967b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/116/OIDCAuthProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/116/OIDCAuthProvider.java\n@@ -62,7 +62,8 @@ public class OIDCAuthProvider extends AbstractOAuth2AuthenticationProvider {\n      * @return false\n      */\n     @Override\n-    public boolean isDisplayIdentifier() { return false; }\n+    public boolean isDisplayIdentifier() {\n+        return false; }\n     \n     /**\n      * Setup metadata from OIDC provider during creation of the provider representation\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}