{
    "project_name": "graphfoundation-ongdb",
    "error_id": "274",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/274/LocalDateTimeSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/274/LocalDateTimeSchemaKey.java\nindex a5c0f8230df..0936309b3f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/274/LocalDateTimeSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/274/LocalDateTimeSchemaKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.values.storable.LocalDateTimeValue;\n@@ -29,67 +30,67 @@ import static java.lang.String.format;\n  */\n class LocalDateTimeSchemaKey extends NativeSchemaKey<LocalDateTimeSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES +    /* epochSecond */\n-            Integer.BYTES + /* nanoOfSecond */\n-            Long.BYTES;     /* entityId */\n+  static final int SIZE =\n+      Long.BYTES +    /* epochSecond */\n+          Integer.BYTES + /* nanoOfSecond */\n+          Long.BYTES;     /* entityId */\n \n-    int nanoOfSecond;\n-    long epochSecond;\n+  int nanoOfSecond;\n+  long epochSecond;\n \n-    @Override\n-    public Value asValue()\n-    {\n-        return LocalDateTimeValue.localDateTime( epochSecond, nanoOfSecond );\n-    }\n+  @Override\n+  public Value asValue()\n+  {\n+    return LocalDateTimeValue.localDateTime(epochSecond, nanoOfSecond);\n+  }\n \n-    @Override\n-    public void initValueAsLowest()\n-    {\n-        epochSecond = Long.MIN_VALUE;\n-        nanoOfSecond = Integer.MIN_VALUE;\n-    }\n+  @Override\n+  public void initValueAsLowest()\n+  {\n+    epochSecond = Long.MIN_VALUE;\n+    nanoOfSecond = Integer.MIN_VALUE;\n+  }\n \n-    @Override\n-    public void initValueAsHighest()\n-    {\n-        epochSecond = Long.MAX_VALUE;\n-        nanoOfSecond = Integer.MAX_VALUE;\n-    }\n+  @Override\n+  public void initValueAsHighest()\n+  {\n+    epochSecond = Long.MAX_VALUE;\n+    nanoOfSecond = Integer.MAX_VALUE;\n+  }\n \n-    @Override\n-    public int compareValueTo( LocalDateTimeSchemaKey other )\n+  @Override\n+  public int compareValueTo(LocalDateTimeSchemaKey other)\n+  {\n+    int compare = Long.compare(epochSecond, other.epochSecond);\n+    if (compare == 0)\n     {\n-        int compare = Long.compare( epochSecond, other.epochSecond );\n-        if ( compare == 0 )\n-        {\n-            compare = Integer.compare( nanoOfSecond, other.nanoOfSecond );\n-        }\n-        return compare;\n+      compare = Integer.compare(nanoOfSecond, other.nanoOfSecond);\n     }\n+    return compare;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( \"value=%s,entityId=%d,epochSecond=%d,nanoOfSecond=%d\",\n-                        asValue(), getEntityId(), epochSecond, nanoOfSecond );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"value=%s,entityId=%d,epochSecond=%d,nanoOfSecond=%d\",\n+        asValue(), getEntityId(), epochSecond, nanoOfSecond);\n+  }\n \n-    @Override\n-    public void writeLocalDateTime( long epochSecond, int nano )\n-    {\n-        this.nanoOfSecond = nano;\n-        this.epochSecond = epochSecond;\n-    }\n+  @Override\n+  public void writeLocalDateTime(long epochSecond, int nano)\n+  {\n+    this.nanoOfSecond = nano;\n+    this.epochSecond = epochSecond;\n+  }\n \n-    @Override\n-    protected Value assertCorrectType( Value value )\n+  @Override\n+  protected Value assertCorrectType(Value value)\n+  {\n+    if (!(value instanceof LocalDateTimeValue))\n     {\n-        if ( !(value instanceof LocalDateTimeValue) )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support LocalDateTimeValue, tried to create key from \" + value );\n-        }\n-        return value;\n+      throw new IllegalArgumentException(\n+          \"Key layout does only support LocalDateTimeValue, tried to create key from \" + value);\n     }\n+    return value;\n+  }\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/274/LocalDateTimeSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/274/LocalDateTimeSchemaKey.java\nindex a5c0f8230df..37f8056fc5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/274/LocalDateTimeSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/274/LocalDateTimeSchemaKey.java\n@@ -29,12 +29,10 @@ import static java.lang.String.format;\n  */\n class LocalDateTimeSchemaKey extends NativeSchemaKey<LocalDateTimeSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES +    /* epochSecond */\n+    static final int SIZE = Long.BYTES + /* epochSecond */\n             Integer.BYTES + /* nanoOfSecond */\n-            Long.BYTES;     /* entityId */\n-\n-    int nanoOfSecond;\n+            Long.BYTES;\n+/* entityId */ int nanoOfSecond;\n     long epochSecond;\n \n     @Override\n@@ -65,14 +63,14 @@ class LocalDateTimeSchemaKey extends NativeSchemaKey<LocalDateTimeSchemaKey>\n         {\n             compare = Integer.compare( nanoOfSecond, other.nanoOfSecond );\n         }\n-        return compare;\n+\n+return compare;\n     }\n \n     @Override\n     public String toString()\n     {\n-        return format( \"value=%s,entityId=%d,epochSecond=%d,nanoOfSecond=%d\",\n-                        asValue(), getEntityId(), epochSecond, nanoOfSecond );\n+        return format( \"value=%s,entityId=%d,epochSecond=%d,nanoOfSecond=%d\", asValue(), getEntityId(), epochSecond, nanoOfSecond );\n     }\n \n     @Override\n@@ -85,11 +83,11 @@ class LocalDateTimeSchemaKey extends NativeSchemaKey<LocalDateTimeSchemaKey>\n     @Override\n     protected Value assertCorrectType( Value value )\n     {\n-        if ( !(value instanceof LocalDateTimeValue) )\n+        if ( !( value instanceof LocalDateTimeValue) )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support LocalDateTimeValue, tried to create key from \" + value );\n+            throw new IllegalArgumentException( \"Key layout does only support LocalDateTimeValue, tried to create key from \" + value );\n         }\n-        return value;\n+\n+return value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}