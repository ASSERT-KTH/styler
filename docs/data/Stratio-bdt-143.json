{
    "project_name": "Stratio-bdt",
    "error_id": "143",
    "information": {
        "errors": [
            {
                "line": "54",
                "severity": "error",
                "message": "'CTOR_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param spec object\n     */\n    public CCTSpec(CommonG spec) {\n        this.commonspec = spec;\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/143/CCTSpec.java\nindex e3edb32c49b..5189d9cd9bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/143/CCTSpec.java\n@@ -51,6 +51,7 @@ public class CCTSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public CCTSpec(CommonG spec) {\n         this.commonspec = spec;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/143/CCTSpec.java\nindex e3edb32c49b..f56c957f0de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/143/CCTSpec.java\n@@ -46,6 +46,7 @@ import static org.testng.Assert.fail;\n public class CCTSpec extends BaseGSpec {\n \n     private final Logger logger = LoggerFactory.getLogger(CCTSpec.class);\n+\n     /**\n      * Generic constructor.\n      *\n@@ -57,17 +58,20 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Download last lines from logs of a service/framework\n+     *\n      * @param logType\n      * @param service\n      * @param taskType\n      * @throws Exception\n      */\n     @Given(\"^I want to download '(stdout|stderr)' last '(\\\\d+)' lines of service '(.+?)'( with task type '(.+?)')?\")\n-    public void downLoadLogsFromService(String logType, Integer lastLinesToRead, String service, String taskType) throws Exception {\n+    public void downLoadLogsFromService(String logType, Integer lastLinesToRead, String service,\n+                                        String taskType) throws Exception {\n         String fileOutputName = service.replace('/', '_') + taskType + logType;\n         String endPoint;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \" /deployments/service?instanceName=\" + service;\n+            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \" /deployments/service?instanceName=\" + service;\n         } else {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n@@ -75,11 +79,14 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.getLogger().debug(\"Trying to send http request to: \" + endPoint);\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(endPoint, response.get());\n-        ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null, \"id\");\n-        ArrayList<String> mesosTaskName = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null, \"name\");\n+        ArrayList<String> mesosTaskId =\n+            obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null, \"id\");\n+        ArrayList<String> mesosTaskName =\n+            obtainMesosTaskInfo(commonspec.getResponse().getResponse(), null, \"name\");\n         boolean contained = false;\n         if (mesosTaskId.size() > 1) {\n             for (int i = 0; i < mesosTaskName.size() && !contained; i++) {\n@@ -98,24 +105,30 @@ public class CCTSpec extends BaseGSpec {\n \n         String endpointTask;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endpointTask = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deployments/logs/\" + taskType;\n+            endpointTask =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deployments/logs/\" + taskType;\n         } else {\n             endpointTask = \"/service/cct-marathon-services/v1/services/tasks/\" + taskType + \"/logs\";\n         }\n         commonspec.getLogger().debug(\"Trying to send http request to: \" + endpointTask);\n         response = commonspec.generateRequest(\"GET\", false, null, null, endpointTask, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(\"GET\", response.get());\n         commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-        String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+        String path =\n+            obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" + logType;\n         String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n-        Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName), logOfTask.getBytes());\n+        Files.write(\n+            Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName),\n+            logOfTask.getBytes());\n     }\n \n-     /**\n+    /**\n      * Read last lines from logs of a service/framework\n+     *\n      * @param logType\n      * @param service\n      * @param taskType\n@@ -124,11 +137,14 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^The '(stdout|stderr)' of service '(.+?)'( with task type '(.+?)')? contains '(.+?)' in the last '(\\\\d+)' lines$\")\n-    public void readLogsFromService(String logType, String service, String taskType, String logToCheck, Integer lastLinesToRead) throws Exception {\n-        commonspec.getLogger().debug(\"Start process of read \" + lastLinesToRead + \" from the mesos log\");\n+    public void readLogsFromService(String logType, String service, String taskType,\n+                                    String logToCheck, Integer lastLinesToRead) throws Exception {\n+        commonspec.getLogger()\n+            .debug(\"Start process of read \" + lastLinesToRead + \" from the mesos log\");\n         String endPoint;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \" /deployments/service?instanceName=\" + service;\n+            endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") +\n+                \" /deployments/service?instanceName=\" + service;\n         } else {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n@@ -136,28 +152,37 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.getLogger().debug(\"Trying to send http request to: \" + endPoint);\n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         commonspec.setResponse(endPoint, response.get());\n-        ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), taskType, \"id\");\n+        ArrayList<String> mesosTaskId =\n+            obtainMesosTaskInfo(commonspec.getResponse().getResponse(), taskType, \"id\");\n         commonspec.getLogger().info(\"Mesos Task Ids obtained successfully\");\n-        commonspec.getLogger().debug(\"Mesos task ids: \"  + Arrays.toString(mesosTaskId.toArray()));\n+        commonspec.getLogger().debug(\"Mesos task ids: \" + Arrays.toString(mesosTaskId.toArray()));\n         boolean contained = false;\n         for (int i = 0; i < mesosTaskId.size() && !contained; i++) {\n             String endpointTask;\n             if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-                endpointTask = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deployments/logs/\" + taskType;\n+                endpointTask =\n+                    \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deployments/logs/\" +\n+                        taskType;\n             } else {\n-                endpointTask = \"/service/cct-marathon-services/v1/services/tasks/\" + taskType + \"/logs\";\n+                endpointTask =\n+                    \"/service/cct-marathon-services/v1/services/tasks/\" + taskType + \"/logs\";\n             }\n             commonspec.getLogger().debug(\"Trying to send http request to: \" + endpointTask);\n             response = commonspec.generateRequest(\"GET\", false, null, null, endpointTask, \"\", null);\n             if (response.get().getStatusCode() != 200) {\n-                throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+                throw new Exception(\n+                    \"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                        commonspec.getResponse().getStatusCode());\n             }\n             commonspec.setResponse(\"GET\", response.get());\n             commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-            String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+            String path =\n+                obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +\n+                    logType;\n             commonspec.getLogger().debug(\"Trying to read mesos logs\");\n             String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n             if (logOfTask.contains(logToCheck)) {\n@@ -171,6 +196,7 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Read log from mesos\n+     *\n      * @param path\n      * @param lastLines\n      * @return\n@@ -181,7 +207,8 @@ public class CCTSpec extends BaseGSpec {\n         Future<Response> response = null;\n         response = commonspec.generateRequest(\"GET\", false, null, null, path, \"\", null);\n         if (response.get().getStatusCode() != 200) {\n-            throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+            throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode());\n         }\n         JSONObject offSetJson = new JSONObject(response.get().getResponseBody());\n \n@@ -197,7 +224,8 @@ public class CCTSpec extends BaseGSpec {\n             }\n             response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n             if (response.get().getStatusCode() != 200) {\n-                throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" + commonspec.getResponse().getStatusCode());\n+                throw new Exception(\"Request failed to endpoint: \" + path + \" with status code: \" +\n+                    commonspec.getResponse().getStatusCode());\n             }\n             commonspec.setResponse(\"GET\", response.get());\n             JSONObject cctJsonResponse = new JSONObject(commonspec.getResponse().getResponse());\n@@ -209,6 +237,7 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Obtain logs path from JSON\n+     *\n      * @param response\n      * @param logType\n      * @param action\n@@ -219,7 +248,8 @@ public class CCTSpec extends BaseGSpec {\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfPaths = (JSONArray) cctJsonResponse.get(\"content\");\n         for (int i = 0; i < arrayOfPaths.length(); i++) {\n-            if (arrayOfPaths.getJSONObject(i).getString(\"name\").equalsIgnoreCase(logType) && arrayOfPaths.getJSONObject(i).getString(\"action\").equalsIgnoreCase(action)) {\n+            if (arrayOfPaths.getJSONObject(i).getString(\"name\").equalsIgnoreCase(logType) &&\n+                arrayOfPaths.getJSONObject(i).getString(\"action\").equalsIgnoreCase(action)) {\n                 path = arrayOfPaths.getJSONObject(i).getString(\"path\");\n             }\n         }\n@@ -228,12 +258,13 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Obtain info about task type from json\n+     *\n      * @param response\n      * @param taskType\n      * @param info\n      * @return\n      */\n-    public ArrayList<String> obtainMesosTaskInfo (String response, String taskType, String info) {\n+    public ArrayList<String> obtainMesosTaskInfo(String response, String taskType, String info) {\n         ArrayList<String> result = new ArrayList<String>();\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfTasks = (JSONArray) cctJsonResponse.get(\"tasks\");\n@@ -256,21 +287,30 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * TearDown a service with deploy-api\n+     *\n      * @param service\n      * @throws Exception\n      */\n     @Given(\"^I teardown the service '(.+?)' of tenant '(.+?)'\")\n     public void tearDownService(String service, String tenant) throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/teardown?frameworkName=\" + service;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/teardown?frameworkName=\" +\n+                service;\n         Future<Response> response;\n         response = commonspec.generateRequest(\"DELETE\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"DELETE\", response.get());\n-        if (commonspec.getResponse().getStatusCode() != 200 || commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 ||\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n         // Check service has disappeared\n         RestSpec restSpec = new RestSpec(commonspec);\n@@ -278,10 +318,12 @@ public class CCTSpec extends BaseGSpec {\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n             key = \"\\\"serviceName\\\"\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                \"/v1/services?tenant=\" + tenant;\n             key = \"\\\"key\\\"\";\n         }\n \n@@ -289,7 +331,8 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + service;\n         }\n-        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\", key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n+        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\",\n+            key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n \n         // Check all resources have been freed\n         DcosSpec dcosSpec = new DcosSpec(commonspec);\n@@ -298,6 +341,7 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Scale service from deploy-api\n+     *\n      * @param service\n      * @param instances\n      * @throws Exception\n@@ -305,22 +349,31 @@ public class CCTSpec extends BaseGSpec {\n     @Given(\"^I scale service '(.+?)' to '(\\\\d+)' instances\")\n     public void scaleService(String service, Integer instances) throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/scale?instances=\" + instances + \"&serviceName=\" + service;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/scale?instances=\" +\n+                instances + \"&serviceName=\" + service;\n         Future<Response> response;\n         response = commonspec.generateRequest(\"PUT\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"PUT\", response.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n \n     /**\n      * Checks in Command Center service status\n+     *\n      * @param timeout\n      * @param wait\n      * @param service\n@@ -330,17 +383,20 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check that the service '(.+?)' in CCT with '(\\\\d+)' tasks of type '(.+?)' is in '(healthy|unhealthy|running|stopped)' status\")\n-    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String taskType, String expectedStatus) throws Exception {\n+    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks,\n+                                   String taskType, String expectedStatus) throws Exception {\n         String endPoint = \"/service/deploy-api/deployments/service?instanceName=\" + service;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") != null) {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n-        boolean  statusService = false;\n+        boolean statusService = false;\n         for (int i = 0; (i <= timeout) && (!statusService); i += wait) {\n             try {\n-                Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+                Future<Response> response =\n+                    commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n                 commonspec.setResponse(endPoint, response.get());\n-                statusService = checkServiceStatusInResponse(expectedStatus, commonspec.getResponse().getResponse(), numTasks, taskType);\n+                statusService = checkServiceStatusInResponse(expectedStatus,\n+                    commonspec.getResponse().getResponse(), numTasks, taskType);\n             } catch (Exception e) {\n                 commonspec.getLogger().debug(\"Error in request \" + endPoint + \" - \" + e.toString());\n             }\n@@ -349,19 +405,22 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (!statusService) {\n-            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n+            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" +\n+                service);\n         }\n     }\n \n     /**\n      * Check status of a task in response of the CCT\n+     *\n      * @param expectedStatus\n      * @param response\n      * @param tasks\n      * @param name\n      * @return\n      */\n-    public boolean checkServiceStatusInResponse(String expectedStatus, String response, Integer tasks, String name) {\n+    public boolean checkServiceStatusInResponse(String expectedStatus, String response,\n+                                                Integer tasks, String name) {\n         JSONObject cctJsonResponse = new JSONObject(response);\n         JSONArray arrayOfTasks = (JSONArray) cctJsonResponse.get(\"tasks\");\n         int task_counter = 0;\n@@ -382,10 +441,15 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (arrayOfTasks.length() == 1 || tasks == null) {\n-            boolean res = (arrayOfTasks.getJSONObject(0).getString(key).equalsIgnoreCase(expectedStatus));\n+            boolean res =\n+                (arrayOfTasks.getJSONObject(0).getString(key).equalsIgnoreCase(expectedStatus));\n             if (!res) {\n-                commonspec.getLogger().warn(\"The status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" + arrayOfTasks.getJSONObject(0).getString(key));\n-                commonspec.getLogger().warn(\"Expected status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" + expectedStatus);\n+                commonspec.getLogger().warn(\n+                    \"The status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") + \" is \" +\n+                        arrayOfTasks.getJSONObject(0).getString(key));\n+                commonspec.getLogger().warn(\n+                    \"Expected status of \" + arrayOfTasks.getJSONObject(0).getString(\"name\") +\n+                        \" is \" + expectedStatus);\n             }\n             return res;\n         }\n@@ -395,8 +459,10 @@ public class CCTSpec extends BaseGSpec {\n             if (task.getString(\"name\").matches(regex_name)) {\n                 task_counter++;\n                 if (!task.getString(key).equalsIgnoreCase(expectedStatus)) {\n-                    commonspec.getLogger().warn(\"The status of \" + task.getString(\"name\") + \" is \" + task.getString(key));\n-                    commonspec.getLogger().warn(\" Expected status of \" + task.getString(\"name\") + \" is \" + expectedStatus);\n+                    commonspec.getLogger().warn(\n+                        \"The status of \" + task.getString(\"name\") + \" is \" + task.getString(key));\n+                    commonspec.getLogger().warn(\n+                        \" Expected status of \" + task.getString(\"name\") + \" is \" + expectedStatus);\n                     return false;\n                 }\n             }\n@@ -404,7 +470,9 @@ public class CCTSpec extends BaseGSpec {\n         if (task_counter == tasks) {\n             return true;\n         }\n-        commonspec.getLogger().error(\"The number of tasks deployed: \" + task_counter + \" are not the expected ones: \" + tasks);\n+        commonspec.getLogger().error(\n+            \"The number of tasks deployed: \" + task_counter + \" are not the expected ones: \" +\n+                tasks);\n         return false;\n     }\n \n@@ -419,7 +487,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^in less than '(\\\\d+)' seconds, checking each '(\\\\d+)' seconds, I check in CCT that the service '(.+?)'( with number of tasks '(\\\\d+)')? is in '(healthy|unhealthy|running|stopped)' status$\")\n-    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks, String expectedStatus) throws Exception {\n+    public void checkServiceStatus(Integer timeout, Integer wait, String service, Integer numTasks,\n+                                   String expectedStatus) throws Exception {\n         String endPoint = \"/service/deploy-api/deployments/service?instanceName=\" + service;\n         boolean useMarathonServices = false;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") != null) {\n@@ -431,11 +500,15 @@ public class CCTSpec extends BaseGSpec {\n \n         for (int i = 0; (i <= timeout); i += wait) {\n             try {\n-                Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n+                Future<Response> response =\n+                    commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n                 commonspec.setResponse(endPoint, response.get());\n-                found = checkServiceStatusInResponse(expectedStatus, commonspec.getResponse().getResponse(), useMarathonServices);\n+                found = checkServiceStatusInResponse(expectedStatus,\n+                    commonspec.getResponse().getResponse(), useMarathonServices);\n                 if (numTasks != null) {\n-                    isDeployed = checkServiceDeployed(commonspec.getResponse().getResponse(), numTasks, useMarathonServices);\n+                    isDeployed =\n+                        checkServiceDeployed(commonspec.getResponse().getResponse(), numTasks,\n+                            useMarathonServices);\n                 }\n             } catch (Exception e) {\n                 commonspec.getLogger().debug(\"Error in request \" + endPoint + \" - \" + e.toString());\n@@ -444,9 +517,13 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             } else {\n                 if (!found) {\n-                    commonspec.getLogger().info(expectedStatus + \" status or tasks not found after \" + i + \" seconds for service \" + service);\n+                    commonspec.getLogger().info(\n+                        expectedStatus + \" status or tasks not found after \" + i +\n+                            \" seconds for service \" + service);\n                 } else if (numTasks != null && !isDeployed) {\n-                    commonspec.getLogger().info(\"Tasks have not been deployed successfully after \" + i + \" seconds for service \" + service);\n+                    commonspec.getLogger().info(\n+                        \"Tasks have not been deployed successfully after \" + i +\n+                            \" seconds for service \" + service);\n                 }\n                 if (i < timeout) {\n                     Thread.sleep(wait * 1000);\n@@ -454,22 +531,25 @@ public class CCTSpec extends BaseGSpec {\n             }\n         }\n         if (!found) {\n-            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" + service);\n+            fail(expectedStatus + \" status not found after \" + timeout + \" seconds for service \" +\n+                service);\n         }\n         if ((numTasks != null) && !isDeployed) {\n-            fail(\"Tasks have not been deployed successfully after \" + timeout + \" seconds for service \" + service);\n+            fail(\"Tasks have not been deployed successfully after \" + timeout +\n+                \" seconds for service \" + service);\n         }\n     }\n \n     /**\n      * Checks in Command Center response if the service has the expected status\n      *\n-     * @param expectedStatus Expected status (healthy|unhealthy)\n-     * @param response Command center response\n+     * @param expectedStatus      Expected status (healthy|unhealthy)\n+     * @param response            Command center response\n      * @param useMarathonServices True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n-    private boolean checkServiceStatusInResponse(String expectedStatus, String response, boolean useMarathonServices) {\n+    private boolean checkServiceStatusInResponse(String expectedStatus, String response,\n+                                                 boolean useMarathonServices) {\n         if (useMarathonServices) {\n             JSONObject cctJsonResponse = new JSONObject(response);\n             String status = cctJsonResponse.getString(\"status\");\n@@ -478,16 +558,22 @@ public class CCTSpec extends BaseGSpec {\n                 case \"healthy\":\n                 case \"unhealthy\":\n                     return healthiness.equalsIgnoreCase(expectedStatus);\n-                case \"running\":     return status.equalsIgnoreCase(\"RUNNING\");\n-                case \"stopped\":     return status.equalsIgnoreCase(\"SUSPENDED\");\n+                case \"running\":\n+                    return status.equalsIgnoreCase(\"RUNNING\");\n+                case \"stopped\":\n+                    return status.equalsIgnoreCase(\"SUSPENDED\");\n                 default:\n             }\n         } else {\n             switch (expectedStatus) {\n-                case \"healthy\":     return response.contains(\"\\\"healthy\\\":1\");\n-                case \"unhealthy\":   return response.contains(\"\\\"healthy\\\":2\");\n-                case \"running\":     return response.contains(\"\\\"status\\\":2\");\n-                case \"stopped\":     return response.contains(\"\\\"status\\\":1\");\n+                case \"healthy\":\n+                    return response.contains(\"\\\"healthy\\\":1\");\n+                case \"unhealthy\":\n+                    return response.contains(\"\\\"healthy\\\":2\");\n+                case \"running\":\n+                    return response.contains(\"\\\"status\\\":2\");\n+                case \"stopped\":\n+                    return response.contains(\"\\\"status\\\":1\");\n                 default:\n             }\n         }\n@@ -498,12 +584,13 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Checks in Command Center response if the service tasks are deployed successfully\n      *\n-     * @param response Command center response\n-     * @param numTasks Command center response\n+     * @param response            Command center response\n+     * @param numTasks            Command center response\n      * @param useMarathonServices True if cct-marathon-services is used in request, False if deploy-api is used in request\n      * @return If service status has the expected status\n      */\n-    private boolean checkServiceDeployed(String response, int numTasks, boolean useMarathonServices) {\n+    private boolean checkServiceDeployed(String response, int numTasks,\n+                                         boolean useMarathonServices) {\n \n         JSONObject deployment = new JSONObject(response);\n         JSONArray tasks = (JSONArray) deployment.get(\"tasks\");\n@@ -511,9 +598,12 @@ public class CCTSpec extends BaseGSpec {\n \n         for (int i = 0; i < tasks.length(); i++) {\n             if (useMarathonServices) {\n-                numTasksRunning = tasks.getJSONObject(i).get(\"status\").equals(\"RUNNING\") ? (numTasksRunning + 1) : numTasksRunning;\n+                numTasksRunning =\n+                    tasks.getJSONObject(i).get(\"status\").equals(\"RUNNING\") ? (numTasksRunning + 1) :\n+                        numTasksRunning;\n             } else {\n-                numTasksRunning = tasks.getJSONObject(i).get(\"state\").equals(\"TASK_RUNNING\") ? (numTasksRunning + 1) : numTasksRunning;\n+                numTasksRunning = tasks.getJSONObject(i).get(\"state\").equals(\"TASK_RUNNING\") ?\n+                    (numTasksRunning + 1) : numTasksRunning;\n             }\n         }\n         return numTasksRunning == numTasks;\n@@ -540,8 +630,12 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -565,15 +659,20 @@ public class CCTSpec extends BaseGSpec {\n     @Given(\"^I get global configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getGlobalConfig(String envVar, String fileName) throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/config\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/config\";\n         Future<Response> response;\n \n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -597,15 +696,20 @@ public class CCTSpec extends BaseGSpec {\n     @Given(\"^I get schema from global configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getSchemaGlobalConfig(String envVar, String fileName) throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/schema\";\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/central/schema\";\n         Future<Response> response;\n \n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -630,15 +734,20 @@ public class CCTSpec extends BaseGSpec {\n     @Given(\"^I get network '(.*?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n     public void getNetworkById(String networkId, String envVar, String fileName) throws Exception {\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n         Future<Response> response;\n \n         response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -669,8 +778,12 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -693,7 +806,8 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^I get path '(.*?)' from Mesos configuration( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getMesosConfiguration(String path, String envVar, String fileName) throws Exception {\n+    public void getMesosConfiguration(String path, String envVar, String fileName)\n+        throws Exception {\n \n         Future<Response> response;\n \n@@ -705,8 +819,12 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -745,7 +863,10 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I (create|update) calico network '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string|gov)')? with:$\")\n-    public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation, String networkId, String contains, String responseVal, String baseData, String type, DataTable modifications) throws Exception {\n+    public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation,\n+                                     String networkId, String contains, String responseVal,\n+                                     String baseData, String type, DataTable modifications)\n+        throws Exception {\n \n         // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n@@ -780,8 +901,11 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n             try {\n-                commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, modifiedData, type);\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n+                commonspec.getLogger()\n+                    .debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint,\n+                        modifiedData, type);\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint, modifiedData, type);\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n@@ -814,9 +938,11 @@ public class CCTSpec extends BaseGSpec {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value not found after \" + timeout + \" seconds\");\n         }\n     }\n \n@@ -829,12 +955,17 @@ public class CCTSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I( force to)? delete calico network '(.+?)' so that the response( does not)? contains '(.+?)'$\")\n-    public void deleteCalicoNetworkTimeout(Integer timeout, Integer wait, String force, String networkId, String contains, String responseVal) throws Exception {\n+    public void deleteCalicoNetworkTimeout(Integer timeout, Integer wait, String force,\n+                                           String networkId, String contains, String responseVal)\n+        throws Exception {\n \n-        if (force == null && (networkId.equals(\"logs\") || networkId.equals(\"stratio\") || networkId.equals(\"metrics\") || networkId.equals(\"stratio-shared\"))) {\n-            throw new Exception(\"It is not possible deleting networks stratio, metrics, logs or stratio-shared\");\n+        if (force == null && (networkId.equals(\"logs\") || networkId.equals(\"stratio\") ||\n+            networkId.equals(\"metrics\") || networkId.equals(\"stratio-shared\"))) {\n+            throw new Exception(\n+                \"It is not possible deleting networks stratio, metrics, logs or stratio-shared\");\n         }\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"configuration_api_id\") + \"/network/\" + networkId;\n         String requestType = \"DELETE\";\n \n         if (wait == null || timeout == null) {\n@@ -860,8 +991,11 @@ public class CCTSpec extends BaseGSpec {\n                 break;\n             }\n             try {\n-                commonspec.getLogger().debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint, null, null);\n-                response = commonspec.generateRequest(requestType, false, null, null, endPoint, null, null);\n+                commonspec.getLogger()\n+                    .debug(\"Generating request {} to {} with data {} as {}\", requestType, endPoint,\n+                        null, null);\n+                response = commonspec\n+                    .generateRequest(requestType, false, null, null, endPoint, null, null);\n                 commonspec.getLogger().debug(\"Saving response\");\n                 commonspec.setResponse(requestType, response.get());\n                 commonspec.getLogger().debug(\"Checking response value\");\n@@ -894,37 +1028,47 @@ public class CCTSpec extends BaseGSpec {\n             throw (ex);\n         }\n         if (searchUntilContains) {\n-            commonspec.getLogger().info(\"Success! Response value found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value found after \" + timeout + \" seconds\");\n         } else {\n-            commonspec.getLogger().info(\"Success! Response value not found after \" + timeout + \" seconds\");\n+            commonspec.getLogger()\n+                .info(\"Success! Response value not found after \" + timeout + \" seconds\");\n         }\n     }\n \n     /**\n      * Get service schema\n      *\n-     * @param level     schema level\n-     * @param service   service name\n-     * @param model     service model\n-     * @param version   service version\n-     * @param envVar    environment variable to save response in\n-     * @param fileName  file name where response is saved\n+     * @param level    schema level\n+     * @param service  service name\n+     * @param model    service model\n+     * @param version  service version\n+     * @param envVar   environment variable to save response in\n+     * @param fileName file name where response is saved\n      * @throws Exception\n      */\n     @Given(\"^I get schema( with level '(\\\\d+)')? from service '(.+?)' with model '(.+?)' and version '(.+?)'( and save it in environment variable '(.*?)')?( and save it in file '(.*?)')?$\")\n-    public void getServiceSchema(Integer level, String service, String model, String version, String envVar, String fileName) throws Exception {\n+    public void getServiceSchema(Integer level, String service, String model, String version,\n+                                 String envVar, String fileName) throws Exception {\n \n         if (level == null) {\n             level = 1;\n         }\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?enriched=true&level=\" + level;\n-        Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model +\n+                \"/\" + version + \"/schema?enriched=true&level=\" + level;\n+        Future<Response> response =\n+            commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null, \"\");\n         commonspec.setResponse(\"GET\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request failed to endpoint: \" + endPoint + \" with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         String json = commonspec.getResponse().getResponse();\n@@ -943,11 +1087,13 @@ public class CCTSpec extends BaseGSpec {\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n         commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n         // Note that this Writer will delete the file if it exists\n-        Writer out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(absolutePathFile), StandardCharsets.UTF_8));\n+        Writer out = new BufferedWriter(\n+            new OutputStreamWriter(new FileOutputStream(absolutePathFile), StandardCharsets.UTF_8));\n         try {\n             out.write(json);\n         } catch (Exception e) {\n-            commonspec.getLogger().error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n+            commonspec.getLogger()\n+                .error(\"Custom file {} hasn't been created:\\n{}\", absolutePathFile, e.toString());\n         } finally {\n             out.close();\n         }\n@@ -957,26 +1103,36 @@ public class CCTSpec extends BaseGSpec {\n \n     /**\n      * Install service\n-     * @param service   service name\n-     * @param folder    folder where service are going to be installed\n-     * @param model     service model\n-     * @param version   service version\n-     * @param name      service instance name\n-     * @param tenant    tenant where to install service in\n-     * @param jsonFile  marathon json to deploy\n+     *\n+     * @param service  service name\n+     * @param folder   folder where service are going to be installed\n+     * @param model    service model\n+     * @param version  service version\n+     * @param name     service instance name\n+     * @param tenant   tenant where to install service in\n+     * @param jsonFile marathon json to deploy\n      * @throws Exception\n      */\n     @Given(\"^I install service '(.+?)'( in folder '(.+?)')? with model '(.+?)' and version '(.+?)' and instance name '(.+?)' in tenant '(.+?)' using json '(.+?)'$\")\n-    public void installServiceFromMarathonJson(String service, String folder, String model, String version, String name, String tenant, String jsonFile) throws Exception {\n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model + \"/\" + version + \"/schema?tenantId=\" + tenant;\n+    public void installServiceFromMarathonJson(String service, String folder, String model,\n+                                               String version, String name, String tenant,\n+                                               String jsonFile) throws Exception {\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/\" + service + \"/\" + model +\n+                \"/\" + version + \"/schema?tenantId=\" + tenant;\n         String data = this.commonspec.retrieveData(jsonFile, \"json\");\n \n-        Future<Response> response = commonspec.generateRequest(\"POST\", true, null, null, endPoint, data, \"json\");\n+        Future<Response> response =\n+            commonspec.generateRequest(\"POST\", true, null, null, endPoint, data, \"json\");\n         commonspec.setResponse(\"POST\", response.get());\n \n         if (commonspec.getResponse().getStatusCode() != 202) {\n-            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         // Check Application in API\n@@ -984,9 +1140,11 @@ public class CCTSpec extends BaseGSpec {\n \n         String endPointStatus;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                \"/v1/services?tenant=\" + tenant;\n         }\n \n         if (folder != null && folder.startsWith(\"/\")) {\n@@ -1003,7 +1161,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + name;\n             if (folder != null) {\n-                serviceName =  \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n+                serviceName = \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n             }\n         }\n \n@@ -1013,8 +1171,8 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Uninstall service from tenant\n      *\n-     * @param service   service name\n-     * @param tenant    tenant where service is installed\n+     * @param service service name\n+     * @param tenant  tenant where service is installed\n      * @throws Exception\n      */\n     @Given(\"^I uninstall service '(.+?)'( in folder '(.+?)')? from tenant '(.+?)'$\")\n@@ -1033,17 +1191,25 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = tenant + \"/\" + tenant + \"-\" + service;\n             if (folder != null) {\n-                serviceName =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n+                serviceName = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n             }\n         }\n \n-        String endPoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/uninstall?app=\" + serviceName;\n-        Future<Response> response = commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, \"\", \"json\");\n+        String endPoint =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/uninstall?app=\" +\n+                serviceName;\n+        Future<Response> response =\n+            commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", response.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 202 && commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 202 &&\n+            commonspec.getResponse().getStatusCode() != 200) {\n+            logger.error(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Request to endpoint: \" + endPoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n \n         // Check service has disappeared\n@@ -1052,14 +1218,17 @@ public class CCTSpec extends BaseGSpec {\n         String endPointStatus;\n         String key;\n         if (ThreadProperty.get(\"cct-marathon-services_id\") == null) {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n+            endPointStatus =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/deploy/status/all\";\n             key = \"\\\"serviceName\\\"\";\n         } else {\n-            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") + \"/v1/services?tenant=\" + tenant;\n+            endPointStatus = \"/service/\" + ThreadProperty.get(\"cct-marathon-services_id\") +\n+                \"/v1/services?tenant=\" + tenant;\n             key = \"\\\"id\\\"\";\n         }\n \n-        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\", key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n+        restSpec.sendRequestTimeout(200, 20, \"GET\", endPointStatus, \"does not\",\n+            key + \":\" + \"\\\"\" + serviceName + \"\\\"\");\n         // Check all resources have been freed\n         DcosSpec dcosSpec = new DcosSpec(commonspec);\n         dcosSpec.checkResources(serviceName);\n@@ -1068,25 +1237,29 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Upload rules\n      *\n-     * @param rulesPath   path to rules zip file\n-     * @param priority    (optional) priority to assign to the rules\n-     * @param version     (optional) version to use for rules\n+     * @param rulesPath path to rules zip file\n+     * @param priority  (optional) priority to assign to the rules\n+     * @param version   (optional) version to use for rules\n      * @throws Exception\n      */\n     @Given(\"^I upload rules file '(.+?)'( with priority '(.+?)')?( overriding version to '(.+?)')?\")\n     public void uploadRules(String rulesPath, String priority, String version) throws Exception {\n         // Check file exists\n         File rules = new File(rulesPath);\n-        Assertions.assertThat(rules.exists()).as(\"File: \" + rulesPath + \" does not exist.\").isTrue();\n+        Assertions.assertThat(rules.exists()).as(\"File: \" + rulesPath + \" does not exist.\")\n+            .isTrue();\n \n         // Obtain endpoint\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n-        String endPointUpload = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/knowledge/upload\";\n+        String endPointUpload =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/knowledge/upload\";\n \n         // Obtain URL\n-        String restURL = \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n+        String restURL =\n+            \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n \n         // Form query parameters\n         String headers = \"-H \\\"accept: */*\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n@@ -1095,27 +1268,31 @@ public class CCTSpec extends BaseGSpec {\n         if (priority == null) {\n             priority = \"0\";\n         }\n-        forms = forms + \" -F \\\"priority=\" + priority  + \"\\\"\";\n+        forms = forms + \" -F \\\"priority=\" + priority + \"\\\"\";\n \n         if (version != null) {\n             forms = forms + \" -F \\\"version=\" + version + \"\\\"\";\n         }\n \n-        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n-        String command = \"curl -X POST -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n+        String cookie =\n+            \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n+        String command =\n+            \"curl -X POST -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n \n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(0);\n-        Assertions.assertThat(commonspec.getCommandResult()).as(\"Not possible to upload rules: \" + commonspec.getCommandResult()).doesNotContain(\"Error\");\n+        Assertions.assertThat(commonspec.getCommandResult())\n+            .as(\"Not possible to upload rules: \" + commonspec.getCommandResult())\n+            .doesNotContain(\"Error\");\n     }\n \n     /**\n      * Upload descriptors\n      *\n-     * @param descriptorsPath   path to descriptors zip file\n-     * @param version     (optional) version to use for rules\n+     * @param descriptorsPath path to descriptors zip file\n+     * @param version         (optional) version to use for rules\n      * @throws Exception\n      */\n     @Given(\"^I upload descriptors file '(.+?)'( overriding version to '(.+?)')?\")\n@@ -1126,19 +1303,24 @@ public class CCTSpec extends BaseGSpec {\n \n         // Check file exists\n         File descriptors = new File(descriptorsPath);\n-        Assertions.assertThat(descriptors.exists()).as(\"File: \" + descriptorsPath + \" does not exist.\").isTrue();\n+        Assertions.assertThat(descriptors.exists())\n+            .as(\"File: \" + descriptorsPath + \" does not exist.\").isTrue();\n \n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         // Obtain cookie\n-        String cookie = \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n+        String cookie =\n+            \"-H \\\"Cookie:dcos-acs-auth-cookie=\" + ThreadProperty.get(\"dcosAuthCookie\") + \"\\\"\";\n \n         String endPointUpload = \"\";\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endPointUpload = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors\";\n+            endPointUpload =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors\";\n             headers = \"-H \\\"accept: application/json\\\" -H \\\"Content-Type: multipart/form-data\\\"\";\n             forms = \"-F \\\"file=@\" + descriptorsPath + \";type=application/zip\\\"\";\n             op = \"PUT\";\n@@ -1154,10 +1336,12 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Obtain URL\n-        String restURL = \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n+        String restURL =\n+            \"https://\" + commonspec.getRestHost() + commonspec.getRestPort() + endPointUpload;\n \n         // Form query\n-        String command = \"curl -X \" + op + \" -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n+        String command =\n+            \"curl -X \" + op + \" -k \" + cookie + \" \\\"\" + restURL + \"\\\" \" + headers + \" \" + forms;\n \n         // Execute command\n         commonspec.runLocalCommand(command);\n@@ -1199,17 +1383,19 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Update a deployed service\n      *\n-     * @param serviceName       name of the service to be updated\n-     * @param folder            (optional) name of the folder where service is deployed\n-     * @param tenant            tenant where service is deployed\n-     * @param version           version of the deployed service\n-     * @param modifications     modifications to perform in the deployed json\n+     * @param serviceName   name of the service to be updated\n+     * @param folder        (optional) name of the folder where service is deployed\n+     * @param tenant        tenant where service is deployed\n+     * @param version       version of the deployed service\n+     * @param modifications modifications to perform in the deployed json\n      * @throws Exception\n      */\n     @Given(\"^I update service '(.+?)'( in folder '(.+?)')? in tenant '(.+?)' based on version '(.+?)' with:$\")\n-    public void updateCCTService(String serviceName, String folder, String tenant, String version, DataTable modifications) throws Exception {\n+    public void updateCCTService(String serviceName, String folder, String tenant, String version,\n+                                 DataTable modifications) throws Exception {\n         if (ThreadProperty.get(\"deploy_api_id\") == null) {\n-            fail(\"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n+            fail(\n+                \"deploy_api_id variable is not set. Check deploy-api is installed and @dcos annotation is working properly.\");\n         }\n \n         // obtain service name\n@@ -1227,7 +1413,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             service = tenant + \"/\" + tenant + \"-\" + serviceName;\n             if (folder != null) {\n-                service =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n+                service = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n             }\n         }\n \n@@ -1240,13 +1426,21 @@ public class CCTSpec extends BaseGSpec {\n         }\n \n         // Obtain deployed service json\n-        String endpointJson = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service + \"?version=\" + version;\n-        Future<Response> responseJson = commonspec.generateRequest(\"GET\", true, null, null, endpointJson, \"\", \"json\");\n+        String endpointJson =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service + \"?version=\" +\n+                version;\n+        Future<Response> responseJson =\n+            commonspec.generateRequest(\"GET\", true, null, null, endpointJson, \"\", \"json\");\n         commonspec.setResponse(\"GET\", responseJson.get());\n \n         if (commonspec.getResponse().getStatusCode() != 200) {\n-            logger.error(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request to endpoint: \" + endpointJson + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\n+                \"Request to endpoint: \" + endpointJson + \" failed with status code: \" +\n+                    commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                    commonspec.getResponse().getResponse());\n         }\n \n         // Modify json according to provided changes\n@@ -1254,13 +1448,20 @@ public class CCTSpec extends BaseGSpec {\n         String modifiedData = commonspec.modifyData(deployedJson, \"json\", modifications);\n \n         // Deploy new json\n-        String endpointUpdate = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service;\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpointUpdate, modifiedData, \"json\");\n+        String endpointUpdate =\n+            \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/update/\" + service;\n+        Future<Response> responseUpdate = commonspec\n+            .generateRequest(\"PUT\", true, null, null, endpointUpdate, modifiedData, \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n \n         if (commonspec.getResponse().getStatusCode() != 202) {\n-            logger.error(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+            logger.error(\"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\n+                \"Request to endpoint: \" + endpointUpdate + \" failed with status code: \" +\n+                    commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                    commonspec.getResponse().getResponse());\n         }\n     }\n \n@@ -1268,27 +1469,34 @@ public class CCTSpec extends BaseGSpec {\n     /**\n      * Upload a descriptor\n      *\n-     * @param service           name of the descriptor to be updated\n-     * @param model             model of the descriptor\n-     * @param version           version of the descriptor\n-     * @param originalJson      base descriptor json\n-     * @param modifications     modifications to perform in the descriptor json\n+     * @param service       name of the descriptor to be updated\n+     * @param model         model of the descriptor\n+     * @param version       version of the descriptor\n+     * @param originalJson  base descriptor json\n+     * @param modifications modifications to perform in the descriptor json\n      * @throws Exception\n      */\n     @Given(\"^I upload descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n-    public void uploadCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n+    public void uploadCCTDescriptor(String service, String model, String version,\n+                                    String originalJson, DataTable modifications) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         String endpoint;\n         String op;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service +\n+                    \"/\" + model + \"/\" + version;\n             op = \"PUT\";\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" +\n+                    model + \"/\" + version + \"/descriptor\";\n             op = \"POST\";\n         }\n \n@@ -1298,37 +1506,50 @@ public class CCTSpec extends BaseGSpec {\n         String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n \n         // Upload new descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(op, true, null, null, endpoint, modifiedData, \"json\");\n+        Future<Response> responseUpdate =\n+            commonspec.generateRequest(op, true, null, null, endpoint, modifiedData, \"json\");\n         commonspec.setResponse(op, responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Upload descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Upload descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Upload descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n     /**\n      * Update a descriptor\n      *\n-     * @param service           name of the descriptor to be updated\n-     * @param model             model of the descriptor\n-     * @param version           version of the descriptor\n-     * @param originalJson      base descriptor json\n-     * @param modifications     modifications to perform in the descriptor json\n+     * @param service       name of the descriptor to be updated\n+     * @param model         model of the descriptor\n+     * @param version       version of the descriptor\n+     * @param originalJson  base descriptor json\n+     * @param modifications modifications to perform in the descriptor json\n      * @throws Exception\n      */\n     @Given(\"^I update descriptor for service '(.+?)', model '(.+?)' version '(.+?)' based on '(.+?)' with:$\")\n-    public void updateCCTDescriptor(String service, String model, String version, String originalJson, DataTable modifications) throws Exception {\n+    public void updateCCTDescriptor(String service, String model, String version,\n+                                    String originalJson, DataTable modifications) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         String endpoint;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service +\n+                    \"/\" + model + \"/\" + version;\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" +\n+                    model + \"/\" + version + \"/descriptor\";\n         }\n \n         // Retrieve data\n@@ -1337,44 +1558,63 @@ public class CCTSpec extends BaseGSpec {\n         String modifiedData = commonspec.modifyData(retrievedData, \"json\", modifications);\n \n         // Update descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"PUT\", true, null, null, endpoint, modifiedData, \"json\");\n+        Future<Response> responseUpdate =\n+            commonspec.generateRequest(\"PUT\", true, null, null, endpoint, modifiedData, \"json\");\n         commonspec.setResponse(\"PUT\", responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201) {\n-            logger.error(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Update descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201) {\n+            logger.error(\"Update descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Update descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n     /**\n      * Delete a descriptor\n      *\n-     * @param service           name of the descriptor to be updated\n-     * @param model             model of the descriptor\n-     * @param version           version of the descriptor\n+     * @param service name of the descriptor to be updated\n+     * @param model   model of the descriptor\n+     * @param version version of the descriptor\n      * @throws Exception\n      */\n     @Given(\"^I delete descriptor for service '(.+?)', model '(.+?)' version '(.+?)'$\")\n     public void deleteCCTDescriptor(String service, String model, String version) throws Exception {\n         // Obtain endpoint\n-        if (ThreadProperty.get(\"deploy_api_id\") == null && ThreadProperty.get(\"cct-universe_id\") == null) {\n-            fail(\"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n+        if (ThreadProperty.get(\"deploy_api_id\") == null &&\n+            ThreadProperty.get(\"cct-universe_id\") == null) {\n+            fail(\n+                \"deploy_api_id variable and cct-universe_id are not set. Check deploy-api or cct-universe are installed and @dcos annotation is working properly.\");\n         }\n \n         String endpoint;\n         if (ThreadProperty.get(\"cct-universe_id\") != null) {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service + \"/\" + model + \"/\" + version;\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"cct-universe_id\") + \"/v1/descriptors/\" + service +\n+                    \"/\" + model + \"/\" + version;\n         } else {\n-            endpoint = \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" + model + \"/\" + version + \"/descriptor\";\n+            endpoint =\n+                \"/service/\" + ThreadProperty.get(\"deploy_api_id\") + \"/universe/\" + service + \"/\" +\n+                    model + \"/\" + version + \"/descriptor\";\n         }\n \n         // Delete descriptor\n-        Future<Response> responseUpdate = commonspec.generateRequest(\"DELETE\", true, null, null, endpoint, \"\", \"json\");\n+        Future<Response> responseUpdate =\n+            commonspec.generateRequest(\"DELETE\", true, null, null, endpoint, \"\", \"json\");\n         commonspec.setResponse(\"DELETE\", responseUpdate.get());\n \n-        if (commonspec.getResponse().getStatusCode() != 200 && commonspec.getResponse().getStatusCode() != 201 && commonspec.getResponse().getStatusCode() != 204) {\n-            logger.error(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n-            throw new Exception(\"Delete descriptor: \" + endpoint + \" failed with status code: \" + commonspec.getResponse().getStatusCode() + \" and response: \" + commonspec.getResponse().getResponse());\n+        if (commonspec.getResponse().getStatusCode() != 200 &&\n+            commonspec.getResponse().getStatusCode() != 201 &&\n+            commonspec.getResponse().getStatusCode() != 204) {\n+            logger.error(\"Delete descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n+            throw new Exception(\"Delete descriptor: \" + endpoint + \" failed with status code: \" +\n+                commonspec.getResponse().getStatusCode() + \" and response: \" +\n+                commonspec.getResponse().getResponse());\n         }\n     }\n \n",
            "diff_size": 454
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "127",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "483",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "485",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "486",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "491",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "493",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "495",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "497",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 4, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "498",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/143/CCTSpec.java\nindex e3edb32c49b..bba058ed334 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/143/CCTSpec.java\n@@ -46,7 +46,8 @@ import static org.testng.Assert.fail;\n public class CCTSpec extends BaseGSpec {\n \n     private final Logger logger = LoggerFactory.getLogger(CCTSpec.class);\n-    /**\n+\n+/**\n      * Generic constructor.\n      *\n      * @param spec object\n@@ -109,12 +110,12 @@ public class CCTSpec extends BaseGSpec {\n         }\n         commonspec.setResponse(\"GET\", response.get());\n         commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-        String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+        String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" + logType;\n         String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n         Files.write(Paths.get(System.getProperty(\"user.dir\") + \"/target/test-classes/\" + fileOutputName), logOfTask.getBytes());\n     }\n \n-     /**\n+/**\n      * Read last lines from logs of a service/framework\n      * @param logType\n      * @param service\n@@ -123,7 +124,7 @@ public class CCTSpec extends BaseGSpec {\n      * @param lastLinesToRead\n      * @throws Exception\n      */\n-    @Given(\"^The '(stdout|stderr)' of service '(.+?)'( with task type '(.+?)')? contains '(.+?)' in the last '(\\\\d+)' lines$\")\n+@Given(\"^The '(stdout|stderr)' of service '(.+?)'( with task type '(.+?)')? contains '(.+?)' in the last '(\\\\d+)' lines$\")\n     public void readLogsFromService(String logType, String service, String taskType, String logToCheck, Integer lastLinesToRead) throws Exception {\n         commonspec.getLogger().debug(\"Start process of read \" + lastLinesToRead + \" from the mesos log\");\n         String endPoint;\n@@ -141,7 +142,7 @@ public class CCTSpec extends BaseGSpec {\n         commonspec.setResponse(endPoint, response.get());\n         ArrayList<String> mesosTaskId = obtainMesosTaskInfo(commonspec.getResponse().getResponse(), taskType, \"id\");\n         commonspec.getLogger().info(\"Mesos Task Ids obtained successfully\");\n-        commonspec.getLogger().debug(\"Mesos task ids: \"  + Arrays.toString(mesosTaskId.toArray()));\n+        commonspec.getLogger().debug(\"Mesos task ids: \" + Arrays.toString(mesosTaskId.toArray()));\n         boolean contained = false;\n         for (int i = 0; i < mesosTaskId.size() && !contained; i++) {\n             String endpointTask;\n@@ -157,7 +158,7 @@ public class CCTSpec extends BaseGSpec {\n             }\n             commonspec.setResponse(\"GET\", response.get());\n             commonspec.getLogger().debug(\"Trying to obtain mesos logs path\");\n-            String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" +  logType;\n+            String path = obtainLogsPath(commonspec.getResponse().getResponse(), logType, \"READ\") + \"/\" + logType;\n             commonspec.getLogger().debug(\"Trying to read mesos logs\");\n             String logOfTask = readLogsFromMesos(path, lastLinesToRead);\n             if (logOfTask.contains(logToCheck)) {\n@@ -335,7 +336,7 @@ public class CCTSpec extends BaseGSpec {\n         if (ThreadProperty.get(\"cct-marathon-services_id\") != null) {\n             endPoint = \"/service/cct-marathon-services/v1/services/\" + service;\n         }\n-        boolean  statusService = false;\n+        boolean statusService = false;\n         for (int i = 0; (i <= timeout) && (!statusService); i += wait) {\n             try {\n                 Future<Response> response = commonspec.generateRequest(\"GET\", false, null, null, endPoint, \"\", null);\n@@ -478,17 +479,23 @@ public class CCTSpec extends BaseGSpec {\n                 case \"healthy\":\n                 case \"unhealthy\":\n                     return healthiness.equalsIgnoreCase(expectedStatus);\n-                case \"running\":     return status.equalsIgnoreCase(\"RUNNING\");\n-                case \"stopped\":     return status.equalsIgnoreCase(\"SUSPENDED\");\n-                default:\n+                case \"running\":\n+    return status.equalsIgnoreCase(\"RUNNING\");\n+                case \"stopped\":\n+    return status.equalsIgnoreCase(\"SUSPENDED\");\n+    default:\n             }\n         } else {\n             switch (expectedStatus) {\n-                case \"healthy\":     return response.contains(\"\\\"healthy\\\":1\");\n-                case \"unhealthy\":   return response.contains(\"\\\"healthy\\\":2\");\n-                case \"running\":     return response.contains(\"\\\"status\\\":2\");\n-                case \"stopped\":     return response.contains(\"\\\"status\\\":1\");\n-                default:\n+                case \"healthy\":\n+    return response.contains(\"\\\"healthy\\\":1\");\n+                case \"unhealthy\":\n+    return response.contains(\"\\\"healthy\\\":2\");\n+                case \"running\":\n+    return response.contains(\"\\\"status\\\":2\");\n+                case \"stopped\":\n+    return response.contains(\"\\\"status\\\":1\");\n+    default:\n             }\n         }\n         return false;\n@@ -746,8 +753,7 @@ public class CCTSpec extends BaseGSpec {\n      */\n     @Given(\"^(in less than '(\\\\d+)' seconds,)?( checking each '(\\\\d+)' seconds, )?I (create|update) calico network '(.+?)' so that the response( does not)? contains '(.+?)' based on '([^:]+?)'( as '(json|string|gov)')? with:$\")\n     public void calicoNetworkTimeout(Integer timeout, Integer wait, String operation, String networkId, String contains, String responseVal, String baseData, String type, DataTable modifications) throws Exception {\n-\n-        // Retrieve data\n+    // Retrieve data\n         String retrievedData = commonspec.retrieveData(baseData, type);\n \n         // Modify data\n@@ -937,8 +943,7 @@ public class CCTSpec extends BaseGSpec {\n     }\n \n     private void writeInFile(String json, String fileName) throws Exception {\n-\n-        // Create file (temporary) and set path to be accessible within test\n+    // Create file (temporary) and set path to be accessible within test\n         File tempDirectory = new File(System.getProperty(\"user.dir\") + \"/target/test-classes/\");\n         String absolutePathFile = tempDirectory.getAbsolutePath() + \"/\" + fileName;\n         commonspec.getLogger().debug(\"Creating file {} in 'target/test-classes'\", absolutePathFile);\n@@ -1003,7 +1008,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = \"/\" + tenant + \"/\" + tenant + \"-\" + name;\n             if (folder != null) {\n-                serviceName =  \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n+                serviceName = \"/\" + tenant + \"/\" + folder + \"/\" + tenant + \"-\" + name;\n             }\n         }\n \n@@ -1033,7 +1038,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             serviceName = tenant + \"/\" + tenant + \"-\" + service;\n             if (folder != null) {\n-                serviceName =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n+                serviceName = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + service;\n             }\n         }\n \n@@ -1095,7 +1100,7 @@ public class CCTSpec extends BaseGSpec {\n         if (priority == null) {\n             priority = \"0\";\n         }\n-        forms = forms + \" -F \\\"priority=\" + priority  + \"\\\"\";\n+        forms = forms + \" -F \\\"priority=\" + priority + \"\\\"\";\n \n         if (version != null) {\n             forms = forms + \" -F \\\"version=\" + version + \"\\\"\";\n@@ -1227,7 +1232,7 @@ public class CCTSpec extends BaseGSpec {\n         if (!\"NONE\".equals(tenant)) {\n             service = tenant + \"/\" + tenant + \"-\" + serviceName;\n             if (folder != null) {\n-                service =  tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n+                service = tenant + \"/\" + folder + \"/\" + tenant + \"-\" + serviceName;\n             }\n         }\n \n@@ -1378,4 +1383,4 @@ public class CCTSpec extends BaseGSpec {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/143/CCTSpec.java\nindex e3edb32c49b..5189d9cd9bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/143/CCTSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_three_grams/143/CCTSpec.java\n@@ -51,6 +51,7 @@ public class CCTSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public CCTSpec(CommonG spec) {\n         this.commonspec = spec;\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}