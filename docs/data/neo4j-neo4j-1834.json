{
    "project_name": "neo4j-neo4j",
    "error_id": "1834",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1834/RoutingResultFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1834/RoutingResultFormat.java\nindex 1763267b44f..2a7d035a640 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1834/RoutingResultFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1834/RoutingResultFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.builtin.routing;\n \n import java.util.ArrayList;\n@@ -50,115 +51,115 @@ public final class RoutingResultFormat\n {\n     private static final String ROLE_KEY = \"role\";\n     private static final String ADDRESSES_KEY = \"addresses\";\n-    private static final TextValue READ_NAME = utf8Value( READ.name() );\n-    private static final TextValue WRTE_NAME = utf8Value( WRITE.name() );\n-    private static final TextValue ROUTE_NAME = utf8Value( ROUTE.name() );\n+    private static final TextValue READ_NAME = utf8Value(READ.name());\n+    private static final TextValue WRTE_NAME = utf8Value(WRITE.name());\n+    private static final TextValue ROUTE_NAME = utf8Value(ROUTE.name());\n \n     private RoutingResultFormat()\n     {\n     }\n \n-    public static AnyValue[] build( RoutingResult result )\n+    public static AnyValue[] build(RoutingResult result)\n     {\n-        ListValue routers = asValues( result.routeEndpoints() );\n-        ListValue readers = asValues( result.readEndpoints() );\n-        ListValue writers = asValues( result.writeEndpoints() );\n+        ListValue routers = asValues(result.routeEndpoints());\n+        ListValue readers = asValues(result.readEndpoints());\n+        ListValue writers = asValues(result.writeEndpoints());\n \n         ListValueBuilder servers = ListValueBuilder.newListBuilder();\n \n-        if ( writers.size() > 0 )\n+        if (writers.size() > 0)\n         {\n             MapValueBuilder builder = new MapValueBuilder();\n \n-            builder.add( ROLE_KEY, WRTE_NAME );\n-            builder.add( ADDRESSES_KEY, writers );\n+            builder.add(ROLE_KEY, WRTE_NAME);\n+            builder.add(ADDRESSES_KEY, writers);\n \n-            servers.add( builder.build() );\n+            servers.add(builder.build());\n         }\n \n-        if ( readers.size() > 0 )\n+        if (readers.size() > 0)\n         {\n             MapValueBuilder builder = new MapValueBuilder();\n \n-            builder.add( ROLE_KEY, READ_NAME );\n-            builder.add( ADDRESSES_KEY, readers );\n+            builder.add(ROLE_KEY, READ_NAME);\n+            builder.add(ADDRESSES_KEY, readers);\n \n-            servers.add( builder.build() );\n+            servers.add(builder.build());\n         }\n \n-        if ( routers.size() > 0 )\n+        if (routers.size() > 0)\n         {\n             MapValueBuilder builder = new MapValueBuilder();\n \n-            builder.add( ROLE_KEY, ROUTE_NAME );\n-            builder.add( ADDRESSES_KEY, routers );\n+            builder.add(ROLE_KEY, ROUTE_NAME);\n+            builder.add(ADDRESSES_KEY, routers);\n \n-            servers.add( builder.build() );\n+            servers.add(builder.build());\n         }\n \n-        LongValue timeToLiveSeconds = longValue( MILLISECONDS.toSeconds( result.ttlMillis() ) );\n-        return new AnyValue[]{timeToLiveSeconds, servers.build()};\n+        LongValue timeToLiveSeconds = longValue(MILLISECONDS.toSeconds(result.ttlMillis()));\n+        return new AnyValue[] {timeToLiveSeconds, servers.build()};\n     }\n \n-    public static RoutingResult parse( AnyValue[] record )\n+    public static RoutingResult parse(AnyValue[] record)\n     {\n         LongValue timeToLiveSeconds = (LongValue) record[0];\n         ListValue endpointData = (ListValue) record[1];\n \n-        Map<Role,List<SocketAddress>> endpoints = parseRows( endpointData );\n+        Map<Role, List<SocketAddress>> endpoints = parseRows(endpointData);\n \n         return new RoutingResult(\n-                endpoints.get( ROUTE ),\n-                endpoints.get( WRITE ),\n-                endpoints.get( READ ),\n-                timeToLiveSeconds.longValue() * 1000 );\n+          endpoints.get(ROUTE),\n+          endpoints.get(WRITE),\n+          endpoints.get(READ),\n+          timeToLiveSeconds.longValue() * 1000);\n     }\n \n-    public static RoutingResult parse( MapValue record )\n+    public static RoutingResult parse(MapValue record)\n     {\n-        return parse( new AnyValue[]{\n-                record.get( ParameterNames.TTL.parameterName() ),\n-                record.get( ParameterNames.SERVERS.parameterName() )\n-        } );\n+        return parse(new AnyValue[] {\n+          record.get(ParameterNames.TTL.parameterName()),\n+          record.get(ParameterNames.SERVERS.parameterName())\n+        });\n     }\n \n-    public static List<SocketAddress> parseEndpoints( ListValue addresses )\n+    public static List<SocketAddress> parseEndpoints(ListValue addresses)\n     {\n-        List<SocketAddress> result = new ArrayList<>( addresses.size() );\n-        for ( AnyValue address : addresses )\n+        List<SocketAddress> result = new ArrayList<>(addresses.size());\n+        for (AnyValue address : addresses)\n         {\n-            result.add( parseAddress( ((TextValue) address).stringValue() ) );\n+            result.add(parseAddress(((TextValue) address).stringValue()));\n         }\n         return result;\n     }\n \n-    private static Map<Role,List<SocketAddress>> parseRows( ListValue rows )\n+    private static Map<Role, List<SocketAddress>> parseRows(ListValue rows)\n     {\n-        Map<Role,List<SocketAddress>> endpoints = new HashMap<>();\n-        for ( AnyValue single : rows )\n+        Map<Role, List<SocketAddress>> endpoints = new HashMap<>();\n+        for (AnyValue single : rows)\n         {\n             MapValue row = (MapValue) single;\n-            Role role = Role.valueOf( ((TextValue) row.get( \"role\" )).stringValue() );\n-            List<SocketAddress> addresses = parseEndpoints( (ListValue) row.get( \"addresses\" ) );\n-            endpoints.put( role, addresses );\n+            Role role = Role.valueOf(((TextValue) row.get(\"role\")).stringValue());\n+            List<SocketAddress> addresses = parseEndpoints((ListValue) row.get(\"addresses\"));\n+            endpoints.put(role, addresses);\n         }\n \n-        Arrays.stream( Role.values() ).forEach( r -> endpoints.putIfAbsent( r, Collections.emptyList() ) );\n+        Arrays.stream(Role.values()).forEach(r -> endpoints.putIfAbsent(r, Collections.emptyList()));\n \n         return endpoints;\n     }\n \n-    private static SocketAddress parseAddress( String address )\n+    private static SocketAddress parseAddress(String address)\n     {\n-        String[] split = address.split( \":\" );\n-        return new SocketAddress( split[0], Integer.parseInt( split[1] ) );\n+        String[] split = address.split(\":\");\n+        return new SocketAddress(split[0], Integer.parseInt(split[1]));\n     }\n \n-    private static ListValue asValues( List<SocketAddress> addresses )\n+    private static ListValue asValues(List<SocketAddress> addresses)\n     {\n         return addresses.stream()\n-                .map( SocketAddress::toString )\n-                .map( Values::utf8Value )\n-                .collect( ListValueBuilder.collector() );\n+          .map(SocketAddress::toString)\n+          .map(Values::utf8Value)\n+          .collect(ListValueBuilder.collector());\n     }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}