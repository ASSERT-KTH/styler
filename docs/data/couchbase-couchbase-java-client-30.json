{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "47",
                "column": "112",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        ResponseStatus status) throws Exception {\n        if (!TranscoderUtils.hasBinaryFlags(flags)) {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" +\n                \"document for id \" + id + \", could not decode.\");\n        }\n        byte[] data = new byte[content.readableBytes()];",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/30/ByteArrayTranscoder.java\nindex 68bcf2758ff..80d0374aff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/30/ByteArrayTranscoder.java\n@@ -44,8 +44,9 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n     protected ByteArrayDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasBinaryFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \"\n+\n+                + \"document for id \" + id + \", could not decode.\");\n         }\n         byte[] data = new byte[content.readableBytes()];\n         content.readBytes(data);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "48",
                    "column": "112",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/30/ByteArrayTranscoder.java\nindex 68bcf2758ff..a61b039c834 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/30/ByteArrayTranscoder.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.annotations.InterfaceAudience;\n@@ -28,7 +29,7 @@ import com.couchbase.client.java.error.TranscodingException;\n \n /**\n  * A transcoder to encode and decode {@link ByteArrayDocument}s.\n- *\n+ * <p>\n  * This transcoder makes it much easier to work with raw binary data than {@link BinaryTranscoder} since\n  * on retry and unsubscribe, buffers don't need to be freed and managed seperately. As a result, for all\n  * but special purpose cases it should be preferred over {@link BinaryTranscoder}.\n@@ -42,7 +43,7 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n \n     @Override\n     protected ByteArrayDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasBinaryFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" +\n                 \"document for id \" + id + \", could not decode.\");\n@@ -67,7 +68,7 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n \n     @Override\n     public ByteArrayDocument newDocument(String id, int expiry, byte[] content, long cas,\n-        MutationToken mutationToken) {\n+                                         MutationToken mutationToken) {\n         return ByteArrayDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/30/ByteArrayTranscoder.java\nindex 68bcf2758ff..9dd613ce3b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/30/ByteArrayTranscoder.java\n@@ -41,13 +41,12 @@ import com.couchbase.client.java.error.TranscodingException;\n public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, byte[]> {\n \n     @Override\n-    protected ByteArrayDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected ByteArrayDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasBinaryFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" + \"document for id \" + id + \", could not decode.\");\n         }\n-        byte[] data = new byte[content.readableBytes()];\n+\n+byte[] data = new byte[content.readableBytes()];\n         content.readBytes(data);\n         return newDocument(id, expiry, data, cas);\n     }\n@@ -56,8 +55,7 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n     protected Tuple2<ByteBuf, Integer> doEncode(ByteArrayDocument document) throws Exception {\n         return Tuple.create(\n             Unpooled.wrappedBuffer(document.content()),\n-            TranscoderUtils.BINARY_COMPAT_FLAGS\n-        );\n+            TranscoderUtils.BINARY_COMPAT_FLAGS);\n     }\n \n     @Override\n@@ -66,8 +64,7 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n     }\n \n     @Override\n-    public ByteArrayDocument newDocument(String id, int expiry, byte[] content, long cas,\n-        MutationToken mutationToken) {\n+    public ByteArrayDocument newDocument(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n         return ByteArrayDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -75,4 +72,4 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n     public Class<ByteArrayDocument> documentType() {\n         return ByteArrayDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/30/ByteArrayTranscoder.java\nindex 68bcf2758ff..7a51f76fd28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/30/ByteArrayTranscoder.java\n@@ -36,17 +36,17 @@ import com.couchbase.client.java.error.TranscodingException;\n  * @author Michael Nitschinger\n  * @since 2.5.2\n  */\n+\n+\n @InterfaceStability.Uncommitted\n @InterfaceAudience.Public\n public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, byte[]> {\n-\n     @Override\n-    protected ByteArrayDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected ByteArrayDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasBinaryFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" + \"document for id \" + id + \", could not decode.\");\n         }\n+\n         byte[] data = new byte[content.readableBytes()];\n         content.readBytes(data);\n         return newDocument(id, expiry, data, cas);\n@@ -54,10 +54,7 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n \n     @Override\n     protected Tuple2<ByteBuf, Integer> doEncode(ByteArrayDocument document) throws Exception {\n-        return Tuple.create(\n-            Unpooled.wrappedBuffer(document.content()),\n-            TranscoderUtils.BINARY_COMPAT_FLAGS\n-        );\n+        return Tuple.create(Unpooled.wrappedBuffer(document.content()), TranscoderUtils.BINARY_COMPAT_FLAGS);\n     }\n \n     @Override\n@@ -66,8 +63,7 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n     }\n \n     @Override\n-    public ByteArrayDocument newDocument(String id, int expiry, byte[] content, long cas,\n-        MutationToken mutationToken) {\n+    public ByteArrayDocument newDocument(String id, int expiry, byte[] content, long cas, MutationToken mutationToken) {\n         return ByteArrayDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -75,4 +71,4 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n     public Class<ByteArrayDocument> documentType() {\n         return ByteArrayDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "47",
                    "column": "112",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/30/ByteArrayTranscoder.java\nindex 68bcf2758ff..80d0374aff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/30/ByteArrayTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/30/ByteArrayTranscoder.java\n@@ -44,8 +44,9 @@ public class ByteArrayTranscoder extends AbstractTranscoder<ByteArrayDocument, b\n     protected ByteArrayDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasBinaryFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-binary \"\n+\n+                + \"document for id \" + id + \", could not decode.\");\n         }\n         byte[] data = new byte[content.readableBytes()];\n         content.readBytes(data);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}