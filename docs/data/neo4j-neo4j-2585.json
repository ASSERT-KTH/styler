{
    "project_name": "neo4j-neo4j",
    "error_id": "2585",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2585/GroupSetting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2585/GroupSetting.java\nindex 1486fbd46ab..42ac46b79c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2585/GroupSetting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2585/GroupSetting.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration;\n \n import org.neo4j.annotations.api.PublicApi;\n@@ -32,7 +33,7 @@ public abstract class GroupSetting\n {\n     private final String name;\n \n-    protected GroupSetting( String name )\n+    protected GroupSetting(String name)\n     {\n         this.name = name;\n     }\n@@ -58,28 +59,28 @@ public abstract class GroupSetting\n      * Helper method when creating settings for this group.\n      * This is the preferred method if the group contains multiple settings.\n      *\n-     * @param suffix The unique name of the setting to be created\n-     * @param parser The parser to be used in the setting\n+     * @param suffix       The unique name of the setting to be created\n+     * @param parser       The parser to be used in the setting\n      * @param defaultValue The default value to be associated with the setting\n-     * @param <T> the type of the objects represented by the setting\n+     * @param <T>          the type of the objects represented by the setting\n      * @return the builder of the setting\n      */\n-    protected <T> SettingImpl.Builder<T> getBuilder( String suffix, SettingValueParser<T> parser, T defaultValue )\n+    protected <T> SettingImpl.Builder<T> getBuilder(String suffix, SettingValueParser<T> parser, T defaultValue)\n     {\n-        return SettingImpl.newBuilder( String.format( \"%s.%s.%s\", getPrefix(), name, suffix ), parser, defaultValue );\n+        return SettingImpl.newBuilder(String.format(\"%s.%s.%s\", getPrefix(), name, suffix), parser, defaultValue);\n     }\n \n     /**\n      * Helper method when creating settings for this group.\n      * This is the preferred method if the group contains only a single setting.\n      *\n-     * @param parser The parser to be used in the setting\n+     * @param parser       The parser to be used in the setting\n      * @param defaultValue The default value to be associated with the setting\n-     * @param <T> the type of the objects represented by the setting\n+     * @param <T>          the type of the objects represented by the setting\n      * @return the builder of the setting\n      */\n-    protected <T> SettingImpl.Builder<T> getBuilder( SettingValueParser<T> parser, T defaultValue )\n+    protected <T> SettingImpl.Builder<T> getBuilder(SettingValueParser<T> parser, T defaultValue)\n     {\n-        return SettingImpl.newBuilder( String.format( \"%s.%s\", getPrefix(), name ), parser, defaultValue );\n+        return SettingImpl.newBuilder(String.format(\"%s.%s\", getPrefix(), name), parser, defaultValue);\n     }\n }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}