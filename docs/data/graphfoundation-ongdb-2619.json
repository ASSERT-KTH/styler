{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2619",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "178",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "180",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2619/InvocationTracer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2619/InvocationTracer.java\nindex 8242bae0e64..feb601e6936 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2619/InvocationTracer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2619/InvocationTracer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.dbstructure;\n \n import java.io.IOException;\n@@ -28,189 +29,183 @@ import org.neo4j.helpers.collection.Visitable;\n \n public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n {\n-    private final String generatorInfo;\n-\n-    private final String generatedClassPackage;\n-    private final String generatedClassName;\n-\n-    private final Class<C> interfaceClass;\n-    private final ArgumentFormatter argumentFormatter;\n-    private final Appendable output;\n+  private final String generatorInfo;\n \n-    private boolean open = true;\n+  private final String generatedClassPackage;\n+  private final String generatedClassName;\n \n-    public InvocationTracer( String generatorInfo,\n-                             String generatedClassPackage,\n-                             String generatedClassName,\n-                             Class<C> interfaceClass,\n-                             ArgumentFormatter argumentFormatter,\n-                             Appendable output )\n-            throws IOException\n-    {\n-        this.generatorInfo = generatorInfo;\n+  private final Class<C> interfaceClass;\n+  private final ArgumentFormatter argumentFormatter;\n+  private final Appendable output;\n \n-        if ( generatedClassName.contains( \".\" ) || generatedClassName.contains( \"%\" ) )\n-        {\n-            throw new IllegalArgumentException( \"Invalid class name: \" + generatedClassName );\n-        }\n+  private boolean open = true;\n \n-        if ( generatedClassPackage.contains( \"%\" ) )\n-        {\n-            throw new IllegalArgumentException( \"Invalid class package: \" + generatedClassPackage );\n-        }\n-\n-        this.generatedClassPackage = generatedClassPackage;\n-        this.generatedClassName = generatedClassName;\n-        this.interfaceClass = interfaceClass;\n-        this.argumentFormatter = argumentFormatter;\n-        this.output = output;\n-\n-        formatPreamble( output );\n-    }\n+  public InvocationTracer(String generatorInfo,\n+                          String generatedClassPackage,\n+                          String generatedClassName,\n+                          Class<C> interfaceClass,\n+                          ArgumentFormatter argumentFormatter,\n+                          Appendable output)\n+      throws IOException\n+  {\n+    this.generatorInfo = generatorInfo;\n \n-    public C newProxy()\n+    if (generatedClassName.contains(\".\") || generatedClassName.contains(\"%\"))\n     {\n-        return newProxy( interfaceClass );\n+      throw new IllegalArgumentException(\"Invalid class name: \" + generatedClassName);\n     }\n \n-    public <P extends C> P newProxy( Class<P> proxyClass )\n+    if (generatedClassPackage.contains(\"%\"))\n     {\n-        ClassLoader classLoader = proxyClass.getClassLoader();\n-        return proxyClass.cast(\n-            Proxy.newProxyInstance( classLoader, new Class[]{proxyClass}, this )\n-        );\n+      throw new IllegalArgumentException(\"Invalid class package: \" + generatedClassPackage);\n     }\n \n-    @Override\n-    public void close() throws IOException\n+    this.generatedClassPackage = generatedClassPackage;\n+    this.generatedClassName = generatedClassName;\n+    this.interfaceClass = interfaceClass;\n+    this.argumentFormatter = argumentFormatter;\n+    this.output = output;\n+\n+    formatPreamble(output);\n+  }\n+\n+  public C newProxy()\n+  {\n+    return newProxy(interfaceClass);\n+  }\n+\n+  public <P extends C> P newProxy(Class<P> proxyClass)\n+  {\n+    ClassLoader classLoader = proxyClass.getClassLoader();\n+    return proxyClass.cast(\n+        Proxy.newProxyInstance(classLoader, new Class[] {proxyClass}, this)\n+    );\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    if (open)\n     {\n-        if ( open )\n-        {\n-            formatAppendix( output );\n-            open = false;\n-        }\n-        else\n-        {\n-            throw new IllegalStateException( \"Already closed\" );\n-        }\n-    }\n-\n-    private void formatPreamble( Appendable builder ) throws IOException\n+      formatAppendix(output);\n+      open = false;\n+    } else\n     {\n-        String interfaceSimpleName = interfaceClass.getSimpleName();\n-        String interfaceClassName =\n-            interfaceSimpleName.length() == 0 ? interfaceClass.getCanonicalName() : interfaceSimpleName;\n-        if ( generatedClassPackage.length() > 0 )\n-        {\n-            formatln( builder, \"package %s;\", generatedClassPackage );\n-            formatln( builder );\n-        }\n-        formatln( builder, \"import %s;\", Visitable.class.getCanonicalName() );\n-        formatln( builder, \"import %s;\", interfaceClass.getCanonicalName() );\n-        formatln( builder );\n-        for ( String importExpr : argumentFormatter.imports() )\n-        {\n-            formatln( builder, \"import %s;\", importExpr );\n-        }\n-        formatln( builder );\n-        formatln( builder, \"//\" );\n-        formatln( builder, \"// GENERATED FILE. DO NOT EDIT.\" );\n-        formatln( builder, \"//\" );\n-        formatln( builder, \"// This has been generated by:\" );\n-        formatln( builder, \"//\" );\n-        if ( generatorInfo.length() > 0 )\n-        {\n-            formatln( builder, \"//   %s\", generatorInfo );\n-            formatln( builder, \"//\" );\n-            formatln( builder, \"// (using %s)\", getClass().getCanonicalName() );\n-            formatln( builder, \"//\" );\n-        }\n-        else\n-        {\n-            formatln( builder, \"//   %s\", getClass().getCanonicalName() );\n-            formatln( builder, \"//\" );\n-        }\n-        formatln( builder );\n-        formatln( builder, \"public enum %s\", generatedClassName );\n-        formatln( builder, \"implements %s<%s>\", Visitable.class.getSimpleName(), interfaceClassName );\n-        formatln( builder, \"{\" );\n-        formatln( builder, \"    INSTANCE;\" );\n-        formatln( builder );\n-        formatln( builder, \"    public void accept( %s visitor )\", interfaceClassName );\n-        formatln( builder, \"    {\" );\n+      throw new IllegalStateException(\"Already closed\");\n     }\n-\n-    @Override\n-    public Object invoke( Object proxy, Method method, Object[] args ) throws Throwable\n+  }\n+\n+  private void formatPreamble(Appendable builder) throws IOException\n+  {\n+    String interfaceSimpleName = interfaceClass.getSimpleName();\n+    String interfaceClassName =\n+        interfaceSimpleName.length() == 0 ? interfaceClass.getCanonicalName() : interfaceSimpleName;\n+    if (generatedClassPackage.length() > 0)\n     {\n-        if ( open )\n-        {\n-            if ( method.getReturnType().equals( Void.TYPE ) )\n-            {\n-                // formatln invocation start\n-                format( output, \"        visitor.%s(\", method.getName() );\n-\n-                // formatln arguments\n-                for ( int i = 0; i < args.length; i++ )\n-                {\n-                    Object arg = args[i];\n-\n-                    if ( i > 0 )\n-                    {\n-                        format( output, \", \" );\n-                    }\n-                    else\n-                    {\n-                        format( output, \" \" );\n-                    }\n-\n-                    argumentFormatter.formatArgument( output, arg );\n-                }\n-\n-                // formatln invocation end\n-                if ( args.length == 0 )\n-                {\n-                    formatln( output, \");\" );\n-                }\n-                else\n-                {\n-                    formatln( output, \" );\" );\n-                }\n-\n-                return null;\n-            }\n-            else\n-            {\n-                throw new IllegalArgumentException( \"InvocationTraceGenerator only works with void methods\" );\n-            }\n-        }\n-        else\n-        {\n-            throw new IllegalStateException( \"Tracer already closed\" );\n-        }\n+      formatln(builder, \"package %s;\", generatedClassPackage);\n+      formatln(builder);\n     }\n-\n-    private static void formatAppendix( Appendable builder ) throws IOException\n+    formatln(builder, \"import %s;\", Visitable.class.getCanonicalName());\n+    formatln(builder, \"import %s;\", interfaceClass.getCanonicalName());\n+    formatln(builder);\n+    for (String importExpr : argumentFormatter.imports())\n     {\n-        formatln( builder, \"   }\" );\n-        formatln( builder, \"}\" );\n-        formatln( builder );\n-        formatln( builder, \"/* END OF GENERATED CONTENT */\" );\n+      formatln(builder, \"import %s;\", importExpr);\n     }\n-\n-    private static void formatln( Appendable output, String format, Object... args ) throws IOException\n+    formatln(builder);\n+    formatln(builder, \"//\");\n+    formatln(builder, \"// GENERATED FILE. DO NOT EDIT.\");\n+    formatln(builder, \"//\");\n+    formatln(builder, \"// This has been generated by:\");\n+    formatln(builder, \"//\");\n+    if (generatorInfo.length() > 0)\n     {\n-        format( output, format, args );\n-        formatln( output );\n-    }\n-\n-    private static void format( Appendable output, String format, Object... args ) throws IOException\n+      formatln(builder, \"//   %s\", generatorInfo);\n+      formatln(builder, \"//\");\n+      formatln(builder, \"// (using %s)\", getClass().getCanonicalName());\n+      formatln(builder, \"//\");\n+    } else\n     {\n-        output.append( String.format( format, args ) );\n+      formatln(builder, \"//   %s\", getClass().getCanonicalName());\n+      formatln(builder, \"//\");\n     }\n+    formatln(builder);\n+    formatln(builder, \"public enum %s\", generatedClassName);\n+    formatln(builder, \"implements %s<%s>\", Visitable.class.getSimpleName(), interfaceClassName);\n+    formatln(builder, \"{\");\n+    formatln(builder, \"    INSTANCE;\");\n+    formatln(builder);\n+    formatln(builder, \"    public void accept( %s visitor )\", interfaceClassName);\n+    formatln(builder, \"    {\");\n+  }\n+\n+  @Override\n+  public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n+  {\n+    if (open)\n+    {\n+      if (method.getReturnType().equals(Void.TYPE))\n+      {\n+        // formatln invocation start\n+        format(output, \"        visitor.%s(\", method.getName());\n+\n+        // formatln arguments\n+        for (int i = 0; i < args.length; i++)\n+        {\n+          Object arg = args[i];\n+\n+          if (i > 0)\n+          {\n+            format(output, \", \");\n+          } else\n+          {\n+            format(output, \" \");\n+          }\n+\n+          argumentFormatter.formatArgument(output, arg);\n+        }\n+\n+        // formatln invocation end\n+        if (args.length == 0)\n+        {\n+          formatln(output, \");\");\n+        } else\n+        {\n+          formatln(output, \" );\");\n+        }\n \n-    private static void formatln( Appendable output ) throws IOException\n+        return null;\n+      } else\n+      {\n+        throw new IllegalArgumentException(\"InvocationTraceGenerator only works with void methods\");\n+      }\n+    } else\n     {\n-        output.append( System.lineSeparator() );\n+      throw new IllegalStateException(\"Tracer already closed\");\n     }\n+  }\n+\n+  private static void formatAppendix(Appendable builder) throws IOException\n+  {\n+    formatln(builder, \"   }\");\n+    formatln(builder, \"}\");\n+    formatln(builder);\n+    formatln(builder, \"/* END OF GENERATED CONTENT */\");\n+  }\n+\n+  private static void formatln(Appendable output, String format, Object... args) throws IOException\n+  {\n+    format(output, format, args);\n+    formatln(output);\n+  }\n+\n+  private static void format(Appendable output, String format, Object... args) throws IOException\n+  {\n+    output.append(String.format(format, args));\n+  }\n+\n+  private static void formatln(Appendable output) throws IOException\n+  {\n+    output.append(System.lineSeparator());\n+  }\n }\n",
            "diff_size": 274
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2619/InvocationTracer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2619/InvocationTracer.java\nindex 8242bae0e64..a07ada9ae18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2619/InvocationTracer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2619/InvocationTracer.java\n@@ -39,14 +39,11 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n \n     private boolean open = true;\n \n-    public InvocationTracer( String generatorInfo,\n-                             String generatedClassPackage,\n-                             String generatedClassName,\n-                             Class<C> interfaceClass,\n+    public InvocationTracer( String generatorInfo, String generatedClassPackage,\n+                             String generatedClassName, Class<C> interfaceClass,\n                              ArgumentFormatter argumentFormatter,\n-                             Appendable output )\n-            throws IOException\n-    {\n+                             Appendable output ) throws IOException\n+{\n         this.generatorInfo = generatorInfo;\n \n         if ( generatedClassName.contains( \".\" ) || generatedClassName.contains( \"%\" ) )\n@@ -76,9 +73,7 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n     public <P extends C> P newProxy( Class<P> proxyClass )\n     {\n         ClassLoader classLoader = proxyClass.getClassLoader();\n-        return proxyClass.cast(\n-            Proxy.newProxyInstance( classLoader, new Class[]{proxyClass}, this )\n-        );\n+        return proxyClass.cast( Proxy.newProxyInstance( classLoader, new Class[]{proxyClass}, this ) );\n     }\n \n     @Override\n@@ -98,21 +93,22 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n     private void formatPreamble( Appendable builder ) throws IOException\n     {\n         String interfaceSimpleName = interfaceClass.getSimpleName();\n-        String interfaceClassName =\n-            interfaceSimpleName.length() == 0 ? interfaceClass.getCanonicalName() : interfaceSimpleName;\n-        if ( generatedClassPackage.length() > 0 )\n+        String interfaceClassName = interfaceSimpleName.length() == 0 ? interfaceClass.getCanonicalName() : interfaceSimpleName;\n+if ( generatedClassPackage.length() > 0 )\n         {\n             formatln( builder, \"package %s;\", generatedClassPackage );\n             formatln( builder );\n         }\n-        formatln( builder, \"import %s;\", Visitable.class.getCanonicalName() );\n+\n+formatln( builder, \"import %s;\", Visitable.class.getCanonicalName() );\n         formatln( builder, \"import %s;\", interfaceClass.getCanonicalName() );\n         formatln( builder );\n         for ( String importExpr : argumentFormatter.imports() )\n         {\n             formatln( builder, \"import %s;\", importExpr );\n         }\n-        formatln( builder );\n+\n+formatln( builder );\n         formatln( builder, \"//\" );\n         formatln( builder, \"// GENERATED FILE. DO NOT EDIT.\" );\n         formatln( builder, \"//\" );\n@@ -130,7 +126,8 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n             formatln( builder, \"//   %s\", getClass().getCanonicalName() );\n             formatln( builder, \"//\" );\n         }\n-        formatln( builder );\n+\n+formatln( builder );\n         formatln( builder, \"public enum %s\", generatedClassName );\n         formatln( builder, \"implements %s<%s>\", Visitable.class.getSimpleName(), interfaceClassName );\n         formatln( builder, \"{\" );\n@@ -154,8 +151,7 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n                 for ( int i = 0; i < args.length; i++ )\n                 {\n                     Object arg = args[i];\n-\n-                    if ( i > 0 )\n+if ( i > 0 )\n                     {\n                         format( output, \", \" );\n                     }\n@@ -213,4 +209,4 @@ public class InvocationTracer<C> implements InvocationHandler, AutoCloseable\n     {\n         output.append( System.lineSeparator() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}