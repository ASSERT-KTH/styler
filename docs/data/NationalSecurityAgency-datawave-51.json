{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "12",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.client.admin.TableOperations;\nimport org.apache.accumulo.core.client.security.tokens.PasswordToken;\nimport org.apache.accumulo.core.conf.Property;\nimport org.apache.accumulo.core.iterators.IteratorUtil;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.log4j.Logger;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/51/Connections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/51/Connections.java\nindex 09184c388e3..b1b3d6b378d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/51/Connections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/51/Connections.java\n@@ -17,89 +17,93 @@ import org.apache.log4j.Logger;\n import java.util.LinkedList;\n \n public class Connections {\n-    private static final Logger log = Logger.getLogger(Connections.class);\n-    private static final String AGE_OFF = \"ageoff\";\n-    \n-    /**\n-     * Utility method that will initialize all tables if they are not currently present.\n-     * \n-     * @throws AccumuloSecurityException\n-     * @throws AccumuloException\n-     * \n-     */\n-    public static void initTables(Configuration conf) throws AccumuloException, AccumuloSecurityException {\n-        LinkedList<String> tables = new LinkedList<>();\n-        tables.add(conf.get(MetricsConfig.METRICS_TABLE, MetricsConfig.DEFAULT_METRICS_TABLE));\n-        tables.add(conf.get(MetricsConfig.INGEST_TABLE, MetricsConfig.DEFAULT_INGEST_TABLE));\n-        tables.add(conf.get(MetricsConfig.LOADER_TABLE, MetricsConfig.DEFAULT_LOADER_TABLE));\n-        tables.add(conf.get(MetricsConfig.FILE_GRAPH_TABLE, MetricsConfig.DEFAULT_FILE_GRAPH_TABLE));\n-        tables.add(conf.get(MetricsConfig.METRICS_SUMMARY_TABLE, MetricsConfig.DEFAULT_METRICS_SUMMARY_TABLE));\n-        tables.add(conf.get(MetricsConfig.BAD_SELECTOR_TABLE, MetricsConfig.DEFAULT_BAD_SELECTOR_TABLE));\n-        String hourlyTableName = conf.get(MetricsConfig.METRICS_HOURLY_SUMMARY_TABLE, MetricsConfig.DEFAULT_HOURLY_METRICS_SUMMARY_TABLE);\n-        \n-        TableOperations tops = metricsConnection(conf).tableOperations();\n-        for (String table : tables) {\n-            if (!tops.exists(table)) {\n-                createTable(tops, table);\n-            }\n-        }\n-        \n-        if (!tops.exists(hourlyTableName)) {\n-            createTable(tops, hourlyTableName);\n-            configureClasspathContext(tops, hourlyTableName);\n-            configureAgeOff(tops, hourlyTableName, 30);\n-        }\n-        \n-        tops = warehouseConnection(conf).tableOperations();\n-        \n-        tables = new LinkedList<>();\n-        tables.add(conf.get(MetricsConfig.ERRORS_TABLE, MetricsConfig.DEFAULT_ERRORS_TABLE));\n-        \n-        for (String table : tables) {\n-            if (!tops.exists(table)) {\n-                createTable(tops, table);\n-            }\n-        }\n+  private static final Logger log = Logger.getLogger(Connections.class);\n+  private static final String AGE_OFF = \"ageoff\";\n+\n+  /**\n+   * Utility method that will initialize all tables if they are not currently present.\n+   *\n+   * @throws AccumuloSecurityException\n+   * @throws AccumuloException\n+   */\n+  public static void initTables(Configuration conf) throws AccumuloException, AccumuloSecurityException {\n+    LinkedList<String> tables = new LinkedList<>();\n+    tables.add(conf.get(MetricsConfig.METRICS_TABLE, MetricsConfig.DEFAULT_METRICS_TABLE));\n+    tables.add(conf.get(MetricsConfig.INGEST_TABLE, MetricsConfig.DEFAULT_INGEST_TABLE));\n+    tables.add(conf.get(MetricsConfig.LOADER_TABLE, MetricsConfig.DEFAULT_LOADER_TABLE));\n+    tables.add(conf.get(MetricsConfig.FILE_GRAPH_TABLE, MetricsConfig.DEFAULT_FILE_GRAPH_TABLE));\n+    tables.add(conf.get(MetricsConfig.METRICS_SUMMARY_TABLE, MetricsConfig.DEFAULT_METRICS_SUMMARY_TABLE));\n+    tables.add(conf.get(MetricsConfig.BAD_SELECTOR_TABLE, MetricsConfig.DEFAULT_BAD_SELECTOR_TABLE));\n+    String hourlyTableName =\n+        conf.get(MetricsConfig.METRICS_HOURLY_SUMMARY_TABLE, MetricsConfig.DEFAULT_HOURLY_METRICS_SUMMARY_TABLE);\n+\n+    TableOperations tops = metricsConnection(conf).tableOperations();\n+    for (String table : tables) {\n+      if (!tops.exists(table)) {\n+        createTable(tops, table);\n+      }\n     }\n-    \n-    private static void configureClasspathContext(TableOperations tops, String tableName) {\n-        try {\n-            AbstractTableConfigHelper.setPropertyIfNecessary(tableName, \"table.classpath.context\", \"datawave\", tops, log);\n-        } catch (Exception e) {\n-            log.error(\"Exception occurred when attempting to set the table classpath context\", e);\n-        }\n+\n+    if (!tops.exists(hourlyTableName)) {\n+      createTable(tops, hourlyTableName);\n+      configureClasspathContext(tops, hourlyTableName);\n+      configureAgeOff(tops, hourlyTableName, 30);\n     }\n-    \n-    private static void configureAgeOff(TableOperations tops, String tableName, int numDays) {\n-        for (IteratorUtil.IteratorScope scope : IteratorUtil.IteratorScope.values()) {\n-            String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope, AGE_OFF);\n-            try {\n-                tops.setProperty(tableName, stem + \".opt.ttl\", \"45\");\n-                tops.setProperty(tableName, stem, \"18,datawave.iterators.filter.DateInRowAgeOffFilter\");\n-            } catch (AccumuloException | AccumuloSecurityException e) {\n-                log.error(\"Could not create age off configuration for \" + stem, e);\n-            }\n-        }\n+\n+    tops = warehouseConnection(conf).tableOperations();\n+\n+    tables = new LinkedList<>();\n+    tables.add(conf.get(MetricsConfig.ERRORS_TABLE, MetricsConfig.DEFAULT_ERRORS_TABLE));\n+\n+    for (String table : tables) {\n+      if (!tops.exists(table)) {\n+        createTable(tops, table);\n+      }\n     }\n-    \n-    private static void createTable(TableOperations tops, String table) {\n-        try {\n-            tops.create(table);\n-        } catch (Exception e) {\n-            log.error(\"Could not create table \" + table, e);\n-        }\n+  }\n+\n+  private static void configureClasspathContext(TableOperations tops, String tableName) {\n+    try {\n+      AbstractTableConfigHelper.setPropertyIfNecessary(tableName, \"table.classpath.context\", \"datawave\", tops, log);\n+    } catch (Exception e) {\n+      log.error(\"Exception occurred when attempting to set the table classpath context\", e);\n     }\n-    \n-    public static Connector metricsConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n-        final String mtxZk = c.get(MetricsConfig.ZOOKEEPERS), mtxInst = c.get(MetricsConfig.INSTANCE), mtxUser = c.get(MetricsConfig.USER), mtxPass = c\n-                        .get(MetricsConfig.PASS);\n-        return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(mtxInst).withZkHosts(mtxZk)).getConnector(mtxUser, new PasswordToken(\n-                        mtxPass));\n+  }\n+\n+  private static void configureAgeOff(TableOperations tops, String tableName, int numDays) {\n+    for (IteratorUtil.IteratorScope scope : IteratorUtil.IteratorScope.values()) {\n+      String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope, AGE_OFF);\n+      try {\n+        tops.setProperty(tableName, stem + \".opt.ttl\", \"45\");\n+        tops.setProperty(tableName, stem, \"18,datawave.iterators.filter.DateInRowAgeOffFilter\");\n+      } catch (AccumuloException | AccumuloSecurityException e) {\n+        log.error(\"Could not create age off configuration for \" + stem, e);\n+      }\n     }\n-    \n-    public static Connector warehouseConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n-        final String whZk = c.get(MetricsConfig.WAREHOUSE_ZOOKEEPERS), whInst = c.get(MetricsConfig.WAREHOUSE_INSTANCE), whUser = c\n-                        .get(MetricsConfig.WAREHOUSE_USERNAME), whPass = c.get(MetricsConfig.WAREHOUSE_PASSWORD);\n-        return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(whInst).withZkHosts(whZk)).getConnector(whUser, new PasswordToken(whPass));\n+  }\n+\n+  private static void createTable(TableOperations tops, String table) {\n+    try {\n+      tops.create(table);\n+    } catch (Exception e) {\n+      log.error(\"Could not create table \" + table, e);\n     }\n+  }\n+\n+  public static Connector metricsConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n+    final String mtxZk = c.get(MetricsConfig.ZOOKEEPERS), mtxInst = c.get(MetricsConfig.INSTANCE), mtxUser =\n+        c.get(MetricsConfig.USER), mtxPass = c\n+        .get(MetricsConfig.PASS);\n+    return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(mtxInst).withZkHosts(mtxZk))\n+        .getConnector(mtxUser, new PasswordToken(\n+            mtxPass));\n+  }\n+\n+  public static Connector warehouseConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n+    final String whZk = c.get(MetricsConfig.WAREHOUSE_ZOOKEEPERS), whInst = c.get(MetricsConfig.WAREHOUSE_INSTANCE),\n+        whUser = c\n+            .get(MetricsConfig.WAREHOUSE_USERNAME), whPass = c.get(MetricsConfig.WAREHOUSE_PASSWORD);\n+    return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(whInst).withZkHosts(whZk))\n+        .getConnector(whUser, new PasswordToken(whPass));\n+  }\n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/51/Connections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/51/Connections.java\nindex 09184c388e3..b9c6c69dc5c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/51/Connections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/51/Connections.java\n@@ -91,15 +91,12 @@ public class Connections {\n     }\n     \n     public static Connector metricsConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n-        final String mtxZk = c.get(MetricsConfig.ZOOKEEPERS), mtxInst = c.get(MetricsConfig.INSTANCE), mtxUser = c.get(MetricsConfig.USER), mtxPass = c\n-                        .get(MetricsConfig.PASS);\n-        return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(mtxInst).withZkHosts(mtxZk)).getConnector(mtxUser, new PasswordToken(\n-                        mtxPass));\n+        final String mtxZk = c.get(MetricsConfig.ZOOKEEPERS), mtxInst = c.get(MetricsConfig.INSTANCE), mtxUser = c.get(MetricsConfig.USER), mtxPass = c.get(MetricsConfig.PASS);\n+        return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(mtxInst).withZkHosts(mtxZk)).getConnector(mtxUser, new PasswordToken(mtxPass));\n     }\n     \n     public static Connector warehouseConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n-        final String whZk = c.get(MetricsConfig.WAREHOUSE_ZOOKEEPERS), whInst = c.get(MetricsConfig.WAREHOUSE_INSTANCE), whUser = c\n-                        .get(MetricsConfig.WAREHOUSE_USERNAME), whPass = c.get(MetricsConfig.WAREHOUSE_PASSWORD);\n+        final String whZk = c.get(MetricsConfig.WAREHOUSE_ZOOKEEPERS), whInst = c.get(MetricsConfig.WAREHOUSE_INSTANCE), whUser = c.get(MetricsConfig.WAREHOUSE_USERNAME), whPass = c.get(MetricsConfig.WAREHOUSE_PASSWORD);\n         return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(whInst).withZkHosts(whZk)).getConnector(whUser, new PasswordToken(whPass));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/51/Connections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/51/Connections.java\nindex 09184c388e3..8d9e2fe2631 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/51/Connections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/51/Connections.java\n@@ -13,9 +13,9 @@ import org.apache.accumulo.core.conf.Property;\n import org.apache.accumulo.core.iterators.IteratorUtil;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.log4j.Logger;\n-\n import java.util.LinkedList;\n \n+\n public class Connections {\n     private static final Logger log = Logger.getLogger(Connections.class);\n     private static final String AGE_OFF = \"ageoff\";\n@@ -27,7 +27,9 @@ public class Connections {\n      * @throws AccumuloException\n      * \n      */\n-    public static void initTables(Configuration conf) throws AccumuloException, AccumuloSecurityException {\n+\n+    public static void initTables(Configuration conf) throws AccumuloException,\n+        AccumuloSecurityException {\n         LinkedList<String> tables = new LinkedList<>();\n         tables.add(conf.get(MetricsConfig.METRICS_TABLE, MetricsConfig.DEFAULT_METRICS_TABLE));\n         tables.add(conf.get(MetricsConfig.INGEST_TABLE, MetricsConfig.DEFAULT_INGEST_TABLE));\n@@ -35,33 +37,32 @@ public class Connections {\n         tables.add(conf.get(MetricsConfig.FILE_GRAPH_TABLE, MetricsConfig.DEFAULT_FILE_GRAPH_TABLE));\n         tables.add(conf.get(MetricsConfig.METRICS_SUMMARY_TABLE, MetricsConfig.DEFAULT_METRICS_SUMMARY_TABLE));\n         tables.add(conf.get(MetricsConfig.BAD_SELECTOR_TABLE, MetricsConfig.DEFAULT_BAD_SELECTOR_TABLE));\n+\n         String hourlyTableName = conf.get(MetricsConfig.METRICS_HOURLY_SUMMARY_TABLE, MetricsConfig.DEFAULT_HOURLY_METRICS_SUMMARY_TABLE);\n-        \n         TableOperations tops = metricsConnection(conf).tableOperations();\n         for (String table : tables) {\n             if (!tops.exists(table)) {\n                 createTable(tops, table);\n             }\n         }\n-        \n+\n+\n         if (!tops.exists(hourlyTableName)) {\n             createTable(tops, hourlyTableName);\n             configureClasspathContext(tops, hourlyTableName);\n             configureAgeOff(tops, hourlyTableName, 30);\n         }\n-        \n         tops = warehouseConnection(conf).tableOperations();\n-        \n         tables = new LinkedList<>();\n         tables.add(conf.get(MetricsConfig.ERRORS_TABLE, MetricsConfig.DEFAULT_ERRORS_TABLE));\n-        \n+\n         for (String table : tables) {\n             if (!tops.exists(table)) {\n                 createTable(tops, table);\n             }\n         }\n     }\n-    \n+\n     private static void configureClasspathContext(TableOperations tops, String tableName) {\n         try {\n             AbstractTableConfigHelper.setPropertyIfNecessary(tableName, \"table.classpath.context\", \"datawave\", tops, log);\n@@ -69,7 +70,7 @@ public class Connections {\n             log.error(\"Exception occurred when attempting to set the table classpath context\", e);\n         }\n     }\n-    \n+\n     private static void configureAgeOff(TableOperations tops, String tableName, int numDays) {\n         for (IteratorUtil.IteratorScope scope : IteratorUtil.IteratorScope.values()) {\n             String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope, AGE_OFF);\n@@ -81,7 +82,7 @@ public class Connections {\n             }\n         }\n     }\n-    \n+\n     private static void createTable(TableOperations tops, String table) {\n         try {\n             tops.create(table);\n@@ -89,17 +90,16 @@ public class Connections {\n             log.error(\"Could not create table \" + table, e);\n         }\n     }\n-    \n-    public static Connector metricsConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n-        final String mtxZk = c.get(MetricsConfig.ZOOKEEPERS), mtxInst = c.get(MetricsConfig.INSTANCE), mtxUser = c.get(MetricsConfig.USER), mtxPass = c\n-                        .get(MetricsConfig.PASS);\n-        return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(mtxInst).withZkHosts(mtxZk)).getConnector(mtxUser, new PasswordToken(\n-                        mtxPass));\n+\n+    public static Connector metricsConnection(Configuration c) throws AccumuloException,\n+        AccumuloSecurityException {\n+        final String mtxZk = c.get(MetricsConfig.ZOOKEEPERS), mtxInst = c.get(MetricsConfig.INSTANCE), mtxUser = c.get(MetricsConfig.USER), mtxPass = c.get(MetricsConfig.PASS);\n+        return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(mtxInst).withZkHosts(mtxZk)).getConnector(mtxUser, new PasswordToken(mtxPass));\n     }\n-    \n-    public static Connector warehouseConnection(Configuration c) throws AccumuloException, AccumuloSecurityException {\n-        final String whZk = c.get(MetricsConfig.WAREHOUSE_ZOOKEEPERS), whInst = c.get(MetricsConfig.WAREHOUSE_INSTANCE), whUser = c\n-                        .get(MetricsConfig.WAREHOUSE_USERNAME), whPass = c.get(MetricsConfig.WAREHOUSE_PASSWORD);\n+\n+    public static Connector warehouseConnection(Configuration c) throws AccumuloException,\n+        AccumuloSecurityException {\n+        final String whZk = c.get(MetricsConfig.WAREHOUSE_ZOOKEEPERS), whInst = c.get(MetricsConfig.WAREHOUSE_INSTANCE), whUser = c.get(MetricsConfig.WAREHOUSE_USERNAME), whPass = c.get(MetricsConfig.WAREHOUSE_PASSWORD);\n         return new ZooKeeperInstance(ClientConfiguration.loadDefault().withInstance(whInst).withZkHosts(whZk)).getConnector(whUser, new PasswordToken(whPass));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}