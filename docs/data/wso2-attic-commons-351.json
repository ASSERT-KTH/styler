{
    "project_name": "wso2-attic-commons",
    "error_id": "351",
    "information": {
        "errors": [
            {
                "line": "109",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n                        public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n                    });\n                }\n                object(false,mlSet);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/351/FLOW.java\nindex 85c96fa2228..eaefe67e0c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/351/FLOW.java\n@@ -106,8 +106,9 @@ class FLOW extends ACTIVITY {\n                         }\n \n                         public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n-                    });\n+                        public void failure(String reason, Element data) {\n+                            completed(null, CompensationHandler.emptySet()); }\n+                     });\n                 }\n                 object(false,mlSet);\n             } else /** No More active children. */ {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/351/FLOW.java\nindex 85c96fa2228..ed4d432b367 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/351/FLOW.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.rtrep.v2;\n \n import org.apache.ode.bpel.rtrep.v2.channels.FaultData;\n@@ -35,100 +36,107 @@ import java.util.Set;\n import org.w3c.dom.Element;\n \n class FLOW extends ACTIVITY {\n-    private static final long serialVersionUID = 1L;\n+  private static final long serialVersionUID = 1L;\n+\n+  private OFlow _oflow;\n \n-    private OFlow _oflow;\n+  private Set<ChildInfo> _children = new HashSet<ChildInfo>();\n \n-    private Set<ChildInfo> _children = new HashSet<ChildInfo>();\n+  public FLOW(ActivityInfo self, ScopeFrame frame, LinkFrame linkFrame) {\n+    super(self, frame, linkFrame);\n+    _oflow = (OFlow) self.o;\n+  }\n \n-    public FLOW(ActivityInfo self, ScopeFrame frame, LinkFrame linkFrame) {\n-        super(self,frame, linkFrame);\n-        _oflow = (OFlow) self.o;\n+  public void run() {\n+    LinkFrame myLinkFrame = new LinkFrame(_linkFrame);\n+    for (OLink link : _oflow.localLinks) {\n+      LinkStatusChannel lsc = newChannel(LinkStatusChannel.class);\n+      myLinkFrame.links.put(link, new LinkInfo(link, lsc));\n     }\n \n+    for (OActivity ochild : _oflow.parallelActivities) {\n+      ChildInfo childInfo = new ChildInfo(new ActivityInfo(genMonotonic(), ochild,\n+        newChannel(TerminationChannel.class), newChannel(ParentScopeChannel.class)));\n+      _children.add(childInfo);\n+      instance(createChild(childInfo.activity, _scopeFrame, myLinkFrame));\n+    }\n+    instance(new ACTIVE());\n+  }\n+\n+  private class ACTIVE extends BpelJacobRunnable {\n+    private static final long serialVersionUID = -8494641460279049245L;\n+    private FaultData _fault;\n+    private HashSet<CompensationHandler> _compensations = new HashSet<CompensationHandler>();\n+\n     public void run() {\n-        LinkFrame myLinkFrame = new LinkFrame(_linkFrame);\n-        for (OLink link : _oflow.localLinks) {\n-            LinkStatusChannel lsc = newChannel(LinkStatusChannel.class);\n-            myLinkFrame.links.put(link, new LinkInfo(link, lsc));\n-        }\n+      Iterator<ChildInfo> active = active();\n+      if (active.hasNext()) {\n+        Set<ChannelListener> mlSet = new HashSet<ChannelListener>();\n+        mlSet.add(new TerminationChannelListener(_self.self) {\n+          private static final long serialVersionUID = 2554750258974084466L;\n+\n+          public void terminate() {\n+            for (Iterator<ChildInfo> i = active(); i.hasNext(); ) {\n+              replication(i.next().activity.self).terminate();\n+            }\n+            instance(ACTIVE.this);\n+          }\n+        });\n \n-        for (OActivity ochild : _oflow.parallelActivities) {\n-            ChildInfo childInfo = new ChildInfo(new ActivityInfo(genMonotonic(), ochild,\n-                    newChannel(TerminationChannel.class), newChannel(ParentScopeChannel.class)));\n-            _children.add(childInfo);\n-            instance(createChild(childInfo.activity, _scopeFrame, myLinkFrame));\n-        }\n-        instance(new ACTIVE());\n-    }\n+        for (; active.hasNext(); ) {\n+          final ChildInfo child = active.next();\n+          mlSet.add(new ParentScopeChannelListener(child.activity.parent) {\n+            private static final long serialVersionUID = -8027205709169238172L;\n \n-    private class ACTIVE extends BpelJacobRunnable {\n-        private static final long serialVersionUID = -8494641460279049245L;\n-        private FaultData _fault;\n-        private HashSet<CompensationHandler> _compensations = new HashSet<CompensationHandler>();\n-\n-        public void run() {\n-            Iterator<ChildInfo> active = active();\n-            if (active.hasNext()) {\n-                Set<ChannelListener> mlSet = new HashSet<ChannelListener>();\n-                mlSet.add(new TerminationChannelListener(_self.self) {\n-                    private static final long serialVersionUID = 2554750258974084466L;\n-\n-                    public void terminate() {\n-                        for (Iterator<ChildInfo> i = active(); i.hasNext(); )\n-                            replication(i.next().activity.self).terminate();\n-                        instance(ACTIVE.this);\n-                    }\n-                });\n-\n-                for (;active.hasNext();) {\n-                    final ChildInfo child = active.next();\n-                    mlSet.add(new ParentScopeChannelListener(child.activity.parent) {\n-                        private static final long serialVersionUID = -8027205709169238172L;\n-\n-                        public void completed(FaultData faultData, Set<CompensationHandler> compensations) {\n-                            child.completed = true;\n-                            _compensations.addAll(compensations);\n-\n-                            // If we receive a fault, we request termination of all our activities\n-                            if (faultData != null && _fault == null) {\n-                                for (Iterator<ChildInfo> i = active(); i.hasNext(); )\n-                                    replication(i.next().activity.self).terminate();\n-                                _fault = faultData;\n-                            }\n-                            instance(ACTIVE.this);\n-                        }\n-\n-                        public void compensate(OScope scope, SynchChannel ret) {\n-                            // Flow does not do compensations, forward these to parent.\n-                            _self.parent.compensate(scope, ret);\n-                            instance(ACTIVE.this);\n-                        }\n-\n-                        public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n-                    });\n+            public void completed(FaultData faultData, Set<CompensationHandler> compensations) {\n+              child.completed = true;\n+              _compensations.addAll(compensations);\n+\n+              // If we receive a fault, we request termination of all our activities\n+              if (faultData != null && _fault == null) {\n+                for (Iterator<ChildInfo> i = active(); i.hasNext(); ) {\n+                  replication(i.next().activity.self).terminate();\n                 }\n-                object(false,mlSet);\n-            } else /** No More active children. */ {\n-                // NOTE: we do not not have to do DPE here because all the children\n-                // have been started, and are therefore expected to set the value of\n-                // their outgoing links.\n-                _self.parent.completed(_fault, _compensations);\n+                _fault = faultData;\n+              }\n+              instance(ACTIVE.this);\n             }\n-        }\n-    }\n \n-    public String toString() {\n-        return \"<T:Act:Flow:\" + _oflow.name + \">\";\n-    }\n+            public void compensate(OScope scope, SynchChannel ret) {\n+              // Flow does not do compensations, forward these to parent.\n+              _self.parent.compensate(scope, ret);\n+              instance(ACTIVE.this);\n+            }\n \n-    private Iterator<ChildInfo> active() {\n-        return new FilterIterator<ChildInfo>(_children.iterator(), new MemberOfFunction<ChildInfo>() {\n-            public boolean isMember(ChildInfo childInfo) {\n-                return !childInfo.completed;\n+            public void cancelled() {\n+              completed(null, CompensationHandler.emptySet());\n             }\n-        });\n+\n+            public void failure(String reason, Element data) {\n+              completed(null, CompensationHandler.emptySet());\n+            }\n+          });\n+        }\n+        object(false, mlSet);\n+      } else /** No More active children. */ {\n+        // NOTE: we do not not have to do DPE here because all the children\n+        // have been started, and are therefore expected to set the value of\n+        // their outgoing links.\n+        _self.parent.completed(_fault, _compensations);\n+      }\n     }\n+  }\n+\n+  public String toString() {\n+    return \"<T:Act:Flow:\" + _oflow.name + \">\";\n+  }\n+\n+  private Iterator<ChildInfo> active() {\n+    return new FilterIterator<ChildInfo>(_children.iterator(), new MemberOfFunction<ChildInfo>() {\n+      public boolean isMember(ChildInfo childInfo) {\n+        return !childInfo.completed;\n+      }\n+    });\n+  }\n \n }\n",
            "diff_size": 138
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/351/FLOW.java\nindex 85c96fa2228..8f337d03ac0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/351/FLOW.java\n@@ -105,8 +105,10 @@ class FLOW extends ACTIVITY {\n                             instance(ACTIVE.this);\n                         }\n \n-                        public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n+                        public void cancelled() {\n+    completed(null, CompensationHandler.emptySet()); }\n+                        public void failure(String reason, Element data) {\n+    completed(null, CompensationHandler.emptySet()); }\n                     });\n                 }\n                 object(false,mlSet);\n@@ -131,4 +133,4 @@ class FLOW extends ACTIVITY {\n         });\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/351/FLOW.java\nindex 85c96fa2228..eaefe67e0c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/351/FLOW.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/351/FLOW.java\n@@ -106,8 +106,9 @@ class FLOW extends ACTIVITY {\n                         }\n \n                         public void cancelled() { completed(null, CompensationHandler.emptySet()); }\n-                        public void failure(String reason, Element data) { completed(null, CompensationHandler.emptySet()); }\n-                    });\n+                        public void failure(String reason, Element data) {\n+                            completed(null, CompensationHandler.emptySet()); }\n+                     });\n                 }\n                 object(false,mlSet);\n             } else /** No More active children. */ {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}