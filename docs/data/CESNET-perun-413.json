{
    "project_name": "CESNET-perun",
    "error_id": "413",
    "information": {
        "errors": [
            {
                "line": "542",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \",\n\t\t\t new Object[] { textState }, TASK_ROWMAPPER);\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/413/TasksManagerImpl.java\nindex d6fc67e5ce2..53c61165494 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/413/TasksManagerImpl.java\n@@ -540,7 +540,7 @@ public class TasksManagerImpl implements TasksManagerImplApi {\n \t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n \t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n \t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \",\n-\t\t\t new Object[] { textState }, TASK_ROWMAPPER);\n+\t\t\t\tnew Object[] { textState }, TASK_ROWMAPPER);\n \t}\n \n \t@Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/413/TasksManagerImpl.java\nindex d6fc67e5ce2..ef0949123fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/413/TasksManagerImpl.java\n@@ -31,576 +31,582 @@ import java.util.List;\n  */\n public class TasksManagerImpl implements TasksManagerImplApi {\n \n-\tprivate static final Logger log = LoggerFactory.getLogger(TasksManagerImpl.class);\n-\n-\tprivate static final int MAX_NUMBER_OF_UTF8_BYTES = 4;\n-\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n-\n-\tprivate JdbcPerunTemplate jdbc;\n-\n-\t/**\n-\t * Create new instance of this class.\n-\t * Used for the tests only\n-\t */\n-\tpublic TasksManagerImpl() {\n-\t}\n-\n-\t/**\n-\t * Create new instance of this class.\n-\t *\n-\t */\n-\tpublic TasksManagerImpl(DataSource perunPool) {\n-\t\tthis.jdbc = new JdbcPerunTemplate(perunPool);\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n-\t\tthis.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t\tthis.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t}\n-\n-\tpublic final static String taskResultMappingSelectQuery = \" tasks_results.id as tasks_results_id, tasks_results.task_id as tasks_results_task_id,\" +\n-\t\t\" tasks_results.destination_id as tasks_results_destination_id, tasks_results.status as tasks_results_status, tasks_results.err_message as tasks_results_err_message,\" +\n-\t\t\" tasks_results.std_message as tasks_results_std_message, tasks_results.return_code as tasks_results_return_code, tasks_results.timestamp as tasks_results_timestamp \";\n-\n-\tpublic static final RowMapper<TaskResult> TASKRESULT_ROWMAPPER = (resultSet, i) -> {\n-\n-\t\tTaskResult taskResult = new TaskResult();\n-\n-\t\ttaskResult.setId(resultSet.getInt(\"tasks_results_id\"));\n-\t\ttaskResult.setDestinationId(resultSet.getInt(\"tasks_results_destination_id\"));\n-\t\ttaskResult.setErrorMessage(resultSet.getString(\"tasks_results_err_message\"));\n-\t\ttaskResult.setTaskId(resultSet.getInt(\"tasks_results_task_id\"));\n-\t\ttaskResult.setReturnCode(resultSet.getInt(\"tasks_results_return_code\"));\n-\t\ttaskResult.setStandardMessage(resultSet.getString(\"tasks_results_std_message\"));\n-\n-\t\tif (resultSet.getTimestamp(\"tasks_results_timestamp\") != null) {\n-\t\t\ttaskResult.setTimestamp(resultSet.getTimestamp(\"tasks_results_timestamp\"));\n-\t\t}\n-\n-\t\tif (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DONE.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.DONE);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.ERROR.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.ERROR);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.FATAL_ERROR.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.FATAL_ERROR);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DENIED.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.DENIED);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.WARNING.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.WARNING);\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(\"Unknown TaskResult state.\");\n-\t\t}\n-\n-\t\ttaskResult.setDestination(ServicesManagerImpl.DESTINATION_MAPPER.mapRow(resultSet, i));\n-\t\ttaskResult.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n-\n-\t\treturn taskResult;\n-\t};\n-\n-\tpublic synchronized NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n-\t\tif (this.namedParameterJdbcTemplate == null && jdbc.getDataSource() != null) {\n-\t\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbc.getDataSource());\n-\t\t}\n-\t\tthis.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t\treturn this.namedParameterJdbcTemplate;\n-\t}\n-\n-\t@Override\n-\tpublic int insertNewTaskResult(TaskResult taskResult) {\n-\t\tint newTaskResultId = Utils.getNewId(jdbc, \"tasks_results_id_seq\");\n-\n-\t\t// There was probably an issue with too long a String for VARCHAR2 datatype http://goo.gl/caVxp.\n-\t\t// Solution might be to shorten the message according to VARCHAR2: http://goo.gl/WrlYm\n-\t\tbyte[] standardMessage = null;\n-\t\tbyte[] errorMessage = null;\n-\t\tif(taskResult.getStandardMessage() != null) standardMessage = taskResult.getStandardMessage().getBytes(StandardCharsets.UTF_8);\n-\t\tif(taskResult.getErrorMessage()    != null) errorMessage    = taskResult.getErrorMessage().getBytes(StandardCharsets.UTF_8);\n-\n-\t\t// CLEAR UTF-8 0x00 bytes, since PostgreSQL can't store them to varchar column (Oracle can).\n-\t\t// By java, such byte is displayed as 'empty string' and is not visible in a log.\n-\t\tstandardMessage = clearZeroBytesFromString(standardMessage, 4000);\n-\t\terrorMessage = clearZeroBytesFromString(errorMessage, 4000);\n-\n-\t\t// jdbc template cannot be null\n-\t\tjdbc.update(\n-\t\t\t\t\"insert into tasks_results(\" +\n-\t\t\t\t\t\"id, \" +\n-\t\t\t\t\t\"task_id, \" +\n-\t\t\t\t\t\"destination_id, \" +\n-\t\t\t\t\t\"status, \" +\n-\t\t\t\t\t\"err_message, \" +\n-\t\t\t\t\t\"std_message, \" +\n-\t\t\t\t\t\"return_code, \" +\n-\t\t\t\t\t\"timestamp) values (?,?,?,?,?,?,?,\" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \")\",\n-\t\t\t\tnewTaskResultId,\n-\t\t\t\ttaskResult.getTaskId(),\n-\t\t\t\ttaskResult.getDestinationId(),\n-\t\t\t\ttaskResult.getStatus().toString(),\n-\t\t\t\terrorMessage == null ? null : new String(errorMessage, StandardCharsets.UTF_8),\n-\t\t\t\tstandardMessage == null ? null : new String(standardMessage, StandardCharsets.UTF_8),\n-\t\t\t\ttaskResult.getReturnCode(),\n-\t\t\t\tgetDateFormatter().format(taskResult.getTimestamp()));\n-\t\treturn newTaskResultId;\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResults() {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\",\n-\t\t\tTASKRESULT_ROWMAPPER);\n-\t}\n-\n-\t@Override\n-\tpublic TaskResult getTaskResultById(int taskResultId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.queryForObject(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id\" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where tasks_results.id = ?\",\n-\t\t\tTASKRESULT_ROWMAPPER, taskResultId);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteTaskResultById(int taskResultId) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from tasks_results where id = ?\", taskResultId);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteTaskResults(int taskId) {\n-\t\ttry {\n-\t\t\treturn jdbc.update(\"delete from tasks_results where task_id = ?\", taskId);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteTaskResults(int taskId, int destinationId) {\n-\t\ttry {\n-\t\t\treturn jdbc.update(\"delete from tasks_results where task_id = ? and destination_id = ?\", taskId, destinationId);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteOldTaskResults(int numDays) {\n-\t\ttry {\n-\t\t\tString compareDate = LocalDateTime.now().minusDays(numDays).format(getDateTimeFormatter());\n-\n-\t\t\treturn jdbc.update(\"delete from tasks_results where \" +\n-\t\t\t\t\t\t\t\"id in (\" +\n-\t\t\t\t\t\t\t\"select otr.id from tasks_results otr \" +\n-\t\t\t\t\t\t\t\"         left join ( \" +\n-\t\t\t\t\t\t\t\"\tselect tr.destination_id, tr.task_id, max(tr.timestamp) as maxtimestamp \" +\n-\t\t\t\t\t\t\t\"\tfrom tasks_results tr \" +\n-\t\t\t\t\t\t\t\"\t\tinner join tasks t on tr.task_id = t.id \" +\n-\t\t\t\t\t\t\t\"\t\tgroup by tr.destination_id,tr.task_id \" +\n-\t\t\t\t\t\t\t\"   )  tmp on otr.task_id = tmp.task_id and otr.destination_id = tmp.destination_id \" +\n-\t\t\t\t\t\t\t\"where otr.timestamp < maxtimestamp and otr.timestamp < \"+Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\")+\" )\",\n-\t\t\t\t\tcompareDate);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteAllTaskResults() {\n-\t\ttry {\n-\t\t\treturn jdbc.update(\"delete from tasks_results\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResultsByTask(int taskId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where tasks_results.task_id = ? \",\n-\t\t\tTASKRESULT_ROWMAPPER, taskId);\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results\" +\n-\t\t\t\t\" left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id\" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" inner join (\" +\n-\t\t\t\t\" SELECT destination_id, MAX(modified_at) AS modified_at_max\" +\n-\t\t\t\t\" FROM tasks_results where task_id=?\" +\n-\t\t\t\t\" GROUP BY destination_id) tr2\" +\n-\t\t\t\t\" on tasks_results.destination_id = tr2.destination_id\" +\n-\t\t\t\t\" and tasks_results.modified_at = tr2.modified_at_max\" +\n-\t\t\t\t\" inner join (\" +\n-\t\t\t\t\" SELECT destination_id, modified_at, MAX(id) AS id_max\" +\n-\t\t\t\t\" FROM tasks_results where task_id=?\" +\n-\t\t\t\t\" GROUP BY destination_id, modified_at) tr3\" +\n-\t\t\t\t\" on tasks_results.destination_id = tr3.destination_id\" +\n-\t\t\t\t\" and tasks_results.modified_at = tr3.modified_at\" +\n-\t\t\t\t\" and tasks_results.id   = tr3.id_max\" +\n-\t\t\t\t\" where tasks_results.task_id=?\",\n-\t\t\tTASKRESULT_ROWMAPPER, taskId, taskId, taskId);\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where tasks_results.task_id = ? AND\" +\n-\t\t\t\t\" tasks_results.destination_id=?\",\n-\t\t\tTASKRESULT_ROWMAPPER, taskId, destinationId);\n-\t}\n-\n-\tpublic List<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames) {\n-\n-\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n-\t\tparameters.addValue(\"destinations\", destinationsNames);\n-\n-\t\ttry {\n-\t\t\treturn getNamedParameterJdbcTemplate().query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where destinations.destination in ( :destinations )\", parameters, TASKRESULT_ROWMAPPER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Clear all Zero bytes (0x00) from UTF-8 String\n-\t *\n-\t * @param data to remove zero bytes\n-\t * @return Original string without zero bytes\n-\t */\n-\tprivate static byte[] clearZeroBytesFromString(byte[] data, int maxLength) {\n-\t\tif (data == null) return null;\n-\t\tByteArrayOutputStream dataOut = new ByteArrayOutputStream() ;\n-\t\tboolean maxLengthExceeded = maxLength < data.length;\n-\t\tint limit = maxLengthExceeded ? maxLength - MAX_NUMBER_OF_UTF8_BYTES : data.length;\n-\t\tfor (int i = 0; i < limit; i++) {\n-\t\t\tif (data[i] != 0x00)\n-\t\t\t\tdataOut.write(data[i]);\n-\t\t}\n-\t\tif(maxLengthExceeded) {\n-\t\t\t// check if we have to add some bytes in case we have split an UTF-8 character that is longer than 1 byte.\n-\t\t\tif (!isASingleByteUTF8Char(data[limit-1])) {\n-\t\t\t\tint i = 0;\n-\t\t\t\twhile (!isAStartingByteUTF8Char(data[limit + i])) {\n-\t\t\t\t\tif (i == MAX_NUMBER_OF_UTF8_BYTES) {\n-\t\t\t\t\t\tlog.error(\"The message data contains invalid UTF-8 character. The byte limit for one character was exceeded.\");\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t\tdataOut.write(data[limit + i]);\n-\t\t\t\t\ti++;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t}\n-\t\treturn dataOut.toByteArray();\n-\t}\n-\n-\t/**\n-\t * Checks if the given byte represents an initial UTF-8 character.\n-\t *\n-\t * An initial character can be in those formats:\n-\t *     110XXXXXX\n-\t *     1110XXXXX\n-\t *     11110XXXX\n-\t *     0XXXXXXXX\n-\t *\n-\t * If the given value is in range 10000000(inclusive) ... 11000000(exclusive)\n-\t * it means that the byte is part of a UTF-8 character composed of multiple bytes.\n-\t *\n-\t * The value 10000000 for byte in Java is equal to -128 and this value is minimal.\n-\t * The value 11000000 for byte in Java is equal to -64.\n-\t *\n-\t * @param b byte to check\n-\t * @return true, if the given byte is a starting byte for UTF-8 char, false otherwise.\n-\t */\n-\tprivate static boolean isAStartingByteUTF8Char(byte b) {\n-\t\treturn b >= (byte)0b11000000;\n-\t}\n-\n-\t/**\n-\t * Check if this byte represents a UTF-8 character that is represented by one byte.\n-\t *\n-\t * That means, check if the value is in range 00000000 ... 01111111.\n-\t * If the given byte starts with '1' it means its lower than 0 because bytes in Java\n-\t * are represented with inversion code.\n-\t *\n-\t * @param b byte to check\n-\t * @return true, if the given byte represents a single byte UTF-8 character, false otherwise.\n-\t */\n-\tprivate static boolean isASingleByteUTF8Char(byte b) {\n-\t\treturn b > 0;\n-\t}\n-\n-\tprivate JdbcTemplate getMyJdbcTemplate() {\n-\t\t// jdbc template cannot be null\n-\t\tjdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t\treturn jdbc;\n-\t}\n-\n-\t/**\n-\t * Method create formatter with default settings for perun timestamps and set lenient on false\n-\t * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n-\t *\n-\t * Lenient on false means that formatter will be more strict to creating timestamp from string\n-\t *\n-\t * IMPORTANT: SimpleDateFormat is not thread safe !!!\n-\t *\n-\t * @return date formatter\n-\t */\n-\tpublic static SimpleDateFormat getDateFormatter() {\n-\t\tSimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n-\t\tdf.setLenient(false);\n-\t\treturn df;\n-\t}\n-\n-\t/**\n-\t * Method create formatter with default settings for perun timestamps and set ResolverStyle to STRICT\n-\t * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n-\t *\n-\t * ResolverStyle.STRICT means that formatter will be more strict to creating timestamp from string\n-\t *\n-\t * @return date formatter\n-\t */\n-\tpublic static DateTimeFormatter getDateTimeFormatter() {\n-\t\treturn DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\").withResolverStyle(ResolverStyle.STRICT);\n-\t}\n-\n-\tpublic final static String taskMappingSelectQuery = \" tasks.id as tasks_id, tasks.schedule as tasks_schedule, tasks.recurrence as tasks_recurrence, \" +\n-\t\t\"tasks.delay as tasks_delay, tasks.status as tasks_status, tasks.start_time as tasks_start_time, tasks.end_time as tasks_end_time \";\n-\n-\tpublic static final RowMapper<Task> TASK_ROWMAPPER = (resultSet, i) -> {\n-\n-\t\tTask task = new Task();\n-\n-\t\ttask.setDelay(resultSet.getInt(\"tasks_delay\"));\n-\t\ttask.setId(resultSet.getInt(\"tasks_id\"));\n-\t\ttask.setRecurrence(resultSet.getInt(\"tasks_recurrence\"));\n-\n-\t\tif (resultSet.getTimestamp(\"tasks_start_time\") != null) {\n-\t\t\ttask.setStartTime(resultSet.getTimestamp(\"tasks_start_time\").toLocalDateTime());\n-\t\t}\n-\t\tif (resultSet.getTimestamp(\"tasks_schedule\") != null) {\n-\t\t\ttask.setSchedule(resultSet.getTimestamp(\"tasks_schedule\").toLocalDateTime());\n-\t\t}\n-\t\tif (resultSet.getTimestamp(\"tasks_end_time\") != null) {\n-\t\t\ttask.setEndTime(resultSet.getTimestamp(\"tasks_end_time\").toLocalDateTime());\n-\t\t}\n-\n-\t\tif (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WAITING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.WAITING);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.PLANNED.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.PLANNED);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDERROR.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.SENDERROR);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERROR.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.GENERROR);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.GENERATING);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATED.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.GENERATED);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.SENDING);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.DONE.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.DONE);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.ERROR.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.ERROR);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WARNING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.WARNING);\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(\"Task status [\" + resultSet.getString(\"tasks_status\") + \"] unknown\");\n-\t\t}\n-\n-\t\ttask.setFacility(FacilitiesManagerImpl.FACILITY_MAPPER.mapRow(resultSet, i));\n-\n-\t\ttask.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n-\n-\t\treturn task;\n-\t};\n-\n-\t@Override\n-\tpublic int insertTask(Task task) {\n-\t\tint newTaskId = 0;\n-\t\ttry {\n-\t\t\tnewTaskId = Utils.getNewId(getMyJdbcTemplate(), \"tasks_id_seq\");\n-\t\t\t// jdbc template cannot be null\n-\t\t\tgetMyJdbcTemplate().update(\n-\t\t\t\t\"insert into tasks(id, service_id, facility_id, schedule, recurrence, delay, status) values (?,?,?, \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \",?,?,?)\",\n-\t\t\t\tnewTaskId, task.getServiceId(), task.getFacilityId(), task.getSchedule().format(getDateTimeFormatter()), task.getRecurrence(), task.getDelay(), task.getStatus().toString());\n-\t\t\tlog.debug(\"Added task with ID {}\", newTaskId);\n-\t\t\treturn newTaskId;\n-\t\t} catch (DataIntegrityViolationException ex) {\n-\t\t\tlog.error(\"Data: id, service_id, facility_id, schedule, recurrence, delay, status is: \" + newTaskId + \", \" + task.getServiceId() + \", \" + task.getFacilityId() + \", \"\n-\t\t\t\t+ task.getSchedule().format(getDateTimeFormatter()) + \", \" + task.getRecurrence() + \", \" + task.getDelay() + \", \" + task.getStatus().toString() + \". Exception:\" + ex.toString(), ex);\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to insert new Task.\", ex);\n-\t\t}\n-\t\treturn 0;\n-\t}\n-\n-\t@Override\n-\tpublic Task getTask(Service service, Facility facility) {\n-\t\treturn getTask(service.getId(), facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic Task getTask(int serviceId, int facilityId) {\n-\t\ttry {\n-\t\t\t// jdbc template cannot be null\n-\t\t\treturn getMyJdbcTemplate().queryForObject(\n-\t\t\t\t\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id and tasks.service_id=?\" +\n-\t\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id and tasks.facility_id = ?\",\n-\t\t\t\tTASK_ROWMAPPER, serviceId, facilityId);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasksForFacility(int facilityId) {\n-\t\ttry {\n-\t\t\t// jdbc template cannot be null\n-\t\t\treturn getMyJdbcTemplate().query(\n-\t\t\t\t\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where facilities.id = ?\",\n-\t\t\t\tTASK_ROWMAPPER, facilityId);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Task getTaskById(int id) {\n-\t\ttry {\n-\t\t\t// jdbc template cannot be null\n-\t\t\treturn getMyJdbcTemplate().queryForObject(\n-\t\t\t\t\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.id = ?\",\n-\t\t\t\tTASK_ROWMAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasks() {\n-\t\t// jdbc template cannot be null\n-\t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\"left join facilities on facilities.id = tasks.facility_id\", TASK_ROWMAPPER);\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasksInState(Task.TaskStatus state) {\n-\t\tString textState = state.toString().toUpperCase();\n-\t\t// jdbc template cannot be null\n-\t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status = ?\",\n-\t\t\tTASK_ROWMAPPER, textState);\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasksNotInState(Task.TaskStatus state) {\n-\t\tString textState = state.toString().toUpperCase();\n-\t\t// jdbc template cannot be null\n-\t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \",\n-\t\t\t new Object[] { textState }, TASK_ROWMAPPER);\n-\t}\n-\n-\t@Override\n-\tpublic void updateTask(Task task) {\n-\t\tString scheduled = null;\n-\t\tif (task.getSchedule() != null) {\n-\t\t\tscheduled = task.getSchedule().format(getDateTimeFormatter());\n-\t\t}\n-\t\tString endTime = null;\n-\t\tif (task.getEndTime() != null) {\n-\t\t\tendTime = task.getEndTime().format(getDateTimeFormatter());\n-\t\t}\n-\t\tString startTime = null;\n-\t\tif (task.getStartTime() != null) {\n-\t\t\tstartTime = task.getStartTime().format(getDateTimeFormatter());\n-\t\t}\n-\n-\t\t// jdbc template cannot be null\n-\t\tgetMyJdbcTemplate().update(\n-\t\t\t\"update tasks set service_id = ?, facility_id = ?, schedule = \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \", recurrence = ?, delay = ?, \"\n-\t\t\t\t+ \"status = ?, start_time = \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \", end_time = \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \" where id = ?\", task.getServiceId(),\n-\t\t\ttask.getFacilityId(), scheduled, task.getRecurrence(), task.getDelay(), task.getStatus().toString(), startTime, endTime, task.getId());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isThereSuchTask(Service service, Facility facility) {\n-\t\t//this.getJdbcTemplate().update(\"select id from services where id = ? for update\", service.getId());\n-\n-\t\t// jdbc template cannot be null\n-\t\tList<Integer> tasks = getMyJdbcTemplate().queryForList(\"select id from tasks where service_id = ? and facility_id = ?\",\n-\t\t\tnew Integer[] { service.getId(), facility.getId() }, Integer.class);\n-\t\tif (tasks.size() == 0) {\n-\t\t\treturn false;\n-\t\t} else if (tasks.size() > 1) {\n-\t\t\tthrow new IllegalArgumentException(\"There is a duplicate Task for constraints Service[\" + service.getId() + \"], Facility[\" + facility.getId() + \"]\");\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic void removeTask(Service service, Facility facility) {\n-\t\t// jdbc template cannot be null\n-\t\tgetMyJdbcTemplate().update(\"delete from tasks where service_id = ? and facility_id = ?\", service.getId(), facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic void removeTask(int id) {\n-\t\t// jdbc template cannot be null\n-\t\tgetMyJdbcTemplate().update(\"delete from tasks where id = ?\", id);\n-\t}\n-\n-\tprivate int queryForInt(String sql, Object... args) {\n-\t\t// jdbc template cannot be null\n-\t\tInteger i = getMyJdbcTemplate().queryForObject(sql, args, Integer.class);\n-\t\treturn (i != null ? i : 0);\n-\t}\n-\n-\t@Override\n-\tpublic int countTasks() {\n-\t\treturn queryForInt(\"select count(*) from tasks\");\n-\t}\n+    private static final Logger log = LoggerFactory.getLogger(TasksManagerImpl.class);\n+\n+    private static final int MAX_NUMBER_OF_UTF8_BYTES = 4;\n+    private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+\n+    private JdbcPerunTemplate jdbc;\n+\n+    /**\n+     * Create new instance of this class.\n+     * Used for the tests only\n+     */\n+    public TasksManagerImpl() {\n+    }\n+\n+    /**\n+     * Create new instance of this class.\n+     */\n+    public TasksManagerImpl(DataSource perunPool) {\n+        this.jdbc = new JdbcPerunTemplate(perunPool);\n+        this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n+        this.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+        this.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+    }\n+\n+    public final static String taskResultMappingSelectQuery = \" tasks_results.id as tasks_results_id, tasks_results.task_id as tasks_results_task_id,\" +\n+            \" tasks_results.destination_id as tasks_results_destination_id, tasks_results.status as tasks_results_status, tasks_results.err_message as tasks_results_err_message,\" +\n+            \" tasks_results.std_message as tasks_results_std_message, tasks_results.return_code as tasks_results_return_code, tasks_results.timestamp as tasks_results_timestamp \";\n+\n+    public static final RowMapper<TaskResult> TASKRESULT_ROWMAPPER = (resultSet, i) -> {\n+\n+        TaskResult taskResult = new TaskResult();\n+\n+        taskResult.setId(resultSet.getInt(\"tasks_results_id\"));\n+        taskResult.setDestinationId(resultSet.getInt(\"tasks_results_destination_id\"));\n+        taskResult.setErrorMessage(resultSet.getString(\"tasks_results_err_message\"));\n+        taskResult.setTaskId(resultSet.getInt(\"tasks_results_task_id\"));\n+        taskResult.setReturnCode(resultSet.getInt(\"tasks_results_return_code\"));\n+        taskResult.setStandardMessage(resultSet.getString(\"tasks_results_std_message\"));\n+\n+        if (resultSet.getTimestamp(\"tasks_results_timestamp\") != null) {\n+            taskResult.setTimestamp(resultSet.getTimestamp(\"tasks_results_timestamp\"));\n+        }\n+\n+        if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DONE.toString())) {\n+            taskResult.setStatus(TaskResult.TaskResultStatus.DONE);\n+        } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.ERROR.toString())) {\n+            taskResult.setStatus(TaskResult.TaskResultStatus.ERROR);\n+        } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.FATAL_ERROR.toString())) {\n+            taskResult.setStatus(TaskResult.TaskResultStatus.FATAL_ERROR);\n+        } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DENIED.toString())) {\n+            taskResult.setStatus(TaskResult.TaskResultStatus.DENIED);\n+        } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.WARNING.toString())) {\n+            taskResult.setStatus(TaskResult.TaskResultStatus.WARNING);\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown TaskResult state.\");\n+        }\n+\n+        taskResult.setDestination(ServicesManagerImpl.DESTINATION_MAPPER.mapRow(resultSet, i));\n+        taskResult.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n+\n+        return taskResult;\n+    };\n+\n+    public synchronized NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+        if (this.namedParameterJdbcTemplate == null && jdbc.getDataSource() != null) {\n+            this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbc.getDataSource());\n+        }\n+        this.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+        return this.namedParameterJdbcTemplate;\n+    }\n+\n+    @Override\n+    public int insertNewTaskResult(TaskResult taskResult) {\n+        int newTaskResultId = Utils.getNewId(jdbc, \"tasks_results_id_seq\");\n+\n+        // There was probably an issue with too long a String for VARCHAR2 datatype http://goo.gl/caVxp.\n+        // Solution might be to shorten the message according to VARCHAR2: http://goo.gl/WrlYm\n+        byte[] standardMessage = null;\n+        byte[] errorMessage = null;\n+        if (taskResult.getStandardMessage() != null) {\n+            standardMessage = taskResult.getStandardMessage().getBytes(StandardCharsets.UTF_8);\n+        }\n+        if (taskResult.getErrorMessage() != null) {\n+            errorMessage = taskResult.getErrorMessage().getBytes(StandardCharsets.UTF_8);\n+        }\n+\n+        // CLEAR UTF-8 0x00 bytes, since PostgreSQL can't store them to varchar column (Oracle can).\n+        // By java, such byte is displayed as 'empty string' and is not visible in a log.\n+        standardMessage = clearZeroBytesFromString(standardMessage, 4000);\n+        errorMessage = clearZeroBytesFromString(errorMessage, 4000);\n+\n+        // jdbc template cannot be null\n+        jdbc.update(\n+                \"insert into tasks_results(\" +\n+                        \"id, \" +\n+                        \"task_id, \" +\n+                        \"destination_id, \" +\n+                        \"status, \" +\n+                        \"err_message, \" +\n+                        \"std_message, \" +\n+                        \"return_code, \" +\n+                        \"timestamp) values (?,?,?,?,?,?,?,\" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \")\",\n+                newTaskResultId,\n+                taskResult.getTaskId(),\n+                taskResult.getDestinationId(),\n+                taskResult.getStatus().toString(),\n+                errorMessage == null ? null : new String(errorMessage, StandardCharsets.UTF_8),\n+                standardMessage == null ? null : new String(standardMessage, StandardCharsets.UTF_8),\n+                taskResult.getReturnCode(),\n+                getDateFormatter().format(taskResult.getTimestamp()));\n+        return newTaskResultId;\n+    }\n+\n+    @Override\n+    public List<TaskResult> getTaskResults() {\n+        // jdbc template cannot be null\n+        return jdbc.query(\n+                \"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n+                        ServicesManagerImpl.serviceMappingSelectQuery +\n+                        \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" +\n+                        \" left join tasks on tasks.id = tasks_results.task_id \" +\n+                        \" left join services on services.id = tasks.service_id\",\n+                TASKRESULT_ROWMAPPER);\n+    }\n+\n+    @Override\n+    public TaskResult getTaskResultById(int taskResultId) {\n+        // jdbc template cannot be null\n+        return jdbc.queryForObject(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n+                        ServicesManagerImpl.serviceMappingSelectQuery +\n+                        \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" +\n+                        \" left join tasks on tasks.id = tasks_results.task_id\" +\n+                        \" left join services on services.id = tasks.service_id\" +\n+                        \" where tasks_results.id = ?\",\n+                TASKRESULT_ROWMAPPER, taskResultId);\n+    }\n+\n+    @Override\n+    public void deleteTaskResultById(int taskResultId) {\n+        try {\n+            jdbc.update(\"delete from tasks_results where id = ?\", taskResultId);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int deleteTaskResults(int taskId) {\n+        try {\n+            return jdbc.update(\"delete from tasks_results where task_id = ?\", taskId);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int deleteTaskResults(int taskId, int destinationId) {\n+        try {\n+            return jdbc.update(\"delete from tasks_results where task_id = ? and destination_id = ?\", taskId, destinationId);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int deleteOldTaskResults(int numDays) {\n+        try {\n+            String compareDate = LocalDateTime.now().minusDays(numDays).format(getDateTimeFormatter());\n+\n+            return jdbc.update(\"delete from tasks_results where \" +\n+                            \"id in (\" +\n+                            \"select otr.id from tasks_results otr \" +\n+                            \"         left join ( \" +\n+                            \"\tselect tr.destination_id, tr.task_id, max(tr.timestamp) as maxtimestamp \" +\n+                            \"\tfrom tasks_results tr \" +\n+                            \"\t\tinner join tasks t on tr.task_id = t.id \" +\n+                            \"\t\tgroup by tr.destination_id,tr.task_id \" +\n+                            \"   )  tmp on otr.task_id = tmp.task_id and otr.destination_id = tmp.destination_id \" +\n+                            \"where otr.timestamp < maxtimestamp and otr.timestamp < \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \" )\",\n+                    compareDate);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public int deleteAllTaskResults() {\n+        try {\n+            return jdbc.update(\"delete from tasks_results\");\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public List<TaskResult> getTaskResultsByTask(int taskId) {\n+        // jdbc template cannot be null\n+        return jdbc.query(\n+                \"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n+                        ServicesManagerImpl.serviceMappingSelectQuery +\n+                        \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n+                        \" left join tasks on tasks.id = tasks_results.task_id \" +\n+                        \" left join services on services.id = tasks.service_id\" +\n+                        \" where tasks_results.task_id = ? \",\n+                TASKRESULT_ROWMAPPER, taskId);\n+    }\n+\n+    @Override\n+    public List<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId) {\n+        // jdbc template cannot be null\n+        return jdbc.query(\n+                \"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n+                        ServicesManagerImpl.serviceMappingSelectQuery +\n+                        \" from tasks_results\" +\n+                        \" left join destinations on tasks_results.destination_id = destinations.id\" +\n+                        \" left join tasks on tasks.id = tasks_results.task_id\" +\n+                        \" left join services on services.id = tasks.service_id\" +\n+                        \" inner join (\" +\n+                        \" SELECT destination_id, MAX(modified_at) AS modified_at_max\" +\n+                        \" FROM tasks_results where task_id=?\" +\n+                        \" GROUP BY destination_id) tr2\" +\n+                        \" on tasks_results.destination_id = tr2.destination_id\" +\n+                        \" and tasks_results.modified_at = tr2.modified_at_max\" +\n+                        \" inner join (\" +\n+                        \" SELECT destination_id, modified_at, MAX(id) AS id_max\" +\n+                        \" FROM tasks_results where task_id=?\" +\n+                        \" GROUP BY destination_id, modified_at) tr3\" +\n+                        \" on tasks_results.destination_id = tr3.destination_id\" +\n+                        \" and tasks_results.modified_at = tr3.modified_at\" +\n+                        \" and tasks_results.id   = tr3.id_max\" +\n+                        \" where tasks_results.task_id=?\",\n+                TASKRESULT_ROWMAPPER, taskId, taskId, taskId);\n+    }\n+\n+    @Override\n+    public List<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId) {\n+        // jdbc template cannot be null\n+        return jdbc.query(\n+                \"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n+                        ServicesManagerImpl.serviceMappingSelectQuery +\n+                        \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n+                        \" left join tasks on tasks.id = tasks_results.task_id \" +\n+                        \" left join services on services.id = tasks.service_id\" +\n+                        \" where tasks_results.task_id = ? AND\" +\n+                        \" tasks_results.destination_id=?\",\n+                TASKRESULT_ROWMAPPER, taskId, destinationId);\n+    }\n+\n+    public List<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames) {\n+\n+        MapSqlParameterSource parameters = new MapSqlParameterSource();\n+        parameters.addValue(\"destinations\", destinationsNames);\n+\n+        try {\n+            return getNamedParameterJdbcTemplate().query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n+                    ServicesManagerImpl.serviceMappingSelectQuery +\n+                    \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n+                    \" left join tasks on tasks.id = tasks_results.task_id \" +\n+                    \" left join services on services.id = tasks.service_id\" +\n+                    \" where destinations.destination in ( :destinations )\", parameters, TASKRESULT_ROWMAPPER);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Clear all Zero bytes (0x00) from UTF-8 String\n+     *\n+     * @param data to remove zero bytes\n+     * @return Original string without zero bytes\n+     */\n+    private static byte[] clearZeroBytesFromString(byte[] data, int maxLength) {\n+        if (data == null) {\n+            return null;\n+        }\n+        ByteArrayOutputStream dataOut = new ByteArrayOutputStream();\n+        boolean maxLengthExceeded = maxLength < data.length;\n+        int limit = maxLengthExceeded ? maxLength - MAX_NUMBER_OF_UTF8_BYTES : data.length;\n+        for (int i = 0; i < limit; i++) {\n+            if (data[i] != 0x00) {\n+                dataOut.write(data[i]);\n+            }\n+        }\n+        if (maxLengthExceeded) {\n+            // check if we have to add some bytes in case we have split an UTF-8 character that is longer than 1 byte.\n+            if (!isASingleByteUTF8Char(data[limit - 1])) {\n+                int i = 0;\n+                while (!isAStartingByteUTF8Char(data[limit + i])) {\n+                    if (i == MAX_NUMBER_OF_UTF8_BYTES) {\n+                        log.error(\"The message data contains invalid UTF-8 character. The byte limit for one character was exceeded.\");\n+                        break;\n+                    }\n+                    dataOut.write(data[limit + i]);\n+                    i++;\n+                }\n+            }\n+\n+        }\n+        return dataOut.toByteArray();\n+    }\n+\n+    /**\n+     * Checks if the given byte represents an initial UTF-8 character.\n+     * <p>\n+     * An initial character can be in those formats:\n+     * 110XXXXXX\n+     * 1110XXXXX\n+     * 11110XXXX\n+     * 0XXXXXXXX\n+     * <p>\n+     * If the given value is in range 10000000(inclusive) ... 11000000(exclusive)\n+     * it means that the byte is part of a UTF-8 character composed of multiple bytes.\n+     * <p>\n+     * The value 10000000 for byte in Java is equal to -128 and this value is minimal.\n+     * The value 11000000 for byte in Java is equal to -64.\n+     *\n+     * @param b byte to check\n+     * @return true, if the given byte is a starting byte for UTF-8 char, false otherwise.\n+     */\n+    private static boolean isAStartingByteUTF8Char(byte b) {\n+        return b >= (byte) 0b11000000;\n+    }\n+\n+    /**\n+     * Check if this byte represents a UTF-8 character that is represented by one byte.\n+     * <p>\n+     * That means, check if the value is in range 00000000 ... 01111111.\n+     * If the given byte starts with '1' it means its lower than 0 because bytes in Java\n+     * are represented with inversion code.\n+     *\n+     * @param b byte to check\n+     * @return true, if the given byte represents a single byte UTF-8 character, false otherwise.\n+     */\n+    private static boolean isASingleByteUTF8Char(byte b) {\n+        return b > 0;\n+    }\n+\n+    private JdbcTemplate getMyJdbcTemplate() {\n+        // jdbc template cannot be null\n+        jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+        return jdbc;\n+    }\n+\n+    /**\n+     * Method create formatter with default settings for perun timestamps and set lenient on false\n+     * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n+     * <p>\n+     * Lenient on false means that formatter will be more strict to creating timestamp from string\n+     * <p>\n+     * IMPORTANT: SimpleDateFormat is not thread safe !!!\n+     *\n+     * @return date formatter\n+     */\n+    public static SimpleDateFormat getDateFormatter() {\n+        SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n+        df.setLenient(false);\n+        return df;\n+    }\n+\n+    /**\n+     * Method create formatter with default settings for perun timestamps and set ResolverStyle to STRICT\n+     * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n+     * <p>\n+     * ResolverStyle.STRICT means that formatter will be more strict to creating timestamp from string\n+     *\n+     * @return date formatter\n+     */\n+    public static DateTimeFormatter getDateTimeFormatter() {\n+        return DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\").withResolverStyle(ResolverStyle.STRICT);\n+    }\n+\n+    public final static String taskMappingSelectQuery = \" tasks.id as tasks_id, tasks.schedule as tasks_schedule, tasks.recurrence as tasks_recurrence, \" +\n+            \"tasks.delay as tasks_delay, tasks.status as tasks_status, tasks.start_time as tasks_start_time, tasks.end_time as tasks_end_time \";\n+\n+    public static final RowMapper<Task> TASK_ROWMAPPER = (resultSet, i) -> {\n+\n+        Task task = new Task();\n+\n+        task.setDelay(resultSet.getInt(\"tasks_delay\"));\n+        task.setId(resultSet.getInt(\"tasks_id\"));\n+        task.setRecurrence(resultSet.getInt(\"tasks_recurrence\"));\n+\n+        if (resultSet.getTimestamp(\"tasks_start_time\") != null) {\n+            task.setStartTime(resultSet.getTimestamp(\"tasks_start_time\").toLocalDateTime());\n+        }\n+        if (resultSet.getTimestamp(\"tasks_schedule\") != null) {\n+            task.setSchedule(resultSet.getTimestamp(\"tasks_schedule\").toLocalDateTime());\n+        }\n+        if (resultSet.getTimestamp(\"tasks_end_time\") != null) {\n+            task.setEndTime(resultSet.getTimestamp(\"tasks_end_time\").toLocalDateTime());\n+        }\n+\n+        if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WAITING.toString())) {\n+            task.setStatus(Task.TaskStatus.WAITING);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.PLANNED.toString())) {\n+            task.setStatus(Task.TaskStatus.PLANNED);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDERROR.toString())) {\n+            task.setStatus(Task.TaskStatus.SENDERROR);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERROR.toString())) {\n+            task.setStatus(Task.TaskStatus.GENERROR);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATING.toString())) {\n+            task.setStatus(Task.TaskStatus.GENERATING);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATED.toString())) {\n+            task.setStatus(Task.TaskStatus.GENERATED);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDING.toString())) {\n+            task.setStatus(Task.TaskStatus.SENDING);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.DONE.toString())) {\n+            task.setStatus(Task.TaskStatus.DONE);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.ERROR.toString())) {\n+            task.setStatus(Task.TaskStatus.ERROR);\n+        } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WARNING.toString())) {\n+            task.setStatus(Task.TaskStatus.WARNING);\n+        } else {\n+            throw new IllegalArgumentException(\"Task status [\" + resultSet.getString(\"tasks_status\") + \"] unknown\");\n+        }\n+\n+        task.setFacility(FacilitiesManagerImpl.FACILITY_MAPPER.mapRow(resultSet, i));\n+\n+        task.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n+\n+        return task;\n+    };\n+\n+    @Override\n+    public int insertTask(Task task) {\n+        int newTaskId = 0;\n+        try {\n+            newTaskId = Utils.getNewId(getMyJdbcTemplate(), \"tasks_id_seq\");\n+            // jdbc template cannot be null\n+            getMyJdbcTemplate().update(\n+                    \"insert into tasks(id, service_id, facility_id, schedule, recurrence, delay, status) values (?,?,?, \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \",?,?,?)\",\n+                    newTaskId, task.getServiceId(), task.getFacilityId(), task.getSchedule().format(getDateTimeFormatter()), task.getRecurrence(), task.getDelay(), task.getStatus().toString());\n+            log.debug(\"Added task with ID {}\", newTaskId);\n+            return newTaskId;\n+        } catch (DataIntegrityViolationException ex) {\n+            log.error(\"Data: id, service_id, facility_id, schedule, recurrence, delay, status is: \" + newTaskId + \", \" + task.getServiceId() + \", \" + task.getFacilityId() + \", \"\n+                    + task.getSchedule().format(getDateTimeFormatter()) + \", \" + task.getRecurrence() + \", \" + task.getDelay() + \", \" + task.getStatus().toString() + \". Exception:\" + ex.toString(), ex);\n+        } catch (Exception ex) {\n+            log.error(\"Failed to insert new Task.\", ex);\n+        }\n+        return 0;\n+    }\n+\n+    @Override\n+    public Task getTask(Service service, Facility facility) {\n+        return getTask(service.getId(), facility.getId());\n+    }\n+\n+    @Override\n+    public Task getTask(int serviceId, int facilityId) {\n+        try {\n+            // jdbc template cannot be null\n+            return getMyJdbcTemplate().queryForObject(\n+                    \"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n+                            \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id and tasks.service_id=?\" +\n+                            \"left join facilities on facilities.id = tasks.facility_id and tasks.facility_id = ?\",\n+                    TASK_ROWMAPPER, serviceId, facilityId);\n+        } catch (EmptyResultDataAccessException ex) {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public List<Task> listAllTasksForFacility(int facilityId) {\n+        try {\n+            // jdbc template cannot be null\n+            return getMyJdbcTemplate().query(\n+                    \"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n+                            \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" +\n+                            \"left join facilities on facilities.id = tasks.facility_id where facilities.id = ?\",\n+                    TASK_ROWMAPPER, facilityId);\n+        } catch (EmptyResultDataAccessException ex) {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public Task getTaskById(int id) {\n+        try {\n+            // jdbc template cannot be null\n+            return getMyJdbcTemplate().queryForObject(\n+                    \"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n+                            \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" +\n+                            \"left join facilities on facilities.id = tasks.facility_id where tasks.id = ?\",\n+                    TASK_ROWMAPPER, id);\n+        } catch (EmptyResultDataAccessException ex) {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public List<Task> listAllTasks() {\n+        // jdbc template cannot be null\n+        return getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n+                \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" +\n+                \"left join facilities on facilities.id = tasks.facility_id\", TASK_ROWMAPPER);\n+    }\n+\n+    @Override\n+    public List<Task> listAllTasksInState(Task.TaskStatus state) {\n+        String textState = state.toString().toUpperCase();\n+        // jdbc template cannot be null\n+        return getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n+                        \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" +\n+                        \"left join facilities on facilities.id = tasks.facility_id where tasks.status = ?\",\n+                TASK_ROWMAPPER, textState);\n+    }\n+\n+    @Override\n+    public List<Task> listAllTasksNotInState(Task.TaskStatus state) {\n+        String textState = state.toString().toUpperCase();\n+        // jdbc template cannot be null\n+        return getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n+                        \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" +\n+                        \"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \",\n+                new Object[] {textState}, TASK_ROWMAPPER);\n+    }\n+\n+    @Override\n+    public void updateTask(Task task) {\n+        String scheduled = null;\n+        if (task.getSchedule() != null) {\n+            scheduled = task.getSchedule().format(getDateTimeFormatter());\n+        }\n+        String endTime = null;\n+        if (task.getEndTime() != null) {\n+            endTime = task.getEndTime().format(getDateTimeFormatter());\n+        }\n+        String startTime = null;\n+        if (task.getStartTime() != null) {\n+            startTime = task.getStartTime().format(getDateTimeFormatter());\n+        }\n+\n+        // jdbc template cannot be null\n+        getMyJdbcTemplate().update(\n+                \"update tasks set service_id = ?, facility_id = ?, schedule = \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \", recurrence = ?, delay = ?, \"\n+                        + \"status = ?, start_time = \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \", end_time = \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \" where id = ?\", task.getServiceId(),\n+                task.getFacilityId(), scheduled, task.getRecurrence(), task.getDelay(), task.getStatus().toString(), startTime, endTime, task.getId());\n+    }\n+\n+    @Override\n+    public boolean isThereSuchTask(Service service, Facility facility) {\n+        //this.getJdbcTemplate().update(\"select id from services where id = ? for update\", service.getId());\n+\n+        // jdbc template cannot be null\n+        List<Integer> tasks = getMyJdbcTemplate().queryForList(\"select id from tasks where service_id = ? and facility_id = ?\",\n+                new Integer[] {service.getId(), facility.getId()}, Integer.class);\n+        if (tasks.size() == 0) {\n+            return false;\n+        } else if (tasks.size() > 1) {\n+            throw new IllegalArgumentException(\"There is a duplicate Task for constraints Service[\" + service.getId() + \"], Facility[\" + facility.getId() + \"]\");\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public void removeTask(Service service, Facility facility) {\n+        // jdbc template cannot be null\n+        getMyJdbcTemplate().update(\"delete from tasks where service_id = ? and facility_id = ?\", service.getId(), facility.getId());\n+    }\n+\n+    @Override\n+    public void removeTask(int id) {\n+        // jdbc template cannot be null\n+        getMyJdbcTemplate().update(\"delete from tasks where id = ?\", id);\n+    }\n+\n+    private int queryForInt(String sql, Object... args) {\n+        // jdbc template cannot be null\n+        Integer i = getMyJdbcTemplate().queryForObject(sql, args, Integer.class);\n+        return (i != null ? i : 0);\n+    }\n+\n+    @Override\n+    public int countTasks() {\n+        return queryForInt(\"select count(*) from tasks\");\n+    }\n \n }\n",
            "diff_size": 577
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/413/TasksManagerImpl.java\nindex d6fc67e5ce2..1afc7496667 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/413/TasksManagerImpl.java\n@@ -16,7 +16,6 @@ import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n-\n import javax.sql.DataSource;\n import java.io.ByteArrayOutputStream;\n import java.nio.charset.StandardCharsets;\n@@ -29,578 +28,472 @@ import java.util.List;\n /**\n  * TasksManagerImpl\n  */\n+\n+\n public class TasksManagerImpl implements TasksManagerImplApi {\n \n-\tprivate static final Logger log = LoggerFactory.getLogger(TasksManagerImpl.class);\n-\n-\tprivate static final int MAX_NUMBER_OF_UTF8_BYTES = 4;\n-\tprivate NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n-\n-\tprivate JdbcPerunTemplate jdbc;\n-\n-\t/**\n-\t * Create new instance of this class.\n-\t * Used for the tests only\n-\t */\n-\tpublic TasksManagerImpl() {\n-\t}\n-\n-\t/**\n-\t * Create new instance of this class.\n-\t *\n-\t */\n-\tpublic TasksManagerImpl(DataSource perunPool) {\n-\t\tthis.jdbc = new JdbcPerunTemplate(perunPool);\n-\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n-\t\tthis.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t\tthis.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t}\n-\n-\tpublic final static String taskResultMappingSelectQuery = \" tasks_results.id as tasks_results_id, tasks_results.task_id as tasks_results_task_id,\" +\n-\t\t\" tasks_results.destination_id as tasks_results_destination_id, tasks_results.status as tasks_results_status, tasks_results.err_message as tasks_results_err_message,\" +\n-\t\t\" tasks_results.std_message as tasks_results_std_message, tasks_results.return_code as tasks_results_return_code, tasks_results.timestamp as tasks_results_timestamp \";\n-\n-\tpublic static final RowMapper<TaskResult> TASKRESULT_ROWMAPPER = (resultSet, i) -> {\n-\n-\t\tTaskResult taskResult = new TaskResult();\n-\n-\t\ttaskResult.setId(resultSet.getInt(\"tasks_results_id\"));\n-\t\ttaskResult.setDestinationId(resultSet.getInt(\"tasks_results_destination_id\"));\n-\t\ttaskResult.setErrorMessage(resultSet.getString(\"tasks_results_err_message\"));\n-\t\ttaskResult.setTaskId(resultSet.getInt(\"tasks_results_task_id\"));\n-\t\ttaskResult.setReturnCode(resultSet.getInt(\"tasks_results_return_code\"));\n-\t\ttaskResult.setStandardMessage(resultSet.getString(\"tasks_results_std_message\"));\n-\n-\t\tif (resultSet.getTimestamp(\"tasks_results_timestamp\") != null) {\n-\t\t\ttaskResult.setTimestamp(resultSet.getTimestamp(\"tasks_results_timestamp\"));\n-\t\t}\n-\n-\t\tif (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DONE.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.DONE);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.ERROR.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.ERROR);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.FATAL_ERROR.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.FATAL_ERROR);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DENIED.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.DENIED);\n-\t\t} else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.WARNING.toString())) {\n-\t\t\ttaskResult.setStatus(TaskResult.TaskResultStatus.WARNING);\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(\"Unknown TaskResult state.\");\n-\t\t}\n-\n-\t\ttaskResult.setDestination(ServicesManagerImpl.DESTINATION_MAPPER.mapRow(resultSet, i));\n-\t\ttaskResult.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n-\n-\t\treturn taskResult;\n-\t};\n-\n-\tpublic synchronized NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n-\t\tif (this.namedParameterJdbcTemplate == null && jdbc.getDataSource() != null) {\n-\t\t\tthis.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbc.getDataSource());\n-\t\t}\n-\t\tthis.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t\treturn this.namedParameterJdbcTemplate;\n-\t}\n-\n-\t@Override\n-\tpublic int insertNewTaskResult(TaskResult taskResult) {\n-\t\tint newTaskResultId = Utils.getNewId(jdbc, \"tasks_results_id_seq\");\n-\n-\t\t// There was probably an issue with too long a String for VARCHAR2 datatype http://goo.gl/caVxp.\n-\t\t// Solution might be to shorten the message according to VARCHAR2: http://goo.gl/WrlYm\n-\t\tbyte[] standardMessage = null;\n-\t\tbyte[] errorMessage = null;\n-\t\tif(taskResult.getStandardMessage() != null) standardMessage = taskResult.getStandardMessage().getBytes(StandardCharsets.UTF_8);\n-\t\tif(taskResult.getErrorMessage()    != null) errorMessage    = taskResult.getErrorMessage().getBytes(StandardCharsets.UTF_8);\n-\n-\t\t// CLEAR UTF-8 0x00 bytes, since PostgreSQL can't store them to varchar column (Oracle can).\n-\t\t// By java, such byte is displayed as 'empty string' and is not visible in a log.\n-\t\tstandardMessage = clearZeroBytesFromString(standardMessage, 4000);\n-\t\terrorMessage = clearZeroBytesFromString(errorMessage, 4000);\n-\n-\t\t// jdbc template cannot be null\n-\t\tjdbc.update(\n-\t\t\t\t\"insert into tasks_results(\" +\n-\t\t\t\t\t\"id, \" +\n-\t\t\t\t\t\"task_id, \" +\n-\t\t\t\t\t\"destination_id, \" +\n-\t\t\t\t\t\"status, \" +\n-\t\t\t\t\t\"err_message, \" +\n-\t\t\t\t\t\"std_message, \" +\n-\t\t\t\t\t\"return_code, \" +\n-\t\t\t\t\t\"timestamp) values (?,?,?,?,?,?,?,\" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \")\",\n-\t\t\t\tnewTaskResultId,\n-\t\t\t\ttaskResult.getTaskId(),\n-\t\t\t\ttaskResult.getDestinationId(),\n-\t\t\t\ttaskResult.getStatus().toString(),\n-\t\t\t\terrorMessage == null ? null : new String(errorMessage, StandardCharsets.UTF_8),\n-\t\t\t\tstandardMessage == null ? null : new String(standardMessage, StandardCharsets.UTF_8),\n-\t\t\t\ttaskResult.getReturnCode(),\n-\t\t\t\tgetDateFormatter().format(taskResult.getTimestamp()));\n-\t\treturn newTaskResultId;\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResults() {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\",\n-\t\t\tTASKRESULT_ROWMAPPER);\n-\t}\n-\n-\t@Override\n-\tpublic TaskResult getTaskResultById(int taskResultId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.queryForObject(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id\" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where tasks_results.id = ?\",\n-\t\t\tTASKRESULT_ROWMAPPER, taskResultId);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteTaskResultById(int taskResultId) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from tasks_results where id = ?\", taskResultId);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteTaskResults(int taskId) {\n-\t\ttry {\n-\t\t\treturn jdbc.update(\"delete from tasks_results where task_id = ?\", taskId);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteTaskResults(int taskId, int destinationId) {\n-\t\ttry {\n-\t\t\treturn jdbc.update(\"delete from tasks_results where task_id = ? and destination_id = ?\", taskId, destinationId);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteOldTaskResults(int numDays) {\n-\t\ttry {\n-\t\t\tString compareDate = LocalDateTime.now().minusDays(numDays).format(getDateTimeFormatter());\n-\n-\t\t\treturn jdbc.update(\"delete from tasks_results where \" +\n-\t\t\t\t\t\t\t\"id in (\" +\n-\t\t\t\t\t\t\t\"select otr.id from tasks_results otr \" +\n-\t\t\t\t\t\t\t\"         left join ( \" +\n-\t\t\t\t\t\t\t\"\tselect tr.destination_id, tr.task_id, max(tr.timestamp) as maxtimestamp \" +\n-\t\t\t\t\t\t\t\"\tfrom tasks_results tr \" +\n-\t\t\t\t\t\t\t\"\t\tinner join tasks t on tr.task_id = t.id \" +\n-\t\t\t\t\t\t\t\"\t\tgroup by tr.destination_id,tr.task_id \" +\n-\t\t\t\t\t\t\t\"   )  tmp on otr.task_id = tmp.task_id and otr.destination_id = tmp.destination_id \" +\n-\t\t\t\t\t\t\t\"where otr.timestamp < maxtimestamp and otr.timestamp < \"+Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\")+\" )\",\n-\t\t\t\t\tcompareDate);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic int deleteAllTaskResults() {\n-\t\ttry {\n-\t\t\treturn jdbc.update(\"delete from tasks_results\");\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResultsByTask(int taskId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where tasks_results.task_id = ? \",\n-\t\t\tTASKRESULT_ROWMAPPER, taskId);\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results\" +\n-\t\t\t\t\" left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id\" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" inner join (\" +\n-\t\t\t\t\" SELECT destination_id, MAX(modified_at) AS modified_at_max\" +\n-\t\t\t\t\" FROM tasks_results where task_id=?\" +\n-\t\t\t\t\" GROUP BY destination_id) tr2\" +\n-\t\t\t\t\" on tasks_results.destination_id = tr2.destination_id\" +\n-\t\t\t\t\" and tasks_results.modified_at = tr2.modified_at_max\" +\n-\t\t\t\t\" inner join (\" +\n-\t\t\t\t\" SELECT destination_id, modified_at, MAX(id) AS id_max\" +\n-\t\t\t\t\" FROM tasks_results where task_id=?\" +\n-\t\t\t\t\" GROUP BY destination_id, modified_at) tr3\" +\n-\t\t\t\t\" on tasks_results.destination_id = tr3.destination_id\" +\n-\t\t\t\t\" and tasks_results.modified_at = tr3.modified_at\" +\n-\t\t\t\t\" and tasks_results.id   = tr3.id_max\" +\n-\t\t\t\t\" where tasks_results.task_id=?\",\n-\t\t\tTASKRESULT_ROWMAPPER, taskId, taskId, taskId);\n-\t}\n-\n-\t@Override\n-\tpublic List<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId) {\n-\t\t// jdbc template cannot be null\n-\t\treturn jdbc.query(\n-\t\t\t\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where tasks_results.task_id = ? AND\" +\n-\t\t\t\t\" tasks_results.destination_id=?\",\n-\t\t\tTASKRESULT_ROWMAPPER, taskId, destinationId);\n-\t}\n-\n-\tpublic List<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames) {\n-\n-\t\tMapSqlParameterSource parameters = new MapSqlParameterSource();\n-\t\tparameters.addValue(\"destinations\", destinationsNames);\n-\n-\t\ttry {\n-\t\t\treturn getNamedParameterJdbcTemplate().query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" +\n-\t\t\t\tServicesManagerImpl.serviceMappingSelectQuery +\n-\t\t\t\t\" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" +\n-\t\t\t\t\" left join tasks on tasks.id = tasks_results.task_id \" +\n-\t\t\t\t\" left join services on services.id = tasks.service_id\" +\n-\t\t\t\t\" where destinations.destination in ( :destinations )\", parameters, TASKRESULT_ROWMAPPER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Clear all Zero bytes (0x00) from UTF-8 String\n-\t *\n-\t * @param data to remove zero bytes\n-\t * @return Original string without zero bytes\n-\t */\n-\tprivate static byte[] clearZeroBytesFromString(byte[] data, int maxLength) {\n-\t\tif (data == null) return null;\n-\t\tByteArrayOutputStream dataOut = new ByteArrayOutputStream() ;\n-\t\tboolean maxLengthExceeded = maxLength < data.length;\n-\t\tint limit = maxLengthExceeded ? maxLength - MAX_NUMBER_OF_UTF8_BYTES : data.length;\n-\t\tfor (int i = 0; i < limit; i++) {\n-\t\t\tif (data[i] != 0x00)\n-\t\t\t\tdataOut.write(data[i]);\n-\t\t}\n-\t\tif(maxLengthExceeded) {\n-\t\t\t// check if we have to add some bytes in case we have split an UTF-8 character that is longer than 1 byte.\n-\t\t\tif (!isASingleByteUTF8Char(data[limit-1])) {\n-\t\t\t\tint i = 0;\n-\t\t\t\twhile (!isAStartingByteUTF8Char(data[limit + i])) {\n-\t\t\t\t\tif (i == MAX_NUMBER_OF_UTF8_BYTES) {\n-\t\t\t\t\t\tlog.error(\"The message data contains invalid UTF-8 character. The byte limit for one character was exceeded.\");\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t\tdataOut.write(data[limit + i]);\n-\t\t\t\t\ti++;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t}\n-\t\treturn dataOut.toByteArray();\n-\t}\n-\n-\t/**\n-\t * Checks if the given byte represents an initial UTF-8 character.\n-\t *\n-\t * An initial character can be in those formats:\n-\t *     110XXXXXX\n-\t *     1110XXXXX\n-\t *     11110XXXX\n-\t *     0XXXXXXXX\n-\t *\n-\t * If the given value is in range 10000000(inclusive) ... 11000000(exclusive)\n-\t * it means that the byte is part of a UTF-8 character composed of multiple bytes.\n-\t *\n-\t * The value 10000000 for byte in Java is equal to -128 and this value is minimal.\n-\t * The value 11000000 for byte in Java is equal to -64.\n-\t *\n-\t * @param b byte to check\n-\t * @return true, if the given byte is a starting byte for UTF-8 char, false otherwise.\n-\t */\n-\tprivate static boolean isAStartingByteUTF8Char(byte b) {\n-\t\treturn b >= (byte)0b11000000;\n-\t}\n-\n-\t/**\n-\t * Check if this byte represents a UTF-8 character that is represented by one byte.\n-\t *\n-\t * That means, check if the value is in range 00000000 ... 01111111.\n-\t * If the given byte starts with '1' it means its lower than 0 because bytes in Java\n-\t * are represented with inversion code.\n-\t *\n-\t * @param b byte to check\n-\t * @return true, if the given byte represents a single byte UTF-8 character, false otherwise.\n-\t */\n-\tprivate static boolean isASingleByteUTF8Char(byte b) {\n-\t\treturn b > 0;\n-\t}\n-\n-\tprivate JdbcTemplate getMyJdbcTemplate() {\n-\t\t// jdbc template cannot be null\n-\t\tjdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t\treturn jdbc;\n-\t}\n-\n-\t/**\n-\t * Method create formatter with default settings for perun timestamps and set lenient on false\n-\t * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n-\t *\n-\t * Lenient on false means that formatter will be more strict to creating timestamp from string\n-\t *\n-\t * IMPORTANT: SimpleDateFormat is not thread safe !!!\n-\t *\n-\t * @return date formatter\n-\t */\n-\tpublic static SimpleDateFormat getDateFormatter() {\n-\t\tSimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n-\t\tdf.setLenient(false);\n-\t\treturn df;\n-\t}\n-\n-\t/**\n-\t * Method create formatter with default settings for perun timestamps and set ResolverStyle to STRICT\n-\t * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n-\t *\n-\t * ResolverStyle.STRICT means that formatter will be more strict to creating timestamp from string\n-\t *\n-\t * @return date formatter\n-\t */\n-\tpublic static DateTimeFormatter getDateTimeFormatter() {\n-\t\treturn DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\").withResolverStyle(ResolverStyle.STRICT);\n-\t}\n-\n-\tpublic final static String taskMappingSelectQuery = \" tasks.id as tasks_id, tasks.schedule as tasks_schedule, tasks.recurrence as tasks_recurrence, \" +\n-\t\t\"tasks.delay as tasks_delay, tasks.status as tasks_status, tasks.start_time as tasks_start_time, tasks.end_time as tasks_end_time \";\n-\n-\tpublic static final RowMapper<Task> TASK_ROWMAPPER = (resultSet, i) -> {\n-\n-\t\tTask task = new Task();\n-\n-\t\ttask.setDelay(resultSet.getInt(\"tasks_delay\"));\n-\t\ttask.setId(resultSet.getInt(\"tasks_id\"));\n-\t\ttask.setRecurrence(resultSet.getInt(\"tasks_recurrence\"));\n-\n-\t\tif (resultSet.getTimestamp(\"tasks_start_time\") != null) {\n-\t\t\ttask.setStartTime(resultSet.getTimestamp(\"tasks_start_time\").toLocalDateTime());\n-\t\t}\n-\t\tif (resultSet.getTimestamp(\"tasks_schedule\") != null) {\n-\t\t\ttask.setSchedule(resultSet.getTimestamp(\"tasks_schedule\").toLocalDateTime());\n-\t\t}\n-\t\tif (resultSet.getTimestamp(\"tasks_end_time\") != null) {\n-\t\t\ttask.setEndTime(resultSet.getTimestamp(\"tasks_end_time\").toLocalDateTime());\n-\t\t}\n-\n-\t\tif (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WAITING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.WAITING);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.PLANNED.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.PLANNED);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDERROR.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.SENDERROR);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERROR.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.GENERROR);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.GENERATING);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATED.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.GENERATED);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.SENDING);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.DONE.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.DONE);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.ERROR.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.ERROR);\n-\t\t} else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WARNING.toString())) {\n-\t\t\ttask.setStatus(Task.TaskStatus.WARNING);\n-\t\t} else {\n-\t\t\tthrow new IllegalArgumentException(\"Task status [\" + resultSet.getString(\"tasks_status\") + \"] unknown\");\n-\t\t}\n-\n-\t\ttask.setFacility(FacilitiesManagerImpl.FACILITY_MAPPER.mapRow(resultSet, i));\n-\n-\t\ttask.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n-\n-\t\treturn task;\n-\t};\n-\n-\t@Override\n-\tpublic int insertTask(Task task) {\n-\t\tint newTaskId = 0;\n-\t\ttry {\n-\t\t\tnewTaskId = Utils.getNewId(getMyJdbcTemplate(), \"tasks_id_seq\");\n-\t\t\t// jdbc template cannot be null\n-\t\t\tgetMyJdbcTemplate().update(\n-\t\t\t\t\"insert into tasks(id, service_id, facility_id, schedule, recurrence, delay, status) values (?,?,?, \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \",?,?,?)\",\n-\t\t\t\tnewTaskId, task.getServiceId(), task.getFacilityId(), task.getSchedule().format(getDateTimeFormatter()), task.getRecurrence(), task.getDelay(), task.getStatus().toString());\n-\t\t\tlog.debug(\"Added task with ID {}\", newTaskId);\n-\t\t\treturn newTaskId;\n-\t\t} catch (DataIntegrityViolationException ex) {\n-\t\t\tlog.error(\"Data: id, service_id, facility_id, schedule, recurrence, delay, status is: \" + newTaskId + \", \" + task.getServiceId() + \", \" + task.getFacilityId() + \", \"\n-\t\t\t\t+ task.getSchedule().format(getDateTimeFormatter()) + \", \" + task.getRecurrence() + \", \" + task.getDelay() + \", \" + task.getStatus().toString() + \". Exception:\" + ex.toString(), ex);\n-\t\t} catch (Exception ex) {\n-\t\t\tlog.error(\"Failed to insert new Task.\", ex);\n-\t\t}\n-\t\treturn 0;\n-\t}\n-\n-\t@Override\n-\tpublic Task getTask(Service service, Facility facility) {\n-\t\treturn getTask(service.getId(), facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic Task getTask(int serviceId, int facilityId) {\n-\t\ttry {\n-\t\t\t// jdbc template cannot be null\n-\t\t\treturn getMyJdbcTemplate().queryForObject(\n-\t\t\t\t\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id and tasks.service_id=?\" +\n-\t\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id and tasks.facility_id = ?\",\n-\t\t\t\tTASK_ROWMAPPER, serviceId, facilityId);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasksForFacility(int facilityId) {\n-\t\ttry {\n-\t\t\t// jdbc template cannot be null\n-\t\t\treturn getMyJdbcTemplate().query(\n-\t\t\t\t\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where facilities.id = ?\",\n-\t\t\t\tTASK_ROWMAPPER, facilityId);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Task getTaskById(int id) {\n-\t\ttry {\n-\t\t\t// jdbc template cannot be null\n-\t\t\treturn getMyJdbcTemplate().queryForObject(\n-\t\t\t\t\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.id = ?\",\n-\t\t\t\tTASK_ROWMAPPER, id);\n-\t\t} catch (EmptyResultDataAccessException ex) {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasks() {\n-\t\t// jdbc template cannot be null\n-\t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\"left join facilities on facilities.id = tasks.facility_id\", TASK_ROWMAPPER);\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasksInState(Task.TaskStatus state) {\n-\t\tString textState = state.toString().toUpperCase();\n-\t\t// jdbc template cannot be null\n-\t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status = ?\",\n-\t\t\tTASK_ROWMAPPER, textState);\n-\t}\n-\n-\t@Override\n-\tpublic List<Task> listAllTasksNotInState(Task.TaskStatus state) {\n-\t\tString textState = state.toString().toUpperCase();\n-\t\t// jdbc template cannot be null\n-\t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n-\t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \",\n-\t\t\t new Object[] { textState }, TASK_ROWMAPPER);\n-\t}\n-\n-\t@Override\n-\tpublic void updateTask(Task task) {\n-\t\tString scheduled = null;\n-\t\tif (task.getSchedule() != null) {\n-\t\t\tscheduled = task.getSchedule().format(getDateTimeFormatter());\n-\t\t}\n-\t\tString endTime = null;\n-\t\tif (task.getEndTime() != null) {\n-\t\t\tendTime = task.getEndTime().format(getDateTimeFormatter());\n-\t\t}\n-\t\tString startTime = null;\n-\t\tif (task.getStartTime() != null) {\n-\t\t\tstartTime = task.getStartTime().format(getDateTimeFormatter());\n-\t\t}\n-\n-\t\t// jdbc template cannot be null\n-\t\tgetMyJdbcTemplate().update(\n-\t\t\t\"update tasks set service_id = ?, facility_id = ?, schedule = \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \", recurrence = ?, delay = ?, \"\n-\t\t\t\t+ \"status = ?, start_time = \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \", end_time = \" + Compatibility.toDate(\"?\",\"'DD-MM-YYYY HH24:MI:SS'\") + \" where id = ?\", task.getServiceId(),\n-\t\t\ttask.getFacilityId(), scheduled, task.getRecurrence(), task.getDelay(), task.getStatus().toString(), startTime, endTime, task.getId());\n-\t}\n-\n-\t@Override\n-\tpublic boolean isThereSuchTask(Service service, Facility facility) {\n-\t\t//this.getJdbcTemplate().update(\"select id from services where id = ? for update\", service.getId());\n-\n-\t\t// jdbc template cannot be null\n-\t\tList<Integer> tasks = getMyJdbcTemplate().queryForList(\"select id from tasks where service_id = ? and facility_id = ?\",\n-\t\t\tnew Integer[] { service.getId(), facility.getId() }, Integer.class);\n-\t\tif (tasks.size() == 0) {\n-\t\t\treturn false;\n-\t\t} else if (tasks.size() > 1) {\n-\t\t\tthrow new IllegalArgumentException(\"There is a duplicate Task for constraints Service[\" + service.getId() + \"], Facility[\" + facility.getId() + \"]\");\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic void removeTask(Service service, Facility facility) {\n-\t\t// jdbc template cannot be null\n-\t\tgetMyJdbcTemplate().update(\"delete from tasks where service_id = ? and facility_id = ?\", service.getId(), facility.getId());\n-\t}\n-\n-\t@Override\n-\tpublic void removeTask(int id) {\n-\t\t// jdbc template cannot be null\n-\t\tgetMyJdbcTemplate().update(\"delete from tasks where id = ?\", id);\n-\t}\n-\n-\tprivate int queryForInt(String sql, Object... args) {\n-\t\t// jdbc template cannot be null\n-\t\tInteger i = getMyJdbcTemplate().queryForObject(sql, args, Integer.class);\n-\t\treturn (i != null ? i : 0);\n-\t}\n-\n-\t@Override\n-\tpublic int countTasks() {\n-\t\treturn queryForInt(\"select count(*) from tasks\");\n-\t}\n-\n-}\n+\n+ private static final Logger log = LoggerFactory.getLogger(TasksManagerImpl.class);\n+ private static final int MAX_NUMBER_OF_UTF8_BYTES = 4;\n+ private NamedParameterJdbcTemplate namedParameterJdbcTemplate;\n+ private JdbcPerunTemplate jdbc;\n+\n+ /**\n+  * Create new instance of this class.\n+  * Used for the tests only\n+  */\n+\n+\n+ public TasksManagerImpl() {}\n+\n+ /**\n+  * Create new instance of this class.\n+  *\n+  */\n+\n+\n+ public TasksManagerImpl(DataSource perunPool) {\n+  this.jdbc = new JdbcPerunTemplate(perunPool);\n+  this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(perunPool);\n+  this.jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+  this.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+ }\n+\n+ public final static String taskResultMappingSelectQuery = \" tasks_results.id as tasks_results_id, tasks_results.task_id as tasks_results_task_id,\" + \" tasks_results.destination_id as tasks_results_destination_id, tasks_results.status as tasks_results_status, tasks_results.err_message as tasks_results_err_message,\" + \" tasks_results.std_message as tasks_results_std_message, tasks_results.return_code as tasks_results_return_code, tasks_results.timestamp as tasks_results_timestamp \";\n+\n+ public static final RowMapper<TaskResult> TASKRESULT_ROWMAPPER = (resultSet,i)-> {\n+                                                                   TaskResult taskResult = new TaskResult();\n+                                                                   taskResult.setId(resultSet.getInt(\"tasks_results_id\"));\n+                                                                   taskResult.setDestinationId(resultSet.getInt(\"tasks_results_destination_id\"));\n+                                                                   taskResult.setErrorMessage(resultSet.getString(\"tasks_results_err_message\"));\n+                                                                   taskResult.setTaskId(resultSet.getInt(\"tasks_results_task_id\"));\n+                                                                   taskResult.setReturnCode(resultSet.getInt(\"tasks_results_return_code\"));\n+                                                                   taskResult.setStandardMessage(resultSet.getString(\"tasks_results_std_message\"));\n+                                                                   if (resultSet.getTimestamp(\"tasks_results_timestamp\") != null) {\n+                                                                    taskResult.setTimestamp(resultSet.getTimestamp(\"tasks_results_timestamp\"));\n+                                                                   }\n+                                                                   if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DONE.toString())) {\n+                                                                    taskResult.setStatus(TaskResult.TaskResultStatus.DONE);\n+                                                                   } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.ERROR.toString())) {\n+                                                                    taskResult.setStatus(TaskResult.TaskResultStatus.ERROR);\n+                                                                   } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.FATAL_ERROR.toString())) {\n+                                                                           taskResult.setStatus(TaskResult.TaskResultStatus.FATAL_ERROR);\n+                                                                          } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.DENIED.toString())) {\n+                                                                           taskResult.setStatus(TaskResult.TaskResultStatus.DENIED);\n+                                                                          } else if (resultSet.getString(\"tasks_results_status\").equalsIgnoreCase(TaskResult.TaskResultStatus.WARNING.toString())) {\n+                                                                                  taskResult.setStatus(TaskResult.TaskResultStatus.WARNING);\n+                                                                                 } else {\n+                                                                                  throw new IllegalArgumentException(\"Unknown TaskResult state.\");\n+                                                                                 }\n+                                                                   taskResult.setDestination(ServicesManagerImpl.DESTINATION_MAPPER.mapRow(resultSet, i));\n+                                                                   taskResult.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n+                                                                   return taskResult;\n+                                                                  };\n+\n+ public synchronized NamedParameterJdbcTemplate getNamedParameterJdbcTemplate() {\n+  if (this.namedParameterJdbcTemplate == null && jdbc.getDataSource() != null) {\n+   this.namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbc.getDataSource());\n+  }\n+\n+  this.namedParameterJdbcTemplate.getJdbcTemplate().setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+  return this.namedParameterJdbcTemplate;\n+ }\n+\n+ @Override\n+ public int insertNewTaskResult(TaskResult taskResult) {\n+  int newTaskResultId = Utils.getNewId(jdbc, \"tasks_results_id_seq\");\n+\n+  // There was probably an issue with too long a String for VARCHAR2 datatype http://goo.gl/caVxp.\n+  // Solution might be to shorten the message according to VARCHAR2: http://goo.gl/WrlYm\n+  byte[] standardMessage = null;\n+  byte[] errorMessage = null;\n+  if (taskResult.getStandardMessage() != null) standardMessage = taskResult.getStandardMessage().getBytes(StandardCharsets.UTF_8);\n+  if (taskResult.getErrorMessage() != null) errorMessage = taskResult.getErrorMessage().getBytes(StandardCharsets.UTF_8);\n+\n+  // CLEAR UTF-8 0x00 bytes, since PostgreSQL can't store them to varchar column (Oracle can).\n+  // By java, such byte is displayed as 'empty string' and is not visible in a log.\n+  standardMessage = clearZeroBytesFromString(standardMessage, 4000);\n+  errorMessage = clearZeroBytesFromString(errorMessage, 4000);\n+\n+  // jdbc template cannot be null\n+  jdbc.update(\"insert into tasks_results(\" + \"id, \" + \"task_id, \" + \"destination_id, \" + \"status, \" + \"err_message, \" + \"std_message, \" + \"return_code, \" + \"timestamp) values (?,?,?,?,?,?,?,\" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \")\", newTaskResultId, taskResult.getTaskId(), taskResult.getDestinationId(), taskResult.getStatus().toString(), errorMessage == null ? null : new String(errorMessage, StandardCharsets.UTF_8), standardMessage == null ? null : new String(standardMessage, StandardCharsets.UTF_8), taskResult.getReturnCode(), getDateFormatter().format(taskResult.getTimestamp()));\n+  return newTaskResultId;\n+ }\n+\n+ @Override\n+ public List<TaskResult> getTaskResults() {\n+  // jdbc template cannot be null\n+  return jdbc.query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" + \" left join tasks on tasks.id = tasks_results.task_id \" + \" left join services on services.id = tasks.service_id\", TASKRESULT_ROWMAPPER);\n+ }\n+\n+ @Override\n+ public TaskResult getTaskResultById(int taskResultId) {\n+  // jdbc template cannot be null\n+  return jdbc.queryForObject(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id \" + \" left join tasks on tasks.id = tasks_results.task_id\" + \" left join services on services.id = tasks.service_id\" + \" where tasks_results.id = ?\", TASKRESULT_ROWMAPPER, taskResultId);\n+ }\n+\n+ @Override\n+ public void deleteTaskResultById(int taskResultId) {\n+  try {\n+   jdbc.update(\"delete from tasks_results where id = ?\", taskResultId);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public int deleteTaskResults(int taskId) {\n+  try {\n+   return jdbc.update(\"delete from tasks_results where task_id = ?\", taskId);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public int deleteTaskResults(int taskId, int destinationId) {\n+  try {\n+   return jdbc.update(\"delete from tasks_results where task_id = ? and destination_id = ?\", taskId, destinationId);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public int deleteOldTaskResults(int numDays) {\n+  try {\n+   String compareDate = LocalDateTime.now().minusDays(numDays).format(getDateTimeFormatter());\n+   return jdbc.update(\"delete from tasks_results where \" + \"id in (\" + \"select otr.id from tasks_results otr \" + \"         left join ( \" + \" select tr.destination_id, tr.task_id, max(tr.timestamp) as maxtimestamp \" + \" from tasks_results tr \" + \"  inner join tasks t on tr.task_id = t.id \" + \"  group by tr.destination_id,tr.task_id \" + \"   )  tmp on otr.task_id = tmp.task_id and otr.destination_id = tmp.destination_id \" + \"where otr.timestamp < maxtimestamp and otr.timestamp < \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \" )\", compareDate);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public int deleteAllTaskResults() {\n+  try {\n+   return jdbc.update(\"delete from tasks_results\");\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public List<TaskResult> getTaskResultsByTask(int taskId) {\n+  // jdbc template cannot be null\n+  return jdbc.query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" + \" left join tasks on tasks.id = tasks_results.task_id \" + \" left join services on services.id = tasks.service_id\" + \" where tasks_results.task_id = ? \", TASKRESULT_ROWMAPPER, taskId);\n+ }\n+\n+ @Override\n+ public List<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId) {\n+  // jdbc template cannot be null\n+  return jdbc.query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks_results\" + \" left join destinations on tasks_results.destination_id = destinations.id\" + \" left join tasks on tasks.id = tasks_results.task_id\" + \" left join services on services.id = tasks.service_id\" + \" inner join (\" + \" SELECT destination_id, MAX(modified_at) AS modified_at_max\" + \" FROM tasks_results where task_id=?\" + \" GROUP BY destination_id) tr2\" + \" on tasks_results.destination_id = tr2.destination_id\" + \" and tasks_results.modified_at = tr2.modified_at_max\" + \" inner join (\" + \" SELECT destination_id, modified_at, MAX(id) AS id_max\" + \" FROM tasks_results where task_id=?\" + \" GROUP BY destination_id, modified_at) tr3\" + \" on tasks_results.destination_id = tr3.destination_id\" + \" and tasks_results.modified_at = tr3.modified_at\" + \" and tasks_results.id   = tr3.id_max\" + \" where tasks_results.task_id=?\", TASKRESULT_ROWMAPPER, taskId, taskId, taskId);\n+ }\n+\n+ @Override\n+ public List<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId) {\n+  // jdbc template cannot be null\n+  return jdbc.query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" + \" left join tasks on tasks.id = tasks_results.task_id \" + \" left join services on services.id = tasks.service_id\" + \" where tasks_results.task_id = ? AND\" + \" tasks_results.destination_id=?\", TASKRESULT_ROWMAPPER, taskId, destinationId);\n+ }\n+\n+ public List<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames) {\n+  MapSqlParameterSource parameters = new MapSqlParameterSource();\n+  parameters.addValue(\"destinations\", destinationsNames);\n+\n+  try {\n+   return getNamedParameterJdbcTemplate().query(\"select \" + taskResultMappingSelectQuery + \", \" + ServicesManagerImpl.destinationMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks_results left join destinations on tasks_results.destination_id = destinations.id\" + \" left join tasks on tasks.id = tasks_results.task_id \" + \" left join services on services.id = tasks.service_id\" + \" where destinations.destination in ( :destinations )\", parameters, TASKRESULT_ROWMAPPER);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ /**\n+  * Clear all Zero bytes (0x00) from UTF-8 String\n+  *\n+  * @param data to remove zero bytes\n+  * @return Original string without zero bytes\n+  */\n+\n+\n+ private static byte[] clearZeroBytesFromString(byte[] data, int maxLength) {\n+  if (data == null)\n+   return null;\n+  ByteArrayOutputStream dataOut = new ByteArrayOutputStream();\n+  boolean maxLengthExceeded = maxLength<data.length;\n+  int limit = maxLengthExceeded ? maxLength - MAX_NUMBER_OF_UTF8_BYTES : data.length;\n+  for (int i = 0; i<limit; i++) {\n+   if (data[i] != 0x00) dataOut.write(data[i]);\n+  }\n+  if (maxLengthExceeded) {\n+   // check if we have to add some bytes in case we have split an UTF-8 character that is longer than 1 byte.\n+   if (!isASingleByteUTF8Char(data[limit -1])) {\n+    int i = 0;\n+    while (!isAStartingByteUTF8Char(data[limit + i])) {\n+     if (i == MAX_NUMBER_OF_UTF8_BYTES) {\n+      log.error(\"The message data contains invalid UTF-8 character. The byte limit for one character was exceeded.\");\n+      break;\n+     }\n+     dataOut.write(data[limit + i]);\n+     i++;\n+    }\n+   }\n+  }\n+\n+  return dataOut.toByteArray();\n+ }\n+\n+ /**\n+  * Checks if the given byte represents an initial UTF-8 character.\n+  *\n+  * An initial character can be in those formats:\n+  *     110XXXXXX\n+  *     1110XXXXX\n+  *     11110XXXX\n+  *     0XXXXXXXX\n+  *\n+  * If the given value is in range 10000000(inclusive) ... 11000000(exclusive)\n+  * it means that the byte is part of a UTF-8 character composed of multiple bytes.\n+  *\n+  * The value 10000000 for byte in Java is equal to -128 and this value is minimal.\n+  * The value 11000000 for byte in Java is equal to -64.\n+  *\n+  * @param b byte to check\n+  * @return true, if the given byte is a starting byte for UTF-8 char, false otherwise.\n+  */\n+\n+\n+ private static boolean isAStartingByteUTF8Char(byte b) {\n+  return b >= (byte)0b11000000;\n+ }\n+\n+ /**\n+  * Check if this byte represents a UTF-8 character that is represented by one byte.\n+  *\n+  * That means, check if the value is in range 00000000 ... 01111111.\n+  * If the given byte starts with '1' it means its lower than 0 because bytes in Java\n+  * are represented with inversion code.\n+  *\n+  * @param b byte to check\n+  * @return true, if the given byte represents a single byte UTF-8 character, false otherwise.\n+  */\n+\n+\n+ private static boolean isASingleByteUTF8Char(byte b) {\n+  return b > 0;\n+ }\n+\n+\n+ private JdbcTemplate getMyJdbcTemplate() {\n+  // jdbc template cannot be null\n+  jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+  return jdbc;\n+ }\n+\n+ /**\n+  * Method create formatter with default settings for perun timestamps and set lenient on false\n+  * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n+  *\n+  * Lenient on false means that formatter will be more strict to creating timestamp from string\n+  *\n+  * IMPORTANT: SimpleDateFormat is not thread safe !!!\n+  *\n+  * @return date formatter\n+  */\n+\n+ public static SimpleDateFormat getDateFormatter() {\n+  SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss\");\n+  df.setLenient(false);\n+  return df;\n+ }\n+\n+ /**\n+  * Method create formatter with default settings for perun timestamps and set ResolverStyle to STRICT\n+  * Timestamp format:  \"dd-MM-yyyy HH:mm:ss\" - \"ex. 01-01-2014 10:10:10\"\n+  *\n+  * ResolverStyle.STRICT means that formatter will be more strict to creating timestamp from string\n+  *\n+  * @return date formatter\n+  */\n+\n+ public static DateTimeFormatter getDateTimeFormatter() {\n+  return DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\").withResolverStyle(ResolverStyle.STRICT);\n+ }\n+\n+ public final static String taskMappingSelectQuery = \" tasks.id as tasks_id, tasks.schedule as tasks_schedule, tasks.recurrence as tasks_recurrence, \" + \"tasks.delay as tasks_delay, tasks.status as tasks_status, tasks.start_time as tasks_start_time, tasks.end_time as tasks_end_time \";\n+\n+ public static final RowMapper<Task> TASK_ROWMAPPER = (resultSet,i)-> {\n+                                                       Task task = new Task();\n+                                                       task.setDelay(resultSet.getInt(\"tasks_delay\"));\n+                                                       task.setId(resultSet.getInt(\"tasks_id\"));\n+                                                       task.setRecurrence(resultSet.getInt(\"tasks_recurrence\"));\n+                                                       if (resultSet.getTimestamp(\"tasks_start_time\") != null) {\n+                                                        task.setStartTime(resultSet.getTimestamp(\"tasks_start_time\").toLocalDateTime());\n+                                                       }\n+                                                       if (resultSet.getTimestamp(\"tasks_schedule\") != null) {\n+                                                        task.setSchedule(resultSet.getTimestamp(\"tasks_schedule\").toLocalDateTime());\n+                                                       }\n+                                                       if (resultSet.getTimestamp(\"tasks_end_time\") != null) {\n+                                                        task.setEndTime(resultSet.getTimestamp(\"tasks_end_time\").toLocalDateTime());\n+                                                       }\n+                                                       if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WAITING.toString())) {\n+                                                        task.setStatus(Task.TaskStatus.WAITING);\n+                                                       } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.PLANNED.toString())) {\n+                                                        task.setStatus(Task.TaskStatus.PLANNED);\n+                                                       } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDERROR.toString())) {\n+                                                               task.setStatus(Task.TaskStatus.SENDERROR);\n+                                                              } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERROR.toString())) {\n+                                                               task.setStatus(Task.TaskStatus.GENERROR);\n+                                                              } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATING.toString())) {\n+                                                                      task.setStatus(Task.TaskStatus.GENERATING);\n+                                                                     } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.GENERATED.toString())) {\n+                                                                      task.setStatus(Task.TaskStatus.GENERATED);\n+                                                                     } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.SENDING.toString())) {\n+                                                                             task.setStatus(Task.TaskStatus.SENDING);\n+                                                                            } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.DONE.toString())) {\n+                                                                             task.setStatus(Task.TaskStatus.DONE);\n+                                                                            } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.ERROR.toString())) {\n+                                                                                    task.setStatus(Task.TaskStatus.ERROR);\n+                                                                                   } else if (resultSet.getString(\"tasks_status\").equalsIgnoreCase(Task.TaskStatus.WARNING.toString())) {\n+                                                                                    task.setStatus(Task.TaskStatus.WARNING);\n+                                                                                   } else {\n+                                                                                    throw new IllegalArgumentException(\"Task status [\" + resultSet.getString(\"tasks_status\") + \"] unknown\");\n+                                                                                   }\n+                                                       task.setFacility(FacilitiesManagerImpl.FACILITY_MAPPER.mapRow(resultSet, i));\n+                                                       task.setService(ServicesManagerImpl.SERVICE_MAPPER.mapRow(resultSet, i));\n+                                                       return task;\n+                                                      };\n+\n+ @Override\n+ public int insertTask(Task task) {\n+  int newTaskId = 0;\n+  try {\n+   newTaskId = Utils.getNewId(getMyJdbcTemplate(), \"tasks_id_seq\");\n+   // jdbc template cannot be null\n+   getMyJdbcTemplate().update(\"insert into tasks(id, service_id, facility_id, schedule, recurrence, delay, status) values (?,?,?, \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \",?,?,?)\", newTaskId, task.getServiceId(), task.getFacilityId(), task.getSchedule().format(getDateTimeFormatter()), task.getRecurrence(), task.getDelay(), task.getStatus().toString());\n+   log.debug(\"Added task with ID {}\", newTaskId);\n+   return newTaskId;\n+  } catch (DataIntegrityViolationException ex) {\n+   log.error(\"Data: id, service_id, facility_id, schedule, recurrence, delay, status is: \" + newTaskId + \", \" + task.getServiceId() + \", \" + task.getFacilityId() + \", \" + task.getSchedule().format(getDateTimeFormatter()) + \", \" + task.getRecurrence() + \", \" + task.getDelay() + \", \" + task.getStatus().toString() + \". Exception:\" + ex.toString(), ex);\n+  } catch (Exception ex) {\n+   log.error(\"Failed to insert new Task.\", ex);\n+  }\n+\n+  return 0;\n+ }\n+\n+ @Override\n+ public Task getTask(Service service, Facility facility) {\n+  return getTask(service.getId(), facility.getId());\n+ }\n+\n+ @Override\n+ public Task getTask(int serviceId, int facilityId) {\n+  try {\n+   // jdbc template cannot be null\n+   return getMyJdbcTemplate().queryForObject(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id and tasks.service_id=?\" + \"left join facilities on facilities.id = tasks.facility_id and tasks.facility_id = ?\", TASK_ROWMAPPER, serviceId, facilityId);\n+  } catch (EmptyResultDataAccessException ex) {\n+   return null;\n+  }\n+ }\n+\n+ @Override\n+ public List<Task> listAllTasksForFacility(int facilityId) {\n+  try {\n+   // jdbc template cannot be null\n+   return getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" + \"left join facilities on facilities.id = tasks.facility_id where facilities.id = ?\", TASK_ROWMAPPER, facilityId);\n+  } catch (EmptyResultDataAccessException ex) {\n+   return null;\n+  }\n+ }\n+\n+ @Override\n+ public Task getTaskById(int id) {\n+  try {\n+   // jdbc template cannot be null\n+   return getMyJdbcTemplate().queryForObject(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" + \"left join facilities on facilities.id = tasks.facility_id where tasks.id = ?\", TASK_ROWMAPPER, id);\n+  } catch (EmptyResultDataAccessException ex) {\n+   return null;\n+  }\n+ }\n+\n+ @Override\n+ public List<Task> listAllTasks() {\n+  // jdbc template cannot be null\n+  return getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" + \"left join facilities on facilities.id = tasks.facility_id\", TASK_ROWMAPPER);\n+ }\n+\n+ @Override\n+ public List<Task> listAllTasksInState(Task.TaskStatus state) {\n+  String textState = state.toString().toUpperCase();\n+  // jdbc template cannot be null\n+  return getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" + \"left join facilities on facilities.id = tasks.facility_id where tasks.status = ?\", TASK_ROWMAPPER, textState);\n+ }\n+\n+ @Override\n+ public List<Task> listAllTasksNotInState(Task.TaskStatus state) {\n+  String textState = state.toString().toUpperCase();\n+  // jdbc template cannot be null\n+  return getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery + \", \" + ServicesManagerImpl.serviceMappingSelectQuery + \" from tasks left join services on tasks.service_id = services.id \" + \"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \", new Object[] {textState}, TASK_ROWMAPPER);\n+ }\n+\n+ @Override\n+ public void updateTask(Task task) {\n+  String scheduled = null;\n+  if (task.getSchedule() != null) {\n+   scheduled = task.getSchedule().format(getDateTimeFormatter());\n+  }\n+  String endTime = null;\n+  if (task.getEndTime() != null) {\n+   endTime = task.getEndTime().format(getDateTimeFormatter());\n+  }\n+  String startTime = null;\n+  if (task.getStartTime() != null) {\n+   startTime = task.getStartTime().format(getDateTimeFormatter());\n+  }\n+\n+  // jdbc template cannot be null\n+  getMyJdbcTemplate().update(\"update tasks set service_id = ?, facility_id = ?, schedule = \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \", recurrence = ?, delay = ?, \" + \"status = ?, start_time = \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \", end_time = \" + Compatibility.toDate(\"?\", \"'DD-MM-YYYY HH24:MI:SS'\") + \" where id = ?\", task.getServiceId(), task.getFacilityId(), scheduled, task.getRecurrence(), task.getDelay(), task.getStatus().toString(), startTime, endTime, task.getId());\n+ }\n+\n+ @Override\n+ public boolean isThereSuchTask(Service service, Facility facility) {\n+  //this.getJdbcTemplate().update(\"select id from services where id = ? for update\", service.getId());\n+\n+  // jdbc template cannot be null\n+  List<Integer> tasks = getMyJdbcTemplate().queryForList(\"select id from tasks where service_id = ? and facility_id = ?\",\n+new Integer[] {service.getId(), facility.getId()},\n+Integer.class);\n+  if (tasks.size() == 0) {\n+   return false;\n+  } else if (tasks.size() > 1) {\n+   throw new IllegalArgumentException(\"There is a duplicate Task for constraints Service[\" + service.getId() + \"], Facility[\" + facility.getId() + \"]\");\n+  }\n+\n+  return true;\n+ }\n+\n+ @Override\n+ public void removeTask(Service service, Facility facility) {\n+  // jdbc template cannot be null\n+  getMyJdbcTemplate().update(\"delete from tasks where service_id = ? and facility_id = ?\", service.getId(), facility.getId());\n+ }\n+\n+ @Override\n+ public void removeTask(int id) {\n+  // jdbc template cannot be null\n+  getMyJdbcTemplate().update(\"delete from tasks where id = ?\", id);\n+ }\n+\n+\n+ private int queryForInt(String sql, Object... args) {\n+  // jdbc template cannot be null\n+  Integer i = getMyJdbcTemplate().queryForObject(sql, args, Integer.class);\n+  return (i != null ? i : 0);\n+ }\n+\n+ @Override\n+ public int countTasks() {\n+  return queryForInt(\"select count(*) from tasks\");\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 576
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/413/TasksManagerImpl.java\nindex d6fc67e5ce2..7a0229cf54d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/413/TasksManagerImpl.java\n@@ -539,8 +539,7 @@ public class TasksManagerImpl implements TasksManagerImplApi {\n \t\t// jdbc template cannot be null\n \t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n \t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n-\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \",\n-\t\t\t new Object[] { textState }, TASK_ROWMAPPER);\n+\t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \", new Object[] { textState }, TASK_ROWMAPPER);\n \t}\n \n \t@Override\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/413/TasksManagerImpl.java\nindex d6fc67e5ce2..53c61165494 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/413/TasksManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/413/TasksManagerImpl.java\n@@ -540,7 +540,7 @@ public class TasksManagerImpl implements TasksManagerImplApi {\n \t\treturn getMyJdbcTemplate().query(\"select \" + taskMappingSelectQuery + \", \" + FacilitiesManagerImpl.facilityMappingSelectQuery +\n \t\t\t\t\", \" + ServicesManagerImpl.serviceMappingSelectQuery  + \" from tasks left join services on tasks.service_id = services.id \" +\n \t\t\t\t\"left join facilities on facilities.id = tasks.facility_id where tasks.status != ? \",\n-\t\t\t new Object[] { textState }, TASK_ROWMAPPER);\n+\t\t\t\tnew Object[] { textState }, TASK_ROWMAPPER);\n \t}\n \n \t@Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}