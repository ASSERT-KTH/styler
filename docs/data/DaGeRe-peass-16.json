{
    "project_name": "DaGeRe-peass",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "19",
                "column": "84",
                "severity": "error",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n   private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) &&\n            currentPredecessor.getChildren().size() == current.getChildren().size()) {\n         nonDifferingVersion.add(current);\n         nonDifferingPredecessor.add(currentPredecessor);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/16/CompleteTreeAnalyzer.java\nindex f1b75aa8ac0..91a6091c206 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/16/CompleteTreeAnalyzer.java\n@@ -16,8 +16,7 @@ public class CompleteTreeAnalyzer {\n    }\n \n    private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n-      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) &&\n-            currentPredecessor.getChildren().size() == current.getChildren().size()) {\n+      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) && currentPredecessor.getChildren().size() == current.getChildren().size()) {\n          nonDifferingVersion.add(current);\n          nonDifferingPredecessor.add(currentPredecessor);\n          currentPredecessor.setOtherVersionNode(current);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "19",
                    "column": "82",
                    "severity": "error",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/16/CompleteTreeAnalyzer.java\nindex f1b75aa8ac0..dce745e10ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/16/CompleteTreeAnalyzer.java\n@@ -7,48 +7,48 @@ import java.util.List;\n import de.peass.measurement.rca.data.CallTreeNode;\n \n public class CompleteTreeAnalyzer {\n-   private final List<CallTreeNode> treeStructureDiffering = new LinkedList<>();\n-   private final List<CallTreeNode> nonDifferingVersion = new LinkedList<>();\n-   private final List<CallTreeNode> nonDifferingPredecessor = new LinkedList<>();\n-\n-   public CompleteTreeAnalyzer(final CallTreeNode root, final CallTreeNode rootPredecessor) {\n-      getAllNodes(root, rootPredecessor);\n-   }\n-\n-   private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n-      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) &&\n-            currentPredecessor.getChildren().size() == current.getChildren().size()) {\n-         nonDifferingVersion.add(current);\n-         nonDifferingPredecessor.add(currentPredecessor);\n-         currentPredecessor.setOtherVersionNode(current);\n-         current.setOtherVersionNode(currentPredecessor);\n-         compareEqualChilds(current, currentPredecessor);\n-      } else {\n-         treeStructureDiffering.add(currentPredecessor);\n-      }\n-   }\n-\n-   private void compareEqualChilds(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n-      final Iterator<CallTreeNode> predecessorIterator = currentPredecessor.getChildren().iterator();\n-      final Iterator<CallTreeNode> currentIterator = current.getChildren().iterator();\n-      boolean oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n-      while (oneHasNext) {\n-         final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n-         final CallTreeNode currentVersionNode = currentIterator.next();\n-         getAllNodes(currentVersionNode, currentPredecessorNode);\n-         oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n-      }\n-   }\n-\n-   public List<CallTreeNode> getTreeStructureDiffering() {\n-      return treeStructureDiffering;\n-   }\n-\n-   public List<CallTreeNode> getNonDifferingPredecessor() {\n-      return nonDifferingPredecessor;\n-   }\n-\n-   public List<CallTreeNode> getNonDifferingVersion() {\n-      return nonDifferingVersion;\n-   }\n+  private final List<CallTreeNode> treeStructureDiffering = new LinkedList<>();\n+  private final List<CallTreeNode> nonDifferingVersion = new LinkedList<>();\n+  private final List<CallTreeNode> nonDifferingPredecessor = new LinkedList<>();\n+\n+  public CompleteTreeAnalyzer(final CallTreeNode root, final CallTreeNode rootPredecessor) {\n+    getAllNodes(root, rootPredecessor);\n+  }\n+\n+  private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n+    if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) &&\n+        currentPredecessor.getChildren().size() == current.getChildren().size()) {\n+      nonDifferingVersion.add(current);\n+      nonDifferingPredecessor.add(currentPredecessor);\n+      currentPredecessor.setOtherVersionNode(current);\n+      current.setOtherVersionNode(currentPredecessor);\n+      compareEqualChilds(current, currentPredecessor);\n+    } else {\n+      treeStructureDiffering.add(currentPredecessor);\n+    }\n+  }\n+\n+  private void compareEqualChilds(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n+    final Iterator<CallTreeNode> predecessorIterator = currentPredecessor.getChildren().iterator();\n+    final Iterator<CallTreeNode> currentIterator = current.getChildren().iterator();\n+    boolean oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n+    while (oneHasNext) {\n+      final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n+      final CallTreeNode currentVersionNode = currentIterator.next();\n+      getAllNodes(currentVersionNode, currentPredecessorNode);\n+      oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n+    }\n+  }\n+\n+  public List<CallTreeNode> getTreeStructureDiffering() {\n+    return treeStructureDiffering;\n+  }\n+\n+  public List<CallTreeNode> getNonDifferingPredecessor() {\n+    return nonDifferingPredecessor;\n+  }\n+\n+  public List<CallTreeNode> getNonDifferingVersion() {\n+    return nonDifferingVersion;\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/16/CompleteTreeAnalyzer.java\nindex f1b75aa8ac0..a8787a92d5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/16/CompleteTreeAnalyzer.java\n@@ -3,52 +3,52 @@ package de.peass.measurement.rca;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n-\n import de.peass.measurement.rca.data.CallTreeNode;\n \n+\n public class CompleteTreeAnalyzer {\n-   private final List<CallTreeNode> treeStructureDiffering = new LinkedList<>();\n-   private final List<CallTreeNode> nonDifferingVersion = new LinkedList<>();\n-   private final List<CallTreeNode> nonDifferingPredecessor = new LinkedList<>();\n-\n-   public CompleteTreeAnalyzer(final CallTreeNode root, final CallTreeNode rootPredecessor) {\n-      getAllNodes(root, rootPredecessor);\n-   }\n-\n-   private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n-      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) &&\n-            currentPredecessor.getChildren().size() == current.getChildren().size()) {\n-         nonDifferingVersion.add(current);\n-         nonDifferingPredecessor.add(currentPredecessor);\n-         currentPredecessor.setOtherVersionNode(current);\n-         current.setOtherVersionNode(currentPredecessor);\n-         compareEqualChilds(current, currentPredecessor);\n-      } else {\n-         treeStructureDiffering.add(currentPredecessor);\n-      }\n-   }\n-\n-   private void compareEqualChilds(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n-      final Iterator<CallTreeNode> predecessorIterator = currentPredecessor.getChildren().iterator();\n-      final Iterator<CallTreeNode> currentIterator = current.getChildren().iterator();\n-      boolean oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n-      while (oneHasNext) {\n-         final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n-         final CallTreeNode currentVersionNode = currentIterator.next();\n-         getAllNodes(currentVersionNode, currentPredecessorNode);\n-         oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n-      }\n-   }\n-\n-   public List<CallTreeNode> getTreeStructureDiffering() {\n-      return treeStructureDiffering;\n-   }\n-\n-   public List<CallTreeNode> getNonDifferingPredecessor() {\n-      return nonDifferingPredecessor;\n-   }\n-\n-   public List<CallTreeNode> getNonDifferingVersion() {\n-      return nonDifferingVersion;\n-   }\n+ private final List<CallTreeNode> treeStructureDiffering = new LinkedList<>();\n+ private final List<CallTreeNode> nonDifferingVersion = new LinkedList<>();\n+ private final List<CallTreeNode> nonDifferingPredecessor = new LinkedList<>();\n+\n+ public CompleteTreeAnalyzer(final CallTreeNode root, final CallTreeNode rootPredecessor) {\n+  getAllNodes(root, rootPredecessor);\n+ }\n+\n+ private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n+  if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) && currentPredecessor.getChildren().size() == current.getChildren().size()) {\n+   nonDifferingVersion.add(current);\n+   nonDifferingPredecessor.add(currentPredecessor);\n+   currentPredecessor.setOtherVersionNode(current);\n+   current.setOtherVersionNode(currentPredecessor);\n+   compareEqualChilds(current, currentPredecessor);\n+  } else {\n+   treeStructureDiffering.add(currentPredecessor);\n+  }\n+ }\n+\n+ private void compareEqualChilds(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n+  final Iterator<CallTreeNode> predecessorIterator = currentPredecessor.getChildren().iterator();\n+  final Iterator<CallTreeNode> currentIterator = current.getChildren().iterator();\n+  boolean oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n+  while (oneHasNext) {\n+   final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n+   final CallTreeNode currentVersionNode = currentIterator.next();\n+   getAllNodes(currentVersionNode, currentPredecessorNode);\n+   oneHasNext = currentIterator.hasNext() && predecessorIterator.hasNext();\n+  }\n+ }\n+\n+ public List<CallTreeNode> getTreeStructureDiffering() {\n+  return treeStructureDiffering;\n+ }\n+\n+ public List<CallTreeNode> getNonDifferingPredecessor() {\n+  return nonDifferingPredecessor;\n+ }\n+\n+ public List<CallTreeNode> getNonDifferingVersion() {\n+  return nonDifferingVersion;\n+ }\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/16/CompleteTreeAnalyzer.java\nindex f1b75aa8ac0..91a6091c206 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/16/CompleteTreeAnalyzer.java\n@@ -16,8 +16,7 @@ public class CompleteTreeAnalyzer {\n    }\n \n    private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n-      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) &&\n-            currentPredecessor.getChildren().size() == current.getChildren().size()) {\n+      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) && currentPredecessor.getChildren().size() == current.getChildren().size()) {\n          nonDifferingVersion.add(current);\n          nonDifferingPredecessor.add(currentPredecessor);\n          currentPredecessor.setOtherVersionNode(current);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/16/CompleteTreeAnalyzer.java\nindex f1b75aa8ac0..91a6091c206 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/16/CompleteTreeAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/16/CompleteTreeAnalyzer.java\n@@ -16,8 +16,7 @@ public class CompleteTreeAnalyzer {\n    }\n \n    private void getAllNodes(final CallTreeNode current, final CallTreeNode currentPredecessor) {\n-      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) &&\n-            currentPredecessor.getChildren().size() == current.getChildren().size()) {\n+      if (current.getKiekerPattern().equals(currentPredecessor.getKiekerPattern()) && currentPredecessor.getChildren().size() == current.getChildren().size()) {\n          nonDifferingVersion.add(current);\n          nonDifferingPredecessor.add(currentPredecessor);\n          currentPredecessor.setOtherVersionNode(current);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize"
    ]
}