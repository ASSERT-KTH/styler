{
    "project_name": "NationalSecurityAgency-emissary",
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "109",
                "column": "31",
                "severity": "warning",
                "message": "'}' at column 31 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "     * Private Constructor\n     */\n    public MagicNumberUtil() {}\n\n    /**\n     * Main testing - plug in the magic file as the first arg and the target file to be examined as the second.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "109",
                    "column": "31",
                    "severity": "warning",
                    "message": "'}' at column 31 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/7/MagicNumberUtil.java\nindex 0c48ff4e9a1..3577810eb24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/7/MagicNumberUtil.java\n@@ -15,60 +15,60 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * Magic entry rules when using the Java utility, MagicNumberUtil\n- *\n+ * <p>\n  * A. Examples:\n- *\n+ * <p>\n  * Java ByteCode From Larry Schwimmer (schwim@cs.stanford.edu) 0 belong 0xcafebabe compiled Java class data, &gt;6\n  * beshort x version %d. &gt;4 beshort x \\b%d\n- *\n+ * <p>\n  * The entries must have 4 columns where the first three are delimited by white space as tabs, or spaces, or both and\n  * the remaining columns will be stored as the description. Since spaces are also delimiters - if the value column\n  * (third column) requires a space then it should be escaped.\n- *\n+ * <p>\n  * B. Offset Column 1. A decimal, hex, or octal value preceded or not preceded by '&gt;' 2. Decimal: n* - if the\n  * occurrences is &gt; 1, then not preceded by '0' 3. Hex: 0xn* 4. Octal: 0n* 5. Offset values in the format '(n.s+32)'\n  * are ignored. These only occurred in the continuations\n- *\n+ * <p>\n  * C. Data Type Column 1. BYTE, SHORT, LONG, STRING, BESHORT, BELONG, LESHORT, LELONG 2. LEDATE, BEDATE, and DATE are\n  * not supported 3. Masking: If the data type is followed by a mask value in decimal, octal or hex and delimited by\n  * '&amp;' then the value column will be stored as the product of the masking. The mask value cannot exceed the data\n  * type length.\n- *\n+ * <p>\n  * D. Value columns 1. String, Byte, Short, or Long - 1, 2, or 4 byte values - or any length value for the string type.\n  * 2. String values can be escaped. a. Example \"\\0\\40\\320\\3200\\4text\\ \\7\\x40\\r\\t\\\" parsed as: \"0-32-208-208-0-4-text-\n  * -7-64- \" with the dashes removed.\n- *\n+ * <p>\n  * 1. Escaping number values Numbers can be of length up to three octal or two hex and can also be terminated by\n  * non-digits and finally must be less then 256. These numeric values are substituted into their respective byte\n  * positions.\n- *\n+ * <p>\n  * - 3200 will be evaluated as '320' octal and '0' string. - 0 as 0 octal - 40 as 40 octal - x40 as 40 hex which is 64 -\n  * 4text as 4 and succeeded by the characters 't' 'e' 'x' 't'\n- *\n+ * <p>\n  * 2. Escaping characters including spaces - Spaces must be escaped - otherwise they'll be tokenized into the next\n  * column - 4\\ 4\\4 results in [char 4, char space, char 4, integer 4] - Ascii values 8-15 can be escaped as: \\b\\t\\n\\r\n  * etc... see man page for ascii - trailing slashes will result in the placement of a trailing space\n- *\n+ * <p>\n  * 3. Substitution Example &gt;4 beshort x \\bversion %d.%c Substitution is allowed for continuations only. In this case,\n  * the short byte array will be sampled from the document at offset 4 and length 2. This stored value can be substituted\n  * in the description field where %c or %s will substitute convert the number into a unicode character and %d %ld and\n  * other numeric data types will instead substitute the numeric value.\n- *\n+ * <p>\n  * In the above, if value 'x' at offset 4 equals 0101 octal, then the substitutions will be a decimal value of 64 and\n  * the character value of 'A' resulting in: \"\\bversion 64.A\n- *\n+ * <p>\n  * E. Description The description is comprised of all remaining columns once the first three have been discovered. They\n  * can be blank in continuations since continuations may depend upon the successful testing of preceding continuations.\n  * In other words:\n- *\n+ * <p>\n  * 0 long 0xcafebabe java binary &gt;4 byte x version %d\n- *\n+ * <p>\n  * can be re-written as\n- *\n+ * <p>\n  * 0 short 0xcafe java &gt;4 byte 0xba &gt;&gt;6 byte 0xbe \\b\\bbinary &gt;&gt;&gt;4 byte x version %d\n- *\n+ * <p>\n  * where the continuations will only occur upon the completion of '&gt;4 byte 0xba'\n- *\n+ * <p>\n  * 1. The descriptions can be escaped with a '\\b' 2. Each continuation is prefixed with a space when added to a\n  * description. To avoid this or remove spaces use the '\\b' backspace and it will perform a backspace function or trim\n  * previous character. 3. See Value column for substitution rules\n@@ -78,7 +78,9 @@ public final class MagicNumberUtil {\n \n     private static final Logger log = LoggerFactory.getLogger(MagicNumberUtil.class);\n \n-    /** The magic number instances */\n+    /**\n+     * The magic number instances\n+     */\n     private final List<MagicNumber> magicNumbers = new ArrayList<MagicNumber>();\n \n     /**\n@@ -106,11 +108,12 @@ public final class MagicNumberUtil {\n     /**\n      * Private Constructor\n      */\n-    public MagicNumberUtil() {}\n+    public MagicNumberUtil() {\n+    }\n \n     /**\n      * Main testing - plug in the magic file as the first arg and the target file to be examined as the second.\n-     *\n+     * <p>\n      * Usage: java xxx.MagicNumberUtil [magic config file absolute path] [target file to be id'd]\n      */\n     public static void main(final String[] args) {\n@@ -184,7 +187,7 @@ public final class MagicNumberUtil {\n      * @param target data a java.io.File\n      * @return A string representing matching description plus matching continuation descriptions or null.\n      * @throws RuntimeException If the magic file has not been loaded globally using the load methods.\n-     * @throws IOException If a read error occurs loading the target file.\n+     * @throws IOException      If a read error occurs loading the target file.\n      * @see #load(java.io.File)\n      * @see #load(byte[])\n      */\n@@ -204,7 +207,7 @@ public final class MagicNumberUtil {\n      * against the specified magic file. The magic file will be read/parsed each time as the comparative file. Useful for\n      * debugging or if certain files can be narrowed down to a smaller magic file list improving id performance.\n      *\n-     * @param target a java.io.File specifying the file to be id'd\n+     * @param target      a java.io.File specifying the file to be id'd\n      * @param magicConfig the magic file containing the magic number entries to use\n      * @return {@link String} representing the id description or null\n      * @throws IOException If an IO error occurs while reading either file.\n@@ -228,7 +231,7 @@ public final class MagicNumberUtil {\n      * the specified magic file instead. The magic file will be read/parsed each time as the comparative file. Useful for\n      * debugging or if certain files can be narrowed down to a smaller magic file list improving id performance.\n      *\n-     * @param sample a byte[] containing the data to be id'd\n+     * @param sample      a byte[] containing the data to be id'd\n      * @param magicConfig the magic file containing the magic number entries to use\n      * @return {@link String} representing the id description or null\n      * @throws IOException If an IO error occurs while reading either file.\n@@ -243,7 +246,7 @@ public final class MagicNumberUtil {\n         }\n \n         final List<MagicNumber> magicNumberList =\n-                MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(magicConfig.getAbsolutePath()), null, null);\n+          MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(magicConfig.getAbsolutePath()), null, null);\n \n         String description = null;\n         for (final MagicNumber item : magicNumberList) {\n@@ -259,7 +262,7 @@ public final class MagicNumberUtil {\n      * Load the magic number list globally.\n      *\n      * @param config the java.io.File pointing to the magic file\n-     * @exception IOException if one occurs while reading the config file or if a security access error occurs\n+     * @throws IOException if one occurs while reading the config file or if a security access error occurs\n      */\n     public void load(final File config) throws IOException {\n         load(config, false);\n@@ -268,9 +271,9 @@ public final class MagicNumberUtil {\n     /**\n      * Load the magic number list globally.\n      *\n-     * @param config the java.io.File pointing to the magic file\n+     * @param config                the java.io.File pointing to the magic file\n      * @param swallowParseException should we swallow Ignorable ParseException or bubble them up\n-     * @exception IOException if one occurs while reading the config file or if a security access error occurs\n+     * @throws IOException if one occurs while reading the config file or if a security access error occurs\n      */\n     public void load(final File config, final boolean swallowParseException) throws IOException {\n         try {\n@@ -288,7 +291,7 @@ public final class MagicNumberUtil {\n             mExtErrorMap = this.extErrorMap;\n         }\n         this.magicNumbers.addAll(MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(config.getAbsolutePath()), mErrorList,\n-                mExtErrorMap, swallowParseException));\n+          mExtErrorMap, swallowParseException));\n     }\n \n     /**\n@@ -321,7 +324,7 @@ public final class MagicNumberUtil {\n      * Summarizes\n      */\n     public String getErrorLog(final List<MagicNumber> magicNumberList, final List<String> zeroDepthErrorList,\n-            final Map<String, List<String>> continuationErrorMap) {\n+                              final Map<String, List<String>> continuationErrorMap) {\n         final StringBuffer sb = new StringBuffer();\n         final String lineBreak = \"\\n###########################################################\";\n         sb.append(lineBreak);\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "111",
                    "column": "1",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "249",
                    "column": "1",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "Line is longer than 170 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/7/MagicNumberUtil.java\nindex 0c48ff4e9a1..93ef353a7fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/7/MagicNumberUtil.java\n@@ -106,7 +106,9 @@ public final class MagicNumberUtil {\n     /**\n      * Private Constructor\n      */\n-    public MagicNumberUtil() {}\n+    public MagicNumberUtil() {\n+\n+}\n \n     /**\n      * Main testing - plug in the magic file as the first arg and the target file to be examined as the second.\n@@ -244,8 +246,7 @@ public final class MagicNumberUtil {\n \n         final List<MagicNumber> magicNumberList =\n                 MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(magicConfig.getAbsolutePath()), null, null);\n-\n-        String description = null;\n+String description = null;\n         for (final MagicNumber item : magicNumberList) {\n             description = item.describe(sample);\n             if (description != null) {\n@@ -287,8 +288,7 @@ public final class MagicNumberUtil {\n             mErrorList = this.errorList;\n             mExtErrorMap = this.extErrorMap;\n         }\n-        this.magicNumbers.addAll(MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(config.getAbsolutePath()), mErrorList,\n-                mExtErrorMap, swallowParseException));\n+        this.magicNumbers.addAll(MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(config.getAbsolutePath()), mErrorList, mExtErrorMap, swallowParseException));\n     }\n \n     /**\n@@ -360,4 +360,4 @@ public final class MagicNumberUtil {\n \n         return sb.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "233",
                    "column": "24",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "309",
                    "severity": "warning",
                    "message": "Line is longer than 170 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/7/MagicNumberUtil.java\nindex 0c48ff4e9a1..a7c55026a1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/7/MagicNumberUtil.java\n@@ -6,7 +6,6 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n-\n import emissary.util.magic.MagicNumber;\n import emissary.util.magic.MagicNumberFactory;\n import emissary.util.shell.Executrix;\n@@ -74,11 +73,13 @@ import org.slf4j.LoggerFactory;\n  * previous character. 3. See Value column for substitution rules\n  */\n \n+\n public final class MagicNumberUtil {\n \n     private static final Logger log = LoggerFactory.getLogger(MagicNumberUtil.class);\n \n     /** The magic number instances */\n+\n     private final List<MagicNumber> magicNumbers = new ArrayList<MagicNumber>();\n \n     /**\n@@ -89,30 +90,37 @@ public final class MagicNumberUtil {\n      * Otherwise, remaining errors were in continuations - mainly when the offset value was in the form of n.s+32 where 'n'\n      * is a decimal value and 's' could not be determined.\n      */\n+\n     private boolean logErrors = false;\n \n     /**\n      * Log data structure for continuations. Maps entries with depth 0 with a List of continuation entries containing the\n      * errors\n      */\n+\n     private final Map<String, List<String>> extErrorMap = new TreeMap<String, List<String>>();\n \n     /**\n      * Log data structure for entries with a depth of '0' - these are the important entries. Just maintains a simple list of\n      * these entries\n      */\n+\n     private final List<String> errorList = new ArrayList<String>();\n \n     /**\n      * Private Constructor\n      */\n-    public MagicNumberUtil() {}\n+\n+    public MagicNumberUtil() {\n+\n+    }\n \n     /**\n      * Main testing - plug in the magic file as the first arg and the target file to be examined as the second.\n      *\n      * Usage: java xxx.MagicNumberUtil [magic config file absolute path] [target file to be id'd]\n      */\n+\n     public static void main(final String[] args) {\n         if (args.length < 2) {\n             log.info(\"Usage: java xxx.MagicNumberUtil [magic config file absolute path] [target file to be id'd]\");\n@@ -127,6 +135,7 @@ public final class MagicNumberUtil {\n                 System.exit(0);\n             }\n             // make sure the target file can be found as well\n+\n             final File target = new File(args[1]);\n             if (!target.exists()) {\n                 log.info(\"Could not find the target file at: \" + target.getAbsolutePath());\n@@ -150,6 +159,7 @@ public final class MagicNumberUtil {\n         }\n     }\n \n+\n     public void setErrorLogging(final boolean logErr) {\n         this.logErrors = logErr;\n     }\n@@ -164,6 +174,8 @@ public final class MagicNumberUtil {\n      * @see #load(java.io.File)\n      * @see #load(byte[])\n      */\n+\n+\n     public String describe(final byte[] data) {\n         log.debug(\"Checking against \" + this.magicNumbers.size() + \" magic items\");\n         String description = null;\n@@ -188,6 +200,8 @@ public final class MagicNumberUtil {\n      * @see #load(java.io.File)\n      * @see #load(byte[])\n      */\n+\n+\n     public String describe(final File target) throws IOException {\n         try {\n             if (!target.exists()) {\n@@ -209,17 +223,18 @@ public final class MagicNumberUtil {\n      * @return {@link String} representing the id description or null\n      * @throws IOException If an IO error occurs while reading either file.\n      */\n+\n+\n     public static String describe(final File target, final File magicConfig) throws IOException {\n         try {\n             if (!target.exists()) {\n                 throw new IOException(\"Target file not found at: \" + target.getAbsolutePath());\n             } else if (!magicConfig.exists()) {\n-                throw new IOException(\"Magic config file not found at: \" + magicConfig.getAbsolutePath());\n+                       throw new IOException(\"Magic config file not found at: \" + magicConfig.getAbsolutePath());\n             }\n         } catch (SecurityException se) {\n             throw new IOException(\"Security Exception reading file: \" + se.getMessage());\n         }\n-\n         return describe(Executrix.readDataFromFile(target.getAbsolutePath()), magicConfig);\n     }\n \n@@ -233,6 +248,8 @@ public final class MagicNumberUtil {\n      * @return {@link String} representing the id description or null\n      * @throws IOException If an IO error occurs while reading either file.\n      */\n+\n+\n     public static String describe(final byte[] sample, final File magicConfig) throws IOException {\n         try {\n             if (!magicConfig.exists()) {\n@@ -242,9 +259,7 @@ public final class MagicNumberUtil {\n             throw new IOException(\"Security Exception reading file: \" + se.getMessage());\n         }\n \n-        final List<MagicNumber> magicNumberList =\n-                MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(magicConfig.getAbsolutePath()), null, null);\n-\n+        final List<MagicNumber> magicNumberList = MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(magicConfig.getAbsolutePath()), null, null);\n         String description = null;\n         for (final MagicNumber item : magicNumberList) {\n             description = item.describe(sample);\n@@ -261,6 +276,8 @@ public final class MagicNumberUtil {\n      * @param config the java.io.File pointing to the magic file\n      * @exception IOException if one occurs while reading the config file or if a security access error occurs\n      */\n+\n+\n     public void load(final File config) throws IOException {\n         load(config, false);\n     }\n@@ -272,6 +289,8 @@ public final class MagicNumberUtil {\n      * @param swallowParseException should we swallow Ignorable ParseException or bubble them up\n      * @exception IOException if one occurs while reading the config file or if a security access error occurs\n      */\n+\n+\n     public void load(final File config, final boolean swallowParseException) throws IOException {\n         try {\n             if (!config.exists()) {\n@@ -287,8 +306,7 @@ public final class MagicNumberUtil {\n             mErrorList = this.errorList;\n             mExtErrorMap = this.extErrorMap;\n         }\n-        this.magicNumbers.addAll(MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(config.getAbsolutePath()), mErrorList,\n-                mExtErrorMap, swallowParseException));\n+        this.magicNumbers.addAll(MagicNumberFactory.buildMagicNumberList(Executrix.readDataFromFile(config.getAbsolutePath()), mErrorList, mExtErrorMap, swallowParseException));\n     }\n \n     /**\n@@ -296,6 +314,8 @@ public final class MagicNumberUtil {\n      *\n      * @param configData the byte[] containing the the magic number entry data\n      */\n+\n+\n     public void load(final byte[] configData) {\n         List<String> mErrorList = null;\n         Map<String, List<String>> mExtErrorMap = null;\n@@ -306,10 +326,12 @@ public final class MagicNumberUtil {\n         this.magicNumbers.addAll(MagicNumberFactory.buildMagicNumberList(configData, mErrorList, mExtErrorMap));\n     }\n \n+\n     public int size() {\n         return this.magicNumbers.size();\n     }\n \n+\n     public String getErrorLog() {\n         if (!this.logErrors) {\n             return \"\";\n@@ -320,8 +342,9 @@ public final class MagicNumberUtil {\n     /**\n      * Summarizes\n      */\n-    public String getErrorLog(final List<MagicNumber> magicNumberList, final List<String> zeroDepthErrorList,\n-            final Map<String, List<String>> continuationErrorMap) {\n+\n+\n+    public String getErrorLog(final List<MagicNumber> magicNumberList, final List<String> zeroDepthErrorList, final Map<String, List<String>> continuationErrorMap) {\n         final StringBuffer sb = new StringBuffer();\n         final String lineBreak = \"\\n###########################################################\";\n         sb.append(lineBreak);\n@@ -336,28 +359,23 @@ public final class MagicNumberUtil {\n         sb.append('\\n');\n         sb.append(lineBreak);\n         sb.append(\"\\nFAILED ENTRIES (failed on some continuations)\\n\\n\");\n-\n         for (final String err : zeroDepthErrorList) {\n             sb.append('\\n');\n             sb.append(\"ENTRY (STATUS:FAILED): \");\n             sb.append(err);\n         }\n-\n         sb.append('\\n');\n         sb.append(lineBreak);\n         sb.append(\"\\nPARTIALLY SUCCESSFUL ENTRIES (failed on some extensions)\\n\\n\");\n-\n         for (final String entry : continuationErrorMap.keySet()) {\n             sb.append('\\n');\n             sb.append(\"MAIN ENTRY (STATUS:SUCCESSFUL): \");\n             sb.append(entry);\n-\n             for (final String extValue : continuationErrorMap.get(entry)) {\n                 sb.append(\"\\n\\tCONTINUATION (STATUS:FAILED): \");\n                 sb.append(extValue);\n             }\n         }\n-\n         return sb.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "110",
                    "column": "1",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/7/MagicNumberUtil.java\nindex 0c48ff4e9a1..2e89b7712a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/7/MagicNumberUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/7/MagicNumberUtil.java\n@@ -106,7 +106,8 @@ public final class MagicNumberUtil {\n     /**\n      * Private Constructor\n      */\n-    public MagicNumberUtil() {}\n+    public MagicNumberUtil() {\n+}\n \n     /**\n      * Main testing - plug in the magic file as the first arg and the target file to be examined as the second.\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "109",
                    "column": "31",
                    "severity": "warning",
                    "message": "'}' at column 31 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}