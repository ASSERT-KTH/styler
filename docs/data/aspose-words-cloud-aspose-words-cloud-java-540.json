{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "540",
    "information": {
        "errors": [
            {
                "line": "432",
                "column": "49",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    DrawingObject drawingObject = (DrawingObject)o;\n    return\n        Objects.equals(this.height, drawingObject.height) &&\n        Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/540/DrawingObject.java\nindex b5742c316d4..79948f31847 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/540/DrawingObject.java\n@@ -429,7 +429,7 @@ public class DrawingObject extends DrawingObjectLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n+    DrawingObject drawingObject = (DrawingObject) o;\n     return\n         Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/540/DrawingObject.java\nindex b5742c316d4..8a54d4455a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/540/DrawingObject.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -86,7 +89,7 @@ public class DrawingObject extends DrawingObjectLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< RelativeHorizontalPositionEnum > {\n+        public static class Adapter extends TypeAdapter<RelativeHorizontalPositionEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -140,7 +143,7 @@ public class DrawingObject extends DrawingObjectLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< RelativeVerticalPositionEnum > {\n+        public static class Adapter extends TypeAdapter<RelativeVerticalPositionEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -190,7 +193,7 @@ public class DrawingObject extends DrawingObjectLink {\n             return null;\n         }\n \n-        public static class Adapter extends TypeAdapter< WrapTypeEnum > {\n+        public static class Adapter extends TypeAdapter<WrapTypeEnum> {\n             @Override\n             public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n                 jsonWriter.value(enumeration.getValue());\n@@ -233,6 +236,7 @@ public class DrawingObject extends DrawingObjectLink {\n \n     @SerializedName(\"WrapType\")\n     private WrapTypeEnum wrapType = null;\n+\n     public DrawingObject height(Double height) {\n         this.height = height;\n         return this;\n@@ -240,8 +244,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets height of the drawing object in points.\n-    * @return height\n-    **/\n+     *\n+     * @return height\n+     **/\n     @ApiModelProperty(value = \"Gets or sets height of the drawing object in points.\")\n     public Double getHeight() {\n         return height;\n@@ -258,8 +263,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets link to image data. Can be null if shape does not have an image.\n-    * @return imageDataLink\n-    **/\n+     *\n+     * @return imageDataLink\n+     **/\n     @ApiModelProperty(value = \"Gets or sets link to image data. Can be null if shape does not have an image.\")\n     public WordsApiLink getImageDataLink() {\n         return imageDataLink;\n@@ -276,8 +282,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets distance in points from the origin to the left side of the image.\n-    * @return left\n-    **/\n+     *\n+     * @return left\n+     **/\n     @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the left side of the image.\")\n     public Double getLeft() {\n         return left;\n@@ -294,8 +301,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets link to ole object. Can be null if shape does not have ole data.\n-    * @return oleDataLink\n-    **/\n+     *\n+     * @return oleDataLink\n+     **/\n     @ApiModelProperty(value = \"Gets or sets link to ole object. Can be null if shape does not have ole data.\")\n     public WordsApiLink getOleDataLink() {\n         return oleDataLink;\n@@ -312,8 +320,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets specifies where the distance to the image is measured from.\n-    * @return relativeHorizontalPosition\n-    **/\n+     *\n+     * @return relativeHorizontalPosition\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image is measured from.\")\n     public RelativeHorizontalPositionEnum getRelativeHorizontalPosition() {\n         return relativeHorizontalPosition;\n@@ -330,8 +339,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets specifies where the distance to the image measured from.\n-    * @return relativeVerticalPosition\n-    **/\n+     *\n+     * @return relativeVerticalPosition\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image measured from.\")\n     public RelativeVerticalPositionEnum getRelativeVerticalPosition() {\n         return relativeVerticalPosition;\n@@ -356,8 +366,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets a list of links that originate from this DrawingObjectDto.\n-    * @return renderLinks\n-    **/\n+     *\n+     * @return renderLinks\n+     **/\n     @ApiModelProperty(value = \"Gets or sets a list of links that originate from this DrawingObjectDto.\")\n     public List<WordsApiLink> getRenderLinks() {\n         return renderLinks;\n@@ -374,8 +385,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets distance in points from the origin to the top side of the image.\n-    * @return top\n-    **/\n+     *\n+     * @return top\n+     **/\n     @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the top side of the image.\")\n     public Double getTop() {\n         return top;\n@@ -392,8 +404,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets width of the drawing objects in points.\n-    * @return width\n-    **/\n+     *\n+     * @return width\n+     **/\n     @ApiModelProperty(value = \"Gets or sets width of the drawing objects in points.\")\n     public Double getWidth() {\n         return width;\n@@ -410,8 +423,9 @@ public class DrawingObject extends DrawingObjectLink {\n \n     /**\n      * Gets or sets specifies how to wrap text around the image.\n-    * @return wrapType\n-    **/\n+     *\n+     * @return wrapType\n+     **/\n     @ApiModelProperty(value = \"Gets or sets specifies how to wrap text around the image.\")\n     public WrapTypeEnum getWrapType() {\n         return wrapType;\n@@ -429,53 +443,53 @@ public class DrawingObject extends DrawingObjectLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n-    return\n-        Objects.equals(this.height, drawingObject.height) &&\n-        Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n-        Objects.equals(this.left, drawingObject.left) &&\n-        Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n-        Objects.equals(this.relativeHorizontalPosition, drawingObject.relativeHorizontalPosition) &&\n-        Objects.equals(this.relativeVerticalPosition, drawingObject.relativeVerticalPosition) &&\n-        Objects.equals(this.renderLinks, drawingObject.renderLinks) &&\n-        Objects.equals(this.top, drawingObject.top) &&\n-        Objects.equals(this.width, drawingObject.width) &&\n-        Objects.equals(this.wrapType, drawingObject.wrapType) &&\n-        super.equals(o);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(height, imageDataLink, left, oleDataLink, relativeHorizontalPosition, relativeVerticalPosition, renderLinks, top, width, wrapType, super.hashCode());\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class DrawingObject {\\n\");\n-    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n-    sb.append(\"    height: \").append(toIndentedString(height)).append(\"\\n\");\n-    sb.append(\"    imageDataLink: \").append(toIndentedString(imageDataLink)).append(\"\\n\");\n-    sb.append(\"    left: \").append(toIndentedString(left)).append(\"\\n\");\n-    sb.append(\"    oleDataLink: \").append(toIndentedString(oleDataLink)).append(\"\\n\");\n-    sb.append(\"    relativeHorizontalPosition: \").append(toIndentedString(relativeHorizontalPosition)).append(\"\\n\");\n-    sb.append(\"    relativeVerticalPosition: \").append(toIndentedString(relativeVerticalPosition)).append(\"\\n\");\n-    sb.append(\"    renderLinks: \").append(toIndentedString(renderLinks)).append(\"\\n\");\n-    sb.append(\"    top: \").append(toIndentedString(top)).append(\"\\n\");\n-    sb.append(\"    width: \").append(toIndentedString(width)).append(\"\\n\");\n-    sb.append(\"    wrapType: \").append(toIndentedString(wrapType)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n-    }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n+        DrawingObject drawingObject = (DrawingObject) o;\n+        return\n+            Objects.equals(this.height, drawingObject.height) &&\n+                Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n+                Objects.equals(this.left, drawingObject.left) &&\n+                Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n+                Objects.equals(this.relativeHorizontalPosition, drawingObject.relativeHorizontalPosition) &&\n+                Objects.equals(this.relativeVerticalPosition, drawingObject.relativeVerticalPosition) &&\n+                Objects.equals(this.renderLinks, drawingObject.renderLinks) &&\n+                Objects.equals(this.top, drawingObject.top) &&\n+                Objects.equals(this.width, drawingObject.width) &&\n+                Objects.equals(this.wrapType, drawingObject.wrapType) &&\n+                super.equals(o);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(height, imageDataLink, left, oleDataLink, relativeHorizontalPosition, relativeVerticalPosition, renderLinks, top, width, wrapType, super.hashCode());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class DrawingObject {\\n\");\n+        sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+        sb.append(\"    height: \").append(toIndentedString(height)).append(\"\\n\");\n+        sb.append(\"    imageDataLink: \").append(toIndentedString(imageDataLink)).append(\"\\n\");\n+        sb.append(\"    left: \").append(toIndentedString(left)).append(\"\\n\");\n+        sb.append(\"    oleDataLink: \").append(toIndentedString(oleDataLink)).append(\"\\n\");\n+        sb.append(\"    relativeHorizontalPosition: \").append(toIndentedString(relativeHorizontalPosition)).append(\"\\n\");\n+        sb.append(\"    relativeVerticalPosition: \").append(toIndentedString(relativeVerticalPosition)).append(\"\\n\");\n+        sb.append(\"    renderLinks: \").append(toIndentedString(renderLinks)).append(\"\\n\");\n+        sb.append(\"    top: \").append(toIndentedString(top)).append(\"\\n\");\n+        sb.append(\"    width: \").append(toIndentedString(width)).append(\"\\n\");\n+        sb.append(\"    wrapType: \").append(toIndentedString(wrapType)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n+    }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/540/DrawingObject.java\nindex b5742c316d4..179d8f069b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/540/DrawingObject.java\n@@ -45,410 +45,477 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Represents Drawing Object DTO.\n  */\n+\n+\n @ApiModel(description = \"Represents Drawing Object DTO.\")\n+\n public class DrawingObject extends DrawingObjectLink {\n     /**\n      * Gets or sets specifies where the distance to the image is measured from.\n      */\n-    @JsonAdapter(RelativeHorizontalPositionEnum.Adapter.class)\n-    public enum RelativeHorizontalPositionEnum {\n-        MARGIN(\"Margin\"),\n-        PAGE(\"Page\"),\n-        COLUMN(\"Column\"),\n-        DEFAULT(\"Default\"),\n-        CHARACTER(\"Character\"),\n-        LEFTMARGIN(\"LeftMargin\"),\n-        RIGHTMARGIN(\"RightMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n-\n-        private String value;\n-\n-        RelativeHorizontalPositionEnum(String value) {\n-            this.value = value;\n-        }\n+  @JsonAdapter(RelativeHorizontalPositionEnum.Adapter.class)\n+  public enum RelativeHorizontalPositionEnum {\n+    MARGIN(\"Margin\"),\n \n-        public String getValue() {\n-            return value;\n-        }\n+    PAGE(\"Page\"),\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+    COLUMN(\"Column\"),\n \n-        public static RelativeHorizontalPositionEnum fromValue(String text) {\n-            for (RelativeHorizontalPositionEnum b : RelativeHorizontalPositionEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    DEFAULT(\"Default\"),\n+\n+    CHARACTER(\"Character\"),\n+\n+    LEFTMARGIN(\"LeftMargin\"),\n+\n+    RIGHTMARGIN(\"RightMargin\"),\n+\n+    INSIDEMARGIN(\"InsideMargin\"),\n \n-        public static class Adapter extends TypeAdapter< RelativeHorizontalPositionEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public RelativeHorizontalPositionEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return RelativeHorizontalPositionEnum.fromValue(String.valueOf(value));\n-            }\n+    OUTSIDEMARGIN(\"OutsideMargin\");\n+\n+    private String value;\n+\n+    RelativeHorizontalPositionEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static RelativeHorizontalPositionEnum fromValue(String text) {\n+      for (RelativeHorizontalPositionEnum b : RelativeHorizontalPositionEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<RelativeHorizontalPositionEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final RelativeHorizontalPositionEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public RelativeHorizontalPositionEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return RelativeHorizontalPositionEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets specifies where the distance to the image measured from.\n      */\n-    @JsonAdapter(RelativeVerticalPositionEnum.Adapter.class)\n-    public enum RelativeVerticalPositionEnum {\n-        MARGIN(\"Margin\"),\n-        TABLEDEFAULT(\"TableDefault\"),\n-        PAGE(\"Page\"),\n-        PARAGRAPH(\"Paragraph\"),\n-        TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n-        LINE(\"Line\"),\n-        TOPMARGIN(\"TopMargin\"),\n-        BOTTOMMARGIN(\"BottomMargin\"),\n-        INSIDEMARGIN(\"InsideMargin\"),\n-        OUTSIDEMARGIN(\"OutsideMargin\");\n-\n-        private String value;\n-\n-        RelativeVerticalPositionEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(RelativeVerticalPositionEnum.Adapter.class)\n+  public enum RelativeVerticalPositionEnum {\n+    MARGIN(\"Margin\"),\n \n-        public static RelativeVerticalPositionEnum fromValue(String text) {\n-            for (RelativeVerticalPositionEnum b : RelativeVerticalPositionEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    TABLEDEFAULT(\"TableDefault\"),\n+\n+    PAGE(\"Page\"),\n+\n+    PARAGRAPH(\"Paragraph\"),\n+\n+    TEXTFRAMEDEFAULT(\"TextFrameDefault\"),\n+\n+    LINE(\"Line\"),\n+\n+    TOPMARGIN(\"TopMargin\"),\n+\n+    BOTTOMMARGIN(\"BottomMargin\"),\n+\n+    INSIDEMARGIN(\"InsideMargin\"),\n+\n+    OUTSIDEMARGIN(\"OutsideMargin\");\n+\n+    private String value;\n+\n+    RelativeVerticalPositionEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n \n-        public static class Adapter extends TypeAdapter< RelativeVerticalPositionEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public RelativeVerticalPositionEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return RelativeVerticalPositionEnum.fromValue(String.valueOf(value));\n-            }\n+    public static RelativeVerticalPositionEnum fromValue(String text) {\n+      for (RelativeVerticalPositionEnum b : RelativeVerticalPositionEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n     }\n \n+    public static class Adapter extends TypeAdapter<RelativeVerticalPositionEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final RelativeVerticalPositionEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public RelativeVerticalPositionEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return RelativeVerticalPositionEnum.fromValue(String.valueOf(value));\n+      }\n+    }\n+  }\n+\n     /**\n      * Gets or sets specifies how to wrap text around the image.\n      */\n-    @JsonAdapter(WrapTypeEnum.Adapter.class)\n-    public enum WrapTypeEnum {\n-        INLINE(\"Inline\"),\n-        TOPBOTTOM(\"TopBottom\"),\n-        SQUARE(\"Square\"),\n-        NONE(\"None\"),\n-        TIGHT(\"Tight\"),\n-        THROUGH(\"Through\");\n-\n-        private String value;\n-\n-        WrapTypeEnum(String value) {\n-            this.value = value;\n-        }\n \n-        public String getValue() {\n-            return value;\n-        }\n \n-        @Override\n-        public String toString() {\n-            return String.valueOf(value);\n-        }\n+  @JsonAdapter(WrapTypeEnum.Adapter.class)\n+  public enum WrapTypeEnum {\n+    INLINE(\"Inline\"),\n \n-        public static WrapTypeEnum fromValue(String text) {\n-            for (WrapTypeEnum b : WrapTypeEnum.values()) {\n-                if (String.valueOf(b.value).equals(text)) {\n-                    return b;\n-                }\n-            }\n-            return null;\n-        }\n+    TOPBOTTOM(\"TopBottom\"),\n+\n+    SQUARE(\"Square\"),\n+\n+    NONE(\"None\"),\n+\n+    TIGHT(\"Tight\"),\n \n-        public static class Adapter extends TypeAdapter< WrapTypeEnum > {\n-            @Override\n-            public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n-                jsonWriter.value(enumeration.getValue());\n-            }\n-\n-            @Override\n-            public WrapTypeEnum read(final JsonReader jsonReader) throws IOException {\n-                String value = jsonReader.nextString();\n-                return WrapTypeEnum.fromValue(String.valueOf(value));\n-            }\n+    THROUGH(\"Through\");\n+\n+    private String value;\n+\n+    WrapTypeEnum(String value) {\n+      this.value = value;\n+    }\n+\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return String.valueOf(value);\n+    }\n+\n+    public static WrapTypeEnum fromValue(String text) {\n+      for (WrapTypeEnum b : WrapTypeEnum.values()) {\n+        if (String.valueOf(b.value).equals(text)) {\n+          return b;\n         }\n+      }\n+      return null;\n+    }\n+\n+    public static class Adapter extends TypeAdapter<WrapTypeEnum> {\n+      @Override\n+      public void write(final JsonWriter jsonWriter, final WrapTypeEnum enumeration) throws IOException {\n+        jsonWriter.value(enumeration.getValue());\n+      }\n+\n+\n+      @Override\n+      public WrapTypeEnum read(final JsonReader jsonReader) throws IOException {\n+        String value = jsonReader.nextString();\n+        return WrapTypeEnum.fromValue(String.valueOf(value));\n+      }\n     }\n+  }\n \n-    @SerializedName(\"Height\")\n-    private Double height = null;\n \n-    @SerializedName(\"ImageDataLink\")\n-    private WordsApiLink imageDataLink = null;\n+  @SerializedName(\"Height\")\n+  private Double height = null;\n \n-    @SerializedName(\"Left\")\n-    private Double left = null;\n+  @SerializedName(\"ImageDataLink\")\n+  private WordsApiLink imageDataLink = null;\n \n-    @SerializedName(\"OleDataLink\")\n-    private WordsApiLink oleDataLink = null;\n+  @SerializedName(\"Left\")\n+  private Double left = null;\n \n-    @SerializedName(\"RelativeHorizontalPosition\")\n-    private RelativeHorizontalPositionEnum relativeHorizontalPosition = null;\n+  @SerializedName(\"OleDataLink\")\n+  private WordsApiLink oleDataLink = null;\n \n-    @SerializedName(\"RelativeVerticalPosition\")\n-    private RelativeVerticalPositionEnum relativeVerticalPosition = null;\n+  @SerializedName(\"RelativeHorizontalPosition\")\n+  private RelativeHorizontalPositionEnum relativeHorizontalPosition = null;\n \n-    @SerializedName(\"RenderLinks\")\n-    private List<WordsApiLink> renderLinks = null;\n+  @SerializedName(\"RelativeVerticalPosition\")\n+  private RelativeVerticalPositionEnum relativeVerticalPosition = null;\n \n-    @SerializedName(\"Top\")\n-    private Double top = null;\n+  @SerializedName(\"RenderLinks\")\n+  private List<WordsApiLink> renderLinks = null;\n \n-    @SerializedName(\"Width\")\n-    private Double width = null;\n+  @SerializedName(\"Top\")\n+  private Double top = null;\n \n-    @SerializedName(\"WrapType\")\n-    private WrapTypeEnum wrapType = null;\n-    public DrawingObject height(Double height) {\n-        this.height = height;\n-        return this;\n-    }\n+  @SerializedName(\"Width\")\n+  private Double width = null;\n+\n+  @SerializedName(\"WrapType\")\n+  private WrapTypeEnum wrapType = null;\n+\n+  public DrawingObject height(Double height) {\n+    this.height = height;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets height of the drawing object in points.\n     * @return height\n     **/\n-    @ApiModelProperty(value = \"Gets or sets height of the drawing object in points.\")\n-    public Double getHeight() {\n-        return height;\n-    }\n \n-    public void setHeight(Double height) {\n-        this.height = height;\n-    }\n \n-    public DrawingObject imageDataLink(WordsApiLink imageDataLink) {\n-        this.imageDataLink = imageDataLink;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets height of the drawing object in points.\")\n+  public Double getHeight() {\n+    return height;\n+  }\n+\n+  public void setHeight(Double height) {\n+    this.height = height;\n+  }\n+\n+  public DrawingObject imageDataLink(WordsApiLink imageDataLink) {\n+    this.imageDataLink = imageDataLink;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets link to image data. Can be null if shape does not have an image.\n     * @return imageDataLink\n     **/\n-    @ApiModelProperty(value = \"Gets or sets link to image data. Can be null if shape does not have an image.\")\n-    public WordsApiLink getImageDataLink() {\n-        return imageDataLink;\n-    }\n \n-    public void setImageDataLink(WordsApiLink imageDataLink) {\n-        this.imageDataLink = imageDataLink;\n-    }\n \n-    public DrawingObject left(Double left) {\n-        this.left = left;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets link to image data. Can be null if shape does not have an image.\")\n+  public WordsApiLink getImageDataLink() {\n+    return imageDataLink;\n+  }\n+\n+  public void setImageDataLink(WordsApiLink imageDataLink) {\n+    this.imageDataLink = imageDataLink;\n+  }\n+\n+  public DrawingObject left(Double left) {\n+    this.left = left;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets distance in points from the origin to the left side of the image.\n     * @return left\n     **/\n-    @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the left side of the image.\")\n-    public Double getLeft() {\n-        return left;\n-    }\n \n-    public void setLeft(Double left) {\n-        this.left = left;\n-    }\n \n-    public DrawingObject oleDataLink(WordsApiLink oleDataLink) {\n-        this.oleDataLink = oleDataLink;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the left side of the image.\")\n+  public Double getLeft() {\n+    return left;\n+  }\n+\n+  public void setLeft(Double left) {\n+    this.left = left;\n+  }\n+\n+  public DrawingObject oleDataLink(WordsApiLink oleDataLink) {\n+    this.oleDataLink = oleDataLink;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets link to ole object. Can be null if shape does not have ole data.\n     * @return oleDataLink\n     **/\n-    @ApiModelProperty(value = \"Gets or sets link to ole object. Can be null if shape does not have ole data.\")\n-    public WordsApiLink getOleDataLink() {\n-        return oleDataLink;\n-    }\n \n-    public void setOleDataLink(WordsApiLink oleDataLink) {\n-        this.oleDataLink = oleDataLink;\n-    }\n \n-    public DrawingObject relativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n-        this.relativeHorizontalPosition = relativeHorizontalPosition;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets link to ole object. Can be null if shape does not have ole data.\")\n+  public WordsApiLink getOleDataLink() {\n+    return oleDataLink;\n+  }\n+\n+  public void setOleDataLink(WordsApiLink oleDataLink) {\n+    this.oleDataLink = oleDataLink;\n+  }\n+\n+  public DrawingObject relativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n+    this.relativeHorizontalPosition = relativeHorizontalPosition;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies where the distance to the image is measured from.\n     * @return relativeHorizontalPosition\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image is measured from.\")\n-    public RelativeHorizontalPositionEnum getRelativeHorizontalPosition() {\n-        return relativeHorizontalPosition;\n-    }\n \n-    public void setRelativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n-        this.relativeHorizontalPosition = relativeHorizontalPosition;\n-    }\n \n-    public DrawingObject relativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n-        this.relativeVerticalPosition = relativeVerticalPosition;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image is measured from.\")\n+  public RelativeHorizontalPositionEnum getRelativeHorizontalPosition() {\n+    return relativeHorizontalPosition;\n+  }\n+\n+  public void setRelativeHorizontalPosition(RelativeHorizontalPositionEnum relativeHorizontalPosition) {\n+    this.relativeHorizontalPosition = relativeHorizontalPosition;\n+  }\n+\n+  public DrawingObject relativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n+    this.relativeVerticalPosition = relativeVerticalPosition;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies where the distance to the image measured from.\n     * @return relativeVerticalPosition\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image measured from.\")\n-    public RelativeVerticalPositionEnum getRelativeVerticalPosition() {\n-        return relativeVerticalPosition;\n-    }\n \n-    public void setRelativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n-        this.relativeVerticalPosition = relativeVerticalPosition;\n-    }\n \n-    public DrawingObject renderLinks(List<WordsApiLink> renderLinks) {\n-        this.renderLinks = renderLinks;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets specifies where the distance to the image measured from.\")\n+  public RelativeVerticalPositionEnum getRelativeVerticalPosition() {\n+    return relativeVerticalPosition;\n+  }\n \n-    public DrawingObject addRenderLinksItem(WordsApiLink renderLinksItem) {\n-        if (this.renderLinks == null) {\n-            this.renderLinks = new ArrayList<WordsApiLink>();\n-        }\n-        this.renderLinks.add(renderLinksItem);\n-        return this;\n+  public void setRelativeVerticalPosition(RelativeVerticalPositionEnum relativeVerticalPosition) {\n+    this.relativeVerticalPosition = relativeVerticalPosition;\n+  }\n+\n+  public DrawingObject renderLinks(List<WordsApiLink> renderLinks) {\n+    this.renderLinks = renderLinks;\n+    return this;\n+  }\n+\n+  public DrawingObject addRenderLinksItem(WordsApiLink renderLinksItem) {\n+    if (this.renderLinks == null) {\n+      this.renderLinks = new ArrayList<WordsApiLink>();\n     }\n+    this.renderLinks.add(renderLinksItem);\n+    return this;\n+  }\n \n     /**\n      * Gets or sets a list of links that originate from this DrawingObjectDto.\n     * @return renderLinks\n     **/\n-    @ApiModelProperty(value = \"Gets or sets a list of links that originate from this DrawingObjectDto.\")\n-    public List<WordsApiLink> getRenderLinks() {\n-        return renderLinks;\n-    }\n \n-    public void setRenderLinks(List<WordsApiLink> renderLinks) {\n-        this.renderLinks = renderLinks;\n-    }\n \n-    public DrawingObject top(Double top) {\n-        this.top = top;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets a list of links that originate from this DrawingObjectDto.\")\n+  public List<WordsApiLink> getRenderLinks() {\n+    return renderLinks;\n+  }\n+\n+  public void setRenderLinks(List<WordsApiLink> renderLinks) {\n+    this.renderLinks = renderLinks;\n+  }\n+\n+  public DrawingObject top(Double top) {\n+    this.top = top;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets distance in points from the origin to the top side of the image.\n     * @return top\n     **/\n-    @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the top side of the image.\")\n-    public Double getTop() {\n-        return top;\n-    }\n \n-    public void setTop(Double top) {\n-        this.top = top;\n-    }\n \n-    public DrawingObject width(Double width) {\n-        this.width = width;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets distance in points from the origin to the top side of the image.\")\n+  public Double getTop() {\n+    return top;\n+  }\n+\n+  public void setTop(Double top) {\n+    this.top = top;\n+  }\n+\n+  public DrawingObject width(Double width) {\n+    this.width = width;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets width of the drawing objects in points.\n     * @return width\n     **/\n-    @ApiModelProperty(value = \"Gets or sets width of the drawing objects in points.\")\n-    public Double getWidth() {\n-        return width;\n-    }\n \n-    public void setWidth(Double width) {\n-        this.width = width;\n-    }\n \n-    public DrawingObject wrapType(WrapTypeEnum wrapType) {\n-        this.wrapType = wrapType;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets width of the drawing objects in points.\")\n+  public Double getWidth() {\n+    return width;\n+  }\n+\n+  public void setWidth(Double width) {\n+    this.width = width;\n+  }\n+\n+  public DrawingObject wrapType(WrapTypeEnum wrapType) {\n+    this.wrapType = wrapType;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets specifies how to wrap text around the image.\n     * @return wrapType\n     **/\n-    @ApiModelProperty(value = \"Gets or sets specifies how to wrap text around the image.\")\n-    public WrapTypeEnum getWrapType() {\n-        return wrapType;\n-    }\n \n-    public void setWrapType(WrapTypeEnum wrapType) {\n-        this.wrapType = wrapType;\n-    }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    DrawingObject drawingObject = (DrawingObject)o;\n-    return\n-        Objects.equals(this.height, drawingObject.height) &&\n-        Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n-        Objects.equals(this.left, drawingObject.left) &&\n-        Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n-        Objects.equals(this.relativeHorizontalPosition, drawingObject.relativeHorizontalPosition) &&\n-        Objects.equals(this.relativeVerticalPosition, drawingObject.relativeVerticalPosition) &&\n-        Objects.equals(this.renderLinks, drawingObject.renderLinks) &&\n-        Objects.equals(this.top, drawingObject.top) &&\n-        Objects.equals(this.width, drawingObject.width) &&\n-        Objects.equals(this.wrapType, drawingObject.wrapType) &&\n-        super.equals(o);\n+  @ApiModelProperty(value = \"Gets or sets specifies how to wrap text around the image.\")\n+  public WrapTypeEnum getWrapType() {\n+    return wrapType;\n   }\n \n+  public void setWrapType(WrapTypeEnum wrapType) {\n+    this.wrapType = wrapType;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    DrawingObject drawingObject = (DrawingObject) o;\n+    return Objects.equals(this.height, drawingObject.height) &&\n+    Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n+    Objects.equals(this.left, drawingObject.left) &&\n+    Objects.equals(this.oleDataLink, drawingObject.oleDataLink) &&\n+    Objects.equals(this.relativeHorizontalPosition, drawingObject.relativeHorizontalPosition) &&\n+    Objects.equals(this.relativeVerticalPosition, drawingObject.relativeVerticalPosition) &&\n+    Objects.equals(this.renderLinks, drawingObject.renderLinks) &&\n+    Objects.equals(this.top, drawingObject.top) &&\n+    Objects.equals(this.width, drawingObject.width) &&\n+    Objects.equals(this.wrapType, drawingObject.wrapType) &&\n+    super.equals(o);\n+  }\n+\n+\n   @Override\n   public int hashCode() {\n-    return Objects.hash(height, imageDataLink, left, oleDataLink, relativeHorizontalPosition, relativeVerticalPosition, renderLinks, top, width, wrapType, super.hashCode());\n+    return Objects.hash(height,\n+imageDataLink,\n+left,\n+oleDataLink,\n+relativeHorizontalPosition,\n+relativeVerticalPosition,\n+renderLinks,\n+top,\n+width,\n+wrapType,\n+super.hashCode());\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -472,10 +539,12 @@ public class DrawingObject extends DrawingObjectLink {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 512
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/540/DrawingObject.java\nindex b5742c316d4..79948f31847 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/540/DrawingObject.java\n@@ -429,7 +429,7 @@ public class DrawingObject extends DrawingObjectLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n+    DrawingObject drawingObject = (DrawingObject) o;\n     return\n         Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/540/DrawingObject.java\nindex b5742c316d4..79948f31847 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/540/DrawingObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/540/DrawingObject.java\n@@ -429,7 +429,7 @@ public class DrawingObject extends DrawingObjectLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    DrawingObject drawingObject = (DrawingObject)o;\n+    DrawingObject drawingObject = (DrawingObject) o;\n     return\n         Objects.equals(this.height, drawingObject.height) &&\n         Objects.equals(this.imageDataLink, drawingObject.imageDataLink) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}