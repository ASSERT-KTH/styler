{
    "project_name": "CESNET-perun",
    "error_id": "302",
    "information": {
        "errors": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t * @param identifier identifier used to generate ids for nodes\n\t */\n\tprivate void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier,\n\t\t\t\t\t\t\t\t\t\t NodeGenerator<T> nodeGenerator) {\n\t\tfor (T source : data.keySet()) {\n\t\t\tNode sourceNode = nodeGenerator.generate(source, identifier);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/302/NoDuplicatedEdgesGraphGenerator.java\nindex 9052a616d78..41f2901bed5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/302/NoDuplicatedEdgesGraphGenerator.java\n@@ -36,7 +36,7 @@ public class NoDuplicatedEdgesGraphGenerator<T> implements GraphGenerator<T> {\n \t * @param identifier identifier used to generate ids for nodes\n \t */\n \tprivate void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier,\n-\t\t\t\t\t\t\t\t\t\t NodeGenerator<T> nodeGenerator) {\n+NodeGenerator<T> nodeGenerator) {\n \t\tfor (T source : data.keySet()) {\n \t\t\tNode sourceNode = nodeGenerator.generate(source, identifier);\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/302/NoDuplicatedEdgesGraphGenerator.java\nindex 9052a616d78..0acfa6dce6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/302/NoDuplicatedEdgesGraphGenerator.java\n@@ -15,51 +15,51 @@ import java.util.Set;\n  */\n public class NoDuplicatedEdgesGraphGenerator<T> implements GraphGenerator<T> {\n \n-\t@Override\n-\tpublic Graph generate(NodeGenerator<T> nodeGenerator, GraphDefinition<T> graphDefinition) {\n-\t\tGraph graph = new Graph();\n-\t\tLong identifier = 0L;\n+    @Override\n+    public Graph generate(NodeGenerator<T> nodeGenerator, GraphDefinition<T> graphDefinition) {\n+        Graph graph = new Graph();\n+        Long identifier = 0L;\n \n-\t\tfor (GraphEdge.Type edgeType : graphDefinition.getEdgeTypes()) {\n-\t\t\taddDataFromDependencies(graphDefinition.getEdgeData(edgeType), graph, edgeType, identifier, nodeGenerator);\n-\t\t}\n+        for (GraphEdge.Type edgeType : graphDefinition.getEdgeTypes()) {\n+            addDataFromDependencies(graphDefinition.getEdgeData(edgeType), graph, edgeType, identifier, nodeGenerator);\n+        }\n \n-\t\treturn graph;\n-\t}\n+        return graph;\n+    }\n \n-\t/**\n-\t * Adds data to given graph with specified edge type.\n-\t *\n-\t * @param data data that are transformed to nodes\n-\t * @param graph graph where new data is added\n-\t * @param edgeType used edge type\n-\t * @param identifier identifier used to generate ids for nodes\n-\t */\n-\tprivate void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier,\n-\t\t\t\t\t\t\t\t\t\t NodeGenerator<T> nodeGenerator) {\n-\t\tfor (T source : data.keySet()) {\n-\t\t\tNode sourceNode = nodeGenerator.generate(source, identifier);\n+    /**\n+     * Adds data to given graph with specified edge type.\n+     *\n+     * @param data       data that are transformed to nodes\n+     * @param graph      graph where new data is added\n+     * @param edgeType   used edge type\n+     * @param identifier identifier used to generate ids for nodes\n+     */\n+    private void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier,\n+                                         NodeGenerator<T> nodeGenerator) {\n+        for (T source : data.keySet()) {\n+            Node sourceNode = nodeGenerator.generate(source, identifier);\n \n-\t\t\tif (data.get(source).isEmpty()) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n+            if (data.get(source).isEmpty()) {\n+                continue;\n+            }\n \n-\t\t\tidentifier++;\n+            identifier++;\n \n-\t\t\tif (!graph.getNodes().containsKey(sourceNode)) {\n-\t\t\t\tgraph.addNode(sourceNode);\n-\t\t\t}\n+            if (!graph.getNodes().containsKey(sourceNode)) {\n+                graph.addNode(sourceNode);\n+            }\n \n-\t\t\tfor(T destination : data.get(source)) {\n-\t\t\t\tNode destinationNode = nodeGenerator.generate(destination, identifier);\n+            for (T destination : data.get(source)) {\n+                Node destinationNode = nodeGenerator.generate(destination, identifier);\n \n-\t\t\t\tif (!graph.getNodes().containsKey(destinationNode)) {\n-\t\t\t\t\tgraph.addNode(destinationNode);\n-\t\t\t\t\tidentifier++;\n-\t\t\t\t}\n+                if (!graph.getNodes().containsKey(destinationNode)) {\n+                    graph.addNode(destinationNode);\n+                    identifier++;\n+                }\n \n-\t\t\t\tgraph.createEdge(sourceNode, destinationNode, edgeType);\n-\t\t\t}\n-\t\t}\n-\t}\n+                graph.createEdge(sourceNode, destinationNode, edgeType);\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/302/NoDuplicatedEdgesGraphGenerator.java\nindex 9052a616d78..fbe4d5b0f01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/302/NoDuplicatedEdgesGraphGenerator.java\n@@ -3,7 +3,6 @@ package cz.metacentrum.perun.utils.graphs.generators;\n import cz.metacentrum.perun.utils.graphs.Graph;\n import cz.metacentrum.perun.utils.graphs.GraphEdge;\n import cz.metacentrum.perun.utils.graphs.Node;\n-\n import java.util.Map;\n import java.util.Set;\n \n@@ -13,53 +12,50 @@ import java.util.Set;\n  *\n  * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n  */\n-public class NoDuplicatedEdgesGraphGenerator<T> implements GraphGenerator<T> {\n-\n-\t@Override\n-\tpublic Graph generate(NodeGenerator<T> nodeGenerator, GraphDefinition<T> graphDefinition) {\n-\t\tGraph graph = new Graph();\n-\t\tLong identifier = 0L;\n-\n-\t\tfor (GraphEdge.Type edgeType : graphDefinition.getEdgeTypes()) {\n-\t\t\taddDataFromDependencies(graphDefinition.getEdgeData(edgeType), graph, edgeType, identifier, nodeGenerator);\n-\t\t}\n-\n-\t\treturn graph;\n-\t}\n-\n-\t/**\n-\t * Adds data to given graph with specified edge type.\n-\t *\n-\t * @param data data that are transformed to nodes\n-\t * @param graph graph where new data is added\n-\t * @param edgeType used edge type\n-\t * @param identifier identifier used to generate ids for nodes\n-\t */\n-\tprivate void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier,\n-\t\t\t\t\t\t\t\t\t\t NodeGenerator<T> nodeGenerator) {\n-\t\tfor (T source : data.keySet()) {\n-\t\t\tNode sourceNode = nodeGenerator.generate(source, identifier);\n \n-\t\t\tif (data.get(source).isEmpty()) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n \n-\t\t\tidentifier++;\n-\n-\t\t\tif (!graph.getNodes().containsKey(sourceNode)) {\n-\t\t\t\tgraph.addNode(sourceNode);\n-\t\t\t}\n-\n-\t\t\tfor(T destination : data.get(source)) {\n-\t\t\t\tNode destinationNode = nodeGenerator.generate(destination, identifier);\n-\n-\t\t\t\tif (!graph.getNodes().containsKey(destinationNode)) {\n-\t\t\t\t\tgraph.addNode(destinationNode);\n-\t\t\t\t\tidentifier++;\n-\t\t\t\t}\n-\n-\t\t\t\tgraph.createEdge(sourceNode, destinationNode, edgeType);\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n+public class NoDuplicatedEdgesGraphGenerator<T> implements GraphGenerator<T> {\n+ @Override\n+ public Graph generate(NodeGenerator<T> nodeGenerator, GraphDefinition<T> graphDefinition) {\n+  Graph graph = new Graph();\n+  Long identifier = 0L;\n+  for (GraphEdge.Type edgeType : graphDefinition.getEdgeTypes()) {\n+   addDataFromDependencies(graphDefinition.getEdgeData(edgeType), graph, edgeType, identifier, nodeGenerator);\n+  }\n+\n+  return graph;\n+ }\n+\n+ /**\n+  * Adds data to given graph with specified edge type.\n+  *\n+  * @param data data that are transformed to nodes\n+  * @param graph graph where new data is added\n+  * @param edgeType used edge type\n+  * @param identifier identifier used to generate ids for nodes\n+  */\n+\n+\n+ private void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier, NodeGenerator<T> nodeGenerator) {\n+\n+  for (T source : data.keySet()) {\n+   Node sourceNode = nodeGenerator.generate(source, identifier);\n+   if (data.get(source).isEmpty()) {\n+    continue;\n+   }\n+   identifier++;\n+   if (!graph.getNodes().containsKey(sourceNode)) {\n+    graph.addNode(sourceNode);\n+   }\n+\n+   for (T destination : data.get(source)) {\n+    Node destinationNode = nodeGenerator.generate(destination, identifier);\n+    if (!graph.getNodes().containsKey(destinationNode)) {\n+     graph.addNode(destinationNode);\n+     identifier++;\n+    }\n+    graph.createEdge(sourceNode, destinationNode, edgeType);\n+   }\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 75
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/302/NoDuplicatedEdgesGraphGenerator.java\nindex 9052a616d78..41f2901bed5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/302/NoDuplicatedEdgesGraphGenerator.java\n@@ -36,7 +36,7 @@ public class NoDuplicatedEdgesGraphGenerator<T> implements GraphGenerator<T> {\n \t * @param identifier identifier used to generate ids for nodes\n \t */\n \tprivate void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier,\n-\t\t\t\t\t\t\t\t\t\t NodeGenerator<T> nodeGenerator) {\n+NodeGenerator<T> nodeGenerator) {\n \t\tfor (T source : data.keySet()) {\n \t\t\tNode sourceNode = nodeGenerator.generate(source, identifier);\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/302/NoDuplicatedEdgesGraphGenerator.java\nindex 9052a616d78..5572f9018d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/302/NoDuplicatedEdgesGraphGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/302/NoDuplicatedEdgesGraphGenerator.java\n@@ -36,7 +36,7 @@ public class NoDuplicatedEdgesGraphGenerator<T> implements GraphGenerator<T> {\n \t * @param identifier identifier used to generate ids for nodes\n \t */\n \tprivate void addDataFromDependencies(Map<T, Set<T>> data, Graph graph, GraphEdge.Type edgeType, Long identifier,\n-\t\t\t\t\t\t\t\t\t\t NodeGenerator<T> nodeGenerator) {\n+\tNodeGenerator<T> nodeGenerator) {\n \t\tfor (T source : data.keySet()) {\n \t\t\tNode sourceNode = nodeGenerator.generate(source, identifier);\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}