{
    "project_name": "delight-im-NationSoccer",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "61",
                "column": "66",
                "severity": "error",
                "message": "'...' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "\t}\n\n\tpublic static final <T> ArrayList<? extends T> toList(final T ... pItems) {\n\t\tfinal ArrayList<T> out = new ArrayList<T>();\n\t\tfinal int itemCount = pItems.length;\n\t\tfor (int i = 0; i < itemCount; i++) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/2/ListUtils.java\nindex 7c1ec9fbd36..d42284dadb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler/2/ListUtils.java\n@@ -58,7 +58,7 @@ public final class ListUtils {\n \t\treturn out;\n \t}\n \n-\tpublic static final <T> ArrayList<? extends T> toList(final T ... pItems) {\n+\tpublic static final <T> ArrayList<? extends T> toList(final T... pItems) {\n \t\tfinal ArrayList<T> out = new ArrayList<T>();\n \t\tfinal int itemCount = pItems.length;\n \t\tfor (int i = 0; i < itemCount; i++) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/2/ListUtils.java\nindex 7c1ec9fbd36..f0059ae6aed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/2/ListUtils.java\n@@ -16,110 +16,114 @@ import org.andengine.util.math.MathUtils;\n  * @since 12:43:39 - 11.03.2010\n  */\n public final class ListUtils {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tprivate ListUtils() {\n-\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tpublic static final <T> IQueue<T> synchronizedQueue(final IQueue<T> pQueue) {\n-\t\treturn new SynchronizedQueue<T>(pQueue);\n-\t}\n-\n-\tpublic static final <T> T random(final List<T> pList) {\n-\t\treturn pList.get(MathUtils.random(0, pList.size() - 1));\n-\t}\n-\n-\tpublic static final <T> ArrayList<? extends T> toList(final T pItem) {\n-\t\tfinal ArrayList<T> out = new ArrayList<T>();\n-\t\tout.add(pItem);\n-\t\treturn out;\n-\t}\n-\n-\tpublic static final <T> ArrayList<? extends T> toList(final T ... pItems) {\n-\t\tfinal ArrayList<T> out = new ArrayList<T>();\n-\t\tfinal int itemCount = pItems.length;\n-\t\tfor (int i = 0; i < itemCount; i++) {\n-\t\t\tout.add(pItems[i]);\n-\t\t}\n-\t\treturn out;\n-\t}\n-\n-\tpublic static final <T> ArrayList<T> filter(final List<T> pItems, final IMatcher<T> pMatcher) {\n-\t\tfinal ArrayList<T> out = new ArrayList<T>();\n-\t\tfinal int itemCount = pItems.size();\n-\t\tfor (int i = 0; i < itemCount; i++) {\n-\t\t\tfinal T item = pItems.get(i);\n-\t\t\tif (pMatcher.matches(item)) {\n-\t\t\t\tout.add(item);\n-\t\t\t}\n-\t\t}\n-\t\treturn out;\n-\t}\n-\n-\tpublic static <T> void swap(final List<T> pItems, final int pIndexA, final int pIndexB) {\n-\t\tfinal T tmp = pItems.get(pIndexA);\n-\t\tpItems.set(pIndexA, pItems.get(pIndexB));\n-\t\tpItems.set(pIndexB, tmp);\n-\t}\n-\n-\tpublic static <T> void swap(final IList<T> pItems, final int pIndexA, final int pIndexB) {\n-\t\tfinal T tmp = pItems.get(pIndexA);\n-\t\tpItems.set(pIndexA, pItems.get(pIndexB));\n-\t\tpItems.set(pIndexB, tmp);\n-\t}\n-\n-\tpublic static final int encodeInsertionIndex(final int pIndex) {\n-\t\treturn (-pIndex) - 1;\n-\t}\n-\n-\tpublic static <T> String toString(final IList<T> pItems) {\n-\t\tfinal int size = pItems.size();\n-\t\tif (size == 0) {\n-\t\t\treturn \"[]\";\n-\t\t} else {\n-\t\t\tfinal StringBuilder stringBuilder = new StringBuilder();\n-\t\t\tstringBuilder.append('[');\n-\t\t\tfor (int i = 0; i < size; i++) {\n-\t\t\t\tfinal T item = pItems.get(i);\n-\n-\t\t\t\tstringBuilder.append(item.toString());\n-\n-\t\t\t\tif (i < size - 1) {\n-\t\t\t\t\tstringBuilder.append(\", \");\n-\t\t\t\t} else {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tstringBuilder.append(']');\n-\n-\t\t\treturn stringBuilder.toString();\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n+    // ===========================================================\n+    // Constants\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Fields\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Constructors\n+    // ===========================================================\n+\n+    private ListUtils() {\n+\n+    }\n+\n+    // ===========================================================\n+    // Getter & Setter\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods for/from SuperClass/Interfaces\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods\n+    // ===========================================================\n+\n+    public static final <T> IQueue<T> synchronizedQueue(\n+        final IQueue<T> pQueue) {\n+        return new SynchronizedQueue<T>(pQueue);\n+    }\n+\n+    public static final <T> T random(final List<T> pList) {\n+        return pList.get(MathUtils.random(0, pList.size() - 1));\n+    }\n+\n+    public static final <T> ArrayList<? extends T> toList(final T pItem) {\n+        final ArrayList<T> out = new ArrayList<T>();\n+        out.add(pItem);\n+        return out;\n+    }\n+\n+    public static final <T> ArrayList<? extends T> toList(final T... pItems) {\n+        final ArrayList<T> out = new ArrayList<T>();\n+        final int itemCount = pItems.length;\n+        for (int i = 0; i < itemCount; i++) {\n+            out.add(pItems[i]);\n+        }\n+        return out;\n+    }\n+\n+    public static final <T> ArrayList<T> filter(final List<T> pItems,\n+                                                final IMatcher<T> pMatcher) {\n+        final ArrayList<T> out = new ArrayList<T>();\n+        final int itemCount = pItems.size();\n+        for (int i = 0; i < itemCount; i++) {\n+            final T item = pItems.get(i);\n+            if (pMatcher.matches(item)) {\n+                out.add(item);\n+            }\n+        }\n+        return out;\n+    }\n+\n+    public static <T> void swap(final List<T> pItems, final int pIndexA,\n+                                final int pIndexB) {\n+        final T tmp = pItems.get(pIndexA);\n+        pItems.set(pIndexA, pItems.get(pIndexB));\n+        pItems.set(pIndexB, tmp);\n+    }\n+\n+    public static <T> void swap(final IList<T> pItems, final int pIndexA,\n+                                final int pIndexB) {\n+        final T tmp = pItems.get(pIndexA);\n+        pItems.set(pIndexA, pItems.get(pIndexB));\n+        pItems.set(pIndexB, tmp);\n+    }\n+\n+    public static final int encodeInsertionIndex(final int pIndex) {\n+        return (-pIndex) - 1;\n+    }\n+\n+    public static <T> String toString(final IList<T> pItems) {\n+        final int size = pItems.size();\n+        if (size == 0) {\n+            return \"[]\";\n+        } else {\n+            final StringBuilder stringBuilder = new StringBuilder();\n+            stringBuilder.append('[');\n+            for (int i = 0; i < size; i++) {\n+                final T item = pItems.get(i);\n+\n+                stringBuilder.append(item.toString());\n+\n+                if (i < size - 1) {\n+                    stringBuilder.append(\", \");\n+                } else {\n+                    break;\n+                }\n+            }\n+            stringBuilder.append(']');\n+\n+            return stringBuilder.toString();\n+        }\n+    }\n+\n+    // ===========================================================\n+    // Inner and Anonymous Classes\n+    // ===========================================================\n }\n",
            "diff_size": 110
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/2/ListUtils.java\nindex 7c1ec9fbd36..72e10471534 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/2/ListUtils.java\n@@ -58,7 +58,7 @@ public final class ListUtils {\n \t\treturn out;\n \t}\n \n-\tpublic static final <T> ArrayList<? extends T> toList(final T ... pItems) {\n+\tpublic static final <T> ArrayList<? extends T> toList(final T... pItems) {\n \t\tfinal ArrayList<T> out = new ArrayList<T>();\n \t\tfinal int itemCount = pItems.length;\n \t\tfor (int i = 0; i < itemCount; i++) {\n@@ -122,4 +122,4 @@ public final class ListUtils {\n \t// ===========================================================\n \t// Inner and Anonymous Classes\n \t// ===========================================================\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/2/ListUtils.java\nindex 7c1ec9fbd36..3a18fca2867 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/2/ListUtils.java\n@@ -2,7 +2,6 @@ package org.andengine.util.adt.list;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.andengine.util.IMatcher;\n import org.andengine.util.adt.queue.IQueue;\n import org.andengine.util.adt.queue.concurrent.SynchronizedQueue;\n@@ -15,111 +14,134 @@ import org.andengine.util.math.MathUtils;\n  * @author Nicolas Gramlich\n  * @since 12:43:39 - 11.03.2010\n  */\n+\n+\n public final class ListUtils {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tprivate ListUtils() {\n-\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\tpublic static final <T> IQueue<T> synchronizedQueue(final IQueue<T> pQueue) {\n-\t\treturn new SynchronizedQueue<T>(pQueue);\n-\t}\n-\n-\tpublic static final <T> T random(final List<T> pList) {\n-\t\treturn pList.get(MathUtils.random(0, pList.size() - 1));\n-\t}\n-\n-\tpublic static final <T> ArrayList<? extends T> toList(final T pItem) {\n-\t\tfinal ArrayList<T> out = new ArrayList<T>();\n-\t\tout.add(pItem);\n-\t\treturn out;\n-\t}\n-\n-\tpublic static final <T> ArrayList<? extends T> toList(final T ... pItems) {\n-\t\tfinal ArrayList<T> out = new ArrayList<T>();\n-\t\tfinal int itemCount = pItems.length;\n-\t\tfor (int i = 0; i < itemCount; i++) {\n-\t\t\tout.add(pItems[i]);\n-\t\t}\n-\t\treturn out;\n-\t}\n-\n-\tpublic static final <T> ArrayList<T> filter(final List<T> pItems, final IMatcher<T> pMatcher) {\n-\t\tfinal ArrayList<T> out = new ArrayList<T>();\n-\t\tfinal int itemCount = pItems.size();\n-\t\tfor (int i = 0; i < itemCount; i++) {\n-\t\t\tfinal T item = pItems.get(i);\n-\t\t\tif (pMatcher.matches(item)) {\n-\t\t\t\tout.add(item);\n-\t\t\t}\n-\t\t}\n-\t\treturn out;\n-\t}\n-\n-\tpublic static <T> void swap(final List<T> pItems, final int pIndexA, final int pIndexB) {\n-\t\tfinal T tmp = pItems.get(pIndexA);\n-\t\tpItems.set(pIndexA, pItems.get(pIndexB));\n-\t\tpItems.set(pIndexB, tmp);\n-\t}\n-\n-\tpublic static <T> void swap(final IList<T> pItems, final int pIndexA, final int pIndexB) {\n-\t\tfinal T tmp = pItems.get(pIndexA);\n-\t\tpItems.set(pIndexA, pItems.get(pIndexB));\n-\t\tpItems.set(pIndexB, tmp);\n-\t}\n-\n-\tpublic static final int encodeInsertionIndex(final int pIndex) {\n-\t\treturn (-pIndex) - 1;\n-\t}\n-\n-\tpublic static <T> String toString(final IList<T> pItems) {\n-\t\tfinal int size = pItems.size();\n-\t\tif (size == 0) {\n-\t\t\treturn \"[]\";\n-\t\t} else {\n-\t\t\tfinal StringBuilder stringBuilder = new StringBuilder();\n-\t\t\tstringBuilder.append('[');\n-\t\t\tfor (int i = 0; i < size; i++) {\n-\t\t\t\tfinal T item = pItems.get(i);\n-\n-\t\t\t\tstringBuilder.append(item.toString());\n-\n-\t\t\t\tif (i < size - 1) {\n-\t\t\t\t\tstringBuilder.append(\", \");\n-\t\t\t\t} else {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tstringBuilder.append(']');\n-\n-\t\t\treturn stringBuilder.toString();\n-\t\t}\n-\t}\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n-}\n+ // ===========================================================\n+ // Constants\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Fields\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Constructors\n+ // ===========================================================\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+ private ListUtils() {\n+\n+ }\n+\n+ // ===========================================================\n+ // Getter & Setter\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Methods for/from SuperClass/Interfaces\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Methods\n+ // ===========================================================\n+\n+\n+\n+\n+\n+ public static final <T> IQueue<T> synchronizedQueue(final IQueue<T> pQueue) {\n+  return new SynchronizedQueue<T>(pQueue);\n+ }\n+\n+ public static final <T> T random(final List<T> pList) {\n+  return pList.get(MathUtils.random(0, pList.size() - 1));\n+ }\n+\n+ public static final <T> ArrayList<? extends T> toList(final T pItem) {\n+  final ArrayList<T> out = new ArrayList<T>();\n+  out.add(pItem);\n+  return out;\n+ }\n+\n+ public static final <T> ArrayList<? extends T> toList(final T... pItems) {\n+  final ArrayList<T> out = new ArrayList<T>();\n+  final int itemCount = pItems.length;\n+  for (int i = 0; i < itemCount; i++) {\n+   out.add(pItems[i]);\n+  }\n+  return out;\n+ }\n+\n+ public static final <T> ArrayList<T> filter(final List<T> pItems, final IMatcher<T> pMatcher) {\n+  final ArrayList<T> out = new ArrayList<T>();\n+  final int itemCount = pItems.size();\n+  for (int i = 0; i < itemCount; i++) {\n+   final T item = pItems.get(i);\n+   if (pMatcher.matches(item)) {\n+       out.add(item);\n+   }\n+  }\n+  return out;\n+ }\n+\n+ public static <T> void swap(final List<T> pItems, final int pIndexA, final int pIndexB) {\n+  final T tmp = pItems.get(pIndexA);\n+  pItems.set(pIndexA, pItems.get(pIndexB));\n+  pItems.set(pIndexB, tmp);\n+ }\n+\n+ public static <T> void swap(final IList<T> pItems, final int pIndexA, final int pIndexB) {\n+  final T tmp = pItems.get(pIndexA);\n+  pItems.set(pIndexA, pItems.get(pIndexB));\n+  pItems.set(pIndexB, tmp);\n+ }\n+\n+ public static final int encodeInsertionIndex(final int pIndex) {\n+  return (-pIndex) - 1;\n+ }\n+\n+ public static <T> String toString(final IList<T> pItems) {\n+  final int size = pItems.size();\n+  if (size == 0) {\n+   return \"[]\";\n+  } else {\n+   final StringBuilder stringBuilder = new StringBuilder();\n+   stringBuilder.append('[');\n+   for (int i = 0; i < size; i++) {\n+    final T item = pItems.get(i);\n+    stringBuilder.append(item.toString());\n+    if (i < size - 1) {\n+     stringBuilder.append(\", \");\n+    } else {\n+     break;\n+    }\n+   }\n+\n+   stringBuilder.append(']');\n+   return stringBuilder.toString();\n+  }\n+ }\n+\n+ // ===========================================================\n+ // Inner and Anonymous Classes\n+ // ===========================================================\n+\n+\n+\n+\n+\n+\n+\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 131
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/2/ListUtils.java\nindex 7c1ec9fbd36..d42284dadb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_random/2/ListUtils.java\n@@ -58,7 +58,7 @@ public final class ListUtils {\n \t\treturn out;\n \t}\n \n-\tpublic static final <T> ArrayList<? extends T> toList(final T ... pItems) {\n+\tpublic static final <T> ArrayList<? extends T> toList(final T... pItems) {\n \t\tfinal ArrayList<T> out = new ArrayList<T>();\n \t\tfinal int itemCount = pItems.length;\n \t\tfor (int i = 0; i < itemCount; i++) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/2/ListUtils.java\nindex 7c1ec9fbd36..d42284dadb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/2/ListUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/styler_three_grams/2/ListUtils.java\n@@ -58,7 +58,7 @@ public final class ListUtils {\n \t\treturn out;\n \t}\n \n-\tpublic static final <T> ArrayList<? extends T> toList(final T ... pItems) {\n+\tpublic static final <T> ArrayList<? extends T> toList(final T... pItems) {\n \t\tfinal ArrayList<T> out = new ArrayList<T>();\n \t\tfinal int itemCount = pItems.length;\n \t\tfor (int i = 0; i < itemCount; i++) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}