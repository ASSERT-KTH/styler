{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "471",
    "information": {
        "errors": [
            {
                "line": "40",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    extends Function1\n{\n\tstatic private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\n\t\tdouble n = 0.0;\n\t\tfor (;;)\n\t\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "41",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/471/SumFunction.java\nindex 14aeb30b345..97ead71e251 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/471/SumFunction.java\n@@ -37,7 +37,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n public final class SumFunction \r\n     extends Function1\r\n {\r\n-\tstatic private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n+static private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n \t\tdouble n = 0.0;\r\n \t\tfor (;;)\r\n \t\t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/471/SumFunction.java\nindex 14aeb30b345..bdbd5f005ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/471/SumFunction.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.functions;\r\n \r\n import org.genxdm.Model;\r\n@@ -34,48 +35,43 @@ import org.genxdm.xpath.v10.NodeIterator;\n import org.genxdm.xpath.v10.NodeSetExpr;\r\n import org.genxdm.xpath.v10.extend.ConvertibleExpr;\r\n \r\n-public final class SumFunction \r\n-    extends Function1\r\n-{\r\n-\tstatic private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n-\t\tdouble n = 0.0;\r\n-\t\tfor (;;)\r\n-\t\t{\r\n-\t\t\tN node = iter.next();\r\n-\t\t\tif (node == null)\r\n-\t\t\t{\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tn += Converter.toNumber(Converter.toString(node, model));\r\n-\t\t}\r\n-\t\treturn n;\r\n-\t}\r\n+public final class SumFunction\r\n+    extends Function1 {\r\n+    static private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n+        double n = 0.0;\r\n+        for (; ; ) {\r\n+            N node = iter.next();\r\n+            if (node == null) {\r\n+                break;\r\n+            }\r\n+            n += Converter.toNumber(Converter.toString(node, model));\r\n+        }\r\n+        return n;\r\n+    }\r\n \r\n-    static private final <N> double sum(final Traverser iter)\r\n-    {\r\n+    static private final <N> double sum(final Traverser iter) {\r\n         double n = 0.0;\r\n-        while(iter.moveToNext())\r\n-        {\r\n+        while (iter.moveToNext()) {\r\n             n += Converter.toNumber(Converter.toString(iter));\r\n         }\r\n         return n;\r\n     }\r\n \r\n-\tConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final StaticContext statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tfinal NodeSetExpr nse = e.makeNodeSetExpr(statEnv);\r\n+    ConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final StaticContext statEnv)\r\n+        throws ExprParseException {\r\n+        final NodeSetExpr nse = e.makeNodeSetExpr(statEnv);\r\n \r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn sum(nse.nodeIterator(model, contextNode, dynEnv), model);\r\n-\t\t\t}\r\n+        return new ConvertibleNumberExpr() {\r\n+            public <N> double numberFunction(Model<N> model, final N contextNode,\r\n+                                             final NodeDynamicContext<N> dynEnv) {\r\n+                return sum(nse.nodeIterator(model, contextNode, dynEnv), model);\r\n+            }\r\n \r\n             @Override\r\n             public double numberFunction(TraversingInformer contextNode,\r\n-                    TraverserDynamicContext dynEnv) {\r\n+                                         TraverserDynamicContext dynEnv) {\r\n                 return sum(nse.traverseNodes(contextNode, dynEnv));\r\n             }\r\n-\t\t};\r\n-\t}\r\n+        };\r\n+    }\r\n }\r\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/471/SumFunction.java\nindex 14aeb30b345..f6cd2b9b787 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/471/SumFunction.java\n@@ -35,47 +35,46 @@ import org.genxdm.xpath.v10.NodeSetExpr;\n import org.genxdm.xpath.v10.extend.ConvertibleExpr;\r\n \r\n public final class SumFunction \r\n-    extends Function1\r\n-{\r\n-\tstatic private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n-\t\tdouble n = 0.0;\r\n+    extends Function1\n+{\n+\n+static private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) { double n = 0.0;\r\n \t\tfor (;;)\r\n-\t\t{\r\n-\t\t\tN node = iter.next();\r\n+\t\t{\n+    N node = iter.next();\r\n \t\t\tif (node == null)\r\n-\t\t\t{\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tn += Converter.toNumber(Converter.toString(node, model));\r\n-\t\t}\r\n-\t\treturn n;\r\n-\t}\r\n-\r\n-    static private final <N> double sum(final Traverser iter)\r\n+\t\t\t{\n+    break;\n+    }\r\n+\t\t\tn += Converter.toNumber(Converter.toString(node, model));\n+    }\r\n+\t\treturn n;\n+    }\n+\n+static private final <N> double sum(final Traverser iter)\r\n     {\r\n         double n = 0.0;\r\n-        while(iter.moveToNext())\r\n+        while (iter.moveToNext())\r\n         {\r\n             n += Converter.toNumber(Converter.toString(iter));\r\n         }\r\n         return n;\r\n-    }\r\n-\r\n-\tConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final StaticContext statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tfinal NodeSetExpr nse = e.makeNodeSetExpr(statEnv);\r\n+    }\n+ConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final StaticContext statEnv) throws ExprParseException\r\n+\t{\n+    final NodeSetExpr nse = e.makeNodeSetExpr(statEnv);\r\n \r\n \t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn sum(nse.nodeIterator(model, contextNode, dynEnv), model);\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n+\t\t{\n+    public <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\n+    return sum(nse.nodeIterator(model, contextNode, dynEnv), model);\n+    }\n+\n+@Override\r\n             public double numberFunction(TraversingInformer contextNode,\r\n                     TraverserDynamicContext dynEnv) {\r\n                 return sum(nse.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n-}\r\n+            }\n+    };\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/471/SumFunction.java\nindex 14aeb30b345..e23b863deeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/471/SumFunction.java\n@@ -18,64 +18,65 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.functions;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.nodes.Traverser;\r\n-import org.genxdm.nodes.TraversingInformer;\r\n-import org.genxdm.processor.xpath.v10.expressions.ConvertibleExprImpl;\r\n-import org.genxdm.processor.xpath.v10.expressions.ConvertibleNumberExpr;\r\n-import org.genxdm.xpath.v10.Converter;\r\n-import org.genxdm.xpath.v10.TraverserDynamicContext;\r\n-import org.genxdm.xpath.v10.NodeDynamicContext;\r\n-import org.genxdm.xpath.v10.StaticContext;\r\n-import org.genxdm.xpath.v10.ExprParseException;\r\n-import org.genxdm.xpath.v10.NodeIterator;\r\n-import org.genxdm.xpath.v10.NodeSetExpr;\r\n-import org.genxdm.xpath.v10.extend.ConvertibleExpr;\r\n-\r\n-public final class SumFunction \r\n-    extends Function1\r\n-{\r\n-\tstatic private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n-\t\tdouble n = 0.0;\r\n-\t\tfor (;;)\r\n-\t\t{\r\n-\t\t\tN node = iter.next();\r\n-\t\t\tif (node == null)\r\n-\t\t\t{\r\n-\t\t\t\tbreak;\r\n-\t\t\t}\r\n-\t\t\tn += Converter.toNumber(Converter.toString(node, model));\r\n-\t\t}\r\n-\t\treturn n;\r\n-\t}\r\n-\r\n-    static private final <N> double sum(final Traverser iter)\r\n-    {\r\n-        double n = 0.0;\r\n-        while(iter.moveToNext())\r\n-        {\r\n-            n += Converter.toNumber(Converter.toString(iter));\r\n-        }\r\n-        return n;\r\n-    }\r\n-\r\n-\tConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final StaticContext statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tfinal NodeSetExpr nse = e.makeNodeSetExpr(statEnv);\r\n-\r\n-\t\treturn new ConvertibleNumberExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv) {\r\n-\t\t\t\treturn sum(nse.nodeIterator(model, contextNode, dynEnv), model);\r\n-\t\t\t}\r\n-\r\n-            @Override\r\n-            public double numberFunction(TraversingInformer contextNode,\r\n-                    TraverserDynamicContext dynEnv) {\r\n-                return sum(nse.traverseNodes(contextNode, dynEnv));\r\n-            }\r\n-\t\t};\r\n-\t}\r\n-}\r\n+package org.genxdm.processor.xpath.v10.functions;\n+\n+import org.genxdm.Model;\n+import org.genxdm.nodes.Traverser;\n+import org.genxdm.nodes.TraversingInformer;\n+import org.genxdm.processor.xpath.v10.expressions.ConvertibleExprImpl;\n+import org.genxdm.processor.xpath.v10.expressions.ConvertibleNumberExpr;\n+import org.genxdm.xpath.v10.Converter;\n+import org.genxdm.xpath.v10.TraverserDynamicContext;\n+import org.genxdm.xpath.v10.NodeDynamicContext;\n+import org.genxdm.xpath.v10.StaticContext;\n+import org.genxdm.xpath.v10.ExprParseException;\n+import org.genxdm.xpath.v10.NodeIterator;\n+import org.genxdm.xpath.v10.NodeSetExpr;\n+import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n+\n+public final class SumFunction extends Function1\n+{\n+    static private final <N> double sum(final NodeIterator<N> iter, final Model<N> model)\n+    {\n+        double n = 0.0;\n+        for (;;)\n+        {\n+            N node = iter.next();\n+            if (node == null)\n+            {\n+                break;\n+            }\n+            n += Converter.toNumber(Converter.toString(node, model));\n+        }\n+        return n;\n+    }\n+\n+    static private final <N> double sum(final Traverser iter)\n+    {\n+        double n = 0.0;\n+        while (iter.moveToNext())\n+        {\n+            n += Converter.toNumber(Converter.toString(iter));\n+        }\n+        return n;\n+    }\n+\n+    ConvertibleExprImpl makeCallExpr(final ConvertibleExpr e, final StaticContext statEnv)\n+        throws ExprParseException\n+    {\n+        final NodeSetExpr nse = e.makeNodeSetExpr(statEnv);\n+        return new ConvertibleNumberExpr()\n+        {\n+            public <N> double numberFunction(Model<N> model, final N contextNode, final NodeDynamicContext<N> dynEnv)\n+            {\n+                return sum(nse.nodeIterator(model, contextNode, dynEnv), model);\n+            }\n+\n+            @Override\n+            public double numberFunction(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+            {\n+                return sum(nse.traverseNodes(contextNode, dynEnv));\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "41",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/471/SumFunction.java\nindex 14aeb30b345..97ead71e251 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/471/SumFunction.java\n@@ -37,7 +37,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n public final class SumFunction \r\n     extends Function1\r\n {\r\n-\tstatic private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n+static private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n \t\tdouble n = 0.0;\r\n \t\tfor (;;)\r\n \t\t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "41",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/471/SumFunction.java\nindex 14aeb30b345..ea2bd429407 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/471/SumFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/471/SumFunction.java\n@@ -37,7 +37,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n public final class SumFunction \r\n     extends Function1\r\n {\r\n-\tstatic private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n+    static private final <N> double sum(final NodeIterator<N> iter, final Model<N> model) {\r\n \t\tdouble n = 0.0;\r\n \t\tfor (;;)\r\n \t\t{\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}