{
    "project_name": "graphfoundation-ongdb",
    "error_id": "372",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "90",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "102",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "181",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/372/TentativeConstraintIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/372/TentativeConstraintIndexProxy.java\nindex 93aa0d5a1f6..a0a97769c75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/372/TentativeConstraintIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/372/TentativeConstraintIndexProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.IOException;\n@@ -47,7 +48,7 @@ import org.neo4j.storageengine.api.schema.IndexReader;\n  * <li>In T: Sit and wait for the index to be built</li>\n  * <li>In T: Create the constraint rule and connect the two</li>\n  * </ol>\n- *\n+ * <p>\n  * The fully populated index flips to a tentative index. The reason for that is to guard for incoming transactions\n  * that gets applied.\n  * Such incoming transactions have potentially been verified on another instance with a slightly dated view\n@@ -60,127 +61,124 @@ import org.neo4j.storageengine.api.schema.IndexReader;\n  */\n public class TentativeConstraintIndexProxy extends AbstractDelegatingIndexProxy\n {\n-    private final FlippableIndexProxy flipper;\n-    private final OnlineIndexProxy target;\n-    private final Collection<IndexEntryConflictException> failures = new CopyOnWriteArrayList<>();\n-\n-    public TentativeConstraintIndexProxy( FlippableIndexProxy flipper, OnlineIndexProxy target )\n-    {\n-        this.flipper = flipper;\n-        this.target = target;\n-    }\n-\n-    @Override\n-    public IndexUpdater newUpdater( IndexUpdateMode mode )\n+  private final FlippableIndexProxy flipper;\n+  private final OnlineIndexProxy target;\n+  private final Collection<IndexEntryConflictException> failures = new CopyOnWriteArrayList<>();\n+\n+  public TentativeConstraintIndexProxy(FlippableIndexProxy flipper, OnlineIndexProxy target)\n+  {\n+    this.flipper = flipper;\n+    this.target = target;\n+  }\n+\n+  @Override\n+  public IndexUpdater newUpdater(IndexUpdateMode mode)\n+  {\n+    switch (mode)\n     {\n-        switch ( mode )\n+      case ONLINE:\n+        return new DelegatingIndexUpdater(new DeferredConflictCheckingIndexUpdater(\n+            target.accessor.newUpdater(mode), target::newReader, target.getDescriptor()))\n         {\n-            case ONLINE:\n-                return new DelegatingIndexUpdater( new DeferredConflictCheckingIndexUpdater(\n-                        target.accessor.newUpdater( mode ), target::newReader, target.getDescriptor() ) )\n-                {\n-                    @Override\n-                    public void process( IndexEntryUpdate<?> update )\n-                            throws IOException\n-                    {\n-                        try\n-                        {\n-                            delegate.process( update );\n-                        }\n-                        catch ( IndexEntryConflictException conflict )\n-                        {\n-                            failures.add( conflict );\n-                        }\n-                    }\n-\n-                    @Override\n-                    public void close() throws IOException\n-                    {\n-                        try\n-                        {\n-                            delegate.close();\n-                        }\n-                        catch ( IndexEntryConflictException conflict )\n-                        {\n-                            failures.add( conflict );\n-                        }\n-                    }\n-                };\n-\n-            case RECOVERY:\n-                return super.newUpdater( mode );\n-\n-            default:\n-                throw new IllegalArgumentException( \"Unsupported update mode: \" + mode );\n-\n-        }\n-    }\n-\n-    @Override\n-    public InternalIndexState getState()\n-    {\n-        return failures.isEmpty() ? InternalIndexState.POPULATING : InternalIndexState.FAILED;\n-    }\n+          @Override\n+          public void process(IndexEntryUpdate<?> update)\n+              throws IOException\n+          {\n+            try\n+            {\n+              delegate.process(update);\n+            } catch (IndexEntryConflictException conflict)\n+            {\n+              failures.add(conflict);\n+            }\n+          }\n+\n+          @Override\n+          public void close() throws IOException\n+          {\n+            try\n+            {\n+              delegate.close();\n+            } catch (IndexEntryConflictException conflict)\n+            {\n+              failures.add(conflict);\n+            }\n+          }\n+        };\n+\n+      case RECOVERY:\n+        return super.newUpdater(mode);\n+\n+      default:\n+        throw new IllegalArgumentException(\"Unsupported update mode: \" + mode);\n \n-    @Override\n-    public String toString()\n-    {\n-        return getClass().getSimpleName() + \"[target:\" + target + \"]\";\n     }\n-\n-    @Override\n-    public IndexReader newReader() throws IndexNotFoundKernelException\n+  }\n+\n+  @Override\n+  public InternalIndexState getState()\n+  {\n+    return failures.isEmpty() ? InternalIndexState.POPULATING : InternalIndexState.FAILED;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[target:\" + target + \"]\";\n+  }\n+\n+  @Override\n+  public IndexReader newReader() throws IndexNotFoundKernelException\n+  {\n+    throw new IndexNotFoundKernelException(getDescriptor() + \" is still populating\");\n+  }\n+\n+  @Override\n+  protected IndexProxy getDelegate()\n+  {\n+    return target;\n+  }\n+\n+  @Override\n+  public void verifyDeferredConstraints(PropertyAccessor accessor) throws IndexEntryConflictException, IOException\n+  {\n+    // If we've seen constraint violation failures in here when updates came in then fail immediately with those\n+    if (!failures.isEmpty())\n     {\n-        throw new IndexNotFoundKernelException( getDescriptor() + \" is still populating\" );\n+      Iterator<IndexEntryConflictException> failureIterator = failures.iterator();\n+      IndexEntryConflictException conflict = failureIterator.next();\n+      failureIterator.forEachRemaining(conflict::addSuppressed);\n+      throw conflict;\n     }\n \n-    @Override\n-    protected IndexProxy getDelegate()\n-    {\n-        return target;\n-    }\n+    // Otherwise consolidate the usual verification\n+    super.verifyDeferredConstraints(accessor);\n+  }\n \n-    @Override\n-    public void verifyDeferredConstraints( PropertyAccessor accessor ) throws IndexEntryConflictException, IOException\n+  @Override\n+  public void validate() throws UniquePropertyValueValidationException\n+  {\n+    if (!failures.isEmpty())\n     {\n-        // If we've seen constraint violation failures in here when updates came in then fail immediately with those\n-        if ( !failures.isEmpty() )\n-        {\n-            Iterator<IndexEntryConflictException> failureIterator = failures.iterator();\n-            IndexEntryConflictException conflict = failureIterator.next();\n-            failureIterator.forEachRemaining( conflict::addSuppressed );\n-            throw conflict;\n-        }\n-\n-        // Otherwise consolidate the usual verification\n-        super.verifyDeferredConstraints( accessor );\n+      SchemaDescriptor descriptor = getDescriptor().schema();\n+      throw new UniquePropertyValueValidationException(\n+          ConstraintDescriptorFactory.uniqueForLabel(descriptor.keyId(), descriptor.getPropertyIds()),\n+          ConstraintValidationException.Phase.VERIFICATION,\n+          new HashSet<>(failures)\n+      );\n     }\n+  }\n \n-    @Override\n-    public void validate() throws UniquePropertyValueValidationException\n+  @Override\n+  public void activate()\n+  {\n+    if (failures.isEmpty())\n     {\n-        if ( !failures.isEmpty() )\n-        {\n-            SchemaDescriptor descriptor = getDescriptor().schema();\n-            throw new UniquePropertyValueValidationException(\n-                    ConstraintDescriptorFactory.uniqueForLabel( descriptor.keyId(), descriptor.getPropertyIds() ),\n-                    ConstraintValidationException.Phase.VERIFICATION,\n-                    new HashSet<>( failures )\n-                );\n-        }\n-    }\n-\n-    @Override\n-    public void activate()\n+      flipper.flipTo(target);\n+    } else\n     {\n-        if ( failures.isEmpty() )\n-        {\n-            flipper.flipTo( target );\n-        }\n-        else\n-        {\n-            throw new IllegalStateException(\n-                    \"Trying to activate failed index, should have checked the failures earlier...\" );\n-        }\n+      throw new IllegalStateException(\n+          \"Trying to activate failed index, should have checked the failures earlier...\");\n     }\n+  }\n }\n",
            "diff_size": 152
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}