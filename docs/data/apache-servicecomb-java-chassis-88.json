{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "88",
    "information": {
        "errors": [
            {
                "line": "138",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n      StringBuilderUtils.appendLine(sb,\n          \"  %d.instanceId=%s, status=%s, version=%s, endpoints=%s, environment=%s, framework.name=%s, framework.version=%s\",\n          idx,\n          instance.getInstanceId(), instance.getStatus(), microserviceVersion.getVersion(), instance.getEndpoints(),\n          microservice.getEnvironment(), frameworkName, frameworkVersion);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/88/MicroserviceVersionRule.java\nindex 5e09dfdb10a..b4046a3216d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/88/MicroserviceVersionRule.java\n@@ -89,8 +89,7 @@ public class MicroserviceVersionRule {\n   }\n \n   /**\n-   *\n-   * @param allVersions all versions even not belongs to this rule\n+   * @param allVersions  all versions even not belongs to this rule\n    * @param allInstances all instances even not belongs to this rule, related MicroserviceVersion always exists\n    */\n   public void update(Map<String, MicroserviceVersion> allVersions, Collection<MicroserviceInstance> allInstances) {\n@@ -166,7 +165,7 @@ public class MicroserviceVersionRule {\n   }\n \n   private MicroserviceVersion findLatest(Map<String, MicroserviceVersion> allVersions,\n-      Collection<MicroserviceInstance> allInstances) {\n+                                         Collection<MicroserviceInstance> allInstances) {\n     if (allInstances.isEmpty()) {\n       return allVersions.isEmpty() ? null : allVersions.values().stream()\n           .max(Comparator.comparing(MicroserviceVersion::getVersion))\n@@ -185,7 +184,7 @@ public class MicroserviceVersionRule {\n   }\n \n   private MicroserviceVersionRuleData createDataByLatestRule(Map<String, MicroserviceVersion> allVersions,\n-      Collection<MicroserviceInstance> allInstances) {\n+                                                             Collection<MicroserviceInstance> allInstances) {\n     // find latest\n     MicroserviceVersion latestVersion = findLatest(allVersions, allInstances);\n     if (latestVersion == null) {\n@@ -208,7 +207,7 @@ public class MicroserviceVersionRule {\n   }\n \n   private MicroserviceVersionRuleData createDataByOtherRule(Map<String, MicroserviceVersion> allVersions,\n-      Collection<MicroserviceInstance> allInstances) {\n+                                                            Collection<MicroserviceInstance> allInstances) {\n     MicroserviceVersionRuleData data = new MicroserviceVersionRuleData();\n \n     // filter versions\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/88/MicroserviceVersionRule.java\nindex 5e09dfdb10a..32f25153f28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/88/MicroserviceVersionRule.java\n@@ -125,8 +125,7 @@ public class MicroserviceVersionRule {\n                 + \", latestVersion=%s, inputVersionCount=%s, inputInstanceCount=%s\",\n             appId, microserviceName, versionRule.getVersionRule(),\n             latestVersion, inputVersionCount, inputInstanceCount);\n-\n-    int idx = 0;\n+int idx = 0;\n     for (MicroserviceInstance instance : data.getInstances().values()) {\n       MicroserviceVersion microserviceVersion = data.versions.get(instance.getServiceId());\n       Microservice microservice = microserviceVersion.getMicroservice();\n@@ -138,8 +137,7 @@ public class MicroserviceVersionRule {\n           \"  %d.instanceId=%s, status=%s, version=%s, endpoints=%s, environment=%s, framework.name=%s, framework.version=%s\",\n           idx,\n           instance.getInstanceId(), instance.getStatus(), microserviceVersion.getVersion(), instance.getEndpoints(),\n-          microservice.getEnvironment(), frameworkName, frameworkVersion);\n-      idx++;\n+          microservice.getEnvironment(), frameworkName, frameworkVersion); idx++;\n     }\n \n     LOGGER.info(StringBuilderUtils.deleteLast(sb, 1).toString());\n@@ -230,4 +228,4 @@ public class MicroserviceVersionRule {\n \n     return data;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 297).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 282).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 332).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "171",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/88/MicroserviceVersionRule.java\nindex 5e09dfdb10a..3c36bf2ba5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/88/MicroserviceVersionRule.java\n@@ -23,7 +23,6 @@ import java.util.Comparator;\n import java.util.Map;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n-\n import org.apache.servicecomb.foundation.common.cache.VersionedCache;\n import org.apache.servicecomb.foundation.common.utils.StringBuilderUtils;\n import org.apache.servicecomb.serviceregistry.api.registry.Framework;\n@@ -46,13 +45,13 @@ public class MicroserviceVersionRule {\n   private final VersionRule versionRule;\n \n   // wrap variable data to make them atomic\n+\n   private MicroserviceVersionRuleData data;\n \n   public MicroserviceVersionRule(String appId, String microserviceName, String strVersionRule) {\n     this.appId = appId;\n     this.microserviceName = microserviceName;\n     this.versionRule = VersionRuleUtils.getOrCreate(strVersionRule);\n-\n     data = createEmptyData();\n   }\n \n@@ -93,6 +92,7 @@ public class MicroserviceVersionRule {\n    * @param allVersions all versions even not belongs to this rule\n    * @param allInstances all instances even not belongs to this rule, related MicroserviceVersion always exists\n    */\n+\n   public void update(Map<String, MicroserviceVersion> allVersions, Collection<MicroserviceInstance> allInstances) {\n     if (allInstances == null) {\n       allInstances = Collections.emptyList();\n@@ -110,21 +110,12 @@ public class MicroserviceVersionRule {\n   private void printData(MicroserviceVersionRuleData data, int inputVersionCount, int inputInstanceCount) {\n     String latestVersion = data.latestVersion == null ? null : data.latestVersion.getVersion().getVersion();\n     if (data.getInstances().isEmpty()) {\n-      LOGGER.info(\n-          \"update instances to be empty caused by version rule, appId={}, microserviceName={}, versionRule={}\"\n-              + \", latestVersion={}, inputVersionCount={}, inputInstanceCount={}\",\n-          appId, microserviceName, versionRule.getVersionRule(),\n-          latestVersion, inputVersionCount, inputInstanceCount);\n+      LOGGER.info(\"update instances to be empty caused by version rule, appId={}, microserviceName={}, versionRule={}\" + \", latestVersion={}, inputVersionCount={}, inputInstanceCount={}\", appId, microserviceName, versionRule.getVersionRule(), latestVersion, inputVersionCount, inputInstanceCount);\n       return;\n     }\n \n     StringBuilder sb = new StringBuilder();\n-    StringBuilderUtils\n-        .appendLine(sb,\n-            \"update instances, appId=%s, microserviceName=%s, versionRule=%s\"\n-                + \", latestVersion=%s, inputVersionCount=%s, inputInstanceCount=%s\",\n-            appId, microserviceName, versionRule.getVersionRule(),\n-            latestVersion, inputVersionCount, inputInstanceCount);\n+    StringBuilderUtils.appendLine(sb, \"update instances, appId=%s, microserviceName=%s, versionRule=%s\" + \", latestVersion=%s, inputVersionCount=%s, inputInstanceCount=%s\", appId, microserviceName, versionRule.getVersionRule(), latestVersion, inputVersionCount, inputInstanceCount);\n \n     int idx = 0;\n     for (MicroserviceInstance instance : data.getInstances().values()) {\n@@ -133,12 +124,7 @@ public class MicroserviceVersionRule {\n       Framework framework = microservice.getFramework();\n       String frameworkName = framework == null ? \"unknown\" : framework.getName();\n       String frameworkVersion = framework == null ? \"unknown\" : framework.getVersion();\n-\n-      StringBuilderUtils.appendLine(sb,\n-          \"  %d.instanceId=%s, status=%s, version=%s, endpoints=%s, environment=%s, framework.name=%s, framework.version=%s\",\n-          idx,\n-          instance.getInstanceId(), instance.getStatus(), microserviceVersion.getVersion(), instance.getEndpoints(),\n-          microservice.getEnvironment(), frameworkName, frameworkVersion);\n+      StringBuilderUtils.appendLine(sb, \"  %d.instanceId=%s, status=%s, version=%s, endpoints=%s, environment=%s, framework.name=%s, framework.version=%s\", idx, instance.getInstanceId(), instance.getStatus(), microserviceVersion.getVersion(), instance.getEndpoints(), microservice.getEnvironment(), frameworkName, frameworkVersion);\n       idx++;\n     }\n \n@@ -151,10 +137,9 @@ public class MicroserviceVersionRule {\n     }\n \n     data.instanceCache = new InstanceCache(appId, microserviceName, versionRule.getVersionRule(), data.instances);\n-    data.versionedCache = new VersionedCache()\n-        .name(versionRule.getVersionRule())\n-        .autoCacheVersion()\n-        .data(data.instances);\n+    data.versionedCache = new VersionedCache().name(versionRule.getVersionRule())\n+                                              .autoCacheVersion()\n+                                              .data(data.instances);\n   }\n \n   private MicroserviceVersionRuleData createEmptyData() {\n@@ -165,12 +150,11 @@ public class MicroserviceVersionRule {\n     return data;\n   }\n \n-  private MicroserviceVersion findLatest(Map<String, MicroserviceVersion> allVersions,\n-      Collection<MicroserviceInstance> allInstances) {\n+  private MicroserviceVersion findLatest(Map<String, MicroserviceVersion> allVersions, Collection<MicroserviceInstance> allInstances) {\n     if (allInstances.isEmpty()) {\n       return allVersions.isEmpty() ? null : allVersions.values().stream()\n-          .max(Comparator.comparing(MicroserviceVersion::getVersion))\n-          .get();\n+                                                                .max(Comparator.comparing(MicroserviceVersion::getVersion))\n+                                                                .get();\n     }\n \n     MicroserviceVersion latestVersion = null;\n@@ -184,8 +168,7 @@ public class MicroserviceVersionRule {\n     return latestVersion;\n   }\n \n-  private MicroserviceVersionRuleData createDataByLatestRule(Map<String, MicroserviceVersion> allVersions,\n-      Collection<MicroserviceInstance> allInstances) {\n+  private MicroserviceVersionRuleData createDataByLatestRule(Map<String, MicroserviceVersion> allVersions, Collection<MicroserviceInstance> allInstances) {\n     // find latest\n     MicroserviceVersion latestVersion = findLatest(allVersions, allInstances);\n     if (latestVersion == null) {\n@@ -193,41 +176,34 @@ public class MicroserviceVersionRule {\n     }\n \n     MicroserviceVersionRuleData data = new MicroserviceVersionRuleData();\n-\n     String serviceId = latestVersion.getMicroservice().getServiceId();\n     data.latestVersion = latestVersion;\n     data.versions = Collections.singletonMap(serviceId, latestVersion);\n-    data.instances = allInstances.stream()\n-        .filter(instance -> instance.getServiceId().equals(serviceId))\n-        .collect(Collectors.toMap(MicroserviceInstance::getInstanceId, Function.identity()));\n+    data.instances = allInstances.stream().filter(instance -> instance.getServiceId().equals(serviceId))\n+                                          .collect(Collectors.toMap(MicroserviceInstance::getInstanceId, Function.identity()));\n     data.instances = Collections.unmodifiableMap(data.instances);\n-\n     initData(data);\n-\n     return data;\n   }\n \n-  private MicroserviceVersionRuleData createDataByOtherRule(Map<String, MicroserviceVersion> allVersions,\n-      Collection<MicroserviceInstance> allInstances) {\n+  private MicroserviceVersionRuleData createDataByOtherRule(Map<String, MicroserviceVersion> allVersions, Collection<MicroserviceInstance> allInstances) {\n     MicroserviceVersionRuleData data = new MicroserviceVersionRuleData();\n \n     // filter versions\n     data.versions = allVersions.values().stream()\n-        .filter(v -> versionRule.isAccept(v.version))\n-        .collect(Collectors.toMap(MicroserviceVersion::getMicroserviceId, Function.identity()));\n+                                        .filter(v -> versionRule.isAccept(v.version))\n+                                        .collect(Collectors.toMap(MicroserviceVersion::getMicroserviceId, Function.identity()));\n     data.versions = Collections.unmodifiableMap(data.versions);\n     if (data.versions.isEmpty()) {\n       return createEmptyData();\n     }\n \n     // filter instances\n-    data.instances = allInstances.stream()\n-        .filter(instance -> data.versions.containsKey(instance.getServiceId()))\n-        .collect(Collectors.toMap(MicroserviceInstance::getInstanceId, Function.identity()));\n-    data.instances = Collections.unmodifiableMap(data.instances);\n \n+    data.instances = allInstances.stream().filter(instance -> data.versions.containsKey(instance.getServiceId()))\n+                                          .collect(Collectors.toMap(MicroserviceInstance::getInstanceId, Function.identity()));\n+    data.instances = Collections.unmodifiableMap(data.instances);\n     initData(data);\n-\n     return data;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "column": "126",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/88/MicroserviceVersionRule.java\nindex 5e09dfdb10a..b93e43e6395 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/88/MicroserviceVersionRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/88/MicroserviceVersionRule.java\n@@ -135,8 +135,7 @@ public class MicroserviceVersionRule {\n       String frameworkVersion = framework == null ? \"unknown\" : framework.getVersion();\n \n       StringBuilderUtils.appendLine(sb,\n-          \"  %d.instanceId=%s, status=%s, version=%s, endpoints=%s, environment=%s, framework.name=%s, framework.version=%s\",\n-          idx,\n+          \"  %d.instanceId=%s, status=%s, version=%s, endpoints=%s, environment=%s, framework.name=%s, framework.version=%s\",idx,\n           instance.getInstanceId(), instance.getStatus(), microserviceVersion.getVersion(), instance.getEndpoints(),\n           microservice.getEnvironment(), frameworkName, frameworkVersion);\n       idx++;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}