{
    "project_name": "Angel-ML-angel",
    "error_id": "83",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/83/ServerLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/83/ServerLongIntRow.java\nindex fd31be70e0b..195373ba946 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/83/ServerLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/83/ServerLongIntRow.java\n@@ -42,25 +42,25 @@ public class ServerLongIntRow extends ServerIntRow {\n   /**\n    * Create a new ServerIntIntRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n-   * @param innerRow the inner row\n+   * @param innerRow   the inner row\n    */\n   public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      IntVector innerRow) {\n+                          IntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n   /**\n    * Create a new ServerIntIntRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n@@ -132,7 +132,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * Set a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements values\n+   * @param values  elements values\n    */\n   public void set(long[] indices, int[] values) {\n     assert indices.length == values.length;\n@@ -161,7 +161,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * Add a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements plus values\n+   * @param values  elements plus values\n    */\n   public void addTo(long[] indices, int[] values) {\n     assert indices.length == values.length;\n@@ -419,7 +419,7 @@ public class ServerLongIntRow extends ServerIntRow {\n \n   @Override\n   public ServerRow\n-adaptiveClone() {\n+  adaptiveClone() {\n     startRead();\n     try {\n       if (useIntKey) {\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "404",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "406",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "420",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "422",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "426",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/83/ServerLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/83/ServerLongIntRow.java\nindex fd31be70e0b..e081102c943 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/83/ServerLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/83/ServerLongIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -192,20 +191,16 @@ public class ServerLongIntRow extends ServerIntRow {\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongIntSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -406,11 +401,9 @@ public class ServerLongIntRow extends ServerIntRow {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntIntVector) row).clone());\n-      } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row).clone());\n+  } else {\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongIntVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -418,26 +411,19 @@ public class ServerLongIntRow extends ServerIntRow {\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (useIntKey) {\n         if (row.isSparse()) {\n           return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedIntVector((int) (endCol - startCol),\n-                  ((IntIntVector) row).getStorage().getIndices(),\n-                  ((IntIntVector) row).getStorage().getValues()));\n-        } else {\n-          return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              ((IntIntVector) row));\n-        }\n-\n-      } else {\n+              VFactory.sortedIntVector((int) (endCol - startCol), ((IntIntVector) row).getStorage().getIndices(), ((IntIntVector) row).getStorage().getValues()));\n+  } else {\n+          return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row));\n+  }\n+  } else {\n         return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyIntVector(endCol - startCol,\n-                ((LongIntVector) row).getStorage().getIndices(),\n-                ((LongIntVector) row).getStorage().getValues()));\n+            VFactory.sortedLongKeyIntVector(endCol - startCol, ((LongIntVector) row).getStorage().getIndices(), ((LongIntVector) row).getStorage().getValues()));\n       }\n     } finally {\n       endRead();\n@@ -479,7 +465,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeInt(initAndGet(in.readInt(), func));\n@@ -533,4 +519,4 @@ adaptiveClone() {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "335",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "415",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "417",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "430",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "434",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "437",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/83/ServerLongIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/83/ServerLongIntRow.java\nindex fd31be70e0b..6be5e24d0f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/83/ServerLongIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/83/ServerLongIntRow.java\n@@ -37,6 +37,7 @@ import java.io.IOException;\n /**\n  * The row with \"long\" index type and \"int\" value type in PS\n  */\n+\n public class ServerLongIntRow extends ServerIntRow {\n \n   /**\n@@ -49,8 +50,8 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow the inner row\n    */\n-  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      IntVector innerRow) {\n+\n+  public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, IntVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n@@ -63,6 +64,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n+\n   public ServerLongIntRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n@@ -70,6 +72,7 @@ public class ServerLongIntRow extends ServerIntRow {\n   /**\n    * Create a new ServerLongIntRow\n    */\n+\n   public ServerLongIntRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -85,6 +88,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public int get(long index) {\n     if (useIntKey) {\n       return ((IntIntVector) row).get((int) (index - startCol));\n@@ -99,6 +103,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(long index, int value) {\n     if (useIntKey) {\n       ((IntIntVector) row).set((int) (index - startCol), value);\n@@ -113,6 +118,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public int[] get(long[] indices) {\n     int[] values = new int[indices.length];\n     if (useIntKey) {\n@@ -124,7 +130,6 @@ public class ServerLongIntRow extends ServerIntRow {\n         values[i] = ((LongIntVector) row).get(indices[i] - startCol);\n       }\n     }\n-\n     return values;\n   }\n \n@@ -134,6 +139,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     if (useIntKey) {\n@@ -153,6 +159,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(long index, int value) {\n     set(index, get(index) + value);\n   }\n@@ -163,6 +170,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(long[] indices, int[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -175,6 +183,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    *\n    * @return all element values\n    */\n+\n   private int[] getValues() {\n     if (useIntKey) {\n       return ((IntIntVector) row).getStorage().getValues();\n@@ -184,7 +193,8 @@ public class ServerLongIntRow extends ServerIntRow {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -192,23 +202,19 @@ public class ServerLongIntRow extends ServerIntRow {\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongIntSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n-      }\n \n+      }\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -308,6 +314,7 @@ public class ServerLongIntRow extends ServerIntRow {\n    *\n    * @param mergedRow the dest row\n    */\n+\n   public void mergeTo(LongIntVector mergedRow) {\n     startRead();\n     try {\n@@ -325,8 +332,7 @@ public class ServerLongIntRow extends ServerIntRow {\n             mergedRow.set(entry.getIntKey() + startCol, entry.getIntValue());\n           }\n         } else {\n-          ObjectIterator<Long2IntMap.Entry> iter =\n-              ((LongIntVector) row).getStorage().entryIterator();\n+          ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVector) row).getStorage().entryIterator();\n           Long2IntMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n@@ -406,11 +412,9 @@ public class ServerLongIntRow extends ServerIntRow {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row).clone());\n       } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongIntVector) row).clone());\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongIntVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -418,26 +422,21 @@ public class ServerLongIntRow extends ServerIntRow {\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       if (useIntKey) {\n         if (row.isSparse()) {\n-          return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedIntVector((int) (endCol - startCol),\n-                  ((IntIntVector) row).getStorage().getIndices(),\n-                  ((IntIntVector) row).getStorage().getValues()));\n+          return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedIntVector((int) (endCol - startCol),\n+                                     ((IntIntVector) row).getStorage().getIndices(),\n+                                     ((IntIntVector) row).getStorage().getValues()));\n         } else {\n-          return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              ((IntIntVector) row));\n+          return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntIntVector) row));\n         }\n-\n       } else {\n-        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyIntVector(endCol - startCol,\n-                ((LongIntVector) row).getStorage().getIndices(),\n-                ((LongIntVector) row).getStorage().getValues()));\n+        return new ServerLongIntRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedLongKeyIntVector(endCol - startCol,\n+                                   ((LongIntVector) row).getStorage().getIndices(),\n+                                   ((LongIntVector) row).getStorage().getValues()));\n       }\n     } finally {\n       endRead();\n@@ -450,6 +449,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(long index) {\n     if (useIntKey) {\n       if (row.isSparse()) {\n@@ -477,8 +477,8 @@ adaptiveClone() {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -533,4 +533,4 @@ adaptiveClone() {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}