{
    "project_name": "ppati000-visualDFA",
    "error_id": "23",
    "information": {
        "errors": [
            {
                "line": "70",
                "column": "16",
                "severity": "warning",
                "message": "'catch' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "        this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n                this.precalcController);\n        } catch(DFAException e) {\n            this.controller.createExceptionBox(e.getMessage());\n            this.precalcController.stopPrecalc();\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/styler/23/DFAPrecalculator.java\nindex ec534524e5f..51790b157a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/styler/23/DFAPrecalculator.java\n@@ -67,7 +67,7 @@ public class DFAPrecalculator implements Runnable {\n         try {\n         this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n                 this.precalcController);\n-        } catch(DFAException e) {\n+        } catch (DFAException e) {\n             this.controller.createExceptionBox(e.getMessage());\n             this.precalcController.stopPrecalc();\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/23/DFAPrecalculator.java\nindex ec534524e5f..77a99075826 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/23/DFAPrecalculator.java\n@@ -9,80 +9,73 @@ import dfa.framework.SimpleBlockGraph;\n import dfa.framework.Worklist;\n \n /**\n- * \n  * @author Anika Nietzer Unit, used by the {@code DFAExecution} to precalculate\n- *         all analysis steps in a different thread.\n- *\n+ * all analysis steps in a different thread.\n  */\n public class DFAPrecalculator implements Runnable {\n \n-    private DFAExecution<? extends LatticeElement> dfaExecution;\n-    private DFAFactory<? extends LatticeElement> factory;\n-    private Worklist worklist;\n-    private SimpleBlockGraph simpleBlockGraph;\n-    private DFAPrecalcController precalcController;\n+  private DFAExecution<? extends LatticeElement> dfaExecution;\n+  private DFAFactory<? extends LatticeElement> factory;\n+  private Worklist worklist;\n+  private SimpleBlockGraph simpleBlockGraph;\n+  private DFAPrecalcController precalcController;\n \n-    private Controller controller;\n+  private Controller controller;\n \n-    /**\n-     * Creates a new {@code DFAPrecalculator} to calculate all steps at the\n-     * beginning of the analysis.\n-     * \n-     * @param factory\n-     *            {@code DFAFactory} that will be used\n-     * @param worklist\n-     *            {@code Worklist} that will be used for the analysis\n-     * @param simpleBlockGraph\n-     *            {@code SimpleBlockGraph} on that the analysis will be\n-     *            performed\n-     * @param precalcController\n-     *            {@code DFAPrecalcController}\n-     * @param controller {@code Controller} to inform the user about an exception\n-     * \n-     */\n-    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist,\n-            SimpleBlockGraph simpleBlockGraph, DFAPrecalcController precalcController, Controller controller) {\n-        if (factory == null) {\n-            throw new IllegalArgumentException(\"factory must not be null\");\n-        }\n-        if (worklist == null) {\n-            throw new IllegalArgumentException(\"worklist must not be null\");\n-        }\n-        if (simpleBlockGraph == null) {\n-            throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n-        }\n-        this.factory = factory;\n-        this.worklist = worklist;\n-        this.simpleBlockGraph = simpleBlockGraph;\n-        this.precalcController = precalcController;\n-        this.controller = controller;\n+  /**\n+   * Creates a new {@code DFAPrecalculator} to calculate all steps at the\n+   * beginning of the analysis.\n+   *\n+   * @param factory           {@code DFAFactory} that will be used\n+   * @param worklist          {@code Worklist} that will be used for the analysis\n+   * @param simpleBlockGraph  {@code SimpleBlockGraph} on that the analysis will be\n+   *                          performed\n+   * @param precalcController {@code DFAPrecalcController}\n+   * @param controller        {@code Controller} to inform the user about an exception\n+   */\n+  public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist,\n+                          SimpleBlockGraph simpleBlockGraph, DFAPrecalcController precalcController, Controller controller) {\n+    if (factory == null) {\n+      throw new IllegalArgumentException(\"factory must not be null\");\n     }\n+    if (worklist == null) {\n+      throw new IllegalArgumentException(\"worklist must not be null\");\n+    }\n+    if (simpleBlockGraph == null) {\n+      throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n+    }\n+    this.factory = factory;\n+    this.worklist = worklist;\n+    this.simpleBlockGraph = simpleBlockGraph;\n+    this.precalcController = precalcController;\n+    this.controller = controller;\n+  }\n \n-    @Override\n-    /**\n-     * Used during creation of a new thread, that performs the steps of the\n-     * analysis.\n-     */\n-    public void run() {\n-        try {\n-        this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n-                this.precalcController);\n-        } catch(DFAException e) {\n-            this.controller.createExceptionBox(e.getMessage());\n-            this.precalcController.stopPrecalc();\n-        }\n+  @Override\n+  /**\n+   * Used during creation of a new thread, that performs the steps of the\n+   * analysis.\n+   */\n+  public void run() {\n+    try {\n+      this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n+          this.precalcController);\n+    } catch (DFAException e) {\n+      this.controller.createExceptionBox(e.getMessage());\n+      this.precalcController.stopPrecalc();\n     }\n+  }\n \n-    /**\n-     * Returns the dfaExecution.\n-     * \n-     * @return created instance of {@code DFAExecution}\n-     */\n-    public DFAExecution<? extends LatticeElement> getDFAExecution() {\n-        if (this.dfaExecution == null) {\n-            throw new IllegalStateException(\"dfaExecution must no be null\");\n-        }\n-        return this.dfaExecution;\n+  /**\n+   * Returns the dfaExecution.\n+   *\n+   * @return created instance of {@code DFAExecution}\n+   */\n+  public DFAExecution<? extends LatticeElement> getDFAExecution() {\n+    if (this.dfaExecution == null) {\n+      throw new IllegalStateException(\"dfaExecution must no be null\");\n     }\n+    return this.dfaExecution;\n+  }\n \n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "column": "12",
                    "severity": "warning",
                    "message": "'catch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/23/DFAPrecalculator.java\nindex ec534524e5f..68f9921fbc1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/23/DFAPrecalculator.java\n@@ -40,18 +40,20 @@ public class DFAPrecalculator implements Runnable {\n      * @param controller {@code Controller} to inform the user about an exception\n      * \n      */\n-    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist,\n-            SimpleBlockGraph simpleBlockGraph, DFAPrecalcController precalcController, Controller controller) {\n-        if (factory == null) {\n+    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph, DFAPrecalcController precalcController, Controller controller) {\n+    if (factory == null) {\n             throw new IllegalArgumentException(\"factory must not be null\");\n         }\n-        if (worklist == null) {\n+\n+if (worklist == null) {\n             throw new IllegalArgumentException(\"worklist must not be null\");\n         }\n-        if (simpleBlockGraph == null) {\n+\n+if (simpleBlockGraph == null) {\n             throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n         }\n-        this.factory = factory;\n+\n+this.factory = factory;\n         this.worklist = worklist;\n         this.simpleBlockGraph = simpleBlockGraph;\n         this.precalcController = precalcController;\n@@ -65,9 +67,8 @@ public class DFAPrecalculator implements Runnable {\n      */\n     public void run() {\n         try {\n-        this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n-                this.precalcController);\n-        } catch(DFAException e) {\n+    this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph, this.precalcController);\n+    } catch(DFAException e) {\n             this.controller.createExceptionBox(e.getMessage());\n             this.precalcController.stopPrecalc();\n         }\n@@ -82,7 +83,8 @@ public class DFAPrecalculator implements Runnable {\n         if (this.dfaExecution == null) {\n             throw new IllegalStateException(\"dfaExecution must no be null\");\n         }\n-        return this.dfaExecution;\n+\n+return this.dfaExecution;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "column": "18",
                    "severity": "warning",
                    "message": "'catch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/23/DFAPrecalculator.java\nindex ec534524e5f..64d7d6a500e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/23/DFAPrecalculator.java\n@@ -14,12 +14,18 @@ import dfa.framework.Worklist;\n  *         all analysis steps in a different thread.\n  *\n  */\n+\n+\n public class DFAPrecalculator implements Runnable {\n \n     private DFAExecution<? extends LatticeElement> dfaExecution;\n+\n     private DFAFactory<? extends LatticeElement> factory;\n+\n     private Worklist worklist;\n+\n     private SimpleBlockGraph simpleBlockGraph;\n+\n     private DFAPrecalcController precalcController;\n \n     private Controller controller;\n@@ -40,17 +46,21 @@ public class DFAPrecalculator implements Runnable {\n      * @param controller {@code Controller} to inform the user about an exception\n      * \n      */\n-    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist,\n-            SimpleBlockGraph simpleBlockGraph, DFAPrecalcController precalcController, Controller controller) {\n+\n+\n+    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph, DFAPrecalcController precalcController, Controller controller) {\n         if (factory == null) {\n             throw new IllegalArgumentException(\"factory must not be null\");\n         }\n+\n         if (worklist == null) {\n             throw new IllegalArgumentException(\"worklist must not be null\");\n         }\n+\n         if (simpleBlockGraph == null) {\n             throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n         }\n+\n         this.factory = factory;\n         this.worklist = worklist;\n         this.simpleBlockGraph = simpleBlockGraph;\n@@ -65,9 +75,11 @@ public class DFAPrecalculator implements Runnable {\n      */\n     public void run() {\n         try {\n-        this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n-                this.precalcController);\n-        } catch(DFAException e) {\n+            this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph, this.precalcController);\n+        }\n+\n+\n+            catch(DFAException e) {\n             this.controller.createExceptionBox(e.getMessage());\n             this.precalcController.stopPrecalc();\n         }\n@@ -78,11 +90,14 @@ public class DFAPrecalculator implements Runnable {\n      * \n      * @return created instance of {@code DFAExecution}\n      */\n+\n+\n     public DFAExecution<? extends LatticeElement> getDFAExecution() {\n         if (this.dfaExecution == null) {\n             throw new IllegalStateException(\"dfaExecution must no be null\");\n         }\n+\n         return this.dfaExecution;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/styler_random/23/DFAPrecalculator.java\nindex ec534524e5f..51790b157a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/styler_random/23/DFAPrecalculator.java\n@@ -67,7 +67,7 @@ public class DFAPrecalculator implements Runnable {\n         try {\n         this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n                 this.precalcController);\n-        } catch(DFAException e) {\n+        } catch (DFAException e) {\n             this.controller.createExceptionBox(e.getMessage());\n             this.precalcController.stopPrecalc();\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/styler_three_grams/23/DFAPrecalculator.java\nindex ec534524e5f..51790b157a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/23/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/styler_three_grams/23/DFAPrecalculator.java\n@@ -67,7 +67,7 @@ public class DFAPrecalculator implements Runnable {\n         try {\n         this.dfaExecution = new DFAExecution(this.factory, this.worklist, this.simpleBlockGraph,\n                 this.precalcController);\n-        } catch(DFAException e) {\n+        } catch (DFAException e) {\n             this.controller.createExceptionBox(e.getMessage());\n             this.precalcController.stopPrecalc();\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}