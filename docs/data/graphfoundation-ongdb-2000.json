{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2000",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2000/SchemaIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2000/SchemaIndex.java\nindex 73f5fb86560..fd94662011d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2000/SchemaIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2000/SchemaIndex.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema;\n \n import java.io.IOException;\n@@ -36,57 +37,57 @@ import org.neo4j.values.storable.Value;\n  */\n public interface SchemaIndex extends DatabaseIndex\n {\n-    LuceneIndexWriter getIndexWriter();\n+  LuceneIndexWriter getIndexWriter();\n \n-    IndexReader getIndexReader() throws IOException;\n+  IndexReader getIndexReader() throws IOException;\n \n-    SchemaIndexDescriptor getDescriptor();\n+  SchemaIndexDescriptor getDescriptor();\n \n-    /**\n-     * Verifies uniqueness of property values present in this index.\n-     *\n-     * @param accessor the accessor to retrieve actual property values from the store.\n-     * @param propertyKeyIds the ids of the properties to verify.\n-     * @throws IndexEntryConflictException if there are duplicates.\n-     * @throws IOException\n-     * @see UniquenessVerifier#verify(PropertyAccessor, int[])\n-     */\n-    void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException;\n+  /**\n+   * Verifies uniqueness of property values present in this index.\n+   *\n+   * @param accessor       the accessor to retrieve actual property values from the store.\n+   * @param propertyKeyIds the ids of the properties to verify.\n+   * @throws IndexEntryConflictException if there are duplicates.\n+   * @throws IOException\n+   * @see UniquenessVerifier#verify(PropertyAccessor, int[])\n+   */\n+  void verifyUniqueness(PropertyAccessor accessor, int[] propertyKeyIds)\n+      throws IOException, IndexEntryConflictException;\n \n-    /**\n-     * Verifies uniqueness of updated property values.\n-     *\n-     * @param accessor the accessor to retrieve actual property values from the store.\n-     * @param propertyKeyIds the ids of the properties to verify.\n-     * @param updatedValueTuples the values to check uniqueness for.\n-     * @throws IndexEntryConflictException if there are duplicates.\n-     * @throws IOException\n-     * @see UniquenessVerifier#verify(PropertyAccessor, int[], List)\n-     */\n-    void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples )\n-                    throws IOException, IndexEntryConflictException;\n+  /**\n+   * Verifies uniqueness of updated property values.\n+   *\n+   * @param accessor           the accessor to retrieve actual property values from the store.\n+   * @param propertyKeyIds     the ids of the properties to verify.\n+   * @param updatedValueTuples the values to check uniqueness for.\n+   * @throws IndexEntryConflictException if there are duplicates.\n+   * @throws IOException\n+   * @see UniquenessVerifier#verify(PropertyAccessor, int[], List)\n+   */\n+  void verifyUniqueness(PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples)\n+      throws IOException, IndexEntryConflictException;\n \n-    /**\n-     * Check if this index is marked as online.\n-     *\n-     * @return <code>true</code> if index is online, <code>false</code> otherwise\n-     * @throws IOException\n-     */\n-    boolean isOnline() throws IOException;\n+  /**\n+   * Check if this index is marked as online.\n+   *\n+   * @return <code>true</code> if index is online, <code>false</code> otherwise\n+   * @throws IOException\n+   */\n+  boolean isOnline() throws IOException;\n \n-    /**\n-     * Marks index as online by including \"status\" -> \"online\" map into commit metadata of the first partition.\n-     *\n-     * @throws IOException\n-     */\n-    void markAsOnline() throws IOException;\n+  /**\n+   * Marks index as online by including \"status\" -> \"online\" map into commit metadata of the first partition.\n+   *\n+   * @throws IOException\n+   */\n+  void markAsOnline() throws IOException;\n \n-    /**\n-     * Writes the given failure message to the failure storage.\n-     *\n-     * @param failure the failure message.\n-     * @throws IOException\n-     */\n-    void markAsFailed( String failure ) throws IOException;\n+  /**\n+   * Writes the given failure message to the failure storage.\n+   *\n+   * @param failure the failure message.\n+   * @throws IOException\n+   */\n+  void markAsFailed(String failure) throws IOException;\n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2000/SchemaIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2000/SchemaIndex.java\nindex 73f5fb86560..37a03a1fcc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2000/SchemaIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2000/SchemaIndex.java\n@@ -51,10 +51,9 @@ public interface SchemaIndex extends DatabaseIndex\n      * @throws IOException\n      * @see UniquenessVerifier#verify(PropertyAccessor, int[])\n      */\n-    void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds )\n-            throws IOException, IndexEntryConflictException;\n+    void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds ) throws IOException, IndexEntryConflictException;\n \n-    /**\n+/**\n      * Verifies uniqueness of updated property values.\n      *\n      * @param accessor the accessor to retrieve actual property values from the store.\n@@ -64,10 +63,9 @@ public interface SchemaIndex extends DatabaseIndex\n      * @throws IOException\n      * @see UniquenessVerifier#verify(PropertyAccessor, int[], List)\n      */\n-    void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples )\n-                    throws IOException, IndexEntryConflictException;\n+    void verifyUniqueness( PropertyAccessor accessor, int[] propertyKeyIds, List<Value[]> updatedValueTuples ) throws IOException, IndexEntryConflictException;\n \n-    /**\n+/**\n      * Check if this index is marked as online.\n      *\n      * @return <code>true</code> if index is online, <code>false</code> otherwise\n@@ -89,4 +87,4 @@ public interface SchemaIndex extends DatabaseIndex\n      * @throws IOException\n      */\n     void markAsFailed( String failure ) throws IOException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}