{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "102",
    "information": {
        "errors": [
            {
                "line": "115",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 92).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    observer.start();\n    Mockito.verify(reader, Mockito.times(1))\n        .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/102/RetryableLogObserverTest.java\nindex 0fa7b28a470..57855660117 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/102/RetryableLogObserverTest.java\n@@ -112,6 +112,6 @@ public class RetryableLogObserverTest {\n             numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n     observer.start();\n     Mockito.verify(reader, Mockito.times(1))\n-        .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n+    .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/102/RetryableLogObserverTest.java\nindex 0fa7b28a470..4c9505ff51f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/102/RetryableLogObserverTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.commitlog;\n \n import cz.o2.proxima.storage.StreamElement;\n@@ -112,6 +113,7 @@ public class RetryableLogObserverTest {\n             numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n     observer.start();\n     Mockito.verify(reader, Mockito.times(1))\n-        .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n+        .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST),\n+            Mockito.eq(observer));\n   }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 16, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 16, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 12, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 48.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 16, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 16, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 14, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 12, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/102/RetryableLogObserverTest.java\nindex 0fa7b28a470..3b5ffca15a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/102/RetryableLogObserverTest.java\n@@ -27,8 +27,7 @@ public class RetryableLogObserverTest {\n   public void testRetryableError() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.online(\n+    final RetryableLogObserver observer = RetryableLogObserver.online(\n             numRetries,\n             \"test\",\n             reader,\n@@ -45,8 +44,7 @@ public class RetryableLogObserverTest {\n                 return true;\n               }\n             });\n-\n-    // Retry for max-number of times.\n+// Retry for max-number of times.\n     for (int i = 0; i < numRetries; i++) {\n       Assert.assertTrue(observer.onError(new Exception(\"Test.\")));\n     }\n@@ -70,8 +68,7 @@ public class RetryableLogObserverTest {\n   public void testNonRetryableError() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.online(\n+    final RetryableLogObserver observer = RetryableLogObserver.online(\n             numRetries,\n             \"test\",\n             reader,\n@@ -88,17 +85,16 @@ public class RetryableLogObserverTest {\n                 throw new UnsupportedOperationException(\"Not implemented.\");\n               }\n             });\n-    Assert.assertFalse(observer.onError(new Exception(\"Test.\")));\n+Assert.assertFalse(observer.onError(new Exception(\"Test.\")));\n   }\n \n   @Test\n   public void testStartOnline() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.online(\n+    final RetryableLogObserver observer = RetryableLogObserver.online(\n             numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n-    observer.start();\n+observer.start();\n     Mockito.verify(reader, Mockito.times(1))\n         .observe(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n   }\n@@ -107,11 +103,10 @@ public class RetryableLogObserverTest {\n   public void testStartBulk() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.bulk(\n+    final RetryableLogObserver observer = RetryableLogObserver.bulk(\n             numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n-    observer.start();\n+observer.start();\n     Mockito.verify(reader, Mockito.times(1))\n         .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 102, indentation should be the same level as line 36.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 102, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 102, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 98, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 102, indentation should be the same level as line 74.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 102, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 102, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 100, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 98, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/102/RetryableLogObserverTest.java\nindex 0fa7b28a470..0ba30c62855 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/102/RetryableLogObserverTest.java\n@@ -21,30 +21,26 @@ import org.junit.Assert;\n import org.junit.Test;\n import org.mockito.Mockito;\n \n+\n public class RetryableLogObserverTest {\n \n   @Test\n   public void testRetryableError() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.online(\n-            numRetries,\n-            \"test\",\n-            reader,\n-            new LogObserver() {\n-\n-              @Override\n-              public boolean onError(Throwable error) {\n+    final RetryableLogObserver observer = RetryableLogObserver.online(numRetries, \"test\", reader, new LogObserver() {\n+\n+                                                                                                    @Override\n+                                                                                                    public boolean onError(Throwable error) {\n                 // Retryable.\n-                return true;\n-              }\n+                                                                                                      return true;\n+                                                                                                    }\n \n-              @Override\n-              public boolean onNext(StreamElement ingest, OnNextContext context) {\n-                return true;\n-              }\n-            });\n+                                                                                                    @Override\n+                                                                                                    public boolean onNext(StreamElement ingest, OnNextContext context) {\n+                                                                                                      return true;\n+                                                                                                    }\n+                                                                                                  });\n \n     // Retry for max-number of times.\n     for (int i = 0; i < numRetries; i++) {\n@@ -70,24 +66,19 @@ public class RetryableLogObserverTest {\n   public void testNonRetryableError() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.online(\n-            numRetries,\n-            \"test\",\n-            reader,\n-            new LogObserver() {\n-\n-              @Override\n-              public boolean onError(Throwable error) {\n+    final RetryableLogObserver observer = RetryableLogObserver.online(numRetries, \"test\", reader, new LogObserver() {\n+\n+                                                                                                    @Override\n+                                                                                                    public boolean onError(Throwable error) {\n                 // Non-Retryable.\n-                return false;\n-              }\n-\n-              @Override\n-              public boolean onNext(StreamElement ingest, OnNextContext context) {\n-                throw new UnsupportedOperationException(\"Not implemented.\");\n-              }\n-            });\n+                                                                                                      return false;\n+                                                                                                    }\n+\n+                                                                                                    @Override\n+                                                                                                    public boolean onNext(StreamElement ingest, OnNextContext context) {\n+                                                                                                      throw new UnsupportedOperationException(\"Not implemented.\");\n+                                                                                                    }\n+                                                                                                  });\n     Assert.assertFalse(observer.onError(new Exception(\"Test.\")));\n   }\n \n@@ -95,23 +86,17 @@ public class RetryableLogObserverTest {\n   public void testStartOnline() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.online(\n-            numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n+    final RetryableLogObserver observer = RetryableLogObserver.online(numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n     observer.start();\n-    Mockito.verify(reader, Mockito.times(1))\n-        .observe(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n+    Mockito.verify(reader, Mockito.times(1)).observe(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n   }\n \n   @Test\n   public void testStartBulk() {\n     final int numRetries = 10;\n     final CommitLogReader reader = Mockito.mock(CommitLogReader.class);\n-    final RetryableLogObserver observer =\n-        RetryableLogObserver.bulk(\n-            numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n+    final RetryableLogObserver observer = RetryableLogObserver.bulk(numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n     observer.start();\n-    Mockito.verify(reader, Mockito.times(1))\n-        .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n+    Mockito.verify(reader, Mockito.times(1)).observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/102/RetryableLogObserverTest.java\nindex 0fa7b28a470..57855660117 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/102/RetryableLogObserverTest.java\n@@ -112,6 +112,6 @@ public class RetryableLogObserverTest {\n             numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n     observer.start();\n     Mockito.verify(reader, Mockito.times(1))\n-        .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n+    .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/102/RetryableLogObserverTest.java\nindex 0fa7b28a470..cc8c3494b0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/102/RetryableLogObserverTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/102/RetryableLogObserverTest.java\n@@ -112,6 +112,7 @@ public class RetryableLogObserverTest {\n             numRetries, \"test\", reader, (LogObserver) (ingest, context) -> true);\n     observer.start();\n     Mockito.verify(reader, Mockito.times(1))\n-        .observeBulk(Mockito.eq(\"test\"), Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n+        .observeBulk(Mockito.eq(\"test\")\n+        , Mockito.eq(Position.NEWEST), Mockito.eq(observer));\n   }\n }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}