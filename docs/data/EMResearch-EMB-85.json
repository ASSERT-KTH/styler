{
    "project_name": "EMResearch-EMB",
    "error_id": "85",
    "information": {
        "errors": [
            {
                "line": "76",
                "column": "67",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "      return false;\n    }\n    return id1 != null && id1.equals(nextMatch.getRule().getId()) &&\n        (subId1 == null && subId2 == null || subId1 != null && subId1.equals(subId2));\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "76",
                    "column": "67",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "65",
                    "column": "63",
                    "severity": "warning",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "78",
                    "column": "71",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/85/RuleWithMaxFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/85/RuleWithMaxFilter.java\nindex 502f060c5d6..479d4c65edc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/85/RuleWithMaxFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/85/RuleWithMaxFilter.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules;\n \n import org.languagetool.rules.patterns.AbstractPatternRule;\n@@ -32,49 +33,50 @@ import java.util.List;\n  */\n public class RuleWithMaxFilter implements RuleMatchFilter {\n \n-  @Override\n-  public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n-    Collections.sort(ruleMatches);\n-    List<RuleMatch> filteredRules = new ArrayList<>();\n-    for (int i = 0; i < ruleMatches.size(); i++) {\n-      RuleMatch match = ruleMatches.get(i);\n-      if (i < ruleMatches.size() - 1) {\n-        RuleMatch nextMatch = ruleMatches.get(i + 1);\n-        while (includes(match, nextMatch) && haveSameRule(match, nextMatch)\n-            && i < ruleMatches.size()) {\n-          i++;  // skip next match\n-          if (i < ruleMatches.size() - 1) {\n-            nextMatch = ruleMatches.get(i + 1);\n-          }\n+    @Override\n+    public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n+        Collections.sort(ruleMatches);\n+        List<RuleMatch> filteredRules = new ArrayList<>();\n+        for (int i = 0; i < ruleMatches.size(); i++) {\n+            RuleMatch match = ruleMatches.get(i);\n+            if (i < ruleMatches.size() - 1) {\n+                RuleMatch nextMatch = ruleMatches.get(i + 1);\n+                while (includes(match, nextMatch) && haveSameRule(match, nextMatch)\n+                    && i < ruleMatches.size()) {\n+                    i++;  // skip next match\n+                    if (i < ruleMatches.size() - 1) {\n+                        nextMatch = ruleMatches.get(i + 1);\n+                    }\n+                }\n+            }\n+            filteredRules.add(match);\n         }\n-      }\n-      filteredRules.add(match);\n+        return filteredRules;\n     }\n-    return filteredRules;\n-  }\n \n-  final boolean includes(RuleMatch match, RuleMatch nextMatch) {\n-    if (match.getFromPos() <= nextMatch.getFromPos() && match.getToPos() >= nextMatch.getToPos()) {\n-      return true;\n+    final boolean includes(RuleMatch match, RuleMatch nextMatch) {\n+        if (match.getFromPos() <= nextMatch.getFromPos() && match.getToPos() >= nextMatch.getToPos()) {\n+            return true;\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n \n-  private boolean haveSameRule(RuleMatch match, RuleMatch nextMatch) {\n-    if (!(match.getRule() instanceof AbstractPatternRule) || !(nextMatch.getRule() instanceof AbstractPatternRule)) {\n-      return false;\n-    }\n-    String id1 = match.getRule().getId();\n-    String subId1 = ((AbstractPatternRule) match.getRule()).getSubId();\n-    String subId2 = ((AbstractPatternRule) nextMatch.getRule()).getSubId();\n-    if (subId1 == null &&  subId2 != null) {\n-      return false;\n-    }\n-    if (subId1 != null && subId2 == null) {\n-      return false;\n+    private boolean haveSameRule(RuleMatch match, RuleMatch nextMatch) {\n+        if (!(match.getRule() instanceof AbstractPatternRule) ||\n+            !(nextMatch.getRule() instanceof AbstractPatternRule)) {\n+            return false;\n+        }\n+        String id1 = match.getRule().getId();\n+        String subId1 = ((AbstractPatternRule) match.getRule()).getSubId();\n+        String subId2 = ((AbstractPatternRule) nextMatch.getRule()).getSubId();\n+        if (subId1 == null && subId2 != null) {\n+            return false;\n+        }\n+        if (subId1 != null && subId2 == null) {\n+            return false;\n+        }\n+        return id1 != null && id1.equals(nextMatch.getRule().getId()) &&\n+            (subId1 == null && subId2 == null || subId1 != null && subId1.equals(subId2));\n     }\n-    return id1 != null && id1.equals(nextMatch.getRule().getId()) &&\n-        (subId1 == null && subId2 == null || subId1 != null && subId1.equals(subId2));\n-  }\n \n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/85/RuleWithMaxFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/85/RuleWithMaxFilter.java\nindex 502f060c5d6..0d492dd94ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/85/RuleWithMaxFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/85/RuleWithMaxFilter.java\n@@ -42,7 +42,7 @@ public class RuleWithMaxFilter implements RuleMatchFilter {\n         RuleMatch nextMatch = ruleMatches.get(i + 1);\n         while (includes(match, nextMatch) && haveSameRule(match, nextMatch)\n             && i < ruleMatches.size()) {\n-          i++;  // skip next match\n+  i++;  // skip next match\n           if (i < ruleMatches.size() - 1) {\n             nextMatch = ruleMatches.get(i + 1);\n           }\n@@ -52,8 +52,7 @@ public class RuleWithMaxFilter implements RuleMatchFilter {\n     }\n     return filteredRules;\n   }\n-\n-  final boolean includes(RuleMatch match, RuleMatch nextMatch) {\n+final boolean includes(RuleMatch match, RuleMatch nextMatch) {\n     if (match.getFromPos() <= nextMatch.getFromPos() && match.getToPos() >= nextMatch.getToPos()) {\n       return true;\n     }\n@@ -67,14 +66,13 @@ public class RuleWithMaxFilter implements RuleMatchFilter {\n     String id1 = match.getRule().getId();\n     String subId1 = ((AbstractPatternRule) match.getRule()).getSubId();\n     String subId2 = ((AbstractPatternRule) nextMatch.getRule()).getSubId();\n-    if (subId1 == null &&  subId2 != null) {\n+    if (subId1 == null && subId2 != null) {\n       return false;\n     }\n     if (subId1 != null && subId2 == null) {\n       return false;\n     }\n-    return id1 != null && id1.equals(nextMatch.getRule().getId()) &&\n-        (subId1 == null && subId2 == null || subId1 != null && subId1.equals(subId2));\n+    return id1 != null && id1.equals(nextMatch.getRule().getId()) && (subId1 == null && subId2 == null || subId1 != null && subId1.equals(subId2));\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/85/RuleWithMaxFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/85/RuleWithMaxFilter.java\nindex 502f060c5d6..cd6cb60f397 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/85/RuleWithMaxFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/85/RuleWithMaxFilter.java\n@@ -19,7 +19,6 @@\n package org.languagetool.rules;\n \n import org.languagetool.rules.patterns.AbstractPatternRule;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -30,51 +29,52 @@ import java.util.List;\n  *\n  * @since 2.6\n  */\n+\n+\n public class RuleWithMaxFilter implements RuleMatchFilter {\n+    @Override\n+    public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n+        Collections.sort(ruleMatches);\n \n-  @Override\n-  public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n-    Collections.sort(ruleMatches);\n-    List<RuleMatch> filteredRules = new ArrayList<>();\n-    for (int i = 0; i < ruleMatches.size(); i++) {\n-      RuleMatch match = ruleMatches.get(i);\n-      if (i < ruleMatches.size() - 1) {\n-        RuleMatch nextMatch = ruleMatches.get(i + 1);\n-        while (includes(match, nextMatch) && haveSameRule(match, nextMatch)\n-            && i < ruleMatches.size()) {\n-          i++;  // skip next match\n-          if (i < ruleMatches.size() - 1) {\n-            nextMatch = ruleMatches.get(i + 1);\n-          }\n+        List<RuleMatch> filteredRules = new ArrayList<>();\n+        for (int i = 0; i < ruleMatches.size(); i++) {\n+        RuleMatch match = ruleMatches.get(i);\n+        if (i < ruleMatches.size() - 1) {\n+            RuleMatch nextMatch = ruleMatches.get(i + 1);\n+            while (includes(match, nextMatch) && haveSameRule(match, nextMatch)\n+                       && i < ruleMatches.size()) {\n+                                            i++;  // skip next match\n+                                            if (i < ruleMatches.size() - 1) {\n+                                                nextMatch = ruleMatches.get(i + 1);\n+                                            }\n+            }\n         }\n-      }\n-      filteredRules.add(match);\n+        filteredRules.add(match);\n+        }\n+        return filteredRules;\n     }\n-    return filteredRules;\n-  }\n \n-  final boolean includes(RuleMatch match, RuleMatch nextMatch) {\n-    if (match.getFromPos() <= nextMatch.getFromPos() && match.getToPos() >= nextMatch.getToPos()) {\n-      return true;\n+    final boolean includes(RuleMatch match, RuleMatch nextMatch) {\n+        if (match.getFromPos() <= nextMatch.getFromPos() && match.getToPos() >= nextMatch.getToPos()) {\n+            return true;\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n \n-  private boolean haveSameRule(RuleMatch match, RuleMatch nextMatch) {\n-    if (!(match.getRule() instanceof AbstractPatternRule) || !(nextMatch.getRule() instanceof AbstractPatternRule)) {\n-      return false;\n-    }\n-    String id1 = match.getRule().getId();\n-    String subId1 = ((AbstractPatternRule) match.getRule()).getSubId();\n-    String subId2 = ((AbstractPatternRule) nextMatch.getRule()).getSubId();\n-    if (subId1 == null &&  subId2 != null) {\n-      return false;\n-    }\n-    if (subId1 != null && subId2 == null) {\n-      return false;\n+    private boolean haveSameRule(RuleMatch match, RuleMatch nextMatch) {\n+        if (!(match.getRule() instanceof AbstractPatternRule) || !(nextMatch.getRule() instanceof AbstractPatternRule)) {\n+            return false;\n+        }\n+        String id1 = match.getRule().getId();\n+        String subId1 = ((AbstractPatternRule) match.getRule()).getSubId();\n+        String subId2 = ((AbstractPatternRule) nextMatch.getRule()).getSubId();\n+        if (subId1 == null && subId2 != null) {\n+            return false;\n+        }\n+        if (subId1 != null && subId2 == null) {\n+            return false;\n+        }\n+        return id1 != null && id1.equals(nextMatch.getRule().getId())\n+                   && (subId1 == null && subId2 == null || subId1 != null && subId1.equals(subId2));\n     }\n-    return id1 != null && id1.equals(nextMatch.getRule().getId()) &&\n-        (subId1 == null && subId2 == null || subId1 != null && subId1.equals(subId2));\n-  }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "76",
                    "column": "67",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "76",
                    "column": "67",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}