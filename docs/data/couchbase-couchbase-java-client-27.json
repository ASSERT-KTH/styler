{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "108",
                "column": "12",
                "severity": "warning",
                "message": "WhitespaceAround: 'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    public MutationState add(MutationState mutationState) {\n        for(MutationToken token : mutationState) {\n            addToken(token);\n        }\n        return this;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/27/MutationState.java\nindex bd2349fd76a..10f15b1d53f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/27/MutationState.java\n@@ -105,7 +105,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @return the modified {@link MutationState}.\n      */\n     public MutationState add(MutationState mutationState) {\n-        for(MutationToken token : mutationState) {\n+        for (MutationToken token : mutationState) {\n             addToken(token);\n         }\n         return this;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/27/MutationState.java\nindex bd2349fd76a..438dde3a7bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/27/MutationState.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2016 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n@@ -105,7 +106,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @return the modified {@link MutationState}.\n      */\n     public MutationState add(MutationState mutationState) {\n-        for(MutationToken token : mutationState) {\n+        for (MutationToken token : mutationState) {\n             addToken(token);\n         }\n         return this;\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/27/MutationState.java\nindex bd2349fd76a..c322f156605 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/27/MutationState.java\n@@ -105,7 +105,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @return the modified {@link MutationState}.\n      */\n     public MutationState add(MutationState mutationState) {\n-        for(MutationToken token : mutationState) {\n+        for (MutationToken token : mutationState) {\n             addToken(token);\n         }\n         return this;\n@@ -131,8 +131,7 @@ public class MutationState implements Iterable<MutationToken> {\n                     return;\n                 }\n             }\n-\n-            tokens.add(token);\n+tokens.add(token);\n         }\n     }\n \n@@ -163,4 +162,4 @@ public class MutationState implements Iterable<MutationToken> {\n         }\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "132",
                    "column": "18",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/27/MutationState.java\nindex bd2349fd76a..5f9995ec478 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/27/MutationState.java\n@@ -26,7 +26,6 @@ import com.couchbase.client.java.document.Document;\n import com.couchbase.client.java.document.json.JsonArray;\n import com.couchbase.client.java.document.json.JsonObject;\n import com.couchbase.client.java.subdoc.DocumentFragment;\n-\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -38,6 +37,8 @@ import java.util.ListIterator;\n  * @author Michael Nitschinger\n  * @since 2.3.0\n  */\n+\n+\n public class MutationState implements Iterable<MutationToken> {\n \n     private final List<MutationToken> tokens;\n@@ -52,6 +53,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @param documents the documents where the tokens are extracted from.\n      * @return the initialized {@link MutationState}.\n      */\n+\n     public static MutationState from(Document... documents) {\n         return new MutationState().add(documents);\n     }\n@@ -62,6 +64,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @param documentFragments the document fragments where the tokens are extracted from.\n      * @return the initialized {@link MutationState}.\n      */\n+\n     public static MutationState from(DocumentFragment... documentFragments) {\n         return new MutationState().add(documentFragments);\n     }\n@@ -72,6 +75,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @param documents the documents where the tokens are extracted from.\n      * @return the modified {@link MutationState}.\n      */\n+\n     public MutationState add(Document... documents) {\n         if (documents == null || documents.length == 0) {\n             throw new IllegalArgumentException(\"At least one Document must be provided.\");\n@@ -88,6 +92,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @param documentFragments the fragments where the tokens are extracted from.\n      * @return the modified {@link MutationState}.\n      */\n+\n     public MutationState add(DocumentFragment... documentFragments) {\n         if (documentFragments == null || documentFragments.length == 0) {\n             throw new IllegalArgumentException(\"At least one DocumentFragment must be provided.\");\n@@ -104,8 +109,9 @@ public class MutationState implements Iterable<MutationToken> {\n      * @param mutationState the state from which the tokens are applied from.\n      * @return the modified {@link MutationState}.\n      */\n+\n     public MutationState add(MutationState mutationState) {\n-        for(MutationToken token : mutationState) {\n+        for (MutationToken token : mutationState) {\n             addToken(token);\n         }\n         return this;\n@@ -119,10 +125,11 @@ public class MutationState implements Iterable<MutationToken> {\n      *\n      * @param token the token to check and maybe store.\n      */\n+\n     private void addToken(final MutationToken token) {\n         if (token != null) {\n             ListIterator<MutationToken> tokenIterator = tokens.listIterator();\n-            while (tokenIterator.hasNext()) {\n+            while(tokenIterator.hasNext()) {\n                 MutationToken t = tokenIterator.next();\n                 if (t.vbucketID() == token.vbucketID() && t.bucket().equals(token.bucket())) {\n                     if (token.sequenceNumber() > t.sequenceNumber()) {\n@@ -131,7 +138,6 @@ public class MutationState implements Iterable<MutationToken> {\n                     return;\n                 }\n             }\n-\n             tokens.add(token);\n         }\n     }\n@@ -147,6 +153,7 @@ public class MutationState implements Iterable<MutationToken> {\n      *\n      * @return the exported {@link JsonObject}.\n      */\n+\n     public JsonObject export() {\n         JsonObject result = JsonObject.create();\n         for (MutationToken token : tokens) {\n@@ -155,12 +162,8 @@ public class MutationState implements Iterable<MutationToken> {\n                 bucket = JsonObject.create();\n                 result.put(token.bucket(), bucket);\n             }\n-\n-            bucket.put(\n-                String.valueOf(token.vbucketID()),\n-                JsonArray.from(token.sequenceNumber(), String.valueOf(token.vbucketUUID()))\n-            );\n+            bucket.put(String.valueOf(token.vbucketID()), JsonArray.from(token.sequenceNumber(), String.valueOf(token.vbucketUUID())));\n         }\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_random/27/MutationState.java\nindex bd2349fd76a..10f15b1d53f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_random/27/MutationState.java\n@@ -105,7 +105,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @return the modified {@link MutationState}.\n      */\n     public MutationState add(MutationState mutationState) {\n-        for(MutationToken token : mutationState) {\n+        for (MutationToken token : mutationState) {\n             addToken(token);\n         }\n         return this;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/27/MutationState.java\nindex bd2349fd76a..10f15b1d53f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/27/MutationState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/27/MutationState.java\n@@ -105,7 +105,7 @@ public class MutationState implements Iterable<MutationToken> {\n      * @return the modified {@link MutationState}.\n      */\n     public MutationState add(MutationState mutationState) {\n-        for(MutationToken token : mutationState) {\n+        for (MutationToken token : mutationState) {\n             addToken(token);\n         }\n         return this;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}