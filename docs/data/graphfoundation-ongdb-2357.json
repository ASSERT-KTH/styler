{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2357",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2357/InsecureRandom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2357/InsecureRandom.java\nindex c313663d331..627339ac566 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2357/InsecureRandom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2357/InsecureRandom.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.ssl;\n \n import io.netty.util.internal.ThreadLocalRandom;\n@@ -25,80 +26,80 @@ import java.util.Random;\n \n public class InsecureRandom extends java.security.SecureRandom\n {\n-    private static Random random()\n-    {\n-        return ThreadLocalRandom.current();\n-    }\n-\n-    @Override\n-    public String getAlgorithm()\n-    {\n-        return \"insecure\";\n-    }\n-\n-    @Override\n-    public void setSeed( byte[] seed )\n-    {\n-    }\n-\n-    @Override\n-    public void setSeed( long seed )\n-    {\n-    }\n-\n-    @Override\n-    public void nextBytes( byte[] bytes )\n-    {\n-        random().nextBytes( bytes );\n-    }\n-\n-    @Override\n-    public byte[] generateSeed( int numBytes )\n-    {\n-        byte[] seed = new byte[numBytes];\n-        random().nextBytes( seed );\n-        return seed;\n-    }\n-\n-    @Override\n-    public int nextInt()\n-    {\n-        return random().nextInt();\n-    }\n-\n-    @Override\n-    public int nextInt( int n )\n-    {\n-        return random().nextInt( n );\n-    }\n-\n-    @Override\n-    public boolean nextBoolean()\n-    {\n-        return random().nextBoolean();\n-    }\n-\n-    @Override\n-    public long nextLong()\n-    {\n-        return random().nextLong();\n-    }\n-\n-    @Override\n-    public float nextFloat()\n-    {\n-        return random().nextFloat();\n-    }\n-\n-    @Override\n-    public double nextDouble()\n-    {\n-        return random().nextDouble();\n-    }\n-\n-    @Override\n-    public double nextGaussian()\n-    {\n-        return random().nextGaussian();\n-    }\n+  private static Random random()\n+  {\n+    return ThreadLocalRandom.current();\n+  }\n+\n+  @Override\n+  public String getAlgorithm()\n+  {\n+    return \"insecure\";\n+  }\n+\n+  @Override\n+  public void setSeed(byte[] seed)\n+  {\n+  }\n+\n+  @Override\n+  public void setSeed(long seed)\n+  {\n+  }\n+\n+  @Override\n+  public void nextBytes(byte[] bytes)\n+  {\n+    random().nextBytes(bytes);\n+  }\n+\n+  @Override\n+  public byte[] generateSeed(int numBytes)\n+  {\n+    byte[] seed = new byte[numBytes];\n+    random().nextBytes(seed);\n+    return seed;\n+  }\n+\n+  @Override\n+  public int nextInt()\n+  {\n+    return random().nextInt();\n+  }\n+\n+  @Override\n+  public int nextInt(int n)\n+  {\n+    return random().nextInt(n);\n+  }\n+\n+  @Override\n+  public boolean nextBoolean()\n+  {\n+    return random().nextBoolean();\n+  }\n+\n+  @Override\n+  public long nextLong()\n+  {\n+    return random().nextLong();\n+  }\n+\n+  @Override\n+  public float nextFloat()\n+  {\n+    return random().nextFloat();\n+  }\n+\n+  @Override\n+  public double nextDouble()\n+  {\n+    return random().nextDouble();\n+  }\n+\n+  @Override\n+  public double nextGaussian()\n+  {\n+    return random().nextGaussian();\n+  }\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2357/InsecureRandom.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2357/InsecureRandom.java\nindex c313663d331..8bfb33395a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2357/InsecureRandom.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2357/InsecureRandom.java\n@@ -101,4 +101,4 @@ public class InsecureRandom extends java.security.SecureRandom\n     {\n         return random().nextGaussian();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}