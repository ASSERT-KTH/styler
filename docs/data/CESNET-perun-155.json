{
    "project_name": "CESNET-perun",
    "error_id": "155",
    "information": {
        "errors": [
            {
                "line": "930",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\n\t\t// Check access rights for each richGroup for GROUPADMIN\n\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n\t\t\t    && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n\t\t\t    && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n\t\t\tIterator<RichGroup> groupByName = richGroups.iterator();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/155/GroupsManagerEntry.java\nindex 66dace4f26d..2bd789c8eac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/155/GroupsManagerEntry.java\n@@ -928,7 +928,7 @@ public class GroupsManagerEntry implements GroupsManager {\n \n \t\t// Check access rights for each richGroup for GROUPADMIN\n \t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t    && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n \t\t\t    && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n \t\t\tIterator<RichGroup> groupByName = richGroups.iterator();\n \t\t\twhile (groupByName.hasNext()) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/155/GroupsManagerEntry.java\nindex 66dace4f26d..6675773b76b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/155/GroupsManagerEntry.java\n@@ -13,6 +13,7 @@ import cz.metacentrum.perun.core.bl.GroupsManagerBl;\n import cz.metacentrum.perun.core.bl.PerunBl;\n import cz.metacentrum.perun.core.impl.Utils;\n import cz.metacentrum.perun.core.implApi.GroupsManagerImplApi;\n+\n import java.util.Objects;\n \n /**\n@@ -23,1034 +24,1042 @@ import java.util.Objects;\n  */\n public class GroupsManagerEntry implements GroupsManager {\n \n-\tprivate GroupsManagerBl groupsManagerBl;\n-\tprivate PerunBl perunBl;\n-\n-\tpublic GroupsManagerEntry(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t\tthis.groupsManagerBl = perunBl.getGroupsManagerBl();\n-\t}\n-\n-\tpublic GroupsManagerEntry() {}\n-\n-\t//FIXME delete this method\n-\tpublic GroupsManagerImplApi getGroupsManagerImpl() {\n-\t\tthrow new InternalErrorRuntimeException(\"Unsupported method!\");\n-\t}\n-\n-\tpublic Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, PrivilegeException, InternalErrorException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.name\");\n-\n-\n-\t\tif (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n-\t\t}\n-\n-\t\tif (group.getParentGroupId() != null) throw new InternalErrorException(\"Top-level groups can't have parentGroupId set!\");\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t    !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"createGroup\");\n-\t\t}\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\tGroup createdGroup = getGroupsManagerBl().createGroup(sess, vo, group);\n-\n-\t\t//Refresh authz\n-\t\tAuthzResolver.refreshAuthz(sess);\n-\t\treturn createdGroup;\n-\t}\n+    private GroupsManagerBl groupsManagerBl;\n+    private PerunBl perunBl;\n \n-\tpublic Group createGroup(PerunSession sess, Group parentGroup, Group group) throws GroupNotExistsException, GroupExistsException, PrivilegeException, InternalErrorException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.name\");\n+    public GroupsManagerEntry(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+        this.groupsManagerBl = perunBl.getGroupsManagerBl();\n+    }\n \n+    public GroupsManagerEntry() {\n+    }\n \n-\t\tif (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n-\t\t}\n+    //FIXME delete this method\n+    public GroupsManagerImplApi getGroupsManagerImpl() {\n+        throw new InternalErrorRuntimeException(\"Unsupported method!\");\n+    }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"createGroup - subGroup\");\n-\t\t\t\t}\n+    public Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, PrivilegeException, InternalErrorException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(group, \"group\");\n+        Utils.notNull(group.getName(), \"group.name\");\n \n-\t\tGroup createdGroup = getGroupsManagerBl().createGroup(sess, parentGroup, group);\n \n-\t\t//Refresh authz\n-\t\tAuthzResolver.refreshAuthz(sess);\n-\t\treturn createdGroup;\n-\t}\n+        if (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n+            throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n+        }\n \n-\tpublic void deleteGroup(PerunSession sess, Group group, boolean forceDelete) throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n+        if (group.getParentGroupId() != null) {\n+            throw new InternalErrorException(\"Top-level groups can't have parentGroupId set!\");\n+        }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteGroup\");\n-\t\t\t\t}\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n+                !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo)) {\n+            throw new PrivilegeException(sess, \"createGroup\");\n+        }\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n \n-\t\tgetGroupsManagerBl().deleteGroup(sess, group, forceDelete);\n-\t}\n-\n-\tpublic void deleteGroup(PerunSession sess, Group group) throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tthis.deleteGroup(sess, group, false);\n-\t}\n-\n-\tpublic void deleteAllGroups(PerunSession sess, Vo vo) throws VoNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupNotExistsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(sess);\n+        Group createdGroup = getGroupsManagerBl().createGroup(sess, vo, group);\n+\n+        //Refresh authz\n+        AuthzResolver.refreshAuthz(sess);\n+        return createdGroup;\n+    }\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteAllGroups\");\n-\t\t}\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\tgetGroupsManagerBl().deleteAllGroups(sess, vo);\n-\t}\n-\n-\tpublic void deleteGroups(PerunSession perunSession, List<Group> groups, boolean forceDelete) throws GroupNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, RelationExistsException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tUtils.notNull(groups, \"groups\");\n-\n-\t\t//Test if all groups exists and user has right to delete all of them\n-\t\tfor(Group group: groups) {\n-\t\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\t\t\t//test of privileges on group\n-\t\t\tif(!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\t\tthrow new PrivilegeException(perunSession, \"deleteGroups\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().deleteGroups(perunSession, groups, forceDelete);\n-\t}\n-\n-\tpublic Group updateGroup(PerunSession sess, Group group) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.name\");\n-\n-\t\tif (!group.getShortName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group shortName, group shortName must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"updateGroup\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().updateGroup(sess, group);\n-\t}\n-\n-\tpublic Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tGroup group = getGroupsManagerBl().getGroupById(sess, id);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.RPC)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupById\");\n-\t\t\t\t}\n-\n-\t\treturn group;\n-\t}\n-\n-\tpublic Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tUtils.notNull(name, \"name\");\n-\n-\t\tif (!name.matches(GroupsManager.GROUP_FULL_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_FULL_NAME_REGEXP));\n-\t\t}\n-\n-\t\tGroup group = getGroupsManagerBl().getGroupByName(sess, vo, name);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupByName\");\n-\t\t\t\t}\n-\n-\t\treturn group;\n-\t}\n-\n-\tpublic void addMember(PerunSession sess, Group group, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException, AlreadyMemberException, GroupNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException, GroupOperationsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t    && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"addMember\");\n-\t\t}\n-\n-\t\t// Check if the member and group are from the same VO\n-\t\tif (member.getVoId() != (group.getVoId())) {\n-\t\t\tthrow new MembershipMismatchException(\"Member and group are form the different VO\");\n-\t\t}\n-\n-\t\t// Check if the group is externally synchronized\n-\t\tAttribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n-\t\tif (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n-\t\t\tthrow new ExternallyManagedException(\"Adding of member is not allowed. Group is externally managed.\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().addMember(sess, group, member);\n-\t}\n-\n-\tpublic void removeMember(PerunSession sess, Group group, Member member) throws InternalErrorException, MemberNotExistsException, NotGroupMemberException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException, GroupOperationsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t    && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeMember\");\n-\t\t}\n-\n-\t\t// Check if the group is externally synchronized\n-\t\tAttribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n-\t\tif (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n-\t\t\tthrow new ExternallyManagedException(\"Removing of member is not allowed. Group is externally managed.\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().removeMember(sess, group, member);\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupMembers(sess, group);\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupMembers(sess, group, status);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group), true);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group, status), true);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group), true);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n-\t\t\t\t}\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group, status), true);\n-\t}\n-\n-\tpublic int getGroupMembersCount(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupMembersCount\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupMembersCount(sess, group);\n-\t}\n-\n-\tpublic void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"addAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().addAdmin(sess, group, user);\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\n-\t\t\tthrow new PrivilegeException(sess, \"addAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().addAdmin(sess, group, authorizedGroup);\n-\t}\n-\n-\tpublic void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotAdminException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().removeAdmin(sess, group, user);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, GroupNotAdminException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().removeAdmin(sess, group, authorizedGroup);\n-\t}\n-\n-\tpublic List<User> getAdmins(PerunSession perunSession, Group group, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) &&\n-\t\t    !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) &&\n-\t\t    !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getAdmins\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAdmins(perunSession, group, onlyDirectAdmins);\n-\t}\n-\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Group group, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\t\t//list of specific attributes must be not null if filtering is needed\n-\t\tif(!allUserAttributes) {\n-\t\t\tUtils.notNull(specificAttributes, \"specificAttributes\");\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdmins\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdmins(perunSession, group, specificAttributes, allUserAttributes, onlyDirectAdmins));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAdmins\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAdmins(sess, group);\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getDirectAdmins\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getDirectAdmins(sess, group);\n-\t}\n-\n-\tpublic List<Group> getAdminGroups(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAdminGroups\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAdminGroups(sess, group);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdmins\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdmins(perunSession, group));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdminsWithAttributes\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdminsWithAttributes(perunSession, group));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdminsWithSpecificAttributes\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getDirectRichAdminsWithSpecificAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getDirectRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n-\t}\n-\n-\tpublic List<Group> getAllGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllGroups\");\n-\t\t\t\t}\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\n-\t\tList<Group> groups = getGroupsManagerBl().getAllGroups(sess, vo);\n-\n-\t\t// Return all groups for VOADMIN and PERUNADMIN\n-\t\tif (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t|| AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t|| AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)) {\n-\t\t\treturn groups;\n-\t\t\t\t}\n-\n-\t\t// Check access rights for each group for GROUPADMIN\n-\t\tif (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n-\t\t\tIterator<Group> eachGroup = groups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn groups;\n-\t\t}\n-\n-\t\t// This shouldn't happen\n-\t\tthrow new PrivilegeException(sess, \"getAllGroups\");\n-\t}\n-\n-\tpublic Map<Group, Object> getAllGroupsWithHierarchy(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n-\t\t\t\t}\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\n-\t\tMap<Group, Object> groups =  getGroupsManagerBl().getAllGroupsWithHierarchy(sess, vo);\n-\n-\t\t// Return all groups for VOADMIN and PERUNADMIN\n-\t\tif (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t|| AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)\n-\t\t\t\t|| AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n-\t\t\treturn groups;\n-\t\t\t\t}\n-\n-\t\t// Check access rights for each group for GROUPADMIN\n-\t\tif (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n-\t\t\tIterator<Group> eachGroup = groups.keySet().iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn groups;\n-\t\t}\n-\n-\t\t// This shouldn't happen\n-\t\tthrow new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n-\t}\n-\n-\tpublic List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSubGroups\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getSubGroups(sess, parentGroup);\n-\t}\n-\n-\tpublic List<Group> getAllSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllSubGroups\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAllSubGroups(sess, parentGroup);\n-\t}\n-\n-\tpublic Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroup\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getParentGroup(sess, group);\n-\t}\n-\n-\tpublic List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroups\");\n-\t\t\t\t}\n-\n-\t\tList<Group> groups =  getGroupsManagerBl().getGroups(sess, vo);\n-\n-\t\t// Return all groups for VOADMIN and PERUNADMIN\n-\t\tif (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t|| AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)\n-\t\t\t\t|| AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n-\t\t\treturn groups;\n-\t\t\t\t}\n-\n-\t\t// Check access rights for each group for GROUPADMIN\n-\t\tif (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n-\t\t\tIterator<Group> eachGroup = groups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn groups;\n-\t\t}\n-\n-\t\t// This shouldn't happen\n-\t\tthrow new PrivilegeException(sess, \"getGroups\");\n-\t}\n-\n-\tpublic int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupsCount\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupsCount(sess, vo);\n-\t}\n-\n-\t@Override\n-\tpublic int getGroupsCount(PerunSession sess) throws InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\treturn getGroupsManagerBl().getGroupsCount(sess);\n-\t}\n-\n-\tpublic int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSubGroupsCount for \" + parentGroup.getName());\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getSubGroupsCount(sess, parentGroup);\n-\t}\n-\n-\tpublic Vo getVo(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\tVo vo =  getGroupsManagerBl().getVo(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getVo\");\n-\t\t\t\t}\n-\n-\t\treturn vo;\n-\t}\n-\n-\tpublic List<Member> getParentGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroupMembers for \" + group.getName());\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getParentGroupMembers(sess, group);\n-\t}\n-\n-\tpublic List<RichMember> getParentGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembers(sess, group), true);\n-\t}\n-\n-\tpublic List<RichMember> getParentGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembersWithAttributes(sess, group), true);\n-\t}\n-\n-\n-\t/**\n-\t * Gets the groupsManagerBl for this instance.\n-\t *\n-\t * @return The groupsManagerBl.\n-\t */\n-\tpublic GroupsManagerBl getGroupsManagerBl() {\n-\t\treturn this.groupsManagerBl;\n-\t}\n-\n-\t/**\n-\t * Sets the perunBl for this instance.\n-\t *\n-\t * @param perunBl The perunBl.\n-\t */\n-\tpublic void setPerunBl(PerunBl perunBl)\n-\t{\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t/**\n-\t * Sets the groupsManagerBl for this instance.\n-\t *\n-\t * @param groupsManagerBl The groupsManagerBl.\n-\t */\n-\tpublic void setGroupsManagerBl(GroupsManagerBl groupsManagerBl)\n-\t{\n-\t\tthis.groupsManagerBl = groupsManagerBl;\n-\t}\n-\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void forceGroupSynchronization(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupSynchronizationAlreadyRunningException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group))  {\n-\t\t\tthrow new PrivilegeException(sess, \"synchronizeGroup\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().forceGroupSynchronization(sess, group);\n-\t}\n-\n-\tpublic void synchronizeGroups(PerunSession sess) throws InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN))  {\n-\t\t\tthrow new PrivilegeException(sess, \"synchronizeGroups\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().synchronizeGroups(sess);\n-\t}\n-\n-\tpublic List<Group> getMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\tVo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberGroups for \" + member);\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getMemberGroups(sess, member);\n-\t}\n-\n-\n-\tpublic List<Group> getMemberGroupsByAttribute(PerunSession sess, Member member, Attribute attribute) throws WrongAttributeAssignmentException, PrivilegeException,InternalErrorException, VoNotExistsException, MemberNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\t\tgetPerunBl().getAttributesManagerBl().checkAttributeExists(sess, new AttributeDefinition(attribute));\n-\n-\t\tVo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\n-\t\t//Only group attributes are allowed\n-\t\tif(!this.getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManagerEntry.NS_GROUP_ATTR)) {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberGroupsByAttribute for \" + member);\n-\t\t}\n-\n-\t\tList<Group> groups = this.groupsManagerBl.getMemberGroupsByAttribute(sess, member, attribute);\n-\n-\t\t//If actor has no right to read attribute for group, throw exception\n-\t\tfor(Group group: groups) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attribute, group, null)) {\n-\t\t\t\t\tthrow new PrivilegeException(sess, \"Actor hasn't right to read attribute for a group.\");\n-\t\t\t\t}\n-\t\t}\n-\n-\t\treturn groups;\n-\t}\n-\n-\tpublic List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\tVo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllMemberGroups for \" + member);\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t}\n-\n-\tpublic List<RichGroup> getRichGroupsAssignedToResourceWithAttributesByNames(PerunSession sess, Resource resource, List<String> attrNames) throws InternalErrorException, ResourceNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getPerunBl().getResourcesManagerBl().checkResourceExists(sess, resource);\n-\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resource) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, resource) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.FACILITYADMIN, facility)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichGroupsAssignedToResourceWithAttributesByNames\");\n-\t\t}\n-\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getRichGroupsWithAttributesAssignedToResource(sess, resource, attrNames);\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic List<RichGroup> getAllRichGroupsWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllRichGroupsWithAttributesByNames\");\n-\t\t}\n-\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getAllRichGroupsWithAttributesByNames(sess, vo, attrNames);\n-\n-\t\t// Check access rights for each richGroup for GROUPADMIN\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t    && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t    && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n-\t\t\tIterator<RichGroup> groupByName = richGroups.iterator();\n-\t\t\twhile (groupByName.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, groupByName.next())) {\n-\t\t\t\t\tgroupByName.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic List<RichGroup> getRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichSubGroupsWithAttributesByNames\");\n-\t\t}\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n-\n-\t\t// Check access rights for each richGroup for GROUPADMIN\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tIterator<RichGroup> eachGroup = richGroups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic List<RichGroup> getAllRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllRichSubGroupsWithAttributesByNames\");\n-\t\t}\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getAllRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n-\n-\t\t// Check access rights for each richGroup for GROUPADMIN\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tIterator<RichGroup> eachGroup = richGroups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic RichGroup getRichGroupByIdWithAttributesByNames(PerunSession sess, int groupId, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tGroup group = groupsManagerBl.getGroupById(sess, groupId);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichGroupByIdWithAttributesByNames\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getRichGroupByIdWithAttributesByNames(sess, groupId, attrNames));\n-\n-\t}\n-\n-\t@Override\n-\tpublic Group createGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, resultGroup);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, operandGroup);\n-\n-\t\t// Authorization\n-\t\tif ((!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) ||\n-\t\t\t\t(!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup))) {\n-\t\t\tthrow new PrivilegeException(sess, \"createGroupUnion\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().createGroupUnion(sess, resultGroup, operandGroup, false);\n-\t}\n-\n-\t@Override\n-\tpublic void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, resultGroup);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, operandGroup);\n-\n-\t\t// Authorization\n-\t\tif ( (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) ||\n-\t\t\t\t(!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup)) ) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeGroupUnion\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().removeGroupUnion(sess, resultGroup, operandGroup, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupUnions(PerunSession sess, Group group, boolean reverseDirection) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif ( !AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupUnions\");\n-\t\t}\n-\n-\t\treturn groupsManagerBl.getGroupUnions(sess, group, reverseDirection);\n-\t}\n+    public Group createGroup(PerunSession sess, Group parentGroup, Group group) throws GroupNotExistsException, GroupExistsException, PrivilegeException, InternalErrorException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+        Utils.notNull(group, \"group\");\n+        Utils.notNull(group.getName(), \"group.name\");\n+\n+\n+        if (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n+            throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n+        }\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+            throw new PrivilegeException(sess, \"createGroup - subGroup\");\n+        }\n+\n+        Group createdGroup = getGroupsManagerBl().createGroup(sess, parentGroup, group);\n+\n+        //Refresh authz\n+        AuthzResolver.refreshAuthz(sess);\n+        return createdGroup;\n+    }\n+\n+    public void deleteGroup(PerunSession sess, Group group, boolean forceDelete)\n+            throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"deleteGroup\");\n+        }\n+\n+        getGroupsManagerBl().deleteGroup(sess, group, forceDelete);\n+    }\n+\n+    public void deleteGroup(PerunSession sess, Group group)\n+            throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+        this.deleteGroup(sess, group, false);\n+    }\n+\n+    public void deleteAllGroups(PerunSession sess, Vo vo)\n+            throws VoNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupNotExistsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+        Utils.checkPerunSession(sess);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)) {\n+            throw new PrivilegeException(sess, \"deleteAllGroups\");\n+        }\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        getGroupsManagerBl().deleteAllGroups(sess, vo);\n+    }\n+\n+    public void deleteGroups(PerunSession perunSession, List<Group> groups, boolean forceDelete)\n+            throws GroupNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, RelationExistsException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+        Utils.checkPerunSession(perunSession);\n+        Utils.notNull(groups, \"groups\");\n+\n+        //Test if all groups exists and user has right to delete all of them\n+        for (Group group : groups) {\n+            getGroupsManagerBl().checkGroupExists(perunSession, group);\n+            //test of privileges on group\n+            if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+                throw new PrivilegeException(perunSession, \"deleteGroups\");\n+            }\n+        }\n+\n+        getGroupsManagerBl().deleteGroups(perunSession, groups, forceDelete);\n+    }\n+\n+    public Group updateGroup(PerunSession sess, Group group) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+        Utils.notNull(group, \"group\");\n+        Utils.notNull(group.getName(), \"group.name\");\n+\n+        if (!group.getShortName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n+            throw new InternalErrorException(new IllegalArgumentException(\"Wrong group shortName, group shortName must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n+        }\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"updateGroup\");\n+        }\n+\n+        return getGroupsManagerBl().updateGroup(sess, group);\n+    }\n+\n+    public Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        Group group = getGroupsManagerBl().getGroupById(sess, id);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) &&\n+                !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) &&\n+                !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group) &&\n+                !AuthzResolver.isAuthorized(sess, Role.RPC)) {\n+            throw new PrivilegeException(sess, \"getGroupById\");\n+        }\n+\n+        return group;\n+    }\n+\n+    public Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException, PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+        Utils.notNull(name, \"name\");\n+\n+        if (!name.matches(GroupsManager.GROUP_FULL_NAME_REGEXP)) {\n+            throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_FULL_NAME_REGEXP));\n+        }\n+\n+        Group group = getGroupsManagerBl().getGroupByName(sess, vo, name);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupByName\");\n+        }\n+\n+        return group;\n+    }\n+\n+    public void addMember(PerunSession sess, Group group, Member member)\n+            throws InternalErrorException, MemberNotExistsException, PrivilegeException, AlreadyMemberException, GroupNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException,\n+            GroupOperationsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"addMember\");\n+        }\n+\n+        // Check if the member and group are from the same VO\n+        if (member.getVoId() != (group.getVoId())) {\n+            throw new MembershipMismatchException(\"Member and group are form the different VO\");\n+        }\n+\n+        // Check if the group is externally synchronized\n+        Attribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n+        if (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n+            throw new ExternallyManagedException(\"Adding of member is not allowed. Group is externally managed.\");\n+        }\n+\n+        getGroupsManagerBl().addMember(sess, group, member);\n+    }\n+\n+    public void removeMember(PerunSession sess, Group group, Member member)\n+            throws InternalErrorException, MemberNotExistsException, NotGroupMemberException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException, GroupOperationsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"removeMember\");\n+        }\n+\n+        // Check if the group is externally synchronized\n+        Attribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n+        if (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n+            throw new ExternallyManagedException(\"Removing of member is not allowed. Group is externally managed.\");\n+        }\n+\n+        getGroupsManagerBl().removeMember(sess, group, member);\n+    }\n+\n+    public List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupMembers\");\n+        }\n+\n+        return getGroupsManagerBl().getGroupMembers(sess, group);\n+    }\n+\n+    public List<Member> getGroupMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupMembers\");\n+        }\n+\n+        return getGroupsManagerBl().getGroupMembers(sess, group, status);\n+    }\n+\n+    public List<RichMember> getGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupRichMembers\");\n+        }\n+\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group), true);\n+    }\n+\n+    public List<RichMember> getGroupRichMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupRichMembers\");\n+        }\n+\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group, status), true);\n+    }\n+\n+    public List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n+        }\n+\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group), true);\n+    }\n+\n+    public List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n+        }\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group, status), true);\n+    }\n+\n+    public int getGroupMembersCount(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupMembersCount\");\n+        }\n+\n+        return getGroupsManagerBl().getGroupMembersCount(sess, group);\n+    }\n+\n+    public void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+        getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"addAdmin\");\n+        }\n+\n+        getGroupsManagerBl().addAdmin(sess, group, user);\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+        getGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+\n+            throw new PrivilegeException(sess, \"addAdmin\");\n+        }\n+\n+        getGroupsManagerBl().addAdmin(sess, group, authorizedGroup);\n+    }\n+\n+    public void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotAdminException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+        getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"removeAdmin\");\n+        }\n+\n+        getGroupsManagerBl().removeAdmin(sess, group, user);\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, GroupNotAdminException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+        getGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"removeAdmin\");\n+        }\n+\n+        getGroupsManagerBl().removeAdmin(sess, group, authorizedGroup);\n+    }\n+\n+    public List<User> getAdmins(PerunSession perunSession, Group group, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(perunSession);\n+        getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) &&\n+                !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) &&\n+                !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(perunSession, \"getAdmins\");\n+        }\n+\n+        return getGroupsManagerBl().getAdmins(perunSession, group, onlyDirectAdmins);\n+    }\n+\n+    public List<RichUser> getRichAdmins(PerunSession perunSession, Group group, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(perunSession);\n+        getGroupsManagerBl().checkGroupExists(perunSession, group);\n+        //list of specific attributes must be not null if filtering is needed\n+        if (!allUserAttributes) {\n+            Utils.notNull(specificAttributes, \"specificAttributes\");\n+        }\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) &&\n+                !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) &&\n+                !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(perunSession, \"getRichAdmins\");\n+        }\n+\n+        return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdmins(perunSession, group, specificAttributes, allUserAttributes, onlyDirectAdmins));\n+    }\n+\n+    @Deprecated\n+    public List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) &&\n+                !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) &&\n+                !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getAdmins\");\n+        }\n+\n+        return getGroupsManagerBl().getAdmins(sess, group);\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getDirectAdmins\");\n+        }\n+\n+        return getGroupsManagerBl().getDirectAdmins(sess, group);\n+    }\n+\n+    public List<Group> getAdminGroups(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getAdminGroups\");\n+        }\n+\n+        return getGroupsManagerBl().getAdminGroups(sess, group);\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getRichAdmins(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(perunSession);\n+        getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(perunSession, \"getRichAdmins\");\n+        }\n+\n+        return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdmins(perunSession, group));\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(perunSession);\n+        getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(perunSession, \"getRichAdminsWithAttributes\");\n+        }\n+\n+        return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdminsWithAttributes(perunSession, group));\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(perunSession);\n+        getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(perunSession, \"getRichAdminsWithSpecificAttributes\");\n+        }\n+\n+        return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+        Utils.checkPerunSession(perunSession);\n+        getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(perunSession, \"getDirectRichAdminsWithSpecificAttributes\");\n+        }\n+\n+        return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getDirectRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n+    }\n+\n+    public List<Group> getAllGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n+                !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n+                !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+            throw new PrivilegeException(sess, \"getAllGroups\");\n+        }\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+\n+        List<Group> groups = getGroupsManagerBl().getAllGroups(sess, vo);\n+\n+        // Return all groups for VOADMIN and PERUNADMIN\n+        if (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                || AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                || AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)) {\n+            return groups;\n+        }\n+\n+        // Check access rights for each group for GROUPADMIN\n+        if (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n+            Iterator<Group> eachGroup = groups.iterator();\n+            while (eachGroup.hasNext()) {\n+                if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+                    eachGroup.remove();\n+                }\n+            }\n+            return groups;\n+        }\n+\n+        // This shouldn't happen\n+        throw new PrivilegeException(sess, \"getAllGroups\");\n+    }\n+\n+    public Map<Group, Object> getAllGroupsWithHierarchy(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n+                !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n+                !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+            throw new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n+        }\n+\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+\n+        Map<Group, Object> groups = getGroupsManagerBl().getAllGroupsWithHierarchy(sess, vo);\n+\n+        // Return all groups for VOADMIN and PERUNADMIN\n+        if (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                || AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)\n+                || AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n+            return groups;\n+        }\n+\n+        // Check access rights for each group for GROUPADMIN\n+        if (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n+            Iterator<Group> eachGroup = groups.keySet().iterator();\n+            while (eachGroup.hasNext()) {\n+                if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+                    eachGroup.remove();\n+                }\n+            }\n+            return groups;\n+        }\n+\n+        // This shouldn't happen\n+        throw new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n+    }\n+\n+    public List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+            throw new PrivilegeException(sess, \"getSubGroups\");\n+        }\n+\n+        return getGroupsManagerBl().getSubGroups(sess, parentGroup);\n+    }\n+\n+    public List<Group> getAllSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+            throw new PrivilegeException(sess, \"getAllSubGroups\");\n+        }\n+\n+        return getGroupsManagerBl().getAllSubGroups(sess, parentGroup);\n+    }\n+\n+    public Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getParentGroup\");\n+        }\n+\n+        return getGroupsManagerBl().getParentGroup(sess, group);\n+    }\n+\n+    public List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n+                !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n+                !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+            throw new PrivilegeException(sess, \"getGroups\");\n+        }\n+\n+        List<Group> groups = getGroupsManagerBl().getGroups(sess, vo);\n+\n+        // Return all groups for VOADMIN and PERUNADMIN\n+        if (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                || AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)\n+                || AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n+            return groups;\n+        }\n+\n+        // Check access rights for each group for GROUPADMIN\n+        if (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n+            Iterator<Group> eachGroup = groups.iterator();\n+            while (eachGroup.hasNext()) {\n+                if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+                    eachGroup.remove();\n+                }\n+            }\n+            return groups;\n+        }\n+\n+        // This shouldn't happen\n+        throw new PrivilegeException(sess, \"getGroups\");\n+    }\n+\n+    public int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n+            throw new PrivilegeException(sess, \"getGroupsCount\");\n+        }\n+\n+        return getGroupsManagerBl().getGroupsCount(sess, vo);\n+    }\n+\n+    @Override\n+    public int getGroupsCount(PerunSession sess) throws InternalErrorException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        return getGroupsManagerBl().getGroupsCount(sess);\n+    }\n+\n+    public int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+            throw new PrivilegeException(sess, \"getSubGroupsCount for \" + parentGroup.getName());\n+        }\n+\n+        return getGroupsManagerBl().getSubGroupsCount(sess, parentGroup);\n+    }\n+\n+    public Vo getVo(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        Vo vo = getGroupsManagerBl().getVo(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getVo\");\n+        }\n+\n+        return vo;\n+    }\n+\n+    public List<Member> getParentGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getParentGroupMembers for \" + group.getName());\n+        }\n+\n+        return getGroupsManagerBl().getParentGroupMembers(sess, group);\n+    }\n+\n+    public List<RichMember> getParentGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n+        }\n+\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembers(sess, group), true);\n+    }\n+\n+    public List<RichMember> getParentGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n+        }\n+\n+        return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembersWithAttributes(sess, group), true);\n+    }\n+\n+\n+    /**\n+     * Gets the groupsManagerBl for this instance.\n+     *\n+     * @return The groupsManagerBl.\n+     */\n+    public GroupsManagerBl getGroupsManagerBl() {\n+        return this.groupsManagerBl;\n+    }\n+\n+    /**\n+     * Sets the perunBl for this instance.\n+     *\n+     * @param perunBl The perunBl.\n+     */\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n+\n+    /**\n+     * Sets the groupsManagerBl for this instance.\n+     *\n+     * @param groupsManagerBl The groupsManagerBl.\n+     */\n+    public void setGroupsManagerBl(GroupsManagerBl groupsManagerBl) {\n+        this.groupsManagerBl = groupsManagerBl;\n+    }\n+\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n+\n+    public void forceGroupSynchronization(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupSynchronizationAlreadyRunningException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"synchronizeGroup\");\n+        }\n+\n+        getGroupsManagerBl().forceGroupSynchronization(sess, group);\n+    }\n+\n+    public void synchronizeGroups(PerunSession sess) throws InternalErrorException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) {\n+            throw new PrivilegeException(sess, \"synchronizeGroups\");\n+        }\n+\n+        getGroupsManagerBl().synchronizeGroups(sess);\n+    }\n+\n+    public List<Group> getMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        Vo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n+            throw new PrivilegeException(sess, \"getMemberGroups for \" + member);\n+        }\n+\n+        return getGroupsManagerBl().getMemberGroups(sess, member);\n+    }\n+\n+\n+    public List<Group> getMemberGroupsByAttribute(PerunSession sess, Member member, Attribute attribute) throws WrongAttributeAssignmentException, PrivilegeException, InternalErrorException, VoNotExistsException, MemberNotExistsException, AttributeNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+        getPerunBl().getAttributesManagerBl().checkAttributeExists(sess, new AttributeDefinition(attribute));\n+\n+        Vo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+\n+        //Only group attributes are allowed\n+        if (!this.getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManagerEntry.NS_GROUP_ATTR)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n+            throw new PrivilegeException(sess, \"getMemberGroupsByAttribute for \" + member);\n+        }\n+\n+        List<Group> groups = this.groupsManagerBl.getMemberGroupsByAttribute(sess, member, attribute);\n+\n+        //If actor has no right to read attribute for group, throw exception\n+        for (Group group : groups) {\n+            if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attribute, group, null)) {\n+                throw new PrivilegeException(sess, \"Actor hasn't right to read attribute for a group.\");\n+            }\n+        }\n+\n+        return groups;\n+    }\n+\n+    public List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n+        Utils.checkPerunSession(sess);\n+        getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+\n+        Vo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n+            throw new PrivilegeException(sess, \"getAllMemberGroups for \" + member);\n+        }\n+\n+        return getGroupsManagerBl().getAllMemberGroups(sess, member);\n+    }\n+\n+    public List<RichGroup> getRichGroupsAssignedToResourceWithAttributesByNames(PerunSession sess, Resource resource, List<String> attrNames) throws InternalErrorException, ResourceNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        this.getPerunBl().getResourcesManagerBl().checkResourceExists(sess, resource);\n+\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resource) &&\n+                !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, resource) &&\n+                !AuthzResolver.isAuthorized(sess, Role.FACILITYADMIN, facility)) {\n+            throw new PrivilegeException(sess, \"getRichGroupsAssignedToResourceWithAttributesByNames\");\n+        }\n+\n+        List<RichGroup> richGroups = getGroupsManagerBl().getRichGroupsWithAttributesAssignedToResource(sess, resource, attrNames);\n+\n+        return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+    }\n+\n+    public List<RichGroup> getAllRichGroupsWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException, VoNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        this.getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n+            throw new PrivilegeException(sess, \"getAllRichGroupsWithAttributesByNames\");\n+        }\n+\n+        List<RichGroup> richGroups = getGroupsManagerBl().getAllRichGroupsWithAttributesByNames(sess, vo, attrNames);\n+\n+        // Check access rights for each richGroup for GROUPADMIN\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+                && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n+            Iterator<RichGroup> groupByName = richGroups.iterator();\n+            while (groupByName.hasNext()) {\n+                if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, groupByName.next())) {\n+                    groupByName.remove();\n+                }\n+            }\n+        }\n+\n+        return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+    }\n+\n+    public List<RichGroup> getRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        this.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+            throw new PrivilegeException(sess, \"getRichSubGroupsWithAttributesByNames\");\n+        }\n+        List<RichGroup> richGroups = getGroupsManagerBl().getRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n+\n+        // Check access rights for each richGroup for GROUPADMIN\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n+                && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+            Iterator<RichGroup> eachGroup = richGroups.iterator();\n+            while (eachGroup.hasNext()) {\n+                if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+                    eachGroup.remove();\n+                }\n+            }\n+        }\n+\n+        return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+    }\n+\n+    public List<RichGroup> getAllRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        this.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+            throw new PrivilegeException(sess, \"getAllRichSubGroupsWithAttributesByNames\");\n+        }\n+        List<RichGroup> richGroups = getGroupsManagerBl().getAllRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n+\n+        // Check access rights for each richGroup for GROUPADMIN\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n+                && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+            Iterator<RichGroup> eachGroup = richGroups.iterator();\n+            while (eachGroup.hasNext()) {\n+                if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+                    eachGroup.remove();\n+                }\n+            }\n+        }\n+\n+        return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+    }\n+\n+    public RichGroup getRichGroupByIdWithAttributesByNames(PerunSession sess, int groupId, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+\n+        Group group = groupsManagerBl.getGroupById(sess, groupId);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n+                && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getRichGroupByIdWithAttributesByNames\");\n+        }\n+\n+        return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getRichGroupByIdWithAttributesByNames(sess, groupId, attrNames));\n+\n+    }\n+\n+    @Override\n+    public Group createGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, resultGroup);\n+        getGroupsManagerBl().checkGroupExists(sess, operandGroup);\n+\n+        // Authorization\n+        if ((!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) ||\n+                (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup))) {\n+            throw new PrivilegeException(sess, \"createGroupUnion\");\n+        }\n+\n+        return getGroupsManagerBl().createGroupUnion(sess, resultGroup, operandGroup, false);\n+    }\n+\n+    @Override\n+    public void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, resultGroup);\n+        getGroupsManagerBl().checkGroupExists(sess, operandGroup);\n+\n+        // Authorization\n+        if ((!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) ||\n+                (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup))) {\n+            throw new PrivilegeException(sess, \"removeGroupUnion\");\n+        }\n+\n+        getGroupsManagerBl().removeGroupUnion(sess, resultGroup, operandGroup, false);\n+    }\n+\n+    @Override\n+    public List<Group> getGroupUnions(PerunSession sess, Group group, boolean reverseDirection) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n+        Utils.checkPerunSession(sess);\n+        getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+        // Authorization\n+        if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+            throw new PrivilegeException(sess, \"getGroupUnions\");\n+        }\n+\n+        return groupsManagerBl.getGroupUnions(sess, group, reverseDirection);\n+    }\n }\n",
            "diff_size": 1075
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/155/GroupsManagerEntry.java\nindex 66dace4f26d..78e7bc2ea88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/155/GroupsManagerEntry.java\n@@ -1,11 +1,9 @@\n package cz.metacentrum.perun.core.entry;\n \n import cz.metacentrum.perun.core.api.*;\n-\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-\n import cz.metacentrum.perun.core.api.exceptions.*;\n import cz.metacentrum.perun.core.api.exceptions.IllegalArgumentException;\n import cz.metacentrum.perun.core.api.exceptions.rt.InternalErrorRuntimeException;\n@@ -21,1036 +19,905 @@ import java.util.Objects;\n  * @author Michal Prochazka michalp@ics.muni.cz\n  * @author Slavek Licehammer glory@ics.muni.cz\n  */\n-public class GroupsManagerEntry implements GroupsManager {\n-\n-\tprivate GroupsManagerBl groupsManagerBl;\n-\tprivate PerunBl perunBl;\n-\n-\tpublic GroupsManagerEntry(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t\tthis.groupsManagerBl = perunBl.getGroupsManagerBl();\n-\t}\n-\n-\tpublic GroupsManagerEntry() {}\n-\n-\t//FIXME delete this method\n-\tpublic GroupsManagerImplApi getGroupsManagerImpl() {\n-\t\tthrow new InternalErrorRuntimeException(\"Unsupported method!\");\n-\t}\n-\n-\tpublic Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, PrivilegeException, InternalErrorException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.name\");\n-\n-\n-\t\tif (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n-\t\t}\n-\n-\t\tif (group.getParentGroupId() != null) throw new InternalErrorException(\"Top-level groups can't have parentGroupId set!\");\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t    !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"createGroup\");\n-\t\t}\n \n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\tGroup createdGroup = getGroupsManagerBl().createGroup(sess, vo, group);\n-\n-\t\t//Refresh authz\n-\t\tAuthzResolver.refreshAuthz(sess);\n-\t\treturn createdGroup;\n-\t}\n-\n-\tpublic Group createGroup(PerunSession sess, Group parentGroup, Group group) throws GroupNotExistsException, GroupExistsException, PrivilegeException, InternalErrorException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.name\");\n-\n-\n-\t\tif (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"createGroup - subGroup\");\n-\t\t\t\t}\n-\n-\t\tGroup createdGroup = getGroupsManagerBl().createGroup(sess, parentGroup, group);\n-\n-\t\t//Refresh authz\n-\t\tAuthzResolver.refreshAuthz(sess);\n-\t\treturn createdGroup;\n-\t}\n-\n-\tpublic void deleteGroup(PerunSession sess, Group group, boolean forceDelete) throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteGroup\");\n-\t\t\t\t}\n+public class GroupsManagerEntry implements GroupsManager {\n \n-\t\tgetGroupsManagerBl().deleteGroup(sess, group, forceDelete);\n-\t}\n-\n-\tpublic void deleteGroup(PerunSession sess, Group group) throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tthis.deleteGroup(sess, group, false);\n-\t}\n-\n-\tpublic void deleteAllGroups(PerunSession sess, Vo vo) throws VoNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupNotExistsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(sess);\n \n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"deleteAllGroups\");\n-\t\t}\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\tgetGroupsManagerBl().deleteAllGroups(sess, vo);\n-\t}\n-\n-\tpublic void deleteGroups(PerunSession perunSession, List<Group> groups, boolean forceDelete) throws GroupNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, RelationExistsException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tUtils.notNull(groups, \"groups\");\n-\n-\t\t//Test if all groups exists and user has right to delete all of them\n-\t\tfor(Group group: groups) {\n-\t\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\t\t\t//test of privileges on group\n-\t\t\tif(!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\t\tthrow new PrivilegeException(perunSession, \"deleteGroups\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().deleteGroups(perunSession, groups, forceDelete);\n-\t}\n-\n-\tpublic Group updateGroup(PerunSession sess, Group group) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(group.getName(), \"group.name\");\n-\n-\t\tif (!group.getShortName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group shortName, group shortName must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"updateGroup\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().updateGroup(sess, group);\n-\t}\n-\n-\tpublic Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tGroup group = getGroupsManagerBl().getGroupById(sess, id);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.RPC)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupById\");\n-\t\t\t\t}\n-\n-\t\treturn group;\n-\t}\n-\n-\tpublic Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\t\tUtils.notNull(name, \"name\");\n-\n-\t\tif (!name.matches(GroupsManager.GROUP_FULL_NAME_REGEXP)) {\n-\t\t\tthrow new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_FULL_NAME_REGEXP));\n-\t\t}\n-\n-\t\tGroup group = getGroupsManagerBl().getGroupByName(sess, vo, name);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupByName\");\n-\t\t\t\t}\n-\n-\t\treturn group;\n-\t}\n-\n-\tpublic void addMember(PerunSession sess, Group group, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException, AlreadyMemberException, GroupNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException, GroupOperationsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t    && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"addMember\");\n-\t\t}\n-\n-\t\t// Check if the member and group are from the same VO\n-\t\tif (member.getVoId() != (group.getVoId())) {\n-\t\t\tthrow new MembershipMismatchException(\"Member and group are form the different VO\");\n-\t\t}\n-\n-\t\t// Check if the group is externally synchronized\n-\t\tAttribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n-\t\tif (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n-\t\t\tthrow new ExternallyManagedException(\"Adding of member is not allowed. Group is externally managed.\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().addMember(sess, group, member);\n-\t}\n-\n-\tpublic void removeMember(PerunSession sess, Group group, Member member) throws InternalErrorException, MemberNotExistsException, NotGroupMemberException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException, GroupOperationsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t    && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeMember\");\n-\t\t}\n-\n-\t\t// Check if the group is externally synchronized\n-\t\tAttribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n-\t\tif (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n-\t\t\tthrow new ExternallyManagedException(\"Removing of member is not allowed. Group is externally managed.\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().removeMember(sess, group, member);\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupMembers(sess, group);\n-\t}\n-\n-\tpublic List<Member> getGroupMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupMembers(sess, group, status);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group), true);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembers\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group, status), true);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group), true);\n-\t}\n-\n-\tpublic List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n-\t\t\t\t}\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group, status), true);\n-\t}\n-\n-\tpublic int getGroupMembersCount(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupMembersCount\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupMembersCount(sess, group);\n-\t}\n-\n-\tpublic void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"addAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().addAdmin(sess, group, user);\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\n-\t\t\tthrow new PrivilegeException(sess, \"addAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().addAdmin(sess, group, authorizedGroup);\n-\t}\n-\n-\tpublic void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotAdminException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().removeAdmin(sess, group, user);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, GroupNotAdminException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeAdmin\");\n-\t\t\t\t}\n-\n-\t\tgetGroupsManagerBl().removeAdmin(sess, group, authorizedGroup);\n-\t}\n-\n-\tpublic List<User> getAdmins(PerunSession perunSession, Group group, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) &&\n-\t\t    !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) &&\n-\t\t    !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getAdmins\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAdmins(perunSession, group, onlyDirectAdmins);\n-\t}\n-\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Group group, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\t\t//list of specific attributes must be not null if filtering is needed\n-\t\tif(!allUserAttributes) {\n-\t\t\tUtils.notNull(specificAttributes, \"specificAttributes\");\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdmins\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdmins(perunSession, group, specificAttributes, allUserAttributes, onlyDirectAdmins));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAdmins\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAdmins(sess, group);\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getDirectAdmins\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getDirectAdmins(sess, group);\n-\t}\n-\n-\tpublic List<Group> getAdminGroups(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAdminGroups\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAdminGroups(sess, group);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdmins\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdmins(perunSession, group));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdminsWithAttributes\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdminsWithAttributes(perunSession, group));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getRichAdminsWithSpecificAttributes\");\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(perunSession);\n-\t\tgetGroupsManagerBl().checkGroupExists(perunSession, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(perunSession, \"getDirectRichAdminsWithSpecificAttributes\");\n-\t\t}\n-\n-\t\treturn getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getDirectRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n-\t}\n-\n-\tpublic List<Group> getAllGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllGroups\");\n-\t\t\t\t}\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\n-\t\tList<Group> groups = getGroupsManagerBl().getAllGroups(sess, vo);\n-\n-\t\t// Return all groups for VOADMIN and PERUNADMIN\n-\t\tif (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t|| AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t|| AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)) {\n-\t\t\treturn groups;\n-\t\t\t\t}\n-\n-\t\t// Check access rights for each group for GROUPADMIN\n-\t\tif (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n-\t\t\tIterator<Group> eachGroup = groups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn groups;\n-\t\t}\n-\n-\t\t// This shouldn't happen\n-\t\tthrow new PrivilegeException(sess, \"getAllGroups\");\n-\t}\n-\n-\tpublic Map<Group, Object> getAllGroupsWithHierarchy(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n-\t\t\t\t}\n-\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\n-\t\tMap<Group, Object> groups =  getGroupsManagerBl().getAllGroupsWithHierarchy(sess, vo);\n-\n-\t\t// Return all groups for VOADMIN and PERUNADMIN\n-\t\tif (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t|| AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)\n-\t\t\t\t|| AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n-\t\t\treturn groups;\n-\t\t\t\t}\n-\n-\t\t// Check access rights for each group for GROUPADMIN\n-\t\tif (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n-\t\t\tIterator<Group> eachGroup = groups.keySet().iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn groups;\n-\t\t}\n-\n-\t\t// This shouldn't happen\n-\t\tthrow new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n-\t}\n-\n-\tpublic List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSubGroups\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getSubGroups(sess, parentGroup);\n-\t}\n-\n-\tpublic List<Group> getAllSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllSubGroups\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAllSubGroups(sess, parentGroup);\n-\t}\n-\n-\tpublic Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroup\");\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getParentGroup(sess, group);\n-\t}\n-\n-\tpublic List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroups\");\n-\t\t\t\t}\n-\n-\t\tList<Group> groups =  getGroupsManagerBl().getGroups(sess, vo);\n-\n-\t\t// Return all groups for VOADMIN and PERUNADMIN\n-\t\tif (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t|| AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)\n-\t\t\t\t|| AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n-\t\t\treturn groups;\n-\t\t\t\t}\n-\n-\t\t// Check access rights for each group for GROUPADMIN\n-\t\tif (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n-\t\t\tIterator<Group> eachGroup = groups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn groups;\n-\t\t}\n-\n-\t\t// This shouldn't happen\n-\t\tthrow new PrivilegeException(sess, \"getGroups\");\n-\t}\n-\n-\tpublic int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupsCount\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().getGroupsCount(sess, vo);\n-\t}\n-\n-\t@Override\n-\tpublic int getGroupsCount(PerunSession sess) throws InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\treturn getGroupsManagerBl().getGroupsCount(sess);\n-\t}\n-\n-\tpublic int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getSubGroupsCount for \" + parentGroup.getName());\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getSubGroupsCount(sess, parentGroup);\n-\t}\n-\n-\tpublic Vo getVo(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\tVo vo =  getGroupsManagerBl().getVo(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getVo\");\n-\t\t\t\t}\n-\n-\t\treturn vo;\n-\t}\n-\n-\tpublic List<Member> getParentGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroupMembers for \" + group.getName());\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getParentGroupMembers(sess, group);\n-\t}\n-\n-\tpublic List<RichMember> getParentGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembers(sess, group), true);\n-\t}\n-\n-\tpublic List<RichMember> getParentGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n-\t\t\t\t}\n-\n-\t\treturn getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembersWithAttributes(sess, group), true);\n-\t}\n-\n-\n-\t/**\n-\t * Gets the groupsManagerBl for this instance.\n-\t *\n-\t * @return The groupsManagerBl.\n-\t */\n-\tpublic GroupsManagerBl getGroupsManagerBl() {\n-\t\treturn this.groupsManagerBl;\n-\t}\n-\n-\t/**\n-\t * Sets the perunBl for this instance.\n-\t *\n-\t * @param perunBl The perunBl.\n-\t */\n-\tpublic void setPerunBl(PerunBl perunBl)\n-\t{\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t/**\n-\t * Sets the groupsManagerBl for this instance.\n-\t *\n-\t * @param groupsManagerBl The groupsManagerBl.\n-\t */\n-\tpublic void setGroupsManagerBl(GroupsManagerBl groupsManagerBl)\n-\t{\n-\t\tthis.groupsManagerBl = groupsManagerBl;\n-\t}\n-\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void forceGroupSynchronization(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupSynchronizationAlreadyRunningException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group))  {\n-\t\t\tthrow new PrivilegeException(sess, \"synchronizeGroup\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().forceGroupSynchronization(sess, group);\n-\t}\n-\n-\tpublic void synchronizeGroups(PerunSession sess) throws InternalErrorException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN))  {\n-\t\t\tthrow new PrivilegeException(sess, \"synchronizeGroups\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().synchronizeGroups(sess);\n-\t}\n-\n-\tpublic List<Group> getMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\tVo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberGroups for \" + member);\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getMemberGroups(sess, member);\n-\t}\n-\n-\n-\tpublic List<Group> getMemberGroupsByAttribute(PerunSession sess, Member member, Attribute attribute) throws WrongAttributeAssignmentException, PrivilegeException,InternalErrorException, VoNotExistsException, MemberNotExistsException, AttributeNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\t\tgetPerunBl().getAttributesManagerBl().checkAttributeExists(sess, new AttributeDefinition(attribute));\n-\n-\t\tVo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\n-\t\t//Only group attributes are allowed\n-\t\tif(!this.getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManagerEntry.NS_GROUP_ATTR)) {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getMemberGroupsByAttribute for \" + member);\n-\t\t}\n-\n-\t\tList<Group> groups = this.groupsManagerBl.getMemberGroupsByAttribute(sess, member, attribute);\n-\n-\t\t//If actor has no right to read attribute for group, throw exception\n-\t\tfor(Group group: groups) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attribute, group, null)) {\n-\t\t\t\t\tthrow new PrivilegeException(sess, \"Actor hasn't right to read attribute for a group.\");\n-\t\t\t\t}\n-\t\t}\n-\n-\t\treturn groups;\n-\t}\n-\n-\tpublic List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n-\n-\t\tVo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllMemberGroups for \" + member);\n-\t\t\t\t}\n-\n-\t\treturn getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t}\n-\n-\tpublic List<RichGroup> getRichGroupsAssignedToResourceWithAttributesByNames(PerunSession sess, Resource resource, List<String> attrNames) throws InternalErrorException, ResourceNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getPerunBl().getResourcesManagerBl().checkResourceExists(sess, resource);\n-\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resource) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, resource) &&\n-\t\t\t\t!AuthzResolver.isAuthorized(sess, Role.FACILITYADMIN, facility)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichGroupsAssignedToResourceWithAttributesByNames\");\n-\t\t}\n-\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getRichGroupsWithAttributesAssignedToResource(sess, resource, attrNames);\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic List<RichGroup> getAllRichGroupsWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllRichGroupsWithAttributesByNames\");\n-\t\t}\n-\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getAllRichGroupsWithAttributesByNames(sess, vo, attrNames);\n-\n-\t\t// Check access rights for each richGroup for GROUPADMIN\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t    && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n-\t\t\t    && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n-\t\t\tIterator<RichGroup> groupByName = richGroups.iterator();\n-\t\t\twhile (groupByName.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, groupByName.next())) {\n-\t\t\t\t\tgroupByName.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic List<RichGroup> getRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichSubGroupsWithAttributesByNames\");\n-\t\t}\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n-\n-\t\t// Check access rights for each richGroup for GROUPADMIN\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tIterator<RichGroup> eachGroup = richGroups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic List<RichGroup> getAllRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tthis.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getAllRichSubGroupsWithAttributesByNames\");\n-\t\t}\n-\t\tList<RichGroup> richGroups = getGroupsManagerBl().getAllRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n-\n-\t\t// Check access rights for each richGroup for GROUPADMIN\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup)\n-\t\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup)\n-\t\t\t\t&& AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n-\t\t\tIterator<RichGroup> eachGroup = richGroups.iterator();\n-\t\t\twhile (eachGroup.hasNext()) {\n-\t\t\t\tif (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n-\t\t\t\t\teachGroup.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n-\t}\n-\n-\tpublic RichGroup getRichGroupByIdWithAttributesByNames(PerunSession sess, int groupId, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tGroup group = groupsManagerBl.getGroupById(sess, groupId);\n-\n-\t\t// Authorization\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group)\n-\t\t        && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getRichGroupByIdWithAttributesByNames\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getRichGroupByIdWithAttributesByNames(sess, groupId, attrNames));\n-\n-\t}\n-\n-\t@Override\n-\tpublic Group createGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, resultGroup);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, operandGroup);\n-\n-\t\t// Authorization\n-\t\tif ((!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) ||\n-\t\t\t\t(!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup))) {\n-\t\t\tthrow new PrivilegeException(sess, \"createGroupUnion\");\n-\t\t}\n-\n-\t\treturn getGroupsManagerBl().createGroupUnion(sess, resultGroup, operandGroup, false);\n-\t}\n-\n-\t@Override\n-\tpublic void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, resultGroup);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, operandGroup);\n-\n-\t\t// Authorization\n-\t\tif ( (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) ||\n-\t\t\t\t(!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup)) ) {\n-\t\t\tthrow new PrivilegeException(sess, \"removeGroupUnion\");\n-\t\t}\n-\n-\t\tgetGroupsManagerBl().removeGroupUnion(sess, resultGroup, operandGroup, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupUnions(PerunSession sess, Group group, boolean reverseDirection) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tgetGroupsManagerBl().checkGroupExists(sess, group);\n-\n-\t\t// Authorization\n-\t\tif ( !AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n-\t\t\tthrow new PrivilegeException(sess, \"getGroupUnions\");\n-\t\t}\n-\n-\t\treturn groupsManagerBl.getGroupUnions(sess, group, reverseDirection);\n-\t}\n-}\n+ private GroupsManagerBl groupsManagerBl;\n+ private PerunBl perunBl;\n+\n+\n+ public GroupsManagerEntry(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+  this.groupsManagerBl = perunBl.getGroupsManagerBl();\n+ }\n+\n+ public GroupsManagerEntry() {}\n+\n+ //FIXME delete this method\n+\n+\n+ public GroupsManagerImplApi getGroupsManagerImpl() {\n+  throw new InternalErrorRuntimeException(\"Unsupported method!\");\n+ }\n+\n+ public Group createGroup(PerunSession sess, Vo vo, Group group) throws GroupExistsException, PrivilegeException, InternalErrorException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  Utils.notNull(group, \"group\");\n+  Utils.notNull(group.getName(), \"group.name\");\n+  if (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n+   throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n+  }\n+  if (group.getParentGroupId() != null) throw new InternalErrorException(\"Top-level groups can't have parentGroupId set!\");\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo)) {\n+   throw new PrivilegeException(sess, \"createGroup\");\n+  }\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  Group createdGroup = getGroupsManagerBl().createGroup(sess, vo, group);\n+\n+  //Refresh authz\n+  AuthzResolver.refreshAuthz(sess);\n+  return createdGroup;\n+ }\n+\n+ public Group createGroup(PerunSession sess, Group parentGroup, Group group) throws GroupNotExistsException, GroupExistsException, PrivilegeException, InternalErrorException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+  Utils.notNull(group, \"group\");\n+  Utils.notNull(group.getName(), \"group.name\");\n+  if (!group.getName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n+   throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n+  }\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+   throw new PrivilegeException(sess, \"createGroup - subGroup\");\n+  }\n+  Group createdGroup = getGroupsManagerBl().createGroup(sess, parentGroup, group);\n+\n+  //Refresh authz\n+  AuthzResolver.refreshAuthz(sess);\n+  return createdGroup;\n+ }\n+\n+ public void deleteGroup(PerunSession sess, Group group, boolean forceDelete) throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"deleteGroup\");\n+  }\n+  getGroupsManagerBl().deleteGroup(sess, group, forceDelete);\n+ }\n+\n+ public void deleteGroup(PerunSession sess, Group group) throws GroupNotExistsException, InternalErrorException, PrivilegeException, RelationExistsException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+  this.deleteGroup(sess, group, false);\n+ }\n+\n+ public void deleteAllGroups(PerunSession sess, Vo vo) throws VoNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupNotExistsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+  Utils.checkPerunSession(sess);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)) {\n+   throw new PrivilegeException(sess, \"deleteAllGroups\");\n+  }\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  getGroupsManagerBl().deleteAllGroups(sess, vo);\n+ }\n+\n+ public void deleteGroups(PerunSession perunSession, List<Group> groups, boolean forceDelete) throws GroupNotExistsException, InternalErrorException, PrivilegeException, GroupAlreadyRemovedException, RelationExistsException, GroupAlreadyRemovedFromResourceException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+  Utils.checkPerunSession(perunSession);\n+  Utils.notNull(groups, \"groups\");\n+\n+  //Test if all groups exists and user has right to delete all of them\n+  for (Group group : groups) {\n+   getGroupsManagerBl().checkGroupExists(perunSession, group);\n+   //test of privileges on group\n+   if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+    throw new PrivilegeException(perunSession, \"deleteGroups\");\n+   }\n+  }\n+  getGroupsManagerBl().deleteGroups(perunSession, groups, forceDelete);\n+ }\n+\n+ public Group updateGroup(PerunSession sess, Group group) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  Utils.notNull(group, \"group\");\n+  Utils.notNull(group.getName(), \"group.name\");\n+  if (!group.getShortName().matches(GroupsManager.GROUP_SHORT_NAME_REGEXP)) {\n+   throw new InternalErrorException(new IllegalArgumentException(\"Wrong group shortName, group shortName must matches \" + GroupsManager.GROUP_SHORT_NAME_REGEXP));\n+  }\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"updateGroup\");\n+  }\n+\n+  return getGroupsManagerBl().updateGroup(sess, group);\n+ }\n+\n+ public Group getGroupById(PerunSession sess, int id) throws GroupNotExistsException, InternalErrorException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  Group group = getGroupsManagerBl().getGroupById(sess, id);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.RPC)) {\n+   throw new PrivilegeException(sess, \"getGroupById\");\n+  }\n+\n+  return group;\n+ }\n+\n+ public Group getGroupByName(PerunSession sess, Vo vo, String name) throws GroupNotExistsException, InternalErrorException, PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  Utils.notNull(name, \"name\");\n+  if (!name.matches(GroupsManager.GROUP_FULL_NAME_REGEXP)) {\n+   throw new InternalErrorException(new IllegalArgumentException(\"Wrong group name, group name must matches \" + GroupsManager.GROUP_FULL_NAME_REGEXP));\n+  }\n+  Group group = getGroupsManagerBl().getGroupByName(sess, vo, name);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.TOPGROUPCREATOR, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupByName\");\n+  }\n+\n+  return group;\n+ }\n+\n+ public void addMember(PerunSession sess, Group group, Member member) throws InternalErrorException, MemberNotExistsException, PrivilegeException, AlreadyMemberException, GroupNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException, GroupOperationsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"addMember\");\n+  }\n+\n+  // Check if the member and group are from the same VO\n+  if (member.getVoId() != (group.getVoId())) {\n+   throw new MembershipMismatchException(\"Member and group are form the different VO\");\n+  }\n+\n+  // Check if the group is externally synchronized\n+  Attribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n+  if (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n+   throw new ExternallyManagedException(\"Adding of member is not allowed. Group is externally managed.\");\n+  }\n+  getGroupsManagerBl().addMember(sess, group, member);\n+ }\n+\n+ public void removeMember(PerunSession sess, Group group, Member member) throws InternalErrorException, MemberNotExistsException, NotGroupMemberException, PrivilegeException, GroupNotExistsException, WrongAttributeAssignmentException, AttributeNotExistsException, ExternallyManagedException, GroupOperationsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"removeMember\");\n+  }\n+\n+  // Check if the group is externally synchronized\n+  Attribute attrSynchronizeEnabled = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, GROUPSYNCHROENABLED_ATTRNAME);\n+  if (Objects.equals(\"true\", (String) attrSynchronizeEnabled.getValue())) {\n+   throw new ExternallyManagedException(\"Removing of member is not allowed. Group is externally managed.\");\n+  }\n+  getGroupsManagerBl().removeMember(sess, group, member);\n+ }\n+\n+ public List<Member> getGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupMembers\");\n+  }\n+\n+  return getGroupsManagerBl().getGroupMembers(sess, group);\n+ }\n+\n+ public List<Member> getGroupMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupMembers\");\n+  }\n+\n+  return getGroupsManagerBl().getGroupMembers(sess, group, status);\n+ }\n+\n+ public List<RichMember> getGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group), true);\n+ }\n+\n+ public List<RichMember> getGroupRichMembers(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupRichMembers\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembers(sess, group, status), true);\n+ }\n+\n+ public List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group), true);\n+ }\n+\n+ public List<RichMember> getGroupRichMembersWithAttributes(PerunSession sess, Group group, Status status) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupRichMembersWithAttributes\");\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getGroupRichMembersWithAttributes(sess, group, status), true);\n+ }\n+\n+ public int getGroupMembersCount(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupMembersCount\");\n+  }\n+\n+  return getGroupsManagerBl().getGroupMembersCount(sess, group);\n+ }\n+\n+ public void addAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"addAdmin\");\n+  }\n+  getGroupsManagerBl().addAdmin(sess, group, user);\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, AlreadyAdminException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  getGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"addAdmin\");\n+  }\n+  getGroupsManagerBl().addAdmin(sess, group, authorizedGroup);\n+ }\n+\n+ public void removeAdmin(PerunSession sess, Group group, User user) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotAdminException, UserNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  getPerunBl().getUsersManagerBl().checkUserExists(sess, user);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"removeAdmin\");\n+  }\n+  getGroupsManagerBl().removeAdmin(sess, group, user);\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException, GroupNotAdminException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  getGroupsManagerBl().checkGroupExists(sess, authorizedGroup);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"removeAdmin\");\n+  }\n+  getGroupsManagerBl().removeAdmin(sess, group, authorizedGroup);\n+ }\n+\n+ public List<User> getAdmins(PerunSession perunSession, Group group, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(perunSession);\n+  getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(perunSession, \"getAdmins\");\n+  }\n+\n+  return getGroupsManagerBl().getAdmins(perunSession, group, onlyDirectAdmins);\n+ }\n+\n+ public List<RichUser> getRichAdmins(PerunSession perunSession, Group group, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(perunSession);\n+  getGroupsManagerBl().checkGroupExists(perunSession, group);\n+  //list of specific attributes must be not null if filtering is needed\n+  if (!allUserAttributes) {\n+   Utils.notNull(specificAttributes, \"specificAttributes\");\n+  }\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(perunSession, \"getRichAdmins\");\n+  }\n+\n+  return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession,\n+  getGroupsManagerBl().getRichAdmins(perunSession, group, specificAttributes, allUserAttributes, onlyDirectAdmins));\n+ }\n+\n+ @Deprecated\n+ public List<User> getAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getAdmins\");\n+  }\n+\n+  return getGroupsManagerBl().getAdmins(sess, group);\n+ }\n+\n+ @Deprecated\n+ @Override\n+ public List<User> getDirectAdmins(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getDirectAdmins\");\n+  }\n+\n+  return getGroupsManagerBl().getDirectAdmins(sess, group);\n+ }\n+\n+ public List<Group> getAdminGroups(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getAdminGroups\");\n+  }\n+\n+  return getGroupsManagerBl().getAdminGroups(sess, group);\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getRichAdmins(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(perunSession);\n+  getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(perunSession, \"getRichAdmins\");\n+  }\n+\n+  return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdmins(perunSession, group));\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(perunSession);\n+  getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(perunSession, \"getRichAdminsWithAttributes\");\n+  }\n+\n+  return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession, getGroupsManagerBl().getRichAdminsWithAttributes(perunSession, group));\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(perunSession);\n+  getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(perunSession, \"getRichAdminsWithSpecificAttributes\");\n+  }\n+\n+  return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession,\n+  getGroupsManagerBl().getRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Group group, List<String> specificAttributes) throws InternalErrorException, PrivilegeException, GroupNotExistsException, UserNotExistsException {\n+  Utils.checkPerunSession(perunSession);\n+  getGroupsManagerBl().checkGroupExists(perunSession, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(perunSession, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(perunSession, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(perunSession, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(perunSession, \"getDirectRichAdminsWithSpecificAttributes\");\n+  }\n+\n+  return getPerunBl().getUsersManagerBl().filterOnlyAllowedAttributes(perunSession,\n+  getGroupsManagerBl().getDirectRichAdminsWithSpecificAttributes(perunSession, group, specificAttributes));\n+ }\n+\n+ public List<Group> getAllGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+   throw new PrivilegeException(sess, \"getAllGroups\");\n+  }\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  List<Group> groups = getGroupsManagerBl().getAllGroups(sess, vo);\n+\n+  // Return all groups for VOADMIN and PERUNADMIN\n+  if (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) || AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) || AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN)) {\n+   return groups;\n+  }\n+\n+  // Check access rights for each group for GROUPADMIN\n+  if (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n+   Iterator<Group> eachGroup = groups.iterator();\n+   while (eachGroup.hasNext()) {\n+    if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+     eachGroup.remove();\n+    }\n+   }\n+\n+   return groups;\n+  }\n+\n+  // This shouldn't happen\n+\n+  throw new PrivilegeException(sess, \"getAllGroups\");\n+ }\n+\n+ public Map<Group, Object> getAllGroupsWithHierarchy(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+   throw new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n+  }\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+  Map<Group, Object> groups = getGroupsManagerBl().getAllGroupsWithHierarchy(sess, vo);\n+\n+  // Return all groups for VOADMIN and PERUNADMIN\n+  if (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) || AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN) || AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n+   return groups;\n+  }\n+\n+  // Check access rights for each group for GROUPADMIN\n+  if (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n+   Iterator<Group> eachGroup = groups.keySet().iterator();\n+   while (eachGroup.hasNext()) {\n+    if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+     eachGroup.remove();\n+    }\n+   }\n+\n+   return groups;\n+  }\n+\n+  // This shouldn't happen\n+\n+  throw new PrivilegeException(sess, \"getAllGroupsWithHierarchy\");\n+ }\n+\n+ public List<Group> getSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+   throw new PrivilegeException(sess, \"getSubGroups\");\n+  }\n+\n+  return getGroupsManagerBl().getSubGroups(sess, parentGroup);\n+ }\n+\n+ public List<Group> getAllSubGroups(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+   throw new PrivilegeException(sess, \"getAllSubGroups\");\n+  }\n+\n+  return getGroupsManagerBl().getAllSubGroups(sess, parentGroup);\n+ }\n+\n+ public Group getParentGroup(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException, ParentGroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getParentGroup\");\n+  }\n+\n+  return getGroupsManagerBl().getParentGroup(sess, group);\n+ }\n+\n+ public List<Group> getGroups(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+   throw new PrivilegeException(sess, \"getGroups\");\n+  }\n+  List<Group> groups = getGroupsManagerBl().getGroups(sess, vo);\n+\n+  // Return all groups for VOADMIN and PERUNADMIN\n+  if (AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) || AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.PERUNADMIN) || AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n+   return groups;\n+  }\n+\n+  // Check access rights for each group for GROUPADMIN\n+  if (AuthzResolver.hasRole(sess.getPerunPrincipal(), Role.GROUPADMIN)) {\n+   Iterator<Group> eachGroup = groups.iterator();\n+   while (eachGroup.hasNext()) {\n+    if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+     eachGroup.remove();\n+    }\n+   }\n+\n+   return groups;\n+  }\n+\n+  // This shouldn't happen\n+\n+  throw new PrivilegeException(sess, \"getGroups\");\n+ }\n+\n+ public int getGroupsCount(PerunSession sess, Vo vo) throws InternalErrorException, PrivilegeException, VoNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)) {\n+   throw new PrivilegeException(sess, \"getGroupsCount\");\n+  }\n+\n+  return getGroupsManagerBl().getGroupsCount(sess, vo);\n+ }\n+\n+ @Override\n+ public int getGroupsCount(PerunSession sess) throws InternalErrorException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  return getGroupsManagerBl().getGroupsCount(sess);\n+ }\n+\n+ public int getSubGroupsCount(PerunSession sess, Group parentGroup) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+   throw new PrivilegeException(sess, \"getSubGroupsCount for \" + parentGroup.getName());\n+  }\n+\n+  return getGroupsManagerBl().getSubGroupsCount(sess, parentGroup);\n+ }\n+\n+ public Vo getVo(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+  Vo vo = getGroupsManagerBl().getVo(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getVo\");\n+  }\n+\n+  return vo;\n+ }\n+\n+ public List<Member> getParentGroupMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getParentGroupMembers for \" + group.getName());\n+  }\n+\n+  return getGroupsManagerBl().getParentGroupMembers(sess, group);\n+ }\n+\n+ public List<RichMember> getParentGroupRichMembers(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembers(sess, group), true);\n+ }\n+\n+ public List<RichMember> getParentGroupRichMembersWithAttributes(PerunSession sess, Group group) throws InternalErrorException, PrivilegeException, GroupNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getParentGroupRichMembers for \" + group.getName());\n+  }\n+\n+  return getPerunBl().getMembersManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getParentGroupRichMembersWithAttributes(sess, group), true);\n+ }\n+\n+\n+ /**\n+  * Gets the groupsManagerBl for this instance.\n+  *\n+  * @return The groupsManagerBl.\n+  */\n+\n+ public GroupsManagerBl getGroupsManagerBl() {\n+  return this.groupsManagerBl;\n+ }\n+\n+ /**\n+  * Sets the perunBl for this instance.\n+  *\n+  * @param perunBl The perunBl.\n+  */\n+\n+ public void setPerunBl(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+ }\n+\n+ /**\n+  * Sets the groupsManagerBl for this instance.\n+  *\n+  * @param groupsManagerBl The groupsManagerBl.\n+  */\n+\n+ public void setGroupsManagerBl(GroupsManagerBl groupsManagerBl) {\n+  this.groupsManagerBl = groupsManagerBl;\n+ }\n+\n+ public PerunBl getPerunBl() {\n+  return this.perunBl;\n+ }\n+\n+ public void forceGroupSynchronization(PerunSession sess, Group group) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupSynchronizationAlreadyRunningException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"synchronizeGroup\");\n+  }\n+  getGroupsManagerBl().forceGroupSynchronization(sess, group);\n+ }\n+\n+ public void synchronizeGroups(PerunSession sess) throws InternalErrorException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.PERUNADMIN)) {\n+   throw new PrivilegeException(sess, \"synchronizeGroups\");\n+  }\n+  getGroupsManagerBl().synchronizeGroups(sess);\n+ }\n+\n+ public List<Group> getMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+  Vo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n+   throw new PrivilegeException(sess, \"getMemberGroups for \" + member);\n+  }\n+\n+  return getGroupsManagerBl().getMemberGroups(sess, member);\n+ }\n+\n+ public List<Group> getMemberGroupsByAttribute(PerunSession sess, Member member, Attribute attribute) throws WrongAttributeAssignmentException, PrivilegeException, InternalErrorException, VoNotExistsException, MemberNotExistsException, AttributeNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+  getPerunBl().getAttributesManagerBl().checkAttributeExists(sess, new AttributeDefinition(attribute));\n+  Vo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+\n+  //Only group attributes are allowed\n+  if (!this.getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attribute, AttributesManagerEntry.NS_GROUP_ATTR)) {\n+   throw new WrongAttributeAssignmentException(attribute);\n+  }\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n+   throw new PrivilegeException(sess, \"getMemberGroupsByAttribute for \" + member);\n+  }\n+  List<Group> groups = this.groupsManagerBl.getMemberGroupsByAttribute(sess, member, attribute);\n+\n+  //If actor has no right to read attribute for group, throw exception\n+  for (Group group : groups) {\n+   if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attribute, group, null)) {\n+    throw new PrivilegeException(sess, \"Actor hasn't right to read attribute for a group.\");\n+   }\n+  }\n+\n+  return groups;\n+ }\n+\n+ public List<Group> getAllMemberGroups(PerunSession sess, Member member) throws InternalErrorException, PrivilegeException, MemberNotExistsException {\n+  Utils.checkPerunSession(sess);\n+  getPerunBl().getMembersManagerBl().checkMemberExists(sess, member);\n+  Vo vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.SELF, member)) {\n+   throw new PrivilegeException(sess, \"getAllMemberGroups for \" + member);\n+  }\n+\n+  return getGroupsManagerBl().getAllMemberGroups(sess, member);\n+ }\n+\n+ public List<RichGroup> getRichGroupsAssignedToResourceWithAttributesByNames(PerunSession sess, Resource resource, List<String> attrNames) throws InternalErrorException, ResourceNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  this.getPerunBl().getResourcesManagerBl().checkResourceExists(sess, resource);\n+  Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resource) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, resource) && !AuthzResolver.isAuthorized(sess, Role.FACILITYADMIN, facility)) {\n+   throw new PrivilegeException(sess, \"getRichGroupsAssignedToResourceWithAttributesByNames\");\n+  }\n+  List<RichGroup> richGroups = getGroupsManagerBl().getRichGroupsWithAttributesAssignedToResource(sess, resource, attrNames);\n+  return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+ }\n+\n+ public List<RichGroup> getAllRichGroupsWithAttributesByNames(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException, VoNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  this.getPerunBl().getVosManagerBl().checkVoExists(sess, vo);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n+   throw new PrivilegeException(sess, \"getAllRichGroupsWithAttributesByNames\");\n+  }\n+  List<RichGroup> richGroups = getGroupsManagerBl().getAllRichGroupsWithAttributesByNames(sess, vo, attrNames);\n+\n+  // Check access rights for each richGroup for GROUPADMIN\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo) && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n+   Iterator<RichGroup> groupByName = richGroups.iterator();\n+   while (groupByName.hasNext()) {\n+    if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, groupByName.next())) {\n+     groupByName.remove();\n+    }\n+   }\n+  }\n+\n+  return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+ }\n+\n+ public List<RichGroup> getRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  this.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+   throw new PrivilegeException(sess, \"getRichSubGroupsWithAttributesByNames\");\n+  }\n+  List<RichGroup> richGroups = getGroupsManagerBl().getRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n+\n+  // Check access rights for each richGroup for GROUPADMIN\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup) && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+   Iterator<RichGroup> eachGroup = richGroups.iterator();\n+   while (eachGroup.hasNext()) {\n+    if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+     eachGroup.remove();\n+    }\n+   }\n+  }\n+\n+  return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+ }\n+\n+ public List<RichGroup> getAllRichSubGroupsWithAttributesByNames(PerunSession sess, Group parentGroup, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  this.getGroupsManagerBl().checkGroupExists(sess, parentGroup);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, parentGroup)) {\n+   throw new PrivilegeException(sess, \"getAllRichSubGroupsWithAttributesByNames\");\n+  }\n+  List<RichGroup> richGroups = getGroupsManagerBl().getAllRichSubGroupsWithAttributesByNames(sess, parentGroup, attrNames);\n+\n+  // Check access rights for each richGroup for GROUPADMIN\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, parentGroup) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, parentGroup) && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN)) {\n+   Iterator<RichGroup> eachGroup = richGroups.iterator();\n+   while (eachGroup.hasNext()) {\n+    if (!AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, eachGroup.next())) {\n+     eachGroup.remove();\n+    }\n+   }\n+  }\n+\n+  return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, richGroups, true);\n+ }\n+\n+ public RichGroup getRichGroupByIdWithAttributesByNames(PerunSession sess, int groupId, List<String> attrNames) throws InternalErrorException, GroupNotExistsException, VoNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  Group group = groupsManagerBl.getGroupById(sess, groupId);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getRichGroupByIdWithAttributesByNames\");\n+  }\n+\n+  return getGroupsManagerBl().filterOnlyAllowedAttributes(sess, getGroupsManagerBl().getRichGroupByIdWithAttributesByNames(sess, groupId, attrNames));\n+ }\n+\n+ @Override\n+ public Group createGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationNotAllowed, GroupRelationAlreadyExists {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, resultGroup);\n+  getGroupsManagerBl().checkGroupExists(sess, operandGroup);\n+\n+  // Authorization\n+  if ((!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) || (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup))) {\n+   throw new PrivilegeException(sess, \"createGroupUnion\");\n+  }\n+\n+  return getGroupsManagerBl().createGroupUnion(sess, resultGroup, operandGroup, false);\n+ }\n+\n+ @Override\n+ public void removeGroupUnion(PerunSession sess, Group resultGroup, Group operandGroup) throws InternalErrorException, GroupNotExistsException, PrivilegeException, GroupOperationsException, GroupRelationDoesNotExist, GroupRelationCannotBeRemoved {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, resultGroup);\n+  getGroupsManagerBl().checkGroupExists(sess, operandGroup);\n+\n+  // Authorization\n+  if ((!AuthzResolver.isAuthorized(sess, Role.VOADMIN, resultGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, resultGroup)) || (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, operandGroup) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, operandGroup))) {\n+   throw new PrivilegeException(sess, \"removeGroupUnion\");\n+  }\n+  getGroupsManagerBl().removeGroupUnion(sess, resultGroup, operandGroup, false);\n+ }\n+\n+ @Override\n+ public List<Group> getGroupUnions(PerunSession sess, Group group, boolean reverseDirection) throws InternalErrorException, GroupNotExistsException, PrivilegeException {\n+  Utils.checkPerunSession(sess);\n+  getGroupsManagerBl().checkGroupExists(sess, group);\n+\n+  // Authorization\n+  if (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, group) && !AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, group)) {\n+   throw new PrivilegeException(sess, \"getGroupUnions\");\n+  }\n+\n+  return groupsManagerBl.getGroupUnions(sess, group, reverseDirection);\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1031
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "930",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/155/GroupsManagerEntry.java\nindex 66dace4f26d..11dd62352d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/155/GroupsManagerEntry.java\n@@ -927,8 +927,8 @@ public class GroupsManagerEntry implements GroupsManager {\n \t\tList<RichGroup> richGroups = getGroupsManagerBl().getAllRichGroupsWithAttributesByNames(sess, vo, attrNames);\n \n \t\t// Check access rights for each richGroup for GROUPADMIN\n-\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t    && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+\t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo) &&\n+  !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n \t\t\t    && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n \t\t\tIterator<RichGroup> groupByName = richGroups.iterator();\n \t\t\twhile (groupByName.hasNext()) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/155/GroupsManagerEntry.java\nindex 66dace4f26d..2bd789c8eac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/155/GroupsManagerEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/155/GroupsManagerEntry.java\n@@ -928,7 +928,7 @@ public class GroupsManagerEntry implements GroupsManager {\n \n \t\t// Check access rights for each richGroup for GROUPADMIN\n \t\tif (!AuthzResolver.isAuthorized(sess, Role.VOADMIN, vo)\n-\t\t\t    && !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n+\t\t\t&& !AuthzResolver.isAuthorized(sess, Role.VOOBSERVER, vo)\n \t\t\t    && AuthzResolver.isAuthorized(sess, Role.GROUPADMIN, vo)) {\n \t\t\tIterator<RichGroup> groupByName = richGroups.iterator();\n \t\t\twhile (groupByName.hasNext()) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_random"
    ]
}