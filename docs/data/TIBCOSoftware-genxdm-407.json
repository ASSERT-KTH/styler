{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "407",
    "information": {
        "errors": [
            {
                "line": "38",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    extends ConvertibleNodeSetExprImpl\n{\n\tprivate final Pattern nodeTest;\n\tprivate final ConvertibleNodeSetExprImpl expr;\n\n\tNodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/407/NodeTestExpr.java\nindex 48708c7bfa1..a632b01d4e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/407/NodeTestExpr.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.NodeIterator;\n final class NodeTestExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n {\r\n-\tprivate final Pattern nodeTest;\r\n+private final Pattern nodeTest;\r\n \tprivate final ConvertibleNodeSetExprImpl expr;\r\n \r\n \tNodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/407/NodeTestExpr.java\nindex 48708c7bfa1..bdb41c8dbe5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/407/NodeTestExpr.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.expressions;\r\n \r\n import org.genxdm.Model;\r\n@@ -33,41 +34,36 @@ import org.genxdm.xpath.v10.NodeIterator;\n  *\r\n  */\r\n final class NodeTestExpr\r\n-    extends ConvertibleNodeSetExprImpl\r\n-{\r\n-\tprivate final Pattern nodeTest;\r\n-\tprivate final ConvertibleNodeSetExprImpl expr;\r\n-\r\n-\tNodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)\r\n-\t{\r\n-\t\tsuper();\r\n-\t\tthis.expr = expr;\r\n-\t\tthis.nodeTest = nodeTest;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic <N> NodeIterator<N> nodeIterator(final Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\tfinal NodeIterator<N> iter = expr.nodeIterator(model, node, dynEnv);\r\n-\t\treturn new NodeIterator<N>()\r\n-\t\t{\r\n-\t\t\tpublic N next()\r\n-\t\t\t{\r\n-\t\t\t\tfor (;;)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tN temp = iter.next();\r\n-\t\t\t\t\tif (temp == null)\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\tif (nodeTest.matches(model, temp, dynEnv))\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\treturn temp;\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t\treturn null;\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n+    extends ConvertibleNodeSetExprImpl {\r\n+    private final Pattern nodeTest;\r\n+\r\n+    private final ConvertibleNodeSetExprImpl expr;\r\n+\r\n+    NodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest) {\r\n+        super();\r\n+        this.expr = expr;\r\n+        this.nodeTest = nodeTest;\r\n+    }\r\n+\r\n+    @Override\r\n+    public <N> NodeIterator<N> nodeIterator(final Model<N> model, final N node,\r\n+                                            final NodeDynamicContext<N> dynEnv) {\r\n+        final NodeIterator<N> iter = expr.nodeIterator(model, node, dynEnv);\r\n+        return new NodeIterator<N>() {\r\n+            public N next() {\r\n+                for (; ; ) {\r\n+                    N temp = iter.next();\r\n+                    if (temp == null) {\r\n+                        break;\r\n+                    }\r\n+                    if (nodeTest.matches(model, temp, dynEnv)) {\r\n+                        return temp;\r\n+                    }\r\n+                }\r\n+                return null;\r\n+            }\r\n+        };\r\n+    }\r\n \r\n     @Override\r\n     public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n@@ -76,43 +72,40 @@ final class NodeTestExpr\n     }\r\n \r\n     @Override\r\n-\tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn expr.getOptimizeFlags();\r\n-\t}\r\n-\r\n-\tPattern getChildrenNodePattern()\r\n-\t{\r\n-\t\tif (expr.getClass() == ChildAxisExpr.class)\r\n-\t\t{\r\n-\t\t\treturn nodeTest;\r\n-\t\t}\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\tprivate static class MatchingTraverser extends TraversingInformerDelegate implements Traverser {\r\n+    public int getOptimizeFlags() {\r\n+        return expr.getOptimizeFlags();\r\n+    }\r\n+\r\n+    Pattern getChildrenNodePattern() {\r\n+        if (expr.getClass() == ChildAxisExpr.class) {\r\n+            return nodeTest;\r\n+        }\r\n+        return null;\r\n+    }\r\n+\r\n+    private static class MatchingTraverser extends TraversingInformerDelegate implements Traverser {\r\n \r\n         private Traverser iter;\r\n+\r\n         private final Pattern nodeTest;\r\n+\r\n         private TraverserDynamicContext dynEnv;\r\n-        \r\n+\r\n         public MatchingTraverser(Pattern nodeTest, TraverserDynamicContext dynEnv, Traverser iter) {\r\n             super(iter);\r\n             this.nodeTest = nodeTest;\r\n             this.iter = iter;\r\n             this.dynEnv = dynEnv;\r\n         }\r\n-        \r\n+\r\n         @Override\r\n         public boolean moveToNext() {\r\n-            for (;;)\r\n-            {\r\n+            for (; ; ) {\r\n                 if (iter.moveToNext()) {\r\n                     if (nodeTest.matches(iter, dynEnv)) {\r\n                         return true;\r\n                     }\r\n-                }\r\n-                else {\r\n+                } else {\r\n                     setInformer(null);\r\n                     return false;\r\n                 }\r\n@@ -123,7 +116,7 @@ final class NodeTestExpr\n         public boolean isFinished() {\r\n             return getInformer() == null;\r\n         }\r\n-        \r\n+\r\n     }\r\n \r\n }\r\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/407/NodeTestExpr.java\nindex 48708c7bfa1..294ec73ffd2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/407/NodeTestExpr.java\n@@ -34,70 +34,71 @@ import org.genxdm.xpath.v10.NodeIterator;\n  */\r\n final class NodeTestExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n-{\r\n-\tprivate final Pattern nodeTest;\r\n+{\n+    private final Pattern nodeTest;\r\n \tprivate final ConvertibleNodeSetExprImpl expr;\r\n \r\n \tNodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)\r\n-\t{\r\n-\t\tsuper();\r\n+\t{\n+    super();\r\n \t\tthis.expr = expr;\r\n-\t\tthis.nodeTest = nodeTest;\r\n-\t}\r\n+\t\tthis.nodeTest = nodeTest;\n+    }\r\n \r\n \t@Override\r\n-\tpublic <N> NodeIterator<N> nodeIterator(final Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\tfinal NodeIterator<N> iter = expr.nodeIterator(model, node, dynEnv);\r\n+\tpublic <N> NodeIterator<N> nodeIterator(final Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\n+    final NodeIterator<N> iter = expr.nodeIterator(model, node, dynEnv);\r\n \t\treturn new NodeIterator<N>()\r\n-\t\t{\r\n-\t\t\tpublic N next()\r\n-\t\t\t{\r\n-\t\t\t\tfor (;;)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tN temp = iter.next();\r\n+\t\t{\n+    public N next()\r\n+\t\t\t{\n+    for (;;)\r\n+\t\t\t\t{\n+    N temp = iter.next();\r\n \t\t\t\t\tif (temp == null)\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\t}\r\n+\t\t\t\t\t{\n+    break;\n+    }\r\n \t\t\t\t\tif (nodeTest.matches(model, temp, dynEnv))\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\treturn temp;\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t\treturn null;\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-\r\n-    @Override\r\n+\t\t\t\t\t{\n+    return temp;\n+    }\n+    }\r\n+\t\t\t\treturn null;\n+    }\n+    };\n+    }\n+\n+@Override\r\n     public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n         final Traverser iter = expr.traverseNodes(contextNode, dynEnv);\r\n         return new MatchingTraverser(nodeTest, dynEnv, iter);\r\n     }\r\n \r\n-    @Override\r\n-\tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn expr.getOptimizeFlags();\r\n-\t}\r\n+    @Override\n+public int getOptimizeFlags()\r\n+\t{\n+    return expr.getOptimizeFlags();\n+    }\r\n \r\n \tPattern getChildrenNodePattern()\r\n-\t{\r\n-\t\tif (expr.getClass() == ChildAxisExpr.class)\r\n-\t\t{\r\n-\t\t\treturn nodeTest;\r\n-\t\t}\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\tprivate static class MatchingTraverser extends TraversingInformerDelegate implements Traverser {\r\n+\t{\n+    if (expr.getClass() == ChildAxisExpr.class)\r\n+\t\t{\n+    return nodeTest;\n+    }\r\n+\t\treturn null;\n+    }\r\n \r\n-        private Traverser iter;\r\n+\tprivate static class MatchingTraverser extends TraversingInformerDelegate implements Traverser\n+{\n+\n+    private Traverser iter;\r\n         private final Pattern nodeTest;\r\n-        private TraverserDynamicContext dynEnv;\r\n-        \r\n-        public MatchingTraverser(Pattern nodeTest, TraverserDynamicContext dynEnv, Traverser iter) {\r\n-            super(iter);\r\n+        private TraverserDynamicContext dynEnv;\n+\n+public MatchingTraverser(Pattern nodeTest, TraverserDynamicContext dynEnv, Traverser iter) {\n+    super(iter);\r\n             this.nodeTest = nodeTest;\r\n             this.iter = iter;\r\n             this.dynEnv = dynEnv;\r\n@@ -122,8 +123,7 @@ final class NodeTestExpr\n         @Override\r\n         public boolean isFinished() {\r\n             return getInformer() == null;\r\n-        }\r\n-        \r\n-    }\r\n-\r\n-}\r\n+        }\n+    }\n+\n+    }\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/407/NodeTestExpr.java\nindex 48708c7bfa1..10ba4ef2db4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/407/NodeTestExpr.java\n@@ -18,112 +18,118 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.expressions;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.bridgekit.tree.TraversingInformerDelegate;\r\n-import org.genxdm.nodes.Traverser;\r\n-import org.genxdm.nodes.TraversingInformer;\r\n-import org.genxdm.processor.xpath.v10.patterns.Pattern;\r\n-import org.genxdm.xpath.v10.TraverserDynamicContext;\r\n-import org.genxdm.xpath.v10.NodeDynamicContext;\r\n+package org.genxdm.processor.xpath.v10.expressions;\n+\n+import org.genxdm.Model;\n+import org.genxdm.bridgekit.tree.TraversingInformerDelegate;\n+import org.genxdm.nodes.Traverser;\n+import org.genxdm.nodes.TraversingInformer;\n+import org.genxdm.processor.xpath.v10.patterns.Pattern;\n+import org.genxdm.xpath.v10.TraverserDynamicContext;\n+import org.genxdm.xpath.v10.NodeDynamicContext;\n import org.genxdm.xpath.v10.NodeIterator;\r\n \r\n /**\r\n  *\r\n- */\r\n-final class NodeTestExpr\r\n-    extends ConvertibleNodeSetExprImpl\r\n-{\r\n-\tprivate final Pattern nodeTest;\r\n-\tprivate final ConvertibleNodeSetExprImpl expr;\r\n-\r\n-\tNodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)\r\n-\t{\r\n-\t\tsuper();\r\n-\t\tthis.expr = expr;\r\n-\t\tthis.nodeTest = nodeTest;\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic <N> NodeIterator<N> nodeIterator(final Model<N> model, final N node, final NodeDynamicContext<N> dynEnv) {\r\n-\t\tfinal NodeIterator<N> iter = expr.nodeIterator(model, node, dynEnv);\r\n-\t\treturn new NodeIterator<N>()\r\n-\t\t{\r\n-\t\t\tpublic N next()\r\n-\t\t\t{\r\n-\t\t\t\tfor (;;)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tN temp = iter.next();\r\n-\t\t\t\t\tif (temp == null)\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\tbreak;\r\n-\t\t\t\t\t}\r\n-\t\t\t\t\tif (nodeTest.matches(model, temp, dynEnv))\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\treturn temp;\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t\treturn null;\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-\r\n-    @Override\r\n-    public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv) {\r\n-        final Traverser iter = expr.traverseNodes(contextNode, dynEnv);\r\n-        return new MatchingTraverser(nodeTest, dynEnv, iter);\r\n-    }\r\n-\r\n-    @Override\r\n-\tpublic int getOptimizeFlags()\r\n-\t{\r\n-\t\treturn expr.getOptimizeFlags();\r\n-\t}\r\n-\r\n-\tPattern getChildrenNodePattern()\r\n-\t{\r\n-\t\tif (expr.getClass() == ChildAxisExpr.class)\r\n-\t\t{\r\n-\t\t\treturn nodeTest;\r\n-\t\t}\r\n-\t\treturn null;\r\n-\t}\r\n-\r\n-\tprivate static class MatchingTraverser extends TraversingInformerDelegate implements Traverser {\r\n-\r\n-        private Traverser iter;\r\n-        private final Pattern nodeTest;\r\n-        private TraverserDynamicContext dynEnv;\r\n-        \r\n-        public MatchingTraverser(Pattern nodeTest, TraverserDynamicContext dynEnv, Traverser iter) {\r\n-            super(iter);\r\n-            this.nodeTest = nodeTest;\r\n-            this.iter = iter;\r\n-            this.dynEnv = dynEnv;\r\n-        }\r\n-        \r\n-        @Override\r\n-        public boolean moveToNext() {\r\n-            for (;;)\r\n-            {\r\n-                if (iter.moveToNext()) {\r\n-                    if (nodeTest.matches(iter, dynEnv)) {\r\n-                        return true;\r\n-                    }\r\n-                }\r\n-                else {\r\n-                    setInformer(null);\r\n-                    return false;\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        @Override\r\n-        public boolean isFinished() {\r\n-            return getInformer() == null;\r\n-        }\r\n-        \r\n-    }\r\n-\r\n-}\r\n+ */\n+\n+final class NodeTestExpr extends ConvertibleNodeSetExprImpl\n+{\n+    private final Pattern nodeTest;\n+    private final ConvertibleNodeSetExprImpl expr;\n+\n+    NodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)\n+    {\n+        super();\n+        this.expr = expr;\n+        this.nodeTest = nodeTest;\n+    }\n+\n+    @Override\n+    public <N> NodeIterator<N> nodeIterator(final Model<N> model, final N node, final NodeDynamicContext<N> dynEnv)\n+    {\n+        final NodeIterator<N> iter = expr.nodeIterator(model, node, dynEnv);\n+        return new NodeIterator<N>()\n+        {\n+            public N next()\n+            {\n+                for (;;)\n+                {\n+                    N temp = iter.next();\n+                    if (temp == null)\n+                    {\n+                        break;\n+                    }\n+                    if (nodeTest.matches(model, temp, dynEnv))\n+                    {\n+                        return temp;\n+                    }\n+                }\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public Traverser traverseNodes(TraversingInformer contextNode, TraverserDynamicContext dynEnv)\n+    {\n+        final Traverser iter = expr.traverseNodes(contextNode, dynEnv);\n+        return new MatchingTraverser(nodeTest, dynEnv, iter);\n+    }\n+\n+    @Override\n+    public int getOptimizeFlags()\n+    {\n+        return expr.getOptimizeFlags();\n+    }\n+\n+    Pattern getChildrenNodePattern()\n+    {\n+        if (expr.getClass() == ChildAxisExpr.class)\n+        {\n+            return nodeTest;\n+        }\n+        return null;\n+    }\n+\n+    private static class MatchingTraverser extends TraversingInformerDelegate implements Traverser\n+    {\n+        private Traverser iter;\n+        private final Pattern nodeTest;\n+        private TraverserDynamicContext dynEnv;\n+\n+        public MatchingTraverser(Pattern nodeTest, TraverserDynamicContext dynEnv, Traverser iter)\n+        {\n+            super(iter);\n+            this.nodeTest = nodeTest;\n+            this.iter = iter;\n+            this.dynEnv = dynEnv;\n+        }\n+\n+        @Override\n+        public boolean moveToNext()\n+        {\n+            for (;;)\n+            {\n+                if (iter.moveToNext())\n+                {\n+                    if (nodeTest.matches(iter, dynEnv))\n+                    {\n+                        return true;\n+                    }\n+                }\n+                else\n+                {\n+                    setInformer(null);\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public boolean isFinished()\n+        {\n+            return getInformer() == null;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 111
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/407/NodeTestExpr.java\nindex 48708c7bfa1..a632b01d4e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/407/NodeTestExpr.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.NodeIterator;\n final class NodeTestExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n {\r\n-\tprivate final Pattern nodeTest;\r\n+private final Pattern nodeTest;\r\n \tprivate final ConvertibleNodeSetExprImpl expr;\r\n \r\n \tNodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/407/NodeTestExpr.java\nindex 48708c7bfa1..680ef5a58f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/407/NodeTestExpr.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/407/NodeTestExpr.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.NodeIterator;\n final class NodeTestExpr\r\n     extends ConvertibleNodeSetExprImpl\r\n {\r\n-\tprivate final Pattern nodeTest;\r\n+    private final Pattern nodeTest;\r\n \tprivate final ConvertibleNodeSetExprImpl expr;\r\n \r\n \tNodeTestExpr(final ConvertibleNodeSetExprImpl expr, final Pattern nodeTest)\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}