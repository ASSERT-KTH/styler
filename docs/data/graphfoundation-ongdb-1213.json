{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1213",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1213/KernelBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1213/KernelBean.java\nindex 0b92c30f5b2..31298197b41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1213/KernelBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1213/KernelBean.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.jmx.impl;\n \n import java.io.File;\n@@ -34,114 +35,113 @@ import org.neo4j.kernel.internal.KernelData;\n \n public class KernelBean extends Neo4jMBean implements Kernel\n {\n-    private final long kernelStartTime;\n-    private final String kernelVersion;\n-    private final ObjectName query;\n-    private final String instanceId;\n-\n-    private boolean isReadOnly;\n-    private long storeCreationDate = -1;\n-    private long storeId = -1;\n-    private String databaseName;\n-    private long storeLogVersion;\n-\n-    KernelBean( KernelData kernel, ManagementSupport support ) throws NotCompliantMBeanException\n-    {\n-        super( Kernel.class, kernel, support );\n-        kernel.graphDatabase().getDependencyResolver().resolveDependency( DataSourceManager.class )\n-                .addListener( new DataSourceInfo() );\n-        this.kernelVersion = kernel.version().toString();\n-        this.instanceId = kernel.instanceId();\n-        this.query = support.createMBeanQuery( instanceId );\n-\n-        kernelStartTime = new Date().getTime();\n-    }\n-\n-    String getInstanceId()\n-    {\n-        return instanceId;\n-    }\n-\n-    @Override\n-    public ObjectName getMBeanQuery()\n-    {\n-        return query;\n-    }\n-\n-    @Override\n-    public Date getKernelStartTime()\n-    {\n-        return new Date( kernelStartTime );\n-    }\n-\n-    @Override\n-    public Date getStoreCreationDate()\n-    {\n-        return new Date( storeCreationDate );\n-    }\n-\n+  private final long kernelStartTime;\n+  private final String kernelVersion;\n+  private final ObjectName query;\n+  private final String instanceId;\n+\n+  private boolean isReadOnly;\n+  private long storeCreationDate = -1;\n+  private long storeId = -1;\n+  private String databaseName;\n+  private long storeLogVersion;\n+\n+  KernelBean(KernelData kernel, ManagementSupport support) throws NotCompliantMBeanException\n+  {\n+    super(Kernel.class, kernel, support);\n+    kernel.graphDatabase().getDependencyResolver().resolveDependency(DataSourceManager.class)\n+        .addListener(new DataSourceInfo());\n+    this.kernelVersion = kernel.version().toString();\n+    this.instanceId = kernel.instanceId();\n+    this.query = support.createMBeanQuery(instanceId);\n+\n+    kernelStartTime = new Date().getTime();\n+  }\n+\n+  String getInstanceId()\n+  {\n+    return instanceId;\n+  }\n+\n+  @Override\n+  public ObjectName getMBeanQuery()\n+  {\n+    return query;\n+  }\n+\n+  @Override\n+  public Date getKernelStartTime()\n+  {\n+    return new Date(kernelStartTime);\n+  }\n+\n+  @Override\n+  public Date getStoreCreationDate()\n+  {\n+    return new Date(storeCreationDate);\n+  }\n+\n+  @Override\n+  public String getStoreId()\n+  {\n+    return Long.toHexString(storeId);\n+  }\n+\n+  @Override\n+  public long getStoreLogVersion()\n+  {\n+    return storeLogVersion;\n+  }\n+\n+  @Override\n+  public String getKernelVersion()\n+  {\n+    return kernelVersion;\n+  }\n+\n+  @Override\n+  public boolean isReadOnly()\n+  {\n+    return isReadOnly;\n+  }\n+\n+  @Override\n+  public String getDatabaseName()\n+  {\n+    return databaseName;\n+  }\n+\n+  private class DataSourceInfo\n+      implements DataSourceManager.Listener\n+  {\n     @Override\n-    public String getStoreId()\n+    public void registered(NeoStoreDataSource ds)\n     {\n-        return Long.toHexString( storeId );\n+      StoreId id = ds.getStoreId();\n+      storeLogVersion =\n+          ds.getDependencyResolver().resolveDependency(LogVersionRepository.class).getCurrentLogVersion();\n+      storeCreationDate = id.getCreationTime();\n+      isReadOnly = ds.isReadOnly();\n+      storeId = id.getRandomId();\n+\n+      File storeDir = ds.getStoreDir();\n+      try\n+      {\n+        storeDir = storeDir.getCanonicalFile();\n+      } catch (IOException ignored)\n+      {\n+      }\n+\n+      databaseName = storeDir.getName();\n     }\n \n     @Override\n-    public long getStoreLogVersion()\n-    {\n-        return storeLogVersion;\n-    }\n-\n-    @Override\n-    public String getKernelVersion()\n-    {\n-        return kernelVersion;\n-    }\n-\n-    @Override\n-    public boolean isReadOnly()\n-    {\n-        return isReadOnly;\n-    }\n-\n-    @Override\n-    public String getDatabaseName()\n-    {\n-        return databaseName;\n-    }\n-\n-    private class DataSourceInfo\n-            implements DataSourceManager.Listener\n+    public void unregistered(NeoStoreDataSource ds)\n     {\n-        @Override\n-        public void registered( NeoStoreDataSource ds )\n-        {\n-            StoreId id = ds.getStoreId();\n-            storeLogVersion =\n-                    ds.getDependencyResolver().resolveDependency( LogVersionRepository.class ).getCurrentLogVersion();\n-            storeCreationDate = id.getCreationTime();\n-            isReadOnly = ds.isReadOnly();\n-            storeId = id.getRandomId();\n-\n-            File storeDir = ds.getStoreDir();\n-            try\n-            {\n-                storeDir = storeDir.getCanonicalFile();\n-            }\n-            catch ( IOException ignored )\n-            {\n-            }\n-\n-            databaseName = storeDir.getName();\n-        }\n-\n-        @Override\n-        public void unregistered( NeoStoreDataSource ds )\n-        {\n-            storeCreationDate = -1;\n-            storeLogVersion = -1;\n-            isReadOnly = false;\n-            storeId = -1;\n-        }\n+      storeCreationDate = -1;\n+      storeLogVersion = -1;\n+      isReadOnly = false;\n+      storeId = -1;\n     }\n+  }\n }\n",
            "diff_size": 153
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1213/KernelBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1213/KernelBean.java\nindex 0b92c30f5b2..e6de71d9640 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1213/KernelBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1213/KernelBean.java\n@@ -48,13 +48,11 @@ public class KernelBean extends Neo4jMBean implements Kernel\n     KernelBean( KernelData kernel, ManagementSupport support ) throws NotCompliantMBeanException\n     {\n         super( Kernel.class, kernel, support );\n-        kernel.graphDatabase().getDependencyResolver().resolveDependency( DataSourceManager.class )\n-                .addListener( new DataSourceInfo() );\n-        this.kernelVersion = kernel.version().toString();\n+        kernel.graphDatabase().getDependencyResolver().resolveDependency( DataSourceManager.class ).addListener( new DataSourceInfo() );\n+this.kernelVersion = kernel.version().toString();\n         this.instanceId = kernel.instanceId();\n         this.query = support.createMBeanQuery( instanceId );\n-\n-        kernelStartTime = new Date().getTime();\n+kernelStartTime = new Date().getTime();\n     }\n \n     String getInstanceId()\n@@ -110,20 +108,17 @@ public class KernelBean extends Neo4jMBean implements Kernel\n         return databaseName;\n     }\n \n-    private class DataSourceInfo\n-            implements DataSourceManager.Listener\n-    {\n+    private class DataSourceInfo implements DataSourceManager.Listener\n+{\n         @Override\n         public void registered( NeoStoreDataSource ds )\n         {\n             StoreId id = ds.getStoreId();\n-            storeLogVersion =\n-                    ds.getDependencyResolver().resolveDependency( LogVersionRepository.class ).getCurrentLogVersion();\n-            storeCreationDate = id.getCreationTime();\n+            storeLogVersion = ds.getDependencyResolver().resolveDependency( LogVersionRepository.class ).getCurrentLogVersion();\n+storeCreationDate = id.getCreationTime();\n             isReadOnly = ds.isReadOnly();\n             storeId = id.getRandomId();\n-\n-            File storeDir = ds.getStoreDir();\n+File storeDir = ds.getStoreDir();\n             try\n             {\n                 storeDir = storeDir.getCanonicalFile();\n@@ -144,4 +139,4 @@ public class KernelBean extends Neo4jMBean implements Kernel\n             storeId = -1;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1213/KernelBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1213/KernelBean.java\nindex 0b92c30f5b2..ae4b6845ab1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1213/KernelBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1213/KernelBean.java\n@@ -24,7 +24,6 @@ import java.io.IOException;\n import java.util.Date;\n import javax.management.NotCompliantMBeanException;\n import javax.management.ObjectName;\n-\n import org.neo4j.jmx.Kernel;\n import org.neo4j.kernel.NeoStoreDataSource;\n import org.neo4j.kernel.impl.store.StoreId;\n@@ -38,22 +37,20 @@ public class KernelBean extends Neo4jMBean implements Kernel\n     private final String kernelVersion;\n     private final ObjectName query;\n     private final String instanceId;\n-\n     private boolean isReadOnly;\n-    private long storeCreationDate = -1;\n-    private long storeId = -1;\n+    private long storeCreationDate = - 1;\n+    private long storeId = - 1;\n     private String databaseName;\n     private long storeLogVersion;\n \n-    KernelBean( KernelData kernel, ManagementSupport support ) throws NotCompliantMBeanException\n+    KernelBean( KernelData kernel, ManagementSupport support )\n+    throws NotCompliantMBeanException\n     {\n         super( Kernel.class, kernel, support );\n-        kernel.graphDatabase().getDependencyResolver().resolveDependency( DataSourceManager.class )\n-                .addListener( new DataSourceInfo() );\n+        kernel.graphDatabase().getDependencyResolver().resolveDependency( DataSourceManager.class ).addListener( new DataSourceInfo() );\n         this.kernelVersion = kernel.version().toString();\n         this.instanceId = kernel.instanceId();\n         this.query = support.createMBeanQuery( instanceId );\n-\n         kernelStartTime = new Date().getTime();\n     }\n \n@@ -110,19 +107,16 @@ public class KernelBean extends Neo4jMBean implements Kernel\n         return databaseName;\n     }\n \n-    private class DataSourceInfo\n-            implements DataSourceManager.Listener\n+    private class DataSourceInfo implements DataSourceManager.Listener\n     {\n         @Override\n         public void registered( NeoStoreDataSource ds )\n         {\n             StoreId id = ds.getStoreId();\n-            storeLogVersion =\n-                    ds.getDependencyResolver().resolveDependency( LogVersionRepository.class ).getCurrentLogVersion();\n+            storeLogVersion = ds.getDependencyResolver().resolveDependency( LogVersionRepository.class ).getCurrentLogVersion();\n             storeCreationDate = id.getCreationTime();\n             isReadOnly = ds.isReadOnly();\n             storeId = id.getRandomId();\n-\n             File storeDir = ds.getStoreDir();\n             try\n             {\n@@ -138,10 +132,10 @@ public class KernelBean extends Neo4jMBean implements Kernel\n         @Override\n         public void unregistered( NeoStoreDataSource ds )\n         {\n-            storeCreationDate = -1;\n-            storeLogVersion = -1;\n+            storeCreationDate = - 1;\n+            storeLogVersion = - 1;\n             isReadOnly = false;\n-            storeId = -1;\n+            storeId = - 1;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}