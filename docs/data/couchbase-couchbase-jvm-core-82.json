{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "82",
    "information": {
        "errors": [
            {
                "line": "115",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 136).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @param queue the queue which holds all outstanding open requests.\n     */\n    ConfigHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, Queue<ConfigRequest> queue, boolean isTransient) {\n        super(endpoint, responseBuffer, queue, isTransient);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/82/ConfigHandler.java\nindex 1de865ab3b4..3fe4af01d82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/82/ConfigHandler.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.core.endpoint.config;\n \n import com.couchbase.client.core.ResponseEvent;\n@@ -112,7 +113,8 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param responseBuffer the {@link RingBuffer} to push responses into.\n      * @param queue the queue which holds all outstanding open requests.\n      */\n-    ConfigHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, Queue<ConfigRequest> queue, boolean isTransient) {\n+    ConfigHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, Queue<ConfigRequest> queue,\n+                  boolean isTransient) {\n         super(endpoint, responseBuffer, queue, isTransient);\n     }\n \n@@ -159,7 +161,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param password the password for auth.\n      */\n     private static void addAuth(final ChannelHandlerContext ctx, final HttpRequest request, final String user,\n-        final String password) {\n+                                final String password) {\n         final String pw = password == null ? \"\" : password;\n \n         ByteBuf raw = ctx.alloc().buffer(user.length() + pw.length() + 1);\n@@ -243,7 +245,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @return a initialized {@link CouchbaseResponse}.\n      */\n     private CouchbaseResponse handleBucketStreamingResponse(final ChannelHandlerContext ctx,\n-        final HttpResponse header) {\n+                                                            final HttpResponse header) {\n         SocketAddress addr = ctx.channel().remoteAddress();\n         String host = addr instanceof InetSocketAddress ? ((InetSocketAddress) addr).getHostName() : addr.toString();\n         ResponseStatus status = statusFromCode(header.getStatus().code());\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "209",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "244",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "'switch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/82/ConfigHandler.java\nindex 1de865ab3b4..e8a89611181 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/82/ConfigHandler.java\n@@ -69,7 +69,6 @@ import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.util.Queue;\n \n-\n /**\n  * The {@link ConfigHandler} is responsible for encoding {@link ConfigRequest}s into lower level\n  * {@link HttpRequest}s as well as decoding {@link HttpObject}s into\n@@ -160,7 +159,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      */\n     private static void addAuth(final ChannelHandlerContext ctx, final HttpRequest request, final String user,\n         final String password) {\n-        final String pw = password == null ? \"\" : password;\n+    final String pw = password == null ? \"\" : password;\n \n         ByteBuf raw = ctx.alloc().buffer(user.length() + pw.length() + 1);\n         raw.writeBytes((user + \":\" + pw).getBytes(CHARSET));\n@@ -207,10 +206,8 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n             }\n \n             ResponseStatus status = statusFromCode(responseHeader.getStatus().code());\n-            String body = responseContent.readableBytes() > 0\n-                ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n-\n-            if (request instanceof BucketConfigRequest) {\n+            String body = responseContent.readableBytes() > 0 ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n+if (request instanceof BucketConfigRequest) {\n                 response = new BucketConfigResponse(body, status);\n             } else if (request instanceof ClusterConfigRequest) {\n                 response = new ClusterConfigResponse(body, status);\n@@ -244,7 +241,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      */\n     private CouchbaseResponse handleBucketStreamingResponse(final ChannelHandlerContext ctx,\n         final HttpResponse header) {\n-        SocketAddress addr = ctx.channel().remoteAddress();\n+    SocketAddress addr = ctx.channel().remoteAddress();\n         String host = addr instanceof InetSocketAddress ? ((InetSocketAddress) addr).getHostName() : addr.toString();\n         ResponseStatus status = statusFromCode(header.getStatus().code());\n \n@@ -253,12 +250,10 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n             streamingConfigObservable = BehaviorSubject.create();\n             scheduledObservable = streamingConfigObservable.onBackpressureBuffer().observeOn(env().scheduler());\n         }\n-        return new BucketStreamingResponse(\n-            scheduledObservable,\n+        return new BucketStreamingResponse(scheduledObservable,\n             host,\n             status,\n-            currentRequest()\n-        );\n+            currentRequest());\n     }\n \n     /**\n@@ -295,7 +290,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n                 break;\n             default:\n                 status = ResponseStatus.FAILURE;\n-        }\n+    }\n         return status;\n     }\n \n@@ -327,4 +322,4 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n         releaseResponseContent();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "207",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "214",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "215",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "216",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "217",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 30, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "218",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 26, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "219",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 30, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "220",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 26, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "221",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 37, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "222",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 33, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "223",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 44, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "224",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 44, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "225",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 40, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "239",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "275",
                    "column": "15",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'switch' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "276",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 21, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "278",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "279",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 21, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "280",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "281",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "'case' child has incorrect indentation level 21, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "283",
                    "severity": "warning",
                    "message": "'block' child has incorrect indentation level 21, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/82/ConfigHandler.java\nindex 1de865ab3b4..213da517820 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/82/ConfigHandler.java\n@@ -64,7 +64,6 @@ import io.netty.handler.codec.http.LastHttpContent;\n import io.netty.util.CharsetUtil;\n import rx.Observable;\n import rx.subjects.BehaviorSubject;\n-\n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.util.Queue;\n@@ -78,11 +77,13 @@ import java.util.Queue;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n+\n public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpRequest, ConfigRequest> {\n \n     /**\n      * Contains the current pending response header if set.\n      */\n+\n     private HttpResponse responseHeader;\n \n     /**\n@@ -101,6 +102,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param endpoint the {@link AbstractEndpoint} to coordinate with.\n      * @param responseBuffer the {@link RingBuffer} to push responses into.\n      */\n+\n     public ConfigHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, boolean isTransient) {\n         super(endpoint, responseBuffer, isTransient);\n     }\n@@ -112,6 +114,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param responseBuffer the {@link RingBuffer} to push responses into.\n      * @param queue the queue which holds all outstanding open requests.\n      */\n+\n     ConfigHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, Queue<ConfigRequest> queue, boolean isTransient) {\n         super(endpoint, responseBuffer, queue, isTransient);\n     }\n@@ -122,28 +125,25 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n         if (msg instanceof FlushRequest || msg instanceof InsertBucketRequest || msg instanceof UpdateBucketRequest) {\n             httpMethod = HttpMethod.POST;\n         } else if (msg instanceof RemoveBucketRequest) {\n-            httpMethod = HttpMethod.DELETE;\n-        }\n-\n+                   httpMethod = HttpMethod.DELETE;\n+               }\n         ByteBuf content;\n         if (msg instanceof InsertBucketRequest) {\n             content = Unpooled.copiedBuffer(((InsertBucketRequest) msg).payload(), CharsetUtil.UTF_8);\n         } else if (msg instanceof UpdateBucketRequest) {\n             content = Unpooled.copiedBuffer(((UpdateBucketRequest) msg).payload(), CharsetUtil.UTF_8);\n         } else {\n-            content = Unpooled.EMPTY_BUFFER;\n+                   content = Unpooled.EMPTY_BUFFER;\n         }\n-\n         FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, httpMethod, msg.path(), content);\n         request.headers().set(HttpHeaders.Names.USER_AGENT, env().userAgent());\n         if (msg instanceof InsertBucketRequest || msg instanceof UpdateBucketRequest) {\n-            request.headers().set(HttpHeaders.Names.ACCEPT, \"*/*\");\n+            request.headers().set(HttpHeaders.Names.ACCEPT,\n+\"*/*\");\n             request.headers().set(HttpHeaders.Names.CONTENT_TYPE, \"application/x-www-form-urlencoded\");\n         }\n         request.headers().set(HttpHeaders.Names.CONTENT_LENGTH, content.readableBytes());\n-\n         addAuth(ctx, request, msg.bucket(), msg.password());\n-\n         return request;\n     }\n \n@@ -158,10 +158,9 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param user the username for auth.\n      * @param password the password for auth.\n      */\n-    private static void addAuth(final ChannelHandlerContext ctx, final HttpRequest request, final String user,\n-        final String password) {\n-        final String pw = password == null ? \"\" : password;\n \n+    private static void addAuth(final ChannelHandlerContext ctx, final HttpRequest request, final String user, final String password) {\n+        final String pw = password == null ? \"\" : password;\n         ByteBuf raw = ctx.alloc().buffer(user.length() + pw.length() + 1);\n         raw.writeBytes((user + \":\" + pw).getBytes(CHARSET));\n         ByteBuf encoded = Base64.encode(raw);\n@@ -170,14 +169,13 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n         raw.release();\n     }\n \n+\n     @Override\n     protected CouchbaseResponse decodeResponse(final ChannelHandlerContext ctx, final HttpObject msg) throws Exception {\n         ConfigRequest request = currentRequest();\n         CouchbaseResponse response = null;\n-\n         if (msg instanceof HttpResponse) {\n             responseHeader = (HttpResponse) msg;\n-\n             if (request instanceof BucketStreamingRequest) {\n                 response = handleBucketStreamingResponse(ctx, responseHeader);\n             }\n@@ -205,33 +203,28 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n                 finishedDecoding();\n                 return null;\n             }\n-\n             ResponseStatus status = statusFromCode(responseHeader.getStatus().code());\n-            String body = responseContent.readableBytes() > 0\n-                ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n-\n+            String body = responseContent.readableBytes() > 0 ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n             if (request instanceof BucketConfigRequest) {\n                 response = new BucketConfigResponse(body, status);\n             } else if (request instanceof ClusterConfigRequest) {\n                 response = new ClusterConfigResponse(body, status);\n             } else if (request instanceof BucketsConfigRequest) {\n-                response = new BucketsConfigResponse(body, status);\n-            } else if (request instanceof GetDesignDocumentsRequest) {\n-                response = new GetDesignDocumentsResponse(body, status, request);\n-            } else if (request instanceof RemoveBucketRequest) {\n-                response = new RemoveBucketResponse(status);\n-            } else if (request instanceof InsertBucketRequest) {\n-                response = new InsertBucketResponse(body, status);\n-            } else if (request instanceof UpdateBucketRequest) {\n-                response = new UpdateBucketResponse(body, status);\n-            } else if (request instanceof FlushRequest) {\n-                boolean done = responseHeader.getStatus().code() != 201;\n-                response = new FlushResponse(done, body, status);\n-            }\n-\n+                       response = new BucketsConfigResponse(body, status);\n+                   } else if (request instanceof GetDesignDocumentsRequest) {\n+                       response = new GetDesignDocumentsResponse(body, status, request);\n+                   } else if (request instanceof RemoveBucketRequest) {\n+                              response = new RemoveBucketResponse(status);\n+                          } else if (request instanceof InsertBucketRequest) {\n+                              response = new InsertBucketResponse(body, status);\n+                          } else if (request instanceof UpdateBucketRequest) {\n+                                     response = new UpdateBucketResponse(body, status);\n+                                 } else if (request instanceof FlushRequest) {\n+                                            boolean done = responseHeader.getStatus().code() != 201;\n+                                            response = new FlushResponse(done, body, status);\n+                                        }\n             finishedDecoding();\n         }\n-\n         return response;\n     }\n \n@@ -242,31 +235,25 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param header the received header.\n      * @return a initialized {@link CouchbaseResponse}.\n      */\n-    private CouchbaseResponse handleBucketStreamingResponse(final ChannelHandlerContext ctx,\n-        final HttpResponse header) {\n+\n+    private CouchbaseResponse handleBucketStreamingResponse(final ChannelHandlerContext ctx, final HttpResponse header) {\n         SocketAddress addr = ctx.channel().remoteAddress();\n         String host = addr instanceof InetSocketAddress ? ((InetSocketAddress) addr).getHostName() : addr.toString();\n         ResponseStatus status = statusFromCode(header.getStatus().code());\n-\n         Observable<String> scheduledObservable = null;\n         if (status.isSuccess()) {\n             streamingConfigObservable = BehaviorSubject.create();\n             scheduledObservable = streamingConfigObservable.onBackpressureBuffer().observeOn(env().scheduler());\n         }\n-        return new BucketStreamingResponse(\n-            scheduledObservable,\n-            host,\n-            status,\n-            currentRequest()\n-        );\n+        return new BucketStreamingResponse(scheduledObservable, host, status, currentRequest());\n     }\n \n     /**\n      * Push a config chunk into the streaming observable.\n      */\n+\n     private void maybePushConfigChunk() {\n         String currentChunk = responseContent.toString(CHARSET);\n-\n         int separatorIndex = currentChunk.indexOf(\"\\n\\n\\n\\n\");\n         if (separatorIndex > 0) {\n             String content = currentChunk.substring(0, separatorIndex);\n@@ -282,19 +269,18 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param code the http code.\n      * @return the parsed status.\n      */\n+\n     private static ResponseStatus statusFromCode(int code) {\n         ResponseStatus status;\n-        switch (code) {\n-            case 200:\n-            case 201:\n-            case 202:\n-                status = ResponseStatus.SUCCESS;\n-                break;\n-            case 404:\n-                status = ResponseStatus.NOT_EXISTS;\n-                break;\n-            default:\n-                status = ResponseStatus.FAILURE;\n+        switch(code) {\n+                     case 200: case 201: case 202:\n+                     status = ResponseStatus.SUCCESS;\n+                     break;\n+                     case 404:\n+                     status = ResponseStatus.NOT_EXISTS;\n+                     break;\n+                     default:\n+                     status = ResponseStatus.FAILURE;\n         }\n         return status;\n     }\n@@ -303,6 +289,7 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * If it is still present and open, release the content buffer. Also set it\n      * to null so that next decoding can take a new buffer from the pool.\n      */\n+\n     private void releaseResponseContent() {\n         if (responseContent != null) {\n             if (responseContent.refCnt() > 0) {\n@@ -312,12 +299,14 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n         }\n     }\n \n+\n     @Override\n     protected void finishedDecoding() {\n         super.finishedDecoding();\n         releaseResponseContent();\n     }\n \n+\n     @Override\n     public void handlerRemoved(final ChannelHandlerContext ctx) throws Exception {\n         if (streamingConfigObservable != null) {\n@@ -326,5 +315,4 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n         super.handlerRemoved(ctx);\n         releaseResponseContent();\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "115",
                    "column": "93",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "115",
                    "column": "108",
                    "severity": "warning",
                    "message": "GenericWhitespace '>' should followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "',' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "column": "1",
                    "severity": "warning",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/82/ConfigHandler.java\nindex 1de865ab3b4..7f5a980ec42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/82/ConfigHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/82/ConfigHandler.java\n@@ -112,7 +112,8 @@ public class ConfigHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param responseBuffer the {@link RingBuffer} to push responses into.\n      * @param queue the queue which holds all outstanding open requests.\n      */\n-    ConfigHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, Queue<ConfigRequest> queue, boolean isTransient) {\n+    ConfigHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, Queue< ConfigRequest>queue\n+,boolean isTransient) {\n         super(endpoint, responseBuffer, queue, isTransient);\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}