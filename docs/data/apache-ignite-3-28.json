{
    "project_name": "apache-ignite-3",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n    private final ConcurrentMap<Long, FileReader> fileReaderMap = new ConcurrentHashMap<>();\n    private final AtomicLong nextId = new AtomicLong();\n\n    /**\n     * Retrieve the singleton instance of FileService.",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/28/FileService.java\nindex cd5bcd313fe..cce07016ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/28/FileService.java\n@@ -46,6 +46,7 @@ public final class FileService {\n     private static final FileService INSTANCE = new FileService(); // TODO asch fixme IGNITE-14832\n \n     private final ConcurrentMap<Long, FileReader> fileReaderMap = new ConcurrentHashMap<>();\n+\n     private final AtomicLong nextId = new AtomicLong();\n \n     /**\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/28/FileService.java\nindex cd5bcd313fe..a4bc6ab0c28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/28/FileService.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.ignite.raft.jraft.storage;\n \n import java.io.IOException;\n@@ -41,110 +42,107 @@ import org.slf4j.LoggerFactory;\n  * File reader service.\n  */\n public final class FileService {\n-    private static final Logger LOG = LoggerFactory.getLogger(FileService.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(FileService.class);\n+\n+  private static final FileService INSTANCE = new FileService(); // TODO asch fixme IGNITE-14832\n+\n+  private final ConcurrentMap<Long, FileReader> fileReaderMap = new ConcurrentHashMap<>();\n \n-    private static final FileService INSTANCE = new FileService(); // TODO asch fixme IGNITE-14832\n+  private final AtomicLong nextId = new AtomicLong();\n \n-    private final ConcurrentMap<Long, FileReader> fileReaderMap = new ConcurrentHashMap<>();\n-    private final AtomicLong nextId = new AtomicLong();\n+  /**\n+   * Retrieve the singleton instance of FileService.\n+   *\n+   * @return a fileService instance\n+   */\n+  public static FileService getInstance() {\n+    return INSTANCE;\n+  }\n \n-    /**\n-     * Retrieve the singleton instance of FileService.\n-     *\n-     * @return a fileService instance\n-     */\n-    public static FileService getInstance() {\n-        return INSTANCE;\n+  @OnlyForTest\n+  void clear() {\n+    this.fileReaderMap.clear();\n+  }\n+\n+  private FileService() {\n+    final long processId = Utils.getProcessId(ThreadLocalRandom.current().nextLong(10000, Integer.MAX_VALUE));\n+    final long initialValue = Math.abs(processId << 45 | System.nanoTime() << 17 >> 17);\n+    this.nextId.set(initialValue);\n+    LOG.info(\"Initial file reader id in FileService is {}\", initialValue);\n+  }\n+\n+  /**\n+   * Handle GetFileRequest, run the response or set the response with done.\n+   */\n+  public Message handleGetFile(final GetFileRequest request, final RpcRequestClosure done) {\n+    if (request.getCount() <= 0 || request.getOffset() < 0) {\n+      return RaftRpcFactory.DEFAULT //\n+          .newResponse(GetFileResponse.getDefaultInstance(), RaftError.EREQUEST, \"Invalid request: %s\", request);\n     }\n+    final FileReader reader = this.fileReaderMap.get(request.getReaderId());\n \n-    @OnlyForTest\n-    void clear() {\n-        this.fileReaderMap.clear();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.info(\"handleGetFile id={}, name={}, offset={}, cnt={}\",\n+          request.getReaderId(), request.getFilename(), request.getOffset(), request.getCount());\n     }\n \n-    private FileService() {\n-        final long processId = Utils.getProcessId(ThreadLocalRandom.current().nextLong(10000, Integer.MAX_VALUE));\n-        final long initialValue = Math.abs(processId << 45 | System.nanoTime() << 17 >> 17);\n-        this.nextId.set(initialValue);\n-        LOG.info(\"Initial file reader id in FileService is {}\", initialValue);\n+    if (reader == null) {\n+      return RaftRpcFactory.DEFAULT //\n+          .newResponse(GetFileResponse.getDefaultInstance(), RaftError.ENOENT, \"Fail to find reader=%d\",\n+              request.getReaderId());\n     }\n \n-    /**\n-     * Handle GetFileRequest, run the response or set the response with done.\n-     */\n-    public Message handleGetFile(final GetFileRequest request, final RpcRequestClosure done) {\n-        if (request.getCount() <= 0 || request.getOffset() < 0) {\n-            return RaftRpcFactory.DEFAULT //\n-                .newResponse(GetFileResponse.getDefaultInstance(), RaftError.EREQUEST, \"Invalid request: %s\", request);\n-        }\n-        final FileReader reader = this.fileReaderMap.get(request.getReaderId());\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.info(\"handleGetFile id={}, name={}, offset={}, cnt={}\",\n-                request.getReaderId(), request.getFilename(), request.getOffset(), request.getCount());\n-        }\n-\n-        if (reader == null) {\n-            return RaftRpcFactory.DEFAULT //\n-                .newResponse(GetFileResponse.getDefaultInstance(), RaftError.ENOENT, \"Fail to find reader=%d\",\n-                    request.getReaderId());\n-        }\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"GetFile from {} path={} filename={} offset={} count={}\", done.getRpcCtx().getRemoteAddress(),\n-                reader.getPath(), request.getFilename(), request.getOffset(), request.getCount());\n-        }\n-\n-        final ByteBufferCollector dataBuffer = ByteBufferCollector.allocate();\n-        final GetFileResponse.Builder responseBuilder = GetFileResponse.newBuilder();\n-        try {\n-            final int read = reader\n-                .readFile(dataBuffer, request.getFilename(), request.getOffset(), request.getCount());\n-            responseBuilder.setReadSize(read);\n-            responseBuilder.setEof(read == FileReader.EOF);\n-            final ByteBuffer buf = dataBuffer.getBuffer();\n-            buf.flip();\n-            if (!buf.hasRemaining()) {\n-                // skip empty data\n-                responseBuilder.setData(ByteString.EMPTY);\n-            }\n-            else {\n-                // TODO check hole https://issues.apache.org/jira/browse/IGNITE-14832\n-                responseBuilder.setData(new ByteString(buf));\n-            }\n-            return responseBuilder.build();\n-        }\n-        catch (final RetryAgainException e) {\n-            return RaftRpcFactory.DEFAULT //\n-                .newResponse(GetFileResponse.getDefaultInstance(), RaftError.EAGAIN,\n-                    \"Fail to read from path=%s filename=%s with error: %s\", reader.getPath(), request.getFilename(),\n-                    e.getMessage());\n-        }\n-        catch (final IOException e) {\n-            LOG.error(\"Fail to read file path={} filename={}\", reader.getPath(), request.getFilename(), e);\n-            return RaftRpcFactory.DEFAULT //\n-                .newResponse(GetFileResponse.getDefaultInstance(), RaftError.EIO,\n-                    \"Fail to read from path=%s filename=%s\", reader.getPath(), request.getFilename());\n-        }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"GetFile from {} path={} filename={} offset={} count={}\", done.getRpcCtx().getRemoteAddress(),\n+          reader.getPath(), request.getFilename(), request.getOffset(), request.getCount());\n     }\n \n-    /**\n-     * Adds a file reader and return it's generated readerId.\n-     */\n-    public long addReader(final FileReader reader) {\n-        final long readerId = this.nextId.getAndIncrement();\n-        if (this.fileReaderMap.putIfAbsent(readerId, reader) == null) {\n-            return readerId;\n-        }\n-        else {\n-            return -1L;\n-        }\n+    final ByteBufferCollector dataBuffer = ByteBufferCollector.allocate();\n+    final GetFileResponse.Builder responseBuilder = GetFileResponse.newBuilder();\n+    try {\n+      final int read = reader\n+          .readFile(dataBuffer, request.getFilename(), request.getOffset(), request.getCount());\n+      responseBuilder.setReadSize(read);\n+      responseBuilder.setEof(read == FileReader.EOF);\n+      final ByteBuffer buf = dataBuffer.getBuffer();\n+      buf.flip();\n+      if (!buf.hasRemaining()) {\n+        // skip empty data\n+        responseBuilder.setData(ByteString.EMPTY);\n+      } else {\n+        // TODO check hole https://issues.apache.org/jira/browse/IGNITE-14832\n+        responseBuilder.setData(new ByteString(buf));\n+      }\n+      return responseBuilder.build();\n+    } catch (final RetryAgainException e) {\n+      return RaftRpcFactory.DEFAULT //\n+          .newResponse(GetFileResponse.getDefaultInstance(), RaftError.EAGAIN,\n+              \"Fail to read from path=%s filename=%s with error: %s\", reader.getPath(), request.getFilename(),\n+              e.getMessage());\n+    } catch (final IOException e) {\n+      LOG.error(\"Fail to read file path={} filename={}\", reader.getPath(), request.getFilename(), e);\n+      return RaftRpcFactory.DEFAULT //\n+          .newResponse(GetFileResponse.getDefaultInstance(), RaftError.EIO,\n+              \"Fail to read from path=%s filename=%s\", reader.getPath(), request.getFilename());\n     }\n+  }\n \n-    /**\n-     * Remove the reader by readerId.\n-     */\n-    public boolean removeReader(final long readerId) {\n-        return this.fileReaderMap.remove(readerId) != null;\n+  /**\n+   * Adds a file reader and return it's generated readerId.\n+   */\n+  public long addReader(final FileReader reader) {\n+    final long readerId = this.nextId.getAndIncrement();\n+    if (this.fileReaderMap.putIfAbsent(readerId, reader) == null) {\n+      return readerId;\n+    } else {\n+      return -1L;\n     }\n+  }\n+\n+  /**\n+   * Remove the reader by readerId.\n+   */\n+  public boolean removeReader(final long readerId) {\n+    return this.fileReaderMap.remove(readerId) != null;\n+  }\n }\n",
            "diff_size": 145
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/28/FileService.java\nindex cd5bcd313fe..fda019d9ff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/28/FileService.java\n@@ -77,7 +77,8 @@ public final class FileService {\n             return RaftRpcFactory.DEFAULT //\n                 .newResponse(GetFileResponse.getDefaultInstance(), RaftError.EREQUEST, \"Invalid request: %s\", request);\n         }\n-        final FileReader reader = this.fileReaderMap.get(request.getReaderId());\n+\n+final FileReader reader = this.fileReaderMap.get(request.getReaderId());\n \n         if (LOG.isDebugEnabled()) {\n             LOG.info(\"handleGetFile id={}, name={}, offset={}, cnt={}\",\n@@ -88,7 +89,7 @@ public final class FileService {\n             return RaftRpcFactory.DEFAULT //\n                 .newResponse(GetFileResponse.getDefaultInstance(), RaftError.ENOENT, \"Fail to find reader=%d\",\n                     request.getReaderId());\n-        }\n+    }\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"GetFile from {} path={} filename={} offset={} count={}\", done.getRpcCtx().getRemoteAddress(),\n@@ -147,4 +148,4 @@ public final class FileService {\n     public boolean removeReader(final long readerId) {\n         return this.fileReaderMap.remove(readerId) != null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/28/FileService.java\nindex cd5bcd313fe..cce07016ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/28/FileService.java\n@@ -46,6 +46,7 @@ public final class FileService {\n     private static final FileService INSTANCE = new FileService(); // TODO asch fixme IGNITE-14832\n \n     private final ConcurrentMap<Long, FileReader> fileReaderMap = new ConcurrentHashMap<>();\n+\n     private final AtomicLong nextId = new AtomicLong();\n \n     /**\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/28/FileService.java\nindex cd5bcd313fe..cce07016ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/28/FileService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/28/FileService.java\n@@ -46,6 +46,7 @@ public final class FileService {\n     private static final FileService INSTANCE = new FileService(); // TODO asch fixme IGNITE-14832\n \n     private final ConcurrentMap<Long, FileReader> fileReaderMap = new ConcurrentHashMap<>();\n+\n     private final AtomicLong nextId = new AtomicLong();\n \n     /**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}