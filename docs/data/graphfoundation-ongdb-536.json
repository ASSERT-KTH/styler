{
    "project_name": "graphfoundation-ongdb",
    "error_id": "536",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "155",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/536/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/536/Transaction.java\nindex 25c6db0b42d..87b7bd64ae4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/536/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/536/Transaction.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n /**\n@@ -64,7 +65,7 @@ package org.neo4j.graphdb;\n  * Read operations inside of a transaction will also read uncommitted data from\n  * the same transaction.\n  * <p>\n- *\n+ * <p>\n  * Here's the idiomatic use of programmatic transactions in Neo4j on java 6 or earlier:\n  *\n  * <pre>\n@@ -91,80 +92,80 @@ package org.neo4j.graphdb;\n  */\n public interface Transaction extends AutoCloseable\n {\n-    /**\n-     * Marks this transaction as terminated, which means that it will be, much like in the case of failure,\n-     * unconditionally rolled back when {@link #close()} is called. Once this method has been invoked, it doesn't matter\n-     * if {@link #success()} is invoked afterwards -- the transaction will still be rolled back.\n-     *\n-     * Additionally, terminating a transaction causes all subsequent operations carried out within that\n-     * transaction to throw a {@link TransactionTerminatedException} in the owning thread.\n-     *\n-     * Note that, unlike the other transaction operations, this method can be called from threads other than\n-     * the owning thread of the transaction. When this method is called from a different thread,\n-     * it signals the owning thread to terminate the transaction and returns immediately.\n-     *\n-     * Calling this method on an already closed transaction has no effect.\n-     */\n-    void terminate();\n+  /**\n+   * Marks this transaction as terminated, which means that it will be, much like in the case of failure,\n+   * unconditionally rolled back when {@link #close()} is called. Once this method has been invoked, it doesn't matter\n+   * if {@link #success()} is invoked afterwards -- the transaction will still be rolled back.\n+   * <p>\n+   * Additionally, terminating a transaction causes all subsequent operations carried out within that\n+   * transaction to throw a {@link TransactionTerminatedException} in the owning thread.\n+   * <p>\n+   * Note that, unlike the other transaction operations, this method can be called from threads other than\n+   * the owning thread of the transaction. When this method is called from a different thread,\n+   * it signals the owning thread to terminate the transaction and returns immediately.\n+   * <p>\n+   * Calling this method on an already closed transaction has no effect.\n+   */\n+  void terminate();\n \n-    /**\n-     * Marks this transaction as failed, which means that it will\n-     * unconditionally be rolled back when {@link #close()} is called. Once\n-     * this method has been invoked, it doesn't matter if\n-     * {@link #success()} is invoked afterwards -- the transaction will still be\n-     * rolled back.\n-     */\n-    void failure();\n+  /**\n+   * Marks this transaction as failed, which means that it will\n+   * unconditionally be rolled back when {@link #close()} is called. Once\n+   * this method has been invoked, it doesn't matter if\n+   * {@link #success()} is invoked afterwards -- the transaction will still be\n+   * rolled back.\n+   */\n+  void failure();\n \n-    /**\n-     * Marks this transaction as successful, which means that it will be\n-     * committed upon invocation of {@link #close()} unless {@link #failure()}\n-     * has or will be invoked before then.\n-     */\n-    void success();\n+  /**\n+   * Marks this transaction as successful, which means that it will be\n+   * committed upon invocation of {@link #close()} unless {@link #failure()}\n+   * has or will be invoked before then.\n+   */\n+  void success();\n \n-    /**\n-     * Commits or marks this transaction for rollback, depending on whether\n-     * {@link #success()} or {@link #failure()} has been previously invoked.\n-     *\n-     * All {@link ResourceIterable ResourceIterables} that where returned from operations executed inside this\n-     * transaction will be automatically closed by this method.\n-     *\n-     * This method comes from {@link AutoCloseable} so that a {@link Transaction} can participate\n-     * in try-with-resource statements. It will not throw any declared exception.\n-     *\n-     * Invoking this method (which is unnecessary when in try-with-resource statement).\n-     */\n-    @Override\n-    void close();\n+  /**\n+   * Commits or marks this transaction for rollback, depending on whether\n+   * {@link #success()} or {@link #failure()} has been previously invoked.\n+   * <p>\n+   * All {@link ResourceIterable ResourceIterables} that where returned from operations executed inside this\n+   * transaction will be automatically closed by this method.\n+   * <p>\n+   * This method comes from {@link AutoCloseable} so that a {@link Transaction} can participate\n+   * in try-with-resource statements. It will not throw any declared exception.\n+   * <p>\n+   * Invoking this method (which is unnecessary when in try-with-resource statement).\n+   */\n+  @Override\n+  void close();\n \n-    /**\n-     * Acquires a write lock for {@code entity} for this transaction.\n-     * The lock (returned from this method) can be released manually, but\n-     * if not it's released automatically when the transaction finishes.\n-     * @param entity the entity to acquire a lock for. If another transaction\n-     * currently holds a write lock to that entity this call will wait until\n-     * it's released.\n-     *\n-     * @return a {@link Lock} which optionally can be used to release this\n-     * lock earlier than when the transaction finishes. If not released\n-     * (with {@link Lock#release()} it's going to be released with the\n-     * transaction finishes.\n-     */\n-    Lock acquireWriteLock( PropertyContainer entity );\n+  /**\n+   * Acquires a write lock for {@code entity} for this transaction.\n+   * The lock (returned from this method) can be released manually, but\n+   * if not it's released automatically when the transaction finishes.\n+   *\n+   * @param entity the entity to acquire a lock for. If another transaction\n+   *               currently holds a write lock to that entity this call will wait until\n+   *               it's released.\n+   * @return a {@link Lock} which optionally can be used to release this\n+   * lock earlier than when the transaction finishes. If not released\n+   * (with {@link Lock#release()} it's going to be released with the\n+   * transaction finishes.\n+   */\n+  Lock acquireWriteLock(PropertyContainer entity);\n \n-    /**\n-     * Acquires a read lock for {@code entity} for this transaction.\n-     * The lock (returned from this method) can be released manually, but\n-     * if not it's released automatically when the transaction finishes.\n-     * @param entity the entity to acquire a lock for. If another transaction\n-     * currently hold a write lock to that entity this call will wait until\n-     * it's released.\n-     *\n-     * @return a {@link Lock} which optionally can be used to release this\n-     * lock earlier than when the transaction finishes. If not released\n-     * (with {@link Lock#release()} it's going to be released with the\n-     * transaction finishes.\n-     */\n-    Lock acquireReadLock( PropertyContainer entity );\n+  /**\n+   * Acquires a read lock for {@code entity} for this transaction.\n+   * The lock (returned from this method) can be released manually, but\n+   * if not it's released automatically when the transaction finishes.\n+   *\n+   * @param entity the entity to acquire a lock for. If another transaction\n+   *               currently hold a write lock to that entity this call will wait until\n+   *               it's released.\n+   * @return a {@link Lock} which optionally can be used to release this\n+   * lock earlier than when the transaction finishes. If not released\n+   * (with {@link Lock#release()} it's going to be released with the\n+   * transaction finishes.\n+   */\n+  Lock acquireReadLock(PropertyContainer entity);\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/536/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/536/Transaction.java\nindex 25c6db0b42d..3c64cb55a1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/536/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/536/Transaction.java\n@@ -167,4 +167,4 @@ public interface Transaction extends AutoCloseable\n      * transaction finishes.\n      */\n     Lock acquireReadLock( PropertyContainer entity );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}