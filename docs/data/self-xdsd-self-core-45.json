{
    "project_name": "self-xdsd-self-core",
    "error_id": "45",
    "information": {
        "errors": [
            {
                "line": "67",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        );\n        final Task task = project.tasks().register(issue);\n        if(task != null) {\n            LOG.debug(\"Issue #\" + issue.issueId() + \" registered.\");\n        } else {\n            LOG.debug(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/45/RegisterIssue.java\nindex 99975a9e4e4..53a9d69c959 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/45/RegisterIssue.java\n@@ -64,7 +64,7 @@ public final class RegisterIssue extends Intermediary {\n             + project.repoFullName() + \" at \" + project.provider() + \"... \"\n         );\n         final Task task = project.tasks().register(issue);\n-        if(task != null) {\n+        if (task != null) {\n             LOG.debug(\"Issue #\" + issue.issueId() + \" registered.\");\n         } else {\n             LOG.debug(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/45/RegisterIssue.java\nindex 99975a9e4e4..c21ec2cd2cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/45/RegisterIssue.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.core.managers;\n \n import com.selfxdsd.api.Event;\n@@ -34,6 +35,7 @@ import org.slf4j.LoggerFactory;\n /**\n  * Step where the event's Issue is registered as a new Task in the\n  * Project.\n+ *\n  * @author Mihai Andronache (amihaiemil@gmail.com)\n  * @version $Id$\n  * @since 0.0.20\n@@ -49,6 +51,7 @@ public final class RegisterIssue extends Intermediary {\n \n     /**\n      * Ctor.\n+     *\n      * @param next The next step to perform.\n      */\n     public RegisterIssue(final Step next) {\n@@ -61,15 +64,15 @@ public final class RegisterIssue extends Intermediary {\n         final Project project = event.project();\n         LOG.debug(\n             \"Registering Issue #\" + issue.issueId() + \" as a Task in Project \"\n-            + project.repoFullName() + \" at \" + project.provider() + \"... \"\n+                + project.repoFullName() + \" at \" + project.provider() + \"... \"\n         );\n         final Task task = project.tasks().register(issue);\n-        if(task != null) {\n+        if (task != null) {\n             LOG.debug(\"Issue #\" + issue.issueId() + \" registered.\");\n         } else {\n             LOG.debug(\n                 \"Oops, something went wrong, Issue #\" + issue.issueId()\n-                + \" was not registered as a Task.\"\n+                    + \" was not registered as a Task.\"\n             );\n         }\n         super.next().perform(event);\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/45/RegisterIssue.java\nindex 99975a9e4e4..d1221035588 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/45/RegisterIssue.java\n@@ -64,7 +64,7 @@ public final class RegisterIssue extends Intermediary {\n             + project.repoFullName() + \" at \" + project.provider() + \"... \"\n         );\n         final Task task = project.tasks().register(issue);\n-        if(task != null) {\n+        if (task != null) {\n             LOG.debug(\"Issue #\" + issue.issueId() + \" registered.\");\n         } else {\n             LOG.debug(\n@@ -74,4 +74,4 @@ public final class RegisterIssue extends Intermediary {\n         }\n         super.next().perform(event);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/45/RegisterIssue.java\nindex 99975a9e4e4..556c8bf28f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/45/RegisterIssue.java\n@@ -38,19 +38,23 @@ import org.slf4j.LoggerFactory;\n  * @version $Id$\n  * @since 0.0.20\n  */\n+\n+\n public final class RegisterIssue extends Intermediary {\n \n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-        RegisterIssue.class\n-    );\n+\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RegisterIssue.class);\n \n     /**\n      * Ctor.\n      * @param next The next step to perform.\n      */\n+\n+\n     public RegisterIssue(final Step next) {\n         super(next);\n     }\n@@ -59,19 +63,18 @@ public final class RegisterIssue extends Intermediary {\n     public void perform(final Event event) {\n         final Issue issue = event.issue();\n         final Project project = event.project();\n-        LOG.debug(\n-            \"Registering Issue #\" + issue.issueId() + \" as a Task in Project \"\n-            + project.repoFullName() + \" at \" + project.provider() + \"... \"\n-        );\n+        LOG.debug(\"Registering Issue #\"\n+                  + issue.issueId() + \" as a Task in Project \"\n+                  + project.repoFullName() + \" at \"\n+                      + project.provider() + \"... \");\n         final Task task = project.tasks().register(issue);\n-        if(task != null) {\n-            LOG.debug(\"Issue #\" + issue.issueId() + \" registered.\");\n+        if (task != null) {\n+            LOG.debug(\"Issue #\"\n+                          + issue.issueId() + \" registered.\");\n         } else {\n-            LOG.debug(\n-                \"Oops, something went wrong, Issue #\" + issue.issueId()\n-                + \" was not registered as a Task.\"\n-            );\n+            LOG.debug(\"Oops, something went wrong, Issue #\"\n+                          + issue.issueId() + \" was not registered as a Task.\");\n         }\n         super.next().perform(event);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/45/RegisterIssue.java\nindex 99975a9e4e4..53a9d69c959 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/45/RegisterIssue.java\n@@ -64,7 +64,7 @@ public final class RegisterIssue extends Intermediary {\n             + project.repoFullName() + \" at \" + project.provider() + \"... \"\n         );\n         final Task task = project.tasks().register(issue);\n-        if(task != null) {\n+        if (task != null) {\n             LOG.debug(\"Issue #\" + issue.issueId() + \" registered.\");\n         } else {\n             LOG.debug(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/45/RegisterIssue.java\nindex 99975a9e4e4..53a9d69c959 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/45/RegisterIssue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/45/RegisterIssue.java\n@@ -64,7 +64,7 @@ public final class RegisterIssue extends Intermediary {\n             + project.repoFullName() + \" at \" + project.provider() + \"... \"\n         );\n         final Task task = project.tasks().register(issue);\n-        if(task != null) {\n+        if (task != null) {\n             LOG.debug(\"Issue #\" + issue.issueId() + \" registered.\");\n         } else {\n             LOG.debug(\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}