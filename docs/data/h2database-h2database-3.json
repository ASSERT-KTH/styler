{
    "project_name": "h2database-h2database",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "280",
                "column": "36",
                "severity": "warning",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public void removeLob(ValueLob lob) {\n        removeLob(((LobDataDatabase)lob.getLobData()).getLobId());\n    }\n\n    private void removeLob(long lobId) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/3/LobStorageBackend.java\nindex 0e18e1162cd..8dde13c87dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/3/LobStorageBackend.java\n@@ -277,7 +277,7 @@ public class LobStorageBackend implements LobStorageInterface {\n \n     @Override\n     public void removeLob(ValueLob lob) {\n-        removeLob(((LobDataDatabase)lob.getLobData()).getLobId());\n+        removeLob(((LobDataDatabase) lob.getLobData()).getLobId());\n     }\n \n     private void removeLob(long lobId) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/3/LobStorageBackend.java\nindex 0e18e1162cd..4817096bb61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/3/LobStorageBackend.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.pagestore.db;\n \n import java.io.IOException;\n@@ -65,7 +66,7 @@ import org.h2.value.lob.LobDataDatabase;\n  *      locks system session\n  *      waiting to lock database.\n  * </pre>\n- *\n+ * <p>\n  * So, in this class alone, we do two things: we have our very own dedicated\n  * session, the LOB session, and we take the locks in this order: first the\n  * Database object, and then the LOB session. Since we own the LOB session,\n@@ -109,10 +110,12 @@ public class LobStorageBackend implements LobStorageInterface {\n         String systemUserName = database.getSystemUser().getName();\n         SessionLocal session = database.getLobSession();\n         session.getTrace().setLevel(TraceSystem.OFF);\n-        conn = new JdbcConnection(session, systemUserName, Constants.CONN_URL_INTERNAL);\n+        conn = new JdbcConnection(session, systemUserName,\n+                Constants.CONN_URL_INTERNAL);\n         session = database.getSystemSession();\n         session.getTrace().setLevel(TraceSystem.OFF);\n-        JdbcConnection initConn = new JdbcConnection(session, systemUserName, Constants.CONN_URL_INTERNAL);\n+        JdbcConnection initConn = new JdbcConnection(session, systemUserName,\n+                Constants.CONN_URL_INTERNAL);\n         try {\n             Statement stat = initConn.createStatement();\n             // stat.execute(\"SET UNDO_LOG 0\");\n@@ -120,7 +123,7 @@ public class LobStorageBackend implements LobStorageInterface {\n             boolean create = true, update = false;\n             PreparedStatement prep = initConn.prepareStatement(\n                     \"SELECT ZERO() FROM INFORMATION_SCHEMA.COLUMNS WHERE \" +\n-                    \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n+                            \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n             prep.setString(1, \"INFORMATION_SCHEMA\");\n             prep.setString(2, \"LOB_MAP\");\n             prep.setString(3, \"POS\");\n@@ -129,14 +132,16 @@ public class LobStorageBackend implements LobStorageInterface {\n             if (rs.next()) {\n                 prep = initConn.prepareStatement(\n                         \"SELECT ZERO() FROM INFORMATION_SCHEMA.TABLES WHERE \" +\n-                        \"TABLE_SCHEMA=? AND TABLE_NAME=?\");\n+                                \"TABLE_SCHEMA=? AND TABLE_NAME=?\");\n                 prep.setString(1, \"INFORMATION_SCHEMA\");\n                 prep.setString(2, \"LOB_DATA\");\n                 rs = prep.executeQuery();\n                 if (rs.next()) {\n                     create = false;\n-                    prep = initConn.prepareStatement(\"SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE \"\n-                            + \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n+                    prep = initConn.prepareStatement(\n+                            \"SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE \"\n+                                    +\n+                                    \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n                     prep.setString(1, \"INFORMATION_SCHEMA\");\n                     prep.setString(2, \"LOB_DATA\");\n                     prep.setString(3, \"DATA\");\n@@ -171,7 +176,8 @@ public class LobStorageBackend implements LobStorageInterface {\n                         LOB_DATA +\n                         \"(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA VARBINARY) HIDDEN\");\n             } else if (update) {\n-                stat.execute(\"ALTER TABLE \" + LOB_DATA + \" ALTER COLUMN DATA SET DATA TYPE VARBINARY\");\n+                stat.execute(\"ALTER TABLE \" + LOB_DATA +\n+                        \" ALTER COLUMN DATA SET DATA TYPE VARBINARY\");\n             }\n             rs = stat.executeQuery(\"SELECT MAX(BLOCK) FROM \" + LOB_DATA);\n             rs.next();\n@@ -235,8 +241,9 @@ public class LobStorageBackend implements LobStorageInterface {\n                 prep.setLong(1, block);\n                 ResultSet rs = prep.executeQuery();\n                 if (!rs.next()) {\n-                    throw DbException.getJdbcSQLException(ErrorCode.IO_EXCEPTION_1,\n-                            \"Missing lob entry, block: \" + block);\n+                    throw DbException\n+                            .getJdbcSQLException(ErrorCode.IO_EXCEPTION_1,\n+                                    \"Missing lob entry, block: \" + block);\n                 }\n                 int compressed = rs.getInt(1);\n                 byte[] buffer = rs.getBytes(2);\n@@ -267,7 +274,7 @@ public class LobStorageBackend implements LobStorageInterface {\n     /**\n      * Allow to re-use the prepared statement.\n      *\n-     * @param sql the SQL statement\n+     * @param sql  the SQL statement\n      * @param prep the prepared statement\n      */\n     void reuse(String sql, PreparedStatement prep) {\n@@ -277,7 +284,7 @@ public class LobStorageBackend implements LobStorageInterface {\n \n     @Override\n     public void removeLob(ValueLob lob) {\n-        removeLob(((LobDataDatabase)lob.getLobData()).getLobId());\n+        removeLob(((LobDataDatabase) lob.getLobData()).getLobId());\n     }\n \n     private void removeLob(long lobId) {\n@@ -286,7 +293,8 @@ public class LobStorageBackend implements LobStorageInterface {\n             assertNotHolds(conn.getSession());\n             synchronized (database) {\n                 synchronized (conn.getSession()) {\n-                    String sql = \"SELECT BLOCK, HASH FROM \" + LOB_MAP + \" D WHERE D.LOB = ? \" +\n+                    String sql = \"SELECT BLOCK, HASH FROM \" + LOB_MAP +\n+                            \" D WHERE D.LOB = ? \" +\n                             \"AND NOT EXISTS(SELECT 1 FROM \" + LOB_MAP + \" O \" +\n                             \"WHERE O.BLOCK = D.BLOCK AND O.LOB <> ?)\";\n                     PreparedStatement prep = prepare(sql);\n@@ -328,12 +336,14 @@ public class LobStorageBackend implements LobStorageInterface {\n     }\n \n     @Override\n-    public InputStream getInputStream(long lobId, int tableId, long byteCount) throws IOException {\n+    public InputStream getInputStream(long lobId, int tableId, long byteCount)\n+            throws IOException {\n         return getInputStream(lobId, byteCount);\n     }\n \n     @Override\n-    public InputStream getInputStream(long lobId, long byteCount) throws IOException {\n+    public InputStream getInputStream(long lobId, long byteCount)\n+            throws IOException {\n         try {\n             assertNotHolds(conn.getSession());\n             // see locking discussion at the top\n@@ -348,7 +358,7 @@ public class LobStorageBackend implements LobStorageInterface {\n     }\n \n     private ValueLob addLob(InputStream in, long maxLength, int type,\n-            CountingReaderInputStream countingReaderForClob) {\n+                            CountingReaderInputStream countingReaderForClob) {\n         try {\n             byte[] buff = new byte[BLOCK_LENGTH];\n             if (maxLength < 0) {\n@@ -357,7 +367,8 @@ public class LobStorageBackend implements LobStorageInterface {\n             long length = 0;\n             long lobId = -1;\n             int maxLengthInPlaceLob = database.getMaxLengthInplaceLob();\n-            String compressAlgorithm = database.getLobCompressionAlgorithm(type);\n+            String compressAlgorithm =\n+                    database.getLobCompressionAlgorithm(type);\n             try {\n                 byte[] small = null;\n                 for (int seq = 0; maxLength > 0; seq++) {\n@@ -386,7 +397,8 @@ public class LobStorageBackend implements LobStorageInterface {\n                             if (seq == 0) {\n                                 lobId = getNextLobId();\n                             }\n-                            storeBlock(lobId, seq, length, b, compressAlgorithm);\n+                            storeBlock(lobId, seq, length, b,\n+                                    compressAlgorithm);\n                         }\n                     }\n                     length += len;\n@@ -397,7 +409,8 @@ public class LobStorageBackend implements LobStorageInterface {\n                 }\n                 if (small != null) {\n                     return type == Value.BLOB ? ValueBlob.createSmall(small)\n-                            : ValueClob.createSmall(small, countingReaderForClob.getLength());\n+                            : ValueClob.createSmall(small,\n+                            countingReaderForClob.getLength());\n                 }\n                 // For a BLOB, precision is length in bytes.\n                 // For a CLOB, precision is length in chars\n@@ -417,7 +430,8 @@ public class LobStorageBackend implements LobStorageInterface {\n     }\n \n     private ValueLob registerLob(int type, long lobId, int tableId,\n-            long byteCount, long precision) throws SQLException {\n+                                 long byteCount, long precision)\n+            throws SQLException {\n         assertNotHolds(conn.getSession());\n         // see locking discussion at the top\n         synchronized (database) {\n@@ -430,8 +444,10 @@ public class LobStorageBackend implements LobStorageInterface {\n                 prep.setInt(3, tableId);\n                 prep.execute();\n                 reuse(sql, prep);\n-                LobDataDatabase lobData = new LobDataDatabase(database, tableId, lobId);\n-                return type == Value.BLOB ? new ValueBlob(precision, lobData) : new ValueClob(precision, lobData);\n+                LobDataDatabase lobData =\n+                        new LobDataDatabase(database, tableId, lobId);\n+                return type == Value.BLOB ? new ValueBlob(precision, lobData) :\n+                        new ValueClob(precision, lobData);\n             }\n         }\n     }\n@@ -475,13 +491,17 @@ public class LobStorageBackend implements LobStorageInterface {\n                         prep.executeUpdate();\n                         reuse(sql, prep);\n \n-                        newLobData = new LobDataDatabase(database, tableId, lobId);\n+                        newLobData =\n+                                new LobDataDatabase(database, tableId, lobId);\n                     } else {\n                         // Recovery process, no need to copy LOB using normal\n                         // infrastructure\n-                        newLobData = new LobDataDatabase(database, tableId, oldLobId);\n+                        newLobData = new LobDataDatabase(database, tableId,\n+                                oldLobId);\n                     }\n-                    return type == Value.BLOB ? new ValueBlob(length, newLobData) : new ValueClob(length, newLobData);\n+                    return type == Value.BLOB ?\n+                            new ValueBlob(length, newLobData) :\n+                            new ValueClob(length, newLobData);\n                 } catch (SQLException e) {\n                     throw DbException.convert(e);\n                 }\n@@ -519,14 +539,14 @@ public class LobStorageBackend implements LobStorageInterface {\n     /**\n      * Store a block in the LOB storage.\n      *\n-     * @param lobId the lob id\n-     * @param seq the sequence number\n-     * @param pos the position within the lob\n-     * @param b the data\n+     * @param lobId             the lob id\n+     * @param seq               the sequence number\n+     * @param pos               the position within the lob\n+     * @param b                 the data\n      * @param compressAlgorithm the compression algorithm (may be null)\n      */\n     void storeBlock(long lobId, int seq, long pos, byte[] b,\n-            String compressAlgorithm) throws SQLException {\n+                    String compressAlgorithm) throws SQLException {\n         long block;\n         boolean blockExists = false;\n         if (compressAlgorithm != null) {\n@@ -537,7 +557,7 @@ public class LobStorageBackend implements LobStorageInterface {\n         assertHoldsLock(database);\n         block = getHashCacheBlock(hash);\n         if (block != -1) {\n-            String sql =  \"SELECT COMPRESSED, DATA FROM \" + LOB_DATA +\n+            String sql = \"SELECT COMPRESSED, DATA FROM \" + LOB_DATA +\n                     \" WHERE BLOCK = ?\";\n             PreparedStatement prep = prepare(sql);\n             prep.setLong(1, block);\n@@ -545,7 +565,8 @@ public class LobStorageBackend implements LobStorageInterface {\n             if (rs.next()) {\n                 boolean compressed = rs.getInt(1) != 0;\n                 byte[] compare = rs.getBytes(2);\n-                if (compressed == (compressAlgorithm != null) && Arrays.equals(b, compare)) {\n+                if (compressed == (compressAlgorithm != null) &&\n+                        Arrays.equals(b, compare)) {\n                     blockExists = true;\n                 }\n             }\n@@ -583,7 +604,8 @@ public class LobStorageBackend implements LobStorageInterface {\n     @Override\n     public ValueClob createClob(Reader reader, long maxLength) {\n         long max = maxLength == -1 ? Long.MAX_VALUE : maxLength;\n-        CountingReaderInputStream in = new CountingReaderInputStream(reader, max);\n+        CountingReaderInputStream in =\n+                new CountingReaderInputStream(reader, max);\n         return (ValueClob) addLob(in, Long.MAX_VALUE, Value.CLOB, in);\n     }\n \n@@ -650,8 +672,9 @@ public class LobStorageBackend implements LobStorageInterface {\n                 prep.setLong(1, lobId);\n                 ResultSet rs = prep.executeQuery();\n                 if (!rs.next()) {\n-                    throw DbException.getJdbcSQLException(ErrorCode.IO_EXCEPTION_1,\n-                            \"Missing lob entry: \" + lobId);\n+                    throw DbException\n+                            .getJdbcSQLException(ErrorCode.IO_EXCEPTION_1,\n+                                    \"Missing lob entry: \" + lobId);\n                 }\n                 byteCount = rs.getLong(1);\n                 reuse(sql, prep);\n@@ -672,7 +695,8 @@ public class LobStorageBackend implements LobStorageInterface {\n \n             this.lobMapBlocks = new long[lobMapCount];\n \n-            sql = \"SELECT BLOCK FROM \" + LOB_MAP + \" WHERE LOB = ? ORDER BY SEQ\";\n+            sql = \"SELECT BLOCK FROM \" + LOB_MAP +\n+                    \" WHERE LOB = ? ORDER BY SEQ\";\n             prep = prepare(sql);\n             prep.setLong(1, lobId);\n             rs = prep.executeQuery();\n@@ -721,7 +745,8 @@ public class LobStorageBackend implements LobStorageInterface {\n \n         private int skipSmall(long n) {\n             if (buffer != null && bufferPos < buffer.length) {\n-                int x = MathUtils.convertLongToInt(Math.min(n, buffer.length - bufferPos));\n+                int x = MathUtils.convertLongToInt(\n+                        Math.min(n, buffer.length - bufferPos));\n                 bufferPos += x;\n                 remainingBytes -= x;\n                 return x;\n@@ -744,7 +769,8 @@ public class LobStorageBackend implements LobStorageInterface {\n             return readFully(buff, off, length);\n         }\n \n-        private int readFully(byte[] buff, int off, int length) throws IOException {\n+        private int readFully(byte[] buff, int off, int length)\n+                throws IOException {\n             if (length == 0) {\n                 return 0;\n             }\n@@ -773,9 +799,9 @@ public class LobStorageBackend implements LobStorageInterface {\n             if (remainingBytes <= 0) {\n                 return;\n             }\n-if (lobMapIndex >= lobMapBlocks.length) {\n-    System.out.println(\"halt!\");\n-}\n+            if (lobMapIndex >= lobMapBlocks.length) {\n+                System.out.println(\"halt!\");\n+            }\n             try {\n                 buffer = readBlock(lobMapBlocks[lobMapIndex]);\n                 lobMapIndex++;\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "280",
                    "column": "36",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/3/LobStorageBackend.java\nindex 0e18e1162cd..1bd8df2b582 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/3/LobStorageBackend.java\n@@ -787,4 +787,4 @@ if (lobMapIndex >= lobMapBlocks.length) {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/3/LobStorageBackend.java\nindex 0e18e1162cd..24b95bbb09c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/3/LobStorageBackend.java\n@@ -71,14 +71,17 @@ import org.h2.value.lob.LobDataDatabase;\n  * Database object, and then the LOB session. Since we own the LOB session,\n  * no-one else can lock on it, and we are safe.\n  */\n+\n+\n public class LobStorageBackend implements LobStorageInterface {\n \n     /**\n      * The name of the lob data table. If this table exists, then lob storage is\n      * used.\n      */\n-    public static final String LOB_DATA_TABLE = \"LOB_DATA\";\n \n+\n+    public static final String LOB_DATA_TABLE = \"LOB_DATA\";\n     private static final String LOB_SCHEMA = \"INFORMATION_SCHEMA\";\n     private static final String LOBS = LOB_SCHEMA + \".LOBS\";\n     private static final String LOB_MAP = LOB_SCHEMA + \".LOB_MAP\";\n@@ -95,15 +98,16 @@ public class LobStorageBackend implements LobStorageInterface {\n      */\n     private static final int HASH_CACHE_SIZE = 4 * 1024;\n \n+\n     JdbcConnection conn;\n-    final Database database;\n \n-    private final HashMap<String, PreparedStatement> prepared = new HashMap<>();\n+\n+    final Database database;\n+    private final HashMap<String, PreparedStatement> prepared = new HashMap< >();\n     private long nextBlock;\n     private final CompressTool compress = CompressTool.getInstance();\n     private long[] hashBlocks;\n \n-\n     public LobStorageBackend(Database database) {\n         this.database = database;\n         String systemUserName = database.getSystemUser().getName();\n@@ -118,25 +122,20 @@ public class LobStorageBackend implements LobStorageInterface {\n             // stat.execute(\"SET UNDO_LOG 0\");\n             // stat.execute(\"SET REDO_LOG_BINARY 0\");\n             boolean create = true, update = false;\n-            PreparedStatement prep = initConn.prepareStatement(\n-                    \"SELECT ZERO() FROM INFORMATION_SCHEMA.COLUMNS WHERE \" +\n-                    \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n+            PreparedStatement prep = initConn.prepareStatement(\"SELECT ZERO() FROM INFORMATION_SCHEMA.COLUMNS WHERE \" + \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n             prep.setString(1, \"INFORMATION_SCHEMA\");\n             prep.setString(2, \"LOB_MAP\");\n             prep.setString(3, \"POS\");\n             ResultSet rs;\n             rs = prep.executeQuery();\n             if (rs.next()) {\n-                prep = initConn.prepareStatement(\n-                        \"SELECT ZERO() FROM INFORMATION_SCHEMA.TABLES WHERE \" +\n-                        \"TABLE_SCHEMA=? AND TABLE_NAME=?\");\n+                prep = initConn.prepareStatement(\"SELECT ZERO() FROM INFORMATION_SCHEMA.TABLES WHERE \" + \"TABLE_SCHEMA=? AND TABLE_NAME=?\");\n                 prep.setString(1, \"INFORMATION_SCHEMA\");\n                 prep.setString(2, \"LOB_DATA\");\n                 rs = prep.executeQuery();\n                 if (rs.next()) {\n                     create = false;\n-                    prep = initConn.prepareStatement(\"SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE \"\n-                            + \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n+                    prep = initConn.prepareStatement(\"SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE \" + \"TABLE_SCHEMA=? AND TABLE_NAME=? AND COLUMN_NAME=?\");\n                     prep.setString(1, \"INFORMATION_SCHEMA\");\n                     prep.setString(2, \"LOB_DATA\");\n                     prep.setString(3, \"DATA\");\n@@ -148,28 +147,19 @@ public class LobStorageBackend implements LobStorageInterface {\n                 }\n             }\n             if (create) {\n-                stat.execute(\"CREATE CACHED TABLE IF NOT EXISTS \" + LOBS +\n-                        \"(ID BIGINT PRIMARY KEY, BYTE_COUNT BIGINT, `TABLE` INT) HIDDEN\");\n-                stat.execute(\"CREATE INDEX IF NOT EXISTS \" +\n-                        \"INFORMATION_SCHEMA.INDEX_LOB_TABLE ON \" +\n-                        LOBS + \"(`TABLE`)\");\n-                stat.execute(\"CREATE CACHED TABLE IF NOT EXISTS \" + LOB_MAP +\n-                        \"(LOB BIGINT, SEQ INT, POS BIGINT, HASH INT, \" +\n-                        \"BLOCK BIGINT, PRIMARY KEY(LOB, SEQ)) HIDDEN\");\n-                stat.execute(\"ALTER TABLE \" + LOB_MAP +\n-                        \" RENAME TO \" + LOB_MAP + \" HIDDEN\");\n-                stat.execute(\"ALTER TABLE \" + LOB_MAP +\n-                        \" ADD IF NOT EXISTS POS BIGINT BEFORE HASH\");\n+                stat.execute(\"CREATE CACHED TABLE IF NOT EXISTS \" + LOBS + \"(ID BIGINT PRIMARY KEY, BYTE_COUNT BIGINT, `TABLE` INT) HIDDEN\");\n+                stat.execute(\"CREATE INDEX IF NOT EXISTS \" + \"INFORMATION_SCHEMA.INDEX_LOB_TABLE ON \"\n+                + LOBS + \"(`TABLE`)\");\n+                stat.execute(\"CREATE CACHED TABLE IF NOT EXISTS \" + LOB_MAP + \"(LOB BIGINT, SEQ INT, POS BIGINT, HASH INT, \" + \"BLOCK BIGINT, PRIMARY KEY(LOB, SEQ)) HIDDEN\");\n+                stat.execute(\"ALTER TABLE \" + LOB_MAP + \" RENAME TO \"\n+                + LOB_MAP + \" HIDDEN\");\n+                stat.execute(\"ALTER TABLE \" + LOB_MAP + \" ADD IF NOT EXISTS POS BIGINT BEFORE HASH\");\n                 // TODO the column name OFFSET was used in version 1.3.156,\n                 // so this can be remove in a later version\n-                stat.execute(\"ALTER TABLE \" + LOB_MAP +\n-                        \" DROP COLUMN IF EXISTS \\\"OFFSET\\\"\");\n-                stat.execute(\"CREATE INDEX IF NOT EXISTS \" +\n-                        \"INFORMATION_SCHEMA.INDEX_LOB_MAP_DATA_LOB ON \" +\n-                        LOB_MAP + \"(BLOCK, LOB)\");\n-                stat.execute(\"CREATE CACHED TABLE IF NOT EXISTS \" +\n-                        LOB_DATA +\n-                        \"(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA VARBINARY) HIDDEN\");\n+                stat.execute(\"ALTER TABLE \" + LOB_MAP + \" DROP COLUMN IF EXISTS \\\"OFFSET\\\"\");\n+                stat.execute(\"CREATE INDEX IF NOT EXISTS \" + \"INFORMATION_SCHEMA.INDEX_LOB_MAP_DATA_LOB ON \"\n+                + LOB_MAP + \"(BLOCK, LOB)\");\n+                stat.execute(\"CREATE CACHED TABLE IF NOT EXISTS \" + LOB_DATA + \"(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA VARBINARY) HIDDEN\");\n             } else if (update) {\n                 stat.execute(\"ALTER TABLE \" + LOB_DATA + \" ALTER COLUMN DATA SET DATA TYPE VARBINARY\");\n             }\n@@ -224,19 +214,20 @@ public class LobStorageBackend implements LobStorageInterface {\n      * @param block the block number\n      * @return the block (expanded if stored compressed)\n      */\n+\n+\n     byte[] readBlock(long block) throws SQLException {\n         // see locking discussion at the top\n         assertNotHolds(conn.getSession());\n         synchronized (database) {\n             synchronized (conn.getSession()) {\n-                String sql = \"SELECT COMPRESSED, DATA FROM \" +\n-                        LOB_DATA + \" WHERE BLOCK = ?\";\n+                String sql = \"SELECT COMPRESSED, DATA FROM \" + LOB_DATA + \" WHERE BLOCK = ?\";\n                 PreparedStatement prep = prepare(sql);\n                 prep.setLong(1, block);\n                 ResultSet rs = prep.executeQuery();\n                 if (!rs.next()) {\n                     throw DbException.getJdbcSQLException(ErrorCode.IO_EXCEPTION_1,\n-                            \"Missing lob entry, block: \" + block);\n+                                                          \"Missing lob entry, block: \" + block);\n                 }\n                 int compressed = rs.getInt(1);\n                 byte[] buffer = rs.getBytes(2);\n@@ -255,6 +246,8 @@ public class LobStorageBackend implements LobStorageInterface {\n      * @param sql the SQL statement\n      * @return the prepared statement\n      */\n+\n+\n     PreparedStatement prepare(String sql) throws SQLException {\n         assert Thread.holdsLock(database);\n         PreparedStatement prep = prepared.remove(sql);\n@@ -270,6 +263,8 @@ public class LobStorageBackend implements LobStorageInterface {\n      * @param sql the SQL statement\n      * @param prep the prepared statement\n      */\n+\n+\n     void reuse(String sql, PreparedStatement prep) {\n         assert Thread.holdsLock(database);\n         prepared.put(sql, prep);\n@@ -277,7 +272,7 @@ public class LobStorageBackend implements LobStorageInterface {\n \n     @Override\n     public void removeLob(ValueLob lob) {\n-        removeLob(((LobDataDatabase)lob.getLobData()).getLobId());\n+        removeLob(((LobDataDatabase) lob.getLobData()).getLobId());\n     }\n \n     private void removeLob(long lobId) {\n@@ -286,9 +281,9 @@ public class LobStorageBackend implements LobStorageInterface {\n             assertNotHolds(conn.getSession());\n             synchronized (database) {\n                 synchronized (conn.getSession()) {\n-                    String sql = \"SELECT BLOCK, HASH FROM \" + LOB_MAP + \" D WHERE D.LOB = ? \" +\n-                            \"AND NOT EXISTS(SELECT 1 FROM \" + LOB_MAP + \" O \" +\n-                            \"WHERE O.BLOCK = D.BLOCK AND O.LOB <> ?)\";\n+                    String sql = \"SELECT BLOCK, HASH FROM \" + LOB_MAP + \" D WHERE D.LOB = ? \"\n+                    + \"AND NOT EXISTS(SELECT 1 FROM \"\n+                    + LOB_MAP + \" O \" + \"WHERE O.BLOCK = D.BLOCK AND O.LOB <> ?)\";\n                     PreparedStatement prep = prepare(sql);\n                     prep.setLong(1, lobId);\n                     prep.setLong(2, lobId);\n@@ -300,13 +295,11 @@ public class LobStorageBackend implements LobStorageInterface {\n                         setHashCacheBlock(hash, -1);\n                     }\n                     reuse(sql, prep);\n-\n                     sql = \"DELETE FROM \" + LOB_MAP + \" WHERE LOB = ?\";\n                     prep = prepare(sql);\n                     prep.setLong(1, lobId);\n                     prep.execute();\n                     reuse(sql, prep);\n-\n                     sql = \"DELETE FROM \" + LOB_DATA + \" WHERE BLOCK = ?\";\n                     prep = prepare(sql);\n                     for (long block : blocks) {\n@@ -314,7 +307,6 @@ public class LobStorageBackend implements LobStorageInterface {\n                         prep.execute();\n                     }\n                     reuse(sql, prep);\n-\n                     sql = \"DELETE FROM \" + LOBS + \" WHERE ID = ?\";\n                     prep = prepare(sql);\n                     prep.setLong(1, lobId);\n@@ -347,8 +339,7 @@ public class LobStorageBackend implements LobStorageInterface {\n         }\n     }\n \n-    private ValueLob addLob(InputStream in, long maxLength, int type,\n-            CountingReaderInputStream countingReaderForClob) {\n+    private ValueLob addLob(InputStream in, long maxLength, int type, CountingReaderInputStream countingReaderForClob) {\n         try {\n             byte[] buff = new byte[BLOCK_LENGTH];\n             if (maxLength < 0) {\n@@ -374,8 +365,7 @@ public class LobStorageBackend implements LobStorageInterface {\n                     } else {\n                         b = buff;\n                     }\n-                    if (seq == 0 && b.length < BLOCK_LENGTH &&\n-                            b.length <= maxLengthInPlaceLob) {\n+                    if (seq == 0 && b.length < BLOCK_LENGTH && b.length <= maxLengthInPlaceLob) {\n                         small = b;\n                         break;\n                     }\n@@ -396,15 +386,13 @@ public class LobStorageBackend implements LobStorageInterface {\n                     small = new byte[0];\n                 }\n                 if (small != null) {\n-                    return type == Value.BLOB ? ValueBlob.createSmall(small)\n-                            : ValueClob.createSmall(small, countingReaderForClob.getLength());\n+                    return type == Value.BLOB ? ValueBlob.createSmall(small) : ValueClob.createSmall(small, countingReaderForClob.getLength());\n                 }\n                 // For a BLOB, precision is length in bytes.\n                 // For a CLOB, precision is length in chars\n-                long precision = countingReaderForClob == null ?\n-                        length : countingReaderForClob.getLength();\n-                return registerLob(type, lobId,\n-                        LobStorageFrontend.TABLE_TEMP, length, precision);\n+                long precision = countingReaderForClob == null ? length : countingReaderForClob.getLength();\n+                return registerLob(\n+type, lobId, LobStorageFrontend.TABLE_TEMP, length, precision);\n             } catch (IOException e) {\n                 if (lobId != -1) {\n                     removeLob(lobId);\n@@ -416,14 +404,14 @@ public class LobStorageBackend implements LobStorageInterface {\n         }\n     }\n \n-    private ValueLob registerLob(int type, long lobId, int tableId,\n+    private ValueLob registerLob(int type,\n+            long lobId, int tableId,\n             long byteCount, long precision) throws SQLException {\n         assertNotHolds(conn.getSession());\n         // see locking discussion at the top\n         synchronized (database) {\n             synchronized (conn.getSession()) {\n-                String sql = \"INSERT INTO \" + LOBS +\n-                        \"(ID, BYTE_COUNT, `TABLE`) VALUES(?, ?, ?)\";\n+                String sql = \"INSERT INTO \" + LOBS + \"(ID, BYTE_COUNT, `TABLE`) VALUES(?, ?, ?)\";\n                 PreparedStatement prep = prepare(sql);\n                 prep.setLong(1, lobId);\n                 prep.setLong(2, byteCount);\n@@ -454,27 +442,23 @@ public class LobStorageBackend implements LobStorageInterface {\n                     LobDataDatabase newLobData;\n                     if (!lobData.isRecoveryReference()) {\n                         long lobId = getNextLobId();\n-                        String sql = \"INSERT INTO \" + LOB_MAP +\n-                                \"(LOB, SEQ, POS, HASH, BLOCK) \" +\n-                                \"SELECT ?, SEQ, POS, HASH, BLOCK FROM \" +\n-                                LOB_MAP + \" WHERE LOB = ?\";\n+                        String sql = \"INSERT INTO \" + LOB_MAP + \"(LOB, SEQ, POS, HASH, BLOCK) \"\n+                        + \"SELECT ?, SEQ, POS, HASH, BLOCK FROM \"\n+                        + LOB_MAP + \" WHERE LOB = ?\";\n                         PreparedStatement prep = prepare(sql);\n                         prep.setLong(1, lobId);\n                         prep.setLong(2, oldLobId);\n                         prep.executeUpdate();\n                         reuse(sql, prep);\n-\n-                        sql = \"INSERT INTO \" + LOBS +\n-                                \"(ID, BYTE_COUNT, `TABLE`) \" +\n-                                \"SELECT ?, BYTE_COUNT, ? FROM \" + LOBS +\n-                                \" WHERE ID = ?\";\n+                        sql = \"INSERT INTO \" + LOBS + \"(ID, BYTE_COUNT, `TABLE`) \"\n+                        + \"SELECT ?, BYTE_COUNT, ? FROM \"\n+                        + LOBS + \" WHERE ID = ?\";\n                         prep = prepare(sql);\n                         prep.setLong(1, lobId);\n                         prep.setLong(2, tableId);\n                         prep.setLong(3, oldLobId);\n                         prep.executeUpdate();\n                         reuse(sql, prep);\n-\n                         newLobData = new LobDataDatabase(database, tableId, lobId);\n                     } else {\n                         // Recovery process, no need to copy LOB using normal\n@@ -525,8 +509,9 @@ public class LobStorageBackend implements LobStorageInterface {\n      * @param b the data\n      * @param compressAlgorithm the compression algorithm (may be null)\n      */\n-    void storeBlock(long lobId, int seq, long pos, byte[] b,\n-            String compressAlgorithm) throws SQLException {\n+\n+\n+    void storeBlock(long lobId, int seq, long pos, byte[] b, String compressAlgorithm) throws SQLException {\n         long block;\n         boolean blockExists = false;\n         if (compressAlgorithm != null) {\n@@ -537,8 +522,7 @@ public class LobStorageBackend implements LobStorageInterface {\n         assertHoldsLock(database);\n         block = getHashCacheBlock(hash);\n         if (block != -1) {\n-            String sql =  \"SELECT COMPRESSED, DATA FROM \" + LOB_DATA +\n-                    \" WHERE BLOCK = ?\";\n+            String sql = \"SELECT COMPRESSED, DATA FROM \" + LOB_DATA + \" WHERE BLOCK = ?\";\n             PreparedStatement prep = prepare(sql);\n             prep.setLong(1, block);\n             ResultSet rs = prep.executeQuery();\n@@ -554,8 +538,7 @@ public class LobStorageBackend implements LobStorageInterface {\n         if (!blockExists) {\n             block = nextBlock++;\n             setHashCacheBlock(hash, block);\n-            String sql = \"INSERT INTO \" + LOB_DATA +\n-                    \"(BLOCK, COMPRESSED, DATA) VALUES(?, ?, ?)\";\n+            String sql = \"INSERT INTO \" + LOB_DATA + \"(BLOCK, COMPRESSED, DATA) VALUES(?, ?, ?)\";\n             PreparedStatement prep = prepare(sql);\n             prep.setLong(1, block);\n             prep.setInt(2, compressAlgorithm == null ? 0 : 1);\n@@ -563,8 +546,7 @@ public class LobStorageBackend implements LobStorageInterface {\n             prep.execute();\n             reuse(sql, prep);\n         }\n-        String sql = \"INSERT INTO \" + LOB_MAP +\n-                \"(LOB, SEQ, POS, HASH, BLOCK) VALUES(?, ?, ?, ?, ?)\";\n+        String sql = \"INSERT INTO \" + LOB_MAP + \"(LOB, SEQ, POS, HASH, BLOCK) VALUES(?, ?, ?, ?, ?)\";\n         PreparedStatement prep = prepare(sql);\n         prep.setLong(1, lobId);\n         prep.setInt(2, seq);\n@@ -598,6 +580,8 @@ public class LobStorageBackend implements LobStorageInterface {\n      *\n      * @param lock the object\n      */\n+\n+\n     static void assertHoldsLock(Object lock) {\n         if (!Thread.holdsLock(lock)) {\n             throw DbException.getInternalError(lock.toString());\n@@ -607,6 +591,8 @@ public class LobStorageBackend implements LobStorageInterface {\n     /**\n      * An input stream that reads from a LOB.\n      */\n+\n+\n     public class LobInputStream extends InputStream {\n \n         /**\n@@ -614,6 +600,7 @@ public class LobStorageBackend implements LobStorageInterface {\n          * to the table that contains the LOB column from changing the data\n          * under us.\n          */\n+\n         private final long[] lobMapBlocks;\n \n         /**\n@@ -636,28 +623,24 @@ public class LobStorageBackend implements LobStorageInterface {\n          */\n         private int bufferPos;\n \n-\n         public LobInputStream(long lobId, long byteCount) throws SQLException {\n \n             // we have to take the lock on the session\n             // before the lock on the database to prevent ABBA deadlocks\n             assertHoldsLock(conn.getSession());\n             assertHoldsLock(database);\n-\n             if (byteCount == -1) {\n                 String sql = \"SELECT BYTE_COUNT FROM \" + LOBS + \" WHERE ID = ?\";\n                 PreparedStatement prep = prepare(sql);\n                 prep.setLong(1, lobId);\n                 ResultSet rs = prep.executeQuery();\n                 if (!rs.next()) {\n-                    throw DbException.getJdbcSQLException(ErrorCode.IO_EXCEPTION_1,\n-                            \"Missing lob entry: \" + lobId);\n+                    throw DbException.getJdbcSQLException(ErrorCode.IO_EXCEPTION_1, \"Missing lob entry: \" + lobId);\n                 }\n                 byteCount = rs.getLong(1);\n                 reuse(sql, prep);\n             }\n             this.remainingBytes = byteCount;\n-\n             String sql = \"SELECT COUNT(*) FROM \" + LOB_MAP + \" WHERE LOB = ?\";\n             PreparedStatement prep = prepare(sql);\n             prep.setLong(1, lobId);\n@@ -665,13 +648,10 @@ public class LobStorageBackend implements LobStorageInterface {\n             rs.next();\n             int lobMapCount = rs.getInt(1);\n             if (lobMapCount == 0) {\n-                throw DbException.getJdbcSQLException(ErrorCode.IO_EXCEPTION_1,\n-                        \"Missing lob entry: \" + lobId);\n+                throw DbException.getJdbcSQLException(ErrorCode.IO_EXCEPTION_1, \"Missing lob entry: \" + lobId);\n             }\n             reuse(sql, prep);\n-\n             this.lobMapBlocks = new long[lobMapCount];\n-\n             sql = \"SELECT BLOCK FROM \" + LOB_MAP + \" WHERE LOB = ? ORDER BY SEQ\";\n             prep = prepare(sql);\n             prep.setLong(1, lobId);\n@@ -773,9 +753,9 @@ public class LobStorageBackend implements LobStorageInterface {\n             if (remainingBytes <= 0) {\n                 return;\n             }\n-if (lobMapIndex >= lobMapBlocks.length) {\n-    System.out.println(\"halt!\");\n-}\n+            if (lobMapIndex >= lobMapBlocks.length) {\n+                System.out.println(\"halt!\");\n+            }\n             try {\n                 buffer = readBlock(lobMapBlocks[lobMapIndex]);\n                 lobMapIndex++;\n@@ -787,4 +767,4 @@ if (lobMapIndex >= lobMapBlocks.length) {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 106
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/3/LobStorageBackend.java\nindex 0e18e1162cd..8dde13c87dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/3/LobStorageBackend.java\n@@ -277,7 +277,7 @@ public class LobStorageBackend implements LobStorageInterface {\n \n     @Override\n     public void removeLob(ValueLob lob) {\n-        removeLob(((LobDataDatabase)lob.getLobData()).getLobId());\n+        removeLob(((LobDataDatabase) lob.getLobData()).getLobId());\n     }\n \n     private void removeLob(long lobId) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/3/LobStorageBackend.java\nindex 0e18e1162cd..8dde13c87dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/3/LobStorageBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/3/LobStorageBackend.java\n@@ -277,7 +277,7 @@ public class LobStorageBackend implements LobStorageInterface {\n \n     @Override\n     public void removeLob(ValueLob lob) {\n-        removeLob(((LobDataDatabase)lob.getLobData()).getLobId());\n+        removeLob(((LobDataDatabase) lob.getLobData()).getLobId());\n     }\n \n     private void removeLob(long lobId) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}