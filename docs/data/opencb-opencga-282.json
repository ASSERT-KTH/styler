{
    "project_name": "opencb-opencga",
    "error_id": "282",
    "information": {
        "errors": [
            {
                "line": "174",
                "column": "57",
                "severity": "error",
                "message": "',' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        QueryOptions queryOptions = new QueryOptions();\n        queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.include);\n        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE,projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n        queryOptions.put(QueryOptions.LIMIT, projectsCommandOptions.studiesCommandOptions.numericOptions.limit);\n        queryOptions.put(QueryOptions.SKIP, projectsCommandOptions.studiesCommandOptions.numericOptions.skip);\n        return openCGAClient.getProjectClient().getStudies(projectsCommandOptions.studiesCommandOptions.project, queryOptions);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/282/ProjectCommandExecutor.java\nindex 639be2a7c6f..0347248e9b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/282/ProjectCommandExecutor.java\n@@ -171,7 +171,7 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         QueryOptions queryOptions = new QueryOptions();\n         queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE,projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n+        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n         queryOptions.put(QueryOptions.LIMIT, projectsCommandOptions.studiesCommandOptions.numericOptions.limit);\n         queryOptions.put(QueryOptions.SKIP, projectsCommandOptions.studiesCommandOptions.numericOptions.skip);\n         return openCGAClient.getProjectClient().getStudies(projectsCommandOptions.studiesCommandOptions.project, queryOptions);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/282/ProjectCommandExecutor.java\nindex 639be2a7c6f..b0059ca5f15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/282/ProjectCommandExecutor.java\n@@ -35,146 +35,146 @@ import java.io.IOException;\n  * Created by imedina on 03/06/16.\n  */\n public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n-    // TODO: Add include/exclude/skip/... (queryOptions) to the client calls !!!!\n-\n-    private ProjectCommandOptions projectsCommandOptions;\n-\n-    public ProjectCommandExecutor(ProjectCommandOptions projectsCommandOptions) {\n-        super(projectsCommandOptions.commonCommandOptions);\n-        this.projectsCommandOptions = projectsCommandOptions;\n-    }\n-\n-\n-    @Override\n-    public void execute() throws Exception {\n-        logger.debug(\"Executing Project command line\");\n-\n-        String subCommandString = getParsedSubCommand(projectsCommandOptions.jCommander);\n-        RestResponse queryResponse = null;\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"search\":\n-                queryResponse = search();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"update\":\n-                queryResponse = update();\n-                break;\n-            case \"delete\":\n-                queryResponse = delete();\n-                break;\n-            case \"studies\":\n-                queryResponse = studies();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-        createOutput(queryResponse);\n-    }\n-\n-    private RestResponse<Project> create() throws CatalogException, IOException {\n-        logger.debug(\"Creating a new project\");\n-\n-        ProjectCommandOptions.CreateCommandOptions commandOptions = projectsCommandOptions.createCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        // First we populate the organism information using the client configuration\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), commandOptions.name);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ID.key(), commandOptions.id);\n-        params.putIfNotEmpty(\"alias\", commandOptions.alias);\n-\n-        Project.Organism organism = clientConfiguration.getOrganism();\n-        organism.setAssembly(StringUtils.isNotEmpty(commandOptions.assembly) ? commandOptions.assembly : organism.getAssembly());\n-        organism.setCommonName(StringUtils.isNotEmpty(commandOptions.commonName) ? commandOptions.commonName : organism.getCommonName());\n-        organism.setScientificName(StringUtils.isNotEmpty(commandOptions.scientificName)\n-                ? commandOptions.scientificName : organism.getScientificName());\n-        organism.setTaxonomyCode(StringUtils.isNotEmpty(commandOptions.taxonomyCode)\n-                ? Integer.parseInt(commandOptions.taxonomyCode) : organism.getTaxonomyCode());\n-        params.put(ProjectDBAdaptor.QueryParams.ORGANISM.key(), organism);\n-\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), commandOptions.description);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANIZATION.key(), commandOptions.organization);\n-\n-        return openCGAClient.getProjectClient().create(params);\n-    }\n-\n-    private RestResponse<Project> info() throws CatalogException, IOException {\n-        logger.debug(\"Getting the project info\");\n-\n-        QueryOptions queryOptions = new QueryOptions();\n-        queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n-        return openCGAClient.getProjectClient().get(projectsCommandOptions.infoCommandOptions.project, queryOptions);\n+  // TODO: Add include/exclude/skip/... (queryOptions) to the client calls !!!!\n+\n+  private ProjectCommandOptions projectsCommandOptions;\n+\n+  public ProjectCommandExecutor(ProjectCommandOptions projectsCommandOptions) {\n+    super(projectsCommandOptions.commonCommandOptions);\n+    this.projectsCommandOptions = projectsCommandOptions;\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    logger.debug(\"Executing Project command line\");\n+\n+    String subCommandString = getParsedSubCommand(projectsCommandOptions.jCommander);\n+    RestResponse queryResponse = null;\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"search\":\n+        queryResponse = search();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"update\":\n+        queryResponse = update();\n+        break;\n+      case \"delete\":\n+        queryResponse = delete();\n+        break;\n+      case \"studies\":\n+        queryResponse = studies();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n-    private RestResponse<Project> search() throws CatalogException, IOException {\n-        logger.debug(\"Search projects\");\n-\n-        ProjectCommandOptions.SearchCommandOptions commandOptions = projectsCommandOptions.searchCommandOptions;\n-\n-        Query query = new Query();\n-        query.putIfNotEmpty(\"owner\", commandOptions.owner);\n-        query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.STUDY.key(), commandOptions.study);\n-        query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), commandOptions.name);\n-        query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ID.key(), commandOptions.alias);\n-        query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANIZATION.key(), commandOptions.organization);\n-        query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), commandOptions.description);\n-        query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.CREATION_DATE.key(), commandOptions.creationDate);\n-        query.putIfNotEmpty(\"status\", commandOptions.status);\n-        query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ATTRIBUTES.key(), commandOptions.attributes);\n-        query.putAll(commandOptions.commonOptions.params);\n-\n-        QueryOptions queryOptions = new QueryOptions();\n-        queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n-        return openCGAClient.getProjectClient().search(query, queryOptions);\n+    createOutput(queryResponse);\n+  }\n+\n+  private RestResponse<Project> create() throws CatalogException, IOException {\n+    logger.debug(\"Creating a new project\");\n+\n+    ProjectCommandOptions.CreateCommandOptions commandOptions = projectsCommandOptions.createCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    // First we populate the organism information using the client configuration\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), commandOptions.name);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ID.key(), commandOptions.id);\n+    params.putIfNotEmpty(\"alias\", commandOptions.alias);\n+\n+    Project.Organism organism = clientConfiguration.getOrganism();\n+    organism.setAssembly(StringUtils.isNotEmpty(commandOptions.assembly) ? commandOptions.assembly : organism.getAssembly());\n+    organism.setCommonName(StringUtils.isNotEmpty(commandOptions.commonName) ? commandOptions.commonName : organism.getCommonName());\n+    organism.setScientificName(StringUtils.isNotEmpty(commandOptions.scientificName)\n+        ? commandOptions.scientificName : organism.getScientificName());\n+    organism.setTaxonomyCode(StringUtils.isNotEmpty(commandOptions.taxonomyCode)\n+        ? Integer.parseInt(commandOptions.taxonomyCode) : organism.getTaxonomyCode());\n+    params.put(ProjectDBAdaptor.QueryParams.ORGANISM.key(), organism);\n+\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), commandOptions.description);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANIZATION.key(), commandOptions.organization);\n+\n+    return openCGAClient.getProjectClient().create(params);\n+  }\n+\n+  private RestResponse<Project> info() throws CatalogException, IOException {\n+    logger.debug(\"Getting the project info\");\n+\n+    QueryOptions queryOptions = new QueryOptions();\n+    queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.include);\n+    queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n+    return openCGAClient.getProjectClient().get(projectsCommandOptions.infoCommandOptions.project, queryOptions);\n+  }\n+\n+  private RestResponse<Project> search() throws CatalogException, IOException {\n+    logger.debug(\"Search projects\");\n+\n+    ProjectCommandOptions.SearchCommandOptions commandOptions = projectsCommandOptions.searchCommandOptions;\n+\n+    Query query = new Query();\n+    query.putIfNotEmpty(\"owner\", commandOptions.owner);\n+    query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.STUDY.key(), commandOptions.study);\n+    query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), commandOptions.name);\n+    query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ID.key(), commandOptions.alias);\n+    query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANIZATION.key(), commandOptions.organization);\n+    query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), commandOptions.description);\n+    query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.CREATION_DATE.key(), commandOptions.creationDate);\n+    query.putIfNotEmpty(\"status\", commandOptions.status);\n+    query.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ATTRIBUTES.key(), commandOptions.attributes);\n+    query.putAll(commandOptions.commonOptions.params);\n+\n+    QueryOptions queryOptions = new QueryOptions();\n+    queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.include);\n+    queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n+    return openCGAClient.getProjectClient().search(query, queryOptions);\n+  }\n+\n+\n+  private RestResponse<Project> update() throws CatalogException, IOException {\n+    logger.debug(\"Updating project\");\n+\n+    ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n+\n+    ObjectMap params;\n+    if (StringUtils.isNotEmpty(commandOptions.json)) {\n+      params = loadFile(commandOptions.json);\n+    } else {\n+      params = new ObjectMap();\n+      params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), projectsCommandOptions.updateCommandOptions.name);\n+      params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), projectsCommandOptions.updateCommandOptions.description);\n+      params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANIZATION.key(), projectsCommandOptions.updateCommandOptions.organization);\n+      params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ATTRIBUTES.key(), projectsCommandOptions.updateCommandOptions.attributes);\n+      params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANISM_COMMON_NAME.key(),\n+          projectsCommandOptions.updateCommandOptions.commonName);\n+      params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANISM_TAXONOMY_CODE.key(),\n+          projectsCommandOptions.updateCommandOptions.taxonomyCode);\n     }\n \n+    return openCGAClient.getProjectClient().update(projectsCommandOptions.updateCommandOptions.project, null, params);\n+  }\n \n-    private RestResponse<Project> update() throws CatalogException, IOException {\n-        logger.debug(\"Updating project\");\n-\n-        ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n+  private RestResponse<Project> delete() throws CatalogException, IOException {\n+    logger.debug(\"Deleting project \");\n \n-        ObjectMap params;\n-        if (StringUtils.isNotEmpty(commandOptions.json)) {\n-            params = loadFile(commandOptions.json);\n-        } else {\n-            params = new ObjectMap();\n-            params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), projectsCommandOptions.updateCommandOptions.name);\n-            params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), projectsCommandOptions.updateCommandOptions.description);\n-            params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANIZATION.key(), projectsCommandOptions.updateCommandOptions.organization);\n-            params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ATTRIBUTES.key(), projectsCommandOptions.updateCommandOptions.attributes);\n-            params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANISM_COMMON_NAME.key(),\n-                    projectsCommandOptions.updateCommandOptions.commonName);\n-            params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ORGANISM_TAXONOMY_CODE.key(),\n-                    projectsCommandOptions.updateCommandOptions.taxonomyCode);\n-        }\n+    return openCGAClient.getProjectClient().delete(projectsCommandOptions.deleteCommandOptions.project, new ObjectMap());\n+  }\n \n-        return openCGAClient.getProjectClient().update(projectsCommandOptions.updateCommandOptions.project, null, params);\n-    }\n+  private RestResponse<Study> studies() throws CatalogException, IOException {\n+    logger.debug(\"Getting all studies the from a project \");\n \n-    private RestResponse<Project> delete() throws CatalogException, IOException {\n-        logger.debug(\"Deleting project \");\n-\n-        return openCGAClient.getProjectClient().delete(projectsCommandOptions.deleteCommandOptions.project, new ObjectMap());\n-    }\n-\n-    private RestResponse<Study> studies() throws CatalogException, IOException {\n-        logger.debug(\"Getting all studies the from a project \");\n-\n-        QueryOptions queryOptions = new QueryOptions();\n-        queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE,projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n-        queryOptions.put(QueryOptions.LIMIT, projectsCommandOptions.studiesCommandOptions.numericOptions.limit);\n-        queryOptions.put(QueryOptions.SKIP, projectsCommandOptions.studiesCommandOptions.numericOptions.skip);\n-        return openCGAClient.getProjectClient().getStudies(projectsCommandOptions.studiesCommandOptions.project, queryOptions);\n-    }\n+    QueryOptions queryOptions = new QueryOptions();\n+    queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.include);\n+    queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n+    queryOptions.put(QueryOptions.LIMIT, projectsCommandOptions.studiesCommandOptions.numericOptions.limit);\n+    queryOptions.put(QueryOptions.SKIP, projectsCommandOptions.studiesCommandOptions.numericOptions.skip);\n+    return openCGAClient.getProjectClient().getStudies(projectsCommandOptions.studiesCommandOptions.project, queryOptions);\n+  }\n \n }\n",
            "diff_size": 194
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/282/ProjectCommandExecutor.java\nindex 639be2a7c6f..22a6d3cb482 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/282/ProjectCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.main.executors.catalog;\n-\n-\n import org.apache.commons.lang3.StringUtils;\n import org.opencb.commons.datastore.core.ObjectMap;\n import org.opencb.commons.datastore.core.Query;\n@@ -171,10 +169,10 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         QueryOptions queryOptions = new QueryOptions();\n         queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE,projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n+        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n         queryOptions.put(QueryOptions.LIMIT, projectsCommandOptions.studiesCommandOptions.numericOptions.limit);\n         queryOptions.put(QueryOptions.SKIP, projectsCommandOptions.studiesCommandOptions.numericOptions.skip);\n         return openCGAClient.getProjectClient().getStudies(projectsCommandOptions.studiesCommandOptions.project, queryOptions);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/282/ProjectCommandExecutor.java\nindex 639be2a7c6f..0347248e9b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/282/ProjectCommandExecutor.java\n@@ -171,7 +171,7 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         QueryOptions queryOptions = new QueryOptions();\n         queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE,projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n+        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n         queryOptions.put(QueryOptions.LIMIT, projectsCommandOptions.studiesCommandOptions.numericOptions.limit);\n         queryOptions.put(QueryOptions.SKIP, projectsCommandOptions.studiesCommandOptions.numericOptions.skip);\n         return openCGAClient.getProjectClient().getStudies(projectsCommandOptions.studiesCommandOptions.project, queryOptions);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/282/ProjectCommandExecutor.java\nindex 639be2a7c6f..0347248e9b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/282/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/282/ProjectCommandExecutor.java\n@@ -171,7 +171,7 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         QueryOptions queryOptions = new QueryOptions();\n         queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE,projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n+        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, projectsCommandOptions.studiesCommandOptions.dataModelOptions.exclude);\n         queryOptions.put(QueryOptions.LIMIT, projectsCommandOptions.studiesCommandOptions.numericOptions.limit);\n         queryOptions.put(QueryOptions.SKIP, projectsCommandOptions.studiesCommandOptions.numericOptions.skip);\n         return openCGAClient.getProjectClient().getStudies(projectsCommandOptions.studiesCommandOptions.project, queryOptions);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}