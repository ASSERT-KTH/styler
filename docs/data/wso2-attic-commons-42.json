{
    "project_name": "wso2-attic-commons",
    "error_id": "42",
    "information": {
        "errors": [
            {
                "line": "91",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            logger.info(\"[EC] Unexpected Error while opening Mail Folder: \"\n                    + getUniqueKey()\n                    + \" check for typos with foldername, username, password or hostname in ejb-jar.xml, rebuild and redeploy\");\n            // ie.printStackTrace();\n            throw ie;\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/42/EndpointConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/42/EndpointConsumer.java\nindex 5672a7ca162..a96e2962f38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/42/EndpointConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/42/EndpointConsumer.java\n@@ -1,8 +1,8 @@\n /*\r\n  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\r\n- * \r\n+ *\r\n  * Copyright (c) 1997-2013 Oracle and/or its affiliates. All rights reserved.\r\n- * \r\n+ *\r\n  * The contents of this file are subject to the terms of either the GNU General\r\n  * Public License Version 2 only (\"GPL\") or the Common Development and\r\n  * Distribution License(\"CDDL\") (collectively, the \"License\"). You may not use\r\n@@ -10,18 +10,18 @@\n  * License at https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html or\r\n  * packager/legal/LICENSE.txt. See the License for the specific language\r\n  * governing permissions and limitations under the License.\r\n- * \r\n+ *\r\n  * When distributing the software, include this License Header Notice in each\r\n  * file and include the License file at packager/legal/LICENSE.txt.\r\n- * \r\n+ *\r\n  * GPL Classpath Exception: Oracle designates this particular file as subject to\r\n  * the \"Classpath\" exception as provided by Oracle in the GPL Version 2 section\r\n  * of the License file that accompanied this code.\r\n- * \r\n+ *\r\n  * Modifications: If applicable, add the following below the License Header,\r\n  * with the fields enclosed by brackets [] replaced by your own identifying\r\n  * information: \"Portions Copyright [year] [name of copyright owner]\"\r\n- * \r\n+ *\r\n  * Contributor(s): If you wish your version of this file to be governed by only\r\n  * the CDDL or only the GPL Version 2, indicate your decision by adding\r\n  * \"[Contributor] elects to include this software in this distribution under the\r\n@@ -45,134 +45,131 @@ import javax.mail.*;\n \r\n /**\r\n  * JavaMail Client RMI interface.\r\n- * \r\n+ * <p>\r\n  * This is a singleton class that represents the Client interface used by the\r\n  * JavaMail Service.\r\n- * \r\n+ *\r\n  * @author Alejandro Murillo\r\n  */\r\n \r\n public class EndpointConsumer {\r\n-    ActivationSpecImpl     activationSpec;\r\n-    MessageEndpointFactory endpointFactory;\r\n-    MailServerFolder       folder    = null;\r\n-\r\n-    static Logger          logger    = Logger.getLogger(\r\n-                                             \"samples.connectors.mailconnector.ra.inbound\",\r\n-                                             \"samples.connectors.mailconnector.ra.inbound.LocalStrings\");\r\n-\r\n-    public Method          onMessage = null;\r\n-\r\n-    /**\r\n-     * Constructor. Creates a JavaMail Client Interface object and exports it so\r\n-     * that the server can access it.\r\n-     * \r\n-     * @param endpointFactory\r\n-     *            a MessageEndpointFactory\r\n-     * @param activationSpec\r\n-     *            the activation spec\r\n-     */\r\n-\r\n-    public EndpointConsumer(MessageEndpointFactory endpointFactory,\r\n-            ActivationSpecImpl activationSpec) throws Exception {\r\n-        this.endpointFactory = endpointFactory;\r\n-        this.activationSpec = activationSpec;\r\n-        try {\r\n-            folder = new MailServerFolder(activationSpec);\r\n-        } catch (AuthenticationFailedException ie) {\r\n-            logger.info(\"[EC] Authentication problem when opening Mail Folder: \"\r\n-                    + getUniqueKey()\r\n-                    + \" Wrong password?, fix ejb-jar.xml, rebuild and redeploy\");\r\n-            // ie.printStackTrace();\r\n-            throw ie;\r\n-        } catch (Exception ie) {\r\n-            logger.info(\"[EC] Unexpected Error while opening Mail Folder: \"\r\n-                    + getUniqueKey()\r\n-                    + \" check for typos with foldername, username, password or hostname in ejb-jar.xml, rebuild and redeploy\");\r\n-            // ie.printStackTrace();\r\n-            throw ie;\r\n-        }\r\n-        logger.info(\"[EC] Created EndpointConsumer for: \" + getUniqueKey());\r\n-    }\r\n-\r\n-    /**\r\n-     * Delivers it to the appropriate EndPoint.\r\n-     * \r\n-     * @param message\r\n-     *            the message to be delivered\r\n-     */\r\n-\r\n-    public void deliverMessage(javax.mail.Message message)\r\n-            throws RemoteException {\r\n-        MessageEndpoint endpoint = null;\r\n-\r\n-        Object[] args = { message };\r\n-\r\n-        try {\r\n-            // o Create endpoint, passing XAResource.\r\n-            // o Call beforeDelivery to allow the appserver\r\n-            // to engage delivery in transaction, if required.\r\n-            // o Deliver Message.\r\n-\r\n-            if ((endpoint = endpointFactory.createEndpoint(null)) != null) {\r\n-                // If this was an XA capable RA then invoke\r\n-                // endpoint.beforeDelivery();\r\n-                ((samples.connectors.mailconnector.api.JavaMailMessageListener) endpoint)\r\n-                        .onMessage(message);\r\n-            }\r\n-        } catch (Exception e) {\r\n-            logger.log(Level.WARNING, \"messagereceiver.onmessageexception\",\r\n-                    e.getMessage());\r\n-        } catch (Error error) {\r\n-            logger.log(Level.WARNING, \"messagereceiver.onmessageexception\",\r\n-                    error.getMessage());\r\n-        } catch (Throwable t) {\r\n-            logger.log(Level.WARNING, \"messagereceiver.onmessageexception\",\r\n-                    t.getMessage());\r\n-        } finally {\r\n-            // o Call afterDelivery to to permit the Application Server to\r\n-            // complete or rollback transaction on delivery. This should\r\n-            // occur even if an exception has been thrown.\r\n-            // o Call release to indicate the endpoint can be recycled.\r\n-\r\n-            if (endpoint != null) {\r\n-                // If this was an XA capable RA then invoke\r\n-                // endpoint.afterDelivery();\r\n-                endpoint.release();\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n-    public boolean hasNewMessages() throws Exception {\r\n-        logger.fine(\"[EC] Checking for new messages on: \" + getUniqueKey());\r\n-        return folder.hasNewMessages();\r\n+  ActivationSpecImpl activationSpec;\r\n+  MessageEndpointFactory endpointFactory;\r\n+  MailServerFolder folder = null;\r\n+\r\n+  static Logger logger = Logger.getLogger(\r\n+    \"samples.connectors.mailconnector.ra.inbound\",\r\n+    \"samples.connectors.mailconnector.ra.inbound.LocalStrings\");\r\n+\r\n+  public Method onMessage = null;\r\n+\r\n+  /**\r\n+   * Constructor. Creates a JavaMail Client Interface object and exports it so\r\n+   * that the server can access it.\r\n+   *\r\n+   * @param endpointFactory a MessageEndpointFactory\r\n+   * @param activationSpec  the activation spec\r\n+   */\r\n+\r\n+  public EndpointConsumer(MessageEndpointFactory endpointFactory,\r\n+                          ActivationSpecImpl activationSpec) throws Exception {\r\n+    this.endpointFactory = endpointFactory;\r\n+    this.activationSpec = activationSpec;\r\n+    try {\r\n+      folder = new MailServerFolder(activationSpec);\r\n+    } catch (AuthenticationFailedException ie) {\r\n+      logger.info(\"[EC] Authentication problem when opening Mail Folder: \"\r\n+        + getUniqueKey()\r\n+        + \" Wrong password?, fix ejb-jar.xml, rebuild and redeploy\");\r\n+      // ie.printStackTrace();\r\n+      throw ie;\r\n+    } catch (Exception ie) {\r\n+      logger.info(\"[EC] Unexpected Error while opening Mail Folder: \"\r\n+        + getUniqueKey()\r\n+        + \" check for typos with foldername, username, password or hostname in ejb-jar.xml, rebuild and redeploy\");\r\n+      // ie.printStackTrace();\r\n+      throw ie;\r\n     }\r\n-\r\n-    public String getUniqueKey() {\r\n-        return activationSpec.getUserName() + \"::\"\r\n-                + activationSpec.getFolderName() + \"@\"\r\n-                + activationSpec.getServerName();\r\n+    logger.info(\"[EC] Created EndpointConsumer for: \" + getUniqueKey());\r\n+  }\r\n+\r\n+  /**\r\n+   * Delivers it to the appropriate EndPoint.\r\n+   *\r\n+   * @param message the message to be delivered\r\n+   */\r\n+\r\n+  public void deliverMessage(javax.mail.Message message)\r\n+    throws RemoteException {\r\n+    MessageEndpoint endpoint = null;\r\n+\r\n+    Object[] args = {message};\r\n+\r\n+    try {\r\n+      // o Create endpoint, passing XAResource.\r\n+      // o Call beforeDelivery to allow the appserver\r\n+      // to engage delivery in transaction, if required.\r\n+      // o Deliver Message.\r\n+\r\n+      if ((endpoint = endpointFactory.createEndpoint(null)) != null) {\r\n+        // If this was an XA capable RA then invoke\r\n+        // endpoint.beforeDelivery();\r\n+        ((samples.connectors.mailconnector.api.JavaMailMessageListener) endpoint)\r\n+          .onMessage(message);\r\n+      }\r\n+    } catch (Exception e) {\r\n+      logger.log(Level.WARNING, \"messagereceiver.onmessageexception\",\r\n+        e.getMessage());\r\n+    } catch (Error error) {\r\n+      logger.log(Level.WARNING, \"messagereceiver.onmessageexception\",\r\n+        error.getMessage());\r\n+    } catch (Throwable t) {\r\n+      logger.log(Level.WARNING, \"messagereceiver.onmessageexception\",\r\n+        t.getMessage());\r\n+    } finally {\r\n+      // o Call afterDelivery to to permit the Application Server to\r\n+      // complete or rollback transaction on delivery. This should\r\n+      // occur even if an exception has been thrown.\r\n+      // o Call release to indicate the endpoint can be recycled.\r\n+\r\n+      if (endpoint != null) {\r\n+        // If this was an XA capable RA then invoke\r\n+        // endpoint.afterDelivery();\r\n+        endpoint.release();\r\n+      }\r\n     }\r\n-\r\n-    public Message[] getNewMessages() {\r\n-        Message msgs[] = null;\r\n-        try {\r\n-            msgs = folder.getNewMessages();\r\n-            if (msgs != null) {\r\n-                for (int i = 0; i < msgs.length; i++) {\r\n-                    if (!msgs[i].isSet(Flags.Flag.SEEN)) // Deliver only once\r\n-                    {\r\n-                        // deliverMessage(msgs[i]);\r\n-                        // Mark message as seen\r\n-                        msgs[i].setFlag(Flags.Flag.SEEN, true);\r\n-                    }\r\n-                }\r\n-            }\r\n-        } catch (Exception ie) {\r\n-            logger.info(\"[EC] getNewMessages caught an exception. Bailing out\");\r\n-            ie.printStackTrace();\r\n+  }\r\n+\r\n+  public boolean hasNewMessages() throws Exception {\r\n+    logger.fine(\"[EC] Checking for new messages on: \" + getUniqueKey());\r\n+    return folder.hasNewMessages();\r\n+  }\r\n+\r\n+  public String getUniqueKey() {\r\n+    return activationSpec.getUserName() + \"::\"\r\n+      + activationSpec.getFolderName() + \"@\"\r\n+      + activationSpec.getServerName();\r\n+  }\r\n+\r\n+  public Message[] getNewMessages() {\r\n+    Message msgs[] = null;\r\n+    try {\r\n+      msgs = folder.getNewMessages();\r\n+      if (msgs != null) {\r\n+        for (int i = 0; i < msgs.length; i++) {\r\n+          if (!msgs[i].isSet(Flags.Flag.SEEN)) // Deliver only once\r\n+          {\r\n+            // deliverMessage(msgs[i]);\r\n+            // Mark message as seen\r\n+            msgs[i].setFlag(Flags.Flag.SEEN, true);\r\n+          }\r\n         }\r\n-        return msgs;\r\n-\r\n+      }\r\n+    } catch (Exception ie) {\r\n+      logger.info(\"[EC] getNewMessages caught an exception. Bailing out\");\r\n+      ie.printStackTrace();\r\n     }\r\n+    return msgs;\r\n+\r\n+  }\r\n }\r\n",
            "diff_size": 180
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/42/EndpointConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/42/EndpointConsumer.java\nindex 5672a7ca162..5a279e11768 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/42/EndpointConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/42/EndpointConsumer.java\n@@ -53,15 +53,15 @@ import javax.mail.*;\n  */\r\n \r\n public class EndpointConsumer {\r\n-    ActivationSpecImpl     activationSpec;\r\n+    ActivationSpecImpl activationSpec;\r\n     MessageEndpointFactory endpointFactory;\r\n-    MailServerFolder       folder    = null;\r\n+    MailServerFolder folder = null;\r\n \r\n-    static Logger          logger    = Logger.getLogger(\r\n-                                             \"samples.connectors.mailconnector.ra.inbound\",\r\n-                                             \"samples.connectors.mailconnector.ra.inbound.LocalStrings\");\r\n-\r\n-    public Method          onMessage = null;\r\n+    static Logger logger = Logger.getLogger(\n+  \"samples.connectors.mailconnector.ra.inbound\",\r\n+                                             \"samples.connectors.mailconnector.ra.inbound.LocalStrings\");\n+\n+public Method onMessage = null;\r\n \r\n     /**\r\n      * Constructor. Creates a JavaMail Client Interface object and exports it so\r\n@@ -100,9 +100,8 @@ public class EndpointConsumer {\n      * \r\n      * @param message\r\n      *            the message to be delivered\r\n-     */\r\n-\r\n-    public void deliverMessage(javax.mail.Message message)\r\n+     */\n+public void deliverMessage(javax.mail.Message message)\r\n             throws RemoteException {\r\n         MessageEndpoint endpoint = null;\r\n \r\n@@ -175,4 +174,4 @@ public class EndpointConsumer {\n         return msgs;\r\n \r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/42/EndpointConsumer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/42/EndpointConsumer.java\nindex 5672a7ca162..fd01df0bd02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/42/EndpointConsumer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/42/EndpointConsumer.java\n@@ -89,7 +89,7 @@ public class EndpointConsumer {\n             logger.info(\"[EC] Unexpected Error while opening Mail Folder: \"\r\n                     + getUniqueKey()\r\n                     + \" check for typos with foldername, username, password or hostname in ejb-jar.xml, rebuild and redeploy\");\r\n-            // ie.printStackTrace();\r\n+                // ie.printStackTrace();\r\n             throw ie;\r\n         }\r\n         logger.info(\"[EC] Created EndpointConsumer for: \" + getUniqueKey());\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}