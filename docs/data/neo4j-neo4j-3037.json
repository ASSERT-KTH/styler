{
    "project_name": "neo4j-neo4j",
    "error_id": "3037",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3037/SimpleOutputFormatter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3037/SimpleOutputFormatter.java\nindex 18661425f3c..68fd271bc4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3037/SimpleOutputFormatter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3037/SimpleOutputFormatter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.prettyprint;\n \n import java.util.EnumSet;\n@@ -39,19 +40,19 @@ public class SimpleOutputFormatter implements OutputFormatter\n {\n \n     @Override\n-    public int formatAndCount( @Nonnull BoltResult result, @Nonnull LinePrinter output )\n+    public int formatAndCount(@Nonnull BoltResult result, @Nonnull LinePrinter output)\n     {\n         Iterator<Record> records = result.iterate();\n         int numberOfRows = 0;\n-        if ( records.hasNext() )\n+        if (records.hasNext())\n         {\n             Record firstRow = records.next();\n-            output.printOut( String.join( COMMA_SEPARATOR, firstRow.keys() ) );\n-            output.printOut( formatRecord( firstRow ) );\n+            output.printOut(String.join(COMMA_SEPARATOR, firstRow.keys()));\n+            output.printOut(formatRecord(firstRow));\n             numberOfRows++;\n-            while ( records.hasNext() )\n+            while (records.hasNext())\n             {\n-                output.printOut( formatRecord( records.next() ) );\n+                output.printOut(formatRecord(records.next()));\n                 numberOfRows++;\n             }\n         }\n@@ -59,27 +60,27 @@ public class SimpleOutputFormatter implements OutputFormatter\n     }\n \n     @Nonnull\n-    private String formatRecord( @Nonnull final Record record )\n+    private String formatRecord(@Nonnull final Record record)\n     {\n-        return record.values().stream().map( this::formatValue ).collect( Collectors.joining( COMMA_SEPARATOR ) );\n+        return record.values().stream().map(this::formatValue).collect(Collectors.joining(COMMA_SEPARATOR));\n     }\n \n     @Nonnull\n     @Override\n-    public String formatInfo( @Nonnull ResultSummary summary )\n+    public String formatInfo(@Nonnull ResultSummary summary)\n     {\n-        if ( !summary.hasPlan() )\n+        if (!summary.hasPlan())\n         {\n             return \"\";\n         }\n-        Map<String, Value> info = OutputFormatter.info( summary );\n+        Map<String, Value> info = OutputFormatter.info(summary);\n         return info.entrySet().stream()\n-                   .map( e -> String.format( \"%s: %s\", e.getKey(), e.getValue() ) ).collect( Collectors.joining( NEWLINE ) );\n+          .map(e -> String.format(\"%s: %s\", e.getKey(), e.getValue())).collect(Collectors.joining(NEWLINE));\n     }\n \n     @Override\n     public Set<Capabilities> capabilities()\n     {\n-        return EnumSet.of( INFO, STATISTICS, RESULT );\n+        return EnumSet.of(INFO, STATISTICS, RESULT);\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}