{
    "project_name": "graphfoundation-ongdb",
    "error_id": "712",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/712/InMemoryTokenCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/712/InMemoryTokenCache.java\nindex e4726064ba6..2d810429991 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/712/InMemoryTokenCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/712/InMemoryTokenCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.core;\n \n import java.util.HashMap;\n@@ -32,7 +33,7 @@ import static java.util.Collections.unmodifiableCollection;\n  * Token cache that provide id -> TOKEN and name -> id mappings.\n  * Name -> id mapping will be updated last since it's used as part of the check for token existence in a cache.\n  * As soon as token visible through it - it's considered added into a cache.\n- *\n+ * <p>\n  * Implementation does not provide any atomicity guarantees. Mapping updates will be visible independently from each\n  * other.\n  * Implementation is not thread safe.\n@@ -41,70 +42,70 @@ import static java.util.Collections.unmodifiableCollection;\n  */\n public class InMemoryTokenCache<TOKEN extends Token>\n {\n-    private final Map<String, Integer> nameToId = new CopyOnWriteHashMap<>();\n-    private final Map<Integer, TOKEN> idToToken = new CopyOnWriteHashMap<>();\n-    private final String tokenType;\n+  private final Map<String, Integer> nameToId = new CopyOnWriteHashMap<>();\n+  private final Map<Integer, TOKEN> idToToken = new CopyOnWriteHashMap<>();\n+  private final String tokenType;\n \n-    public InMemoryTokenCache( String tokenType )\n-    {\n-        this.tokenType = tokenType;\n-    }\n+  public InMemoryTokenCache(String tokenType)\n+  {\n+    this.tokenType = tokenType;\n+  }\n \n-    public void clear()\n-    {\n-        nameToId.clear();\n-        idToToken.clear();\n-    }\n+  public void clear()\n+  {\n+    nameToId.clear();\n+    idToToken.clear();\n+  }\n \n-    private void putAndEnsureUnique( Map<String,Integer> nameToId, TOKEN token, String tokenType )\n+  private void putAndEnsureUnique(Map<String, Integer> nameToId, TOKEN token, String tokenType)\n+  {\n+    Integer previous = nameToId.putIfAbsent(token.name(), token.id());\n+    if (previous != null && previous != token.id())\n     {\n-        Integer previous = nameToId.putIfAbsent( token.name(), token.id() );\n-        if ( previous != null && previous != token.id() )\n-        {\n-            // since we optimistically put token into a map before, now we need to remove it.\n-            idToToken.remove( token.id(), token );\n-            throw new NonUniqueTokenException( tokenType, token.name(), token.id(), previous );\n-        }\n+      // since we optimistically put token into a map before, now we need to remove it.\n+      idToToken.remove(token.id(), token);\n+      throw new NonUniqueTokenException(tokenType, token.name(), token.id(), previous);\n     }\n+  }\n \n-    public void putAll( List<TOKEN> tokens ) throws NonUniqueTokenException\n-    {\n-        Map<String, Integer> newNameToId = new HashMap<>();\n-        Map<Integer, TOKEN> newIdToToken = new HashMap<>();\n-\n-        for ( TOKEN token : tokens )\n-        {\n-            newIdToToken.put( token.id(), token );\n-            putAndEnsureUnique( newNameToId, token, tokenType );\n-        }\n-\n-        idToToken.putAll( newIdToToken );\n-        nameToId.putAll( newNameToId );\n-    }\n+  public void putAll(List<TOKEN> tokens) throws NonUniqueTokenException\n+  {\n+    Map<String, Integer> newNameToId = new HashMap<>();\n+    Map<Integer, TOKEN> newIdToToken = new HashMap<>();\n \n-    public void put( TOKEN token ) throws NonUniqueTokenException\n+    for (TOKEN token : tokens)\n     {\n-        idToToken.put( token.id(), token );\n-        putAndEnsureUnique( nameToId, token, tokenType );\n+      newIdToToken.put(token.id(), token);\n+      putAndEnsureUnique(newNameToId, token, tokenType);\n     }\n \n-    public Integer getId( String name )\n-    {\n-        return nameToId.get( name );\n-    }\n+    idToToken.putAll(newIdToToken);\n+    nameToId.putAll(newNameToId);\n+  }\n \n-    public TOKEN getToken( int id )\n-    {\n-        return idToToken.get( id );\n-    }\n+  public void put(TOKEN token) throws NonUniqueTokenException\n+  {\n+    idToToken.put(token.id(), token);\n+    putAndEnsureUnique(nameToId, token, tokenType);\n+  }\n \n-    public Iterable<TOKEN> allTokens()\n-    {\n-        return unmodifiableCollection( idToToken.values() );\n-    }\n+  public Integer getId(String name)\n+  {\n+    return nameToId.get(name);\n+  }\n \n-    public int size()\n-    {\n-        return nameToId.size();\n-    }\n+  public TOKEN getToken(int id)\n+  {\n+    return idToToken.get(id);\n+  }\n+\n+  public Iterable<TOKEN> allTokens()\n+  {\n+    return unmodifiableCollection(idToToken.values());\n+  }\n+\n+  public int size()\n+  {\n+    return nameToId.size();\n+  }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/712/InMemoryTokenCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/712/InMemoryTokenCache.java\nindex e4726064ba6..427c71541cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/712/InMemoryTokenCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/712/InMemoryTokenCache.java\n@@ -41,8 +41,8 @@ import static java.util.Collections.unmodifiableCollection;\n  */\n public class InMemoryTokenCache<TOKEN extends Token>\n {\n-    private final Map<String, Integer> nameToId = new CopyOnWriteHashMap<>();\n-    private final Map<Integer, TOKEN> idToToken = new CopyOnWriteHashMap<>();\n+    private final Map<String,Integer> nameToId = new CopyOnWriteHashMap<>();\n+    private final Map<Integer,TOKEN> idToToken = new CopyOnWriteHashMap<>();\n     private final String tokenType;\n \n     public InMemoryTokenCache( String tokenType )\n@@ -69,10 +69,9 @@ public class InMemoryTokenCache<TOKEN extends Token>\n \n     public void putAll( List<TOKEN> tokens ) throws NonUniqueTokenException\n     {\n-        Map<String, Integer> newNameToId = new HashMap<>();\n-        Map<Integer, TOKEN> newIdToToken = new HashMap<>();\n-\n-        for ( TOKEN token : tokens )\n+        Map<String,Integer> newNameToId = new HashMap<>();\n+        Map<Integer,TOKEN> newIdToToken = new HashMap<>();\n+for ( TOKEN token : tokens )\n         {\n             newIdToToken.put( token.id(), token );\n             putAndEnsureUnique( newNameToId, token, tokenType );\n@@ -107,4 +106,4 @@ public class InMemoryTokenCache<TOKEN extends Token>\n     {\n         return nameToId.size();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}