{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "553",
    "information": {
        "errors": [
            {
                "line": "105",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Test\n  public void testMatchesUrl() {\n    assertTrue(GlobalForwardingRuleId.matchesUrl(GlobalForwardingRuleId.of(PROJECT, NAME).selfLink()));\n    assertFalse(GlobalForwardingRuleId.matchesUrl(\"notMatchingUrl\"));\n    assertTrue(RegionForwardingRuleId.matchesUrl(\n        RegionForwardingRuleId.of(PROJECT, REGION, NAME).selfLink()));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/553/ForwardingRuleIdTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/553/ForwardingRuleIdTest.java\nindex e15059623fa..ba2b307811e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/553/ForwardingRuleIdTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/553/ForwardingRuleIdTest.java\n@@ -102,7 +102,8 @@ public class ForwardingRuleIdTest {\n \n   @Test\n   public void testMatchesUrl() {\n-    assertTrue(GlobalForwardingRuleId.matchesUrl(GlobalForwardingRuleId.of(PROJECT, NAME).selfLink()));\n+    assertTrue(\n+        GlobalForwardingRuleId.matchesUrl(GlobalForwardingRuleId.of(PROJECT, NAME).selfLink()));\n     assertFalse(GlobalForwardingRuleId.matchesUrl(\"notMatchingUrl\"));\n     assertTrue(RegionForwardingRuleId.matchesUrl(\n         RegionForwardingRuleId.of(PROJECT, REGION, NAME).selfLink()));\n@@ -110,7 +111,7 @@ public class ForwardingRuleIdTest {\n   }\n \n   private void compareGlobalForwardingRuleId(GlobalForwardingRuleId expected,\n-      GlobalForwardingRuleId value) {\n+                                             GlobalForwardingRuleId value) {\n     assertEquals(expected, value);\n     assertEquals(expected.project(), expected.project());\n     assertEquals(expected.rule(), expected.rule());\n@@ -119,7 +120,7 @@ public class ForwardingRuleIdTest {\n   }\n \n   private void compareRegionForwardingRuleId(RegionForwardingRuleId expected,\n-      RegionForwardingRuleId value) {\n+                                             RegionForwardingRuleId value) {\n     assertEquals(expected, value);\n     assertEquals(expected.project(), expected.project());\n     assertEquals(expected.region(), expected.region());\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/553/ForwardingRuleIdTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/553/ForwardingRuleIdTest.java\nindex e15059623fa..2290c3c8416 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/553/ForwardingRuleIdTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/553/ForwardingRuleIdTest.java\n@@ -31,12 +31,11 @@ public class ForwardingRuleIdTest {\n   private static final String PROJECT = \"project\";\n   private static final String REGION = \"region\";\n   private static final String NAME = \"rule\";\n-  private static final String GLOBAL_URL =\n-      \"https://www.googleapis.com/compute/v1/projects/project/global/forwardingRules/rule\";\n+  private static final String GLOBAL_URL = \"https://www.googleapis.com/compute/v1/projects/project/global/forwardingRules/rule\";\n   private static final String REGION_URL = \"https://www.googleapis.com/compute/v1/projects/\"\n       + \"project/regions/region/forwardingRules/rule\";\n \n-  @Rule\n+@Rule\n   public ExpectedException thrown = ExpectedException.none();\n \n   @Test\n@@ -127,4 +126,4 @@ public class ForwardingRuleIdTest {\n     assertEquals(expected.selfLink(), expected.selfLink());\n     assertEquals(expected.hashCode(), expected.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/553/ForwardingRuleIdTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/553/ForwardingRuleIdTest.java\nindex e15059623fa..b742c8b2160 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/553/ForwardingRuleIdTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/553/ForwardingRuleIdTest.java\n@@ -26,15 +26,14 @@ import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n+\n public class ForwardingRuleIdTest {\n \n   private static final String PROJECT = \"project\";\n   private static final String REGION = \"region\";\n   private static final String NAME = \"rule\";\n-  private static final String GLOBAL_URL =\n-      \"https://www.googleapis.com/compute/v1/projects/project/global/forwardingRules/rule\";\n-  private static final String REGION_URL = \"https://www.googleapis.com/compute/v1/projects/\"\n-      + \"project/regions/region/forwardingRules/rule\";\n+  private static final String GLOBAL_URL = \"https://www.googleapis.com/compute/v1/projects/project/global/forwardingRules/rule\";\n+  private static final String REGION_URL = \"https://www.googleapis.com/compute/v1/projects/\" + \"project/regions/region/forwardingRules/rule\";\n \n   @Rule\n   public ExpectedException thrown = ExpectedException.none();\n@@ -50,8 +49,7 @@ public class ForwardingRuleIdTest {\n     assertNull(forwardingRuleId.project());\n     assertEquals(NAME, forwardingRuleId.rule());\n     assertEquals(ForwardingRuleId.Type.GLOBAL, forwardingRuleId.type());\n-    RegionForwardingRuleId regionForwardingRuleId =\n-        RegionForwardingRuleId.of(PROJECT, REGION, NAME);\n+    RegionForwardingRuleId regionForwardingRuleId = RegionForwardingRuleId.of(PROJECT, REGION, NAME);\n     assertEquals(PROJECT, regionForwardingRuleId.project());\n     assertEquals(REGION, regionForwardingRuleId.region());\n     assertEquals(NAME, regionForwardingRuleId.rule());\n@@ -73,28 +71,22 @@ public class ForwardingRuleIdTest {\n   @Test\n   public void testToAndFromUrl() {\n     GlobalForwardingRuleId forwardingRuleId = GlobalForwardingRuleId.of(PROJECT, NAME);\n-    compareGlobalForwardingRuleId(forwardingRuleId,\n-        GlobalForwardingRuleId.fromUrl(forwardingRuleId.selfLink()));\n-    RegionForwardingRuleId regionForwardingRuleId =\n-        RegionForwardingRuleId.of(PROJECT, REGION, NAME);\n-    compareRegionForwardingRuleId(regionForwardingRuleId,\n-        RegionForwardingRuleId.fromUrl(regionForwardingRuleId.selfLink()));\n+    compareGlobalForwardingRuleId(forwardingRuleId, GlobalForwardingRuleId.fromUrl(forwardingRuleId.selfLink()));\n+    RegionForwardingRuleId regionForwardingRuleId = RegionForwardingRuleId.of(PROJECT, REGION, NAME);\n+    compareRegionForwardingRuleId(regionForwardingRuleId, RegionForwardingRuleId.fromUrl(regionForwardingRuleId.selfLink()));\n   }\n \n   @Test\n   public void testSetProjectId() {\n     GlobalForwardingRuleId forwardingRuleId = GlobalForwardingRuleId.of(PROJECT, NAME);\n     assertSame(forwardingRuleId, forwardingRuleId.setProjectId(PROJECT));\n-    compareGlobalForwardingRuleId(forwardingRuleId,\n-        GlobalForwardingRuleId.of(NAME).setProjectId(PROJECT));\n+    compareGlobalForwardingRuleId(forwardingRuleId, GlobalForwardingRuleId.of(NAME).setProjectId(PROJECT));\n     thrown.expect(IllegalArgumentException.class);\n     thrown.expectMessage(\"notMatchingUrl is not a valid global forwarding rule URL\");\n     GlobalForwardingRuleId.fromUrl(\"notMatchingUrl\");\n-    RegionForwardingRuleId regionForwardingRuleId =\n-        RegionForwardingRuleId.of(PROJECT, REGION, NAME);\n+    RegionForwardingRuleId regionForwardingRuleId = RegionForwardingRuleId.of(PROJECT, REGION, NAME);\n     assertSame(regionForwardingRuleId, regionForwardingRuleId.setProjectId(PROJECT));\n-    compareRegionForwardingRuleId(regionForwardingRuleId,\n-        RegionForwardingRuleId.of(REGION, NAME).setProjectId(PROJECT));\n+    compareRegionForwardingRuleId(regionForwardingRuleId, RegionForwardingRuleId.of(REGION, NAME).setProjectId(PROJECT));\n     thrown.expect(IllegalArgumentException.class);\n     thrown.expectMessage(\"notMatchingUrl is not a valid region forwarding rule URL\");\n     RegionForwardingRuleId.fromUrl(\"notMatchingUrl\");\n@@ -104,13 +96,11 @@ public class ForwardingRuleIdTest {\n   public void testMatchesUrl() {\n     assertTrue(GlobalForwardingRuleId.matchesUrl(GlobalForwardingRuleId.of(PROJECT, NAME).selfLink()));\n     assertFalse(GlobalForwardingRuleId.matchesUrl(\"notMatchingUrl\"));\n-    assertTrue(RegionForwardingRuleId.matchesUrl(\n-        RegionForwardingRuleId.of(PROJECT, REGION, NAME).selfLink()));\n+    assertTrue(RegionForwardingRuleId.matchesUrl(RegionForwardingRuleId.of(PROJECT, REGION, NAME).selfLink()));\n     assertFalse(RegionForwardingRuleId.matchesUrl(\"notMatchingUrl\"));\n   }\n \n-  private void compareGlobalForwardingRuleId(GlobalForwardingRuleId expected,\n-      GlobalForwardingRuleId value) {\n+  private void compareGlobalForwardingRuleId(GlobalForwardingRuleId expected, GlobalForwardingRuleId value) {\n     assertEquals(expected, value);\n     assertEquals(expected.project(), expected.project());\n     assertEquals(expected.rule(), expected.rule());\n@@ -118,8 +108,7 @@ public class ForwardingRuleIdTest {\n     assertEquals(expected.hashCode(), expected.hashCode());\n   }\n \n-  private void compareRegionForwardingRuleId(RegionForwardingRuleId expected,\n-      RegionForwardingRuleId value) {\n+  private void compareRegionForwardingRuleId(RegionForwardingRuleId expected, RegionForwardingRuleId value) {\n     assertEquals(expected, value);\n     assertEquals(expected.project(), expected.project());\n     assertEquals(expected.region(), expected.region());\n@@ -127,4 +116,4 @@ public class ForwardingRuleIdTest {\n     assertEquals(expected.selfLink(), expected.selfLink());\n     assertEquals(expected.hashCode(), expected.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}