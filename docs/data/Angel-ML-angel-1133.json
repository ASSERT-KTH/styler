{
    "project_name": "Angel-ML-angel",
    "error_id": "1133",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1133/SerdeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1133/SerdeUtils.java\nindex 36a55ea1218..2f0fcef0dd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1133/SerdeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1133/SerdeUtils.java\n@@ -37,7 +37,8 @@ public class SerdeUtils {\n   private static SerializationFactory factory;\n \n   public static SplitClassification deSerilizeSplitProtos(List<SplitInfoProto> splitInfoList,\n-      Configuration conf) throws ClassNotFoundException, IOException {\n+                                                          Configuration conf)\n+      throws ClassNotFoundException, IOException {\n     boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n     if (isUseNewAPI) {\n       List<org.apache.hadoop.mapreduce.InputSplit> splitList =\n@@ -65,7 +66,7 @@ public class SerdeUtils {\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   public static SplitInfo serilizeSplit(org.apache.hadoop.mapreduce.InputSplit split,\n-      Configuration conf) throws IOException {\n+                                        Configuration conf) throws IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n@@ -84,7 +85,7 @@ public class SerdeUtils {\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   public static SplitInfo serilizeSplit(org.apache.hadoop.mapred.InputSplit split,\n-      Configuration conf) throws IOException {\n+                                        Configuration conf) throws IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n@@ -122,7 +123,8 @@ public class SerdeUtils {\n \n   @SuppressWarnings(\"unchecked\")\n   public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(SplitInfo splitInfo,\n-      Configuration conf) throws IOException, ClassNotFoundException {\n+                                                                          Configuration conf)\n+      throws IOException, ClassNotFoundException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n@@ -146,7 +148,8 @@ public class SerdeUtils {\n \n   @SuppressWarnings(\"unchecked\")\n   public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(SplitInfo splitInfo,\n-      Configuration conf) throws ClassNotFoundException, IOException {\n+                                                                       Configuration conf)\n+      throws ClassNotFoundException, IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n@@ -168,7 +171,8 @@ public class SerdeUtils {\n   }\n \n   public static SplitClassification deSerilizeSplits(List<SplitInfo> splitInfoList,\n-      Configuration conf) throws ClassNotFoundException, IOException {\n+                                                     Configuration conf)\n+      throws ClassNotFoundException, IOException {\n     boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n     if (isUseNewAPI) {\n       List<org.apache.hadoop.mapreduce.InputSplit> splitList =\n@@ -193,7 +197,9 @@ public class SerdeUtils {\n \n   @SuppressWarnings(\"unchecked\")\n   public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(String className,\n-      byte[] data, Configuration conf) throws IOException, ClassNotFoundException {\n+                                                                          byte[] data,\n+                                                                          Configuration conf)\n+      throws IOException, ClassNotFoundException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n@@ -217,7 +223,9 @@ public class SerdeUtils {\n \n   @SuppressWarnings(\"unchecked\")\n   public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(String className,\n-      byte[] data, Configuration conf) throws ClassNotFoundException, IOException {\n+                                                                       byte[] data,\n+                                                                       Configuration conf)\n+      throws ClassNotFoundException, IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1133/SerdeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1133/SerdeUtils.java\nindex 36a55ea1218..38e732cb980 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1133/SerdeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1133/SerdeUtils.java\n@@ -38,7 +38,8 @@ public class SerdeUtils {\n \n   public static SplitClassification deSerilizeSplitProtos(List<SplitInfoProto> splitInfoList,\n       Configuration conf) throws ClassNotFoundException, IOException {\n-    boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n+\n+  boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n     if (isUseNewAPI) {\n       List<org.apache.hadoop.mapreduce.InputSplit> splitList =\n           new ArrayList<org.apache.hadoop.mapreduce.InputSplit>();\n@@ -62,16 +63,14 @@ public class SerdeUtils {\n     }\n   }\n \n-\n-  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+@SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   public static SplitInfo serilizeSplit(org.apache.hadoop.mapreduce.InputSplit split,\n       Configuration conf) throws IOException {\n-    if (factory == null) {\n+  if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n     DataOutputBuffer out = new DataOutputBuffer(1024);\n-\n-    try {\n+try {\n       Serializer serializer = factory.getSerializer(split.getClass());\n       serializer.open(out);\n       serializer.serialize(split);\n@@ -85,12 +84,11 @@ public class SerdeUtils {\n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   public static SplitInfo serilizeSplit(org.apache.hadoop.mapred.InputSplit split,\n       Configuration conf) throws IOException {\n-    if (factory == null) {\n+  if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n     DataOutputBuffer out = new DataOutputBuffer(1024);\n-\n-    try {\n+try {\n       Serializer serializer = factory.getSerializer(split.getClass());\n       serializer.open(out);\n       serializer.serialize(split);\n@@ -103,8 +101,7 @@ public class SerdeUtils {\n \n   public static List<SplitInfo> serilizeSplits(SplitClassification splits, Configuration conf)\n       throws IOException {\n-\n-    List<SplitInfo> splitInfoList = new ArrayList<SplitInfo>();\n+  List<SplitInfo> splitInfoList = new ArrayList<SplitInfo>();\n     if (splits.isUseNewAPI()) {\n       List<org.apache.hadoop.mapreduce.InputSplit> splitList = splits.getSplitsNewAPI();\n       for (org.apache.hadoop.mapreduce.InputSplit split : splitList) {\n@@ -123,17 +120,15 @@ public class SerdeUtils {\n   @SuppressWarnings(\"unchecked\")\n   public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(SplitInfo splitInfo,\n       Configuration conf) throws IOException, ClassNotFoundException {\n-    if (factory == null) {\n+  if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n-    try {\n+try {\n       Deserializer<? extends org.apache.hadoop.mapreduce.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class\n-              .forName(splitInfo.getSplitClass()));\n-      in = new ByteArrayInputStream(splitInfo.getSplit());\n+          factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class.forName(splitInfo.getSplitClass()));\n+in = new ByteArrayInputStream(splitInfo.getSplit());\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n     } finally {\n@@ -147,17 +142,15 @@ public class SerdeUtils {\n   @SuppressWarnings(\"unchecked\")\n   public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(SplitInfo splitInfo,\n       Configuration conf) throws ClassNotFoundException, IOException {\n-    if (factory == null) {\n+  if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n-    try {\n+try {\n       Deserializer<? extends org.apache.hadoop.mapred.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class\n-              .forName(splitInfo.getSplitClass()));\n-      in = new ByteArrayInputStream(splitInfo.getSplit());\n+          factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class.forName(splitInfo.getSplitClass()));\n+in = new ByteArrayInputStream(splitInfo.getSplit());\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n     } finally {\n@@ -169,7 +162,8 @@ public class SerdeUtils {\n \n   public static SplitClassification deSerilizeSplits(List<SplitInfo> splitInfoList,\n       Configuration conf) throws ClassNotFoundException, IOException {\n-    boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n+\n+  boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n     if (isUseNewAPI) {\n       List<org.apache.hadoop.mapreduce.InputSplit> splitList =\n           new ArrayList<org.apache.hadoop.mapreduce.InputSplit>();\n@@ -192,19 +186,16 @@ public class SerdeUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(String className,\n-      byte[] data, Configuration conf) throws IOException, ClassNotFoundException {\n-    if (factory == null) {\n+  public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(String className, byte[] data, Configuration conf) throws IOException, ClassNotFoundException {\n+  if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n-    try {\n+try {\n       Deserializer<? extends org.apache.hadoop.mapreduce.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class\n-              .forName(className));\n-      in = new ByteArrayInputStream(data);\n+          factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class.forName(className));\n+in = new ByteArrayInputStream(data);\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n     } finally {\n@@ -216,19 +207,16 @@ public class SerdeUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(String className,\n-      byte[] data, Configuration conf) throws ClassNotFoundException, IOException {\n-    if (factory == null) {\n+  public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(String className, byte[] data, Configuration conf) throws ClassNotFoundException, IOException {\n+  if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n-    try {\n+try {\n       Deserializer<? extends org.apache.hadoop.mapred.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class\n-              .forName(className));\n-      in = new ByteArrayInputStream(data);\n+          factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class.forName(className));\n+in = new ByteArrayInputStream(data);\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n     } finally {\n@@ -237,4 +225,4 @@ public class SerdeUtils {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1133/SerdeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1133/SerdeUtils.java\nindex 36a55ea1218..8421eb9402c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1133/SerdeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1133/SerdeUtils.java\n@@ -24,7 +24,6 @@ import org.apache.hadoop.io.DataOutputBuffer;\n import org.apache.hadoop.io.serializer.Deserializer;\n import org.apache.hadoop.io.serializer.SerializationFactory;\n import org.apache.hadoop.io.serializer.Serializer;\n-\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n@@ -33,28 +32,25 @@ import java.util.List;\n /**\n  * Serialize/Deserialize tool for training data split.\n  */\n+\n public class SerdeUtils {\n+\n   private static SerializationFactory factory;\n \n-  public static SplitClassification deSerilizeSplitProtos(List<SplitInfoProto> splitInfoList,\n-      Configuration conf) throws ClassNotFoundException, IOException {\n+  public static SplitClassification deSerilizeSplitProtos(List<SplitInfoProto> splitInfoList, Configuration conf) throws ClassNotFoundException, IOException {\n     boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n     if (isUseNewAPI) {\n-      List<org.apache.hadoop.mapreduce.InputSplit> splitList =\n-          new ArrayList<org.apache.hadoop.mapreduce.InputSplit>();\n+      List<org.apache.hadoop.mapreduce.InputSplit> splitList = new ArrayList<org.apache.hadoop.mapreduce.InputSplit>();\n       for (SplitInfoProto splitInfo : splitInfoList) {\n-        splitList.add(deSerilizeNewSplit(splitInfo.getSplitClass(), splitInfo.getSplit()\n-            .toByteArray(), conf));\n+        splitList.add(deSerilizeNewSplit(splitInfo.getSplitClass(), splitInfo.getSplit().toByteArray(), conf));\n       }\n \n       SplitClassification splits = new SplitClassification(null, splitList, true);\n       return splits;\n     } else {\n-      List<org.apache.hadoop.mapred.InputSplit> splitList =\n-          new ArrayList<org.apache.hadoop.mapred.InputSplit>();\n+      List<org.apache.hadoop.mapred.InputSplit> splitList = new ArrayList<org.apache.hadoop.mapred.InputSplit>();\n       for (SplitInfoProto splitInfo : splitInfoList) {\n-        splitList.add(deSerilizeOldSplit(splitInfo.getSplitClass(), splitInfo.getSplit()\n-            .toByteArray(), conf));\n+        splitList.add(deSerilizeOldSplit(splitInfo.getSplitClass(), splitInfo.getSplit().toByteArray(), conf));\n       }\n \n       SplitClassification splits = new SplitClassification(splitList, null, true);\n@@ -62,15 +58,13 @@ public class SerdeUtils {\n     }\n   }\n \n-\n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  public static SplitInfo serilizeSplit(org.apache.hadoop.mapreduce.InputSplit split,\n-      Configuration conf) throws IOException {\n+  public static SplitInfo serilizeSplit(org.apache.hadoop.mapreduce.InputSplit split, Configuration conf) throws IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n-    DataOutputBuffer out = new DataOutputBuffer(1024);\n \n+    DataOutputBuffer out = new DataOutputBuffer(1024);\n     try {\n       Serializer serializer = factory.getSerializer(split.getClass());\n       serializer.open(out);\n@@ -83,13 +77,12 @@ public class SerdeUtils {\n   }\n \n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-  public static SplitInfo serilizeSplit(org.apache.hadoop.mapred.InputSplit split,\n-      Configuration conf) throws IOException {\n+  public static SplitInfo serilizeSplit(org.apache.hadoop.mapred.InputSplit split, Configuration conf) throws IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n-    DataOutputBuffer out = new DataOutputBuffer(1024);\n \n+    DataOutputBuffer out = new DataOutputBuffer(1024);\n     try {\n       Serializer serializer = factory.getSerializer(split.getClass());\n       serializer.open(out);\n@@ -101,9 +94,7 @@ public class SerdeUtils {\n     }\n   }\n \n-  public static List<SplitInfo> serilizeSplits(SplitClassification splits, Configuration conf)\n-      throws IOException {\n-\n+  public static List<SplitInfo> serilizeSplits(SplitClassification splits, Configuration conf) throws IOException {\n     List<SplitInfo> splitInfoList = new ArrayList<SplitInfo>();\n     if (splits.isUseNewAPI()) {\n       List<org.apache.hadoop.mapreduce.InputSplit> splitList = splits.getSplitsNewAPI();\n@@ -116,23 +107,18 @@ public class SerdeUtils {\n         splitInfoList.add(serilizeSplit(split, conf));\n       }\n     }\n-\n     return splitInfoList;\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(SplitInfo splitInfo,\n-      Configuration conf) throws IOException, ClassNotFoundException {\n+  public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(SplitInfo splitInfo, Configuration conf) throws IOException, ClassNotFoundException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n     try {\n-      Deserializer<? extends org.apache.hadoop.mapreduce.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class\n-              .forName(splitInfo.getSplitClass()));\n+      Deserializer<? extends org.apache.hadoop.mapreduce.InputSplit> deSerializer = factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class.forName(splitInfo.getSplitClass()));\n       in = new ByteArrayInputStream(splitInfo.getSplit());\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n@@ -141,22 +127,17 @@ public class SerdeUtils {\n         in.close();\n       }\n     }\n-\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(SplitInfo splitInfo,\n-      Configuration conf) throws ClassNotFoundException, IOException {\n+  public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(SplitInfo splitInfo, Configuration conf) throws ClassNotFoundException, IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n     try {\n-      Deserializer<? extends org.apache.hadoop.mapred.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class\n-              .forName(splitInfo.getSplitClass()));\n+      Deserializer<? extends org.apache.hadoop.mapred.InputSplit> deSerializer = factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class.forName(splitInfo.getSplitClass()));\n       in = new ByteArrayInputStream(splitInfo.getSplit());\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n@@ -167,12 +148,10 @@ public class SerdeUtils {\n     }\n   }\n \n-  public static SplitClassification deSerilizeSplits(List<SplitInfo> splitInfoList,\n-      Configuration conf) throws ClassNotFoundException, IOException {\n+  public static SplitClassification deSerilizeSplits(List<SplitInfo> splitInfoList, Configuration conf) throws ClassNotFoundException, IOException {\n     boolean isUseNewAPI = conf.getBoolean(\"mapred.mapper.new-api\", false);\n     if (isUseNewAPI) {\n-      List<org.apache.hadoop.mapreduce.InputSplit> splitList =\n-          new ArrayList<org.apache.hadoop.mapreduce.InputSplit>();\n+      List<org.apache.hadoop.mapreduce.InputSplit> splitList = new ArrayList<org.apache.hadoop.mapreduce.InputSplit>();\n       for (SplitInfo splitInfo : splitInfoList) {\n         splitList.add(deSerilizeNewSplit(splitInfo, conf));\n       }\n@@ -180,8 +159,7 @@ public class SerdeUtils {\n       SplitClassification splits = new SplitClassification(null, splitList, true);\n       return splits;\n     } else {\n-      List<org.apache.hadoop.mapred.InputSplit> splitList =\n-          new ArrayList<org.apache.hadoop.mapred.InputSplit>();\n+      List<org.apache.hadoop.mapred.InputSplit> splitList = new ArrayList<org.apache.hadoop.mapred.InputSplit>();\n       for (SplitInfo splitInfo : splitInfoList) {\n         splitList.add(deSerilizeOldSplit(splitInfo, conf));\n       }\n@@ -192,18 +170,15 @@ public class SerdeUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(String className,\n-      byte[] data, Configuration conf) throws IOException, ClassNotFoundException {\n+  public static org.apache.hadoop.mapreduce.InputSplit deSerilizeNewSplit(\n+    String className, byte[] data, Configuration conf) throws IOException, ClassNotFoundException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n     try {\n-      Deserializer<? extends org.apache.hadoop.mapreduce.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class\n-              .forName(className));\n+      Deserializer<? extends org.apache.hadoop.mapreduce.InputSplit> deSerializer = factory.getDeserializer((Class<? extends org.apache.hadoop.mapreduce.InputSplit>) Class.forName(className));\n       in = new ByteArrayInputStream(data);\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n@@ -212,22 +187,18 @@ public class SerdeUtils {\n         in.close();\n       }\n     }\n-\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(String className,\n-      byte[] data, Configuration conf) throws ClassNotFoundException, IOException {\n+  public static org.apache.hadoop.mapred.InputSplit deSerilizeOldSplit(\n+    String className, byte[] data, Configuration conf) throws ClassNotFoundException, IOException {\n     if (factory == null) {\n       factory = new SerializationFactory(conf);\n     }\n \n     ByteArrayInputStream in = null;\n-\n     try {\n-      Deserializer<? extends org.apache.hadoop.mapred.InputSplit> deSerializer =\n-          factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class\n-              .forName(className));\n+      Deserializer<? extends org.apache.hadoop.mapred.InputSplit> deSerializer = factory.getDeserializer((Class<? extends org.apache.hadoop.mapred.InputSplit>) Class.forName(className));\n       in = new ByteArrayInputStream(data);\n       deSerializer.open(in);\n       return deSerializer.deserialize(null);\n@@ -237,4 +208,4 @@ public class SerdeUtils {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}