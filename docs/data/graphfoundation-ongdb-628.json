{
    "project_name": "graphfoundation-ongdb",
    "error_id": "628",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/628/RaftState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/628/RaftState.java\nindex 796d554809c..aaaea1bfc03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/628/RaftState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/628/RaftState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus.state;\n \n import java.io.IOException;\n@@ -40,289 +41,289 @@ import org.neo4j.logging.LogProvider;\n \n public class RaftState implements ReadableRaftState\n {\n-    private final MemberId myself;\n-    private final StateStorage<TermState> termStorage;\n-    private final StateStorage<VoteState> voteStorage;\n-    private final RaftMembership membership;\n-    private final Log log;\n-    private final RaftLog entryLog;\n-    private final InFlightCache inFlightCache;\n-    private final boolean supportPreVoting;\n-\n-    private TermState termState;\n-    private VoteState voteState;\n-\n-    private MemberId leader;\n-    private LeaderInfo leaderInfo = LeaderInfo.INITIAL;\n-    private Set<MemberId> votesForMe = new HashSet<>();\n-    private Set<MemberId> preVotesForMe = new HashSet<>();\n-    private Set<MemberId> heartbeatResponses = new HashSet<>();\n-    private FollowerStates<MemberId> followerStates = new FollowerStates<>();\n-    private long leaderCommit = -1;\n-    private long commitIndex = -1;\n-    private long lastLogIndexBeforeWeBecameLeader = -1;\n-    private boolean isPreElection;\n-    private final boolean refuseToBeLeader;\n-\n-    public RaftState( MemberId myself,\n-                      StateStorage<TermState> termStorage,\n-                      RaftMembership membership,\n-                      RaftLog entryLog,\n-                      StateStorage<VoteState> voteStorage,\n-                      InFlightCache inFlightCache, LogProvider logProvider, boolean supportPreVoting,\n-                      boolean refuseToBeLeader\n-            )\n+  private final MemberId myself;\n+  private final StateStorage<TermState> termStorage;\n+  private final StateStorage<VoteState> voteStorage;\n+  private final RaftMembership membership;\n+  private final Log log;\n+  private final RaftLog entryLog;\n+  private final InFlightCache inFlightCache;\n+  private final boolean supportPreVoting;\n+\n+  private TermState termState;\n+  private VoteState voteState;\n+\n+  private MemberId leader;\n+  private LeaderInfo leaderInfo = LeaderInfo.INITIAL;\n+  private Set<MemberId> votesForMe = new HashSet<>();\n+  private Set<MemberId> preVotesForMe = new HashSet<>();\n+  private Set<MemberId> heartbeatResponses = new HashSet<>();\n+  private FollowerStates<MemberId> followerStates = new FollowerStates<>();\n+  private long leaderCommit = -1;\n+  private long commitIndex = -1;\n+  private long lastLogIndexBeforeWeBecameLeader = -1;\n+  private boolean isPreElection;\n+  private final boolean refuseToBeLeader;\n+\n+  public RaftState(MemberId myself,\n+                   StateStorage<TermState> termStorage,\n+                   RaftMembership membership,\n+                   RaftLog entryLog,\n+                   StateStorage<VoteState> voteStorage,\n+                   InFlightCache inFlightCache, LogProvider logProvider, boolean supportPreVoting,\n+                   boolean refuseToBeLeader\n+  )\n+  {\n+    this.myself = myself;\n+    this.termStorage = termStorage;\n+    this.voteStorage = voteStorage;\n+    this.membership = membership;\n+    this.entryLog = entryLog;\n+    this.inFlightCache = inFlightCache;\n+    this.supportPreVoting = supportPreVoting;\n+    this.log = logProvider.getLog(getClass());\n+\n+    // Initial state\n+    this.isPreElection = supportPreVoting;\n+    this.refuseToBeLeader = refuseToBeLeader;\n+  }\n+\n+  @Override\n+  public MemberId myself()\n+  {\n+    return myself;\n+  }\n+\n+  @Override\n+  public Set<MemberId> votingMembers()\n+  {\n+    return membership.votingMembers();\n+  }\n+\n+  @Override\n+  public Set<MemberId> replicationMembers()\n+  {\n+    return membership.replicationMembers();\n+  }\n+\n+  @Override\n+  public long term()\n+  {\n+    return termState().currentTerm();\n+  }\n+\n+  private TermState termState()\n+  {\n+    if (termState == null)\n     {\n-        this.myself = myself;\n-        this.termStorage = termStorage;\n-        this.voteStorage = voteStorage;\n-        this.membership = membership;\n-        this.entryLog = entryLog;\n-        this.inFlightCache = inFlightCache;\n-        this.supportPreVoting = supportPreVoting;\n-        this.log = logProvider.getLog( getClass() );\n-\n-        // Initial state\n-        this.isPreElection = supportPreVoting;\n-        this.refuseToBeLeader = refuseToBeLeader;\n+      termState = termStorage.getInitialState();\n     }\n-\n-    @Override\n-    public MemberId myself()\n+    return termState;\n+  }\n+\n+  @Override\n+  public MemberId leader()\n+  {\n+    return leader;\n+  }\n+\n+  @Override\n+  public LeaderInfo leaderInfo()\n+  {\n+    return leaderInfo;\n+  }\n+\n+  @Override\n+  public long leaderCommit()\n+  {\n+    return leaderCommit;\n+  }\n+\n+  @Override\n+  public MemberId votedFor()\n+  {\n+    return voteState().votedFor();\n+  }\n+\n+  private VoteState voteState()\n+  {\n+    if (voteState == null)\n     {\n-        return myself;\n+      voteState = voteStorage.getInitialState();\n     }\n-\n-    @Override\n-    public Set<MemberId> votingMembers()\n+    return voteState;\n+  }\n+\n+  @Override\n+  public Set<MemberId> votesForMe()\n+  {\n+    return votesForMe;\n+  }\n+\n+  @Override\n+  public Set<MemberId> heartbeatResponses()\n+  {\n+    return heartbeatResponses;\n+  }\n+\n+  @Override\n+  public long lastLogIndexBeforeWeBecameLeader()\n+  {\n+    return lastLogIndexBeforeWeBecameLeader;\n+  }\n+\n+  @Override\n+  public FollowerStates<MemberId> followerStates()\n+  {\n+    return followerStates;\n+  }\n+\n+  @Override\n+  public ReadableRaftLog entryLog()\n+  {\n+    return entryLog;\n+  }\n+\n+  @Override\n+  public long commitIndex()\n+  {\n+    return commitIndex;\n+  }\n+\n+  @Override\n+  public boolean supportPreVoting()\n+  {\n+    return supportPreVoting;\n+  }\n+\n+  @Override\n+  public boolean isPreElection()\n+  {\n+    return isPreElection;\n+  }\n+\n+  @Override\n+  public Set<MemberId> preVotesForMe()\n+  {\n+    return preVotesForMe;\n+  }\n+\n+  @Override\n+  public boolean refusesToBeLeader()\n+  {\n+    return refuseToBeLeader;\n+  }\n+\n+  public void update(Outcome outcome) throws IOException\n+  {\n+    if (termState().update(outcome.getTerm()))\n     {\n-        return membership.votingMembers();\n+      termStorage.persistStoreData(termState());\n     }\n-\n-    @Override\n-    public Set<MemberId> replicationMembers()\n+    if (voteState().update(outcome.getVotedFor(), outcome.getTerm()))\n     {\n-        return membership.replicationMembers();\n+      voteStorage.persistStoreData(voteState());\n     }\n \n-    @Override\n-    public long term()\n-    {\n-        return termState().currentTerm();\n-    }\n+    logIfLeaderChanged(outcome.getLeader());\n+    leader = outcome.getLeader();\n+    leaderInfo = new LeaderInfo(outcome.getLeader(), outcome.getTerm());\n \n-    private TermState termState()\n-    {\n-        if ( termState == null )\n-        {\n-            termState = termStorage.getInitialState();\n-        }\n-        return termState;\n-    }\n+    leaderCommit = outcome.getLeaderCommit();\n+    votesForMe = outcome.getVotesForMe();\n+    preVotesForMe = outcome.getPreVotesForMe();\n+    heartbeatResponses = outcome.getHeartbeatResponses();\n+    lastLogIndexBeforeWeBecameLeader = outcome.getLastLogIndexBeforeWeBecameLeader();\n+    followerStates = outcome.getFollowerStates();\n+    isPreElection = outcome.isPreElection();\n \n-    @Override\n-    public MemberId leader()\n+    for (RaftLogCommand logCommand : outcome.getLogCommands())\n     {\n-        return leader;\n+      logCommand.applyTo(entryLog, log);\n+      logCommand.applyTo(inFlightCache, log);\n     }\n+    commitIndex = outcome.getCommitIndex();\n+  }\n \n-    @Override\n-    public LeaderInfo leaderInfo()\n+  private void logIfLeaderChanged(MemberId leader)\n+  {\n+    if (this.leader == null)\n     {\n-        return leaderInfo;\n+      if (leader != null)\n+      {\n+        log.info(\"First leader elected: %s\", leader);\n+      }\n+      return;\n     }\n \n-    @Override\n-    public long leaderCommit()\n+    if (!this.leader.equals(leader))\n     {\n-        return leaderCommit;\n+      log.info(\"Leader changed from %s to %s\", this.leader, leader);\n     }\n+  }\n \n-    @Override\n-    public MemberId votedFor()\n-    {\n-        return voteState().votedFor();\n-    }\n+  public ExposedRaftState copy()\n+  {\n+    return new ReadOnlyRaftState(leaderCommit(), commitIndex(), entryLog().appendIndex(),\n+        lastLogIndexBeforeWeBecameLeader(), term(), votingMembers());\n+  }\n \n-    private VoteState voteState()\n-    {\n-        if ( voteState == null )\n-        {\n-            voteState = voteStorage.getInitialState();\n-        }\n-        return voteState;\n-    }\n+  private class ReadOnlyRaftState implements ExposedRaftState\n+  {\n \n-    @Override\n-    public Set<MemberId> votesForMe()\n-    {\n-        return votesForMe;\n-    }\n+    final long leaderCommit;\n+    final long commitIndex;\n+    final long appendIndex;\n+    final long lastLogIndexBeforeWeBecameLeader;\n+    final long term;\n \n-    @Override\n-    public Set<MemberId> heartbeatResponses()\n-    {\n-        return heartbeatResponses;\n-    }\n+    final Set<MemberId> votingMembers; // returned set is never mutated\n \n-    @Override\n-    public long lastLogIndexBeforeWeBecameLeader()\n+    private ReadOnlyRaftState(long leaderCommit, long commitIndex, long appendIndex,\n+                              long lastLogIndexBeforeWeBecameLeader, long term, Set<MemberId> votingMembers)\n     {\n-        return lastLogIndexBeforeWeBecameLeader;\n+      this.leaderCommit = leaderCommit;\n+      this.commitIndex = commitIndex;\n+      this.appendIndex = appendIndex;\n+      this.lastLogIndexBeforeWeBecameLeader = lastLogIndexBeforeWeBecameLeader;\n+      this.term = term;\n+      this.votingMembers = votingMembers;\n     }\n \n     @Override\n-    public FollowerStates<MemberId> followerStates()\n+    public long lastLogIndexBeforeWeBecameLeader()\n     {\n-        return followerStates;\n+      return lastLogIndexBeforeWeBecameLeader;\n     }\n \n     @Override\n-    public ReadableRaftLog entryLog()\n+    public long leaderCommit()\n     {\n-        return entryLog;\n+      return this.leaderCommit;\n     }\n \n     @Override\n     public long commitIndex()\n     {\n-        return commitIndex;\n+      return this.commitIndex;\n     }\n \n     @Override\n-    public boolean supportPreVoting()\n+    public long appendIndex()\n     {\n-        return supportPreVoting;\n+      return this.appendIndex;\n     }\n \n     @Override\n-    public boolean isPreElection()\n-    {\n-        return isPreElection;\n-    }\n-\n-    @Override\n-    public Set<MemberId> preVotesForMe()\n+    public long term()\n     {\n-        return preVotesForMe;\n+      return this.term;\n     }\n \n     @Override\n-    public boolean refusesToBeLeader()\n-    {\n-        return refuseToBeLeader;\n-    }\n-\n-    public void update( Outcome outcome ) throws IOException\n-    {\n-        if ( termState().update( outcome.getTerm() ) )\n-        {\n-            termStorage.persistStoreData( termState() );\n-        }\n-        if ( voteState().update( outcome.getVotedFor(), outcome.getTerm() ) )\n-        {\n-            voteStorage.persistStoreData( voteState() );\n-        }\n-\n-        logIfLeaderChanged( outcome.getLeader() );\n-        leader = outcome.getLeader();\n-        leaderInfo = new LeaderInfo( outcome.getLeader(), outcome.getTerm() );\n-\n-        leaderCommit = outcome.getLeaderCommit();\n-        votesForMe = outcome.getVotesForMe();\n-        preVotesForMe = outcome.getPreVotesForMe();\n-        heartbeatResponses = outcome.getHeartbeatResponses();\n-        lastLogIndexBeforeWeBecameLeader = outcome.getLastLogIndexBeforeWeBecameLeader();\n-        followerStates = outcome.getFollowerStates();\n-        isPreElection = outcome.isPreElection();\n-\n-        for ( RaftLogCommand logCommand : outcome.getLogCommands() )\n-        {\n-            logCommand.applyTo( entryLog, log );\n-            logCommand.applyTo( inFlightCache, log );\n-        }\n-        commitIndex = outcome.getCommitIndex();\n-    }\n-\n-    private void logIfLeaderChanged( MemberId leader )\n-    {\n-        if ( this.leader == null )\n-        {\n-            if ( leader != null )\n-            {\n-                log.info( \"First leader elected: %s\", leader );\n-            }\n-            return;\n-        }\n-\n-        if ( !this.leader.equals( leader ) )\n-        {\n-            log.info( \"Leader changed from %s to %s\", this.leader, leader );\n-        }\n-    }\n-\n-    public ExposedRaftState copy()\n-    {\n-        return new ReadOnlyRaftState( leaderCommit(), commitIndex(), entryLog().appendIndex(),\n-                lastLogIndexBeforeWeBecameLeader(), term(), votingMembers() );\n-    }\n-\n-    private class ReadOnlyRaftState implements ExposedRaftState\n+    public Set<MemberId> votingMembers()\n     {\n-\n-        final long leaderCommit;\n-        final long commitIndex;\n-        final long appendIndex;\n-        final long lastLogIndexBeforeWeBecameLeader;\n-        final long term;\n-\n-        final Set<MemberId> votingMembers; // returned set is never mutated\n-\n-        private ReadOnlyRaftState( long leaderCommit, long commitIndex, long appendIndex,\n-                long lastLogIndexBeforeWeBecameLeader, long term, Set<MemberId> votingMembers )\n-        {\n-            this.leaderCommit = leaderCommit;\n-            this.commitIndex = commitIndex;\n-            this.appendIndex = appendIndex;\n-            this.lastLogIndexBeforeWeBecameLeader = lastLogIndexBeforeWeBecameLeader;\n-            this.term = term;\n-            this.votingMembers = votingMembers;\n-        }\n-\n-        @Override\n-        public long lastLogIndexBeforeWeBecameLeader()\n-        {\n-            return lastLogIndexBeforeWeBecameLeader;\n-        }\n-\n-        @Override\n-        public long leaderCommit()\n-        {\n-            return this.leaderCommit;\n-        }\n-\n-        @Override\n-        public long commitIndex()\n-        {\n-            return this.commitIndex;\n-        }\n-\n-        @Override\n-        public long appendIndex()\n-        {\n-            return this.appendIndex;\n-        }\n-\n-        @Override\n-        public long term()\n-        {\n-            return this.term;\n-        }\n-\n-        @Override\n-        public Set<MemberId> votingMembers()\n-        {\n-            return this.votingMembers;\n-        }\n+      return this.votingMembers;\n     }\n+  }\n }\n",
            "diff_size": 382
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/628/RaftState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/628/RaftState.java\nindex 796d554809c..147bd3eec8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/628/RaftState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/628/RaftState.java\n@@ -64,15 +64,12 @@ public class RaftState implements ReadableRaftState\n     private boolean isPreElection;\n     private final boolean refuseToBeLeader;\n \n-    public RaftState( MemberId myself,\n-                      StateStorage<TermState> termStorage,\n+    public RaftState( MemberId myself, StateStorage<TermState> termStorage,\n                       RaftMembership membership,\n-                      RaftLog entryLog,\n-                      StateStorage<VoteState> voteStorage,\n+                      RaftLog entryLog, StateStorage<VoteState> voteStorage,\n                       InFlightCache inFlightCache, LogProvider logProvider, boolean supportPreVoting,\n-                      boolean refuseToBeLeader\n-            )\n-    {\n+                      boolean refuseToBeLeader )\n+{\n         this.myself = myself;\n         this.termStorage = termStorage;\n         this.voteStorage = voteStorage;\n@@ -117,7 +114,8 @@ public class RaftState implements ReadableRaftState\n         {\n             termState = termStorage.getInitialState();\n         }\n-        return termState;\n+\n+return termState;\n     }\n \n     @Override\n@@ -150,7 +148,8 @@ public class RaftState implements ReadableRaftState\n         {\n             voteState = voteStorage.getInitialState();\n         }\n-        return voteState;\n+\n+return voteState;\n     }\n \n     @Override\n@@ -219,7 +218,8 @@ public class RaftState implements ReadableRaftState\n         {\n             termStorage.persistStoreData( termState() );\n         }\n-        if ( voteState().update( outcome.getVotedFor(), outcome.getTerm() ) )\n+\n+if ( voteState().update( outcome.getVotedFor(), outcome.getTerm() ) )\n         {\n             voteStorage.persistStoreData( voteState() );\n         }\n@@ -227,21 +227,20 @@ public class RaftState implements ReadableRaftState\n         logIfLeaderChanged( outcome.getLeader() );\n         leader = outcome.getLeader();\n         leaderInfo = new LeaderInfo( outcome.getLeader(), outcome.getTerm() );\n-\n-        leaderCommit = outcome.getLeaderCommit();\n+leaderCommit = outcome.getLeaderCommit();\n         votesForMe = outcome.getVotesForMe();\n         preVotesForMe = outcome.getPreVotesForMe();\n         heartbeatResponses = outcome.getHeartbeatResponses();\n         lastLogIndexBeforeWeBecameLeader = outcome.getLastLogIndexBeforeWeBecameLeader();\n         followerStates = outcome.getFollowerStates();\n         isPreElection = outcome.isPreElection();\n-\n-        for ( RaftLogCommand logCommand : outcome.getLogCommands() )\n+for ( RaftLogCommand logCommand : outcome.getLogCommands() )\n         {\n             logCommand.applyTo( entryLog, log );\n             logCommand.applyTo( inFlightCache, log );\n         }\n-        commitIndex = outcome.getCommitIndex();\n+\n+commitIndex = outcome.getCommitIndex();\n     }\n \n     private void logIfLeaderChanged( MemberId leader )\n@@ -269,8 +268,7 @@ public class RaftState implements ReadableRaftState\n \n     private class ReadOnlyRaftState implements ExposedRaftState\n     {\n-\n-        final long leaderCommit;\n+    final long leaderCommit;\n         final long commitIndex;\n         final long appendIndex;\n         final long lastLogIndexBeforeWeBecameLeader;\n@@ -325,4 +323,4 @@ public class RaftState implements ReadableRaftState\n             return this.votingMembers;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}