{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1842",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1842/LuceneTimeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1842/LuceneTimeline.java\nindex 6d54993edff..ebc8361d6de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1842/LuceneTimeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1842/LuceneTimeline.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.lucene;\n \n import static java.lang.Long.MAX_VALUE;\n@@ -37,80 +38,80 @@ import org.neo4j.graphdb.index.IndexManager;\n \n public class LuceneTimeline<T extends PropertyContainer> implements TimelineIndex<T>\n {\n-    private static final String FIELD = \"timestamp\";\n-    private final Index<T> index;\n-\n-    public LuceneTimeline( GraphDatabaseService db, Index<T> index )\n-    {\n-        assertIsLuceneIndex( db, index );\n-        this.index = index;\n-    }\n-\n-    private void assertIsLuceneIndex( GraphDatabaseService db, Index<T> index )\n-    {\n-        Map<String, String> config = db.index().getConfiguration( index );\n-        if ( !config.get( IndexManager.PROVIDER ).equals( \"lucene\" ) ) // Not so hard coded please\n-        {\n-            throw new IllegalArgumentException( index + \" isn't a Lucene index\" );\n-        }\n-    }\n-\n-    private T getSingle( boolean reversed )\n-    {\n-        IndexHits<T> hits = index.query( sort( everythingQuery().top( 1 ), reversed ) );\n-        return hits.getSingle();\n-    }\n-\n-    private QueryContext everythingQuery()\n-    {\n-        return new QueryContext( newLongRange( FIELD, 0L, MAX_VALUE, true, true ) );\n-    }\n-\n-    private QueryContext rangeQuery( Long startTimestampOrNull, Long endTimestampOrNull )\n-    {\n-        long start = startTimestampOrNull != null ? startTimestampOrNull : -Long.MAX_VALUE;\n-        long end = endTimestampOrNull != null ? endTimestampOrNull : MAX_VALUE;\n-        return new QueryContext( newLongRange( FIELD, start, end, true, true ) );\n-    }\n-\n-    private QueryContext sort( QueryContext query, boolean reversed )\n-    {\n-        return query.sort( new Sort( new SortedNumericSortField( FIELD, SortField.Type.LONG, reversed ) ) );\n-    }\n-\n-    @Override\n-    public T getLast()\n-    {\n-        return getSingle( true );\n-    }\n-\n-    @Override\n-    public T getFirst()\n-    {\n-        return getSingle( false );\n-    }\n-\n-    @Override\n-    public void remove( T entity, long timestamp )\n-    {\n-        index.remove( entity, FIELD, timestamp );\n-    }\n-\n-    @Override\n-    public void add( T entity, long timestamp )\n-    {\n-        index.add( entity, FIELD, numeric( timestamp ) );\n-    }\n-\n-    @Override\n-    public IndexHits<T> getBetween( Long startTimestampOrNull, Long endTimestampOrNull )\n-    {\n-        return getBetween( startTimestampOrNull, endTimestampOrNull, false );\n-    }\n-\n-    @Override\n-    public IndexHits<T> getBetween( Long startTimestampOrNull, Long endTimestampOrNull, boolean reversed )\n+  private static final String FIELD = \"timestamp\";\n+  private final Index<T> index;\n+\n+  public LuceneTimeline(GraphDatabaseService db, Index<T> index)\n+  {\n+    assertIsLuceneIndex(db, index);\n+    this.index = index;\n+  }\n+\n+  private void assertIsLuceneIndex(GraphDatabaseService db, Index<T> index)\n+  {\n+    Map<String, String> config = db.index().getConfiguration(index);\n+    if (!config.get(IndexManager.PROVIDER).equals(\"lucene\")) // Not so hard coded please\n     {\n-        return index.query( sort( rangeQuery( startTimestampOrNull, endTimestampOrNull ), reversed ) );\n+      throw new IllegalArgumentException(index + \" isn't a Lucene index\");\n     }\n+  }\n+\n+  private T getSingle(boolean reversed)\n+  {\n+    IndexHits<T> hits = index.query(sort(everythingQuery().top(1), reversed));\n+    return hits.getSingle();\n+  }\n+\n+  private QueryContext everythingQuery()\n+  {\n+    return new QueryContext(newLongRange(FIELD, 0L, MAX_VALUE, true, true));\n+  }\n+\n+  private QueryContext rangeQuery(Long startTimestampOrNull, Long endTimestampOrNull)\n+  {\n+    long start = startTimestampOrNull != null ? startTimestampOrNull : -Long.MAX_VALUE;\n+    long end = endTimestampOrNull != null ? endTimestampOrNull : MAX_VALUE;\n+    return new QueryContext(newLongRange(FIELD, start, end, true, true));\n+  }\n+\n+  private QueryContext sort(QueryContext query, boolean reversed)\n+  {\n+    return query.sort(new Sort(new SortedNumericSortField(FIELD, SortField.Type.LONG, reversed)));\n+  }\n+\n+  @Override\n+  public T getLast()\n+  {\n+    return getSingle(true);\n+  }\n+\n+  @Override\n+  public T getFirst()\n+  {\n+    return getSingle(false);\n+  }\n+\n+  @Override\n+  public void remove(T entity, long timestamp)\n+  {\n+    index.remove(entity, FIELD, timestamp);\n+  }\n+\n+  @Override\n+  public void add(T entity, long timestamp)\n+  {\n+    index.add(entity, FIELD, numeric(timestamp));\n+  }\n+\n+  @Override\n+  public IndexHits<T> getBetween(Long startTimestampOrNull, Long endTimestampOrNull)\n+  {\n+    return getBetween(startTimestampOrNull, endTimestampOrNull, false);\n+  }\n+\n+  @Override\n+  public IndexHits<T> getBetween(Long startTimestampOrNull, Long endTimestampOrNull, boolean reversed)\n+  {\n+    return index.query(sort(rangeQuery(startTimestampOrNull, endTimestampOrNull), reversed));\n+  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1842/LuceneTimeline.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1842/LuceneTimeline.java\nindex 6d54993edff..2b6e2af2fbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1842/LuceneTimeline.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1842/LuceneTimeline.java\n@@ -48,7 +48,7 @@ public class LuceneTimeline<T extends PropertyContainer> implements TimelineInde\n \n     private void assertIsLuceneIndex( GraphDatabaseService db, Index<T> index )\n     {\n-        Map<String, String> config = db.index().getConfiguration( index );\n+        Map<String,String> config = db.index().getConfiguration( index );\n         if ( !config.get( IndexManager.PROVIDER ).equals( \"lucene\" ) ) // Not so hard coded please\n         {\n             throw new IllegalArgumentException( index + \" isn't a Lucene index\" );\n@@ -113,4 +113,4 @@ public class LuceneTimeline<T extends PropertyContainer> implements TimelineInde\n     {\n         return index.query( sort( rangeQuery( startTimestampOrNull, endTimestampOrNull ), reversed ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}