{
    "project_name": "neo4j-neo4j",
    "error_id": "1594",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "140",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "165",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "171",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "177",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "181",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "256",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "266",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "266",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "277",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "284",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "411",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "414",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "429",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1594/GenerationSafePointerPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1594/GenerationSafePointerPair.java\nindex a28c37da6b1..d309630037b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1594/GenerationSafePointerPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1594/GenerationSafePointerPair.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -98,29 +99,29 @@ class GenerationSafePointerPair\n     static final byte EMPTY = 4;      // generation and pointer all zeros\n \n     // Flags and failure information\n-    static final long FLAG_SUCCESS     = 0x00000000_00000000L;\n-    static final long FLAG_FAIL        = 0x80000000_00000000L;\n-    static final long FLAG_READ        = 0x00000000_00000000L;\n-    static final long FLAG_WRITE       = 0x40000000_00000000L;\n+    static final long FLAG_SUCCESS = 0x00000000_00000000L;\n+    static final long FLAG_FAIL = 0x80000000_00000000L;\n+    static final long FLAG_READ = 0x00000000_00000000L;\n+    static final long FLAG_WRITE = 0x40000000_00000000L;\n     static final long FLAG_GENERATION_EQUAL = 0x00000000_00000000L;\n     static final long FLAG_GENERATION_A_BIG = 0x08000000_00000000L;\n     static final long FLAG_GENERATION_B_BIG = 0x10000000_00000000L;\n-    static final long FLAG_SLOT_A      = 0x00000000_00000000L;\n-    static final long FLAG_SLOT_B      = 0x20000000_00000000L;\n-    static final int  SHIFT_STATE_A    = 56;\n-    static final int  SHIFT_STATE_B    = 53;\n+    static final long FLAG_SLOT_A = 0x00000000_00000000L;\n+    static final long FLAG_SLOT_B = 0x20000000_00000000L;\n+    static final int SHIFT_STATE_A = 56;\n+    static final int SHIFT_STATE_B = 53;\n \n     // Aggregations\n     static final long SUCCESS_WRITE_TO_B = FLAG_SUCCESS | FLAG_WRITE | FLAG_SLOT_B;\n     static final long SUCCESS_WRITE_TO_A = FLAG_SUCCESS | FLAG_WRITE | FLAG_SLOT_A;\n \n     // Masks\n-    static final long SUCCESS_MASK         = FLAG_SUCCESS | FLAG_FAIL;\n-    static final long READ_OR_WRITE_MASK   = FLAG_READ | FLAG_WRITE;\n-    static final long SLOT_MASK            = FLAG_SLOT_A | FLAG_SLOT_B;\n-    static final long STATE_MASK           = 0x7; // After shift\n+    static final long SUCCESS_MASK = FLAG_SUCCESS | FLAG_FAIL;\n+    static final long READ_OR_WRITE_MASK = FLAG_READ | FLAG_WRITE;\n+    static final long SLOT_MASK = FLAG_SLOT_A | FLAG_SLOT_B;\n+    static final long STATE_MASK = 0x7; // After shift\n     static final long GENERATION_COMPARISON_MASK = FLAG_GENERATION_EQUAL | FLAG_GENERATION_A_BIG | FLAG_GENERATION_B_BIG;\n-    static final long POINTER_MASK         = 0x0000FFFF_FFFFFFFFL;\n+    static final long POINTER_MASK = 0x0000FFFF_FFFFFFFFL;\n \n     private GenerationSafePointerPair()\n     {\n@@ -130,74 +131,69 @@ class GenerationSafePointerPair\n      * Reads a GSPP, returning the read pointer or a failure. Check success/failure using {@link #isSuccess(long)}\n      * and if failure extract more information using {@link #failureDescription(long)}.\n      *\n-     * @param cursor {@link PageCursor} to read from, placed at the beginning of the GSPP.\n-     * @param stableGeneration stable index generation.\n+     * @param cursor             {@link PageCursor} to read from, placed at the beginning of the GSPP.\n+     * @param stableGeneration   stable index generation.\n      * @param unstableGeneration unstable index generation.\n-     * @param generationTarget target to write the generation of the selected pointer.\n+     * @param generationTarget   target to write the generation of the selected pointer.\n      * @return most recent readable pointer, or failure. Check result using {@link #isSuccess(long)}.\n      */\n-    public static long read( PageCursor cursor, long stableGeneration, long unstableGeneration, GBPTreeGenerationTarget generationTarget )\n+    public static long read(PageCursor cursor, long stableGeneration, long unstableGeneration, GBPTreeGenerationTarget generationTarget)\n     {\n         // Try A\n-        long generationA = readGeneration( cursor );\n-        long pointerA = readPointer( cursor );\n-        short readChecksumA = readChecksum( cursor );\n-        short checksumA = checksumOf( generationA, pointerA );\n+        long generationA = readGeneration(cursor);\n+        long pointerA = readPointer(cursor);\n+        short readChecksumA = readChecksum(cursor);\n+        short checksumA = checksumOf(generationA, pointerA);\n         boolean correctChecksumA = readChecksumA == checksumA;\n \n         // Try B\n-        long generationB = readGeneration( cursor );\n-        long pointerB = readPointer( cursor );\n-        short readChecksumB = readChecksum( cursor );\n-        short checksumB = checksumOf( generationB, pointerB );\n+        long generationB = readGeneration(cursor);\n+        long pointerB = readPointer(cursor);\n+        short readChecksumB = readChecksum(cursor);\n+        short checksumB = checksumOf(generationB, pointerB);\n         boolean correctChecksumB = readChecksumB == checksumB;\n \n-        byte pointerStateA = pointerState( stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA );\n-        byte pointerStateB = pointerState( stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB );\n+        byte pointerStateA = pointerState(stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA);\n+        byte pointerStateB = pointerState(stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB);\n \n-        if ( pointerStateA == UNSTABLE )\n+        if (pointerStateA == UNSTABLE)\n         {\n-            if ( pointerStateB == STABLE || pointerStateB == EMPTY )\n+            if (pointerStateB == STABLE || pointerStateB == EMPTY)\n             {\n-                return buildSuccessfulReadResult( FLAG_SLOT_A, generationA, pointerA, generationTarget );\n+                return buildSuccessfulReadResult(FLAG_SLOT_A, generationA, pointerA, generationTarget);\n             }\n-        }\n-        else if ( pointerStateB == UNSTABLE )\n+        } else if (pointerStateB == UNSTABLE)\n         {\n-            if ( pointerStateA == STABLE || pointerStateA == EMPTY )\n+            if (pointerStateA == STABLE || pointerStateA == EMPTY)\n             {\n-                return buildSuccessfulReadResult( FLAG_SLOT_B, generationB, pointerB, generationTarget );\n+                return buildSuccessfulReadResult(FLAG_SLOT_B, generationB, pointerB, generationTarget);\n             }\n-        }\n-        else if ( pointerStateA == STABLE && pointerStateB == STABLE )\n+        } else if (pointerStateA == STABLE && pointerStateB == STABLE)\n         {\n             // compare generation\n-            if ( generationA > generationB )\n+            if (generationA > generationB)\n             {\n-                return buildSuccessfulReadResult( FLAG_SLOT_A, generationA, pointerA, generationTarget );\n-            }\n-            else if ( generationB > generationA )\n+                return buildSuccessfulReadResult(FLAG_SLOT_A, generationA, pointerA, generationTarget);\n+            } else if (generationB > generationA)\n             {\n-                return buildSuccessfulReadResult( FLAG_SLOT_B, generationB, pointerB, generationTarget );\n+                return buildSuccessfulReadResult(FLAG_SLOT_B, generationB, pointerB, generationTarget);\n             }\n-        }\n-        else if ( pointerStateA == STABLE )\n+        } else if (pointerStateA == STABLE)\n         {\n-            return buildSuccessfulReadResult( FLAG_SLOT_A, generationA, pointerA, generationTarget );\n-        }\n-        else if ( pointerStateB == STABLE )\n+            return buildSuccessfulReadResult(FLAG_SLOT_A, generationA, pointerA, generationTarget);\n+        } else if (pointerStateB == STABLE)\n         {\n-            return buildSuccessfulReadResult( FLAG_SLOT_B, generationB, pointerB, generationTarget );\n+            return buildSuccessfulReadResult(FLAG_SLOT_B, generationB, pointerB, generationTarget);\n         }\n \n-        generationTarget.accept( EMPTY_GENERATION );\n-        return FLAG_FAIL | FLAG_READ | generationState( generationA, generationB ) |\n-               ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n+        generationTarget.accept(EMPTY_GENERATION);\n+        return FLAG_FAIL | FLAG_READ | generationState(generationA, generationB) |\n+          ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n     }\n \n-    private static long buildSuccessfulReadResult( long slot, long generation, long pointer, GBPTreeGenerationTarget generationTarget )\n+    private static long buildSuccessfulReadResult(long slot, long generation, long pointer, GBPTreeGenerationTarget generationTarget)\n     {\n-        generationTarget.accept( generation );\n+        generationTarget.accept(generation);\n         return FLAG_SUCCESS | FLAG_READ | slot | pointer;\n     }\n \n@@ -206,106 +202,100 @@ class GenerationSafePointerPair\n      * Check success/failure using {@link #isSuccess(long)} and if failure extract more information using\n      * {@link #failureDescription(long)}.\n      *\n-     * @param cursor {@link PageCursor} to write to, placed at the beginning of the GSPP.\n-     * @param pointer pageId to write.\n-     * @param stableGeneration stable index generation.\n+     * @param cursor             {@link PageCursor} to write to, placed at the beginning of the GSPP.\n+     * @param pointer            pageId to write.\n+     * @param stableGeneration   stable index generation.\n      * @param unstableGeneration unstable index generation, which will be the generation to write in the slot.\n      * @return {@code true} on success, otherwise {@code false} on failure.\n      */\n-    public static long write( PageCursor cursor, long pointer, long stableGeneration, long unstableGeneration )\n+    public static long write(PageCursor cursor, long pointer, long stableGeneration, long unstableGeneration)\n     {\n         // Later there will be a selection which \"slot\" of GSP out of the two to write into.\n         int offset = cursor.getOffset();\n-        pointer = pointer( pointer );\n+        pointer = pointer(pointer);\n \n         // Try A\n-        long generationA = readGeneration( cursor );\n-        long pointerA = readPointer( cursor );\n-        short readChecksumA = readChecksum( cursor );\n-        short checksumA = checksumOf( generationA, pointerA );\n+        long generationA = readGeneration(cursor);\n+        long pointerA = readPointer(cursor);\n+        short readChecksumA = readChecksum(cursor);\n+        short checksumA = checksumOf(generationA, pointerA);\n         boolean correctChecksumA = readChecksumA == checksumA;\n \n         // Try B\n-        long generationB = readGeneration( cursor );\n-        long pointerB = readPointer( cursor );\n-        short readChecksumB = readChecksum( cursor );\n-        short checksumB = checksumOf( generationB, pointerB );\n+        long generationB = readGeneration(cursor);\n+        long pointerB = readPointer(cursor);\n+        short readChecksumB = readChecksum(cursor);\n+        short checksumB = checksumOf(generationB, pointerB);\n         boolean correctChecksumB = readChecksumB == checksumB;\n \n-        byte pointerStateA = pointerState( stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA );\n-        byte pointerStateB = pointerState( stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB );\n+        byte pointerStateA = pointerState(stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA);\n+        byte pointerStateB = pointerState(stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB);\n \n-        long writeResult = writeResult( pointerStateA, pointerStateB, generationA, generationB );\n+        long writeResult = writeResult(pointerStateA, pointerStateB, generationA, generationB);\n \n-        if ( isSuccess( writeResult ) )\n+        if (isSuccess(writeResult))\n         {\n-            boolean writeToA = ( writeResult & SLOT_MASK) == FLAG_SLOT_A;\n+            boolean writeToA = (writeResult & SLOT_MASK) == FLAG_SLOT_A;\n             int writeOffset = writeToA ? offset : offset + GenerationSafePointer.SIZE;\n-            cursor.setOffset( writeOffset );\n-            GenerationSafePointer.write( cursor, unstableGeneration, pointer );\n+            cursor.setOffset(writeOffset);\n+            GenerationSafePointer.write(cursor, unstableGeneration, pointer);\n         }\n         return writeResult;\n     }\n \n-    private static long writeResult( byte pointerStateA, byte pointerStateB, long generationA, long generationB )\n+    private static long writeResult(byte pointerStateA, byte pointerStateB, long generationA, long generationB)\n     {\n-        if ( pointerStateA == STABLE )\n+        if (pointerStateA == STABLE)\n         {\n-            if ( pointerStateB == STABLE )\n+            if (pointerStateB == STABLE)\n             {\n-                if ( generationA > generationB )\n+                if (generationA > generationB)\n                 {\n                     // Write to slot B\n                     return SUCCESS_WRITE_TO_B;\n-                }\n-                else if ( generationB > generationA )\n+                } else if (generationB > generationA)\n                 {\n                     // Write to slot A\n                     return SUCCESS_WRITE_TO_A;\n                 }\n-            }\n-            else\n+            } else\n             {\n                 // Write to slot B\n                 return SUCCESS_WRITE_TO_B;\n             }\n-        }\n-        else if ( pointerStateB == STABLE )\n+        } else if (pointerStateB == STABLE)\n         {\n             // write to slot A\n             return SUCCESS_WRITE_TO_A;\n-        }\n-        else if ( pointerStateA == UNSTABLE )\n+        } else if (pointerStateA == UNSTABLE)\n         {\n-            if ( pointerStateB == EMPTY )\n+            if (pointerStateB == EMPTY)\n             {\n                 // write to slot A\n                 return SUCCESS_WRITE_TO_A;\n             }\n-        }\n-        else if ( pointerStateB == UNSTABLE )\n+        } else if (pointerStateB == UNSTABLE)\n         {\n-            if ( pointerStateA == EMPTY )\n+            if (pointerStateA == EMPTY)\n             {\n                 // write to slot B\n                 return SUCCESS_WRITE_TO_B;\n             }\n-        }\n-        else if ( pointerStateA == EMPTY && pointerStateB == EMPTY )\n+        } else if (pointerStateA == EMPTY && pointerStateB == EMPTY)\n         {\n             // write to slot A\n             return SUCCESS_WRITE_TO_A;\n         }\n \n         // Encode error\n-        return FLAG_FAIL | FLAG_WRITE | generationState( generationA, generationB ) |\n-               ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n+        return FLAG_FAIL | FLAG_WRITE | generationState(generationA, generationB) |\n+          ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n     }\n \n-    private static long generationState( long generationA, long generationB )\n+    private static long generationState(long generationA, long generationB)\n     {\n         return generationA > generationB ? FLAG_GENERATION_A_BIG : generationB > generationA ? FLAG_GENERATION_B_BIG\n-                                                                                             : FLAG_GENERATION_EQUAL;\n+          : FLAG_GENERATION_EQUAL;\n     }\n \n     /**\n@@ -318,33 +308,33 @@ class GenerationSafePointerPair\n      * <li>{@link #EMPTY}</li>\n      * </ul>\n      *\n-     * @param stableGeneration stable generation.\n+     * @param stableGeneration   stable generation.\n      * @param unstableGeneration unstable generation.\n-     * @param generation GSP generation.\n-     * @param pointer GSP pointer.\n-     * @param checksumIsCorrect whether or not GSP checksum matches checksum of {@code generation} and {@code pointer}.\n+     * @param generation         GSP generation.\n+     * @param pointer            GSP pointer.\n+     * @param checksumIsCorrect  whether or not GSP checksum matches checksum of {@code generation} and {@code pointer}.\n      * @return one of the available pointer states.\n      */\n-    static byte pointerState( long stableGeneration, long unstableGeneration,\n-            long generation, long pointer, boolean checksumIsCorrect )\n+    static byte pointerState(long stableGeneration, long unstableGeneration,\n+                             long generation, long pointer, boolean checksumIsCorrect)\n     {\n-        if ( GenerationSafePointer.isEmpty( generation, pointer ) )\n+        if (GenerationSafePointer.isEmpty(generation, pointer))\n         {\n             return EMPTY;\n         }\n-        if ( !checksumIsCorrect )\n+        if (!checksumIsCorrect)\n         {\n             return BROKEN;\n         }\n-        if ( generation < MIN_GENERATION )\n+        if (generation < MIN_GENERATION)\n         {\n             return BROKEN;\n         }\n-        if ( generation <= stableGeneration )\n+        if (generation <= stableGeneration)\n         {\n             return STABLE;\n         }\n-        if ( generation == unstableGeneration )\n+        if (generation == unstableGeneration)\n         {\n             return UNSTABLE;\n         }\n@@ -358,17 +348,17 @@ class GenerationSafePointerPair\n      * @param result result from {@link #read(PageCursor, long, long, GBPTreeGenerationTarget)} or {@link #write(PageCursor, long, long, long)}.\n      * @return {@code true} if successful read/write, otherwise {@code false}.\n      */\n-    static boolean isSuccess( long result )\n+    static boolean isSuccess(long result)\n     {\n         return (result & SUCCESS_MASK) == FLAG_SUCCESS;\n     }\n \n     /**\n      * @param readResult whole read result from {@link #read(PageCursor, long, long, GBPTreeGenerationTarget)}, containing both\n-     * pointer as well as header information about the pointer.\n+     *                   pointer as well as header information about the pointer.\n      * @return the pointer-part of {@code readResult}.\n      */\n-    static long pointer( long readResult )\n+    static long pointer(long readResult)\n     {\n         return readResult & POINTER_MASK;\n     }\n@@ -383,51 +373,48 @@ class GenerationSafePointerPair\n      * by getting a human-friendly description about the failure.\n      *\n      * @param result result from {@link #read(PageCursor, long, long, GBPTreeGenerationTarget)} or\n-     * {@link #write(PageCursor, long, long, long)}.\n+     *               {@link #write(PageCursor, long, long, long)}.\n      * @return a human-friendly description of the failure.\n      */\n-    static String failureDescription( long result )\n+    static String failureDescription(long result)\n     {\n-        return \"GSPP \" + (isRead( result ) ? \"READ\" : \"WRITE\") + \" failure\" +\n-                format( \"%n  Pointer state A: %s\",\n-                        pointerStateName( pointerStateFromResult( result, SHIFT_STATE_A ) ) ) +\n-                format( \"%n  Pointer state B: %s\",\n-                        pointerStateName( pointerStateFromResult( result, SHIFT_STATE_B ) ) ) +\n-                format( \"%n  Generations: \" + generationComparisonFromResult( result ) );\n+        return \"GSPP \" + (isRead(result) ? \"READ\" : \"WRITE\") + \" failure\" +\n+          format(\"%n  Pointer state A: %s\",\n+            pointerStateName(pointerStateFromResult(result, SHIFT_STATE_A))) +\n+          format(\"%n  Pointer state B: %s\",\n+            pointerStateName(pointerStateFromResult(result, SHIFT_STATE_B))) +\n+          format(\"%n  Generations: \" + generationComparisonFromResult(result));\n     }\n \n     /**\n      * Asserts that a result is {@link #isSuccess(long) successful}, otherwise throws {@link IllegalStateException}.\n      *\n      * @param result result returned from {@link #read(PageCursor, long, long, GBPTreeGenerationTarget)} or\n-     * {@link #write(PageCursor, long, long, long)}\n+     *               {@link #write(PageCursor, long, long, long)}\n      * @return {@code true} if {@link #isSuccess(long) successful}, for interoperability with {@code assert}.\n      */\n-    static boolean assertSuccess( long result )\n+    static boolean assertSuccess(long result)\n     {\n-        if ( !isSuccess( result ) )\n+        if (!isSuccess(result))\n         {\n-            throw new TreeInconsistencyException( failureDescription( result ) );\n+            throw new TreeInconsistencyException(failureDescription(result));\n         }\n         return true;\n     }\n \n-    private static String generationComparisonFromResult( long result )\n+    private static String generationComparisonFromResult(long result)\n     {\n         long bits = result & GENERATION_COMPARISON_MASK;\n-        if ( bits == FLAG_GENERATION_EQUAL )\n+        if (bits == FLAG_GENERATION_EQUAL)\n         {\n             return GENERATION_COMPARISON_NAME_EQUAL;\n-        }\n-        else if ( bits == FLAG_GENERATION_A_BIG )\n+        } else if (bits == FLAG_GENERATION_A_BIG)\n         {\n             return GENERATION_COMPARISON_NAME_A_BIG;\n-        }\n-        else if ( bits == FLAG_GENERATION_B_BIG )\n+        } else if (bits == FLAG_GENERATION_B_BIG)\n         {\n             return GENERATION_COMPARISON_NAME_B_BIG;\n-        }\n-        else\n+        } else\n         {\n             return \"Unknown[\" + bits + \"]\";\n         }\n@@ -439,30 +426,36 @@ class GenerationSafePointerPair\n      * @param pointerState pointer state to get name for.\n      * @return name of {@code pointerState}.\n      */\n-    static String pointerStateName( byte pointerState )\n+    static String pointerStateName(byte pointerState)\n     {\n-        switch ( pointerState )\n+        switch (pointerState)\n         {\n-        case STABLE: return \"STABLE\";\n-        case UNSTABLE: return \"UNSTABLE\";\n-        case CRASH: return \"CRASH\";\n-        case BROKEN: return \"BROKEN\";\n-        case EMPTY: return \"EMPTY\";\n-        default: return \"Unknown[\" + pointerState + \"]\";\n+            case STABLE:\n+                return \"STABLE\";\n+            case UNSTABLE:\n+                return \"UNSTABLE\";\n+            case CRASH:\n+                return \"CRASH\";\n+            case BROKEN:\n+                return \"BROKEN\";\n+            case EMPTY:\n+                return \"EMPTY\";\n+            default:\n+                return \"Unknown[\" + pointerState + \"]\";\n         }\n     }\n \n-    static byte pointerStateFromResult( long result, int shift )\n+    static byte pointerStateFromResult(long result, int shift)\n     {\n         return (byte) ((result >>> shift) & STATE_MASK);\n     }\n \n-    static boolean isRead( long result )\n+    static boolean isRead(long result)\n     {\n         return (result & READ_OR_WRITE_MASK) == FLAG_READ;\n     }\n \n-    static boolean resultIsFromSlotA( long result )\n+    static boolean resultIsFromSlotA(long result)\n     {\n         return (result & SLOT_MASK) == FLAG_SLOT_A;\n     }\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}