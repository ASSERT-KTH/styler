{
    "project_name": "graphfoundation-ongdb",
    "error_id": "822",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "28",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "28",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/822/AnyValues.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/822/AnyValues.java\nindex c67ee56a151..46aaa11b3eb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/822/AnyValues.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/822/AnyValues.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values;\n \n import java.util.Comparator;\n@@ -24,51 +25,51 @@ import java.util.Comparator;\n import org.neo4j.values.storable.Values;\n import org.neo4j.values.virtual.VirtualValueGroup;\n \n-@SuppressWarnings( \"WeakerAccess\" )\n+@SuppressWarnings(\"WeakerAccess\")\n public final class AnyValues\n {\n-    /**\n-     * Default AnyValue comparator. Will correctly compare all storable and virtual values.\n-     *\n-     * <h1>\n-     * Orderability\n-     *\n-     * <a href=\"https://github.com/opencypher/openCypher/blob/master/cip/1.accepted/CIP2016-06-14-Define-comparability-and-equality-as-well-as-orderability-and-equivalence.adoc\">\n-     *   The Cypher CIP defining orderability\n-     * </a>\n-     *\n-     * <p>\n-     * Ascending global sort order of disjoint types:\n-     *\n-     * <ul>\n-     *   <li> MAP types\n-     *   <ul>\n-     *     <li> Regular map\n-     *\n-     *     <li> NODE\n-     *\n-     *     <li> RELATIONSHIP\n-     *   </ul>\n-     *\n-     *  <li> LIST OF ANY?\n-     *\n-     *  <li> PATH\n-     *\n-     *  <li> POINT\n-     *\n-     *  <li> STRING\n-     *\n-     *  <li> BOOLEAN\n-     *\n-     *  <li> NUMBER\n-     *    <ul>\n-     *      <li> NaN values are treated as the largest numbers in orderability only (i.e. they are put after positive infinity)\n-     *    </ul>\n-     *  <li> VOID (i.e. the type of null)\n-     * </ul>\n-     */\n-    private static final AnyValueComparator comp = new AnyValueComparator( Values.COMPARATOR, VirtualValueGroup::compareTo );\n-    public static final Comparator<AnyValue> COMPARATOR = comp;\n-    public static final TernaryComparator<AnyValue> TERNARY_COMPARATOR = comp;\n+  /**\n+   * Default AnyValue comparator. Will correctly compare all storable and virtual values.\n+   *\n+   * <h1>\n+   * Orderability\n+   *\n+   * <a href=\"https://github.com/opencypher/openCypher/blob/master/cip/1.accepted/CIP2016-06-14-Define-comparability-and-equality-as-well-as-orderability-and-equivalence.adoc\">\n+   * The Cypher CIP defining orderability\n+   * </a>\n+   *\n+   * <p>\n+   * Ascending global sort order of disjoint types:\n+   *\n+   * <ul>\n+   *   <li> MAP types\n+   *   <ul>\n+   *     <li> Regular map\n+   *\n+   *     <li> NODE\n+   *\n+   *     <li> RELATIONSHIP\n+   *   </ul>\n+   *\n+   *  <li> LIST OF ANY?\n+   *\n+   *  <li> PATH\n+   *\n+   *  <li> POINT\n+   *\n+   *  <li> STRING\n+   *\n+   *  <li> BOOLEAN\n+   *\n+   *  <li> NUMBER\n+   *    <ul>\n+   *      <li> NaN values are treated as the largest numbers in orderability only (i.e. they are put after positive infinity)\n+   *    </ul>\n+   *  <li> VOID (i.e. the type of null)\n+   * </ul>\n+   */\n+  private static final AnyValueComparator comp = new AnyValueComparator(Values.COMPARATOR, VirtualValueGroup::compareTo);\n+  public static final Comparator<AnyValue> COMPARATOR = comp;\n+  public static final TernaryComparator<AnyValue> TERNARY_COMPARATOR = comp;\n \n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/822/AnyValues.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/822/AnyValues.java\nindex c67ee56a151..6da42d5cb7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/822/AnyValues.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/822/AnyValues.java\n@@ -69,6 +69,6 @@ public final class AnyValues\n      */\n     private static final AnyValueComparator comp = new AnyValueComparator( Values.COMPARATOR, VirtualValueGroup::compareTo );\n     public static final Comparator<AnyValue> COMPARATOR = comp;\n-    public static final TernaryComparator<AnyValue> TERNARY_COMPARATOR = comp;\n \n-}\n+public static final TernaryComparator<AnyValue> TERNARY_COMPARATOR = comp;\n+    }\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}