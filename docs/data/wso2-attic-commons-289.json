{
    "project_name": "wso2-attic-commons",
    "error_id": "289",
    "information": {
        "errors": [
            {
                "line": "52",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private Node _root;\n\n    public PropertyAliasEvaluationContext(Element msgData, Map<String, Node> headerParts, OProcess.OPropertyAlias alias) {\n        // We need to tweak the context node based on what kind of variable (element vs non-element)\n        if (alias.header != null) {\n            _root = headerParts.get(alias.header);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/289/PropertyAliasEvaluationContext.java\nindex 6c7ba5b45f0..b64ce58526b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/289/PropertyAliasEvaluationContext.java\n@@ -49,7 +49,8 @@ public class PropertyAliasEvaluationContext implements EvaluationContext {\n     \n     private Node _root;\n \n-    public PropertyAliasEvaluationContext(Element msgData, Map<String, Node> headerParts, OProcess.OPropertyAlias alias) {\n+    public PropertyAliasEvaluationContext(Element msgData, Map<String\n+            , Node> headerParts, OProcess.OPropertyAlias alias) {\n         // We need to tweak the context node based on what kind of variable (element vs non-element)\n         if (alias.header != null) {\n             _root = headerParts.get(alias.header);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/289/PropertyAliasEvaluationContext.java\nindex 6c7ba5b45f0..d287515f3c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/289/PropertyAliasEvaluationContext.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.runtime;\n \n import java.net.URI;\n@@ -45,73 +46,74 @@ import javax.xml.namespace.QName;\n  * Expression language evaluation context used for evaluating property aliases.\n  */\n public class PropertyAliasEvaluationContext implements EvaluationContext {\n-    private static final Log __log = LogFactory.getLog(PropertyAliasEvaluationContext.class);\n-    \n-    private Node _root;\n-\n-    public PropertyAliasEvaluationContext(Element msgData, Map<String, Node> headerParts, OProcess.OPropertyAlias alias) {\n-        // We need to tweak the context node based on what kind of variable (element vs non-element)\n-        if (alias.header != null) {\n-            _root = headerParts.get(alias.header);\n-        } else if (alias.part != null) {\n-            Element part = DOMUtils.findChildByName(msgData,new QName(null, alias.part.name),false);\n-            if (part != null && alias.part.type instanceof OElementVarType) {\n-                _root = DOMUtils.findChildByName(part, ((OElementVarType)alias.part.type).elementType);\n-            } else\n-                _root = part;\n-        } else {\n-            _root = msgData;\n-        }\n+  private static final Log __log = LogFactory.getLog(PropertyAliasEvaluationContext.class);\n+\n+  private Node _root;\n+\n+  public PropertyAliasEvaluationContext(Element msgData, Map<String, Node> headerParts, OProcess.OPropertyAlias alias) {\n+    // We need to tweak the context node based on what kind of variable (element vs non-element)\n+    if (alias.header != null) {\n+      _root = headerParts.get(alias.header);\n+    } else if (alias.part != null) {\n+      Element part = DOMUtils.findChildByName(msgData, new QName(null, alias.part.name), false);\n+      if (part != null && alias.part.type instanceof OElementVarType) {\n+        _root = DOMUtils.findChildByName(part, ((OElementVarType) alias.part.type).elementType);\n+      } else {\n+        _root = part;\n+      }\n+    } else {\n+      _root = msgData;\n     }\n+  }\n \n-    public Node getRootNode() {\n-        return _root;\n-    }\n+  public Node getRootNode() {\n+    return _root;\n+  }\n \n-    public boolean isLinkActive(OLink olink) throws FaultException {\n-        throw new InvalidProcessException(\"Link status not available in this context.\");\n-    }\n+  public boolean isLinkActive(OLink olink) throws FaultException {\n+    throw new InvalidProcessException(\"Link status not available in this context.\");\n+  }\n \n-    public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {\n-        throw new InvalidProcessException(\"Message properties not available in this context.\");\n-    }\n+  public String readMessageProperty(OScope.Variable variable, OProcess.OProperty property) throws FaultException {\n+    throw new InvalidProcessException(\"Message properties not available in this context.\");\n+  }\n \n \n-    public Node readVariable(OScope.Variable variable, OMessageVarType.Part part) throws FaultException {\n-        throw new InvalidProcessException(\"Message variables not available in this context.\");\n-    }\n+  public Node readVariable(OScope.Variable variable, OMessageVarType.Part part) throws FaultException {\n+    throw new InvalidProcessException(\"Message variables not available in this context.\");\n+  }\n \n-    public Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n-        throw new InvalidProcessException(\"Query language not available in this context.\");\n-    }\n+  public Node evaluateQuery(Node root, OExpression expr) throws FaultException {\n+    throw new InvalidProcessException(\"Query language not available in this context.\");\n+  }\n \n-    public Long getProcessId() {\n-        throw new InvalidProcessException(\"Process execution information not available in this context.\");\n-    }\n+  public Long getProcessId() {\n+    throw new InvalidProcessException(\"Process execution information not available in this context.\");\n+  }\n \n-    public QName getProcessQName() {\n-        throw new InvalidProcessException(\"Process execution information not available in this context.\");\n-    }\n+  public QName getProcessQName() {\n+    throw new InvalidProcessException(\"Process execution information not available in this context.\");\n+  }\n \n-    public Node getPartData(Element message, Part part) throws FaultException {\n-        // TODO Auto-generated method stub\n-        return null;\n-    }\n+  public Node getPartData(Element message, Part part) throws FaultException {\n+    // TODO Auto-generated method stub\n+    return null;\n+  }\n \n-    public boolean narrowTypes() {\n-        return true;\n-    }\n+  public boolean narrowTypes() {\n+    return true;\n+  }\n \n-    public URI getBaseResourceURI() {\n-        return null;\n-    }\n+  public URI getBaseResourceURI() {\n+    return null;\n+  }\n \n-    public Node getPropertyValue(QName propertyName) {\n-        return null;\n-    }\n+  public Node getPropertyValue(QName propertyName) {\n+    return null;\n+  }\n \n-    public Date getCurrentEventDateTime() {\n-        return null;\n-    }\n+  public Date getCurrentEventDateTime() {\n+    return null;\n+  }\n \n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/289/PropertyAliasEvaluationContext.java\nindex 6c7ba5b45f0..0da310188ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/289/PropertyAliasEvaluationContext.java\n@@ -114,4 +114,4 @@ public class PropertyAliasEvaluationContext implements EvaluationContext {\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/289/PropertyAliasEvaluationContext.java\nindex 6c7ba5b45f0..b64ce58526b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/289/PropertyAliasEvaluationContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/289/PropertyAliasEvaluationContext.java\n@@ -49,7 +49,8 @@ public class PropertyAliasEvaluationContext implements EvaluationContext {\n     \n     private Node _root;\n \n-    public PropertyAliasEvaluationContext(Element msgData, Map<String, Node> headerParts, OProcess.OPropertyAlias alias) {\n+    public PropertyAliasEvaluationContext(Element msgData, Map<String\n+            , Node> headerParts, OProcess.OPropertyAlias alias) {\n         // We need to tweak the context node based on what kind of variable (element vs non-element)\n         if (alias.header != null) {\n             _root = headerParts.get(alias.header);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}