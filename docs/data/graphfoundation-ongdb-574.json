{
    "project_name": "graphfoundation-ongdb",
    "error_id": "574",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/574/RecordChangeSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/574/RecordChangeSet.java\nindex 571be382b23..f9d9369a45a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/574/RecordChangeSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/574/RecordChangeSet.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import org.neo4j.kernel.impl.store.record.LabelTokenRecord;\n@@ -34,122 +35,122 @@ import org.neo4j.storageengine.api.schema.SchemaRule;\n \n public class RecordChangeSet implements RecordAccessSet\n {\n-    private final RecordAccess<NodeRecord, Void> nodeRecords;\n-    private final RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords;\n-    private final RecordAccess<RelationshipRecord, Void> relRecords;\n-    private final RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords;\n-    private final RecordAccess<SchemaRecord, SchemaRule> schemaRuleChanges;\n-    private final RecordAccess<PropertyKeyTokenRecord, Void> propertyKeyTokenChanges;\n-    private final RecordAccess<LabelTokenRecord, Void> labelTokenChanges;\n-    private final RecordAccess<RelationshipTypeTokenRecord, Void> relationshipTypeTokenChanges;\n-    private final IntCounter changeCounter = new IntCounter();\n-\n-    public RecordChangeSet( Loaders loaders )\n-    {\n-        this(   loaders.nodeLoader(),\n-                loaders.propertyLoader(),\n-                loaders.relationshipLoader(),\n-                loaders.relationshipGroupLoader(),\n-                loaders.schemaRuleLoader(),\n-                loaders.propertyKeyTokenLoader(),\n-                loaders.labelTokenLoader(),\n-                loaders.relationshipTypeTokenLoader() );\n-    }\n+  private final RecordAccess<NodeRecord, Void> nodeRecords;\n+  private final RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords;\n+  private final RecordAccess<RelationshipRecord, Void> relRecords;\n+  private final RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords;\n+  private final RecordAccess<SchemaRecord, SchemaRule> schemaRuleChanges;\n+  private final RecordAccess<PropertyKeyTokenRecord, Void> propertyKeyTokenChanges;\n+  private final RecordAccess<LabelTokenRecord, Void> labelTokenChanges;\n+  private final RecordAccess<RelationshipTypeTokenRecord, Void> relationshipTypeTokenChanges;\n+  private final IntCounter changeCounter = new IntCounter();\n \n-    public RecordChangeSet(\n-            Loader<NodeRecord,Void> nodeLoader,\n-            Loader<PropertyRecord,PrimitiveRecord> propertyLoader,\n-            Loader<RelationshipRecord,Void> relationshipLoader,\n-            Loader<RelationshipGroupRecord,Integer> relationshipGroupLoader,\n-            Loader<SchemaRecord,SchemaRule> schemaRuleLoader,\n-            Loader<PropertyKeyTokenRecord,Void> propertyKeyTokenLoader,\n-            Loader<LabelTokenRecord,Void> labelTokenLoader,\n-            Loader<RelationshipTypeTokenRecord,Void> relationshipTypeTokenLoader )\n-    {\n-        this.nodeRecords = new RecordChanges<>( nodeLoader, changeCounter );\n-        this.propertyRecords = new RecordChanges<>( propertyLoader, changeCounter );\n-        this.relRecords = new RecordChanges<>( relationshipLoader, changeCounter );\n-        this.relGroupRecords = new RecordChanges<>( relationshipGroupLoader, changeCounter );\n-        this.schemaRuleChanges = new RecordChanges<>( schemaRuleLoader, changeCounter );\n-        this.propertyKeyTokenChanges = new RecordChanges<>( propertyKeyTokenLoader, changeCounter );\n-        this.labelTokenChanges = new RecordChanges<>( labelTokenLoader, changeCounter );\n-        this.relationshipTypeTokenChanges = new RecordChanges<>( relationshipTypeTokenLoader, changeCounter );\n-    }\n+  public RecordChangeSet(Loaders loaders)\n+  {\n+    this(loaders.nodeLoader(),\n+        loaders.propertyLoader(),\n+        loaders.relationshipLoader(),\n+        loaders.relationshipGroupLoader(),\n+        loaders.schemaRuleLoader(),\n+        loaders.propertyKeyTokenLoader(),\n+        loaders.labelTokenLoader(),\n+        loaders.relationshipTypeTokenLoader());\n+  }\n \n-    @Override\n-    public RecordAccess<NodeRecord, Void> getNodeRecords()\n-    {\n-        return nodeRecords;\n-    }\n+  public RecordChangeSet(\n+      Loader<NodeRecord, Void> nodeLoader,\n+      Loader<PropertyRecord, PrimitiveRecord> propertyLoader,\n+      Loader<RelationshipRecord, Void> relationshipLoader,\n+      Loader<RelationshipGroupRecord, Integer> relationshipGroupLoader,\n+      Loader<SchemaRecord, SchemaRule> schemaRuleLoader,\n+      Loader<PropertyKeyTokenRecord, Void> propertyKeyTokenLoader,\n+      Loader<LabelTokenRecord, Void> labelTokenLoader,\n+      Loader<RelationshipTypeTokenRecord, Void> relationshipTypeTokenLoader)\n+  {\n+    this.nodeRecords = new RecordChanges<>(nodeLoader, changeCounter);\n+    this.propertyRecords = new RecordChanges<>(propertyLoader, changeCounter);\n+    this.relRecords = new RecordChanges<>(relationshipLoader, changeCounter);\n+    this.relGroupRecords = new RecordChanges<>(relationshipGroupLoader, changeCounter);\n+    this.schemaRuleChanges = new RecordChanges<>(schemaRuleLoader, changeCounter);\n+    this.propertyKeyTokenChanges = new RecordChanges<>(propertyKeyTokenLoader, changeCounter);\n+    this.labelTokenChanges = new RecordChanges<>(labelTokenLoader, changeCounter);\n+    this.relationshipTypeTokenChanges = new RecordChanges<>(relationshipTypeTokenLoader, changeCounter);\n+  }\n \n-    @Override\n-    public RecordAccess<PropertyRecord, PrimitiveRecord> getPropertyRecords()\n-    {\n-        return propertyRecords;\n-    }\n+  @Override\n+  public RecordAccess<NodeRecord, Void> getNodeRecords()\n+  {\n+    return nodeRecords;\n+  }\n \n-    @Override\n-    public RecordAccess<RelationshipRecord, Void> getRelRecords()\n-    {\n-        return relRecords;\n-    }\n+  @Override\n+  public RecordAccess<PropertyRecord, PrimitiveRecord> getPropertyRecords()\n+  {\n+    return propertyRecords;\n+  }\n \n-    @Override\n-    public RecordAccess<RelationshipGroupRecord, Integer> getRelGroupRecords()\n-    {\n-        return relGroupRecords;\n-    }\n+  @Override\n+  public RecordAccess<RelationshipRecord, Void> getRelRecords()\n+  {\n+    return relRecords;\n+  }\n \n-    @Override\n-    public RecordAccess<SchemaRecord, SchemaRule> getSchemaRuleChanges()\n-    {\n-        return schemaRuleChanges;\n-    }\n+  @Override\n+  public RecordAccess<RelationshipGroupRecord, Integer> getRelGroupRecords()\n+  {\n+    return relGroupRecords;\n+  }\n \n-    @Override\n-    public RecordAccess<PropertyKeyTokenRecord, Void> getPropertyKeyTokenChanges()\n-    {\n-        return propertyKeyTokenChanges;\n-    }\n+  @Override\n+  public RecordAccess<SchemaRecord, SchemaRule> getSchemaRuleChanges()\n+  {\n+    return schemaRuleChanges;\n+  }\n \n-    @Override\n-    public RecordAccess<LabelTokenRecord, Void> getLabelTokenChanges()\n-    {\n-        return labelTokenChanges;\n-    }\n+  @Override\n+  public RecordAccess<PropertyKeyTokenRecord, Void> getPropertyKeyTokenChanges()\n+  {\n+    return propertyKeyTokenChanges;\n+  }\n \n-    @Override\n-    public RecordAccess<RelationshipTypeTokenRecord, Void> getRelationshipTypeTokenChanges()\n-    {\n-        return relationshipTypeTokenChanges;\n-    }\n+  @Override\n+  public RecordAccess<LabelTokenRecord, Void> getLabelTokenChanges()\n+  {\n+    return labelTokenChanges;\n+  }\n \n-    @Override\n-    public boolean hasChanges()\n-    {\n-        return changeCounter.value() > 0;\n-    }\n+  @Override\n+  public RecordAccess<RelationshipTypeTokenRecord, Void> getRelationshipTypeTokenChanges()\n+  {\n+    return relationshipTypeTokenChanges;\n+  }\n \n-    @Override\n-    public int changeSize()\n-    {\n-        return changeCounter.value();\n-    }\n+  @Override\n+  public boolean hasChanges()\n+  {\n+    return changeCounter.value() > 0;\n+  }\n+\n+  @Override\n+  public int changeSize()\n+  {\n+    return changeCounter.value();\n+  }\n \n-    @Override\n-    public void close()\n+  @Override\n+  public void close()\n+  {\n+    if (hasChanges())\n     {\n-        if ( hasChanges() )\n-        {\n-            nodeRecords.close();\n-            propertyRecords.close();\n-            relRecords.close();\n-            schemaRuleChanges.close();\n-            relGroupRecords.close();\n-            propertyKeyTokenChanges.close();\n-            labelTokenChanges.close();\n-            relationshipTypeTokenChanges.close();\n-            changeCounter.clear();\n-        }\n+      nodeRecords.close();\n+      propertyRecords.close();\n+      relRecords.close();\n+      schemaRuleChanges.close();\n+      relGroupRecords.close();\n+      propertyKeyTokenChanges.close();\n+      labelTokenChanges.close();\n+      relationshipTypeTokenChanges.close();\n+      changeCounter.clear();\n     }\n+  }\n }\n",
            "diff_size": 128
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 257).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 464).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/574/RecordChangeSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/574/RecordChangeSet.java\nindex 571be382b23..3be47ab195f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/574/RecordChangeSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/574/RecordChangeSet.java\n@@ -34,37 +34,22 @@ import org.neo4j.storageengine.api.schema.SchemaRule;\n \n public class RecordChangeSet implements RecordAccessSet\n {\n-    private final RecordAccess<NodeRecord, Void> nodeRecords;\n-    private final RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords;\n-    private final RecordAccess<RelationshipRecord, Void> relRecords;\n-    private final RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords;\n-    private final RecordAccess<SchemaRecord, SchemaRule> schemaRuleChanges;\n-    private final RecordAccess<PropertyKeyTokenRecord, Void> propertyKeyTokenChanges;\n-    private final RecordAccess<LabelTokenRecord, Void> labelTokenChanges;\n-    private final RecordAccess<RelationshipTypeTokenRecord, Void> relationshipTypeTokenChanges;\n+    private final RecordAccess<NodeRecord,Void> nodeRecords;\n+    private final RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords;\n+    private final RecordAccess<RelationshipRecord,Void> relRecords;\n+    private final RecordAccess<RelationshipGroupRecord,Integer> relGroupRecords;\n+    private final RecordAccess<SchemaRecord,SchemaRule> schemaRuleChanges;\n+    private final RecordAccess<PropertyKeyTokenRecord,Void> propertyKeyTokenChanges;\n+    private final RecordAccess<LabelTokenRecord,Void> labelTokenChanges;\n+    private final RecordAccess<RelationshipTypeTokenRecord,Void> relationshipTypeTokenChanges;\n     private final IntCounter changeCounter = new IntCounter();\n \n     public RecordChangeSet( Loaders loaders )\n     {\n-        this(   loaders.nodeLoader(),\n-                loaders.propertyLoader(),\n-                loaders.relationshipLoader(),\n-                loaders.relationshipGroupLoader(),\n-                loaders.schemaRuleLoader(),\n-                loaders.propertyKeyTokenLoader(),\n-                loaders.labelTokenLoader(),\n-                loaders.relationshipTypeTokenLoader() );\n+        this( loaders.nodeLoader(), loaders.propertyLoader(), loaders.relationshipLoader(), loaders.relationshipGroupLoader(), loaders.schemaRuleLoader(), loaders.propertyKeyTokenLoader(), loaders.labelTokenLoader(), loaders.relationshipTypeTokenLoader() );\n     }\n \n-    public RecordChangeSet(\n-            Loader<NodeRecord,Void> nodeLoader,\n-            Loader<PropertyRecord,PrimitiveRecord> propertyLoader,\n-            Loader<RelationshipRecord,Void> relationshipLoader,\n-            Loader<RelationshipGroupRecord,Integer> relationshipGroupLoader,\n-            Loader<SchemaRecord,SchemaRule> schemaRuleLoader,\n-            Loader<PropertyKeyTokenRecord,Void> propertyKeyTokenLoader,\n-            Loader<LabelTokenRecord,Void> labelTokenLoader,\n-            Loader<RelationshipTypeTokenRecord,Void> relationshipTypeTokenLoader )\n+    public RecordChangeSet( Loader<NodeRecord,Void> nodeLoader, Loader<PropertyRecord,PrimitiveRecord> propertyLoader, Loader<RelationshipRecord,Void> relationshipLoader, Loader<RelationshipGroupRecord,Integer> relationshipGroupLoader, Loader<SchemaRecord,SchemaRule> schemaRuleLoader, Loader<PropertyKeyTokenRecord,Void> propertyKeyTokenLoader, Loader<LabelTokenRecord,Void> labelTokenLoader, Loader<RelationshipTypeTokenRecord,Void> relationshipTypeTokenLoader )\n     {\n         this.nodeRecords = new RecordChanges<>( nodeLoader, changeCounter );\n         this.propertyRecords = new RecordChanges<>( propertyLoader, changeCounter );\n@@ -77,49 +62,49 @@ public class RecordChangeSet implements RecordAccessSet\n     }\n \n     @Override\n-    public RecordAccess<NodeRecord, Void> getNodeRecords()\n+    public RecordAccess<NodeRecord,Void> getNodeRecords()\n     {\n         return nodeRecords;\n     }\n \n     @Override\n-    public RecordAccess<PropertyRecord, PrimitiveRecord> getPropertyRecords()\n+    public RecordAccess<PropertyRecord,PrimitiveRecord> getPropertyRecords()\n     {\n         return propertyRecords;\n     }\n \n     @Override\n-    public RecordAccess<RelationshipRecord, Void> getRelRecords()\n+    public RecordAccess<RelationshipRecord,Void> getRelRecords()\n     {\n         return relRecords;\n     }\n \n     @Override\n-    public RecordAccess<RelationshipGroupRecord, Integer> getRelGroupRecords()\n+    public RecordAccess<RelationshipGroupRecord,Integer> getRelGroupRecords()\n     {\n         return relGroupRecords;\n     }\n \n     @Override\n-    public RecordAccess<SchemaRecord, SchemaRule> getSchemaRuleChanges()\n+    public RecordAccess<SchemaRecord,SchemaRule> getSchemaRuleChanges()\n     {\n         return schemaRuleChanges;\n     }\n \n     @Override\n-    public RecordAccess<PropertyKeyTokenRecord, Void> getPropertyKeyTokenChanges()\n+    public RecordAccess<PropertyKeyTokenRecord,Void> getPropertyKeyTokenChanges()\n     {\n         return propertyKeyTokenChanges;\n     }\n \n     @Override\n-    public RecordAccess<LabelTokenRecord, Void> getLabelTokenChanges()\n+    public RecordAccess<LabelTokenRecord,Void> getLabelTokenChanges()\n     {\n         return labelTokenChanges;\n     }\n \n     @Override\n-    public RecordAccess<RelationshipTypeTokenRecord, Void> getRelationshipTypeTokenChanges()\n+    public RecordAccess<RelationshipTypeTokenRecord,Void> getRelationshipTypeTokenChanges()\n     {\n         return relationshipTypeTokenChanges;\n     }\n@@ -152,4 +137,4 @@ public class RecordChangeSet implements RecordAccessSet\n             changeCounter.clear();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}