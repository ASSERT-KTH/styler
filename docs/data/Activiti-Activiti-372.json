{
    "project_name": "Activiti-Activiti",
    "error_id": "372",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.persistence.entity;\n\nimport static java.util.Arrays.asList;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/372/TimerJobEntityManagerImpl.java\nindex 6b1d5531689..db6ce76d8a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/372/TimerJobEntityManagerImpl.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import static java.util.Arrays.asList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/372/TimerJobEntityManagerImpl.java\nindex 6b1d5531689..84116c0a7d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/372/TimerJobEntityManagerImpl.java\n@@ -54,13 +54,13 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n         if (repeatValue != 0) {\n             if (repeatValue > 0) {\n                 setNewRepeat(timerEntity,\n-                             repeatValue);\n+                        repeatValue);\n             }\n             Date newTimer = calculateNextTimer(timerEntity,\n-                                               variableScope);\n+                    variableScope);\n             if (newTimer != null && isValidTime(timerEntity,\n-                                                newTimer,\n-                                                variableScope)) {\n+                    newTimer,\n+                    variableScope)) {\n                 TimerJobEntity te = createTimer(timerEntity);\n                 te.setDuedate(newTimer);\n                 return te;\n@@ -78,14 +78,14 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n     public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionId(String jobHandlerType,\n                                                                      String processDefinitionId) {\n         return jobDataManager.findJobsByTypeAndProcessDefinitionId(jobHandlerType,\n-                                                                   processDefinitionId);\n+                processDefinitionId);\n     }\n \n     @Override\n     public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionKeyNoTenantId(String jobHandlerType,\n                                                                                 String processDefinitionKey) {\n         return jobDataManager.findJobsByTypeAndProcessDefinitionKeyNoTenantId(jobHandlerType,\n-                                                                              processDefinitionKey);\n+                processDefinitionKey);\n     }\n \n     @Override\n@@ -93,8 +93,8 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n                                                                                  String processDefinitionKey,\n                                                                                  String tenantId) {\n         return jobDataManager.findJobsByTypeAndProcessDefinitionKeyAndTenantId(jobHandlerType,\n-                                                                               processDefinitionKey,\n-                                                                               tenantId);\n+                processDefinitionKey,\n+                tenantId);\n     }\n \n     @Override\n@@ -111,7 +111,7 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n     public List<Job> findJobsByQueryCriteria(TimerJobQueryImpl jobQuery,\n                                              Page page) {\n         return jobDataManager.findJobsByQueryCriteria(jobQuery,\n-                                                      page);\n+                page);\n     }\n \n     @Override\n@@ -123,26 +123,26 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n     public void updateJobTenantIdForDeployment(String deploymentId,\n                                                String newTenantId) {\n         jobDataManager.updateJobTenantIdForDeployment(deploymentId,\n-                                                      newTenantId);\n+                newTenantId);\n     }\n \n     @Override\n     public boolean insertTimerJobEntity(TimerJobEntity timerJobEntity) {\n         return doInsert(timerJobEntity,\n-                        true);\n+                true);\n     }\n \n     @Override\n     public void insert(TimerJobEntity jobEntity) {\n         insert(jobEntity,\n-               true);\n+                true);\n     }\n \n     @Override\n     public void insert(TimerJobEntity jobEntity,\n                        boolean fireCreateEvent) {\n         doInsert(jobEntity,\n-                 fireCreateEvent);\n+                fireCreateEvent);\n     }\n \n     protected boolean doInsert(TimerJobEntity jobEntity,\n@@ -171,7 +171,7 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n         }\n \n         super.insert(jobEntity,\n-                     fireCreateEvent);\n+                fireCreateEvent);\n         return true;\n     }\n \n@@ -192,7 +192,7 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n         // Send event\n         if (getEventDispatcher().isEnabled()) {\n             getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED,\n-                                                                                      this));\n+                    this));\n         }\n     }\n \n@@ -242,7 +242,7 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n                                 int newRepeatValue) {\n         List<String> expression = asList(timerEntity.getRepeat().split(\"/\"));\n         expression = expression.subList(1,\n-                                        expression.size());\n+                expression.size());\n         StringBuilder repeatBuilder = new StringBuilder(\"R\");\n         repeatBuilder.append(newRepeatValue);\n         for (String value : expression) {\n@@ -257,20 +257,20 @@ public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEnt\n                                   VariableScope variableScope) {\n         BusinessCalendar businessCalendar = getProcessEngineConfiguration().getBusinessCalendarManager().getBusinessCalendar(\n                 getBusinessCalendarName(TimerEventHandler.geCalendarNameFromConfiguration(timerEntity.getJobHandlerConfiguration()),\n-                                        variableScope));\n+                        variableScope));\n         return businessCalendar.validateDuedate(timerEntity.getRepeat(),\n-                                                timerEntity.getMaxIterations(),\n-                                                timerEntity.getEndDate(),\n-                                                newTimerDate);\n+                timerEntity.getMaxIterations(),\n+                timerEntity.getEndDate(),\n+                newTimerDate);\n     }\n \n     protected Date calculateNextTimer(JobEntity timerEntity,\n                                       VariableScope variableScope) {\n         BusinessCalendar businessCalendar = getProcessEngineConfiguration().getBusinessCalendarManager().getBusinessCalendar(\n                 getBusinessCalendarName(TimerEventHandler.geCalendarNameFromConfiguration(timerEntity.getJobHandlerConfiguration()),\n-                                        variableScope));\n+                        variableScope));\n         return businessCalendar.resolveDuedate(timerEntity.getRepeat(),\n-                                               timerEntity.getMaxIterations());\n+                timerEntity.getMaxIterations());\n     }\n \n     protected int calculateRepeatValue(JobEntity timerEntity) {\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 130.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 8, indentation should be the same level as line 136.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 16, expected is 8, indentation should be the same level as line 147.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 168.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 178.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 192.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 212.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 254).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "236",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 254).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/372/TimerJobEntityManagerImpl.java\nindex 6b1d5531689..3d90886bde5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/372/TimerJobEntityManagerImpl.java\n@@ -18,10 +18,8 @@\n package org.activiti.engine.impl.persistence.entity;\n \n import static java.util.Arrays.asList;\n-\n import java.util.Date;\n import java.util.List;\n-\n import org.activiti.engine.delegate.VariableScope;\n import org.activiti.engine.delegate.event.ActivitiEventType;\n import org.activiti.engine.delegate.event.impl.ActivitiEventBuilder;\n@@ -37,269 +35,234 @@ import org.activiti.engine.impl.persistence.entity.data.TimerJobDataManager;\n import org.activiti.engine.runtime.Job;\n import org.apache.commons.lang3.StringUtils;\n \n-public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEntity> implements TimerJobEntityManager {\n-\n-    protected TimerJobDataManager jobDataManager;\n-\n-    public TimerJobEntityManagerImpl(ProcessEngineConfigurationImpl processEngineConfiguration,\n-                                     TimerJobDataManager jobDataManager) {\n-        super(processEngineConfiguration);\n-        this.jobDataManager = jobDataManager;\n-    }\n-\n-    @Override\n-    public TimerJobEntity createAndCalculateNextTimer(JobEntity timerEntity,\n-                                                      VariableScope variableScope) {\n-        int repeatValue = calculateRepeatValue(timerEntity);\n-        if (repeatValue != 0) {\n-            if (repeatValue > 0) {\n-                setNewRepeat(timerEntity,\n-                             repeatValue);\n-            }\n-            Date newTimer = calculateNextTimer(timerEntity,\n-                                               variableScope);\n-            if (newTimer != null && isValidTime(timerEntity,\n-                                                newTimer,\n-                                                variableScope)) {\n-                TimerJobEntity te = createTimer(timerEntity);\n-                te.setDuedate(newTimer);\n-                return te;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public List<TimerJobEntity> findTimerJobsToExecute(Page page) {\n-        return jobDataManager.findTimerJobsToExecute(page);\n-    }\n-\n-    @Override\n-    public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionId(String jobHandlerType,\n-                                                                     String processDefinitionId) {\n-        return jobDataManager.findJobsByTypeAndProcessDefinitionId(jobHandlerType,\n-                                                                   processDefinitionId);\n-    }\n-\n-    @Override\n-    public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionKeyNoTenantId(String jobHandlerType,\n-                                                                                String processDefinitionKey) {\n-        return jobDataManager.findJobsByTypeAndProcessDefinitionKeyNoTenantId(jobHandlerType,\n-                                                                              processDefinitionKey);\n-    }\n-\n-    @Override\n-    public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionKeyAndTenantId(String jobHandlerType,\n-                                                                                 String processDefinitionKey,\n-                                                                                 String tenantId) {\n-        return jobDataManager.findJobsByTypeAndProcessDefinitionKeyAndTenantId(jobHandlerType,\n-                                                                               processDefinitionKey,\n-                                                                               tenantId);\n-    }\n-\n-    @Override\n-    public List<TimerJobEntity> findJobsByExecutionId(String id) {\n-        return jobDataManager.findJobsByExecutionId(id);\n-    }\n-\n-    @Override\n-    public List<TimerJobEntity> findJobsByProcessInstanceId(String id) {\n-        return jobDataManager.findJobsByProcessInstanceId(id);\n-    }\n-\n-    @Override\n-    public List<Job> findJobsByQueryCriteria(TimerJobQueryImpl jobQuery,\n-                                             Page page) {\n-        return jobDataManager.findJobsByQueryCriteria(jobQuery,\n-                                                      page);\n-    }\n-\n-    @Override\n-    public long findJobCountByQueryCriteria(TimerJobQueryImpl jobQuery) {\n-        return jobDataManager.findJobCountByQueryCriteria(jobQuery);\n-    }\n-\n-    @Override\n-    public void updateJobTenantIdForDeployment(String deploymentId,\n-                                               String newTenantId) {\n-        jobDataManager.updateJobTenantIdForDeployment(deploymentId,\n-                                                      newTenantId);\n-    }\n-\n-    @Override\n-    public boolean insertTimerJobEntity(TimerJobEntity timerJobEntity) {\n-        return doInsert(timerJobEntity,\n-                        true);\n-    }\n \n-    @Override\n-    public void insert(TimerJobEntity jobEntity) {\n-        insert(jobEntity,\n-               true);\n-    }\n+public class TimerJobEntityManagerImpl extends AbstractEntityManager<TimerJobEntity> implements TimerJobEntityManager {\n \n-    @Override\n-    public void insert(TimerJobEntity jobEntity,\n-                       boolean fireCreateEvent) {\n-        doInsert(jobEntity,\n-                 fireCreateEvent);\n+  protected TimerJobDataManager jobDataManager;\n+\n+  public TimerJobEntityManagerImpl(ProcessEngineConfigurationImpl processEngineConfiguration, TimerJobDataManager jobDataManager) {\n+    super(processEngineConfiguration);\n+    this.jobDataManager = jobDataManager;\n+  }\n+\n+  @Override\n+  public TimerJobEntity createAndCalculateNextTimer(JobEntity timerEntity, VariableScope variableScope) {\n+    int repeatValue = calculateRepeatValue(timerEntity);\n+    if (repeatValue != 0) {\n+      if (repeatValue > 0) {\n+        setNewRepeat(timerEntity, repeatValue);\n+      }\n+\n+      Date newTimer = calculateNextTimer(timerEntity, variableScope);\n+      if (newTimer != null && isValidTime(timerEntity, newTimer, variableScope)) {\n+        TimerJobEntity te = createTimer(timerEntity);\n+        te.setDuedate(newTimer);\n+        return te;\n+      }\n     }\n-\n-    protected boolean doInsert(TimerJobEntity jobEntity,\n-                               boolean fireCreateEvent) {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<TimerJobEntity> findTimerJobsToExecute(Page page) {\n+    return jobDataManager.findTimerJobsToExecute(page);\n+  }\n+\n+  @Override\n+  public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionId(String jobHandlerType, String processDefinitionId) {\n+    return jobDataManager.findJobsByTypeAndProcessDefinitionId(jobHandlerType, processDefinitionId);\n+  }\n+\n+  @Override\n+  public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionKeyNoTenantId(String jobHandlerType, String processDefinitionKey) {\n+    return jobDataManager.findJobsByTypeAndProcessDefinitionKeyNoTenantId(jobHandlerType, processDefinitionKey);\n+  }\n+\n+  @Override\n+  public List<TimerJobEntity> findJobsByTypeAndProcessDefinitionKeyAndTenantId(String jobHandlerType, String processDefinitionKey, String tenantId) {\n+    return jobDataManager.findJobsByTypeAndProcessDefinitionKeyAndTenantId(jobHandlerType,\n+                                                                           processDefinitionKey,\n+                                                                           tenantId);\n+  }\n+\n+  @Override\n+  public List<TimerJobEntity> findJobsByExecutionId(String id) {\n+    return jobDataManager.findJobsByExecutionId(id);\n+  }\n+\n+  @Override\n+  public List<TimerJobEntity> findJobsByProcessInstanceId(String id) {\n+    return jobDataManager.findJobsByProcessInstanceId(id);\n+  }\n+\n+  @Override\n+  public List<Job> findJobsByQueryCriteria(TimerJobQueryImpl jobQuery, Page page) {\n+    return jobDataManager.findJobsByQueryCriteria(jobQuery, page);\n+  }\n+\n+  @Override\n+  public long findJobCountByQueryCriteria(TimerJobQueryImpl jobQuery) {\n+    return jobDataManager.findJobCountByQueryCriteria(jobQuery);\n+  }\n+\n+  @Override\n+  public void updateJobTenantIdForDeployment(String deploymentId, String newTenantId) {\n+    jobDataManager.updateJobTenantIdForDeployment(deploymentId, newTenantId);\n+  }\n+\n+  @Override\n+  public boolean insertTimerJobEntity(TimerJobEntity timerJobEntity) {\n+    return doInsert(timerJobEntity, true);\n+  }\n+\n+  @Override\n+  public void insert(TimerJobEntity jobEntity) {\n+    insert(jobEntity, true);\n+  }\n+\n+  @Override\n+  public void insert(TimerJobEntity jobEntity, boolean fireCreateEvent) {\n+    doInsert(jobEntity, fireCreateEvent);\n+  }\n+\n+  protected boolean doInsert(TimerJobEntity jobEntity, boolean fireCreateEvent) {\n         // add link to execution\n-        if (jobEntity.getExecutionId() != null) {\n-            ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n-            if (execution != null) {\n-                execution.getTimerJobs().add(jobEntity);\n+    if (jobEntity.getExecutionId() != null) {\n+      ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n+      if (execution != null) {\n+        execution.getTimerJobs().add(jobEntity);\n \n                 // Inherit tenant if (if applicable)\n-                if (execution.getTenantId() != null) {\n-                    jobEntity.setTenantId(execution.getTenantId());\n-                }\n-\n-                if (isExecutionRelatedEntityCountEnabled(execution)) {\n-                    CountingExecutionEntity countingExecutionEntity = (CountingExecutionEntity) execution;\n-                    countingExecutionEntity.setTimerJobCount(countingExecutionEntity.getTimerJobCount() + 1);\n-                }\n-            } else {\n+        if (execution.getTenantId() != null) {\n+          jobEntity.setTenantId(execution.getTenantId());\n+        }\n+        if (isExecutionRelatedEntityCountEnabled(execution)) {\n+          CountingExecutionEntity countingExecutionEntity = (CountingExecutionEntity) execution;\n+          countingExecutionEntity.setTimerJobCount(countingExecutionEntity.getTimerJobCount() + 1);\n+        }\n+      } else {\n                 // In case the job has an executionId, but the Execution is not found,\n                 // it means that for example for a boundary timer event on a user task,\n                 // the task has been completed and the Execution and job have been removed.\n-                return false;\n-            }\n-        }\n-\n-        super.insert(jobEntity,\n-                     fireCreateEvent);\n-        return true;\n+        return false;\n+      }\n     }\n \n-    @Override\n-    public void delete(TimerJobEntity jobEntity) {\n-        super.delete(jobEntity);\n-\n-        deleteExceptionByteArrayRef(jobEntity);\n-        removeExecutionLink(jobEntity);\n-\n-        if (jobEntity.getExecutionId() != null && isExecutionRelatedEntityCountEnabledGlobally()) {\n-            CountingExecutionEntity executionEntity = (CountingExecutionEntity) getExecutionEntityManager().findById(jobEntity.getExecutionId());\n-            if (isExecutionRelatedEntityCountEnabled(executionEntity)) {\n-                executionEntity.setTimerJobCount(executionEntity.getTimerJobCount() - 1);\n-            }\n-        }\n+    super.insert(jobEntity, fireCreateEvent);\n+    return true;\n+  }\n+\n+  @Override\n+  public void delete(TimerJobEntity jobEntity) {\n+    super.delete(jobEntity);\n+    deleteExceptionByteArrayRef(jobEntity);\n+    removeExecutionLink(jobEntity);\n+    if (jobEntity.getExecutionId() != null && isExecutionRelatedEntityCountEnabledGlobally()) {\n+      CountingExecutionEntity executionEntity = (CountingExecutionEntity) getExecutionEntityManager().findById(jobEntity.getExecutionId());\n+      if (isExecutionRelatedEntityCountEnabled(executionEntity)) {\n+        executionEntity.setTimerJobCount(executionEntity.getTimerJobCount() - 1);\n+      }\n+    }\n \n         // Send event\n-        if (getEventDispatcher().isEnabled()) {\n-            getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED,\n-                                                                                      this));\n-        }\n+    if (getEventDispatcher().isEnabled()) {\n+      getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_DELETED, this));\n     }\n+  }\n \n     /**\n      * Removes the job's execution's reference to this job, if the job has an associated execution.\n      * Subclasses may override to provide custom implementations.\n      */\n-    protected void removeExecutionLink(TimerJobEntity jobEntity) {\n-        if (jobEntity.getExecutionId() != null) {\n-            ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n-            if (execution != null) {\n-                execution.getTimerJobs().remove(jobEntity);\n-            }\n-        }\n+\n+  protected void removeExecutionLink(TimerJobEntity jobEntity) {\n+    if (jobEntity.getExecutionId() != null) {\n+      ExecutionEntity execution = getExecutionEntityManager().findById(jobEntity.getExecutionId());\n+      if (execution != null) {\n+        execution.getTimerJobs().remove(jobEntity);\n+      }\n     }\n+  }\n \n     /**\n      * Deletes a the byte array used to store the exception information.  Subclasses may override\n      * to provide custom implementations.\n      */\n-    protected void deleteExceptionByteArrayRef(TimerJobEntity jobEntity) {\n-        ByteArrayRef exceptionByteArrayRef = jobEntity.getExceptionByteArrayRef();\n-        if (exceptionByteArrayRef != null) {\n-            exceptionByteArrayRef.delete();\n-        }\n-    }\n-\n-    protected TimerJobEntity createTimer(JobEntity te) {\n-        TimerJobEntity newTimerEntity = create();\n-        newTimerEntity.setJobHandlerConfiguration(te.getJobHandlerConfiguration());\n-        newTimerEntity.setJobHandlerType(te.getJobHandlerType());\n-        newTimerEntity.setExclusive(te.isExclusive());\n-        newTimerEntity.setRepeat(te.getRepeat());\n-        newTimerEntity.setRetries(te.getRetries());\n-        newTimerEntity.setEndDate(te.getEndDate());\n-        newTimerEntity.setExecutionId(te.getExecutionId());\n-        newTimerEntity.setProcessInstanceId(te.getProcessInstanceId());\n-        newTimerEntity.setProcessDefinitionId(te.getProcessDefinitionId());\n-\n-        // Inherit tenant\n-        newTimerEntity.setTenantId(te.getTenantId());\n-        newTimerEntity.setJobType(JobEntity.JOB_TYPE_TIMER);\n-        return newTimerEntity;\n-    }\n-\n-    protected void setNewRepeat(JobEntity timerEntity,\n-                                int newRepeatValue) {\n-        List<String> expression = asList(timerEntity.getRepeat().split(\"/\"));\n-        expression = expression.subList(1,\n-                                        expression.size());\n-        StringBuilder repeatBuilder = new StringBuilder(\"R\");\n-        repeatBuilder.append(newRepeatValue);\n-        for (String value : expression) {\n-            repeatBuilder.append(\"/\");\n-            repeatBuilder.append(value);\n-        }\n-        timerEntity.setRepeat(repeatBuilder.toString());\n-    }\n \n-    protected boolean isValidTime(JobEntity timerEntity,\n-                                  Date newTimerDate,\n-                                  VariableScope variableScope) {\n-        BusinessCalendar businessCalendar = getProcessEngineConfiguration().getBusinessCalendarManager().getBusinessCalendar(\n-                getBusinessCalendarName(TimerEventHandler.geCalendarNameFromConfiguration(timerEntity.getJobHandlerConfiguration()),\n-                                        variableScope));\n-        return businessCalendar.validateDuedate(timerEntity.getRepeat(),\n-                                                timerEntity.getMaxIterations(),\n-                                                timerEntity.getEndDate(),\n-                                                newTimerDate);\n+  protected void deleteExceptionByteArrayRef(TimerJobEntity jobEntity) {\n+    ByteArrayRef exceptionByteArrayRef = jobEntity.getExceptionByteArrayRef();\n+    if (exceptionByteArrayRef != null) {\n+      exceptionByteArrayRef.delete();\n     }\n+  }\n+\n+  protected TimerJobEntity createTimer(JobEntity te) {\n+    TimerJobEntity newTimerEntity = create();\n+    newTimerEntity.setJobHandlerConfiguration(te.getJobHandlerConfiguration());\n+    newTimerEntity.setJobHandlerType(te.getJobHandlerType());\n+    newTimerEntity.setExclusive(te.isExclusive());\n+    newTimerEntity.setRepeat(te.getRepeat());\n+    newTimerEntity.setRetries(te.getRetries());\n+    newTimerEntity.setEndDate(te.getEndDate());\n+    newTimerEntity.setExecutionId(te.getExecutionId());\n+    newTimerEntity.setProcessInstanceId(te.getProcessInstanceId());\n+    newTimerEntity.setProcessDefinitionId(te.getProcessDefinitionId());\n \n-    protected Date calculateNextTimer(JobEntity timerEntity,\n-                                      VariableScope variableScope) {\n-        BusinessCalendar businessCalendar = getProcessEngineConfiguration().getBusinessCalendarManager().getBusinessCalendar(\n-                getBusinessCalendarName(TimerEventHandler.geCalendarNameFromConfiguration(timerEntity.getJobHandlerConfiguration()),\n-                                        variableScope));\n-        return businessCalendar.resolveDuedate(timerEntity.getRepeat(),\n-                                               timerEntity.getMaxIterations());\n+        // Inherit tenant\n+    newTimerEntity.setTenantId(te.getTenantId());\n+    newTimerEntity.setJobType(JobEntity.JOB_TYPE_TIMER);\n+    return newTimerEntity;\n+  }\n+\n+  protected void setNewRepeat(JobEntity timerEntity, int newRepeatValue) {\n+    List<String> expression = asList(timerEntity.getRepeat().split(\"/\"));\n+    expression = expression.subList(1, expression.size());\n+\n+    StringBuilder repeatBuilder = new StringBuilder(\"R\");\n+    repeatBuilder.append(newRepeatValue);\n+    for (String value : expression) {\n+        repeatBuilder.append(\"/\");\n+        repeatBuilder.append(value);\n     }\n-\n-    protected int calculateRepeatValue(JobEntity timerEntity) {\n-        int times = -1;\n-        List<String> expression = asList(timerEntity.getRepeat().split(\"/\"));\n-        if (expression.size() > 1 && expression.get(0).startsWith(\"R\") && expression.get(0).length() > 1) {\n-            times = Integer.parseInt(expression.get(0).substring(1));\n-            if (times > 0) {\n-                times--;\n-            }\n-        }\n-        return times;\n+    timerEntity.setRepeat(repeatBuilder.toString());\n+  }\n+\n+  protected boolean isValidTime(JobEntity timerEntity, Date newTimerDate, VariableScope variableScope) {\n+    BusinessCalendar businessCalendar = getProcessEngineConfiguration().getBusinessCalendarManager().getBusinessCalendar(getBusinessCalendarName(TimerEventHandler.geCalendarNameFromConfiguration(timerEntity.getJobHandlerConfiguration()), variableScope));\n+    return businessCalendar.validateDuedate(timerEntity.getRepeat(), timerEntity.getMaxIterations(), timerEntity.getEndDate(), newTimerDate);\n+  }\n+\n+  protected Date calculateNextTimer(JobEntity timerEntity, VariableScope variableScope) {\n+    BusinessCalendar businessCalendar = getProcessEngineConfiguration().getBusinessCalendarManager().getBusinessCalendar(getBusinessCalendarName(TimerEventHandler.geCalendarNameFromConfiguration(timerEntity.getJobHandlerConfiguration()), variableScope));\n+    return businessCalendar.resolveDuedate(timerEntity.getRepeat(),\n+                                           timerEntity.getMaxIterations());\n+  }\n+\n+  protected int calculateRepeatValue(JobEntity timerEntity) {\n+    int times = -1;\n+    List<String> expression = asList(timerEntity.getRepeat().split(\"/\"));\n+    if (expression.size() > 1 && expression.get(0).startsWith(\"R\") && expression.get(0).length() > 1) {\n+      times = Integer.parseInt(expression.get(0).substring(1));\n+      if (times > 0) {\n+        times--;\n+      }\n     }\n+    return times;\n+  }\n \n-    protected String getBusinessCalendarName(String calendarName,\n-                                             VariableScope variableScope) {\n-        String businessCalendarName = CycleBusinessCalendar.NAME;\n-        if (StringUtils.isNotEmpty(calendarName)) {\n-            businessCalendarName = (String) Context.getProcessEngineConfiguration().getExpressionManager()\n-                    .createExpression(calendarName).getValue(variableScope);\n-        }\n-        return businessCalendarName;\n+  protected String getBusinessCalendarName(String calendarName, VariableScope variableScope) {\n+    String businessCalendarName = CycleBusinessCalendar.NAME;\n+    if (StringUtils.isNotEmpty(calendarName)) {\n+      businessCalendarName = (String) Context.getProcessEngineConfiguration().getExpressionManager().createExpression(calendarName).getValue(variableScope);\n     }\n+    return businessCalendarName;\n+  }\n \n-    protected TimerJobDataManager getDataManager() {\n-        return jobDataManager;\n-    }\n+  protected TimerJobDataManager getDataManager() {\n+    return jobDataManager;\n+  }\n \n-    public void setJobDataManager(TimerJobDataManager jobDataManager) {\n-        this.jobDataManager = jobDataManager;\n-    }\n-}\n+  public void setJobDataManager(TimerJobDataManager jobDataManager) {\n+    this.jobDataManager = jobDataManager;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 353
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/372/TimerJobEntityManagerImpl.java\nindex 6b1d5531689..db6ce76d8a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/372/TimerJobEntityManagerImpl.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import static java.util.Arrays.asList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/372/TimerJobEntityManagerImpl.java\nindex 6b1d5531689..db6ce76d8a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/372/TimerJobEntityManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/372/TimerJobEntityManagerImpl.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.persistence.entity;\n \n import static java.util.Arrays.asList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}