{
    "project_name": "StuPro-TOSCAna-TOSCAna",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "53",
                "column": "40",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    }\n    \n    public void init() throws Exception{\n        // noop for this test\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler/22/ExportingImageBuilderIT.java\nindex fd616836029..d4931a0bf81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler/22/ExportingImageBuilderIT.java\n@@ -50,7 +50,7 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n         validate(imageBuilder.getTag());\n     }\n     \n-    public void init() throws Exception{\n+    public void init() throws Exception {\n         // noop for this test\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/intellij/22/ExportingImageBuilderIT.java\nindex fd616836029..3971ee8a16b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/intellij/22/ExportingImageBuilderIT.java\n@@ -23,12 +23,13 @@ import static org.mockito.Mockito.when;\n public class ExportingImageBuilderIT extends BaseDockerfileTest {\n \n     private static final Logger logger = LoggerFactory.getLogger(ExportingImageBuilderIT.class);\n+\n     private static final String SHA_TEST_FILE_NAME = \"sha-test.tar.gz\";\n \n     protected String shaDigest;\n-    \n+\n     protected ImageBuilder imageBuilder;\n-    \n+\n     @Test\n     public void testBuildShaImage() throws Exception {\n         assumeTrue(DockerTestUtils.isDockerAvailable());\n@@ -36,21 +37,22 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n         shaDigest = buildSHADockerfile();\n \n         init();\n-        \n+\n         TransformationContext ctx = mock(TransformationContext.class);\n         when(ctx.getPluginFileAccess()).thenReturn(access);\n-        when(ctx.getLogger((Class<?>) any(Class.class))).thenReturn(LoggerFactory.getLogger(\"Mock Logger\"));\n-        \n+        when(ctx.getLogger((Class<?>) any(Class.class)))\n+            .thenReturn(LoggerFactory.getLogger(\"Mock Logger\"));\n+\n         imageBuilder = instantiateImageBuilder(ctx);\n         logger.info(\"Building Image\");\n         imageBuilder.buildImage();\n         logger.info(\"Storing Image\");\n         imageBuilder.storeImage();\n-        \n+\n         validate(imageBuilder.getTag());\n     }\n-    \n-    public void init() throws Exception{\n+\n+    public void init() throws Exception {\n         // noop for this test\n     }\n \n@@ -68,7 +70,7 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n             context\n         );\n     }\n-    \n+\n     public void validate(String tag) throws Exception {\n         File d = new File(access.getAbsolutePath(SHA_TEST_FILE_NAME));\n \n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/naturalize/22/ExportingImageBuilderIT.java\nindex fd616836029..531551182d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/naturalize/22/ExportingImageBuilderIT.java\n@@ -24,34 +24,29 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n \n     private static final Logger logger = LoggerFactory.getLogger(ExportingImageBuilderIT.class);\n     private static final String SHA_TEST_FILE_NAME = \"sha-test.tar.gz\";\n-\n-    protected String shaDigest;\n-    \n-    protected ImageBuilder imageBuilder;\n+protected String shaDigest;\n+protected ImageBuilder imageBuilder;\n     \n     @Test\n-    public void testBuildShaImage() throws Exception {\n+public void testBuildShaImage() throws Exception {\n         assumeTrue(DockerTestUtils.isDockerAvailable());\n         //Create Dockerfile and the corresponding Binary file\n         shaDigest = buildSHADockerfile();\n \n         init();\n-        \n-        TransformationContext ctx = mock(TransformationContext.class);\n-        when(ctx.getPluginFileAccess()).thenReturn(access);\n+TransformationContext ctx = mock(TransformationContext.class);\n+when(ctx.getPluginFileAccess()).thenReturn(access);\n         when(ctx.getLogger((Class<?>) any(Class.class))).thenReturn(LoggerFactory.getLogger(\"Mock Logger\"));\n-        \n-        imageBuilder = instantiateImageBuilder(ctx);\n-        logger.info(\"Building Image\");\n+imageBuilder = instantiateImageBuilder(ctx);\n+logger.info(\"Building Image\");\n         imageBuilder.buildImage();\n         logger.info(\"Storing Image\");\n         imageBuilder.storeImage();\n-        \n-        validate(imageBuilder.getTag());\n-    }\n-    \n-    public void init() throws Exception{\n-        // noop for this test\n+validate(imageBuilder.getTag());\n+        }\n+\n+public void init() throws Exception {\n+    // noop for this test\n     }\n \n     @After\n@@ -68,10 +63,10 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n             context\n         );\n     }\n-    \n-    public void validate(String tag) throws Exception {\n-        File d = new File(access.getAbsolutePath(SHA_TEST_FILE_NAME));\n+\n+public void validate(String tag) throws Exception {\n+    File d = new File(access.getAbsolutePath(SHA_TEST_FILE_NAME));\n \n         assertTrue(d.length() > 120 * 1024 * 1024);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "67",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "69",
                    "column": "36",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "69",
                    "column": "42",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/codebuff/22/ExportingImageBuilderIT.java\nindex fd616836029..2743c01b612 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/codebuff/22/ExportingImageBuilderIT.java\n@@ -1,12 +1,10 @@\n package org.opentosca.toscana.plugins.kubernetes.docker.image;\n \n import java.io.File;\n-\n import org.opentosca.toscana.IntegrationTest;\n import org.opentosca.toscana.core.transformation.TransformationContext;\n import org.opentosca.toscana.plugins.kubernetes.docker.BaseDockerfileTest;\n import org.opentosca.toscana.plugins.kubernetes.docker.DockerTestUtils;\n-\n import org.junit.After;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n@@ -24,34 +22,29 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n \n     private static final Logger logger = LoggerFactory.getLogger(ExportingImageBuilderIT.class);\n     private static final String SHA_TEST_FILE_NAME = \"sha-test.tar.gz\";\n-\n     protected String shaDigest;\n-    \n     protected ImageBuilder imageBuilder;\n-    \n     @Test\n     public void testBuildShaImage() throws Exception {\n         assumeTrue(DockerTestUtils.isDockerAvailable());\n         //Create Dockerfile and the corresponding Binary file\n         shaDigest = buildSHADockerfile();\n-\n         init();\n-        \n         TransformationContext ctx = mock(TransformationContext.class);\n         when(ctx.getPluginFileAccess()).thenReturn(access);\n         when(ctx.getLogger((Class<?>) any(Class.class))).thenReturn(LoggerFactory.getLogger(\"Mock Logger\"));\n-        \n         imageBuilder = instantiateImageBuilder(ctx);\n         logger.info(\"Building Image\");\n         imageBuilder.buildImage();\n         logger.info(\"Storing Image\");\n         imageBuilder.storeImage();\n-        \n         validate(imageBuilder.getTag());\n     }\n-    \n-    public void init() throws Exception{\n+\n+\n+    public void init() throws Exception {\n         // noop for this test\n+\n     }\n \n     @After\n@@ -60,18 +53,19 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n         imageBuilder.cleanup();\n     }\n \n+\n     public ImageBuilder instantiateImageBuilder(TransformationContext context) throws Exception {\n         return new ExportingImageBuilder(\n-            SHA_TEST_FILE_NAME,\n-            \"toscana/sha256-test:test\",\n-            WORKING_DIR_SUBFOLDER_NAME,\n-            context\n-        );\n+                   SHA_TEST_FILE_NAME,\n+                   \"toscana/sha256-test:test\",\n+                   WORKING_DIR_SUBFOLDER_NAME,\n+                   context\n+               );\n     }\n-    \n+\n+\n     public void validate(String tag) throws Exception {\n         File d = new File(access.getAbsolutePath(SHA_TEST_FILE_NAME));\n-\n-        assertTrue(d.length() > 120 * 1024 * 1024);\n+        assertTrue(d.length() > 120* 1024* 1024);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_random/22/ExportingImageBuilderIT.java\nindex fd616836029..d4931a0bf81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_random/22/ExportingImageBuilderIT.java\n@@ -50,7 +50,7 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n         validate(imageBuilder.getTag());\n     }\n     \n-    public void init() throws Exception{\n+    public void init() throws Exception {\n         // noop for this test\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_three_grams/22/ExportingImageBuilderIT.java\nindex fd616836029..d4931a0bf81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/errored/1/22/ExportingImageBuilderIT.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StuPro-TOSCAna-TOSCAna/styler_three_grams/22/ExportingImageBuilderIT.java\n@@ -50,7 +50,7 @@ public class ExportingImageBuilderIT extends BaseDockerfileTest {\n         validate(imageBuilder.getTag());\n     }\n     \n-    public void init() throws Exception{\n+    public void init() throws Exception {\n         // noop for this test\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}