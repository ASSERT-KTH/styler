{
    "project_name": "wayshall-onetwo",
    "error_id": "72",
    "information": {
        "errors": [
            {
                "line": "34",
                "column": "33",
                "severity": "error",
                "message": "'}' at column 5 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t\t\t\tbeanDefinition.getMetadata().getClassName(), classLoader);\n\t\t\t\t\treturn !target.isAnnotation();\n\t\t\t\t}\n\t\t\t\tcatch (Exception ex) {\n\t\t\t\t\tthis.logger.error(\"Could not load target class: \" + beanDefinition.getMetadata().getClassName(), ex);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\nindex 2db2550b6e0..fc78ef0c172 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n@@ -31,8 +31,7 @@ public class IgnoreAnnotationClassPathScanningCandidateComponentProvider extends\n \t\t\t\t\tClass<?> target = ClassUtils.forName(\n \t\t\t\t\t\t\tbeanDefinition.getMetadata().getClassName(), classLoader);\n \t\t\t\t\treturn !target.isAnnotation();\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t} catch (Exception ex) {\n \t\t\t\t\tthis.logger.error(\"Could not load target class: \" + beanDefinition.getMetadata().getClassName(), ex);\n \n \t\t\t\t}\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\nindex 2db2550b6e0..944866b290c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n@@ -12,44 +12,43 @@ import org.springframework.util.ClassUtils;\n  */\n public class IgnoreAnnotationClassPathScanningCandidateComponentProvider extends ClassPathScanningCandidateComponentProvider {\n \n-\tprivate ClassLoader classLoader;\n-\t\n-\tpublic IgnoreAnnotationClassPathScanningCandidateComponentProvider(boolean useDefaultFilters) {\n-\t\tsuper(useDefaultFilters);\n-\t}\n-\t\n-\t@Override\n-\tprotected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n-\t\tif (beanDefinition.getMetadata().isIndependent()) {\n-\t\t\t// TODO until SPR-11711 will be resolved\n-\t\t\tif (beanDefinition.getMetadata().isInterface()\n-\t\t\t\t\t&& beanDefinition.getMetadata()\n-\t\t\t\t\t\t\t.getInterfaceNames().length == 1\n-\t\t\t\t\t&& Annotation.class.getName().equals(beanDefinition\n-\t\t\t\t\t\t\t.getMetadata().getInterfaceNames()[0])) {\n-\t\t\t\ttry {\n-\t\t\t\t\tClass<?> target = ClassUtils.forName(\n-\t\t\t\t\t\t\tbeanDefinition.getMetadata().getClassName(), classLoader);\n-\t\t\t\t\treturn !target.isAnnotation();\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception ex) {\n-\t\t\t\t\tthis.logger.error(\"Could not load target class: \" + beanDefinition.getMetadata().getClassName(), ex);\n-\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn false;\n-\n-\t}\n-\n-\tpublic ClassLoader getClassLoader() {\n-\t\treturn classLoader;\n-\t}\n-\n-\tpublic void setClassLoader(ClassLoader classLoader) {\n-\t\tthis.classLoader = classLoader;\n-\t}\n-\t\n-\t\n+  private ClassLoader classLoader;\n+\n+  public IgnoreAnnotationClassPathScanningCandidateComponentProvider(boolean useDefaultFilters) {\n+    super(useDefaultFilters);\n+  }\n+\n+  @Override\n+  protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n+    if (beanDefinition.getMetadata().isIndependent()) {\n+      // TODO until SPR-11711 will be resolved\n+      if (beanDefinition.getMetadata().isInterface()\n+        && beanDefinition.getMetadata()\n+        .getInterfaceNames().length == 1\n+        && Annotation.class.getName().equals(beanDefinition\n+        .getMetadata().getInterfaceNames()[0])) {\n+        try {\n+          Class<?> target = ClassUtils.forName(\n+            beanDefinition.getMetadata().getClassName(), classLoader);\n+          return !target.isAnnotation();\n+        } catch (Exception ex) {\n+          this.logger.error(\"Could not load target class: \" + beanDefinition.getMetadata().getClassName(), ex);\n+\n+        }\n+      }\n+      return true;\n+    }\n+    return false;\n+\n+  }\n+\n+  public ClassLoader getClassLoader() {\n+    return classLoader;\n+  }\n+\n+  public void setClassLoader(ClassLoader classLoader) {\n+    this.classLoader = classLoader;\n+  }\n+\n+\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_random/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\nindex 2db2550b6e0..fc78ef0c172 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_random/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n@@ -31,8 +31,7 @@ public class IgnoreAnnotationClassPathScanningCandidateComponentProvider extends\n \t\t\t\t\tClass<?> target = ClassUtils.forName(\n \t\t\t\t\t\t\tbeanDefinition.getMetadata().getClassName(), classLoader);\n \t\t\t\t\treturn !target.isAnnotation();\n-\t\t\t\t}\n-\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t} catch (Exception ex) {\n \t\t\t\t\tthis.logger.error(\"Could not load target class: \" + beanDefinition.getMetadata().getClassName(), ex);\n \n \t\t\t\t}\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "33",
                    "column": "70",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "33",
                    "column": "71",
                    "severity": "error",
                    "message": "'}' at column 36 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "33",
                    "column": "71",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_three_grams/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\nindex 2db2550b6e0..283e40eba5d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/styler_three_grams/72/IgnoreAnnotationClassPathScanningCandidateComponentProvider.java\n@@ -30,8 +30,7 @@ public class IgnoreAnnotationClassPathScanningCandidateComponentProvider extends\n \t\t\t\ttry {\n \t\t\t\t\tClass<?> target = ClassUtils.forName(\n \t\t\t\t\t\t\tbeanDefinition.getMetadata().getClassName(), classLoader);\n-\t\t\t\t\treturn !target.isAnnotation();\n-\t\t\t\t}\n+\t\t\t\t\treturn !target.isAnnotation();}\n \t\t\t\tcatch (Exception ex) {\n \t\t\t\t\tthis.logger.error(\"Could not load target class: \" + beanDefinition.getMetadata().getClassName(), ex);\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}