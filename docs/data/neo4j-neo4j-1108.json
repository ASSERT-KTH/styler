{
    "project_name": "neo4j-neo4j",
    "error_id": "1108",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1108/FusionIndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1108/FusionIndexAccessor.java\nindex 89b75a69df9..4921297417d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1108/FusionIndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1108/FusionIndexAccessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.nio.file.Path;\n@@ -49,12 +50,12 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     private final IndexDescriptor descriptor;\n     private final IndexFiles indexFiles;\n \n-    FusionIndexAccessor( SlotSelector slotSelector,\n-            InstanceSelector<IndexAccessor> instanceSelector,\n-            IndexDescriptor descriptor,\n-            IndexFiles indexFiles )\n+    FusionIndexAccessor(SlotSelector slotSelector,\n+                        InstanceSelector<IndexAccessor> instanceSelector,\n+                        IndexDescriptor descriptor,\n+                        IndexFiles indexFiles)\n     {\n-        super( slotSelector, instanceSelector );\n+        super(slotSelector, instanceSelector);\n         this.descriptor = descriptor;\n         this.indexFiles = indexFiles;\n     }\n@@ -62,58 +63,58 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     @Override\n     public void drop()\n     {\n-        instanceSelector.forAll( IndexAccessor::drop );\n+        instanceSelector.forAll(IndexAccessor::drop);\n         indexFiles.clear();\n     }\n \n     @Override\n-    public IndexUpdater newUpdater( IndexUpdateMode mode, PageCursorTracer cursorTracer )\n+    public IndexUpdater newUpdater(IndexUpdateMode mode, PageCursorTracer cursorTracer)\n     {\n-        LazyInstanceSelector<IndexUpdater> updaterSelector = new LazyInstanceSelector<>( slot ->\n-                instanceSelector.select( slot ).newUpdater( mode, cursorTracer ) );\n-        return new FusionIndexUpdater( slotSelector, updaterSelector );\n+        LazyInstanceSelector<IndexUpdater> updaterSelector = new LazyInstanceSelector<>(slot ->\n+          instanceSelector.select(slot).newUpdater(mode, cursorTracer));\n+        return new FusionIndexUpdater(slotSelector, updaterSelector);\n     }\n \n     @Override\n-    public void force( IOLimiter ioLimiter, PageCursorTracer cursorTracer )\n+    public void force(IOLimiter ioLimiter, PageCursorTracer cursorTracer)\n     {\n-        instanceSelector.forAll( accessor -> accessor.force( ioLimiter, cursorTracer ) );\n+        instanceSelector.forAll(accessor -> accessor.force(ioLimiter, cursorTracer));\n     }\n \n     @Override\n     public void refresh()\n     {\n-        instanceSelector.forAll( IndexAccessor::refresh );\n+        instanceSelector.forAll(IndexAccessor::refresh);\n     }\n \n     @Override\n     public void close()\n     {\n-        instanceSelector.close( IndexAccessor::close );\n+        instanceSelector.close(IndexAccessor::close);\n     }\n \n     @Override\n     public IndexReader newReader()\n     {\n-        LazyInstanceSelector<IndexReader> readerSelector = new LazyInstanceSelector<>( slot -> instanceSelector.select( slot ).newReader() );\n-        return new FusionIndexReader( slotSelector, readerSelector, descriptor );\n+        LazyInstanceSelector<IndexReader> readerSelector = new LazyInstanceSelector<>(slot -> instanceSelector.select(slot).newReader());\n+        return new FusionIndexReader(slotSelector, readerSelector, descriptor);\n     }\n \n     @Override\n-    public BoundedIterable<Long> newAllEntriesReader( long fromIdInclusive, long toIdExclusive, PageCursorTracer cursorTracer )\n+    public BoundedIterable<Long> newAllEntriesReader(long fromIdInclusive, long toIdExclusive, PageCursorTracer cursorTracer)\n     {\n         Iterable<BoundedIterable<Long>> entries =\n-                instanceSelector.transform( indexAccessor -> indexAccessor.newAllEntriesReader( fromIdInclusive, toIdExclusive, cursorTracer ) );\n+          instanceSelector.transform(indexAccessor -> indexAccessor.newAllEntriesReader(fromIdInclusive, toIdExclusive, cursorTracer));\n         return new BoundedIterable<>()\n         {\n             @Override\n             public long maxCount()\n             {\n                 long sum = 0;\n-                for ( BoundedIterable entry : entries )\n+                for (BoundedIterable entry : entries)\n                 {\n                     long maxCount = entry.maxCount();\n-                    if ( maxCount == UNKNOWN_MAX_COUNT )\n+                    if (maxCount == UNKNOWN_MAX_COUNT)\n                     {\n                         return UNKNOWN_MAX_COUNT;\n                     }\n@@ -125,13 +126,13 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n             @Override\n             public void close() throws Exception\n             {\n-                forAll( BoundedIterable::close, entries );\n+                forAll(BoundedIterable::close, entries);\n             }\n \n             @Override\n             public Iterator<Long> iterator()\n             {\n-                return Iterables.concat( entries ).iterator();\n+                return Iterables.concat(entries).iterator();\n             }\n         };\n     }\n@@ -139,44 +140,44 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n     @Override\n     public ResourceIterator<Path> snapshotFiles()\n     {\n-        return concatResourceIterators( instanceSelector.transform( IndexAccessor::snapshotFiles ).iterator() );\n+        return concatResourceIterators(instanceSelector.transform(IndexAccessor::snapshotFiles).iterator());\n     }\n \n     @Override\n-    public Map<String,Value> indexConfig()\n+    public Map<String, Value> indexConfig()\n     {\n-        Map<String,Value> indexConfig = new HashMap<>();\n-        instanceSelector.transform( IndexAccessor::indexConfig ).forEach( source -> IndexConfigProvider.putAllNoOverwrite( indexConfig, source ) );\n+        Map<String, Value> indexConfig = new HashMap<>();\n+        instanceSelector.transform(IndexAccessor::indexConfig).forEach(source -> IndexConfigProvider.putAllNoOverwrite(indexConfig, source));\n         return indexConfig;\n     }\n \n     @Override\n-    public void verifyDeferredConstraints( NodePropertyAccessor nodePropertyAccessor ) throws IndexEntryConflictException\n+    public void verifyDeferredConstraints(NodePropertyAccessor nodePropertyAccessor) throws IndexEntryConflictException\n     {\n-        for ( IndexSlot slot : IndexSlot.values() )\n+        for (IndexSlot slot : IndexSlot.values())\n         {\n-            instanceSelector.select( slot ).verifyDeferredConstraints( nodePropertyAccessor );\n+            instanceSelector.select(slot).verifyDeferredConstraints(nodePropertyAccessor);\n         }\n     }\n \n     @Override\n-    public void validateBeforeCommit( long entityId, Value[] tuple )\n+    public void validateBeforeCommit(long entityId, Value[] tuple)\n     {\n-        instanceSelector.select( slotSelector.selectSlot( tuple, CATEGORY_OF ) ).validateBeforeCommit( entityId, tuple );\n+        instanceSelector.select(slotSelector.selectSlot(tuple, CATEGORY_OF)).validateBeforeCommit(entityId, tuple);\n     }\n \n     @Override\n-    public boolean consistencyCheck( ReporterFactory reporterFactory, PageCursorTracer cursorTracer )\n+    public boolean consistencyCheck(ReporterFactory reporterFactory, PageCursorTracer cursorTracer)\n     {\n-        return FusionIndexBase.consistencyCheck( instanceSelector.instances.values(), reporterFactory, cursorTracer );\n+        return FusionIndexBase.consistencyCheck(instanceSelector.instances.values(), reporterFactory, cursorTracer);\n     }\n \n     @Override\n-    public long estimateNumberOfEntries( PageCursorTracer cursorTracer )\n+    public long estimateNumberOfEntries(PageCursorTracer cursorTracer)\n     {\n-        List<Long> counts = instanceSelector.transform( accessor -> accessor.estimateNumberOfEntries( cursorTracer ) );\n-        return counts.stream().anyMatch( count -> count == UNKNOWN_NUMBER_OF_ENTRIES )\n-               ? UNKNOWN_NUMBER_OF_ENTRIES\n-               : counts.stream().mapToLong( Long::longValue ).sum();\n+        List<Long> counts = instanceSelector.transform(accessor -> accessor.estimateNumberOfEntries(cursorTracer));\n+        return counts.stream().anyMatch(count -> count == UNKNOWN_NUMBER_OF_ENTRIES)\n+          ? UNKNOWN_NUMBER_OF_ENTRIES\n+          : counts.stream().mapToLong(Long::longValue).sum();\n     }\n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1108/FusionIndexAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1108/FusionIndexAccessor.java\nindex 89b75a69df9..e7e85cac827 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1108/FusionIndexAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1108/FusionIndexAccessor.java\n@@ -179,4 +179,4 @@ class FusionIndexAccessor extends FusionIndexBase<IndexAccessor> implements Inde\n                ? UNKNOWN_NUMBER_OF_ENTRIES\n                : counts.stream().mapToLong( Long::longValue ).sum();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}