{
    "project_name": "neo4j-neo4j",
    "error_id": "1095",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1095/TransactionStatusResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1095/TransactionStatusResult.java\nindex 1a3984a6a31..76e70b8135f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1095/TransactionStatusResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1095/TransactionStatusResult.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.procedure.builtin;\n \n import java.time.ZoneId;\n@@ -32,7 +33,7 @@ import org.neo4j.kernel.impl.api.TransactionExecutionStatistic;\n import static java.lang.String.format;\n import static org.apache.commons.lang3.StringUtils.EMPTY;\n \n-@SuppressWarnings( \"WeakerAccess\" )\n+@SuppressWarnings(\"WeakerAccess\")\n public class TransactionStatusResult\n {\n     private static final String RUNNING_STATE = \"Running\";\n@@ -42,7 +43,7 @@ public class TransactionStatusResult\n \n     public final String transactionId;\n     public final String username;\n-    public final Map<String,Object> metaData;\n+    public final Map<String, Object> metaData;\n     public final String startTime;\n     public final String protocol;\n     public final String clientAddress;\n@@ -53,7 +54,7 @@ public class TransactionStatusResult\n \n     public final long activeLockCount;\n     public final String status;\n-    public Map<String,Object> resourceInformation;\n+    public Map<String, Object> resourceInformation;\n \n     public final long elapsedTimeMillis;\n     public final Long cpuTimeMillis;\n@@ -63,24 +64,30 @@ public class TransactionStatusResult\n     public final Long allocatedDirectBytes;\n     public final long pageHits;\n     public final long pageFaults;\n-    /** @since Neo4j 3.5 */\n+    /**\n+     * @since Neo4j 3.5\n+     */\n     public final String connectionId;\n     public final String initializationStackTrace;\n-    /** @since Neo4j 4.0 */\n+    /**\n+     * @since Neo4j 4.0\n+     */\n     public final String database;\n-    /** @since Neo4j 4.1 */\n+    /**\n+     * @since Neo4j 4.1\n+     */\n     public final Long estimatedUsedHeapMemory;\n \n-    public TransactionStatusResult( String database, KernelTransactionHandle transaction,\n-            TransactionDependenciesResolver transactionDependenciesResolver,\n-            Map<KernelTransactionHandle,Optional<QuerySnapshot>> handleSnapshotsMap, ZoneId zoneId ) throws InvalidArgumentsException\n+    public TransactionStatusResult(String database, KernelTransactionHandle transaction,\n+                                   TransactionDependenciesResolver transactionDependenciesResolver,\n+                                   Map<KernelTransactionHandle, Optional<QuerySnapshot>> handleSnapshotsMap, ZoneId zoneId) throws InvalidArgumentsException\n     {\n         this.database = database;\n-        this.transactionId = new TransactionId( database, transaction.getUserTransactionId() ).toString();\n+        this.transactionId = new TransactionId(database, transaction.getUserTransactionId()).toString();\n         this.username = transaction.subject().username();\n-        this.startTime = ProceduresTimeFormatHelper.formatTime( transaction.startTime(), zoneId );\n+        this.startTime = ProceduresTimeFormatHelper.formatTime(transaction.startTime(), zoneId);\n         this.activeLockCount = transaction.activeLocks().count();\n-        Optional<QuerySnapshot> querySnapshot = handleSnapshotsMap.get( transaction );\n+        Optional<QuerySnapshot> querySnapshot = handleSnapshotsMap.get(transaction);\n         TransactionExecutionStatistic statistic = transaction.transactionStatistic();\n         elapsedTimeMillis = statistic.getElapsedTimeMillis();\n         cpuTimeMillis = statistic.getCpuTimeMillis();\n@@ -92,42 +99,40 @@ public class TransactionStatusResult\n         pageHits = statistic.getPageHits();\n         pageFaults = statistic.getPageFaults();\n \n-        if ( querySnapshot.isPresent() )\n+        if (querySnapshot.isPresent())\n         {\n             QuerySnapshot snapshot = querySnapshot.get();\n-            this.currentQueryId = new QueryId( snapshot.internalQueryId() ).toString();\n-            this.currentQuery = snapshot.obfuscatedQueryText().orElse( null );\n-        }\n-        else\n+            this.currentQueryId = new QueryId(snapshot.internalQueryId()).toString();\n+            this.currentQuery = snapshot.obfuscatedQueryText().orElse(null);\n+        } else\n         {\n             this.currentQueryId = EMPTY;\n             this.currentQuery = EMPTY;\n         }\n \n         var clientInfo = transaction.clientInfo();\n-        this.protocol = clientInfo.map( ClientConnectionInfo::protocol ).orElse( EMPTY );\n-        this.clientAddress = clientInfo.map( ClientConnectionInfo::clientAddress ).orElse( EMPTY );\n-        this.requestUri = clientInfo.map( ClientConnectionInfo::requestURI ).orElse( EMPTY ) ;\n-        this.connectionId = clientInfo.map( ClientConnectionInfo::connectionId ).orElse( EMPTY );\n-        this.resourceInformation = transactionDependenciesResolver.describeBlockingLocks( transaction );\n-        this.status = getStatus( transaction, transactionDependenciesResolver );\n+        this.protocol = clientInfo.map(ClientConnectionInfo::protocol).orElse(EMPTY);\n+        this.clientAddress = clientInfo.map(ClientConnectionInfo::clientAddress).orElse(EMPTY);\n+        this.requestUri = clientInfo.map(ClientConnectionInfo::requestURI).orElse(EMPTY);\n+        this.connectionId = clientInfo.map(ClientConnectionInfo::connectionId).orElse(EMPTY);\n+        this.resourceInformation = transactionDependenciesResolver.describeBlockingLocks(transaction);\n+        this.status = getStatus(transaction, transactionDependenciesResolver);\n         this.metaData = transaction.getMetaData();\n         this.initializationStackTrace = transaction.transactionInitialisationTrace().getTrace();\n     }\n \n-    private static String getStatus( KernelTransactionHandle handle, TransactionDependenciesResolver transactionDependenciesResolver )\n+    private static String getStatus(KernelTransactionHandle handle, TransactionDependenciesResolver transactionDependenciesResolver)\n     {\n-        return handle.terminationReason().map( reason -> format( TERMINATED_STATE, reason.code() ) )\n-                .orElseGet( () -> getExecutingStatus( handle, transactionDependenciesResolver ) );\n+        return handle.terminationReason().map(reason -> format(TERMINATED_STATE, reason.code()))\n+          .orElseGet(() -> getExecutingStatus(handle, transactionDependenciesResolver));\n     }\n \n-    private static String getExecutingStatus( KernelTransactionHandle handle, TransactionDependenciesResolver transactionDependenciesResolver )\n+    private static String getExecutingStatus(KernelTransactionHandle handle, TransactionDependenciesResolver transactionDependenciesResolver)\n     {\n-        if ( transactionDependenciesResolver.isBlocked( handle ) )\n+        if (transactionDependenciesResolver.isBlocked(handle))\n         {\n-            return BLOCKED_STATE + transactionDependenciesResolver.describeBlockingTransactions( handle );\n-        }\n-        else if ( handle.isClosing() )\n+            return BLOCKED_STATE + transactionDependenciesResolver.describeBlockingTransactions(handle);\n+        } else if (handle.isClosing())\n         {\n             return CLOSING_STATE;\n         }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}