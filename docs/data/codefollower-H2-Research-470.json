{
    "project_name": "codefollower-H2-Research",
    "error_id": "470",
    "information": {
        "errors": [
            {
                "line": "252",
                "column": "96",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "            NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n            if (networkConnectionInfo != null) {\n                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n                        .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n                String clientInfo = networkConnectionInfo.getClientInfo();\n                if (clientInfo != null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/470/DatabaseInfo.java\nindex 824b9e5e131..41d10127514 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/470/DatabaseInfo.java\n@@ -249,8 +249,9 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n                     append('\\n');\n             NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n             if (networkConnectionInfo != null) {\n-                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n-                        .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n+                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n')\n+                        //\n+                .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n                 String clientInfo = networkConnectionInfo.getClientInfo();\n                 if (clientInfo != null) {\n                     buff.append(\"clientInfo: \").append(clientInfo).append('\\n');\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "257",
                    "column": "88",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/470/DatabaseInfo.java\nindex 824b9e5e131..f067ed101dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/470/DatabaseInfo.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jmx;\n \n import java.lang.management.ManagementFactory;\n@@ -12,9 +13,11 @@ import java.util.HashMap;\n import java.util.Hashtable;\n import java.util.Map;\n import java.util.TreeMap;\n+\n import javax.management.JMException;\n import javax.management.MBeanServer;\n import javax.management.ObjectName;\n+\n import org.h2.command.Command;\n import org.h2.engine.ConnectionInfo;\n import org.h2.engine.Constants;\n@@ -32,255 +35,257 @@ import org.h2.util.NetworkConnectionInfo;\n  */\n public class DatabaseInfo implements DatabaseInfoMBean {\n \n-    private static final Map<String, ObjectName> MBEANS = new HashMap<>();\n+  private static final Map<String, ObjectName> MBEANS = new HashMap<>();\n \n-    /** Database. */\n-    private final Database database;\n+  /**\n+   * Database.\n+   */\n+  private final Database database;\n \n-    private DatabaseInfo(Database database) {\n-        if (database == null) {\n-            throw new IllegalArgumentException(\"Argument 'database' must not be null\");\n-        }\n-        this.database = database;\n+  private DatabaseInfo(Database database) {\n+    if (database == null) {\n+      throw new IllegalArgumentException(\"Argument 'database' must not be null\");\n     }\n+    this.database = database;\n+  }\n \n-    /**\n-     * Returns a JMX new ObjectName instance.\n-     *\n-     * @param name name of the MBean\n-     * @param path the path\n-     * @return a new ObjectName instance\n-     * @throws JMException if the ObjectName could not be created\n-     */\n-    private static ObjectName getObjectName(String name, String path)\n-            throws JMException {\n-        name = name.replace(':', '_');\n-        path = path.replace(':', '_');\n-        Hashtable<String, String> map = new Hashtable<>();\n-        map.put(\"name\", name);\n-        map.put(\"path\", path);\n-        return new ObjectName(\"org.h2\", map);\n-    }\n+  /**\n+   * Returns a JMX new ObjectName instance.\n+   *\n+   * @param name name of the MBean\n+   * @param path the path\n+   * @return a new ObjectName instance\n+   * @throws JMException if the ObjectName could not be created\n+   */\n+  private static ObjectName getObjectName(String name, String path)\n+      throws JMException {\n+    name = name.replace(':', '_');\n+    path = path.replace(':', '_');\n+    Hashtable<String, String> map = new Hashtable<>();\n+    map.put(\"name\", name);\n+    map.put(\"path\", path);\n+    return new ObjectName(\"org.h2\", map);\n+  }\n \n-    /**\n-     * Registers an MBean for the database.\n-     *\n-     * @param connectionInfo connection info\n-     * @param database database\n-     */\n-    public static void registerMBean(ConnectionInfo connectionInfo,\n-            Database database) throws JMException {\n-        String path = connectionInfo.getName();\n-        if (!MBEANS.containsKey(path)) {\n-            MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-            String name = database.getShortName();\n-            ObjectName mbeanObjectName = getObjectName(name, path);\n-            MBEANS.put(path, mbeanObjectName);\n-            DatabaseInfo info = new DatabaseInfo(database);\n-            //\u7528\u4e8e\u4ece\"/org/h2/res/javadoc.properties\"\u4e2d\u53d6\u51fa\u5c5e\u6027\u7684\u63cf\u8ff0\u6587\u672c\n-            Object mbean = new DocumentedMBean(info, DatabaseInfoMBean.class);\n-            mbeanServer.registerMBean(mbean, mbeanObjectName);\n-        }\n+  /**\n+   * Registers an MBean for the database.\n+   *\n+   * @param connectionInfo connection info\n+   * @param database       database\n+   */\n+  public static void registerMBean(ConnectionInfo connectionInfo,\n+                                   Database database) throws JMException {\n+    String path = connectionInfo.getName();\n+    if (!MBEANS.containsKey(path)) {\n+      MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n+      String name = database.getShortName();\n+      ObjectName mbeanObjectName = getObjectName(name, path);\n+      MBEANS.put(path, mbeanObjectName);\n+      DatabaseInfo info = new DatabaseInfo(database);\n+      //\u7528\u4e8e\u4ece\"/org/h2/res/javadoc.properties\"\u4e2d\u53d6\u51fa\u5c5e\u6027\u7684\u63cf\u8ff0\u6587\u672c\n+      Object mbean = new DocumentedMBean(info, DatabaseInfoMBean.class);\n+      mbeanServer.registerMBean(mbean, mbeanObjectName);\n     }\n+  }\n \n-    /**\n-     * Unregisters the MBean for the database if one is registered.\n-     *\n-     * @param name database name\n-     */\n-    public static void unregisterMBean(String name) throws Exception {\n-        ObjectName mbeanObjectName = MBEANS.remove(name);\n-        if (mbeanObjectName != null) {\n-            MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n-            mbeanServer.unregisterMBean(mbeanObjectName);\n-        }\n+  /**\n+   * Unregisters the MBean for the database if one is registered.\n+   *\n+   * @param name database name\n+   */\n+  public static void unregisterMBean(String name) throws Exception {\n+    ObjectName mbeanObjectName = MBEANS.remove(name);\n+    if (mbeanObjectName != null) {\n+      MBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();\n+      mbeanServer.unregisterMBean(mbeanObjectName);\n     }\n+  }\n \n-    @Override\n-    public boolean isExclusive() {\n-        return database.getExclusiveSession() != null;\n-    }\n+  @Override\n+  public boolean isExclusive() {\n+    return database.getExclusiveSession() != null;\n+  }\n \n-    @Override\n-    public boolean isReadOnly() {\n-        return database.isReadOnly();\n-    }\n+  @Override\n+  public boolean isReadOnly() {\n+    return database.isReadOnly();\n+  }\n \n-    @Override\n-    public String getMode() {\n-        return database.getMode().getName();\n-    }\n+  @Override\n+  public String getMode() {\n+    return database.getMode().getName();\n+  }\n \n-    @Override\n-    public boolean isMultiThreaded() {\n-        return database.isMultiThreaded();\n-    }\n+  @Override\n+  public boolean isMultiThreaded() {\n+    return database.isMultiThreaded();\n+  }\n \n-    @Deprecated\n-    @Override\n-    public boolean isMvcc() {\n-        return database.isMVStore();\n-    }\n+  @Deprecated\n+  @Override\n+  public boolean isMvcc() {\n+    return database.isMVStore();\n+  }\n \n-    @Override\n-    public int getLogMode() {\n-        return database.getLogMode();\n-    }\n+  @Override\n+  public int getLogMode() {\n+    return database.getLogMode();\n+  }\n \n-    @Override\n-    public void setLogMode(int value) {\n-        database.setLogMode(value);\n-    }\n+  @Override\n+  public void setLogMode(int value) {\n+    database.setLogMode(value);\n+  }\n \n-    @Override\n-    public int getTraceLevel() {\n-        return database.getTraceSystem().getLevelFile();\n-    }\n+  @Override\n+  public int getTraceLevel() {\n+    return database.getTraceSystem().getLevelFile();\n+  }\n \n-    @Override\n-    public void setTraceLevel(int level) {\n-        database.getTraceSystem().setLevelFile(level);\n-    }\n+  @Override\n+  public void setTraceLevel(int level) {\n+    database.getTraceSystem().setLevelFile(level);\n+  }\n \n-    @Override\n-    public long getFileWriteCountTotal() {\n-        if (!database.isPersistent()) {\n-            return 0;\n-        }\n-        PageStore p = database.getPageStore();\n-        if (p != null) {\n-            return p.getWriteCountTotal();\n-        }\n-        // TODO remove this method when removing the page store\n-        // (the MVStore doesn't support it)\n-        return 0;\n+  @Override\n+  public long getFileWriteCountTotal() {\n+    if (!database.isPersistent()) {\n+      return 0;\n     }\n-\n-    @Override\n-    public long getFileWriteCount() {\n-        if (!database.isPersistent()) {\n-            return 0;\n-        }\n-        PageStore p = database.getPageStore();\n-        if (p != null) {\n-            return p.getWriteCount();\n-        }\n-        return database.getStore().getMvStore().getFileStore().getReadCount();\n+    PageStore p = database.getPageStore();\n+    if (p != null) {\n+      return p.getWriteCountTotal();\n     }\n+    // TODO remove this method when removing the page store\n+    // (the MVStore doesn't support it)\n+    return 0;\n+  }\n \n-    @Override\n-    public long getFileReadCount() {\n-        if (!database.isPersistent()) {\n-            return 0;\n-        }\n-        PageStore p = database.getPageStore();\n-        if (p != null) {\n-            return p.getReadCount();\n-        }\n-        return database.getStore().getMvStore().getFileStore().getReadCount();\n+  @Override\n+  public long getFileWriteCount() {\n+    if (!database.isPersistent()) {\n+      return 0;\n+    }\n+    PageStore p = database.getPageStore();\n+    if (p != null) {\n+      return p.getWriteCount();\n     }\n+    return database.getStore().getMvStore().getFileStore().getReadCount();\n+  }\n \n-    @Override\n-    public long getFileSize() {\n-        if (!database.isPersistent()) {\n-            return 0;\n-        }\n-        PageStore p = database.getPageStore();\n-        if (p != null) {\n-            return p.getPageCount() * p.getPageSize() / 1024;\n-        }\n-        return database.getStore().getMvStore().getFileStore().size();\n+  @Override\n+  public long getFileReadCount() {\n+    if (!database.isPersistent()) {\n+      return 0;\n+    }\n+    PageStore p = database.getPageStore();\n+    if (p != null) {\n+      return p.getReadCount();\n     }\n+    return database.getStore().getMvStore().getFileStore().getReadCount();\n+  }\n \n-    @Override\n-    public int getCacheSizeMax() {\n-        if (!database.isPersistent()) {\n-            return 0;\n-        }\n-        PageStore p = database.getPageStore();\n-        if (p != null) {\n-            return p.getCache().getMaxMemory();\n-        }\n-        return database.getStore().getMvStore().getCacheSize() * 1024;\n+  @Override\n+  public long getFileSize() {\n+    if (!database.isPersistent()) {\n+      return 0;\n     }\n+    PageStore p = database.getPageStore();\n+    if (p != null) {\n+      return p.getPageCount() * p.getPageSize() / 1024;\n+    }\n+    return database.getStore().getMvStore().getFileStore().size();\n+  }\n \n-    @Override\n-    public void setCacheSizeMax(int kb) {\n-        if (database.isPersistent()) {\n-            database.setCacheSize(kb);\n-        }\n+  @Override\n+  public int getCacheSizeMax() {\n+    if (!database.isPersistent()) {\n+      return 0;\n+    }\n+    PageStore p = database.getPageStore();\n+    if (p != null) {\n+      return p.getCache().getMaxMemory();\n     }\n+    return database.getStore().getMvStore().getCacheSize() * 1024;\n+  }\n \n-    @Override\n-    public int getCacheSize() {\n-        if (!database.isPersistent()) {\n-            return 0;\n-        }\n-        PageStore p = database.getPageStore();\n-        if (p != null) {\n-            return p.getCache().getMemory();\n-        }\n-        return database.getStore().getMvStore().getCacheSizeUsed() * 1024;\n+  @Override\n+  public void setCacheSizeMax(int kb) {\n+    if (database.isPersistent()) {\n+      database.setCacheSize(kb);\n     }\n+  }\n \n-    @Override\n-    public String getVersion() {\n-        return Constants.getFullVersion();\n+  @Override\n+  public int getCacheSize() {\n+    if (!database.isPersistent()) {\n+      return 0;\n     }\n+    PageStore p = database.getPageStore();\n+    if (p != null) {\n+      return p.getCache().getMemory();\n+    }\n+    return database.getStore().getMvStore().getCacheSizeUsed() * 1024;\n+  }\n \n-    @Override\n-    public String listSettings() {\n-        StringBuilder buff = new StringBuilder();\n-        for (Map.Entry<String, String> e :\n-                new TreeMap<>(\n-                database.getSettings().getSettings()).entrySet()) {\n-            buff.append(e.getKey()).append(\" = \").append(e.getValue()).append('\\n');\n-        }\n-        return buff.toString();\n+  @Override\n+  public String getVersion() {\n+    return Constants.getFullVersion();\n+  }\n+\n+  @Override\n+  public String listSettings() {\n+    StringBuilder buff = new StringBuilder();\n+    for (Map.Entry<String, String> e :\n+        new TreeMap<>(\n+            database.getSettings().getSettings()).entrySet()) {\n+      buff.append(e.getKey()).append(\" = \").append(e.getValue()).append('\\n');\n     }\n+    return buff.toString();\n+  }\n \n-    @Override\n-    public String listSessions() {\n-        StringBuilder buff = new StringBuilder();\n-        for (Session session : database.getSessions(false)) {\n-            buff.append(\"session id: \").append(session.getId());\n-            buff.append(\" user: \").\n-                    append(session.getUser().getName()).\n-                    append('\\n');\n-            NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n-            if (networkConnectionInfo != null) {\n-                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n-                        .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n-                String clientInfo = networkConnectionInfo.getClientInfo();\n-                if (clientInfo != null) {\n-                    buff.append(\"clientInfo: \").append(clientInfo).append('\\n');\n-                }\n-            }\n-            buff.append(\"connected: \").\n-                    append(new Timestamp(session.getSessionStart())).\n-                    append('\\n');\n-            Command command = session.getCurrentCommand();\n-            if (command != null) {\n-                buff.append(\"statement: \")\n-                        .append(command)\n-                        .append('\\n')\n-                        .append(\"started: \")\n-                        .append(session.getCurrentCommandStart().getString())\n-                        .append('\\n');\n-            }\n-            for (Table table : session.getLocks()) {\n-                if (table.isLockedExclusivelyBy(session)) {\n-                    buff.append(\"write lock on \");\n-                } else {\n-                    buff.append(\"read lock on \");\n-                }\n-                buff.append(table.getSchema().getName()).\n-                        append('.').append(table.getName()).\n-                        append('\\n');\n-            }\n-            buff.append('\\n');\n+  @Override\n+  public String listSessions() {\n+    StringBuilder buff = new StringBuilder();\n+    for (Session session : database.getSessions(false)) {\n+      buff.append(\"session id: \").append(session.getId());\n+      buff.append(\" user: \").\n+          append(session.getUser().getName()).\n+          append('\\n');\n+      NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n+      if (networkConnectionInfo != null) {\n+        buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n+            .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n+        String clientInfo = networkConnectionInfo.getClientInfo();\n+        if (clientInfo != null) {\n+          buff.append(\"clientInfo: \").append(clientInfo).append('\\n');\n+        }\n+      }\n+      buff.append(\"connected: \").\n+          append(new Timestamp(session.getSessionStart())).\n+          append('\\n');\n+      Command command = session.getCurrentCommand();\n+      if (command != null) {\n+        buff.append(\"statement: \")\n+            .append(command)\n+            .append('\\n')\n+            .append(\"started: \")\n+            .append(session.getCurrentCommandStart().getString())\n+            .append('\\n');\n+      }\n+      for (Table table : session.getLocks()) {\n+        if (table.isLockedExclusivelyBy(session)) {\n+          buff.append(\"write lock on \");\n+        } else {\n+          buff.append(\"read lock on \");\n         }\n-        return buff.toString();\n+        buff.append(table.getSchema().getName()).\n+            append('.').append(table.getName()).\n+            append('\\n');\n+      }\n+      buff.append('\\n');\n     }\n+    return buff.toString();\n+  }\n \n }\n",
            "diff_size": 260
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "252",
                    "column": "96",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/470/DatabaseInfo.java\nindex 824b9e5e131..69289393772 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/470/DatabaseInfo.java\n@@ -283,4 +283,4 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n         return buff.toString();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "252",
                    "column": "95",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/470/DatabaseInfo.java\nindex 824b9e5e131..85d5df97d76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/470/DatabaseInfo.java\n@@ -249,7 +249,7 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n                     append('\\n');\n             NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n             if (networkConnectionInfo != null) {\n-                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n+                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n')//\n                         .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n                 String clientInfo = networkConnectionInfo.getClientInfo();\n                 if (clientInfo != null) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/470/DatabaseInfo.java\nindex 824b9e5e131..41d10127514 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/470/DatabaseInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/470/DatabaseInfo.java\n@@ -249,8 +249,9 @@ public class DatabaseInfo implements DatabaseInfoMBean {\n                     append('\\n');\n             NetworkConnectionInfo networkConnectionInfo = session.getNetworkConnectionInfo();\n             if (networkConnectionInfo != null) {\n-                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n') //\n-                        .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n+                buff.append(\"server: \").append(networkConnectionInfo.getServer()).append('\\n')\n+                        //\n+                .append(\"clientAddr: \").append(networkConnectionInfo.getClient()).append('\\n');\n                 String clientInfo = networkConnectionInfo.getClientInfo();\n                 if (clientInfo != null) {\n                     buff.append(\"clientInfo: \").append(clientInfo).append('\\n');\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}