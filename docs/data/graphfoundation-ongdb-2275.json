{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2275",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "101",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "492",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "508",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "650",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "659",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "679",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "694",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "729",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "736",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "753",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "754",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "774",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "774",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "887",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "895",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "917",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "918",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "937",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "937",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "955",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "955",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "961",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "961",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "993",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "993",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "998",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1008",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1028",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1028",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1041",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1041",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1045",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1054",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1054",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1059",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1069",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1069",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1078",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1078",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1085",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1085",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1092",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1092",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1098",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1098",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1107",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1107",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1114",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1114",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1119",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1119",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1124",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1124",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1129",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1129",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1134",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1134",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1144",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1155",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1155",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1161",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1161",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1166",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1166",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1168",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1168",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1171",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1177",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1177",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1182",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1182",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1214",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1215",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1234",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1234",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1242",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1242",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1244",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1244",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1246",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1246",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1251",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1251",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1255",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1255",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1258",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1263",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1263",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1268",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1268",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1273",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1273",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1284",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1284",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1286",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1286",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1291",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1291",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1299",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1299",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1301",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1301",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1309",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1309",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1312",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1312",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1313",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1313",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1315",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1315",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1323",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1323",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2275/TreeNodeDynamicSize.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2275/TreeNodeDynamicSize.java\nindex f00cb000efc..ad56a609d01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2275/TreeNodeDynamicSize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2275/TreeNodeDynamicSize.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.util.Arrays;\n@@ -49,390 +50,390 @@ import static org.neo4j.index.internal.gbptree.TreeNode.Type.LEAF;\n /**\n  * # = empty space\n  * K* = offset to key or key and value\n- *\n+ * <p>\n  * LEAF\n  * [                                   HEADER   86B                                                   ]|[KEY_OFFSETS]##########[KEYS_VALUES]\n  * [NODETYPE][TYPE][GENERATION][KEYCOUNT][RIGHTSIBLING][LEFTSIBLING][SUCCESSOR][ALLOCOFFSET][DEADSPACE]|[K0*,K1*,K2*]->      <-[KV0,KV2,KV1]\n- *  0         1     2           6         10            34           58         82           84          86\n- *\n- *  INTERNAL\n+ * 0         1     2           6         10            34           58         82           84          86\n+ * <p>\n+ * INTERNAL\n  * [                                   HEADER   86B                                                   ]|[  KEY_OFFSET_CHILDREN  ]######[  KEYS  ]\n  * [NODETYPE][TYPE][GENERATION][KEYCOUNT][RIGHTSIBLING][LEFTSIBLING][SUCCESSOR][ALLOCOFFSET][DEADSPACE]|[C0,K0*,C1,K1*,C2,K2*,C3]->  <-[K2,K0,K1]\n- *  0         1     2           6         10            34           58         82           84          86\n- *\n+ * 0         1     2           6         10            34           58         82           84          86\n+ * <p>\n  * See {@link DynamicSizeUtil} for more detailed layout for individual offset array entries and key / key_value entries.\n  */\n-public class TreeNodeDynamicSize<KEY, VALUE> extends TreeNode<KEY,VALUE>\n+public class TreeNodeDynamicSize<KEY, VALUE> extends TreeNode<KEY, VALUE>\n {\n-    static final byte FORMAT_IDENTIFIER = 3;\n-    static final byte FORMAT_VERSION = 0;\n-\n-    /**\n-     * Concepts\n-     * Total space - The space available for data (pageSize - headerSize)\n-     * Active space - Space currently occupied by active data (not including dead keys)\n-     * Dead space - Space currently occupied by dead data that could be reclaimed by defragment\n-     * Alloc offset - Exact offset to leftmost key and thus the end of alloc space\n-     * Alloc space - The available space between offset array and data space\n-     *\n-     * TotalSpace  |----------------------------------------|\n-     * ActiveSpace |-----------|   +    |---------|  + |----|\n-     * DeadSpace                                  |----|\n-     * AllocSpace              |--------|\n-     * AllocOffset                      v\n-     *     [Header][OffsetArray]........[_________,XXXX,____] (_ = alive key, X = dead key)\n-     */\n-    private static final int BYTE_POS_ALLOCOFFSET = BASE_HEADER_LENGTH;\n-    private static final int BYTE_POS_DEADSPACE = BYTE_POS_ALLOCOFFSET + bytesPageOffset();\n-    private static final int HEADER_LENGTH_DYNAMIC = BYTE_POS_DEADSPACE + bytesPageOffset();\n-\n-    private static final int LEAST_NUMBER_OF_ENTRIES_PER_PAGE = 2;\n-    private static final int MINIMUM_ENTRY_SIZE_CAP = Long.SIZE;\n-    private final int keyValueSizeCap;\n-    private final PrimitiveIntStack deadKeysOffset = new PrimitiveIntStack();\n-    private final PrimitiveIntStack aliveKeysOffset = new PrimitiveIntStack();\n-    private final int maxKeyCount = pageSize / (bytesKeyOffset() + SIZE_KEY_SIZE + SIZE_VALUE_SIZE);\n-    private final int[] oldOffset = new int[maxKeyCount];\n-    private final int[] newOffset = new int[maxKeyCount];\n-    private final int totalSpace;\n-    private final int halfSpace;\n-\n-    TreeNodeDynamicSize( int pageSize, Layout<KEY,VALUE> layout )\n-    {\n-        super( pageSize, layout );\n-        totalSpace = pageSize - HEADER_LENGTH_DYNAMIC;\n-        halfSpace = totalSpace / 2;\n-        keyValueSizeCap = keyValueSizeCapFromPageSize( pageSize );\n-\n-        if ( keyValueSizeCap < MINIMUM_ENTRY_SIZE_CAP )\n-        {\n-            throw new MetadataMismatchException(\n-                    \"We need to fit at least %d key-value entries per page in leaves. To do that a key-value entry can be at most %dB \" +\n-                            \"with current page size of %dB. We require this cap to be at least %dB.\",\n-                    LEAST_NUMBER_OF_ENTRIES_PER_PAGE, keyValueSizeCap, pageSize, Long.SIZE );\n-        }\n-    }\n-\n-    @VisibleForTesting\n-    public static int keyValueSizeCapFromPageSize( int pageSize )\n-    {\n-        return (pageSize - HEADER_LENGTH_DYNAMIC) / LEAST_NUMBER_OF_ENTRIES_PER_PAGE - SIZE_TOTAL_OVERHEAD;\n-    }\n-\n-    @Override\n-    void writeAdditionalHeader( PageCursor cursor )\n-    {\n-        setAllocOffset( cursor, pageSize );\n-        setDeadSpace( cursor, 0 );\n-    }\n-\n-    @Override\n-    KEY keyAt( PageCursor cursor, KEY into, int pos, Type type )\n-    {\n-        placeCursorAtActualKey( cursor, pos, type );\n-\n-        // Read key\n-        long keyValueSize = readKeyValueSize( cursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int valueSize = extractValueSize( keyValueSize );\n-        if ( keyValueSizeTooLarge( keySize, valueSize ) || keySize < 0 )\n-        {\n-            readUnreliableKeyValueSize( cursor, keySize, valueSize, keyValueSize, pos );\n-            return into;\n-        }\n-        layout.readKey( cursor, into, keySize );\n-        return into;\n-    }\n-\n-    @Override\n-    void keyValueAt( PageCursor cursor, KEY intoKey, VALUE intoValue, int pos )\n-    {\n-        placeCursorAtActualKey( cursor, pos, LEAF );\n-\n-        long keyValueSize = readKeyValueSize( cursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int valueSize = extractValueSize( keyValueSize );\n-        if ( keyValueSizeTooLarge( keySize, valueSize ) || keySize < 0 || valueSize < 0 )\n-        {\n-            readUnreliableKeyValueSize( cursor, keySize, valueSize, keyValueSize, pos );\n-            return;\n-        }\n-        layout.readKey( cursor, intoKey, keySize );\n-        layout.readValue( cursor, intoValue, valueSize );\n-    }\n-\n-    @Override\n-    void insertKeyAndRightChildAt( PageCursor cursor, KEY key, long child, int pos, int keyCount, long stableGeneration,\n-            long unstableGeneration )\n-    {\n-        // Where to write key?\n-        int currentKeyOffset = getAllocOffset( cursor );\n-        int keySize = layout.keySize( key );\n-        int newKeyOffset = currentKeyOffset - keySize - getOverhead( keySize, 0 );\n-\n-        // Write key\n-        cursor.setOffset( newKeyOffset );\n-        putKeySize( cursor, keySize );\n-        layout.writeKey( cursor, key );\n-\n-        // Update alloc space\n-        setAllocOffset( cursor, newKeyOffset );\n-\n-        // Write to offset array\n-        insertSlotsAt( cursor, pos, 1, keyCount, keyPosOffsetInternal( 0 ), keyChildSize() );\n-        cursor.setOffset( keyPosOffsetInternal( pos ) );\n-        putKeyOffset( cursor, newKeyOffset );\n-        writeChild( cursor, child, stableGeneration, unstableGeneration );\n-    }\n-\n-    @Override\n-    void insertKeyValueAt( PageCursor cursor, KEY key, VALUE value, int pos, int keyCount )\n-    {\n-        // Where to write key?\n-        int currentKeyValueOffset = getAllocOffset( cursor );\n-        int keySize = layout.keySize( key );\n-        int valueSize = layout.valueSize( value );\n-        int newKeyValueOffset = currentKeyValueOffset - keySize - valueSize - getOverhead( keySize, valueSize );\n-\n-        // Write key and value\n-        cursor.setOffset( newKeyValueOffset );\n-        putKeyValueSize( cursor, keySize, valueSize );\n-        layout.writeKey( cursor, key );\n-        layout.writeValue( cursor, value );\n-\n-        // Update alloc space\n-        setAllocOffset( cursor, newKeyValueOffset );\n-\n-        // Write to offset array\n-        insertSlotsAt( cursor, pos, 1, keyCount, keyPosOffsetLeaf( 0 ), bytesKeyOffset() );\n-        cursor.setOffset( keyPosOffsetLeaf( pos ) );\n-        putKeyOffset( cursor, newKeyValueOffset );\n-    }\n-\n-    @Override\n-    void removeKeyValueAt( PageCursor cursor, int pos, int keyCount )\n-    {\n-        // Kill actual key\n-        placeCursorAtActualKey( cursor, pos, LEAF );\n-        int keyOffset = cursor.getOffset();\n-        long keyValueSize = readKeyValueSize( cursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int valueSize = extractValueSize( keyValueSize );\n-        cursor.setOffset( keyOffset );\n-        putTombstone( cursor );\n-\n-        // Update dead space\n-        int deadSpace = getDeadSpace( cursor );\n-        setDeadSpace( cursor, deadSpace + keySize + valueSize + getOverhead( keySize, valueSize ) );\n-\n-        // Remove from offset array\n-        removeSlotAt( cursor, pos, keyCount, keyPosOffsetLeaf( 0 ), bytesKeyOffset() );\n-    }\n-\n-    @Override\n-    void removeKeyAndRightChildAt( PageCursor cursor, int keyPos, int keyCount )\n-    {\n-        // Kill actual key\n-        placeCursorAtActualKey( cursor, keyPos, INTERNAL );\n-        int keyOffset = cursor.getOffset();\n-        int keySize = extractKeySize( readKeyValueSize( cursor ) );\n-        cursor.setOffset( keyOffset );\n-        putTombstone( cursor );\n-\n-        // Update dead space\n-        int deadSpace = getDeadSpace( cursor );\n-        setDeadSpace( cursor, deadSpace + keySize + getOverhead( keySize, 0 ) );\n-\n-        // Remove for offsetArray\n-        removeSlotAt( cursor, keyPos, keyCount, keyPosOffsetInternal( 0 ), keyChildSize() );\n-\n-        // Zero pad empty area\n-        zeroPad( cursor, keyPosOffsetInternal( keyCount - 1 ), bytesKeyOffset() + childSize() );\n-    }\n-\n-    @Override\n-    void removeKeyAndLeftChildAt( PageCursor cursor, int keyPos, int keyCount )\n-    {\n-        // Kill actual key\n-        placeCursorAtActualKey( cursor, keyPos, INTERNAL );\n-        int keyOffset = cursor.getOffset();\n-        int keySize = extractKeySize( readKeyValueSize( cursor ) );\n-        cursor.setOffset( keyOffset );\n-        putTombstone( cursor );\n-\n-        // Update dead space\n-        int deadSpace = getDeadSpace( cursor );\n-        setDeadSpace( cursor, deadSpace + keySize + getOverhead( keySize, 0 ) );\n-\n-        // Remove for offsetArray\n-        removeSlotAt( cursor, keyPos, keyCount, keyPosOffsetInternal( 0 ) - childSize(), keyChildSize() );\n-\n-        // Move last child\n-        cursor.copyTo( childOffset( keyCount ), cursor, childOffset( keyCount - 1 ), childSize() );\n-\n-        // Zero pad empty area\n-        zeroPad( cursor, keyPosOffsetInternal( keyCount - 1 ), bytesKeyOffset() + childSize() );\n-    }\n-\n-    @Override\n-    boolean setKeyAtInternal( PageCursor cursor, KEY key, int pos )\n-    {\n-        placeCursorAtActualKey( cursor, pos, INTERNAL );\n-\n-        long keyValueSize = readKeyValueSize( cursor );\n-        int oldKeySize = extractKeySize( keyValueSize );\n-        int oldValueSize = extractValueSize( keyValueSize );\n-        if ( keyValueSizeTooLarge( oldKeySize, oldValueSize ) )\n-        {\n-            readUnreliableKeyValueSize( cursor, oldKeySize, oldValueSize, keyValueSize, pos );\n-        }\n-        int newKeySize = layout.keySize( key );\n-        if ( newKeySize == oldKeySize )\n-        {\n-            // Fine, we can just overwrite\n-            layout.writeKey( cursor, key );\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    VALUE valueAt( PageCursor cursor, VALUE into, int pos )\n-    {\n-        placeCursorAtActualKey( cursor, pos, LEAF );\n-\n-        // Read value\n-        long keyValueSize = readKeyValueSize( cursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int valueSize = extractValueSize( keyValueSize );\n-        if ( keyValueSizeTooLarge( keySize, valueSize ) || keySize < 0 || valueSize < 0 )\n-        {\n-            readUnreliableKeyValueSize( cursor, keySize, valueSize, keyValueSize, pos );\n-            return into;\n-        }\n-        progressCursor( cursor, keySize );\n-        layout.readValue( cursor, into, valueSize );\n-        return into;\n-    }\n-\n-    @Override\n-    boolean setValueAt( PageCursor cursor, VALUE value, int pos )\n-    {\n-        placeCursorAtActualKey( cursor, pos, LEAF );\n-\n-        long keyValueSize = readKeyValueSize( cursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int oldValueSize = extractValueSize( keyValueSize );\n-        int newValueSize = layout.valueSize( value );\n-        if ( oldValueSize == newValueSize )\n-        {\n-            // Fine we can just overwrite\n-            progressCursor( cursor, keySize );\n-            layout.writeValue( cursor, value );\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    private void progressCursor( PageCursor cursor, int delta )\n-    {\n-        cursor.setOffset( cursor.getOffset() + delta );\n-    }\n-\n-    @Override\n-    long childAt( PageCursor cursor, int pos, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( childOffset( pos ) );\n-        return read( cursor, stableGeneration, unstableGeneration, pos );\n-    }\n-\n-    @Override\n-    void setChildAt( PageCursor cursor, long child, int pos, long stableGeneration, long unstableGeneration )\n-    {\n-        cursor.setOffset( childOffset( pos ) );\n-        writeChild( cursor, child, stableGeneration, unstableGeneration );\n-    }\n-\n-    @Override\n-    public int keyValueSizeCap()\n-    {\n-        return keyValueSizeCap;\n-    }\n-\n-    @Override\n-    void validateKeyValueSize( KEY key, VALUE value )\n-    {\n-        int keySize = layout.keySize( key );\n-        int valueSize = layout.valueSize( value );\n-        if ( keyValueSizeTooLarge( keySize, valueSize ) )\n-        {\n-            throw new IllegalArgumentException( \"Index key-value size it to large. Please see index documentation for limitations.\" );\n-        }\n-    }\n-\n-    @Override\n-    boolean reasonableKeyCount( int keyCount )\n-    {\n-        return keyCount >= 0 && keyCount <= totalSpace / SIZE_TOTAL_OVERHEAD;\n-    }\n-\n-    @Override\n-    boolean reasonableChildCount( int childCount )\n-    {\n-        return reasonableKeyCount( childCount );\n-    }\n-\n-    @Override\n-    int childOffset( int pos )\n-    {\n-        // Child pointer to the left of key at pos\n-        return keyPosOffsetInternal( pos ) - childSize();\n-    }\n-\n-    @Override\n-    Overflow internalOverflow( PageCursor cursor, int currentKeyCount, KEY newKey )\n-    {\n-        // How much space do we have?\n-        int allocSpace = getAllocSpace( cursor, currentKeyCount, INTERNAL );\n-        int deadSpace = getDeadSpace( cursor );\n-\n-        // How much space do we need?\n-        int neededSpace = totalSpaceOfKeyChild( newKey );\n-\n-        // There is your answer!\n-        return neededSpace < allocSpace ? Overflow.NO :\n-               neededSpace < allocSpace + deadSpace ? Overflow.NO_NEED_DEFRAG : Overflow.YES;\n-    }\n-\n-    @Override\n-    Overflow leafOverflow( PageCursor cursor, int currentKeyCount, KEY newKey, VALUE newValue )\n-    {\n-        // How much space do we have?\n-        int deadSpace = getDeadSpace( cursor );\n-        int allocSpace = getAllocSpace( cursor, currentKeyCount, LEAF );\n-\n-        // How much space do we need?\n-        int neededSpace = totalSpaceOfKeyValue( newKey, newValue );\n-\n-        // There is your answer!\n-        return neededSpace < allocSpace ? Overflow.NO :\n-               neededSpace < allocSpace + deadSpace ? Overflow.NO_NEED_DEFRAG : Overflow.YES;\n-    }\n-\n-    @Override\n-    void defragmentLeaf( PageCursor cursor )\n-    {\n-        doDefragment( cursor, LEAF );\n-    }\n-\n-    @Override\n-    void defragmentInternal( PageCursor cursor )\n-    {\n-        doDefragment( cursor, INTERNAL );\n-    }\n-\n-    private void doDefragment( PageCursor cursor, Type type )\n-    {\n+  static final byte FORMAT_IDENTIFIER = 3;\n+  static final byte FORMAT_VERSION = 0;\n+\n+  /**\n+   * Concepts\n+   * Total space - The space available for data (pageSize - headerSize)\n+   * Active space - Space currently occupied by active data (not including dead keys)\n+   * Dead space - Space currently occupied by dead data that could be reclaimed by defragment\n+   * Alloc offset - Exact offset to leftmost key and thus the end of alloc space\n+   * Alloc space - The available space between offset array and data space\n+   * <p>\n+   * TotalSpace  |----------------------------------------|\n+   * ActiveSpace |-----------|   +    |---------|  + |----|\n+   * DeadSpace                                  |----|\n+   * AllocSpace              |--------|\n+   * AllocOffset                      v\n+   * [Header][OffsetArray]........[_________,XXXX,____] (_ = alive key, X = dead key)\n+   */\n+  private static final int BYTE_POS_ALLOCOFFSET = BASE_HEADER_LENGTH;\n+  private static final int BYTE_POS_DEADSPACE = BYTE_POS_ALLOCOFFSET + bytesPageOffset();\n+  private static final int HEADER_LENGTH_DYNAMIC = BYTE_POS_DEADSPACE + bytesPageOffset();\n+\n+  private static final int LEAST_NUMBER_OF_ENTRIES_PER_PAGE = 2;\n+  private static final int MINIMUM_ENTRY_SIZE_CAP = Long.SIZE;\n+  private final int keyValueSizeCap;\n+  private final PrimitiveIntStack deadKeysOffset = new PrimitiveIntStack();\n+  private final PrimitiveIntStack aliveKeysOffset = new PrimitiveIntStack();\n+  private final int maxKeyCount = pageSize / (bytesKeyOffset() + SIZE_KEY_SIZE + SIZE_VALUE_SIZE);\n+  private final int[] oldOffset = new int[maxKeyCount];\n+  private final int[] newOffset = new int[maxKeyCount];\n+  private final int totalSpace;\n+  private final int halfSpace;\n+\n+  TreeNodeDynamicSize(int pageSize, Layout<KEY, VALUE> layout)\n+  {\n+    super(pageSize, layout);\n+    totalSpace = pageSize - HEADER_LENGTH_DYNAMIC;\n+    halfSpace = totalSpace / 2;\n+    keyValueSizeCap = keyValueSizeCapFromPageSize(pageSize);\n+\n+    if (keyValueSizeCap < MINIMUM_ENTRY_SIZE_CAP)\n+    {\n+      throw new MetadataMismatchException(\n+          \"We need to fit at least %d key-value entries per page in leaves. To do that a key-value entry can be at most %dB \" +\n+              \"with current page size of %dB. We require this cap to be at least %dB.\",\n+          LEAST_NUMBER_OF_ENTRIES_PER_PAGE, keyValueSizeCap, pageSize, Long.SIZE);\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  public static int keyValueSizeCapFromPageSize(int pageSize)\n+  {\n+    return (pageSize - HEADER_LENGTH_DYNAMIC) / LEAST_NUMBER_OF_ENTRIES_PER_PAGE - SIZE_TOTAL_OVERHEAD;\n+  }\n+\n+  @Override\n+  void writeAdditionalHeader(PageCursor cursor)\n+  {\n+    setAllocOffset(cursor, pageSize);\n+    setDeadSpace(cursor, 0);\n+  }\n+\n+  @Override\n+  KEY keyAt(PageCursor cursor, KEY into, int pos, Type type)\n+  {\n+    placeCursorAtActualKey(cursor, pos, type);\n+\n+    // Read key\n+    long keyValueSize = readKeyValueSize(cursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int valueSize = extractValueSize(keyValueSize);\n+    if (keyValueSizeTooLarge(keySize, valueSize) || keySize < 0)\n+    {\n+      readUnreliableKeyValueSize(cursor, keySize, valueSize, keyValueSize, pos);\n+      return into;\n+    }\n+    layout.readKey(cursor, into, keySize);\n+    return into;\n+  }\n+\n+  @Override\n+  void keyValueAt(PageCursor cursor, KEY intoKey, VALUE intoValue, int pos)\n+  {\n+    placeCursorAtActualKey(cursor, pos, LEAF);\n+\n+    long keyValueSize = readKeyValueSize(cursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int valueSize = extractValueSize(keyValueSize);\n+    if (keyValueSizeTooLarge(keySize, valueSize) || keySize < 0 || valueSize < 0)\n+    {\n+      readUnreliableKeyValueSize(cursor, keySize, valueSize, keyValueSize, pos);\n+      return;\n+    }\n+    layout.readKey(cursor, intoKey, keySize);\n+    layout.readValue(cursor, intoValue, valueSize);\n+  }\n+\n+  @Override\n+  void insertKeyAndRightChildAt(PageCursor cursor, KEY key, long child, int pos, int keyCount, long stableGeneration,\n+                                long unstableGeneration)\n+  {\n+    // Where to write key?\n+    int currentKeyOffset = getAllocOffset(cursor);\n+    int keySize = layout.keySize(key);\n+    int newKeyOffset = currentKeyOffset - keySize - getOverhead(keySize, 0);\n+\n+    // Write key\n+    cursor.setOffset(newKeyOffset);\n+    putKeySize(cursor, keySize);\n+    layout.writeKey(cursor, key);\n+\n+    // Update alloc space\n+    setAllocOffset(cursor, newKeyOffset);\n+\n+    // Write to offset array\n+    insertSlotsAt(cursor, pos, 1, keyCount, keyPosOffsetInternal(0), keyChildSize());\n+    cursor.setOffset(keyPosOffsetInternal(pos));\n+    putKeyOffset(cursor, newKeyOffset);\n+    writeChild(cursor, child, stableGeneration, unstableGeneration);\n+  }\n+\n+  @Override\n+  void insertKeyValueAt(PageCursor cursor, KEY key, VALUE value, int pos, int keyCount)\n+  {\n+    // Where to write key?\n+    int currentKeyValueOffset = getAllocOffset(cursor);\n+    int keySize = layout.keySize(key);\n+    int valueSize = layout.valueSize(value);\n+    int newKeyValueOffset = currentKeyValueOffset - keySize - valueSize - getOverhead(keySize, valueSize);\n+\n+    // Write key and value\n+    cursor.setOffset(newKeyValueOffset);\n+    putKeyValueSize(cursor, keySize, valueSize);\n+    layout.writeKey(cursor, key);\n+    layout.writeValue(cursor, value);\n+\n+    // Update alloc space\n+    setAllocOffset(cursor, newKeyValueOffset);\n+\n+    // Write to offset array\n+    insertSlotsAt(cursor, pos, 1, keyCount, keyPosOffsetLeaf(0), bytesKeyOffset());\n+    cursor.setOffset(keyPosOffsetLeaf(pos));\n+    putKeyOffset(cursor, newKeyValueOffset);\n+  }\n+\n+  @Override\n+  void removeKeyValueAt(PageCursor cursor, int pos, int keyCount)\n+  {\n+    // Kill actual key\n+    placeCursorAtActualKey(cursor, pos, LEAF);\n+    int keyOffset = cursor.getOffset();\n+    long keyValueSize = readKeyValueSize(cursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int valueSize = extractValueSize(keyValueSize);\n+    cursor.setOffset(keyOffset);\n+    putTombstone(cursor);\n+\n+    // Update dead space\n+    int deadSpace = getDeadSpace(cursor);\n+    setDeadSpace(cursor, deadSpace + keySize + valueSize + getOverhead(keySize, valueSize));\n+\n+    // Remove from offset array\n+    removeSlotAt(cursor, pos, keyCount, keyPosOffsetLeaf(0), bytesKeyOffset());\n+  }\n+\n+  @Override\n+  void removeKeyAndRightChildAt(PageCursor cursor, int keyPos, int keyCount)\n+  {\n+    // Kill actual key\n+    placeCursorAtActualKey(cursor, keyPos, INTERNAL);\n+    int keyOffset = cursor.getOffset();\n+    int keySize = extractKeySize(readKeyValueSize(cursor));\n+    cursor.setOffset(keyOffset);\n+    putTombstone(cursor);\n+\n+    // Update dead space\n+    int deadSpace = getDeadSpace(cursor);\n+    setDeadSpace(cursor, deadSpace + keySize + getOverhead(keySize, 0));\n+\n+    // Remove for offsetArray\n+    removeSlotAt(cursor, keyPos, keyCount, keyPosOffsetInternal(0), keyChildSize());\n+\n+    // Zero pad empty area\n+    zeroPad(cursor, keyPosOffsetInternal(keyCount - 1), bytesKeyOffset() + childSize());\n+  }\n+\n+  @Override\n+  void removeKeyAndLeftChildAt(PageCursor cursor, int keyPos, int keyCount)\n+  {\n+    // Kill actual key\n+    placeCursorAtActualKey(cursor, keyPos, INTERNAL);\n+    int keyOffset = cursor.getOffset();\n+    int keySize = extractKeySize(readKeyValueSize(cursor));\n+    cursor.setOffset(keyOffset);\n+    putTombstone(cursor);\n+\n+    // Update dead space\n+    int deadSpace = getDeadSpace(cursor);\n+    setDeadSpace(cursor, deadSpace + keySize + getOverhead(keySize, 0));\n+\n+    // Remove for offsetArray\n+    removeSlotAt(cursor, keyPos, keyCount, keyPosOffsetInternal(0) - childSize(), keyChildSize());\n+\n+    // Move last child\n+    cursor.copyTo(childOffset(keyCount), cursor, childOffset(keyCount - 1), childSize());\n+\n+    // Zero pad empty area\n+    zeroPad(cursor, keyPosOffsetInternal(keyCount - 1), bytesKeyOffset() + childSize());\n+  }\n+\n+  @Override\n+  boolean setKeyAtInternal(PageCursor cursor, KEY key, int pos)\n+  {\n+    placeCursorAtActualKey(cursor, pos, INTERNAL);\n+\n+    long keyValueSize = readKeyValueSize(cursor);\n+    int oldKeySize = extractKeySize(keyValueSize);\n+    int oldValueSize = extractValueSize(keyValueSize);\n+    if (keyValueSizeTooLarge(oldKeySize, oldValueSize))\n+    {\n+      readUnreliableKeyValueSize(cursor, oldKeySize, oldValueSize, keyValueSize, pos);\n+    }\n+    int newKeySize = layout.keySize(key);\n+    if (newKeySize == oldKeySize)\n+    {\n+      // Fine, we can just overwrite\n+      layout.writeKey(cursor, key);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  VALUE valueAt(PageCursor cursor, VALUE into, int pos)\n+  {\n+    placeCursorAtActualKey(cursor, pos, LEAF);\n+\n+    // Read value\n+    long keyValueSize = readKeyValueSize(cursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int valueSize = extractValueSize(keyValueSize);\n+    if (keyValueSizeTooLarge(keySize, valueSize) || keySize < 0 || valueSize < 0)\n+    {\n+      readUnreliableKeyValueSize(cursor, keySize, valueSize, keyValueSize, pos);\n+      return into;\n+    }\n+    progressCursor(cursor, keySize);\n+    layout.readValue(cursor, into, valueSize);\n+    return into;\n+  }\n+\n+  @Override\n+  boolean setValueAt(PageCursor cursor, VALUE value, int pos)\n+  {\n+    placeCursorAtActualKey(cursor, pos, LEAF);\n+\n+    long keyValueSize = readKeyValueSize(cursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int oldValueSize = extractValueSize(keyValueSize);\n+    int newValueSize = layout.valueSize(value);\n+    if (oldValueSize == newValueSize)\n+    {\n+      // Fine we can just overwrite\n+      progressCursor(cursor, keySize);\n+      layout.writeValue(cursor, value);\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  private void progressCursor(PageCursor cursor, int delta)\n+  {\n+    cursor.setOffset(cursor.getOffset() + delta);\n+  }\n+\n+  @Override\n+  long childAt(PageCursor cursor, int pos, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(childOffset(pos));\n+    return read(cursor, stableGeneration, unstableGeneration, pos);\n+  }\n+\n+  @Override\n+  void setChildAt(PageCursor cursor, long child, int pos, long stableGeneration, long unstableGeneration)\n+  {\n+    cursor.setOffset(childOffset(pos));\n+    writeChild(cursor, child, stableGeneration, unstableGeneration);\n+  }\n+\n+  @Override\n+  public int keyValueSizeCap()\n+  {\n+    return keyValueSizeCap;\n+  }\n+\n+  @Override\n+  void validateKeyValueSize(KEY key, VALUE value)\n+  {\n+    int keySize = layout.keySize(key);\n+    int valueSize = layout.valueSize(value);\n+    if (keyValueSizeTooLarge(keySize, valueSize))\n+    {\n+      throw new IllegalArgumentException(\"Index key-value size it to large. Please see index documentation for limitations.\");\n+    }\n+  }\n+\n+  @Override\n+  boolean reasonableKeyCount(int keyCount)\n+  {\n+    return keyCount >= 0 && keyCount <= totalSpace / SIZE_TOTAL_OVERHEAD;\n+  }\n+\n+  @Override\n+  boolean reasonableChildCount(int childCount)\n+  {\n+    return reasonableKeyCount(childCount);\n+  }\n+\n+  @Override\n+  int childOffset(int pos)\n+  {\n+    // Child pointer to the left of key at pos\n+    return keyPosOffsetInternal(pos) - childSize();\n+  }\n+\n+  @Override\n+  Overflow internalOverflow(PageCursor cursor, int currentKeyCount, KEY newKey)\n+  {\n+    // How much space do we have?\n+    int allocSpace = getAllocSpace(cursor, currentKeyCount, INTERNAL);\n+    int deadSpace = getDeadSpace(cursor);\n+\n+    // How much space do we need?\n+    int neededSpace = totalSpaceOfKeyChild(newKey);\n+\n+    // There is your answer!\n+    return neededSpace < allocSpace ? Overflow.NO :\n+        neededSpace < allocSpace + deadSpace ? Overflow.NO_NEED_DEFRAG : Overflow.YES;\n+  }\n+\n+  @Override\n+  Overflow leafOverflow(PageCursor cursor, int currentKeyCount, KEY newKey, VALUE newValue)\n+  {\n+    // How much space do we have?\n+    int deadSpace = getDeadSpace(cursor);\n+    int allocSpace = getAllocSpace(cursor, currentKeyCount, LEAF);\n+\n+    // How much space do we need?\n+    int neededSpace = totalSpaceOfKeyValue(newKey, newValue);\n+\n+    // There is your answer!\n+    return neededSpace < allocSpace ? Overflow.NO :\n+        neededSpace < allocSpace + deadSpace ? Overflow.NO_NEED_DEFRAG : Overflow.YES;\n+  }\n+\n+  @Override\n+  void defragmentLeaf(PageCursor cursor)\n+  {\n+    doDefragment(cursor, LEAF);\n+  }\n+\n+  @Override\n+  void defragmentInternal(PageCursor cursor)\n+  {\n+    doDefragment(cursor, INTERNAL);\n+  }\n+\n+  private void doDefragment(PageCursor cursor, Type type)\n+  {\n         /*\n         The goal is to compact all alive keys in the node\n         by reusing the space occupied by dead keys.\n@@ -469,871 +470,861 @@ public class TreeNodeDynamicSize<KEY, VALUE> extends TreeNode<KEY,VALUE>\n                  ^                 deadRangeOffset\n         */\n \n-        // Mark all offsets\n-        deadKeysOffset.clear();\n-        aliveKeysOffset.clear();\n-        if ( type == INTERNAL )\n-        {\n-            recordDeadAndAliveInternal( cursor, deadKeysOffset, aliveKeysOffset );\n-        }\n-        else\n-        {\n-            recordDeadAndAliveLeaf( cursor, deadKeysOffset, aliveKeysOffset );\n-        }\n-\n-        // Cursors into field byte arrays\n-        int oldOffsetCursor = 0;\n-        int newOffsetCursor = 0;\n-\n-        int aliveRangeOffset = pageSize; // Everything after this point is alive\n-        int deadRangeOffset; // Everything between this point and aliveRangeOffset is dead space\n-\n-        // Rightmost alive keys does not need to move\n-        while ( deadKeysOffset.peek() < aliveKeysOffset.peek() )\n-        {\n-            aliveRangeOffset = aliveKeysOffset.poll();\n-        }\n-\n-        do\n-        {\n-            // Locate next range of dead keys\n-            deadRangeOffset = aliveRangeOffset;\n-            while ( aliveKeysOffset.peek() < deadKeysOffset.peek() )\n-            {\n-                deadRangeOffset = deadKeysOffset.poll();\n-            }\n-\n-            // Locate next range of alive keys\n-            int moveOffset = deadRangeOffset;\n-            while ( deadKeysOffset.peek() < aliveKeysOffset.peek() )\n-            {\n-                int moveKey = aliveKeysOffset.poll();\n-                oldOffset[oldOffsetCursor++] = moveKey;\n-                moveOffset = moveKey;\n-            }\n-\n-            // Update offset mapping\n-            int deadRangeSize = aliveRangeOffset - deadRangeOffset;\n-            while ( oldOffsetCursor > newOffsetCursor )\n-            {\n-                newOffset[newOffsetCursor] = oldOffset[newOffsetCursor] + deadRangeSize;\n-                newOffsetCursor++;\n-            }\n-\n-            // Do move\n-            while ( moveOffset < (deadRangeOffset - deadRangeSize) )\n-            {\n-                // Move one block\n-                deadRangeOffset -= deadRangeSize;\n-                aliveRangeOffset -= deadRangeSize;\n-                cursor.copyTo( deadRangeOffset, cursor, aliveRangeOffset, deadRangeSize );\n-            }\n-            // Move the last piece\n-            int lastBlockSize = deadRangeOffset - moveOffset;\n-            if ( lastBlockSize > 0 )\n-            {\n-                deadRangeOffset -= lastBlockSize;\n-                aliveRangeOffset -= lastBlockSize;\n-                cursor.copyTo( deadRangeOffset, cursor, aliveRangeOffset, lastBlockSize );\n-            }\n-        }\n-        while ( !aliveKeysOffset.isEmpty() );\n-        // Update allocOffset\n-        int prevAllocOffset = getAllocOffset( cursor );\n-        setAllocOffset( cursor, aliveRangeOffset );\n-\n-        // Zero pad reclaimed area\n-        zeroPad( cursor, prevAllocOffset, aliveRangeOffset - prevAllocOffset );\n-\n-        // Update offset array\n-        int keyCount = keyCount( cursor );\n-        keyPos:\n-        for ( int pos = 0; pos < keyCount; pos++ )\n-        {\n-            int keyPosOffset = keyPosOffset( pos, type );\n-            cursor.setOffset( keyPosOffset );\n-            int keyOffset = readKeyOffset( cursor );\n-            for ( int index = 0; index < oldOffsetCursor; index++ )\n-            {\n-                if ( keyOffset == oldOffset[index] )\n-                {\n-                    // Overwrite with new offset\n-                    cursor.setOffset( keyPosOffset );\n-                    putKeyOffset( cursor, newOffset[index] );\n-                    continue keyPos;\n-                }\n-            }\n-        }\n-\n-        // Update dead space\n-        setDeadSpace( cursor, 0 );\n-    }\n-\n-    @Override\n-    boolean leafUnderflow( PageCursor cursor, int keyCount )\n-    {\n-        int halfSpace = this.halfSpace;\n-        int allocSpace = getAllocSpace( cursor, keyCount, LEAF );\n-        int deadSpace = getDeadSpace( cursor );\n-        int availableSpace = allocSpace + deadSpace;\n-\n-        return availableSpace > halfSpace;\n-    }\n-\n-    @Override\n-    int canRebalanceLeaves( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount )\n-    {\n-        int leftActiveSpace = totalActiveSpace( leftCursor, leftKeyCount );\n-        int rightActiveSpace = totalActiveSpace( rightCursor, rightKeyCount );\n-\n-        if ( leftActiveSpace + rightActiveSpace < totalSpace )\n-        {\n-            // We can merge\n-            return -1;\n-        }\n-        if ( leftActiveSpace < rightActiveSpace )\n-        {\n-            // Moving keys to the right will only create more imbalance\n-            return 0;\n-        }\n-\n-        int prevDelta;\n-        int currentDelta = Math.abs( leftActiveSpace - rightActiveSpace );\n-        int keysToMove = 0;\n-        int lastChunkSize;\n-        do\n-        {\n-            keysToMove++;\n-            lastChunkSize = totalSpaceOfKeyValue( leftCursor, leftKeyCount - keysToMove );\n-            leftActiveSpace -= lastChunkSize;\n-            rightActiveSpace += lastChunkSize;\n-\n-            prevDelta = currentDelta;\n-            currentDelta = Math.abs( leftActiveSpace - rightActiveSpace );\n-        }\n-        while ( currentDelta < prevDelta );\n-        keysToMove--; // Move back to optimal split\n-        leftActiveSpace += lastChunkSize;\n-        rightActiveSpace -= lastChunkSize;\n-\n-        int halfSpace = this.halfSpace;\n-        boolean canRebalance = leftActiveSpace > halfSpace && rightActiveSpace > halfSpace;\n-        return canRebalance ? keysToMove : 0;\n-    }\n-\n-    @Override\n-    boolean canMergeLeaves( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount )\n-    {\n-        int leftActiveSpace = totalActiveSpace( leftCursor, leftKeyCount );\n-        int rightActiveSpace = totalActiveSpace( rightCursor, rightKeyCount );\n-        int totalSpace = this.totalSpace;\n-        return totalSpace >= leftActiveSpace + rightActiveSpace;\n-    }\n-\n-    @Override\n-    void doSplitLeaf( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n-            VALUE newValue, KEY newSplitter )\n-    {\n-        // Find middle\n-        int keyCountAfterInsert = leftKeyCount + 1;\n-        int middlePos = middlePosInLeaf( leftCursor, insertPos, newKey, newValue, keyCountAfterInsert );\n-\n-        if ( middlePos == insertPos )\n-        {\n-            layout.copyKey( newKey, newSplitter );\n-        }\n-        else\n-        {\n-            keyAt( leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, LEAF );\n-        }\n-        int rightKeyCount = keyCountAfterInsert - middlePos;\n-\n-        if ( insertPos < middlePos )\n-        {\n-            //                  v-------v       copy\n-            // before _,_,_,_,_,_,_,_,_,_\n-            // insert _,_,_,X,_,_,_,_,_,_,_\n-            // middle           ^\n-            moveKeysAndValues( leftCursor, middlePos - 1, rightCursor, 0, rightKeyCount );\n-            defragmentLeaf( leftCursor );\n-            insertKeyValueAt( leftCursor, newKey, newValue, insertPos, middlePos - 1 );\n-        }\n-        else\n-        {\n-            //                  v---v           first copy\n-            //                        v-v       second copy\n-            // before _,_,_,_,_,_,_,_,_,_\n-            // insert _,_,_,_,_,_,_,_,X,_,_\n-            // middle           ^\n-\n-            // Copy everything in one go\n-            int newInsertPos = insertPos - middlePos;\n-            int keysToMove = leftKeyCount - middlePos;\n-            moveKeysAndValues( leftCursor, middlePos, rightCursor, 0, keysToMove );\n-            defragmentLeaf( leftCursor );\n-            insertKeyValueAt( rightCursor, newKey, newValue, newInsertPos, keysToMove );\n-        }\n-        TreeNode.setKeyCount( leftCursor, middlePos );\n-        TreeNode.setKeyCount( rightCursor, rightKeyCount );\n-    }\n-\n-    @Override\n-    void doSplitInternal( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n-            long newRightChild, long stableGeneration, long unstableGeneration, KEY newSplitter )\n-    {\n-        int keyCountAfterInsert = leftKeyCount + 1;\n-        int middlePos = middleInternal( leftCursor, insertPos, newKey, keyCountAfterInsert );\n-\n-        if ( middlePos == insertPos )\n-        {\n-            layout.copyKey( newKey, newSplitter );\n-        }\n-        else\n-        {\n-            keyAt( leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, INTERNAL );\n-        }\n-        int rightKeyCount = keyCountAfterInsert - middlePos - 1; // -1 because don't keep prim key in internal\n-\n-        if ( insertPos < middlePos )\n-        {\n-            //                         v-------v       copy\n-            // before key    _,_,_,_,_,_,_,_,_,_\n-            // before child -,-,-,-,-,-,-,-,-,-,-\n-            // insert key    _,_,X,_,_,_,_,_,_,_,_\n-            // insert child -,-,-,x,-,-,-,-,-,-,-,-\n-            // middle key              ^\n-\n-            moveKeysAndChildren( leftCursor, middlePos, rightCursor, 0, rightKeyCount, true );\n-            // Rightmost key in left is the one we send up to parent, remove it from here.\n-            removeKeyAndRightChildAt( leftCursor, middlePos - 1, middlePos );\n-            defragmentInternal( leftCursor );\n-            insertKeyAndRightChildAt( leftCursor, newKey, newRightChild, insertPos, middlePos - 1, stableGeneration, unstableGeneration );\n-        }\n-        else\n-        {\n-            // pos > middlePos\n-            //                         v-v          first copy\n-            //                             v-v-v    second copy\n-            // before key    _,_,_,_,_,_,_,_,_,_\n-            // before child -,-,-,-,-,-,-,-,-,-,-\n-            // insert key    _,_,_,_,_,_,_,X,_,_,_\n-            // insert child -,-,-,-,-,-,-,-,x,-,-,-\n-            // middle key              ^\n-\n-            // pos == middlePos\n-            //                                      first copy\n-            //                         v-v-v-v-v    second copy\n-            // before key    _,_,_,_,_,_,_,_,_,_\n-            // before child -,-,-,-,-,-,-,-,-,-,-\n-            // insert key    _,_,_,_,_,X,_,_,_,_,_\n-            // insert child -,-,-,-,-,-,x,-,-,-,-,-\n-            // middle key              ^\n-\n-            // Keys\n-            if ( insertPos == middlePos )\n-            {\n-                int copyFrom = middlePos;\n-                int copyCount = leftKeyCount - copyFrom;\n-                moveKeysAndChildren( leftCursor, copyFrom, rightCursor, 0, copyCount, false );\n-                defragmentInternal( leftCursor );\n-                setChildAt( rightCursor, newRightChild, 0, stableGeneration, unstableGeneration );\n-            }\n-            else\n-            {\n-                int copyFrom = middlePos + 1;\n-                int copyCount = leftKeyCount - copyFrom;\n-                moveKeysAndChildren( leftCursor, copyFrom, rightCursor, 0, copyCount, true );\n-                // Rightmost key in left is the one we send up to parent, remove it from here.\n-                removeKeyAndRightChildAt( leftCursor, middlePos, middlePos + 1 );\n-                defragmentInternal( leftCursor );\n-                insertKeyAndRightChildAt( rightCursor, newKey, newRightChild, insertPos - copyFrom, copyCount,\n-                        stableGeneration, unstableGeneration );\n-            }\n-        }\n-        TreeNode.setKeyCount( leftCursor, middlePos );\n-        TreeNode.setKeyCount( rightCursor, rightKeyCount );\n-    }\n-\n-    @Override\n-    void moveKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount,\n-            int fromPosInLeftNode )\n-    {\n-        defragmentLeaf( rightCursor );\n-        int numberOfKeysToMove = leftKeyCount - fromPosInLeftNode;\n-\n-        // Push keys and values in right sibling to the right\n-        insertSlotsAt( rightCursor, 0, numberOfKeysToMove, rightKeyCount, keyPosOffsetLeaf( 0 ), bytesKeyOffset() );\n-\n-        // Move (also updates keyCount of left)\n-        moveKeysAndValues( leftCursor, fromPosInLeftNode, rightCursor, 0, numberOfKeysToMove );\n-\n-        // Right keyCount\n-        setKeyCount( rightCursor, rightKeyCount + numberOfKeysToMove );\n-    }\n-\n-    // NOTE: Does update keyCount\n-    private void moveKeysAndValues( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count )\n-    {\n-        int firstAllocOffset = getAllocOffset( toCursor );\n-        int toAllocOffset = firstAllocOffset;\n-        for ( int i = 0; i < count; i++, toPos++ )\n-        {\n-            toAllocOffset = moveRawKeyValue( fromCursor, fromPos + i, toCursor, toAllocOffset );\n-            toCursor.setOffset( keyPosOffsetLeaf( toPos ) );\n-            putKeyOffset( toCursor, toAllocOffset );\n-        }\n-        setAllocOffset( toCursor, toAllocOffset );\n-\n-        // Update deadspace\n-        int deadSpace = getDeadSpace( fromCursor );\n-        int totalMovedBytes = firstAllocOffset - toAllocOffset;\n-        setDeadSpace( fromCursor, deadSpace + totalMovedBytes );\n-\n-        // Key count\n-        setKeyCount( fromCursor, fromPos );\n-    }\n-\n-    /**\n-     * Transfer key and value from logical position in 'from' to physical position next to current alloc offset in 'to'.\n-     * Mark transferred key as dead.\n-     * @return new alloc offset in 'to'\n-     */\n-    private int moveRawKeyValue( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toAllocOffset )\n-    {\n-        // What to copy?\n-        placeCursorAtActualKey( fromCursor, fromPos, LEAF );\n-        int fromKeyOffset = fromCursor.getOffset();\n-        long keyValueSize = readKeyValueSize( fromCursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int valueSize = extractValueSize( keyValueSize );\n-\n-        // Copy\n-        int toCopy = getOverhead( keySize, valueSize ) + keySize + valueSize;\n-        int newRightAllocSpace = toAllocOffset - toCopy;\n-        fromCursor.copyTo( fromKeyOffset, toCursor, newRightAllocSpace, toCopy );\n-\n-        // Put tombstone\n-        fromCursor.setOffset( fromKeyOffset );\n-        putTombstone( fromCursor );\n-        return newRightAllocSpace;\n-    }\n-\n-    @Override\n-    void copyKeyValuesFromLeftToRight( PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount )\n-    {\n-        defragmentLeaf( rightCursor );\n-\n-        // Push keys and values in right sibling to the right\n-        insertSlotsAt( rightCursor, 0, leftKeyCount, rightKeyCount, keyPosOffsetLeaf( 0 ), bytesKeyOffset() );\n-\n-        // Copy\n-        copyKeysAndValues( leftCursor, 0, rightCursor, 0, leftKeyCount );\n-\n-        // KeyCount\n-        setKeyCount( rightCursor, rightKeyCount + leftKeyCount );\n-    }\n-\n-    private void copyKeysAndValues( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count )\n-    {\n-        int toAllocOffset = getAllocOffset( toCursor );\n-        for ( int i = 0; i < count; i++, toPos++ )\n-        {\n-            toAllocOffset = copyRawKeyValue( fromCursor, fromPos + i, toCursor, toAllocOffset );\n-            toCursor.setOffset( keyPosOffsetLeaf( toPos ) );\n-            putKeyOffset( toCursor, toAllocOffset );\n-        }\n-        setAllocOffset( toCursor, toAllocOffset );\n-    }\n-\n-    /**\n-     * Copy key and value from logical position in 'from' tp physical position next to current alloc offset in 'to'.\n-     * Does NOT mark transferred key as dead.\n-     * @return new alloc offset in 'to'\n-     */\n-    private int copyRawKeyValue( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toAllocOffset )\n-    {\n-        // What to copy?\n-        placeCursorAtActualKey( fromCursor, fromPos, LEAF );\n-        int fromKeyOffset = fromCursor.getOffset();\n-        long keyValueSize = readKeyValueSize( fromCursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int valueSize = extractValueSize( keyValueSize );\n-\n-        // Copy\n-        int toCopy = getOverhead( keySize, valueSize ) + keySize + valueSize;\n-        int newRightAllocSpace = toAllocOffset - toCopy;\n-        fromCursor.copyTo( fromKeyOffset, toCursor, newRightAllocSpace, toCopy );\n-        return newRightAllocSpace;\n-    }\n-\n-    private int getAllocSpace( PageCursor cursor, int keyCount, Type type )\n-    {\n-        int allocOffset = getAllocOffset( cursor );\n-        int endOfOffsetArray = type == LEAF ? keyPosOffsetLeaf( keyCount ) : keyPosOffsetInternal( keyCount );\n-        return allocOffset - endOfOffsetArray;\n-    }\n-\n-    private void recordDeadAndAliveLeaf( PageCursor cursor, PrimitiveIntStack deadKeysOffset, PrimitiveIntStack aliveKeysOffset )\n-    {\n-        int currentOffset = getAllocOffset( cursor );\n-        while ( currentOffset < pageSize )\n-        {\n-            cursor.setOffset( currentOffset );\n-            long keyValueSize = readKeyValueSize( cursor );\n-            int keySize = extractKeySize( keyValueSize );\n-            int valueSize = extractValueSize( keyValueSize );\n-            boolean dead = extractTombstone( keyValueSize );\n-\n-            if ( dead )\n-            {\n-                deadKeysOffset.push( currentOffset );\n-            }\n-            else\n-            {\n-                aliveKeysOffset.push( currentOffset );\n-            }\n-            currentOffset += keySize + valueSize + getOverhead( keySize, valueSize );\n-        }\n-    }\n-\n-    private void recordDeadAndAliveInternal( PageCursor cursor, PrimitiveIntStack deadKeysOffset, PrimitiveIntStack aliveKeysOffset )\n-    {\n-        int currentOffset = getAllocOffset( cursor );\n-        while ( currentOffset < pageSize )\n-        {\n-            cursor.setOffset( currentOffset );\n-            long keyValueSize = readKeyValueSize( cursor );\n-            int keySize = extractKeySize( keyValueSize );\n-            boolean dead = extractTombstone( keyValueSize );\n-\n-            if ( dead )\n-            {\n-                deadKeysOffset.push( currentOffset );\n-            }\n-            else\n-            {\n-                aliveKeysOffset.push( currentOffset );\n-            }\n-            currentOffset += keySize + getOverhead( keySize, 0 );\n-        }\n-    }\n-\n-    // NOTE: Does NOT update keyCount\n-    private void moveKeysAndChildren( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count,\n-            boolean includeLeftMostChild )\n-    {\n-        if ( count == 0 && !includeLeftMostChild )\n-        {\n-            // Nothing to move\n-            return;\n-        }\n-\n-        // All children\n-        // This will also copy key offsets but those will be overwritten below.\n-        int childFromOffset = includeLeftMostChild ? childOffset( fromPos ) : childOffset( fromPos + 1 );\n-        int childToOffset = childOffset( fromPos + count ) + childSize();\n-        int lengthInBytes = childToOffset - childFromOffset;\n-        int targetOffset = includeLeftMostChild ? childOffset( 0 ) : childOffset( 1 );\n-        fromCursor.copyTo( childFromOffset, toCursor, targetOffset, lengthInBytes );\n-\n-        // Move actual keys and update pointers\n-        int toAllocOffset = getAllocOffset( toCursor );\n-        int firstAllocOffset = toAllocOffset;\n-        for ( int i = 0; i < count; i++, toPos++ )\n-        {\n-            // Key\n-            toAllocOffset = transferRawKey( fromCursor, fromPos + i, toCursor, toAllocOffset );\n-            toCursor.setOffset( keyPosOffsetInternal( toPos ) );\n-            putKeyOffset( toCursor, toAllocOffset );\n-        }\n-        setAllocOffset( toCursor, toAllocOffset );\n-\n-        // Update deadspace\n-        int deadSpace = getDeadSpace( fromCursor );\n-        int totalMovedBytes = firstAllocOffset - toAllocOffset;\n-        setDeadSpace( fromCursor, deadSpace + totalMovedBytes );\n-\n-        // Zero pad empty area\n-        zeroPad( fromCursor, childFromOffset, lengthInBytes );\n-    }\n-\n-    private void zeroPad( PageCursor fromCursor, int fromOffset, int lengthInBytes )\n-    {\n-        fromCursor.setOffset( fromOffset );\n-        fromCursor.putBytes( lengthInBytes, (byte) 0 );\n-    }\n-\n-    private int transferRawKey( PageCursor fromCursor, int fromPos, PageCursor toCursor, int toAllocOffset )\n-    {\n-        // What to copy?\n-        placeCursorAtActualKey( fromCursor, fromPos, INTERNAL );\n-        int fromKeyOffset = fromCursor.getOffset();\n-        int keySize = extractKeySize( readKeyValueSize( fromCursor ) );\n-\n-        // Copy\n-        int toCopy = getOverhead( keySize, 0 ) + keySize;\n-        toAllocOffset -= toCopy;\n-        fromCursor.copyTo( fromKeyOffset, toCursor, toAllocOffset, toCopy );\n-\n-        // Put tombstone\n-        fromCursor.setOffset( fromKeyOffset );\n-        putTombstone( fromCursor );\n-        return toAllocOffset;\n-    }\n-\n-    private int middleInternal( PageCursor cursor, int insertPos, KEY newKey, int keyCountAfterInsert )\n-    {\n-        int halfSpace = this.halfSpace;\n-        int middle = 0;\n-        int currentPos = 0;\n-        int middleSpace = childSize(); // Leftmost child will always be included in left side\n-        int currentDelta = Math.abs( middleSpace - halfSpace );\n-        int prevDelta;\n-        boolean includedNew = false;\n-\n-        do\n+    // Mark all offsets\n+    deadKeysOffset.clear();\n+    aliveKeysOffset.clear();\n+    if (type == INTERNAL)\n+    {\n+      recordDeadAndAliveInternal(cursor, deadKeysOffset, aliveKeysOffset);\n+    } else\n+    {\n+      recordDeadAndAliveLeaf(cursor, deadKeysOffset, aliveKeysOffset);\n+    }\n+\n+    // Cursors into field byte arrays\n+    int oldOffsetCursor = 0;\n+    int newOffsetCursor = 0;\n+\n+    int aliveRangeOffset = pageSize; // Everything after this point is alive\n+    int deadRangeOffset; // Everything between this point and aliveRangeOffset is dead space\n+\n+    // Rightmost alive keys does not need to move\n+    while (deadKeysOffset.peek() < aliveKeysOffset.peek())\n+    {\n+      aliveRangeOffset = aliveKeysOffset.poll();\n+    }\n+\n+    do\n+    {\n+      // Locate next range of dead keys\n+      deadRangeOffset = aliveRangeOffset;\n+      while (aliveKeysOffset.peek() < deadKeysOffset.peek())\n+      {\n+        deadRangeOffset = deadKeysOffset.poll();\n+      }\n+\n+      // Locate next range of alive keys\n+      int moveOffset = deadRangeOffset;\n+      while (deadKeysOffset.peek() < aliveKeysOffset.peek())\n+      {\n+        int moveKey = aliveKeysOffset.poll();\n+        oldOffset[oldOffsetCursor++] = moveKey;\n+        moveOffset = moveKey;\n+      }\n+\n+      // Update offset mapping\n+      int deadRangeSize = aliveRangeOffset - deadRangeOffset;\n+      while (oldOffsetCursor > newOffsetCursor)\n+      {\n+        newOffset[newOffsetCursor] = oldOffset[newOffsetCursor] + deadRangeSize;\n+        newOffsetCursor++;\n+      }\n+\n+      // Do move\n+      while (moveOffset < (deadRangeOffset - deadRangeSize))\n+      {\n+        // Move one block\n+        deadRangeOffset -= deadRangeSize;\n+        aliveRangeOffset -= deadRangeSize;\n+        cursor.copyTo(deadRangeOffset, cursor, aliveRangeOffset, deadRangeSize);\n+      }\n+      // Move the last piece\n+      int lastBlockSize = deadRangeOffset - moveOffset;\n+      if (lastBlockSize > 0)\n+      {\n+        deadRangeOffset -= lastBlockSize;\n+        aliveRangeOffset -= lastBlockSize;\n+        cursor.copyTo(deadRangeOffset, cursor, aliveRangeOffset, lastBlockSize);\n+      }\n+    }\n+    while (!aliveKeysOffset.isEmpty());\n+    // Update allocOffset\n+    int prevAllocOffset = getAllocOffset(cursor);\n+    setAllocOffset(cursor, aliveRangeOffset);\n+\n+    // Zero pad reclaimed area\n+    zeroPad(cursor, prevAllocOffset, aliveRangeOffset - prevAllocOffset);\n+\n+    // Update offset array\n+    int keyCount = keyCount(cursor);\n+    keyPos:\n+    for (int pos = 0; pos < keyCount; pos++)\n+    {\n+      int keyPosOffset = keyPosOffset(pos, type);\n+      cursor.setOffset(keyPosOffset);\n+      int keyOffset = readKeyOffset(cursor);\n+      for (int index = 0; index < oldOffsetCursor; index++)\n+      {\n+        if (keyOffset == oldOffset[index])\n         {\n-            // We may come closer to split by keeping one more in left\n-            int space;\n-            if ( currentPos == insertPos & !includedNew )\n-            {\n-                space = totalSpaceOfKeyChild( newKey );\n-                includedNew = true;\n-                currentPos--;\n-            }\n-            else\n-            {\n-                space = totalSpaceOfKeyChild( cursor, currentPos );\n-            }\n-            middleSpace += space;\n-            prevDelta = currentDelta;\n-            currentDelta = Math.abs( middleSpace - halfSpace );\n-            middle++;\n-            currentPos++;\n+          // Overwrite with new offset\n+          cursor.setOffset(keyPosOffset);\n+          putKeyOffset(cursor, newOffset[index]);\n+          continue keyPos;\n         }\n-        while ( currentDelta < prevDelta && currentPos < keyCountAfterInsert );\n-        middle--; // Step back to the pos that most equally divide the available space in two\n-        return middle;\n+      }\n     }\n \n-    /**\n-     * Calculates a valid and as optimal as possible position where to split a leaf if inserting a key overflows.\n-     * There are a couple of goals/conditions which drives the search for it:\n-     * <ul>\n-     *     <li>The returned position will be one where the keys ending up in the left and right leaves respectively are guaranteed to fit.</li>\n-     *     <li>Out of those possible positions the one which is closest to the \"halfSpace\" of a leaf will be selected</li>\n-     * </ul>\n-     *\n-     * @param cursor {@link PageCursor} to use for reading sizes of existing entries.\n-     * @param insertPos the pos which the new key will be inserted at.\n-     * @param newKey key to be inserted.\n-     * @param newValue value to be inserted.\n-     * @param keyCountAfterInsert key count including the new key.\n-     * @return the pos where to split.\n-     */\n-    private int middlePosInLeaf( PageCursor cursor, int insertPos, KEY newKey, VALUE newValue, int keyCountAfterInsert )\n-    {\n-        int halfSpace = this.halfSpace;\n-        int middle = 0;\n-        int currentPos = 0;\n-        int accumulatedSpace = 0;\n-        int currentDelta = halfSpace;\n-        int prevDelta;\n-        int spaceOfNewKey = totalSpaceOfKeyValue( newKey, newValue );\n-        int totalSpaceIncludingNewKey = totalActiveSpace( cursor, keyCountAfterInsert - 1 ) + spaceOfNewKey;\n-        boolean includedNew = false;\n-        boolean prevPosPossible;\n-\n-        if ( totalSpaceIncludingNewKey > totalSpace * 2 )\n-        {\n-            throw new IllegalStateException(\n-                    format( \"There's not enough space to insert new key, even when splitting the leaf. Space needed:%d, max space allowed:%d\",\n-                            totalSpaceIncludingNewKey, totalSpace * 2 ) );\n-        }\n-\n-        do\n-        {\n-            prevPosPossible = totalSpaceIncludingNewKey - accumulatedSpace <= totalSpace;\n-\n-            // We may come closer to split by keeping one more in left\n-            int currentSpace;\n-            if ( currentPos == insertPos & !includedNew )\n-            {\n-                currentSpace = spaceOfNewKey;\n-                includedNew = true;\n-                currentPos--;\n-            }\n-            else\n-            {\n-                currentSpace = totalSpaceOfKeyValue( cursor, currentPos );\n-            }\n-            accumulatedSpace += currentSpace;\n-            prevDelta = currentDelta;\n-            currentDelta = Math.abs( accumulatedSpace - halfSpace );\n-            currentPos++;\n-            middle++;\n-        }\n-        while ( currentDelta < prevDelta && currentPos < keyCountAfterInsert );\n-        // If previous position is possible then step back one pos since it divides the space most equally\n-        if ( prevPosPossible )\n-        {\n-            middle--;\n-        }\n-        return middle;\n+    // Update dead space\n+    setDeadSpace(cursor, 0);\n+  }\n+\n+  @Override\n+  boolean leafUnderflow(PageCursor cursor, int keyCount)\n+  {\n+    int halfSpace = this.halfSpace;\n+    int allocSpace = getAllocSpace(cursor, keyCount, LEAF);\n+    int deadSpace = getDeadSpace(cursor);\n+    int availableSpace = allocSpace + deadSpace;\n+\n+    return availableSpace > halfSpace;\n+  }\n+\n+  @Override\n+  int canRebalanceLeaves(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount)\n+  {\n+    int leftActiveSpace = totalActiveSpace(leftCursor, leftKeyCount);\n+    int rightActiveSpace = totalActiveSpace(rightCursor, rightKeyCount);\n+\n+    if (leftActiveSpace + rightActiveSpace < totalSpace)\n+    {\n+      // We can merge\n+      return -1;\n     }\n-\n-    private int totalActiveSpace( PageCursor cursor, int keyCount )\n+    if (leftActiveSpace < rightActiveSpace)\n     {\n-        int deadSpace = getDeadSpace( cursor );\n-        int allocSpace = getAllocSpace( cursor, keyCount, LEAF );\n-        return totalSpace - deadSpace - allocSpace;\n+      // Moving keys to the right will only create more imbalance\n+      return 0;\n     }\n \n-    private int totalSpaceOfKeyValue( KEY key, VALUE value )\n-    {\n-        int keySize = layout.keySize( key );\n-        int valueSize = layout.valueSize( value );\n-        return bytesKeyOffset() + getOverhead( keySize, valueSize ) + keySize + valueSize;\n-    }\n-\n-    private int totalSpaceOfKeyChild( KEY key )\n-    {\n-        int keySize = layout.keySize( key );\n-        return bytesKeyOffset() + getOverhead( keySize, 0 ) + childSize() + keySize;\n-    }\n-\n-    private int totalSpaceOfKeyValue( PageCursor cursor, int pos )\n-    {\n-        placeCursorAtActualKey( cursor, pos, LEAF );\n-        long keyValueSize = readKeyValueSize( cursor );\n-        int keySize = extractKeySize( keyValueSize );\n-        int valueSize = extractValueSize( keyValueSize );\n-        return bytesKeyOffset() + getOverhead( keySize, valueSize ) + keySize + valueSize;\n-    }\n-\n-    private int totalSpaceOfKeyChild( PageCursor cursor, int pos )\n-    {\n-        placeCursorAtActualKey( cursor, pos, INTERNAL );\n-        int keySize = extractKeySize( readKeyValueSize( cursor ) );\n-        return bytesKeyOffset() + getOverhead( keySize, 0 ) + childSize() + keySize;\n-    }\n-\n-    private void setAllocOffset( PageCursor cursor, int allocOffset )\n-    {\n-        PageCursorUtil.putUnsignedShort( cursor, BYTE_POS_ALLOCOFFSET, allocOffset );\n-    }\n-\n-    int getAllocOffset( PageCursor cursor )\n-    {\n-        return PageCursorUtil.getUnsignedShort( cursor, BYTE_POS_ALLOCOFFSET );\n-    }\n-\n-    private void setDeadSpace( PageCursor cursor, int deadSpace )\n-    {\n-        putUnsignedShort( cursor, BYTE_POS_DEADSPACE, deadSpace );\n-    }\n-\n-    private int getDeadSpace( PageCursor cursor )\n-    {\n-        return PageCursorUtil.getUnsignedShort( cursor, BYTE_POS_DEADSPACE );\n-    }\n-\n-    private void placeCursorAtActualKey( PageCursor cursor, int pos, Type type )\n-    {\n-        // Set cursor to correct place in offset array\n-        int keyPosOffset = keyPosOffset( pos, type );\n-        cursor.setOffset( keyPosOffset );\n-\n-        // Read actual offset to key\n-        int keyOffset = readKeyOffset( cursor );\n-\n-        // Verify offset is reasonable\n-        if ( keyOffset >= pageSize || keyOffset < HEADER_LENGTH_DYNAMIC )\n-        {\n-            cursor.setCursorException( format( \"Tried to read key on offset=%d, headerLength=%d, pageSize=%d, pos=%d\",\n-                    keyOffset, HEADER_LENGTH_DYNAMIC, pageSize, pos ) );\n-            return;\n-        }\n-\n-        // Set cursor to actual offset\n-        cursor.setOffset( keyOffset );\n-    }\n-\n-    private void readUnreliableKeyValueSize( PageCursor cursor, int keySize, int valueSize, long keyValueSize, int pos )\n-    {\n-        cursor.setCursorException( format( \"Read unreliable key, keySize=%d, valueSize=%d, keyValueSizeCap=%d, keyHasTombstone=%b, pos=%d\",\n-                keySize, valueSize, keyValueSizeCap(), extractTombstone( keyValueSize ), pos ) );\n-    }\n-\n-    private boolean keyValueSizeTooLarge( int keySize, int valueSize )\n-    {\n-        return keySize + valueSize > keyValueSizeCap();\n-    }\n-\n-    private int keyPosOffset( int pos, Type type )\n-    {\n-        if ( type == LEAF )\n-        {\n-            return keyPosOffsetLeaf( pos );\n-        }\n-        else\n-        {\n-            return keyPosOffsetInternal( pos );\n-        }\n-    }\n-\n-    private int keyPosOffsetLeaf( int pos )\n-    {\n-        return HEADER_LENGTH_DYNAMIC + pos * bytesKeyOffset();\n-    }\n-\n-    private int keyPosOffsetInternal( int pos )\n-    {\n-        // header + childPointer + pos * (keyPosOffsetSize + childPointer)\n-        return HEADER_LENGTH_DYNAMIC + childSize() + pos * keyChildSize();\n-    }\n-\n-    private int keyChildSize()\n-    {\n-        return bytesKeyOffset() + SIZE_PAGE_REFERENCE;\n-    }\n-\n-    private int childSize()\n-    {\n-        return SIZE_PAGE_REFERENCE;\n-    }\n-\n-    private static int bytesKeyOffset()\n-    {\n-        return SIZE_OFFSET;\n-    }\n-\n-    private static int bytesPageOffset()\n-    {\n-        return SIZE_OFFSET;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"TreeNodeDynamicSize[pageSize:\" + pageSize + \", keyValueSizeCap:\" + keyValueSizeCap() + \"]\";\n-    }\n-\n-    private String asString( PageCursor cursor, boolean includeValue, boolean includeAllocSpace,\n-            long stableGeneration, long unstableGeneration )\n-    {\n-        int currentOffset = cursor.getOffset();\n-        // [header] <- dont care\n-        // LEAF:     [allocOffset=][child0,key0*,child1,...][keySize|key][keySize|key]\n-        // INTERNAL: [allocOffset=][key0*,key1*,...][offset|keySize|valueSize|key][keySize|valueSize|key]\n-\n-        Type type = isInternal( cursor ) ? INTERNAL : LEAF;\n-\n-        // HEADER\n-        int allocOffset = getAllocOffset( cursor );\n-        int deadSpace = getDeadSpace( cursor );\n-        String additionalHeader = \"{\" + cursor.getCurrentPageId() + \"} [allocOffset=\" + allocOffset + \" deadSpace=\" + deadSpace + \"] \";\n-\n-        // OFFSET ARRAY\n-        String offsetArray = readOffsetArray( cursor, stableGeneration, unstableGeneration, type );\n-\n-        // ALLOC SPACE\n-        String allocSpace = \"\";\n-        if ( includeAllocSpace )\n-        {\n-            allocSpace = readAllocSpace( cursor, allocOffset, type );\n-        }\n-\n-        // KEYS\n-        KEY readKey = layout.newKey();\n-        VALUE readValue = layout.newValue();\n-        StringJoiner keys = new StringJoiner( \" \" );\n-        cursor.setOffset( allocOffset );\n-        while ( cursor.getOffset() < cursor.getCurrentPageSize() )\n-        {\n-            StringJoiner singleKey = new StringJoiner( \"|\" );\n-            singleKey.add( Integer.toString( cursor.getOffset() ) );\n-            long keyValueSize = readKeyValueSize( cursor );\n-            int keySize = extractKeySize( keyValueSize );\n-            int valueSize = 0;\n-            if ( type == LEAF )\n-            {\n-                valueSize = extractValueSize( keyValueSize );\n-            }\n-            if ( DynamicSizeUtil.extractTombstone( keyValueSize ) )\n-            {\n-                singleKey.add( \"X\" );\n-            }\n-            else\n-            {\n-                singleKey.add( \"_\" );\n-            }\n-            layout.readKey( cursor, readKey, keySize );\n-            if ( type == LEAF )\n-            {\n-                layout.readValue( cursor, readValue, valueSize );\n-            }\n-            singleKey.add( Integer.toString( keySize ) );\n-            if ( type == LEAF && includeValue )\n-            {\n-                singleKey.add( Integer.toString( valueSize ) );\n-            }\n-            singleKey.add( readKey.toString() );\n-            if ( type == LEAF && includeValue )\n-            {\n-                singleKey.add( readValue.toString() );\n-            }\n-            keys.add( singleKey.toString() );\n-        }\n-\n-        cursor.setOffset( currentOffset );\n-        return additionalHeader + offsetArray + \" \" + allocSpace + \" \" + keys;\n-    }\n-\n-    @SuppressWarnings( \"unused\" )\n-    @Override\n-    void printNode( PageCursor cursor, boolean includeValue, boolean includeAllocSpace, long stableGeneration, long unstableGeneration )\n-    {\n-        System.out.println( asString( cursor, includeValue, includeAllocSpace, stableGeneration, unstableGeneration ) );\n-    }\n-\n-    private String readAllocSpace( PageCursor cursor, int allocOffset, Type type )\n-    {\n-        int keyCount = keyCount( cursor );\n-        int endOfOffsetArray = type == INTERNAL ? keyPosOffsetInternal( keyCount ) : keyPosOffsetLeaf( keyCount );\n-        cursor.setOffset( endOfOffsetArray );\n-        int bytesToRead = allocOffset - endOfOffsetArray;\n-        byte[] allocSpace = new byte[bytesToRead];\n-        cursor.getBytes( allocSpace );\n-        for ( byte b : allocSpace )\n-        {\n-            if ( b != 0 )\n-            {\n-                return \"v\" + endOfOffsetArray + \">\" + bytesToRead + \"|\" + Arrays.toString( allocSpace );\n-            }\n-        }\n-        return \"v\" + endOfOffsetArray + \">\" + bytesToRead + \"|[0...]\";\n-    }\n-\n-    private String readOffsetArray( PageCursor cursor, long stableGeneration, long unstableGeneration, Type type )\n-    {\n-        int keyCount = keyCount( cursor );\n-        StringJoiner offsetArray = new StringJoiner( \" \" );\n-        for ( int i = 0; i < keyCount; i++ )\n-        {\n-            if ( type == INTERNAL )\n-            {\n-                long childPointer = GenerationSafePointerPair.pointer( childAt( cursor, i, stableGeneration, unstableGeneration ) );\n-                offsetArray.add( \"/\" + Long.toString( childPointer ) + \"\\\\\" );\n-            }\n-            cursor.setOffset( keyPosOffset( i, type ) );\n-            offsetArray.add( Integer.toString( DynamicSizeUtil.readKeyOffset( cursor ) ) );\n-        }\n-        if ( type == INTERNAL )\n-        {\n-            long childPointer = GenerationSafePointerPair.pointer( childAt( cursor, keyCount, stableGeneration, unstableGeneration ) );\n-            offsetArray.add( \"/\" + Long.toString( childPointer ) + \"\\\\\" );\n-        }\n-        return offsetArray.toString();\n-    }\n+    int prevDelta;\n+    int currentDelta = Math.abs(leftActiveSpace - rightActiveSpace);\n+    int keysToMove = 0;\n+    int lastChunkSize;\n+    do\n+    {\n+      keysToMove++;\n+      lastChunkSize = totalSpaceOfKeyValue(leftCursor, leftKeyCount - keysToMove);\n+      leftActiveSpace -= lastChunkSize;\n+      rightActiveSpace += lastChunkSize;\n+\n+      prevDelta = currentDelta;\n+      currentDelta = Math.abs(leftActiveSpace - rightActiveSpace);\n+    }\n+    while (currentDelta < prevDelta);\n+    keysToMove--; // Move back to optimal split\n+    leftActiveSpace += lastChunkSize;\n+    rightActiveSpace -= lastChunkSize;\n+\n+    int halfSpace = this.halfSpace;\n+    boolean canRebalance = leftActiveSpace > halfSpace && rightActiveSpace > halfSpace;\n+    return canRebalance ? keysToMove : 0;\n+  }\n+\n+  @Override\n+  boolean canMergeLeaves(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount)\n+  {\n+    int leftActiveSpace = totalActiveSpace(leftCursor, leftKeyCount);\n+    int rightActiveSpace = totalActiveSpace(rightCursor, rightKeyCount);\n+    int totalSpace = this.totalSpace;\n+    return totalSpace >= leftActiveSpace + rightActiveSpace;\n+  }\n+\n+  @Override\n+  void doSplitLeaf(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n+                   VALUE newValue, KEY newSplitter)\n+  {\n+    // Find middle\n+    int keyCountAfterInsert = leftKeyCount + 1;\n+    int middlePos = middlePosInLeaf(leftCursor, insertPos, newKey, newValue, keyCountAfterInsert);\n+\n+    if (middlePos == insertPos)\n+    {\n+      layout.copyKey(newKey, newSplitter);\n+    } else\n+    {\n+      keyAt(leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, LEAF);\n+    }\n+    int rightKeyCount = keyCountAfterInsert - middlePos;\n+\n+    if (insertPos < middlePos)\n+    {\n+      //                  v-------v       copy\n+      // before _,_,_,_,_,_,_,_,_,_\n+      // insert _,_,_,X,_,_,_,_,_,_,_\n+      // middle           ^\n+      moveKeysAndValues(leftCursor, middlePos - 1, rightCursor, 0, rightKeyCount);\n+      defragmentLeaf(leftCursor);\n+      insertKeyValueAt(leftCursor, newKey, newValue, insertPos, middlePos - 1);\n+    } else\n+    {\n+      //                  v---v           first copy\n+      //                        v-v       second copy\n+      // before _,_,_,_,_,_,_,_,_,_\n+      // insert _,_,_,_,_,_,_,_,X,_,_\n+      // middle           ^\n+\n+      // Copy everything in one go\n+      int newInsertPos = insertPos - middlePos;\n+      int keysToMove = leftKeyCount - middlePos;\n+      moveKeysAndValues(leftCursor, middlePos, rightCursor, 0, keysToMove);\n+      defragmentLeaf(leftCursor);\n+      insertKeyValueAt(rightCursor, newKey, newValue, newInsertPos, keysToMove);\n+    }\n+    TreeNode.setKeyCount(leftCursor, middlePos);\n+    TreeNode.setKeyCount(rightCursor, rightKeyCount);\n+  }\n+\n+  @Override\n+  void doSplitInternal(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int insertPos, KEY newKey,\n+                       long newRightChild, long stableGeneration, long unstableGeneration, KEY newSplitter)\n+  {\n+    int keyCountAfterInsert = leftKeyCount + 1;\n+    int middlePos = middleInternal(leftCursor, insertPos, newKey, keyCountAfterInsert);\n+\n+    if (middlePos == insertPos)\n+    {\n+      layout.copyKey(newKey, newSplitter);\n+    } else\n+    {\n+      keyAt(leftCursor, newSplitter, insertPos < middlePos ? middlePos - 1 : middlePos, INTERNAL);\n+    }\n+    int rightKeyCount = keyCountAfterInsert - middlePos - 1; // -1 because don't keep prim key in internal\n+\n+    if (insertPos < middlePos)\n+    {\n+      //                         v-------v       copy\n+      // before key    _,_,_,_,_,_,_,_,_,_\n+      // before child -,-,-,-,-,-,-,-,-,-,-\n+      // insert key    _,_,X,_,_,_,_,_,_,_,_\n+      // insert child -,-,-,x,-,-,-,-,-,-,-,-\n+      // middle key              ^\n+\n+      moveKeysAndChildren(leftCursor, middlePos, rightCursor, 0, rightKeyCount, true);\n+      // Rightmost key in left is the one we send up to parent, remove it from here.\n+      removeKeyAndRightChildAt(leftCursor, middlePos - 1, middlePos);\n+      defragmentInternal(leftCursor);\n+      insertKeyAndRightChildAt(leftCursor, newKey, newRightChild, insertPos, middlePos - 1, stableGeneration, unstableGeneration);\n+    } else\n+    {\n+      // pos > middlePos\n+      //                         v-v          first copy\n+      //                             v-v-v    second copy\n+      // before key    _,_,_,_,_,_,_,_,_,_\n+      // before child -,-,-,-,-,-,-,-,-,-,-\n+      // insert key    _,_,_,_,_,_,_,X,_,_,_\n+      // insert child -,-,-,-,-,-,-,-,x,-,-,-\n+      // middle key              ^\n+\n+      // pos == middlePos\n+      //                                      first copy\n+      //                         v-v-v-v-v    second copy\n+      // before key    _,_,_,_,_,_,_,_,_,_\n+      // before child -,-,-,-,-,-,-,-,-,-,-\n+      // insert key    _,_,_,_,_,X,_,_,_,_,_\n+      // insert child -,-,-,-,-,-,x,-,-,-,-,-\n+      // middle key              ^\n+\n+      // Keys\n+      if (insertPos == middlePos)\n+      {\n+        int copyFrom = middlePos;\n+        int copyCount = leftKeyCount - copyFrom;\n+        moveKeysAndChildren(leftCursor, copyFrom, rightCursor, 0, copyCount, false);\n+        defragmentInternal(leftCursor);\n+        setChildAt(rightCursor, newRightChild, 0, stableGeneration, unstableGeneration);\n+      } else\n+      {\n+        int copyFrom = middlePos + 1;\n+        int copyCount = leftKeyCount - copyFrom;\n+        moveKeysAndChildren(leftCursor, copyFrom, rightCursor, 0, copyCount, true);\n+        // Rightmost key in left is the one we send up to parent, remove it from here.\n+        removeKeyAndRightChildAt(leftCursor, middlePos, middlePos + 1);\n+        defragmentInternal(leftCursor);\n+        insertKeyAndRightChildAt(rightCursor, newKey, newRightChild, insertPos - copyFrom, copyCount,\n+            stableGeneration, unstableGeneration);\n+      }\n+    }\n+    TreeNode.setKeyCount(leftCursor, middlePos);\n+    TreeNode.setKeyCount(rightCursor, rightKeyCount);\n+  }\n+\n+  @Override\n+  void moveKeyValuesFromLeftToRight(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount,\n+                                    int fromPosInLeftNode)\n+  {\n+    defragmentLeaf(rightCursor);\n+    int numberOfKeysToMove = leftKeyCount - fromPosInLeftNode;\n+\n+    // Push keys and values in right sibling to the right\n+    insertSlotsAt(rightCursor, 0, numberOfKeysToMove, rightKeyCount, keyPosOffsetLeaf(0), bytesKeyOffset());\n+\n+    // Move (also updates keyCount of left)\n+    moveKeysAndValues(leftCursor, fromPosInLeftNode, rightCursor, 0, numberOfKeysToMove);\n+\n+    // Right keyCount\n+    setKeyCount(rightCursor, rightKeyCount + numberOfKeysToMove);\n+  }\n+\n+  // NOTE: Does update keyCount\n+  private void moveKeysAndValues(PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count)\n+  {\n+    int firstAllocOffset = getAllocOffset(toCursor);\n+    int toAllocOffset = firstAllocOffset;\n+    for (int i = 0; i < count; i++, toPos++)\n+    {\n+      toAllocOffset = moveRawKeyValue(fromCursor, fromPos + i, toCursor, toAllocOffset);\n+      toCursor.setOffset(keyPosOffsetLeaf(toPos));\n+      putKeyOffset(toCursor, toAllocOffset);\n+    }\n+    setAllocOffset(toCursor, toAllocOffset);\n+\n+    // Update deadspace\n+    int deadSpace = getDeadSpace(fromCursor);\n+    int totalMovedBytes = firstAllocOffset - toAllocOffset;\n+    setDeadSpace(fromCursor, deadSpace + totalMovedBytes);\n+\n+    // Key count\n+    setKeyCount(fromCursor, fromPos);\n+  }\n+\n+  /**\n+   * Transfer key and value from logical position in 'from' to physical position next to current alloc offset in 'to'.\n+   * Mark transferred key as dead.\n+   *\n+   * @return new alloc offset in 'to'\n+   */\n+  private int moveRawKeyValue(PageCursor fromCursor, int fromPos, PageCursor toCursor, int toAllocOffset)\n+  {\n+    // What to copy?\n+    placeCursorAtActualKey(fromCursor, fromPos, LEAF);\n+    int fromKeyOffset = fromCursor.getOffset();\n+    long keyValueSize = readKeyValueSize(fromCursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int valueSize = extractValueSize(keyValueSize);\n+\n+    // Copy\n+    int toCopy = getOverhead(keySize, valueSize) + keySize + valueSize;\n+    int newRightAllocSpace = toAllocOffset - toCopy;\n+    fromCursor.copyTo(fromKeyOffset, toCursor, newRightAllocSpace, toCopy);\n+\n+    // Put tombstone\n+    fromCursor.setOffset(fromKeyOffset);\n+    putTombstone(fromCursor);\n+    return newRightAllocSpace;\n+  }\n+\n+  @Override\n+  void copyKeyValuesFromLeftToRight(PageCursor leftCursor, int leftKeyCount, PageCursor rightCursor, int rightKeyCount)\n+  {\n+    defragmentLeaf(rightCursor);\n+\n+    // Push keys and values in right sibling to the right\n+    insertSlotsAt(rightCursor, 0, leftKeyCount, rightKeyCount, keyPosOffsetLeaf(0), bytesKeyOffset());\n+\n+    // Copy\n+    copyKeysAndValues(leftCursor, 0, rightCursor, 0, leftKeyCount);\n+\n+    // KeyCount\n+    setKeyCount(rightCursor, rightKeyCount + leftKeyCount);\n+  }\n+\n+  private void copyKeysAndValues(PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count)\n+  {\n+    int toAllocOffset = getAllocOffset(toCursor);\n+    for (int i = 0; i < count; i++, toPos++)\n+    {\n+      toAllocOffset = copyRawKeyValue(fromCursor, fromPos + i, toCursor, toAllocOffset);\n+      toCursor.setOffset(keyPosOffsetLeaf(toPos));\n+      putKeyOffset(toCursor, toAllocOffset);\n+    }\n+    setAllocOffset(toCursor, toAllocOffset);\n+  }\n+\n+  /**\n+   * Copy key and value from logical position in 'from' tp physical position next to current alloc offset in 'to'.\n+   * Does NOT mark transferred key as dead.\n+   *\n+   * @return new alloc offset in 'to'\n+   */\n+  private int copyRawKeyValue(PageCursor fromCursor, int fromPos, PageCursor toCursor, int toAllocOffset)\n+  {\n+    // What to copy?\n+    placeCursorAtActualKey(fromCursor, fromPos, LEAF);\n+    int fromKeyOffset = fromCursor.getOffset();\n+    long keyValueSize = readKeyValueSize(fromCursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int valueSize = extractValueSize(keyValueSize);\n+\n+    // Copy\n+    int toCopy = getOverhead(keySize, valueSize) + keySize + valueSize;\n+    int newRightAllocSpace = toAllocOffset - toCopy;\n+    fromCursor.copyTo(fromKeyOffset, toCursor, newRightAllocSpace, toCopy);\n+    return newRightAllocSpace;\n+  }\n+\n+  private int getAllocSpace(PageCursor cursor, int keyCount, Type type)\n+  {\n+    int allocOffset = getAllocOffset(cursor);\n+    int endOfOffsetArray = type == LEAF ? keyPosOffsetLeaf(keyCount) : keyPosOffsetInternal(keyCount);\n+    return allocOffset - endOfOffsetArray;\n+  }\n+\n+  private void recordDeadAndAliveLeaf(PageCursor cursor, PrimitiveIntStack deadKeysOffset, PrimitiveIntStack aliveKeysOffset)\n+  {\n+    int currentOffset = getAllocOffset(cursor);\n+    while (currentOffset < pageSize)\n+    {\n+      cursor.setOffset(currentOffset);\n+      long keyValueSize = readKeyValueSize(cursor);\n+      int keySize = extractKeySize(keyValueSize);\n+      int valueSize = extractValueSize(keyValueSize);\n+      boolean dead = extractTombstone(keyValueSize);\n+\n+      if (dead)\n+      {\n+        deadKeysOffset.push(currentOffset);\n+      } else\n+      {\n+        aliveKeysOffset.push(currentOffset);\n+      }\n+      currentOffset += keySize + valueSize + getOverhead(keySize, valueSize);\n+    }\n+  }\n+\n+  private void recordDeadAndAliveInternal(PageCursor cursor, PrimitiveIntStack deadKeysOffset, PrimitiveIntStack aliveKeysOffset)\n+  {\n+    int currentOffset = getAllocOffset(cursor);\n+    while (currentOffset < pageSize)\n+    {\n+      cursor.setOffset(currentOffset);\n+      long keyValueSize = readKeyValueSize(cursor);\n+      int keySize = extractKeySize(keyValueSize);\n+      boolean dead = extractTombstone(keyValueSize);\n+\n+      if (dead)\n+      {\n+        deadKeysOffset.push(currentOffset);\n+      } else\n+      {\n+        aliveKeysOffset.push(currentOffset);\n+      }\n+      currentOffset += keySize + getOverhead(keySize, 0);\n+    }\n+  }\n+\n+  // NOTE: Does NOT update keyCount\n+  private void moveKeysAndChildren(PageCursor fromCursor, int fromPos, PageCursor toCursor, int toPos, int count,\n+                                   boolean includeLeftMostChild)\n+  {\n+    if (count == 0 && !includeLeftMostChild)\n+    {\n+      // Nothing to move\n+      return;\n+    }\n+\n+    // All children\n+    // This will also copy key offsets but those will be overwritten below.\n+    int childFromOffset = includeLeftMostChild ? childOffset(fromPos) : childOffset(fromPos + 1);\n+    int childToOffset = childOffset(fromPos + count) + childSize();\n+    int lengthInBytes = childToOffset - childFromOffset;\n+    int targetOffset = includeLeftMostChild ? childOffset(0) : childOffset(1);\n+    fromCursor.copyTo(childFromOffset, toCursor, targetOffset, lengthInBytes);\n+\n+    // Move actual keys and update pointers\n+    int toAllocOffset = getAllocOffset(toCursor);\n+    int firstAllocOffset = toAllocOffset;\n+    for (int i = 0; i < count; i++, toPos++)\n+    {\n+      // Key\n+      toAllocOffset = transferRawKey(fromCursor, fromPos + i, toCursor, toAllocOffset);\n+      toCursor.setOffset(keyPosOffsetInternal(toPos));\n+      putKeyOffset(toCursor, toAllocOffset);\n+    }\n+    setAllocOffset(toCursor, toAllocOffset);\n+\n+    // Update deadspace\n+    int deadSpace = getDeadSpace(fromCursor);\n+    int totalMovedBytes = firstAllocOffset - toAllocOffset;\n+    setDeadSpace(fromCursor, deadSpace + totalMovedBytes);\n+\n+    // Zero pad empty area\n+    zeroPad(fromCursor, childFromOffset, lengthInBytes);\n+  }\n+\n+  private void zeroPad(PageCursor fromCursor, int fromOffset, int lengthInBytes)\n+  {\n+    fromCursor.setOffset(fromOffset);\n+    fromCursor.putBytes(lengthInBytes, (byte) 0);\n+  }\n+\n+  private int transferRawKey(PageCursor fromCursor, int fromPos, PageCursor toCursor, int toAllocOffset)\n+  {\n+    // What to copy?\n+    placeCursorAtActualKey(fromCursor, fromPos, INTERNAL);\n+    int fromKeyOffset = fromCursor.getOffset();\n+    int keySize = extractKeySize(readKeyValueSize(fromCursor));\n+\n+    // Copy\n+    int toCopy = getOverhead(keySize, 0) + keySize;\n+    toAllocOffset -= toCopy;\n+    fromCursor.copyTo(fromKeyOffset, toCursor, toAllocOffset, toCopy);\n+\n+    // Put tombstone\n+    fromCursor.setOffset(fromKeyOffset);\n+    putTombstone(fromCursor);\n+    return toAllocOffset;\n+  }\n+\n+  private int middleInternal(PageCursor cursor, int insertPos, KEY newKey, int keyCountAfterInsert)\n+  {\n+    int halfSpace = this.halfSpace;\n+    int middle = 0;\n+    int currentPos = 0;\n+    int middleSpace = childSize(); // Leftmost child will always be included in left side\n+    int currentDelta = Math.abs(middleSpace - halfSpace);\n+    int prevDelta;\n+    boolean includedNew = false;\n+\n+    do\n+    {\n+      // We may come closer to split by keeping one more in left\n+      int space;\n+      if (currentPos == insertPos & !includedNew)\n+      {\n+        space = totalSpaceOfKeyChild(newKey);\n+        includedNew = true;\n+        currentPos--;\n+      } else\n+      {\n+        space = totalSpaceOfKeyChild(cursor, currentPos);\n+      }\n+      middleSpace += space;\n+      prevDelta = currentDelta;\n+      currentDelta = Math.abs(middleSpace - halfSpace);\n+      middle++;\n+      currentPos++;\n+    }\n+    while (currentDelta < prevDelta && currentPos < keyCountAfterInsert);\n+    middle--; // Step back to the pos that most equally divide the available space in two\n+    return middle;\n+  }\n+\n+  /**\n+   * Calculates a valid and as optimal as possible position where to split a leaf if inserting a key overflows.\n+   * There are a couple of goals/conditions which drives the search for it:\n+   * <ul>\n+   *     <li>The returned position will be one where the keys ending up in the left and right leaves respectively are guaranteed to fit.</li>\n+   *     <li>Out of those possible positions the one which is closest to the \"halfSpace\" of a leaf will be selected</li>\n+   * </ul>\n+   *\n+   * @param cursor              {@link PageCursor} to use for reading sizes of existing entries.\n+   * @param insertPos           the pos which the new key will be inserted at.\n+   * @param newKey              key to be inserted.\n+   * @param newValue            value to be inserted.\n+   * @param keyCountAfterInsert key count including the new key.\n+   * @return the pos where to split.\n+   */\n+  private int middlePosInLeaf(PageCursor cursor, int insertPos, KEY newKey, VALUE newValue, int keyCountAfterInsert)\n+  {\n+    int halfSpace = this.halfSpace;\n+    int middle = 0;\n+    int currentPos = 0;\n+    int accumulatedSpace = 0;\n+    int currentDelta = halfSpace;\n+    int prevDelta;\n+    int spaceOfNewKey = totalSpaceOfKeyValue(newKey, newValue);\n+    int totalSpaceIncludingNewKey = totalActiveSpace(cursor, keyCountAfterInsert - 1) + spaceOfNewKey;\n+    boolean includedNew = false;\n+    boolean prevPosPossible;\n+\n+    if (totalSpaceIncludingNewKey > totalSpace * 2)\n+    {\n+      throw new IllegalStateException(\n+          format(\"There's not enough space to insert new key, even when splitting the leaf. Space needed:%d, max space allowed:%d\",\n+              totalSpaceIncludingNewKey, totalSpace * 2));\n+    }\n+\n+    do\n+    {\n+      prevPosPossible = totalSpaceIncludingNewKey - accumulatedSpace <= totalSpace;\n+\n+      // We may come closer to split by keeping one more in left\n+      int currentSpace;\n+      if (currentPos == insertPos & !includedNew)\n+      {\n+        currentSpace = spaceOfNewKey;\n+        includedNew = true;\n+        currentPos--;\n+      } else\n+      {\n+        currentSpace = totalSpaceOfKeyValue(cursor, currentPos);\n+      }\n+      accumulatedSpace += currentSpace;\n+      prevDelta = currentDelta;\n+      currentDelta = Math.abs(accumulatedSpace - halfSpace);\n+      currentPos++;\n+      middle++;\n+    }\n+    while (currentDelta < prevDelta && currentPos < keyCountAfterInsert);\n+    // If previous position is possible then step back one pos since it divides the space most equally\n+    if (prevPosPossible)\n+    {\n+      middle--;\n+    }\n+    return middle;\n+  }\n+\n+  private int totalActiveSpace(PageCursor cursor, int keyCount)\n+  {\n+    int deadSpace = getDeadSpace(cursor);\n+    int allocSpace = getAllocSpace(cursor, keyCount, LEAF);\n+    return totalSpace - deadSpace - allocSpace;\n+  }\n+\n+  private int totalSpaceOfKeyValue(KEY key, VALUE value)\n+  {\n+    int keySize = layout.keySize(key);\n+    int valueSize = layout.valueSize(value);\n+    return bytesKeyOffset() + getOverhead(keySize, valueSize) + keySize + valueSize;\n+  }\n+\n+  private int totalSpaceOfKeyChild(KEY key)\n+  {\n+    int keySize = layout.keySize(key);\n+    return bytesKeyOffset() + getOverhead(keySize, 0) + childSize() + keySize;\n+  }\n+\n+  private int totalSpaceOfKeyValue(PageCursor cursor, int pos)\n+  {\n+    placeCursorAtActualKey(cursor, pos, LEAF);\n+    long keyValueSize = readKeyValueSize(cursor);\n+    int keySize = extractKeySize(keyValueSize);\n+    int valueSize = extractValueSize(keyValueSize);\n+    return bytesKeyOffset() + getOverhead(keySize, valueSize) + keySize + valueSize;\n+  }\n+\n+  private int totalSpaceOfKeyChild(PageCursor cursor, int pos)\n+  {\n+    placeCursorAtActualKey(cursor, pos, INTERNAL);\n+    int keySize = extractKeySize(readKeyValueSize(cursor));\n+    return bytesKeyOffset() + getOverhead(keySize, 0) + childSize() + keySize;\n+  }\n+\n+  private void setAllocOffset(PageCursor cursor, int allocOffset)\n+  {\n+    PageCursorUtil.putUnsignedShort(cursor, BYTE_POS_ALLOCOFFSET, allocOffset);\n+  }\n+\n+  int getAllocOffset(PageCursor cursor)\n+  {\n+    return PageCursorUtil.getUnsignedShort(cursor, BYTE_POS_ALLOCOFFSET);\n+  }\n+\n+  private void setDeadSpace(PageCursor cursor, int deadSpace)\n+  {\n+    putUnsignedShort(cursor, BYTE_POS_DEADSPACE, deadSpace);\n+  }\n+\n+  private int getDeadSpace(PageCursor cursor)\n+  {\n+    return PageCursorUtil.getUnsignedShort(cursor, BYTE_POS_DEADSPACE);\n+  }\n+\n+  private void placeCursorAtActualKey(PageCursor cursor, int pos, Type type)\n+  {\n+    // Set cursor to correct place in offset array\n+    int keyPosOffset = keyPosOffset(pos, type);\n+    cursor.setOffset(keyPosOffset);\n+\n+    // Read actual offset to key\n+    int keyOffset = readKeyOffset(cursor);\n+\n+    // Verify offset is reasonable\n+    if (keyOffset >= pageSize || keyOffset < HEADER_LENGTH_DYNAMIC)\n+    {\n+      cursor.setCursorException(format(\"Tried to read key on offset=%d, headerLength=%d, pageSize=%d, pos=%d\",\n+          keyOffset, HEADER_LENGTH_DYNAMIC, pageSize, pos));\n+      return;\n+    }\n+\n+    // Set cursor to actual offset\n+    cursor.setOffset(keyOffset);\n+  }\n+\n+  private void readUnreliableKeyValueSize(PageCursor cursor, int keySize, int valueSize, long keyValueSize, int pos)\n+  {\n+    cursor.setCursorException(format(\"Read unreliable key, keySize=%d, valueSize=%d, keyValueSizeCap=%d, keyHasTombstone=%b, pos=%d\",\n+        keySize, valueSize, keyValueSizeCap(), extractTombstone(keyValueSize), pos));\n+  }\n+\n+  private boolean keyValueSizeTooLarge(int keySize, int valueSize)\n+  {\n+    return keySize + valueSize > keyValueSizeCap();\n+  }\n+\n+  private int keyPosOffset(int pos, Type type)\n+  {\n+    if (type == LEAF)\n+    {\n+      return keyPosOffsetLeaf(pos);\n+    } else\n+    {\n+      return keyPosOffsetInternal(pos);\n+    }\n+  }\n+\n+  private int keyPosOffsetLeaf(int pos)\n+  {\n+    return HEADER_LENGTH_DYNAMIC + pos * bytesKeyOffset();\n+  }\n+\n+  private int keyPosOffsetInternal(int pos)\n+  {\n+    // header + childPointer + pos * (keyPosOffsetSize + childPointer)\n+    return HEADER_LENGTH_DYNAMIC + childSize() + pos * keyChildSize();\n+  }\n+\n+  private int keyChildSize()\n+  {\n+    return bytesKeyOffset() + SIZE_PAGE_REFERENCE;\n+  }\n+\n+  private int childSize()\n+  {\n+    return SIZE_PAGE_REFERENCE;\n+  }\n+\n+  private static int bytesKeyOffset()\n+  {\n+    return SIZE_OFFSET;\n+  }\n+\n+  private static int bytesPageOffset()\n+  {\n+    return SIZE_OFFSET;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"TreeNodeDynamicSize[pageSize:\" + pageSize + \", keyValueSizeCap:\" + keyValueSizeCap() + \"]\";\n+  }\n+\n+  private String asString(PageCursor cursor, boolean includeValue, boolean includeAllocSpace,\n+                          long stableGeneration, long unstableGeneration)\n+  {\n+    int currentOffset = cursor.getOffset();\n+    // [header] <- dont care\n+    // LEAF:     [allocOffset=][child0,key0*,child1,...][keySize|key][keySize|key]\n+    // INTERNAL: [allocOffset=][key0*,key1*,...][offset|keySize|valueSize|key][keySize|valueSize|key]\n+\n+    Type type = isInternal(cursor) ? INTERNAL : LEAF;\n+\n+    // HEADER\n+    int allocOffset = getAllocOffset(cursor);\n+    int deadSpace = getDeadSpace(cursor);\n+    String additionalHeader = \"{\" + cursor.getCurrentPageId() + \"} [allocOffset=\" + allocOffset + \" deadSpace=\" + deadSpace + \"] \";\n+\n+    // OFFSET ARRAY\n+    String offsetArray = readOffsetArray(cursor, stableGeneration, unstableGeneration, type);\n+\n+    // ALLOC SPACE\n+    String allocSpace = \"\";\n+    if (includeAllocSpace)\n+    {\n+      allocSpace = readAllocSpace(cursor, allocOffset, type);\n+    }\n+\n+    // KEYS\n+    KEY readKey = layout.newKey();\n+    VALUE readValue = layout.newValue();\n+    StringJoiner keys = new StringJoiner(\" \");\n+    cursor.setOffset(allocOffset);\n+    while (cursor.getOffset() < cursor.getCurrentPageSize())\n+    {\n+      StringJoiner singleKey = new StringJoiner(\"|\");\n+      singleKey.add(Integer.toString(cursor.getOffset()));\n+      long keyValueSize = readKeyValueSize(cursor);\n+      int keySize = extractKeySize(keyValueSize);\n+      int valueSize = 0;\n+      if (type == LEAF)\n+      {\n+        valueSize = extractValueSize(keyValueSize);\n+      }\n+      if (DynamicSizeUtil.extractTombstone(keyValueSize))\n+      {\n+        singleKey.add(\"X\");\n+      } else\n+      {\n+        singleKey.add(\"_\");\n+      }\n+      layout.readKey(cursor, readKey, keySize);\n+      if (type == LEAF)\n+      {\n+        layout.readValue(cursor, readValue, valueSize);\n+      }\n+      singleKey.add(Integer.toString(keySize));\n+      if (type == LEAF && includeValue)\n+      {\n+        singleKey.add(Integer.toString(valueSize));\n+      }\n+      singleKey.add(readKey.toString());\n+      if (type == LEAF && includeValue)\n+      {\n+        singleKey.add(readValue.toString());\n+      }\n+      keys.add(singleKey.toString());\n+    }\n+\n+    cursor.setOffset(currentOffset);\n+    return additionalHeader + offsetArray + \" \" + allocSpace + \" \" + keys;\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  @Override\n+  void printNode(PageCursor cursor, boolean includeValue, boolean includeAllocSpace, long stableGeneration, long unstableGeneration)\n+  {\n+    System.out.println(asString(cursor, includeValue, includeAllocSpace, stableGeneration, unstableGeneration));\n+  }\n+\n+  private String readAllocSpace(PageCursor cursor, int allocOffset, Type type)\n+  {\n+    int keyCount = keyCount(cursor);\n+    int endOfOffsetArray = type == INTERNAL ? keyPosOffsetInternal(keyCount) : keyPosOffsetLeaf(keyCount);\n+    cursor.setOffset(endOfOffsetArray);\n+    int bytesToRead = allocOffset - endOfOffsetArray;\n+    byte[] allocSpace = new byte[bytesToRead];\n+    cursor.getBytes(allocSpace);\n+    for (byte b : allocSpace)\n+    {\n+      if (b != 0)\n+      {\n+        return \"v\" + endOfOffsetArray + \">\" + bytesToRead + \"|\" + Arrays.toString(allocSpace);\n+      }\n+    }\n+    return \"v\" + endOfOffsetArray + \">\" + bytesToRead + \"|[0...]\";\n+  }\n+\n+  private String readOffsetArray(PageCursor cursor, long stableGeneration, long unstableGeneration, Type type)\n+  {\n+    int keyCount = keyCount(cursor);\n+    StringJoiner offsetArray = new StringJoiner(\" \");\n+    for (int i = 0; i < keyCount; i++)\n+    {\n+      if (type == INTERNAL)\n+      {\n+        long childPointer = GenerationSafePointerPair.pointer(childAt(cursor, i, stableGeneration, unstableGeneration));\n+        offsetArray.add(\"/\" + Long.toString(childPointer) + \"\\\\\");\n+      }\n+      cursor.setOffset(keyPosOffset(i, type));\n+      offsetArray.add(Integer.toString(DynamicSizeUtil.readKeyOffset(cursor)));\n+    }\n+    if (type == INTERNAL)\n+    {\n+      long childPointer = GenerationSafePointerPair.pointer(childAt(cursor, keyCount, stableGeneration, unstableGeneration));\n+      offsetArray.add(\"/\" + Long.toString(childPointer) + \"\\\\\");\n+    }\n+    return offsetArray.toString();\n+  }\n }\n",
            "diff_size": 1719
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}