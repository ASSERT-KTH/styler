{
    "project_name": "h2database-h2database",
    "error_id": "93",
    "information": {
        "errors": [
            {
                "line": "105",
                "column": "29",
                "severity": "warning",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        values = new CacheObject[len];\n        recordCount = 0;\n        memory = len * (long)Constants.MEMORY_POINTER;\n    }\n\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/93/CacheLRU.java\nindex 5310b5695b3..f4ce614aa71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/93/CacheLRU.java\n@@ -102,7 +102,7 @@ public class CacheLRU implements Cache {\n         values = null;\n         values = new CacheObject[len];\n         recordCount = 0;\n-        memory = len * (long)Constants.MEMORY_POINTER;\n+        memory = len * (long) Constants.MEMORY_POINTER;\n     }\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/93/CacheLRU.java\nindex 5310b5695b3..7e7c81c9e34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/93/CacheLRU.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.util;\n \n import java.util.ArrayList;\n@@ -60,7 +61,9 @@ public class CacheLRU implements Cache {\n             }\n             this.len = MathUtils.nextPowerOf2((int) tmpLen);\n         } catch (IllegalArgumentException e) {\n-            throw new IllegalStateException(\"This much cache memory is not supported: \" + maxMemoryKb + \"kb\", e);\n+            throw new IllegalStateException(\n+                    \"This much cache memory is not supported: \" + maxMemoryKb +\n+                            \"kb\", e);\n         }\n         this.mask = len - 1;\n         clear();\n@@ -69,13 +72,13 @@ public class CacheLRU implements Cache {\n     /**\n      * Create a cache of the given type and size.\n      *\n-     * @param writer the cache writer\n+     * @param writer    the cache writer\n      * @param cacheType the cache type\n      * @param cacheSize the size\n      * @return the cache object\n      */\n     public static Cache getCache(CacheWriter writer, String cacheType,\n-            int cacheSize) {\n+                                 int cacheSize) {\n         Map<Integer, CacheObject> secondLevel = null;\n         if (cacheType.startsWith(\"SOFT_\")) {\n             secondLevel = new SoftValuesHashMap<>();\n@@ -102,7 +105,7 @@ public class CacheLRU implements Cache {\n         values = null;\n         values = new CacheObject[len];\n         recordCount = 0;\n-        memory = len * (long)Constants.MEMORY_POINTER;\n+        memory = len * (long) Constants.MEMORY_POINTER;\n     }\n \n     @Override\n@@ -111,7 +114,8 @@ public class CacheLRU implements Cache {\n             int pos = rec.getPos();\n             CacheObject old = find(pos);\n             if (old != null) {\n-                throw DbException.getInternalError(\"try to add a record twice at pos \" + pos);\n+                throw DbException.getInternalError(\n+                        \"try to add a record twice at pos \" + pos);\n             }\n         }\n         int index = rec.getPos() & mask;\n@@ -130,7 +134,9 @@ public class CacheLRU implements Cache {\n             put(rec);\n         } else {\n             if (old != rec) {\n-                throw DbException.getInternalError(\"old!=record pos:\" + pos + \" old:\" + old + \" new:\" + rec);\n+                throw DbException.getInternalError(\n+                        \"old!=record pos:\" + pos + \" old:\" + old + \" new:\" +\n+                                rec);\n             }\n             if (!fifo) {\n                 removeFromLinkedList(rec);\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/93/CacheLRU.java\nindex 5310b5695b3..caf5fe3d91a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/93/CacheLRU.java\n@@ -102,7 +102,7 @@ public class CacheLRU implements Cache {\n         values = null;\n         values = new CacheObject[len];\n         recordCount = 0;\n-        memory = len * (long)Constants.MEMORY_POINTER;\n+        memory = len * (long) Constants.MEMORY_POINTER;\n     }\n \n     @Override\n@@ -378,4 +378,4 @@ public class CacheLRU implements Cache {\n         return (int) (memory * 4L / 1024);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/93/CacheLRU.java\nindex 5310b5695b3..06c007f618b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/93/CacheLRU.java\n@@ -15,10 +15,12 @@ import org.h2.message.DbException;\n /**\n  * A cache implementation based on the last recently used (LRU) algorithm.\n  */\n+\n+\n public class CacheLRU implements Cache {\n \n-    static final String TYPE_NAME = \"LRU\";\n \n+    static final String TYPE_NAME = \"LRU\";\n     private final CacheWriter writer;\n \n     /**\n@@ -26,7 +28,6 @@ public class CacheLRU implements Cache {\n      * the queue).\n      */\n     private final boolean fifo;\n-\n     private final CacheObject head = new CacheHead();\n     private final int mask;\n     private CacheObject[] values;\n@@ -74,11 +75,12 @@ public class CacheLRU implements Cache {\n      * @param cacheSize the size\n      * @return the cache object\n      */\n-    public static Cache getCache(CacheWriter writer, String cacheType,\n-            int cacheSize) {\n+\n+\n+    public static Cache getCache(CacheWriter writer, String cacheType, int cacheSize) {\n         Map<Integer, CacheObject> secondLevel = null;\n         if (cacheType.startsWith(\"SOFT_\")) {\n-            secondLevel = new SoftValuesHashMap<>();\n+            secondLevel = new SoftValuesHashMap< >();\n             cacheType = cacheType.substring(\"SOFT_\".length());\n         }\n         Cache cache;\n@@ -86,7 +88,7 @@ public class CacheLRU implements Cache {\n             cache = new CacheLRU(writer, cacheSize, false);\n         } else if (CacheTQ.TYPE_NAME.equals(cacheType)) {\n             cache = new CacheTQ(writer, cacheSize);\n-        } else {\n+                                                                                      } else {\n             throw DbException.getInvalidValueException(\"CACHE_TYPE\", cacheType);\n         }\n         if (secondLevel != null) {\n@@ -102,7 +104,7 @@ public class CacheLRU implements Cache {\n         values = null;\n         values = new CacheObject[len];\n         recordCount = 0;\n-        memory = len * (long)Constants.MEMORY_POINTER;\n+        memory = len * (long) Constants.MEMORY_POINTER;\n     }\n \n     @Override\n@@ -130,7 +132,8 @@ public class CacheLRU implements Cache {\n             put(rec);\n         } else {\n             if (old != rec) {\n-                throw DbException.getInternalError(\"old!=record pos:\" + pos + \" old:\" + old + \" new:\" + rec);\n+                throw DbException.getInternalError(\"old!=record pos:\" + pos + \" old:\"\n+                + old + \" new:\" + rec);\n             }\n             if (!fifo) {\n                 removeFromLinkedList(rec);\n@@ -149,7 +152,7 @@ public class CacheLRU implements Cache {\n \n     private void removeOld() {\n         int i = 0;\n-        ArrayList<CacheObject> changed = new ArrayList<>();\n+        ArrayList<CacheObject> changed = new ArrayList< >();\n         long mem = memory;\n         int rc = recordCount;\n         boolean flushed = false;\n@@ -179,9 +182,7 @@ public class CacheLRU implements Cache {\n                     // can't remove any record, because the records can not be\n                     // removed hopefully this does not happen frequently, but it\n                     // can happen\n-                    writer.getTrace()\n-                            .info(\"cannot remove records, cache size too small? records:\" +\n-                                    recordCount + \" memory:\" + memory);\n+                    writer.getTrace().info(\"cannot remove records, cache size too small? records:\" + recordCount + \" memory:\" + memory);\n                     break;\n                 }\n             }\n@@ -342,7 +343,7 @@ public class CacheLRU implements Cache {\n         // if(Database.CHECK) {\n         // testConsistency();\n         // }\n-        ArrayList<CacheObject> list = new ArrayList<>();\n+        ArrayList<CacheObject> list = new ArrayList< >();\n         CacheObject rec = head.cacheNext;\n         while (rec != head) {\n             if (rec.isChanged()) {\n@@ -378,4 +379,4 @@ public class CacheLRU implements Cache {\n         return (int) (memory * 4L / 1024);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/93/CacheLRU.java\nindex 5310b5695b3..f4ce614aa71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/93/CacheLRU.java\n@@ -102,7 +102,7 @@ public class CacheLRU implements Cache {\n         values = null;\n         values = new CacheObject[len];\n         recordCount = 0;\n-        memory = len * (long)Constants.MEMORY_POINTER;\n+        memory = len * (long) Constants.MEMORY_POINTER;\n     }\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/93/CacheLRU.java\nindex 5310b5695b3..f4ce614aa71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/93/CacheLRU.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/93/CacheLRU.java\n@@ -102,7 +102,7 @@ public class CacheLRU implements Cache {\n         values = null;\n         values = new CacheObject[len];\n         recordCount = 0;\n-        memory = len * (long)Constants.MEMORY_POINTER;\n+        memory = len * (long) Constants.MEMORY_POINTER;\n     }\n \n     @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}