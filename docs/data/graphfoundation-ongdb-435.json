{
    "project_name": "graphfoundation-ongdb",
    "error_id": "435",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "163",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/435/SegmentFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/435/SegmentFile.java\nindex 233025b5896..4b54f317a0f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/435/SegmentFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/435/SegmentFile.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus.log.segmented;\n \n import java.io.File;\n@@ -44,213 +45,210 @@ import static java.lang.String.format;\n  */\n class SegmentFile implements AutoCloseable\n {\n-    private static final SegmentHeader.Marshal headerMarshal = new SegmentHeader.Marshal();\n+  private static final SegmentHeader.Marshal headerMarshal = new SegmentHeader.Marshal();\n \n-    private final Log log;\n-    private final FileSystemAbstraction fileSystem;\n-    private final File file;\n-    private final ReaderPool readerPool;\n-    private final ChannelMarshal<ReplicatedContent> contentMarshal;\n+  private final Log log;\n+  private final FileSystemAbstraction fileSystem;\n+  private final File file;\n+  private final ReaderPool readerPool;\n+  private final ChannelMarshal<ReplicatedContent> contentMarshal;\n \n-    private final PositionCache positionCache;\n-    private final ReferenceCounter refCount;\n+  private final PositionCache positionCache;\n+  private final ReferenceCounter refCount;\n \n-    private final SegmentHeader header;\n-    private final long version;\n+  private final SegmentHeader header;\n+  private final long version;\n \n-    private PhysicalFlushableChannel bufferedWriter;\n+  private PhysicalFlushableChannel bufferedWriter;\n \n-    SegmentFile( FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header )\n-    {\n-        this.fileSystem = fileSystem;\n-        this.file = file;\n-        this.readerPool = readerPool;\n-        this.contentMarshal = contentMarshal;\n-        this.header = header;\n-        this.version = version;\n+  SegmentFile(FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version,\n+              ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header)\n+  {\n+    this.fileSystem = fileSystem;\n+    this.file = file;\n+    this.readerPool = readerPool;\n+    this.contentMarshal = contentMarshal;\n+    this.header = header;\n+    this.version = version;\n \n-        this.positionCache = new PositionCache();\n-        this.refCount = new ReferenceCounter();\n+    this.positionCache = new PositionCache();\n+    this.refCount = new ReferenceCounter();\n \n-        this.log = logProvider.getLog( getClass() );\n-    }\n+    this.log = logProvider.getLog(getClass());\n+  }\n \n-    static SegmentFile create( FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header )\n-            throws IOException\n+  static SegmentFile create(FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version,\n+                            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header)\n+      throws IOException\n+  {\n+    if (fileSystem.fileExists(file))\n     {\n-        if ( fileSystem.fileExists( file ) )\n-        {\n-            throw new IllegalStateException( \"File was not expected to exist\" );\n-        }\n-\n-        SegmentFile segment = new SegmentFile( fileSystem, file, readerPool, version, contentMarshal, logProvider, header );\n-        headerMarshal.marshal( header, segment.getOrCreateWriter() );\n-        segment.flush();\n-\n-        return segment;\n+      throw new IllegalStateException(\"File was not expected to exist\");\n     }\n \n-    /**\n-     * Channels must be closed when no longer used, so that they are released back to the pool of readers.\n-     */\n-    IOCursor<EntryRecord> getCursor( long logIndex ) throws IOException, DisposedException\n-    {\n-        assert logIndex > header.prevIndex();\n-\n-        if ( !refCount.increase() )\n-        {\n-            throw new DisposedException();\n-        }\n-\n-        /* This is the relative index within the file, starting from zero. */\n-        long offsetIndex = logIndex - (header.prevIndex() + 1);\n-\n-        LogPosition position = positionCache.lookup( offsetIndex );\n-        Reader reader = readerPool.acquire( version, position.byteOffset );\n-\n-        try\n-        {\n-            long currentIndex = position.logIndex;\n-            return new EntryRecordCursor( reader, contentMarshal, currentIndex, offsetIndex, this );\n-        }\n-        catch ( EndOfStreamException e )\n-        {\n-            readerPool.release( reader );\n-            refCount.decrease();\n-            return IOCursor.getEmpty();\n-        }\n-        catch ( IOException e )\n-        {\n-            reader.close();\n-            refCount.decrease();\n-            throw e;\n-        }\n-    }\n+    SegmentFile segment = new SegmentFile(fileSystem, file, readerPool, version, contentMarshal, logProvider, header);\n+    headerMarshal.marshal(header, segment.getOrCreateWriter());\n+    segment.flush();\n \n-    private synchronized PhysicalFlushableChannel getOrCreateWriter() throws IOException\n-    {\n-        if ( bufferedWriter == null )\n-        {\n-            if ( !refCount.increase() )\n-            {\n-                throw new IOException( \"Writer has been closed\" );\n-            }\n-\n-            StoreChannel channel = fileSystem.open( file, OpenMode.READ_WRITE );\n-            channel.position( channel.size() );\n-            bufferedWriter = new PhysicalFlushableChannel( channel );\n-        }\n-        return bufferedWriter;\n-    }\n+    return segment;\n+  }\n \n-    synchronized long position() throws IOException\n-    {\n-        return getOrCreateWriter().position();\n-    }\n+  /**\n+   * Channels must be closed when no longer used, so that they are released back to the pool of readers.\n+   */\n+  IOCursor<EntryRecord> getCursor(long logIndex) throws IOException, DisposedException\n+  {\n+    assert logIndex > header.prevIndex();\n \n-    /**\n-     * Idempotently closes the writer.\n-     */\n-    synchronized void closeWriter()\n+    if (!refCount.increase())\n     {\n-        if ( bufferedWriter != null )\n-        {\n-            try\n-            {\n-                flush();\n-                bufferedWriter.close();\n-            }\n-            catch ( IOException e )\n-            {\n-                log.error( \"Failed to close writer for: \" + file, e );\n-            }\n-\n-            bufferedWriter = null;\n-            refCount.decrease();\n-        }\n+      throw new DisposedException();\n     }\n-\n-    public synchronized void write( long logIndex, RaftLogEntry entry ) throws IOException\n-    {\n-        EntryRecord.write( getOrCreateWriter(), contentMarshal, logIndex, entry.term(), entry.content() );\n-    }\n-\n-    synchronized void flush() throws IOException\n-    {\n-        bufferedWriter.prepareForFlush().flush();\n+\n+    /* This is the relative index within the file, starting from zero. */\n+    long offsetIndex = logIndex - (header.prevIndex() + 1);\n+\n+    LogPosition position = positionCache.lookup(offsetIndex);\n+    Reader reader = readerPool.acquire(version, position.byteOffset);\n+\n+    try\n+    {\n+      long currentIndex = position.logIndex;\n+      return new EntryRecordCursor(reader, contentMarshal, currentIndex, offsetIndex, this);\n+    } catch (EndOfStreamException e)\n+    {\n+      readerPool.release(reader);\n+      refCount.decrease();\n+      return IOCursor.getEmpty();\n+    } catch (IOException e)\n+    {\n+      reader.close();\n+      refCount.decrease();\n+      throw e;\n     }\n+  }\n \n-    public boolean delete()\n+  private synchronized PhysicalFlushableChannel getOrCreateWriter() throws IOException\n+  {\n+    if (bufferedWriter == null)\n     {\n-        return fileSystem.deleteFile( file );\n-    }\n-\n-    public SegmentHeader header()\n-    {\n-        return header;\n-    }\n-\n-    public long size()\n-    {\n-        return fileSystem.getFileSize( file );\n-    }\n-\n-    String getFilename()\n-    {\n-        return file.getName();\n-    }\n-\n-    /**\n-     * Called by the pruner when it wants to prune this segment. If there are no open\n-     * readers or writers then the segment will be closed.\n-     *\n-     * @return True if the segment can be pruned at this time, false otherwise.\n-     */\n-    boolean tryClose()\n-    {\n-        if ( refCount.tryDispose() )\n-        {\n-            close();\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        closeWriter();\n-        readerPool.prune( version );\n-\n-        if ( !refCount.tryDispose() )\n-        {\n-            throw new IllegalStateException( format( \"Segment still referenced. Value: %d\", refCount.get() ) );\n-        }\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"SegmentFile{\" +\n-               \"file=\" + file.getName() +\n-               \", header=\" + header +\n-               '}';\n-    }\n-\n-    ReferenceCounter refCount()\n-    {\n-        return refCount;\n-    }\n-\n-    PositionCache positionCache()\n-    {\n-        return positionCache;\n-    }\n-\n-    public ReaderPool readerPool()\n-    {\n-        return readerPool;\n-    }\n+      if (!refCount.increase())\n+      {\n+        throw new IOException(\"Writer has been closed\");\n+      }\n+\n+      StoreChannel channel = fileSystem.open(file, OpenMode.READ_WRITE);\n+      channel.position(channel.size());\n+      bufferedWriter = new PhysicalFlushableChannel(channel);\n+    }\n+    return bufferedWriter;\n+  }\n+\n+  synchronized long position() throws IOException\n+  {\n+    return getOrCreateWriter().position();\n+  }\n+\n+  /**\n+   * Idempotently closes the writer.\n+   */\n+  synchronized void closeWriter()\n+  {\n+    if (bufferedWriter != null)\n+    {\n+      try\n+      {\n+        flush();\n+        bufferedWriter.close();\n+      } catch (IOException e)\n+      {\n+        log.error(\"Failed to close writer for: \" + file, e);\n+      }\n+\n+      bufferedWriter = null;\n+      refCount.decrease();\n+    }\n+  }\n+\n+  public synchronized void write(long logIndex, RaftLogEntry entry) throws IOException\n+  {\n+    EntryRecord.write(getOrCreateWriter(), contentMarshal, logIndex, entry.term(), entry.content());\n+  }\n+\n+  synchronized void flush() throws IOException\n+  {\n+    bufferedWriter.prepareForFlush().flush();\n+  }\n+\n+  public boolean delete()\n+  {\n+    return fileSystem.deleteFile(file);\n+  }\n+\n+  public SegmentHeader header()\n+  {\n+    return header;\n+  }\n+\n+  public long size()\n+  {\n+    return fileSystem.getFileSize(file);\n+  }\n+\n+  String getFilename()\n+  {\n+    return file.getName();\n+  }\n+\n+  /**\n+   * Called by the pruner when it wants to prune this segment. If there are no open\n+   * readers or writers then the segment will be closed.\n+   *\n+   * @return True if the segment can be pruned at this time, false otherwise.\n+   */\n+  boolean tryClose()\n+  {\n+    if (refCount.tryDispose())\n+    {\n+      close();\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    closeWriter();\n+    readerPool.prune(version);\n+\n+    if (!refCount.tryDispose())\n+    {\n+      throw new IllegalStateException(format(\"Segment still referenced. Value: %d\", refCount.get()));\n+    }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"SegmentFile{\" +\n+        \"file=\" + file.getName() +\n+        \", header=\" + header +\n+        '}';\n+  }\n+\n+  ReferenceCounter refCount()\n+  {\n+    return refCount;\n+  }\n+\n+  PositionCache positionCache()\n+  {\n+    return positionCache;\n+  }\n+\n+  public ReaderPool readerPool()\n+  {\n+    return readerPool;\n+  }\n }\n",
            "diff_size": 260
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/435/SegmentFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/435/SegmentFile.java\nindex 233025b5896..f9beb0781bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/435/SegmentFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/435/SegmentFile.java\n@@ -60,8 +60,7 @@ class SegmentFile implements AutoCloseable\n \n     private PhysicalFlushableChannel bufferedWriter;\n \n-    SegmentFile( FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header )\n+    SegmentFile( FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version, ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header )\n     {\n         this.fileSystem = fileSystem;\n         this.file = file;\n@@ -69,17 +68,13 @@ class SegmentFile implements AutoCloseable\n         this.contentMarshal = contentMarshal;\n         this.header = header;\n         this.version = version;\n-\n-        this.positionCache = new PositionCache();\n+this.positionCache = new PositionCache();\n         this.refCount = new ReferenceCounter();\n-\n-        this.log = logProvider.getLog( getClass() );\n+this.log = logProvider.getLog( getClass() );\n     }\n \n-    static SegmentFile create( FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header )\n-            throws IOException\n-    {\n+    static SegmentFile create( FileSystemAbstraction fileSystem, File file, ReaderPool readerPool, long version, ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider, SegmentHeader header ) throws IOException\n+{\n         if ( fileSystem.fileExists( file ) )\n         {\n             throw new IllegalStateException( \"File was not expected to exist\" );\n@@ -88,8 +83,7 @@ class SegmentFile implements AutoCloseable\n         SegmentFile segment = new SegmentFile( fileSystem, file, readerPool, version, contentMarshal, logProvider, header );\n         headerMarshal.marshal( header, segment.getOrCreateWriter() );\n         segment.flush();\n-\n-        return segment;\n+return segment;\n     }\n \n     /**\n@@ -98,16 +92,14 @@ class SegmentFile implements AutoCloseable\n     IOCursor<EntryRecord> getCursor( long logIndex ) throws IOException, DisposedException\n     {\n         assert logIndex > header.prevIndex();\n-\n-        if ( !refCount.increase() )\n+if ( !refCount.increase() )\n         {\n             throw new DisposedException();\n         }\n \n         /* This is the relative index within the file, starting from zero. */\n-        long offsetIndex = logIndex - (header.prevIndex() + 1);\n-\n-        LogPosition position = positionCache.lookup( offsetIndex );\n+        long offsetIndex = logIndex - (header.prevIndex() + 1 );\n+LogPosition position = positionCache.lookup( offsetIndex );\n         Reader reader = readerPool.acquire( version, position.byteOffset );\n \n         try\n@@ -142,7 +134,8 @@ class SegmentFile implements AutoCloseable\n             channel.position( channel.size() );\n             bufferedWriter = new PhysicalFlushableChannel( channel );\n         }\n-        return bufferedWriter;\n+\n+return bufferedWriter;\n     }\n \n     synchronized long position() throws IOException\n@@ -223,8 +216,7 @@ class SegmentFile implements AutoCloseable\n     {\n         closeWriter();\n         readerPool.prune( version );\n-\n-        if ( !refCount.tryDispose() )\n+if ( !refCount.tryDispose() )\n         {\n             throw new IllegalStateException( format( \"Segment still referenced. Value: %d\", refCount.get() ) );\n         }\n@@ -233,10 +225,7 @@ class SegmentFile implements AutoCloseable\n     @Override\n     public String toString()\n     {\n-        return \"SegmentFile{\" +\n-               \"file=\" + file.getName() +\n-               \", header=\" + header +\n-               '}';\n+        return \"SegmentFile{\" + \"file=\" + file.getName() + \", header=\" + header + '}';\n     }\n \n     ReferenceCounter refCount()\n@@ -253,4 +242,4 @@ class SegmentFile implements AutoCloseable\n     {\n         return readerPool;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}