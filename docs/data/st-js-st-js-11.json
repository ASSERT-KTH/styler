{
    "project_name": "st-js-st-js",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "159",
                "severity": "error",
                "message": "Line is longer than 145 characters (found 146).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\tJS newArray = js.name(newArrayName);\n\t\tJS index = js.name(newIteratorName);\n\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\n\t\tJS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\n\t\tJS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler/11/EnhancedForLoopWriter.java\nindex 658f1b461cf..ff3198ba5bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler/11/EnhancedForLoopWriter.java\n@@ -156,7 +156,8 @@ public class EnhancedForLoopWriter<JS> implements WriterContributor<EnhancedForL\n \t\tString newArrayName = \"arr$\" + initialForLoopVariableName;\r\n \t\tJS newArray = js.name(newArrayName);\r\n \t\tJS index = js.name(newIteratorName);\r\n-\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\r\n+\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated\r\n+\t\t\t\t)));\r\n \t\tJS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\r\n \t\tJS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\r\n \r\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/intellij/11/EnhancedForLoopWriter.java\nindex 658f1b461cf..927c57f9713 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/intellij/11/EnhancedForLoopWriter.java\n@@ -22,148 +22,150 @@ import java.util.Collections;\n \r\n /**\r\n  * generates from\r\n- * \r\n+ *\r\n  * <pre>\r\n  * for (String x : list) {\r\n  * }\r\n  * </pre>\r\n- * \r\n+ *\r\n  * <pre>\r\n  * for(var x in list) {\r\n  * }\r\n  * </pre>\r\n- * \r\n+ * <p>\r\n  * Warning: the iteration is on indexes as in JavaScript, not on values as in Java!\r\n+ *\r\n  * @author acraciun\r\n  */\r\n public class EnhancedForLoopWriter<JS> implements WriterContributor<EnhancedForLoopTree, JS> {\r\n \r\n-\tprivate JS generateArrayHasOwnProperty(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n-\t\tif (!context.getConfiguration().isGenerateArrayHasOwnProperty()) {\r\n-\t\t\treturn body;\r\n-\t\t}\r\n-\r\n-\t\tTypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\r\n-\t\tif (!TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName())) {\r\n-\t\t\t// only Arrays need hasOwnProperty. Maps are just plain JS objects and don't have any other enumerable properties.\r\n-\t\t\treturn body;\r\n-\t\t}\r\n-\t\tJavaScriptBuilder<JS> js = context.js();\r\n-\r\n-\t\t// !(iterated).hasOwnProperty(tree.getVariable().getName())\r\n-\t\tJS not =\r\n-\t\t\t\tjs.unary(\r\n-\t\t\t\t\t\tUnaryOperator.LOGICAL_COMPLEMENT,\r\n-\t\t\t\t\t\tjs.functionCall(\r\n-\t\t\t\t\t\t\t\tjs.property(js.paren(iterated), \"hasOwnProperty\"),\r\n-\t\t\t\t\t\t\t\tCollections.singleton(js.name(tree.getVariable().getName()))));\r\n-\r\n-\t\tJS ifs = js.ifStatement(not, js.continueStatement(null), null);\r\n-\t\treturn js.addStatementBeginning(body, ifs);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic JS visit(WriterVisitor<JS> visitor, EnhancedForLoopTree tree, GenerationContext<JS> context) {\r\n-\t\t// Java Statement\r\n-\t\t//     for (String s : myCollection)\r\n-\t\t// Scanned values\r\n-\t\t//     iterator = (VariableDeclaration) --> \"String s\"\r\n-\t\t//     iterated = (Name) --> \"myCollection\"\r\n-\t\tJS iterator = visitor.scan(tree.getVariable(), context);\r\n-\t\tJS iterated = visitor.scan(tree.getExpression(), context);\r\n-\t\tJS body = visitor.scan(tree.getStatement(), context);\r\n-\r\n-\t\tTypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\r\n-\t\tif (TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName())\r\n-\t\t\t\t|| TypesUtils.isDeclaredOfName(iteratedType, Map.class.getName())) {\r\n-\t\t\treturn generateForEachInObject(tree, context, iterator, iterated, body);\r\n-\r\n-\t\t} else if (isErasuredClassAssignableFromType(Iterable.class, iteratedType, context)) {\r\n-\t\t\treturn generateForEachWithIterable(tree, context, iterated, body);\r\n-\t\t} else if (TypeKind.ARRAY == iteratedType.getKind()) {\r\n-\t\t\treturn generateForWithIndex(tree, context, iterated, body);\r\n-\t\t} else {\r\n-\t\t\treturn context.withPosition(tree, context.js().forInLoop(iterator, iterated, body));\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tprivate boolean isErasuredClassAssignableFromType(Class clazz, TypeMirror iteratedType, GenerationContext<JS> context) {\r\n-\t\tTypeMirror erasedClassToCheck = context.getTypes().erasure(TypesUtils.typeFromClass(context.getTypes(), context.getElements(), clazz));\r\n-\t\tTypeMirror erasedIteratedType = context.getTypes().erasure(iteratedType);\r\n-\r\n-\t\treturn context.getTypes().isAssignable(erasedIteratedType, erasedClassToCheck);\r\n-\t}\r\n-\r\n-\tprivate JS generateForEachInObject(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterator, JS iterated, JS body) {\r\n-\t\tJS newBody = generateArrayHasOwnProperty(tree, context, iterated, body);\r\n-\t\treturn context.withPosition(tree, context.js().forInLoop(iterator, iterated, newBody));\r\n-\t}\r\n-\r\n-\tprivate JS generateForEachWithIterable(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n-\t\tJavaScriptBuilder<JS> js = context.js();\r\n-\r\n-\t\t// Java source code:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//\t for (String oneOfTheString : myStringList) {\r\n-\t\t//\t   // do whatever you want with 'oneOfTheString'\r\n-\t\t//\t }\r\n-\t\t//\r\n-\t\t// Translated Javascript:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//   for (var iterator$oneOfTheString = myStringList.iterator(); iterator$oneOfTheString.hasNext(); ) {\r\n-\t\t//     var oneOfTheString = iterator$oneOfTheString.next();\r\n-\t\t//   }\r\n-\t\tString initialForLoopVariableName = tree.getVariable().getName().toString();\r\n-\r\n-\t\tJS iteratorMethodCall = js.functionCall(\r\n-\t\t\t\tjs.property(iterated, \"iterator\"),\r\n-\t\t\t\tCollections.<JS>emptyList());\r\n-\r\n-\t\tString newIteratorName = \"iterator$\" + initialForLoopVariableName;\r\n-\t\tJS forLoopIterator = js.name(newIteratorName);\r\n-\t\tJS init = js.variableDeclaration(false, newIteratorName, iteratorMethodCall);\r\n-\t\tJS condition = js.functionCall(js.property(forLoopIterator, \"hasNext\"), Collections.<JS>emptyList());\r\n-\t\tJS update = js.emptyExpression();\r\n-\r\n-\t\tJS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName,\r\n-\t\t\tjs.functionCall(js.property(forLoopIterator, \"next\"), Collections.<JS>emptyList()));\r\n-\t\tJS newBody = js.addStatementBeginning(body, iteratorNextStatement);\r\n-\r\n-\t\treturn context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\r\n-\t}\r\n-\t\r\n-\tprivate JS generateForWithIndex(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n-\t\tJavaScriptBuilder<JS> js = context.js();\r\n-\r\n-\t\t// Java source code:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//   String[] myStringArray = ...\r\n-\t\t//\t for (String str : myStringArray) {\r\n-\t\t//\t   // do whatever you want with 'str'\r\n-\t\t//\t }\r\n-\t\t//\r\n-\t\t// Translated Javascript:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//   for (var index$str = 0, arr$str = myStringArray; index$str < arr$str.length; index$str++) {\r\n-\t\t//     var str = arr$str[index$str];\r\n-\t\t//\t   // do whatever you want with 'str'\r\n-\t\t//   }\r\n-\t\tString initialForLoopVariableName = tree.getVariable().getName().toString();\r\n-\r\n-\t\tJS iteratorMethodCall = js.number(0);\r\n-\r\n-\t\tString newIteratorName = \"index$\" + initialForLoopVariableName;\r\n-\t\tString newArrayName = \"arr$\" + initialForLoopVariableName;\r\n-\t\tJS newArray = js.name(newArrayName);\r\n-\t\tJS index = js.name(newIteratorName);\r\n-\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\r\n-\t\tJS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\r\n-\t\tJS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\r\n-\r\n-\t\tJS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName, js.elementGet(newArray, index));\r\n-\t\tJS newBody = js.addStatementBeginning(body, iteratorNextStatement);\r\n-\r\n-\t\treturn context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\r\n-\t}\r\n+    private JS generateArrayHasOwnProperty(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n+        if (!context.getConfiguration().isGenerateArrayHasOwnProperty()) {\r\n+            return body;\r\n+        }\r\n+\r\n+        TypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\r\n+        if (!TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName())) {\r\n+            // only Arrays need hasOwnProperty. Maps are just plain JS objects and don't have any other enumerable properties.\r\n+            return body;\r\n+        }\r\n+        JavaScriptBuilder<JS> js = context.js();\r\n+\r\n+        // !(iterated).hasOwnProperty(tree.getVariable().getName())\r\n+        JS not =\r\n+            js.unary(\r\n+                UnaryOperator.LOGICAL_COMPLEMENT,\r\n+                js.functionCall(\r\n+                    js.property(js.paren(iterated), \"hasOwnProperty\"),\r\n+                    Collections.singleton(js.name(tree.getVariable().getName()))));\r\n+\r\n+        JS ifs = js.ifStatement(not, js.continueStatement(null), null);\r\n+        return js.addStatementBeginning(body, ifs);\r\n+    }\r\n+\r\n+    @Override\r\n+    public JS visit(WriterVisitor<JS> visitor, EnhancedForLoopTree tree, GenerationContext<JS> context) {\r\n+        // Java Statement\r\n+        //     for (String s : myCollection)\r\n+        // Scanned values\r\n+        //     iterator = (VariableDeclaration) --> \"String s\"\r\n+        //     iterated = (Name) --> \"myCollection\"\r\n+        JS iterator = visitor.scan(tree.getVariable(), context);\r\n+        JS iterated = visitor.scan(tree.getExpression(), context);\r\n+        JS body = visitor.scan(tree.getStatement(), context);\r\n+\r\n+        TypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\r\n+        if (TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName())\r\n+            || TypesUtils.isDeclaredOfName(iteratedType, Map.class.getName())) {\r\n+            return generateForEachInObject(tree, context, iterator, iterated, body);\r\n+\r\n+        } else if (isErasuredClassAssignableFromType(Iterable.class, iteratedType, context)) {\r\n+            return generateForEachWithIterable(tree, context, iterated, body);\r\n+        } else if (TypeKind.ARRAY == iteratedType.getKind()) {\r\n+            return generateForWithIndex(tree, context, iterated, body);\r\n+        } else {\r\n+            return context.withPosition(tree, context.js().forInLoop(iterator, iterated, body));\r\n+        }\r\n+    }\r\n+\r\n+    private boolean isErasuredClassAssignableFromType(Class clazz, TypeMirror iteratedType, GenerationContext<JS> context) {\r\n+        TypeMirror erasedClassToCheck = context.getTypes().erasure(TypesUtils.typeFromClass(context.getTypes(), context.getElements(), clazz));\r\n+        TypeMirror erasedIteratedType = context.getTypes().erasure(iteratedType);\r\n+\r\n+        return context.getTypes().isAssignable(erasedIteratedType, erasedClassToCheck);\r\n+    }\r\n+\r\n+    private JS generateForEachInObject(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterator, JS iterated, JS body) {\r\n+        JS newBody = generateArrayHasOwnProperty(tree, context, iterated, body);\r\n+        return context.withPosition(tree, context.js().forInLoop(iterator, iterated, newBody));\r\n+    }\r\n+\r\n+    private JS generateForEachWithIterable(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n+        JavaScriptBuilder<JS> js = context.js();\r\n+\r\n+        // Java source code:\r\n+        // ---------------------------------------------\r\n+        //\t for (String oneOfTheString : myStringList) {\r\n+        //\t   // do whatever you want with 'oneOfTheString'\r\n+        //\t }\r\n+        //\r\n+        // Translated Javascript:\r\n+        // ---------------------------------------------\r\n+        //   for (var iterator$oneOfTheString = myStringList.iterator(); iterator$oneOfTheString.hasNext(); ) {\r\n+        //     var oneOfTheString = iterator$oneOfTheString.next();\r\n+        //   }\r\n+        String initialForLoopVariableName = tree.getVariable().getName().toString();\r\n+\r\n+        JS iteratorMethodCall = js.functionCall(\r\n+            js.property(iterated, \"iterator\"),\r\n+            Collections.<JS>emptyList());\r\n+\r\n+        String newIteratorName = \"iterator$\" + initialForLoopVariableName;\r\n+        JS forLoopIterator = js.name(newIteratorName);\r\n+        JS init = js.variableDeclaration(false, newIteratorName, iteratorMethodCall);\r\n+        JS condition = js.functionCall(js.property(forLoopIterator, \"hasNext\"), Collections.<JS>emptyList());\r\n+        JS update = js.emptyExpression();\r\n+\r\n+        JS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName,\r\n+            js.functionCall(js.property(forLoopIterator, \"next\"), Collections.<JS>emptyList()));\r\n+        JS newBody = js.addStatementBeginning(body, iteratorNextStatement);\r\n+\r\n+        return context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\r\n+    }\r\n+\r\n+    private JS generateForWithIndex(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n+        JavaScriptBuilder<JS> js = context.js();\r\n+\r\n+        // Java source code:\r\n+        // ---------------------------------------------\r\n+        //   String[] myStringArray = ...\r\n+        //\t for (String str : myStringArray) {\r\n+        //\t   // do whatever you want with 'str'\r\n+        //\t }\r\n+        //\r\n+        // Translated Javascript:\r\n+        // ---------------------------------------------\r\n+        //   for (var index$str = 0, arr$str = myStringArray; index$str < arr$str.length; index$str++) {\r\n+        //     var str = arr$str[index$str];\r\n+        //\t   // do whatever you want with 'str'\r\n+        //   }\r\n+        String initialForLoopVariableName = tree.getVariable().getName().toString();\r\n+\r\n+        JS iteratorMethodCall = js.number(0);\r\n+\r\n+        String newIteratorName = \"index$\" + initialForLoopVariableName;\r\n+        String newArrayName = \"arr$\" + initialForLoopVariableName;\r\n+        JS newArray = js.name(newArrayName);\r\n+        JS index = js.name(newIteratorName);\r\n+        JS init = js.variableDeclaration(false,\r\n+            Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\r\n+        JS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\r\n+        JS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\r\n+\r\n+        JS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName, js.elementGet(newArray, index));\r\n+        JS newBody = js.addStatementBeginning(body, iteratorNextStatement);\r\n+\r\n+        return context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\r\n+    }\r\n \r\n }\n\\ No newline at end of file\n",
            "diff_size": 132
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 145 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 145 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Line is longer than 145 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/codebuff/11/EnhancedForLoopWriter.java\nindex 658f1b461cf..2a67bdd500b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/codebuff/11/EnhancedForLoopWriter.java\n@@ -1,23 +1,20 @@\n-package org.stjs.generator.writer.statement;\r\n-\r\n-import javax.lang.model.type.TypeKind;\r\n-import javax.lang.model.type.TypeMirror;\r\n-\r\n-import org.stjs.generator.GenerationContext;\r\n-import org.stjs.generator.javac.InternalUtils;\r\n-import org.stjs.generator.javac.TypesUtils;\r\n-import org.stjs.generator.javascript.BinaryOperator;\r\n-import org.stjs.generator.javascript.JavaScriptBuilder;\r\n-import org.stjs.generator.javascript.NameValue;\r\n-import org.stjs.generator.javascript.UnaryOperator;\r\n-import org.stjs.generator.writer.WriterContributor;\r\n-import org.stjs.generator.writer.WriterVisitor;\r\n-import org.stjs.javascript.Array;\r\n-import org.stjs.javascript.Map;\r\n-\r\n-import com.sun.source.tree.EnhancedForLoopTree;\r\n-\r\n-import java.util.Arrays;\r\n+package org.stjs.generator.writer.statement;\n+\n+import javax.lang.model.type.TypeKind;\n+import javax.lang.model.type.TypeMirror;\n+import org.stjs.generator.GenerationContext;\n+import org.stjs.generator.javac.InternalUtils;\n+import org.stjs.generator.javac.TypesUtils;\n+import org.stjs.generator.javascript.BinaryOperator;\n+import org.stjs.generator.javascript.JavaScriptBuilder;\n+import org.stjs.generator.javascript.NameValue;\n+import org.stjs.generator.javascript.UnaryOperator;\n+import org.stjs.generator.writer.WriterContributor;\n+import org.stjs.generator.writer.WriterVisitor;\n+import org.stjs.javascript.Array;\n+import org.stjs.javascript.Map;\n+import com.sun.source.tree.EnhancedForLoopTree;\n+import java.util.Arrays;\n import java.util.Collections;\r\n \r\n /**\r\n@@ -35,135 +32,115 @@ import java.util.Collections;\n  * \r\n  * Warning: the iteration is on indexes as in JavaScript, not on values as in Java!\r\n  * @author acraciun\r\n- */\r\n-public class EnhancedForLoopWriter<JS> implements WriterContributor<EnhancedForLoopTree, JS> {\r\n-\r\n-\tprivate JS generateArrayHasOwnProperty(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n-\t\tif (!context.getConfiguration().isGenerateArrayHasOwnProperty()) {\r\n-\t\t\treturn body;\r\n-\t\t}\r\n-\r\n-\t\tTypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\r\n-\t\tif (!TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName())) {\r\n-\t\t\t// only Arrays need hasOwnProperty. Maps are just plain JS objects and don't have any other enumerable properties.\r\n-\t\t\treturn body;\r\n-\t\t}\r\n-\t\tJavaScriptBuilder<JS> js = context.js();\r\n-\r\n-\t\t// !(iterated).hasOwnProperty(tree.getVariable().getName())\r\n-\t\tJS not =\r\n-\t\t\t\tjs.unary(\r\n-\t\t\t\t\t\tUnaryOperator.LOGICAL_COMPLEMENT,\r\n-\t\t\t\t\t\tjs.functionCall(\r\n-\t\t\t\t\t\t\t\tjs.property(js.paren(iterated), \"hasOwnProperty\"),\r\n-\t\t\t\t\t\t\t\tCollections.singleton(js.name(tree.getVariable().getName()))));\r\n-\r\n-\t\tJS ifs = js.ifStatement(not, js.continueStatement(null), null);\r\n-\t\treturn js.addStatementBeginning(body, ifs);\r\n-\t}\r\n-\r\n-\t@Override\r\n-\tpublic JS visit(WriterVisitor<JS> visitor, EnhancedForLoopTree tree, GenerationContext<JS> context) {\r\n-\t\t// Java Statement\r\n-\t\t//     for (String s : myCollection)\r\n-\t\t// Scanned values\r\n-\t\t//     iterator = (VariableDeclaration) --> \"String s\"\r\n-\t\t//     iterated = (Name) --> \"myCollection\"\r\n-\t\tJS iterator = visitor.scan(tree.getVariable(), context);\r\n-\t\tJS iterated = visitor.scan(tree.getExpression(), context);\r\n-\t\tJS body = visitor.scan(tree.getStatement(), context);\r\n-\r\n-\t\tTypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\r\n-\t\tif (TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName())\r\n-\t\t\t\t|| TypesUtils.isDeclaredOfName(iteratedType, Map.class.getName())) {\r\n-\t\t\treturn generateForEachInObject(tree, context, iterator, iterated, body);\r\n-\r\n-\t\t} else if (isErasuredClassAssignableFromType(Iterable.class, iteratedType, context)) {\r\n-\t\t\treturn generateForEachWithIterable(tree, context, iterated, body);\r\n-\t\t} else if (TypeKind.ARRAY == iteratedType.getKind()) {\r\n-\t\t\treturn generateForWithIndex(tree, context, iterated, body);\r\n-\t\t} else {\r\n-\t\t\treturn context.withPosition(tree, context.js().forInLoop(iterator, iterated, body));\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tprivate boolean isErasuredClassAssignableFromType(Class clazz, TypeMirror iteratedType, GenerationContext<JS> context) {\r\n-\t\tTypeMirror erasedClassToCheck = context.getTypes().erasure(TypesUtils.typeFromClass(context.getTypes(), context.getElements(), clazz));\r\n-\t\tTypeMirror erasedIteratedType = context.getTypes().erasure(iteratedType);\r\n-\r\n-\t\treturn context.getTypes().isAssignable(erasedIteratedType, erasedClassToCheck);\r\n-\t}\r\n-\r\n-\tprivate JS generateForEachInObject(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterator, JS iterated, JS body) {\r\n-\t\tJS newBody = generateArrayHasOwnProperty(tree, context, iterated, body);\r\n-\t\treturn context.withPosition(tree, context.js().forInLoop(iterator, iterated, newBody));\r\n-\t}\r\n-\r\n-\tprivate JS generateForEachWithIterable(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n-\t\tJavaScriptBuilder<JS> js = context.js();\r\n-\r\n-\t\t// Java source code:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//\t for (String oneOfTheString : myStringList) {\r\n-\t\t//\t   // do whatever you want with 'oneOfTheString'\r\n-\t\t//\t }\r\n-\t\t//\r\n-\t\t// Translated Javascript:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//   for (var iterator$oneOfTheString = myStringList.iterator(); iterator$oneOfTheString.hasNext(); ) {\r\n-\t\t//     var oneOfTheString = iterator$oneOfTheString.next();\r\n-\t\t//   }\r\n-\t\tString initialForLoopVariableName = tree.getVariable().getName().toString();\r\n-\r\n-\t\tJS iteratorMethodCall = js.functionCall(\r\n-\t\t\t\tjs.property(iterated, \"iterator\"),\r\n-\t\t\t\tCollections.<JS>emptyList());\r\n-\r\n-\t\tString newIteratorName = \"iterator$\" + initialForLoopVariableName;\r\n-\t\tJS forLoopIterator = js.name(newIteratorName);\r\n-\t\tJS init = js.variableDeclaration(false, newIteratorName, iteratorMethodCall);\r\n-\t\tJS condition = js.functionCall(js.property(forLoopIterator, \"hasNext\"), Collections.<JS>emptyList());\r\n-\t\tJS update = js.emptyExpression();\r\n-\r\n-\t\tJS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName,\r\n-\t\t\tjs.functionCall(js.property(forLoopIterator, \"next\"), Collections.<JS>emptyList()));\r\n-\t\tJS newBody = js.addStatementBeginning(body, iteratorNextStatement);\r\n-\r\n-\t\treturn context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\r\n-\t}\r\n-\t\r\n-\tprivate JS generateForWithIndex(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\r\n-\t\tJavaScriptBuilder<JS> js = context.js();\r\n-\r\n-\t\t// Java source code:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//   String[] myStringArray = ...\r\n-\t\t//\t for (String str : myStringArray) {\r\n-\t\t//\t   // do whatever you want with 'str'\r\n-\t\t//\t }\r\n-\t\t//\r\n-\t\t// Translated Javascript:\r\n-\t\t// ---------------------------------------------\r\n-\t\t//   for (var index$str = 0, arr$str = myStringArray; index$str < arr$str.length; index$str++) {\r\n-\t\t//     var str = arr$str[index$str];\r\n-\t\t//\t   // do whatever you want with 'str'\r\n-\t\t//   }\r\n-\t\tString initialForLoopVariableName = tree.getVariable().getName().toString();\r\n-\r\n-\t\tJS iteratorMethodCall = js.number(0);\r\n-\r\n-\t\tString newIteratorName = \"index$\" + initialForLoopVariableName;\r\n-\t\tString newArrayName = \"arr$\" + initialForLoopVariableName;\r\n-\t\tJS newArray = js.name(newArrayName);\r\n-\t\tJS index = js.name(newIteratorName);\r\n-\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\r\n-\t\tJS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\r\n-\t\tJS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\r\n-\r\n-\t\tJS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName, js.elementGet(newArray, index));\r\n-\t\tJS newBody = js.addStatementBeginning(body, iteratorNextStatement);\r\n-\r\n-\t\treturn context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\r\n-\t}\r\n-\r\n+ */\n+\n+\n+public class EnhancedForLoopWriter<JS> implements WriterContributor<EnhancedForLoopTree, JS> {\n+ private JS generateArrayHasOwnProperty(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\n+  if (!context.getConfiguration().isGenerateArrayHasOwnProperty()) {\n+   return body;\n+  }\n+\n+  TypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\n+  if (!TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName())) {\r\n+   // only Arrays need hasOwnProperty. Maps are just plain JS objects and don't have any other enumerable properties.\n+   return body;\n+  }\n+\n+  JavaScriptBuilder<JS> js = context.js();\r\n+\r\n+  // !(iterated).hasOwnProperty(tree.getVariable().getName())\n+  JS not = js.unary(UnaryOperator.LOGICAL_COMPLEMENT, js.functionCall(js.property(js.paren(iterated), \"hasOwnProperty\"), Collections.singleton(js.name(tree.getVariable().getName()))));\n+  JS ifs = js.ifStatement(not, js.continueStatement(null), null);\n+  return js.addStatementBeginning(body, ifs);\n+ }\n+\n+ @Override\n+ public JS visit(WriterVisitor<JS> visitor, EnhancedForLoopTree tree, GenerationContext<JS> context) {\r\n+  // Java Statement\r\n+  //     for (String s : myCollection)\r\n+  // Scanned values\r\n+  //     iterator = (VariableDeclaration) --> \"String s\"\r\n+  //     iterated = (Name) --> \"myCollection\"\n+  JS iterator = visitor.scan(tree.getVariable(), context);\n+  JS iterated = visitor.scan(tree.getExpression(), context);\n+  JS body = visitor.scan(tree.getStatement(), context);\n+  TypeMirror iteratedType = InternalUtils.typeOf(tree.getExpression());\n+  if (TypesUtils.isDeclaredOfName(iteratedType, Array.class.getName()) || TypesUtils.isDeclaredOfName(iteratedType, Map.class.getName())) {\n+   return generateForEachInObject(tree, context, iterator, iterated, body);\n+  } else if (isErasuredClassAssignableFromType(Iterable.class, iteratedType, context)) {\n+   return generateForEachWithIterable(tree, context, iterated, body);\n+  } else if (TypeKind.ARRAY == iteratedType.getKind()) {\n+          return generateForWithIndex(tree, context, iterated, body);\n+         } else {\n+          return context.withPosition(tree, context.js().forInLoop(iterator, iterated, body));\n+         }\n+ }\n+\n+ private boolean isErasuredClassAssignableFromType(Class clazz, TypeMirror iteratedType, GenerationContext<JS> context) {\n+  TypeMirror erasedClassToCheck = context.getTypes().erasure(TypesUtils.typeFromClass(context.getTypes(), context.getElements(), clazz));\n+  TypeMirror erasedIteratedType = context.getTypes().erasure(iteratedType);\n+  return context.getTypes().isAssignable(erasedIteratedType, erasedClassToCheck);\n+ }\n+\n+ private JS generateForEachInObject(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterator, JS iterated, JS body) {\n+  JS newBody = generateArrayHasOwnProperty(tree, context, iterated, body);\n+  return context.withPosition(tree, context.js().forInLoop(iterator, iterated, newBody));\n+ }\n+\n+ private JS generateForEachWithIterable(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\n+  JavaScriptBuilder<JS> js = context.js();\r\n+\r\n+  // Java source code:\r\n+  // ---------------------------------------------\r\n+  //  for (String oneOfTheString : myStringList) {\r\n+  //    // do whatever you want with 'oneOfTheString'\r\n+  //  }\r\n+  //\r\n+  // Translated Javascript:\r\n+  // ---------------------------------------------\r\n+  //   for (var iterator$oneOfTheString = myStringList.iterator(); iterator$oneOfTheString.hasNext(); ) {\r\n+  //     var oneOfTheString = iterator$oneOfTheString.next();\r\n+  //   }\n+  String initialForLoopVariableName = tree.getVariable().getName().toString();\n+  JS iteratorMethodCall = js.functionCall(js.property(iterated, \"iterator\"), Collections.<JS>emptyList());\n+  String newIteratorName = \"iterator$\" + initialForLoopVariableName;\n+  JS forLoopIterator = js.name(newIteratorName);\n+  JS init = js.variableDeclaration(false, newIteratorName, iteratorMethodCall);\n+  JS condition = js.functionCall(js.property(forLoopIterator, \"hasNext\"), Collections.<JS>emptyList());\n+  JS update = js.emptyExpression();\n+  JS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName, js.functionCall(js.property(forLoopIterator, \"next\"), Collections.<JS>emptyList()));\n+  JS newBody = js.addStatementBeginning(body, iteratorNextStatement);\n+  return context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\n+ }\n+\n+ private JS generateForWithIndex(EnhancedForLoopTree tree, GenerationContext<JS> context, JS iterated, JS body) {\n+  JavaScriptBuilder<JS> js = context.js();\r\n+\r\n+  // Java source code:\r\n+  // ---------------------------------------------\r\n+  //   String[] myStringArray = ...\r\n+  //  for (String str : myStringArray) {\r\n+  //    // do whatever you want with 'str'\r\n+  //  }\r\n+  //\r\n+  // Translated Javascript:\r\n+  // ---------------------------------------------\r\n+  //   for (var index$str = 0, arr$str = myStringArray; index$str < arr$str.length; index$str++) {\r\n+  //     var str = arr$str[index$str];\r\n+  //    // do whatever you want with 'str'\r\n+  //   }\n+  String initialForLoopVariableName = tree.getVariable().getName().toString();\n+  JS iteratorMethodCall = js.number(0);\n+  String newIteratorName = \"index$\" + initialForLoopVariableName;\n+  String newArrayName = \"arr$\" + initialForLoopVariableName;\n+  JS newArray = js.name(newArrayName);\n+  JS index = js.name(newIteratorName);\n+  JS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\n+  JS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\n+  JS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\n+  JS iteratorNextStatement = js.variableDeclaration(true, initialForLoopVariableName, js.elementGet(newArray, index));\n+  JS newBody = js.addStatementBeginning(body, iteratorNextStatement);\n+  return context.withPosition(tree, context.js().forLoop(init, condition, update, newBody));\n+ }\n }\n\\ No newline at end of file\n",
            "diff_size": 151
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "159",
                    "column": "113",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "160",
                    "column": "10",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_random/11/EnhancedForLoopWriter.java\nindex 658f1b461cf..60d8d6d3117 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_random/11/EnhancedForLoopWriter.java\n@@ -156,7 +156,8 @@ public class EnhancedForLoopWriter<JS> implements WriterContributor<EnhancedForL\n \t\tString newArrayName = \"arr$\" + initialForLoopVariableName;\r\n \t\tJS newArray = js.name(newArrayName);\r\n \t\tJS index = js.name(newIteratorName);\r\n-\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\r\n+\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall),NameValue\r\n+\t\t. of(newArrayName, iterated)));\r\n \t\tJS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\r\n \t\tJS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\r\n \r\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_three_grams/11/EnhancedForLoopWriter.java\nindex 658f1b461cf..ff3198ba5bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/11/EnhancedForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_three_grams/11/EnhancedForLoopWriter.java\n@@ -156,7 +156,8 @@ public class EnhancedForLoopWriter<JS> implements WriterContributor<EnhancedForL\n \t\tString newArrayName = \"arr$\" + initialForLoopVariableName;\r\n \t\tJS newArray = js.name(newArrayName);\r\n \t\tJS index = js.name(newIteratorName);\r\n-\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated)));\r\n+\t\tJS init = js.variableDeclaration(false, Arrays.asList(NameValue.of(newIteratorName, iteratorMethodCall), NameValue.of(newArrayName, iterated\r\n+\t\t\t\t)));\r\n \t\tJS condition = js.binary(BinaryOperator.LESS_THAN, Arrays.asList(index, js.property(newArray, \"length\")));\r\n \t\tJS update = js.unary(UnaryOperator.POSTFIX_INCREMENT, index);\r\n \r\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}