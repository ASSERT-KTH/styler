{
    "project_name": "apache-shardingsphere",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "161",
                "column": "5",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    \n    \n    /**\n     * Get primary nodes governance schema.\n     *\n     * @param dataSourceNodeFullPath data source node full path",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/15/RegistryCenterNode.java\nindex c5fe9def06a..9172fb28b83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/15/RegistryCenterNode.java\n@@ -156,8 +156,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "161",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/15/RegistryCenterNode.java\nindex c5fe9def06a..49fa18620d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/15/RegistryCenterNode.java\n@@ -36,35 +36,35 @@ import java.util.stream.Collectors;\n  */\n @RequiredArgsConstructor\n public final class RegistryCenterNode {\n-    \n+\n     private static final String ROOT = \"states\";\n-    \n+\n     private static final String PROXY_NODES_NAME = \"proxynodes\";\n-    \n+\n     private static final String DATA_NODES_NAME = \"datanodes\";\n-    \n+\n     private static final String PRIMARY_NODES_NAME = \"primarynodes\";\n-    \n+\n     private static final String METADATA_NODE = \"metadata\";\n-    \n+\n     private static final String DATA_SOURCE_NODE = \"datasource\";\n-    \n+\n     private static final String RULE_NODE = \"rule\";\n-    \n+\n     private static final String SCHEMA_NODE = \"schema\";\n-    \n+\n     private static final String AUTHENTICATION_NODE = \"authentication\";\n-    \n+\n     private static final String PRIVILEGE_NODE = \"privilegenode\";\n-    \n+\n     private static final String PROPS_NODE = \"props\";\n-    \n+\n     private static final String COMMA_SEPARATOR = \",\";\n-    \n+\n     private static final String PATH_SEPARATOR = \"/\";\n-    \n+\n     private static final String CACHE_NODE = \"cache\";\n-    \n+\n     /**\n      * Get proxy node path.\n      *\n@@ -74,7 +74,7 @@ public final class RegistryCenterNode {\n     public String getProxyNodePath(final String instanceId) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME, instanceId);\n     }\n-    \n+\n     /**\n      * Get data nodes path.\n      *\n@@ -83,7 +83,7 @@ public final class RegistryCenterNode {\n     public String getDataNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME);\n     }\n-    \n+\n     /**\n      * Get primary nodes path.\n      *\n@@ -92,17 +92,17 @@ public final class RegistryCenterNode {\n     public String getPrimaryNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME);\n     }\n-    \n+\n     /**\n      * Get schema path.\n-     * \n+     *\n      * @param schemaName schema name\n      * @return schema path\n      */\n     public String getSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName);\n     }\n-    \n+\n     /**\n      * Get primary nodes schema path.\n      *\n@@ -112,18 +112,18 @@ public final class RegistryCenterNode {\n     public String getPrimaryNodesSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName);\n     }\n-    \n+\n     /**\n      * Get data source path.\n-     * \n-     * @param schemaName schema name\n+     *\n+     * @param schemaName     schema name\n      * @param dataSourceName data source name\n      * @return data source path\n      */\n     public String getDataSourcePath(final String schemaName, final String dataSourceName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName, dataSourceName);\n     }\n-    \n+\n     /**\n      * Get metadata data source path.\n      *\n@@ -133,18 +133,18 @@ public final class RegistryCenterNode {\n     public String getMetadataDataSourcePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, DATA_SOURCE_NODE);\n     }\n-    \n+\n     /**\n      * Get primary data source path.\n      *\n      * @param schemaName schema name\n-     * @param groupName group name\n+     * @param groupName  group name\n      * @return data source path\n      */\n     public String getPrimaryDataSourcePath(final String schemaName, final String groupName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName, groupName);\n     }\n-    \n+\n     /**\n      * Get governance schema.\n      *\n@@ -156,8 +156,8 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n+\n     /**\n      * Get primary nodes governance schema.\n      *\n@@ -169,7 +169,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n+\n     /**\n      * Is primary data source path.\n      *\n@@ -181,10 +181,10 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find();\n     }\n-    \n+\n     /**\n      * Get all schema path.\n-     * \n+     *\n      * @param schemaNames collection of schema name\n      * @return collection of schema path\n      */\n@@ -196,7 +196,7 @@ public final class RegistryCenterNode {\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * Get proxy nodes path.\n      *\n@@ -205,7 +205,7 @@ public final class RegistryCenterNode {\n     public String getProxyNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME);\n     }\n-    \n+\n     /**\n      * Get metadata node path.\n      *\n@@ -214,7 +214,7 @@ public final class RegistryCenterNode {\n     public String getMetadataNodePath() {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE);\n     }\n-    \n+\n     /**\n      * Get schema name path.\n      *\n@@ -224,7 +224,7 @@ public final class RegistryCenterNode {\n     public String getSchemaNamePath(final String schemaName) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName);\n     }\n-    \n+\n     /**\n      * Get rule path.\n      *\n@@ -234,7 +234,7 @@ public final class RegistryCenterNode {\n     public String getRulePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, RULE_NODE);\n     }\n-    \n+\n     /**\n      * Get metadata schema path.\n      *\n@@ -244,7 +244,7 @@ public final class RegistryCenterNode {\n     public String getMetadataSchemaPath(final String schemaName) {\n         return getFullMetadataPath(schemaName, SCHEMA_NODE);\n     }\n-    \n+\n     /**\n      * Get authentication path.\n      *\n@@ -253,7 +253,7 @@ public final class RegistryCenterNode {\n     public String getAuthenticationPath() {\n         return getFullPath(AUTHENTICATION_NODE);\n     }\n-    \n+\n     /**\n      * Get authenticationnodes path.\n      *\n@@ -262,7 +262,7 @@ public final class RegistryCenterNode {\n     public String getPrivilegeNodePath() {\n         return Joiner.on(PATH_SEPARATOR).join(ROOT, PRIVILEGE_NODE);\n     }\n-    \n+\n     /**\n      * Get properties path.\n      *\n@@ -271,15 +271,15 @@ public final class RegistryCenterNode {\n     public String getPropsPath() {\n         return getFullPath(PROPS_NODE);\n     }\n-    \n+\n     private String getFullMetadataPath(final String schemaName, final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName, node);\n     }\n-    \n+\n     private String getFullPath(final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", node);\n     }\n-    \n+\n     /**\n      * Get schema name.\n      *\n@@ -291,7 +291,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(configurationNodeFullPath);\n         return matcher.find() ? matcher.group(1) : \"\";\n     }\n-    \n+\n     /**\n      * Split schema name.\n      *\n@@ -301,7 +301,7 @@ public final class RegistryCenterNode {\n     public Collection<String> splitSchemaName(final String schemaNames) {\n         return Strings.isNullOrEmpty(schemaNames) ? Collections.emptyList() : Splitter.on(COMMA_SEPARATOR).splitToList(schemaNames);\n     }\n-    \n+\n     /**\n      * Get all schema config paths.\n      *\n@@ -317,7 +317,7 @@ public final class RegistryCenterNode {\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * Get cache path.\n      *\n@@ -327,7 +327,7 @@ public final class RegistryCenterNode {\n     public String getCachePath(final String path) {\n         return Joiner.on(PATH_SEPARATOR).join(path, CACHE_NODE);\n     }\n-    \n+\n     /**\n      * Get all metadata schema paths.\n      *\n@@ -337,7 +337,7 @@ public final class RegistryCenterNode {\n     public Collection<String> getAllMetadataSchemaPaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataSchemaPath).collect(Collectors.toList());\n     }\n-    \n+\n     /**\n      * Get all rule paths.\n      *\n@@ -347,7 +347,7 @@ public final class RegistryCenterNode {\n     public Collection<String> getAllRulePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getRulePath).collect(Collectors.toList());\n     }\n-    \n+\n     /**\n      * Get all data source paths.\n      *\n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/15/RegistryCenterNode.java\nindex c5fe9def06a..b75bbb1784e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/15/RegistryCenterNode.java\n@@ -156,8 +156,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n@@ -357,4 +356,4 @@ public final class RegistryCenterNode {\n     public Collection<String> getAllDataSourcePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataDataSourcePath).collect(Collectors.toList());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "179",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "201",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "215",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "231",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "242",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "254",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "266",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "278",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "289",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "300",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "311",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "331",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "345",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "357",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "375",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "387",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "399",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "411",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/15/RegistryCenterNode.java\nindex c5fe9def06a..dae268613ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/15/RegistryCenterNode.java\n@@ -22,7 +22,6 @@ import com.google.common.base.Splitter;\n import com.google.common.base.Strings;\n import lombok.RequiredArgsConstructor;\n import org.apache.shardingsphere.governance.core.registry.schema.GovernanceSchema;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -34,35 +33,37 @@ import java.util.stream.Collectors;\n /**\n  * Registry center node.\n  */\n+\n+\n @RequiredArgsConstructor\n public final class RegistryCenterNode {\n-    \n+\n     private static final String ROOT = \"states\";\n-    \n+\n     private static final String PROXY_NODES_NAME = \"proxynodes\";\n-    \n+\n     private static final String DATA_NODES_NAME = \"datanodes\";\n-    \n+\n     private static final String PRIMARY_NODES_NAME = \"primarynodes\";\n-    \n+\n     private static final String METADATA_NODE = \"metadata\";\n-    \n+\n     private static final String DATA_SOURCE_NODE = \"datasource\";\n-    \n+\n     private static final String RULE_NODE = \"rule\";\n-    \n+\n     private static final String SCHEMA_NODE = \"schema\";\n-    \n+\n     private static final String AUTHENTICATION_NODE = \"authentication\";\n-    \n+\n     private static final String PRIVILEGE_NODE = \"privilegenode\";\n-    \n+\n     private static final String PROPS_NODE = \"props\";\n-    \n+\n     private static final String COMMA_SEPARATOR = \",\";\n-    \n+\n     private static final String PATH_SEPARATOR = \"/\";\n-    \n+\n     private static final String CACHE_NODE = \"cache\";\n     \n     /**\n@@ -71,6 +72,7 @@ public final class RegistryCenterNode {\n      * @param instanceId instance id\n      * @return proxy node path\n      */\n+\n     public String getProxyNodePath(final String instanceId) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME, instanceId);\n     }\n@@ -80,6 +82,8 @@ public final class RegistryCenterNode {\n      *\n      * @return data nodes path\n      */\n+\n+\n     public String getDataNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME);\n     }\n@@ -89,6 +93,8 @@ public final class RegistryCenterNode {\n      *\n      * @return primary nodes path\n      */\n+\n+\n     public String getPrimaryNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME);\n     }\n@@ -99,6 +105,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema path\n      */\n+\n+\n     public String getSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName);\n     }\n@@ -109,6 +117,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema path\n      */\n+\n+\n     public String getPrimaryNodesSchemaPath(final String schemaName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName);\n     }\n@@ -120,6 +130,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceName data source name\n      * @return data source path\n      */\n+\n+\n     public String getDataSourcePath(final String schemaName, final String dataSourceName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, DATA_NODES_NAME, schemaName, dataSourceName);\n     }\n@@ -130,6 +142,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return data source path\n      */\n+\n+\n     public String getMetadataDataSourcePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, DATA_SOURCE_NODE);\n     }\n@@ -141,6 +155,8 @@ public final class RegistryCenterNode {\n      * @param groupName group name\n      * @return data source path\n      */\n+\n+\n     public String getPrimaryDataSourcePath(final String schemaName, final String groupName) {\n         return Joiner.on(\"/\").join(\"\", ROOT, PRIMARY_NODES_NAME, schemaName, groupName);\n     }\n@@ -151,6 +167,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceNodeFullPath data source node full path\n      * @return governance schema\n      */\n+\n+\n     public Optional<GovernanceSchema> getGovernanceSchema(final String dataSourceNodeFullPath) {\n         Pattern pattern = Pattern.compile(getDataNodesPath() + \"/\" + \"(\\\\w+)/(\\\\w+)$\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n@@ -164,6 +182,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceNodeFullPath data source node full path\n      * @return primary nodes governance schema\n      */\n+\n+\n     public Optional<GovernanceSchema> getPrimaryNodesGovernanceSchema(final String dataSourceNodeFullPath) {\n         Pattern pattern = Pattern.compile(getPrimaryNodesPath() + \"/\" + \"(\\\\w+)/(\\\\w+)$\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n@@ -176,6 +196,8 @@ public final class RegistryCenterNode {\n      * @param dataSourceNodeFullPath data source node full path\n      * @return is primary data source path\n      */\n+\n+\n     public boolean isPrimaryDataSourcePath(final String dataSourceNodeFullPath) {\n         Pattern pattern = Pattern.compile(getPrimaryNodesPath() + \"/\" + \"(\\\\w+)/(\\\\w+)$\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n@@ -188,6 +210,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames collection of schema name\n      * @return collection of schema path\n      */\n+\n+\n     public Collection<String> getAllSchemaPaths(final Collection<String> schemaNames) {\n         Collection<String> result = new ArrayList<>(schemaNames.size());\n         for (String schemaName : schemaNames) {\n@@ -202,6 +226,8 @@ public final class RegistryCenterNode {\n      *\n      * @return proxy nodes path\n      */\n+\n+\n     public String getProxyNodesPath() {\n         return Joiner.on(\"/\").join(\"\", ROOT, PROXY_NODES_NAME);\n     }\n@@ -211,6 +237,8 @@ public final class RegistryCenterNode {\n      *\n      * @return metadata node path\n      */\n+\n+\n     public String getMetadataNodePath() {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE);\n     }\n@@ -221,6 +249,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema name path\n      */\n+\n+\n     public String getSchemaNamePath(final String schemaName) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName);\n     }\n@@ -231,6 +261,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return rule path\n      */\n+\n+\n     public String getRulePath(final String schemaName) {\n         return getFullMetadataPath(schemaName, RULE_NODE);\n     }\n@@ -241,6 +273,8 @@ public final class RegistryCenterNode {\n      * @param schemaName schema name\n      * @return schema path\n      */\n+\n+\n     public String getMetadataSchemaPath(final String schemaName) {\n         return getFullMetadataPath(schemaName, SCHEMA_NODE);\n     }\n@@ -250,6 +284,8 @@ public final class RegistryCenterNode {\n      *\n      * @return authentication path\n      */\n+\n+\n     public String getAuthenticationPath() {\n         return getFullPath(AUTHENTICATION_NODE);\n     }\n@@ -259,6 +295,8 @@ public final class RegistryCenterNode {\n      *\n      * @return authenticationnodes path\n      */\n+\n+\n     public String getPrivilegeNodePath() {\n         return Joiner.on(PATH_SEPARATOR).join(ROOT, PRIVILEGE_NODE);\n     }\n@@ -268,14 +306,16 @@ public final class RegistryCenterNode {\n      *\n      * @return properties path\n      */\n+\n+\n     public String getPropsPath() {\n         return getFullPath(PROPS_NODE);\n     }\n-    \n+\n     private String getFullMetadataPath(final String schemaName, final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", METADATA_NODE, schemaName, node);\n     }\n-    \n+\n     private String getFullPath(final String node) {\n         return Joiner.on(PATH_SEPARATOR).join(\"\", node);\n     }\n@@ -286,6 +326,8 @@ public final class RegistryCenterNode {\n      * @param configurationNodeFullPath configuration node full path\n      * @return schema name\n      */\n+\n+\n     public String getSchemaName(final String configurationNodeFullPath) {\n         Pattern pattern = Pattern.compile(getMetadataNodePath() + \"/(\\\\w+)\" + \"(/datasource|/rule)?\", Pattern.CASE_INSENSITIVE);\n         Matcher matcher = pattern.matcher(configurationNodeFullPath);\n@@ -298,6 +340,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names\n      * @return schema names\n      */\n+\n+\n     public Collection<String> splitSchemaName(final String schemaNames) {\n         return Strings.isNullOrEmpty(schemaNames) ? Collections.emptyList() : Splitter.on(COMMA_SEPARATOR).splitToList(schemaNames);\n     }\n@@ -308,6 +352,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names\n      * @return config paths list\n      */\n+\n+\n     public Collection<String> getAllSchemaConfigPaths(final Collection<String> schemaNames) {\n         Collection<String> result = new ArrayList<>(Collections.singleton(getMetadataNodePath()));\n         for (String schemaName : schemaNames) {\n@@ -324,6 +370,8 @@ public final class RegistryCenterNode {\n      * @param path path\n      * @return cache path\n      */\n+\n+\n     public String getCachePath(final String path) {\n         return Joiner.on(PATH_SEPARATOR).join(path, CACHE_NODE);\n     }\n@@ -334,6 +382,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names\n      * @return list of schema path\n      */\n+\n+\n     public Collection<String> getAllMetadataSchemaPaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataSchemaPath).collect(Collectors.toList());\n     }\n@@ -344,6 +394,8 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names\n      * @return list of rule path\n      */\n+\n+\n     public Collection<String> getAllRulePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getRulePath).collect(Collectors.toList());\n     }\n@@ -354,7 +406,9 @@ public final class RegistryCenterNode {\n      * @param schemaNames schema names\n      * @return list of data source path\n      */\n+\n+\n     public Collection<String> getAllDataSourcePaths(final Collection<String> schemaNames) {\n         return schemaNames.stream().map(this::getMetadataDataSourcePath).collect(Collectors.toList());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/15/RegistryCenterNode.java\nindex c5fe9def06a..9172fb28b83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/15/RegistryCenterNode.java\n@@ -156,8 +156,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/15/RegistryCenterNode.java\nindex c5fe9def06a..9172fb28b83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/15/RegistryCenterNode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/15/RegistryCenterNode.java\n@@ -156,8 +156,7 @@ public final class RegistryCenterNode {\n         Matcher matcher = pattern.matcher(dataSourceNodeFullPath);\n         return matcher.find() ? Optional.of(new GovernanceSchema(matcher.group(1), matcher.group(2))) : Optional.empty();\n     }\n-    \n-    \n+\n     /**\n      * Get primary nodes governance schema.\n      *\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}