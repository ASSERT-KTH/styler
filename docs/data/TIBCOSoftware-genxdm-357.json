{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "357",
    "information": {
        "errors": [
            {
                "line": "18",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "abstract public class BaseBridgePerfTest<N, A> implements BridgePerfTest<N, A> {\n\n\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n\tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n\tpublic static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\n\tprivate N m_testNode;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/357/BaseBridgePerfTest.java\nindex 1762a375b89..c31c9b95836 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/357/BaseBridgePerfTest.java\n@@ -15,7 +15,7 @@ import org.genxdm.samples.performance.VersionedProcessingContextFactory;\n \r\n abstract public class BaseBridgePerfTest<N, A> implements BridgePerfTest<N, A> {\r\n \r\n-\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n+public static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n \tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\r\n \tpublic static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\r\n \tprivate N m_testNode;\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/357/BaseBridgePerfTest.java\nindex 1762a375b89..f5933497167 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/357/BaseBridgePerfTest.java\n@@ -15,162 +15,173 @@ import org.genxdm.samples.performance.VersionedProcessingContextFactory;\n \r\n abstract public class BaseBridgePerfTest<N, A> implements BridgePerfTest<N, A> {\r\n \r\n-\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n-\tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\r\n-\tpublic static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\r\n-\tprivate N m_testNode;\r\n-\tprivate String m_baseURI;\r\n-\tprivate Resolver m_resolver;\r\n-\tprivate ProcessingContext<N> m_pcx;\r\n-\tprivate VersionedProcessingContextFactory<N> m_versionedPcxFactory;\r\n-\tprivate FragmentBuilder<N> m_docBuilder;\r\n+    public static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n+\r\n+    public static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\r\n+\r\n+    public static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\r\n+\r\n+    private N m_testNode;\r\n+\r\n+    private String m_baseURI;\r\n+\r\n+    private Resolver m_resolver;\r\n+\r\n+    private ProcessingContext<N> m_pcx;\r\n+\r\n+    private VersionedProcessingContextFactory<N> m_versionedPcxFactory;\r\n+\r\n+    private FragmentBuilder<N> m_docBuilder;\r\n+\r\n     private DocumentHandler<N> m_docHandler;\r\n-\tprivate Model<N> m_model;\r\n-\tprivate String m_docFilename;\r\n-\r\n-\tpublic BaseBridgePerfTest() {\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic Iterable<String> getRequiredFeatures() {\r\n-\t\treturn null;\r\n-\t}\r\n-/*\r\n-\t@Override\r\n-\tpublic void setContext(ProcessingContext<N> pcx) {\r\n-\t\t// Ensure that context supports the features we need.\r\n-\t\tm_pcx = pcx;\r\n-\t\tm_docBuilder = m_pcx.newFragmentBuilder();\r\n-\t\tm_model = m_pcx.getModel();\r\n-\t\tm_docHandler = m_pcx.newDocumentHandler();\r\n-\t}\r\n-*/\r\n-\t@SuppressWarnings(\"unchecked\") // for cast of pcxFactory\r\n+\r\n+    private Model<N> m_model;\r\n+\r\n+    private String m_docFilename;\r\n+\r\n+    public BaseBridgePerfTest() {\r\n+    }\r\n+\r\n     @Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\t{\r\n-    \t\r\n-\t\t// Bridge injection.\r\n-\t\tString pcxFactoryClassName = (String)props.get(BRIDGE_FACTORY_CLASS);\r\n-\t\tif(pcxFactoryClassName != null)\r\n-\t\t{\r\n-\t\t\ttry {\r\n-\t\t\t\tClass<?> pcxFactoryClass = this.getClass().getClassLoader().loadClass(pcxFactoryClassName);\r\n-\t\t\t\tm_versionedPcxFactory = (VersionedProcessingContextFactory<N>) pcxFactoryClass.newInstance();\r\n-\t\t\t\tm_pcx = m_versionedPcxFactory.newProcessingContext();\r\n-\t\t\t\tm_docBuilder = m_pcx.newFragmentBuilder();\r\n-\t\t\t\tm_model = m_pcx.getModel();\r\n-\t\t\t\tm_docHandler = m_pcx.newDocumentHandler();\r\n-\t\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t} catch (InstantiationException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t} catch (IllegalAccessException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\tthrow new IllegalStateException(\"No mutable processing context factory specified.\");\r\n-\t\t}\r\n-\t\t\r\n-\t\tm_docFilename = (String)props.get(DOC_FILE_PROP_NAME);\r\n-\t\tif(m_docFilename == null)\r\n-\t\t{\r\n-\t\t\tthrow new IllegalStateException(\"Input document must be specified.\");\r\n-\t\t}\r\n-\t\t\r\n-    \t// Ensure that bridge has capabilities needed to run test.\r\n-\t\tIterable<String> reqFeatures = getRequiredFeatures();\r\n-\t\tif(reqFeatures != null)\r\n-\t\t{\r\n-\t\t\tfor(String feature : reqFeatures)\r\n-\t\t\t{\r\n-\t\t\t\tif(!getPcx().isSupported(feature))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tthrow new UnsupportedOperationException(getBridgeName() + \" bridge does not support the \" + feature + \" feature which is required by the \" + this.getClass().getName() + \" test.\");\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\t\r\n-\t\tm_baseURI = (String)props.get(BASE_URI_PROP_NAME);\r\n-\t\tif(m_baseURI == null)\r\n-\t\t{\r\n-\t\t\tthrow new IllegalStateException(\"Base URI must be specified.\");\r\n-\t\t}\r\n-\t\ttry {\r\n-\t\t\tm_testNode = getDocHandler().parse(new FileReader(m_baseURI + \"/\" + m_docFilename), null);\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic void finalTeardown()\t{\r\n-\t\tm_testNode = null;\r\n-\t\tm_baseURI = null;\r\n-\t\tm_resolver = null;\r\n-\t\tm_pcx = null;\r\n-\t\tm_versionedPcxFactory = null;\r\n-\t\tm_docBuilder = null;\r\n-\t    m_docHandler = null;\r\n-\t\tm_model = null;\r\n-\t\tm_docFilename = null;\r\n-\t};\r\n-\t\r\n-\r\n-\tpublic N getTestNode() \r\n-\t{\r\n-\t\treturn m_testNode;\r\n-\t}\r\n-\tpublic ProcessingContext<N> getPcx() \r\n-\t{\r\n-\t\treturn m_pcx;\r\n-\t}\r\n-\tpublic FragmentBuilder<N> getDocBuilder() \r\n-\t{\r\n-\t\treturn m_docBuilder;\r\n-\t}\r\n-\tpublic DocumentHandler<N> getDocHandler() \r\n-\t{\r\n-\t\treturn m_docHandler;\r\n-\t}\r\n-\tpublic Model<N> getModel() \r\n-\t{\r\n-\t\treturn m_model;\r\n-\t}\r\n-\tpublic String getBaseURI()\r\n-\t{\r\n-\t\treturn m_baseURI;\r\n-\t}\r\n-\tpublic String getDocFilename()\r\n-\t{\r\n-\t\treturn m_docFilename;\r\n-\t}\r\n-\t@Override\r\n-\tpublic String getBridgeName() {\r\n-\t\tif(m_versionedPcxFactory != null)\r\n-\t\t{\r\n-\t\t\treturn m_versionedPcxFactory.getBridgeName();\r\n-\t\t}\r\n-\t\treturn getPcx().toString();\r\n-\t}\r\n-\t@Override\r\n-\tpublic String getBridgeVersion() {\r\n-\t\tif(m_versionedPcxFactory != null)\r\n-\t\t{\r\n-\t\t\treturn m_versionedPcxFactory.getBridgeVersion();\r\n-\t\t}\r\n-\t\treturn \"unknown\";\r\n-\t}\r\n-\tprotected Resolver getResolver()\r\n-\t{\r\n-\t\tif(m_resolver == null)\r\n-\t\t{\r\n-\t\t\ttry {\r\n-\t\t\t\tm_resolver = new SampleResolver(new URI(getBaseURI()));\r\n-\t\t\t} catch (URISyntaxException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn m_resolver;\r\n-\t}\r\n+    public Iterable<String> getRequiredFeatures() {\r\n+        return null;\r\n+    }\r\n+\r\n+    /*\r\n+        @Override\r\n+        public void setContext(ProcessingContext<N> pcx) {\r\n+            // Ensure that context supports the features we need.\r\n+            m_pcx = pcx;\r\n+            m_docBuilder = m_pcx.newFragmentBuilder();\r\n+            m_model = m_pcx.getModel();\r\n+            m_docHandler = m_pcx.newDocumentHandler();\r\n+        }\r\n+    */\r\n+    @SuppressWarnings(\"unchecked\") // for cast of pcxFactory\r\n+    @Override\r\n+    public void initialSetup(Map<String, Object> props) {\r\n+\r\n+        // Bridge injection.\r\n+        String pcxFactoryClassName = (String) props.get(BRIDGE_FACTORY_CLASS);\r\n+        if (pcxFactoryClassName != null) {\r\n+            try {\r\n+                Class<?> pcxFactoryClass =\r\n+                    this.getClass().getClassLoader().loadClass(pcxFactoryClassName);\r\n+                m_versionedPcxFactory =\r\n+                    (VersionedProcessingContextFactory<N>) pcxFactoryClass.newInstance();\r\n+                m_pcx = m_versionedPcxFactory.newProcessingContext();\r\n+                m_docBuilder = m_pcx.newFragmentBuilder();\r\n+                m_model = m_pcx.getModel();\r\n+                m_docHandler = m_pcx.newDocumentHandler();\r\n+            } catch (ClassNotFoundException e) {\r\n+                throw new RuntimeException(e);\r\n+            } catch (InstantiationException e) {\r\n+                throw new RuntimeException(e);\r\n+            } catch (IllegalAccessException e) {\r\n+                throw new RuntimeException(e);\r\n+            }\r\n+        } else {\r\n+            throw new IllegalStateException(\"No mutable processing context factory specified.\");\r\n+        }\r\n+\r\n+        m_docFilename = (String) props.get(DOC_FILE_PROP_NAME);\r\n+        if (m_docFilename == null) {\r\n+            throw new IllegalStateException(\"Input document must be specified.\");\r\n+        }\r\n+\r\n+        // Ensure that bridge has capabilities needed to run test.\r\n+        Iterable<String> reqFeatures = getRequiredFeatures();\r\n+        if (reqFeatures != null) {\r\n+            for (String feature : reqFeatures) {\r\n+                if (!getPcx().isSupported(feature)) {\r\n+                    throw new UnsupportedOperationException(\r\n+                        getBridgeName() + \" bridge does not support the \" + feature +\r\n+                            \" feature which is required by the \" + this.getClass().getName() +\r\n+                            \" test.\");\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        m_baseURI = (String) props.get(BASE_URI_PROP_NAME);\r\n+        if (m_baseURI == null) {\r\n+            throw new IllegalStateException(\"Base URI must be specified.\");\r\n+        }\r\n+        try {\r\n+            m_testNode =\r\n+                getDocHandler().parse(new FileReader(m_baseURI + \"/\" + m_docFilename), null);\r\n+        } catch (IOException e) {\r\n+            throw new RuntimeException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void finalTeardown() {\r\n+        m_testNode = null;\r\n+        m_baseURI = null;\r\n+        m_resolver = null;\r\n+        m_pcx = null;\r\n+        m_versionedPcxFactory = null;\r\n+        m_docBuilder = null;\r\n+        m_docHandler = null;\r\n+        m_model = null;\r\n+        m_docFilename = null;\r\n+    }\r\n+\r\n+    ;\r\n+\r\n+\r\n+    public N getTestNode() {\r\n+        return m_testNode;\r\n+    }\r\n+\r\n+    public ProcessingContext<N> getPcx() {\r\n+        return m_pcx;\r\n+    }\r\n+\r\n+    public FragmentBuilder<N> getDocBuilder() {\r\n+        return m_docBuilder;\r\n+    }\r\n+\r\n+    public DocumentHandler<N> getDocHandler() {\r\n+        return m_docHandler;\r\n+    }\r\n+\r\n+    public Model<N> getModel() {\r\n+        return m_model;\r\n+    }\r\n+\r\n+    public String getBaseURI() {\r\n+        return m_baseURI;\r\n+    }\r\n+\r\n+    public String getDocFilename() {\r\n+        return m_docFilename;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getBridgeName() {\r\n+        if (m_versionedPcxFactory != null) {\r\n+            return m_versionedPcxFactory.getBridgeName();\r\n+        }\r\n+        return getPcx().toString();\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getBridgeVersion() {\r\n+        if (m_versionedPcxFactory != null) {\r\n+            return m_versionedPcxFactory.getBridgeVersion();\r\n+        }\r\n+        return \"unknown\";\r\n+    }\r\n+\r\n+    protected Resolver getResolver() {\r\n+        if (m_resolver == null) {\r\n+            try {\r\n+                m_resolver = new SampleResolver(new URI(getBaseURI()));\r\n+            } catch (URISyntaxException e) {\r\n+                throw new RuntimeException(e);\r\n+            }\r\n+        }\r\n+        return m_resolver;\r\n+    }\r\n }\n\\ No newline at end of file\n",
            "diff_size": 180
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/357/BaseBridgePerfTest.java\nindex 1762a375b89..31a952d9d55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/357/BaseBridgePerfTest.java\n@@ -1,176 +1,204 @@\n-package org.genxdm.samples.performance.bridges;\r\n-\r\n-import java.io.FileReader;\r\n-import java.io.IOException;\r\n-import java.net.URI;\r\n-import java.net.URISyntaxException;\r\n-import java.util.Map;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.ProcessingContext;\r\n-import org.genxdm.io.DocumentHandler;\r\n-import org.genxdm.io.FragmentBuilder;\r\n-import org.genxdm.io.Resolver;\r\n-import org.genxdm.samples.performance.VersionedProcessingContextFactory;\r\n-\r\n-abstract public class BaseBridgePerfTest<N, A> implements BridgePerfTest<N, A> {\r\n-\r\n-\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n-\tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\r\n-\tpublic static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\r\n-\tprivate N m_testNode;\r\n-\tprivate String m_baseURI;\r\n-\tprivate Resolver m_resolver;\r\n-\tprivate ProcessingContext<N> m_pcx;\r\n-\tprivate VersionedProcessingContextFactory<N> m_versionedPcxFactory;\r\n-\tprivate FragmentBuilder<N> m_docBuilder;\r\n-    private DocumentHandler<N> m_docHandler;\r\n-\tprivate Model<N> m_model;\r\n-\tprivate String m_docFilename;\r\n-\r\n-\tpublic BaseBridgePerfTest() {\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic Iterable<String> getRequiredFeatures() {\r\n-\t\treturn null;\r\n-\t}\r\n+package org.genxdm.samples.performance.bridges;\n+\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+import org.genxdm.Model;\n+import org.genxdm.ProcessingContext;\n+import org.genxdm.io.DocumentHandler;\n+import org.genxdm.io.FragmentBuilder;\n+import org.genxdm.io.Resolver;\n+import org.genxdm.samples.performance.VersionedProcessingContextFactory;\n+\n+abstract public class BaseBridgePerfTest<N, A> implements BridgePerfTest<N, A>\n+{\n+    public static final String DOC_FILE_PROP_NAME = \"bridge.document\";\n+    public static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\n+    public static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\n+    private N m_testNode;\n+    private String m_baseURI;\n+    private Resolver m_resolver;\n+    private ProcessingContext<N> m_pcx;\n+    private VersionedProcessingContextFactory<N> m_versionedPcxFactory;\n+    private FragmentBuilder<N> m_docBuilder;\n+    private DocumentHandler<N> m_docHandler;\n+    private Model<N> m_model;\n+    private String m_docFilename;\n+\n+    public BaseBridgePerfTest()\n+    {\n+    }\n+\n+    @Override\n+    public Iterable<String> getRequiredFeatures()\n+    {\n+        return null;\n+    }\r\n /*\r\n-\t@Override\r\n-\tpublic void setContext(ProcessingContext<N> pcx) {\r\n-\t\t// Ensure that context supports the features we need.\r\n-\t\tm_pcx = pcx;\r\n-\t\tm_docBuilder = m_pcx.newFragmentBuilder();\r\n-\t\tm_model = m_pcx.getModel();\r\n-\t\tm_docHandler = m_pcx.newDocumentHandler();\r\n-\t}\r\n-*/\r\n-\t@SuppressWarnings(\"unchecked\") // for cast of pcxFactory\r\n     @Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\t{\r\n-    \t\r\n-\t\t// Bridge injection.\r\n-\t\tString pcxFactoryClassName = (String)props.get(BRIDGE_FACTORY_CLASS);\r\n-\t\tif(pcxFactoryClassName != null)\r\n-\t\t{\r\n-\t\t\ttry {\r\n-\t\t\t\tClass<?> pcxFactoryClass = this.getClass().getClassLoader().loadClass(pcxFactoryClassName);\r\n-\t\t\t\tm_versionedPcxFactory = (VersionedProcessingContextFactory<N>) pcxFactoryClass.newInstance();\r\n-\t\t\t\tm_pcx = m_versionedPcxFactory.newProcessingContext();\r\n-\t\t\t\tm_docBuilder = m_pcx.newFragmentBuilder();\r\n-\t\t\t\tm_model = m_pcx.getModel();\r\n-\t\t\t\tm_docHandler = m_pcx.newDocumentHandler();\r\n-\t\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t} catch (InstantiationException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t} catch (IllegalAccessException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\tthrow new IllegalStateException(\"No mutable processing context factory specified.\");\r\n-\t\t}\r\n-\t\t\r\n-\t\tm_docFilename = (String)props.get(DOC_FILE_PROP_NAME);\r\n-\t\tif(m_docFilename == null)\r\n-\t\t{\r\n-\t\t\tthrow new IllegalStateException(\"Input document must be specified.\");\r\n-\t\t}\r\n-\t\t\r\n-    \t// Ensure that bridge has capabilities needed to run test.\r\n-\t\tIterable<String> reqFeatures = getRequiredFeatures();\r\n-\t\tif(reqFeatures != null)\r\n-\t\t{\r\n-\t\t\tfor(String feature : reqFeatures)\r\n-\t\t\t{\r\n-\t\t\t\tif(!getPcx().isSupported(feature))\r\n-\t\t\t\t{\r\n-\t\t\t\t\tthrow new UnsupportedOperationException(getBridgeName() + \" bridge does not support the \" + feature + \" feature which is required by the \" + this.getClass().getName() + \" test.\");\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\t\r\n-\t\tm_baseURI = (String)props.get(BASE_URI_PROP_NAME);\r\n-\t\tif(m_baseURI == null)\r\n-\t\t{\r\n-\t\t\tthrow new IllegalStateException(\"Base URI must be specified.\");\r\n-\t\t}\r\n-\t\ttry {\r\n-\t\t\tm_testNode = getDocHandler().parse(new FileReader(m_baseURI + \"/\" + m_docFilename), null);\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic void finalTeardown()\t{\r\n-\t\tm_testNode = null;\r\n-\t\tm_baseURI = null;\r\n-\t\tm_resolver = null;\r\n-\t\tm_pcx = null;\r\n-\t\tm_versionedPcxFactory = null;\r\n-\t\tm_docBuilder = null;\r\n-\t    m_docHandler = null;\r\n-\t\tm_model = null;\r\n-\t\tm_docFilename = null;\r\n-\t};\r\n-\t\r\n-\r\n-\tpublic N getTestNode() \r\n-\t{\r\n-\t\treturn m_testNode;\r\n-\t}\r\n-\tpublic ProcessingContext<N> getPcx() \r\n-\t{\r\n-\t\treturn m_pcx;\r\n-\t}\r\n-\tpublic FragmentBuilder<N> getDocBuilder() \r\n-\t{\r\n-\t\treturn m_docBuilder;\r\n-\t}\r\n-\tpublic DocumentHandler<N> getDocHandler() \r\n-\t{\r\n-\t\treturn m_docHandler;\r\n-\t}\r\n-\tpublic Model<N> getModel() \r\n-\t{\r\n-\t\treturn m_model;\r\n-\t}\r\n-\tpublic String getBaseURI()\r\n-\t{\r\n-\t\treturn m_baseURI;\r\n-\t}\r\n-\tpublic String getDocFilename()\r\n-\t{\r\n-\t\treturn m_docFilename;\r\n-\t}\r\n-\t@Override\r\n-\tpublic String getBridgeName() {\r\n-\t\tif(m_versionedPcxFactory != null)\r\n-\t\t{\r\n-\t\t\treturn m_versionedPcxFactory.getBridgeName();\r\n-\t\t}\r\n-\t\treturn getPcx().toString();\r\n-\t}\r\n-\t@Override\r\n-\tpublic String getBridgeVersion() {\r\n-\t\tif(m_versionedPcxFactory != null)\r\n-\t\t{\r\n-\t\t\treturn m_versionedPcxFactory.getBridgeVersion();\r\n-\t\t}\r\n-\t\treturn \"unknown\";\r\n-\t}\r\n-\tprotected Resolver getResolver()\r\n-\t{\r\n-\t\tif(m_resolver == null)\r\n-\t\t{\r\n-\t\t\ttry {\r\n-\t\t\t\tm_resolver = new SampleResolver(new URI(getBaseURI()));\r\n-\t\t\t} catch (URISyntaxException e) {\r\n-\t\t\t\tthrow new RuntimeException(e);\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn m_resolver;\r\n-\t}\r\n+    public void setContext(ProcessingContext<N> pcx) {\r\n+        // Ensure that context supports the features we need.\r\n+        m_pcx = pcx;\r\n+        m_docBuilder = m_pcx.newFragmentBuilder();\r\n+        m_model = m_pcx.getModel();\r\n+        m_docHandler = m_pcx.newDocumentHandler();\r\n+    }\r\n+*/\n+\n+    @SuppressWarnings(\"unchecked\") // for cast of pcxFactory\n+    @Override\n+    public void initialSetup(Map<String, Object> props)\n+    {\r\n+        \r\n+        // Bridge injection.\n+        String pcxFactoryClassName = (String)props.get(BRIDGE_FACTORY_CLASS);\n+        if (pcxFactoryClassName != null)\n+        {\n+            try\n+            {\n+                Class<?> pcxFactoryClass = this.getClass().getClassLoader().loadClass(pcxFactoryClassName);\n+                m_versionedPcxFactory = (VersionedProcessingContextFactory<N>)pcxFactoryClass.newInstance();\n+                m_pcx = m_versionedPcxFactory.newProcessingContext();\n+                m_docBuilder = m_pcx.newFragmentBuilder();\n+                m_model = m_pcx.getModel();\n+                m_docHandler = m_pcx.newDocumentHandler();\n+            }\n+            catch (ClassNotFoundException e)\n+            {\n+                throw new RuntimeException(e);\n+            }\n+            catch (InstantiationException e)\n+            {\n+                throw new RuntimeException(e);\n+            }\n+            catch (IllegalAccessException e)\n+            {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        else\n+        {\n+            throw new IllegalStateException(\"No mutable processing context factory specified.\");\n+        }\n+        m_docFilename = (String)props.get(DOC_FILE_PROP_NAME);\n+        if (m_docFilename == null)\n+        {\n+            throw new IllegalStateException(\"Input document must be specified.\");\n+        }\r\n+        \r\n+        // Ensure that bridge has capabilities needed to run test.\n+        Iterable<String> reqFeatures = getRequiredFeatures();\n+        if (reqFeatures != null)\n+        {\n+            for (String feature : reqFeatures)\n+            {\n+                if (!getPcx().isSupported(feature))\n+                {\n+                    throw new UnsupportedOperationException(getBridgeName() + \" bridge does not support the \" + feature + \" feature which is required by the \" + this.getClass().getName() + \" test.\");\n+                }\n+            }\n+        }\n+        m_baseURI = (String)props.get(BASE_URI_PROP_NAME);\n+        if (m_baseURI == null)\n+        {\n+            throw new IllegalStateException(\"Base URI must be specified.\");\n+        }\n+        try\n+        {\n+            m_testNode = getDocHandler().parse(new FileReader(m_baseURI + \"/\" + m_docFilename), null);\n+        }\n+        catch (IOException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void finalTeardown()\n+    {\n+        m_testNode = null;\n+        m_baseURI = null;\n+        m_resolver = null;\n+        m_pcx = null;\n+        m_versionedPcxFactory = null;\n+        m_docBuilder = null;\n+        m_docHandler = null;\n+        m_model = null;\n+        m_docFilename = null;\n+    }\n+\n+    ;\n+\n+    public N getTestNode()\n+    {\n+        return m_testNode;\n+    }\n+\n+    public ProcessingContext<N> getPcx()\n+    {\n+        return m_pcx;\n+    }\n+\n+    public FragmentBuilder<N> getDocBuilder()\n+    {\n+        return m_docBuilder;\n+    }\n+\n+    public DocumentHandler<N> getDocHandler()\n+    {\n+        return m_docHandler;\n+    }\n+\n+    public Model<N> getModel()\n+    {\n+        return m_model;\n+    }\n+\n+    public String getBaseURI()\n+    {\n+        return m_baseURI;\n+    }\n+\n+    public String getDocFilename()\n+    {\n+        return m_docFilename;\n+    }\n+\n+    @Override\n+    public String getBridgeName()\n+    {\n+        if (m_versionedPcxFactory != null)\n+        {\n+            return m_versionedPcxFactory.getBridgeName();\n+        }\n+        return getPcx().toString();\n+    }\n+\n+    @Override\n+    public String getBridgeVersion()\n+    {\n+        if (m_versionedPcxFactory != null)\n+        {\n+            return m_versionedPcxFactory.getBridgeVersion();\n+        }\n+        return \"unknown\";\n+    }\n+\n+    protected Resolver getResolver()\n+    {\n+        if (m_resolver == null)\n+        {\n+            try\n+            {\n+                m_resolver = new SampleResolver(new URI(getBaseURI()));\n+            }\n+            catch (URISyntaxException e)\n+            {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return m_resolver;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 211
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/357/BaseBridgePerfTest.java\nindex 1762a375b89..c31c9b95836 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/357/BaseBridgePerfTest.java\n@@ -15,7 +15,7 @@ import org.genxdm.samples.performance.VersionedProcessingContextFactory;\n \r\n abstract public class BaseBridgePerfTest<N, A> implements BridgePerfTest<N, A> {\r\n \r\n-\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n+public static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n \tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\r\n \tpublic static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\r\n \tprivate N m_testNode;\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/357/BaseBridgePerfTest.java\nindex 1762a375b89..b24b0788fe0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/357/BaseBridgePerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/357/BaseBridgePerfTest.java\n@@ -15,7 +15,7 @@ import org.genxdm.samples.performance.VersionedProcessingContextFactory;\n \r\n abstract public class BaseBridgePerfTest<N, A> implements BridgePerfTest<N, A> {\r\n \r\n-\tpublic static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n+    public static final String DOC_FILE_PROP_NAME = \"bridge.document\";\r\n \tpublic static final String BASE_URI_PROP_NAME = \"bridge.baseURI\";\r\n \tpublic static final String BRIDGE_FACTORY_CLASS = \"bridgeFactoryClass\";\r\n \tprivate N m_testNode;\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}