{
    "project_name": "neuhalje-bouncy-gpg",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   *     [ultimate] Rezi Recipient (Password: recipient) &lt;recipient@example.com&gt; sub\n   * 2048R/0x54A3DB374F787AB7 2015-09-27 . Most implementations delegate to an implementation of\n   * {@link name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallback}\n   *\n   * @param keyID The password for this key is needed\n   * @return the passphrase OR null (if unknown/no passphrase)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/errored/1/0/KeyringConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/intellij/0/KeyringConfig.java\nindex 3e7ad1be2db..a65c76ce8d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/errored/1/0/KeyringConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/intellij/0/KeyringConfig.java\n@@ -25,7 +25,7 @@ public interface KeyringConfig {\n    * -------------------------- pub   2048R/0xAFF0658D23FB56E6 2015-09-27 uid\n    * [ultimate] Sven Sender (Password: sender) &lt;sender@example.com&gt; sub\n    * 2048R/0x86DAC13816FE6FE2 2015-09-27 . pub   2048R/0x3DF16BD7C3F280F3 2015-09-27 uid\n-   *     [ultimate] Rezi Recipient (Password: recipient) &lt;recipient@example.com&gt; sub\n+   * [ultimate] Rezi Recipient (Password: recipient) &lt;recipient@example.com&gt; sub\n    * 2048R/0x54A3DB374F787AB7 2015-09-27 . Most implementations delegate to an implementation of\n    * {@link name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallback}\n    *\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/errored/1/0/KeyringConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/naturalize/0/KeyringConfig.java\nindex 3e7ad1be2db..119bbc50a2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/errored/1/0/KeyringConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/naturalize/0/KeyringConfig.java\n@@ -41,4 +41,4 @@ public interface KeyringConfig {\n    * @return calculator\n    */\n   KeyFingerPrintCalculator getKeyFingerPrintCalculator();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/errored/1/0/KeyringConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/codebuff/0/KeyringConfig.java\nindex 3e7ad1be2db..65fff0ba72c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/errored/1/0/KeyringConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neuhalje-bouncy-gpg/codebuff/0/KeyringConfig.java\n@@ -13,10 +13,13 @@ import org.bouncycastle.openpgp.operator.KeyFingerPrintCalculator;\n  *\n  * @see KeyringConfigs\n  */\n+\n+\n public interface KeyringConfig {\n \n   PGPPublicKeyRingCollection getPublicKeyRings() throws IOException, PGPException;\n \n+\n   PGPSecretKeyRingCollection getSecretKeyRings() throws IOException, PGPException;\n \n   /**\n@@ -32,6 +35,8 @@ public interface KeyringConfig {\n    * @param keyID The password for this key is needed\n    * @return the passphrase OR null (if unknown/no passphrase)\n    */\n+\n+\n   @Nullable\n   char[] decryptionSecretKeyPassphraseForSecretKeyId(long keyID);\n \n@@ -40,5 +45,7 @@ public interface KeyringConfig {\n    *\n    * @return calculator\n    */\n+\n+\n   KeyFingerPrintCalculator getKeyFingerPrintCalculator();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}