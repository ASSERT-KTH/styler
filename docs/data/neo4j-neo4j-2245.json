{
    "project_name": "neo4j-neo4j",
    "error_id": "2245",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2245/DatabaseHealth.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2245/DatabaseHealth.java\nindex c5c3b66b516..696ef494924 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2245/DatabaseHealth.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2245/DatabaseHealth.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.monitoring;\n \n import java.util.Objects;\n@@ -30,7 +31,7 @@ import static org.apache.commons.lang3.exception.ExceptionUtils.indexOfThrowable\n public class DatabaseHealth extends LifecycleAdapter implements Health\n {\n     private static final String panicMessage = \"The database has encountered a critical error, \" +\n-            \"and needs to be restarted. Please see database logs for more details.\";\n+      \"and needs to be restarted. Please see database logs for more details.\";\n     private static final Class<? extends Throwable> CRITICAL_EXCEPTION = OutOfMemoryError.class;\n \n     private volatile boolean healthy = true;\n@@ -38,7 +39,7 @@ public class DatabaseHealth extends LifecycleAdapter implements Health\n     private final Log log;\n     private volatile Throwable causeOfPanic;\n \n-    public DatabaseHealth( PanicEventGenerator panicEventGenerator, Log log )\n+    public DatabaseHealth(PanicEventGenerator panicEventGenerator, Log log)\n     {\n         this.panicEventGenerator = panicEventGenerator;\n         this.log = log;\n@@ -52,29 +53,29 @@ public class DatabaseHealth extends LifecycleAdapter implements Health\n      * @throws EXCEPTION exception type to wrap cause in.\n      */\n     @Override\n-    public <EXCEPTION extends Throwable> void assertHealthy( Class<EXCEPTION> panicDisguise ) throws EXCEPTION\n+    public <EXCEPTION extends Throwable> void assertHealthy(Class<EXCEPTION> panicDisguise) throws EXCEPTION\n     {\n-        if ( !healthy )\n+        if (!healthy)\n         {\n-            throw Exceptions.disguiseException( panicDisguise, panicMessage, causeOfPanic );\n+            throw Exceptions.disguiseException(panicDisguise, panicMessage, causeOfPanic);\n         }\n     }\n \n     @Override\n-    public synchronized void panic( Throwable cause )\n+    public synchronized void panic(Throwable cause)\n     {\n-        if ( !healthy )\n+        if (!healthy)\n         {\n             return;\n         }\n \n-        Objects.requireNonNull( cause, \"Must provide a non null cause for the database panic\" );\n+        Objects.requireNonNull(cause, \"Must provide a non null cause for the database panic\");\n         this.causeOfPanic = cause;\n         this.healthy = false;\n-        log.error( \"Database panic: \" + panicMessage, cause );\n-        if ( panicEventGenerator != null )\n+        log.error(\"Database panic: \" + panicMessage, cause);\n+        if (panicEventGenerator != null)\n         {\n-            panicEventGenerator.panic( cause );\n+            panicEventGenerator.panic(cause);\n         }\n     }\n \n@@ -87,23 +88,22 @@ public class DatabaseHealth extends LifecycleAdapter implements Health\n     @Override\n     public synchronized boolean healed()\n     {\n-        if ( hasCriticalFailure() )\n+        if (hasCriticalFailure())\n         {\n-            log.error( \"Database encountered a critical error and can't be healed. Restart required.\" );\n+            log.error(\"Database encountered a critical error and can't be healed. Restart required.\");\n             return false;\n-        }\n-        else\n+        } else\n         {\n             healthy = true;\n             causeOfPanic = null;\n-            log.info( \"Database health set to OK\" );\n+            log.info(\"Database health set to OK\");\n             return true;\n         }\n     }\n \n     private boolean hasCriticalFailure()\n     {\n-        return !isHealthy() && indexOfThrowable( causeOfPanic, CRITICAL_EXCEPTION ) != -1;\n+        return !isHealthy() && indexOfThrowable(causeOfPanic, CRITICAL_EXCEPTION) != -1;\n     }\n \n     @Override\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2245/DatabaseHealth.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2245/DatabaseHealth.java\nindex c5c3b66b516..a7e6434861b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2245/DatabaseHealth.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2245/DatabaseHealth.java\n@@ -112,4 +112,4 @@ public class DatabaseHealth extends LifecycleAdapter implements Health\n         return causeOfPanic;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}