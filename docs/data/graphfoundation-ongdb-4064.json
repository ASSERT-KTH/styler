{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4064",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "183",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4064/RelationshipImporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4064/RelationshipImporter.java\nindex 79589d68ad4..debb9145074 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4064/RelationshipImporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4064/RelationshipImporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import java.util.function.LongFunction;\n@@ -47,188 +48,187 @@ import static org.neo4j.unsafe.impl.batchimport.cache.idmapping.IdMapper.ID_NOT_\n  */\n public class RelationshipImporter extends EntityImporter\n {\n-    private final BatchingRelationshipTypeTokenRepository relationshipTypeTokenRepository;\n-    private final IdMapper idMapper;\n-    private final RelationshipStore relationshipStore;\n-    private final RelationshipRecord relationshipRecord;\n-    private final BatchingIdGetter relationshipIds;\n-    private final Client typeCounts;\n-    private final Collector badCollector;\n-    private final boolean validateRelationshipData;\n-    private final boolean doubleRecordUnits;\n-    private final LongFunction<IdSequence> prepareIdSequence;\n-\n-    private long relationshipCount;\n-\n-    // State to keep in the event of bad relationships that need to be handed to the Collector\n-    private Object startId;\n-    private Group startIdGroup;\n-    private Object endId;\n-    private Group endIdGroup;\n-    private String type;\n-\n-    protected RelationshipImporter( BatchingNeoStores stores, IdMapper idMapper,\n-            DataStatistics typeDistribution,\n-            Monitor monitor, Collector badCollector, boolean validateRelationshipData, boolean doubleRecordUnits )\n-    {\n-        super( stores, monitor );\n-        this.doubleRecordUnits = doubleRecordUnits;\n-        this.relationshipTypeTokenRepository = stores.getRelationshipTypeRepository();\n-        this.idMapper = idMapper;\n-        this.badCollector = badCollector;\n-        this.validateRelationshipData = validateRelationshipData;\n-        this.relationshipStore = stores.getRelationshipStore();\n-        this.relationshipRecord = relationshipStore.newRecord();\n-        this.relationshipIds = new BatchingIdGetter( relationshipStore );\n-        this.typeCounts = typeDistribution.newClient();\n-        this.prepareIdSequence = PrepareIdSequence.of( doubleRecordUnits ).apply( stores.getRelationshipStore() );\n-        relationshipRecord.setInUse( true );\n-    }\n-\n-    @Override\n-    protected PrimitiveRecord primitiveRecord()\n-    {\n-        return relationshipRecord;\n-    }\n-\n-    @Override\n-    public boolean startId( long id )\n-    {\n-        relationshipRecord.setFirstNode( id );\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean startId( Object id, Group group )\n-    {\n-        this.startId = id;\n-        this.startIdGroup = group;\n-\n-        long nodeId = nodeId( id, group );\n-        relationshipRecord.setFirstNode( nodeId );\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean endId( long id )\n+  private final BatchingRelationshipTypeTokenRepository relationshipTypeTokenRepository;\n+  private final IdMapper idMapper;\n+  private final RelationshipStore relationshipStore;\n+  private final RelationshipRecord relationshipRecord;\n+  private final BatchingIdGetter relationshipIds;\n+  private final Client typeCounts;\n+  private final Collector badCollector;\n+  private final boolean validateRelationshipData;\n+  private final boolean doubleRecordUnits;\n+  private final LongFunction<IdSequence> prepareIdSequence;\n+\n+  private long relationshipCount;\n+\n+  // State to keep in the event of bad relationships that need to be handed to the Collector\n+  private Object startId;\n+  private Group startIdGroup;\n+  private Object endId;\n+  private Group endIdGroup;\n+  private String type;\n+\n+  protected RelationshipImporter(BatchingNeoStores stores, IdMapper idMapper,\n+                                 DataStatistics typeDistribution,\n+                                 Monitor monitor, Collector badCollector, boolean validateRelationshipData, boolean doubleRecordUnits)\n+  {\n+    super(stores, monitor);\n+    this.doubleRecordUnits = doubleRecordUnits;\n+    this.relationshipTypeTokenRepository = stores.getRelationshipTypeRepository();\n+    this.idMapper = idMapper;\n+    this.badCollector = badCollector;\n+    this.validateRelationshipData = validateRelationshipData;\n+    this.relationshipStore = stores.getRelationshipStore();\n+    this.relationshipRecord = relationshipStore.newRecord();\n+    this.relationshipIds = new BatchingIdGetter(relationshipStore);\n+    this.typeCounts = typeDistribution.newClient();\n+    this.prepareIdSequence = PrepareIdSequence.of(doubleRecordUnits).apply(stores.getRelationshipStore());\n+    relationshipRecord.setInUse(true);\n+  }\n+\n+  @Override\n+  protected PrimitiveRecord primitiveRecord()\n+  {\n+    return relationshipRecord;\n+  }\n+\n+  @Override\n+  public boolean startId(long id)\n+  {\n+    relationshipRecord.setFirstNode(id);\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean startId(Object id, Group group)\n+  {\n+    this.startId = id;\n+    this.startIdGroup = group;\n+\n+    long nodeId = nodeId(id, group);\n+    relationshipRecord.setFirstNode(nodeId);\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean endId(long id)\n+  {\n+    relationshipRecord.setSecondNode(id);\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean endId(Object id, Group group)\n+  {\n+    this.endId = id;\n+    this.endIdGroup = group;\n+\n+    long nodeId = nodeId(id, group);\n+    relationshipRecord.setSecondNode(nodeId);\n+    return true;\n+  }\n+\n+  private long nodeId(Object id, Group group)\n+  {\n+    long nodeId = idMapper.get(id, group);\n+    if (nodeId == ID_NOT_FOUND)\n     {\n-        relationshipRecord.setSecondNode( id );\n-        return true;\n+      relationshipRecord.setInUse(false);\n+      return ID_NOT_FOUND;\n     }\n \n-    @Override\n-    public boolean endId( Object id, Group group )\n+    return nodeId;\n+  }\n+\n+  @Override\n+  public boolean type(int typeId)\n+  {\n+    relationshipRecord.setType(typeId);\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean type(String type)\n+  {\n+    this.type = type;\n+    int typeId = relationshipTypeTokenRepository.getOrCreateId(type);\n+    return type(typeId);\n+  }\n+\n+  @Override\n+  public void endOfEntity()\n+  {\n+    if (relationshipRecord.inUse() &&\n+        relationshipRecord.getFirstNode() != ID_NOT_FOUND &&\n+        relationshipRecord.getSecondNode() != ID_NOT_FOUND &&\n+        relationshipRecord.getType() != -1)\n     {\n-        this.endId = id;\n-        this.endIdGroup = group;\n-\n-        long nodeId = nodeId( id, group );\n-        relationshipRecord.setSecondNode( nodeId );\n-        return true;\n-    }\n-\n-    private long nodeId( Object id, Group group )\n+      relationshipRecord.setId(relationshipIds.next());\n+      if (doubleRecordUnits)\n+      {\n+        // simply reserve one id for this relationship to grow during linking stage\n+        relationshipIds.next();\n+      }\n+      relationshipRecord.setNextProp(createAndWritePropertyChain());\n+      relationshipRecord.setFirstInFirstChain(false);\n+      relationshipRecord.setFirstInSecondChain(false);\n+      relationshipRecord.setFirstPrevRel(Record.NO_NEXT_RELATIONSHIP.intValue());\n+      relationshipRecord.setSecondPrevRel(Record.NO_NEXT_RELATIONSHIP.intValue());\n+      relationshipStore.prepareForCommit(relationshipRecord, prepareIdSequence.apply(relationshipRecord.getId()));\n+      relationshipStore.updateRecord(relationshipRecord);\n+      relationshipCount++;\n+      typeCounts.increment(relationshipRecord.getType());\n+    } else\n     {\n-        long nodeId = idMapper.get( id, group );\n-        if ( nodeId == ID_NOT_FOUND )\n+      if (validateRelationshipData)\n+      {\n+        validateNode(startId, Type.START_ID);\n+        validateNode(endId, Type.END_ID);\n+        if (relationshipRecord.getType() == -1)\n         {\n-            relationshipRecord.setInUse( false );\n-            return ID_NOT_FOUND;\n+          throw new MissingRelationshipDataException(Type.TYPE,\n+              relationshipDataString() + \" is missing \" + Type.TYPE + \" field\");\n         }\n-\n-        return nodeId;\n-    }\n-\n-    @Override\n-    public boolean type( int typeId )\n-    {\n-        relationshipRecord.setType( typeId );\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean type( String type )\n-    {\n-        this.type = type;\n-        int typeId = relationshipTypeTokenRepository.getOrCreateId( type );\n-        return type( typeId );\n-    }\n-\n-    @Override\n-    public void endOfEntity()\n-    {\n-        if ( relationshipRecord.inUse() &&\n-                relationshipRecord.getFirstNode() != ID_NOT_FOUND &&\n-                relationshipRecord.getSecondNode() != ID_NOT_FOUND &&\n-                relationshipRecord.getType() != -1 )\n-        {\n-            relationshipRecord.setId( relationshipIds.next() );\n-            if ( doubleRecordUnits )\n-            {\n-                // simply reserve one id for this relationship to grow during linking stage\n-                relationshipIds.next();\n-            }\n-            relationshipRecord.setNextProp( createAndWritePropertyChain() );\n-            relationshipRecord.setFirstInFirstChain( false );\n-            relationshipRecord.setFirstInSecondChain( false );\n-            relationshipRecord.setFirstPrevRel( Record.NO_NEXT_RELATIONSHIP.intValue() );\n-            relationshipRecord.setSecondPrevRel( Record.NO_NEXT_RELATIONSHIP.intValue() );\n-            relationshipStore.prepareForCommit( relationshipRecord, prepareIdSequence.apply( relationshipRecord.getId() ) );\n-            relationshipStore.updateRecord( relationshipRecord );\n-            relationshipCount++;\n-            typeCounts.increment( relationshipRecord.getType() );\n-        }\n-        else\n-        {\n-            if ( validateRelationshipData )\n-            {\n-                validateNode( startId, Type.START_ID );\n-                validateNode( endId, Type.END_ID );\n-                if ( relationshipRecord.getType() == -1 )\n-                {\n-                    throw new MissingRelationshipDataException( Type.TYPE,\n-                            relationshipDataString() + \" is missing \" + Type.TYPE + \" field\" );\n-                }\n-            }\n-            badCollector.collectBadRelationship( startId, group( startIdGroup ).name(), type, endId, group( endIdGroup ).name(),\n-                    relationshipRecord.getFirstNode() == ID_NOT_FOUND ? startId : endId );\n-        }\n-\n-        relationshipRecord.clear();\n-        relationshipRecord.setInUse( true );\n-        startId = null;\n-        startIdGroup = null;\n-        endId = null;\n-        endIdGroup = null;\n-        type = null;\n-        super.endOfEntity();\n-    }\n-\n-    private Group group( Group group )\n-    {\n-        return group != null ? group : Group.GLOBAL;\n-    }\n-\n-    private void validateNode( Object id, Type fieldType )\n-    {\n-        if ( id == null )\n-        {\n-            throw new MissingRelationshipDataException( fieldType, relationshipDataString() +\n-                    \" is missing \" + fieldType + \" field\" );\n-        }\n-    }\n-\n-    private String relationshipDataString()\n-    {\n-        return format( \"start:%s (%s) type:%s end:%s (%s)\",\n-                startId, group( startIdGroup ).name(), type, endId, group( endIdGroup ).name() );\n+      }\n+      badCollector.collectBadRelationship(startId, group(startIdGroup).name(), type, endId, group(endIdGroup).name(),\n+          relationshipRecord.getFirstNode() == ID_NOT_FOUND ? startId : endId);\n     }\n \n-    @Override\n-    public void close()\n+    relationshipRecord.clear();\n+    relationshipRecord.setInUse(true);\n+    startId = null;\n+    startIdGroup = null;\n+    endId = null;\n+    endIdGroup = null;\n+    type = null;\n+    super.endOfEntity();\n+  }\n+\n+  private Group group(Group group)\n+  {\n+    return group != null ? group : Group.GLOBAL;\n+  }\n+\n+  private void validateNode(Object id, Type fieldType)\n+  {\n+    if (id == null)\n     {\n-        super.close();\n-        typeCounts.close();\n-        monitor.relationshipsImported( relationshipCount );\n+      throw new MissingRelationshipDataException(fieldType, relationshipDataString() +\n+          \" is missing \" + fieldType + \" field\");\n     }\n+  }\n+\n+  private String relationshipDataString()\n+  {\n+    return format(\"start:%s (%s) type:%s end:%s (%s)\",\n+        startId, group(startIdGroup).name(), type, endId, group(endIdGroup).name());\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    super.close();\n+    typeCounts.close();\n+    monitor.relationshipsImported(relationshipCount);\n+  }\n }\n",
            "diff_size": 258
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "160",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4064/RelationshipImporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4064/RelationshipImporter.java\nindex 79589d68ad4..0a82963996b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4064/RelationshipImporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4064/RelationshipImporter.java\n@@ -157,8 +157,7 @@ public class RelationshipImporter extends EntityImporter\n     @Override\n     public void endOfEntity()\n     {\n-        if ( relationshipRecord.inUse() &&\n-                relationshipRecord.getFirstNode() != ID_NOT_FOUND &&\n+        if ( relationshipRecord.inUse() &&relationshipRecord.getFirstNode() != ID_NOT_FOUND &&\n                 relationshipRecord.getSecondNode() != ID_NOT_FOUND &&\n                 relationshipRecord.getType() != -1 )\n         {\n@@ -188,10 +187,9 @@ public class RelationshipImporter extends EntityImporter\n                 {\n                     throw new MissingRelationshipDataException( Type.TYPE,\n                             relationshipDataString() + \" is missing \" + Type.TYPE + \" field\" );\n-                }\n+    }\n             }\n-            badCollector.collectBadRelationship( startId, group( startIdGroup ).name(), type, endId, group( endIdGroup ).name(),\n-                    relationshipRecord.getFirstNode() == ID_NOT_FOUND ? startId : endId );\n+            badCollector.collectBadRelationship( startId, group( startIdGroup ).name(), type, endId, group( endIdGroup ).name(), relationshipRecord.getFirstNode() == ID_NOT_FOUND ? startId : endId );\n         }\n \n         relationshipRecord.clear();\n@@ -213,9 +211,8 @@ public class RelationshipImporter extends EntityImporter\n     {\n         if ( id == null )\n         {\n-            throw new MissingRelationshipDataException( fieldType, relationshipDataString() +\n-                    \" is missing \" + fieldType + \" field\" );\n-        }\n+            throw new MissingRelationshipDataException( fieldType, relationshipDataString() + \" is missing \" + fieldType + \" field\" );\n+    }\n     }\n \n     private String relationshipDataString()\n@@ -231,4 +228,4 @@ public class RelationshipImporter extends EntityImporter\n         typeCounts.close();\n         monitor.relationshipsImported( relationshipCount );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}