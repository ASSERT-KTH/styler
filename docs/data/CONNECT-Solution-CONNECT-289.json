{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "289",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.policyengine.adapter.pip.proxy;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.common.nhinccommonadapter.PatientPreferencesType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/289/AdapterPIPProxyOptInNoOpImpl.java\nindex cdd35884cff..53a213fecff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/289/AdapterPIPProxyOptInNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pip.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/289/AdapterPIPProxyOptInNoOpImpl.java\nindex cdd35884cff..77382545182 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/289/AdapterPIPProxyOptInNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pip.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -43,75 +44,75 @@ import org.slf4j.LoggerFactory;\n  * @author Les Westberg\n  */\n public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n-    private static final Logger LOG = LoggerFactory.getLogger(AdapterPIPProxyOptInNoOpImpl.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AdapterPIPProxyOptInNoOpImpl.class);\n \n-    /**\n-     * NO-OP implementation of the RetrievePtConsentByPtId operation. It will return a message with the same assigning\n-     * authority and patient Id that was passed and return an OptIn of false.\n-     *\n-     * @param request The assigning authority and patient ID of the patient.\n-     * @return A response containing the given assigning authority and patient ID along with OptIn set to false.\n-     */\n-    @Override\n-    public RetrievePtConsentByPtIdResponseType retrievePtConsentByPtId(RetrievePtConsentByPtIdRequestType request,\n-            AssertionType assertion) {\n-        LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n-        RetrievePtConsentByPtIdResponseType oResponse = new RetrievePtConsentByPtIdResponseType();\n-        PatientPreferencesType oPref = new PatientPreferencesType();\n-        oResponse.setPatientPreferences(oPref);\n+  /**\n+   * NO-OP implementation of the RetrievePtConsentByPtId operation. It will return a message with the same assigning\n+   * authority and patient Id that was passed and return an OptIn of false.\n+   *\n+   * @param request The assigning authority and patient ID of the patient.\n+   * @return A response containing the given assigning authority and patient ID along with OptIn set to false.\n+   */\n+  @Override\n+  public RetrievePtConsentByPtIdResponseType retrievePtConsentByPtId(RetrievePtConsentByPtIdRequestType request,\n+                                                                     AssertionType assertion) {\n+    LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n+    RetrievePtConsentByPtIdResponseType oResponse = new RetrievePtConsentByPtIdResponseType();\n+    PatientPreferencesType oPref = new PatientPreferencesType();\n+    oResponse.setPatientPreferences(oPref);\n \n-        if ((request != null) && (request.getAssigningAuthority() != null)) {\n-            oPref.setAssigningAuthority(request.getAssigningAuthority());\n-        } else {\n-            oPref.setAssigningAuthority(\"\");\n-        }\n+    if ((request != null) && (request.getAssigningAuthority() != null)) {\n+      oPref.setAssigningAuthority(request.getAssigningAuthority());\n+    } else {\n+      oPref.setAssigningAuthority(\"\");\n+    }\n \n-        if ((request != null) && (request.getPatientId() != null)) {\n-            oPref.setPatientId(request.getPatientId());\n-        } else {\n-            oPref.setPatientId(\"\");\n-        }\n+    if ((request != null) && (request.getPatientId() != null)) {\n+      oPref.setPatientId(request.getPatientId());\n+    } else {\n+      oPref.setPatientId(\"\");\n+    }\n \n-        oPref.setOptIn(true);\n+    oPref.setOptIn(true);\n \n-        LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n-        return oResponse;\n-    }\n+    LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n+    return oResponse;\n+  }\n \n-    /**\n-     * NO-Op implementation of the RetrievePtConsentByDocId operation. It will return an empty message with the OptIn\n-     * set to false.\n-     *\n-     * @param request The patient doc ID information for the patient.\n-     * @return An empty message with the OptIn set to false.\n-     */\n-    @Override\n-    public RetrievePtConsentByPtDocIdResponseType retrievePtConsentByPtDocId(\n-            RetrievePtConsentByPtDocIdRequestType request, AssertionType assertion) {\n-        LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtDocId\");\n-        RetrievePtConsentByPtDocIdResponseType oResponse = new RetrievePtConsentByPtDocIdResponseType();\n-        PatientPreferencesType oPref = new PatientPreferencesType();\n-        oResponse.setPatientPreferences(oPref);\n-        oPref.setAssigningAuthority(\"\");\n-        oPref.setPatientId(\"\");\n-        oPref.setOptIn(true);\n-        LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtDocId\");\n-        return oResponse;\n-    }\n+  /**\n+   * NO-Op implementation of the RetrievePtConsentByDocId operation. It will return an empty message with the OptIn\n+   * set to false.\n+   *\n+   * @param request The patient doc ID information for the patient.\n+   * @return An empty message with the OptIn set to false.\n+   */\n+  @Override\n+  public RetrievePtConsentByPtDocIdResponseType retrievePtConsentByPtDocId(\n+      RetrievePtConsentByPtDocIdRequestType request, AssertionType assertion) {\n+    LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtDocId\");\n+    RetrievePtConsentByPtDocIdResponseType oResponse = new RetrievePtConsentByPtDocIdResponseType();\n+    PatientPreferencesType oPref = new PatientPreferencesType();\n+    oResponse.setPatientPreferences(oPref);\n+    oPref.setAssigningAuthority(\"\");\n+    oPref.setPatientId(\"\");\n+    oPref.setOptIn(true);\n+    LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtDocId\");\n+    return oResponse;\n+  }\n \n-    /**\n-     * NOOP implememtation of the storePtConsent operation. This does nothing but still returns \"SUCCESS\".\n-     *\n-     * @param request Patient consent preferenes to be stored.\n-     * @return Always returns \"SUCCESS\".\n-     */\n-    @Override\n-    public StorePtConsentResponseType storePtConsent(StorePtConsentRequestType request, AssertionType assertion) {\n-        LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.storePtConsent\");\n-        StorePtConsentResponseType oResponse = new StorePtConsentResponseType();\n-        oResponse.setStatus(\"SUCCESS\");\n-        LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.storePtConsent\");\n-        return oResponse;\n-    }\n+  /**\n+   * NOOP implememtation of the storePtConsent operation. This does nothing but still returns \"SUCCESS\".\n+   *\n+   * @param request Patient consent preferenes to be stored.\n+   * @return Always returns \"SUCCESS\".\n+   */\n+  @Override\n+  public StorePtConsentResponseType storePtConsent(StorePtConsentRequestType request, AssertionType assertion) {\n+    LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.storePtConsent\");\n+    StorePtConsentResponseType oResponse = new StorePtConsentResponseType();\n+    oResponse.setStatus(\"SUCCESS\");\n+    LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.storePtConsent\");\n+    return oResponse;\n+  }\n \n }\n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/289/AdapterPIPProxyOptInNoOpImpl.java\nindex cdd35884cff..8277807691a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/289/AdapterPIPProxyOptInNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pip.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -53,14 +54,12 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n      * @return A response containing the given assigning authority and patient ID along with OptIn set to false.\n      */\n     @Override\n-    public RetrievePtConsentByPtIdResponseType retrievePtConsentByPtId(RetrievePtConsentByPtIdRequestType request,\n-            AssertionType assertion) {\n+    public RetrievePtConsentByPtIdResponseType retrievePtConsentByPtId(RetrievePtConsentByPtIdRequestType request, AssertionType assertion) {\n         LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n         RetrievePtConsentByPtIdResponseType oResponse = new RetrievePtConsentByPtIdResponseType();\n         PatientPreferencesType oPref = new PatientPreferencesType();\n         oResponse.setPatientPreferences(oPref);\n-\n-        if ((request != null) && (request.getAssigningAuthority() != null)) {\n+if ((request != null) && (request.getAssigningAuthority() != null)) {\n             oPref.setAssigningAuthority(request.getAssigningAuthority());\n         } else {\n             oPref.setAssigningAuthority(\"\");\n@@ -75,7 +74,8 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n         oPref.setOptIn(true);\n \n         LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n-        return oResponse;\n+\n+return oResponse;\n     }\n \n     /**\n@@ -96,7 +96,8 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n         oPref.setPatientId(\"\");\n         oPref.setOptIn(true);\n         LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtDocId\");\n-        return oResponse;\n+\n+return oResponse;\n     }\n \n     /**\n@@ -111,7 +112,8 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n         StorePtConsentResponseType oResponse = new StorePtConsentResponseType();\n         oResponse.setStatus(\"SUCCESS\");\n         LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.storePtConsent\");\n-        return oResponse;\n+\n+return oResponse;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "76",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/289/AdapterPIPProxyOptInNoOpImpl.java\nindex cdd35884cff..46ef3fa8dc1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/289/AdapterPIPProxyOptInNoOpImpl.java\n@@ -42,7 +42,10 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Les Westberg\n  */\n+\n+\n public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(AdapterPIPProxyOptInNoOpImpl.class);\n \n     /**\n@@ -52,28 +55,31 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n      * @param request The assigning authority and patient ID of the patient.\n      * @return A response containing the given assigning authority and patient ID along with OptIn set to false.\n      */\n+\n+\n     @Override\n-    public RetrievePtConsentByPtIdResponseType retrievePtConsentByPtId(RetrievePtConsentByPtIdRequestType request,\n-            AssertionType assertion) {\n+    public RetrievePtConsentByPtIdResponseType retrievePtConsentByPtId(RetrievePtConsentByPtIdRequestType request, AssertionType assertion) {\n         LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n         RetrievePtConsentByPtIdResponseType oResponse = new RetrievePtConsentByPtIdResponseType();\n         PatientPreferencesType oPref = new PatientPreferencesType();\n         oResponse.setPatientPreferences(oPref);\n-\n-        if ((request != null) && (request.getAssigningAuthority() != null)) {\n+        if((request != null) && (request.getAssigningAuthority() != null)) {\n             oPref.setAssigningAuthority(request.getAssigningAuthority());\n-        } else {\n-            oPref.setAssigningAuthority(\"\");\n         }\n \n-        if ((request != null) && (request.getPatientId() != null)) {\n+\n+else {\n+            oPref.setAssigningAuthority(\"\");\n+        }\n+        if((request != null) && (request.getPatientId() != null)) {\n             oPref.setPatientId(request.getPatientId());\n-        } else {\n-            oPref.setPatientId(\"\");\n         }\n \n-        oPref.setOptIn(true);\n \n+else {\n+            oPref.setPatientId(\"\");\n+        }\n+        oPref.setOptIn(true);\n         LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtId\");\n         return oResponse;\n     }\n@@ -85,9 +91,10 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n      * @param request The patient doc ID information for the patient.\n      * @return An empty message with the OptIn set to false.\n      */\n+\n+\n     @Override\n-    public RetrievePtConsentByPtDocIdResponseType retrievePtConsentByPtDocId(\n-            RetrievePtConsentByPtDocIdRequestType request, AssertionType assertion) {\n+    public RetrievePtConsentByPtDocIdResponseType retrievePtConsentByPtDocId(RetrievePtConsentByPtDocIdRequestType request, AssertionType assertion) {\n         LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.retrievePtConsentByPtDocId\");\n         RetrievePtConsentByPtDocIdResponseType oResponse = new RetrievePtConsentByPtDocIdResponseType();\n         PatientPreferencesType oPref = new PatientPreferencesType();\n@@ -105,6 +112,8 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n      * @param request Patient consent preferenes to be stored.\n      * @return Always returns \"SUCCESS\".\n      */\n+\n+\n     @Override\n     public StorePtConsentResponseType storePtConsent(StorePtConsentRequestType request, AssertionType assertion) {\n         LOG.trace(\"Begin AdapterPIPProxyOptInNoOpImpl.storePtConsent\");\n@@ -113,5 +122,4 @@ public class AdapterPIPProxyOptInNoOpImpl implements AdapterPIPProxy {\n         LOG.trace(\"End AdapterPIPProxyOptInNoOpImpl.storePtConsent\");\n         return oResponse;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/289/AdapterPIPProxyOptInNoOpImpl.java\nindex cdd35884cff..f1ff502b8eb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/289/AdapterPIPProxyOptInNoOpImpl.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.policyengine.adapter.pip.proxy;\n-\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n import gov.hhs.fha.nhinc.common.nhinccommonadapter.PatientPreferencesType;\n import gov.hhs.fha.nhinc.common.nhinccommonadapter.RetrievePtConsentByPtDocIdRequestType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/289/AdapterPIPProxyOptInNoOpImpl.java\nindex cdd35884cff..53a213fecff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/289/AdapterPIPProxyOptInNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/289/AdapterPIPProxyOptInNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pip.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}