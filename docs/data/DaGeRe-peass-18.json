{
    "project_name": "DaGeRe-peass",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 205).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   private final EnvironmentVariables env;\n\n   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n      this.dependencyConfig = dependencyConfig;\n      this.executionConfig = executionConfig;\n      this.folders = folders;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/18/ContinuousDependencyReader.java\nindex 29a5575ea1c..5d7bcf3bae5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/18/ContinuousDependencyReader.java\n@@ -32,7 +32,7 @@ public class ContinuousDependencyReader {\n    private final File dependencyFile;\n    private final EnvironmentVariables env;\n \n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n+\t\t\tpublic ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n       this.dependencyConfig = dependencyConfig;\n       this.executionConfig = executionConfig;\n       this.folders = folders;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/18/ContinuousDependencyReader.java\nindex 29a5575ea1c..6d3e4badef7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/18/ContinuousDependencyReader.java\n@@ -24,107 +24,108 @@ import de.peass.vcs.VersionIteratorGit;\n \n public class ContinuousDependencyReader {\n \n-   private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n-\n-   private final DependencyConfig dependencyConfig;\n-   private final ExecutionConfig executionConfig;\n-   private final PeASSFolders folders;\n-   private final File dependencyFile;\n-   private final EnvironmentVariables env;\n-\n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n-      this.dependencyConfig = dependencyConfig;\n-      this.executionConfig = executionConfig;\n-      this.folders = folders;\n-      this.dependencyFile = dependencyFile;\n-      this.env = env;\n-   }\n-\n-   Dependencies getDependencies(final VersionIterator iterator, final String url)\n-         throws Exception {\n-      Dependencies dependencies;\n-\n-      final VersionKeeper noChanges = new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n-\n-      if (!dependencyFile.exists()) {\n-         dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-      } else {\n-         dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n-         VersionComparator.setDependencies(dependencies);\n-\n-         if (dependencies.getVersions().size() > 0) {\n-            partiallyLoadDependencies(dependencies);\n-         } else {\n-            dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-         }\n-      }\n+  private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n+\n+  private final DependencyConfig dependencyConfig;\n+  private final ExecutionConfig executionConfig;\n+  private final PeASSFolders folders;\n+  private final File dependencyFile;\n+  private final EnvironmentVariables env;\n+\n+  public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile,\n+                                    final EnvironmentVariables env) {\n+    this.dependencyConfig = dependencyConfig;\n+    this.executionConfig = executionConfig;\n+    this.folders = folders;\n+    this.dependencyFile = dependencyFile;\n+    this.env = env;\n+  }\n+\n+  Dependencies getDependencies(final VersionIterator iterator, final String url)\n+      throws Exception {\n+    Dependencies dependencies;\n+\n+    final VersionKeeper noChanges = new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n+\n+    if (!dependencyFile.exists()) {\n+      dependencies = fullyLoadDependencies(url, iterator, noChanges);\n+    } else {\n+      dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n       VersionComparator.setDependencies(dependencies);\n \n-      return dependencies;\n-   }\n-\n-   public VersionIterator getIterator(final String lastVersionName) {\n-      String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n-      if (versionName.equals(lastVersionName)) {\n-         return null;\n-      }\n-      GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n-      GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n-      \n-\n-      List<GitCommit> commits = new LinkedList<>();\n-      commits.add(lastAnalyzedCommit);\n-      commits.add(currentCommit);\n-      LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n-      VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n-      return newIterator;\n-   }\n-\n-   private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n-      final String lastVersionName = dependencies.getNewestVersion();\n-      \n-      VersionIterator newIterator = getIterator(lastVersionName);\n-      if (newIterator != null) {\n-         executePartialRTS(dependencies, newIterator);\n-      }\n-   }\n-\n-   private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n-      File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n-      LOG.info(\"Executing regression test selection update (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n-\n-      try (LogRedirector director = new LogRedirector(logFile)) {\n-         DependencyReader reader = new DependencyReader(dependencyConfig, folders.getProjectFolder(), dependencyFile, dependencies.getUrl(), newIterator, executionConfig, env);\n-         newIterator.goTo0thCommit();\n-\n-         reader.readCompletedVersions(dependencies);\n-         reader.readDependencies();\n-      }\n-   }\n-\n-   public File getDependencyreadingFolder() {\n-      File folder = new File(dependencyFile.getParentFile(), \"dependencyreading\");\n-      if (!folder.exists()) {\n-         folder.mkdirs();\n+      if (dependencies.getVersions().size() > 0) {\n+        partiallyLoadDependencies(dependencies);\n+      } else {\n+        dependencies = fullyLoadDependencies(url, iterator, noChanges);\n       }\n-      return folder;\n-   }\n-\n-   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws Exception {\n-      File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n-      LOG.info(\"Executing regression test selection (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n-\n-      try (LogRedirector director = new LogRedirector(logFile)) {\n-         final DependencyReader reader = new DependencyReader(dependencyConfig, folders, dependencyFile, url, iterator, nonChanges, executionConfig, env);\n-         iterator.goToPreviousCommit();\n-         if (!reader.readInitialVersion()) {\n-            LOG.error(\"Analyzing first version was not possible\");\n-         } else {\n-            reader.readDependencies();\n-         }\n-         Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n-         return dependencies;\n+    }\n+    VersionComparator.setDependencies(dependencies);\n+\n+    return dependencies;\n+  }\n+\n+  public VersionIterator getIterator(final String lastVersionName) {\n+    String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n+    if (versionName.equals(lastVersionName)) {\n+      return null;\n+    }\n+    GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n+    GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n+\n+\n+    List<GitCommit> commits = new LinkedList<>();\n+    commits.add(lastAnalyzedCommit);\n+    commits.add(currentCommit);\n+    LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n+    VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n+    return newIterator;\n+  }\n+\n+  private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n+    final String lastVersionName = dependencies.getNewestVersion();\n+\n+    VersionIterator newIterator = getIterator(lastVersionName);\n+    if (newIterator != null) {\n+      executePartialRTS(dependencies, newIterator);\n+    }\n+  }\n+\n+  private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n+    File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n+    LOG.info(\"Executing regression test selection update (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n+\n+    try (LogRedirector director = new LogRedirector(logFile)) {\n+      DependencyReader reader = new DependencyReader(dependencyConfig, folders.getProjectFolder(), dependencyFile, dependencies.getUrl(), newIterator, executionConfig, env);\n+      newIterator.goTo0thCommit();\n+\n+      reader.readCompletedVersions(dependencies);\n+      reader.readDependencies();\n+    }\n+  }\n+\n+  public File getDependencyreadingFolder() {\n+    File folder = new File(dependencyFile.getParentFile(), \"dependencyreading\");\n+    if (!folder.exists()) {\n+      folder.mkdirs();\n+    }\n+    return folder;\n+  }\n+\n+  private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n+      throws Exception {\n+    File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n+    LOG.info(\"Executing regression test selection (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n+\n+    try (LogRedirector director = new LogRedirector(logFile)) {\n+      final DependencyReader reader = new DependencyReader(dependencyConfig, folders, dependencyFile, url, iterator, nonChanges, executionConfig, env);\n+      iterator.goToPreviousCommit();\n+      if (!reader.readInitialVersion()) {\n+        LOG.error(\"Analyzing first version was not possible\");\n+      } else {\n+        reader.readDependencies();\n       }\n-   }\n+      Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n+      return dependencies;\n+    }\n+  }\n }\n",
            "diff_size": 149
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/18/ContinuousDependencyReader.java\nindex 29a5575ea1c..563027791f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/18/ContinuousDependencyReader.java\n@@ -24,7 +24,7 @@ import de.peass.vcs.VersionIteratorGit;\n \n public class ContinuousDependencyReader {\n \n-   private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n+\tprivate static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n \n    private final DependencyConfig dependencyConfig;\n    private final ExecutionConfig executionConfig;\n@@ -33,98 +33,93 @@ public class ContinuousDependencyReader {\n    private final EnvironmentVariables env;\n \n    public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n-      this.dependencyConfig = dependencyConfig;\n+\tthis.dependencyConfig = dependencyConfig;\n       this.executionConfig = executionConfig;\n       this.folders = folders;\n       this.dependencyFile = dependencyFile;\n       this.env = env;\n-   }\n+\t}\n \n-   Dependencies getDependencies(final VersionIterator iterator, final String url)\n-         throws Exception {\n-      Dependencies dependencies;\n+   Dependencies getDependencies(final VersionIterator iterator, final String url) throws Exception {\n+\tDependencies dependencies;\n \n       final VersionKeeper noChanges = new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n \n       if (!dependencyFile.exists()) {\n-         dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-      } else {\n-         dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n+\tdependencies = fullyLoadDependencies(url, iterator, noChanges);\n+\t} else {\n+\tdependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n          VersionComparator.setDependencies(dependencies);\n \n          if (dependencies.getVersions().size() > 0) {\n-            partiallyLoadDependencies(dependencies);\n-         } else {\n-            dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-         }\n-      }\n+\tpartiallyLoadDependencies(dependencies);\n+\t} else {\n+\tdependencies = fullyLoadDependencies(url, iterator, noChanges);\n+\t}\n+\t}\n       VersionComparator.setDependencies(dependencies);\n \n       return dependencies;\n-   }\n+\t}\n \n    public VersionIterator getIterator(final String lastVersionName) {\n-      String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n+\tString versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n       if (versionName.equals(lastVersionName)) {\n-         return null;\n-      }\n+\treturn null;\n+\t}\n       GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n       GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n-      \n-\n-      List<GitCommit> commits = new LinkedList<>();\n-      commits.add(lastAnalyzedCommit);\n+List<GitCommit> commits = new LinkedList<>();\n+commits.add(lastAnalyzedCommit);\n       commits.add(currentCommit);\n       LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n       VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n       return newIterator;\n-   }\n+\t}\n \n    private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n-      final String lastVersionName = dependencies.getNewestVersion();\n-      \n-      VersionIterator newIterator = getIterator(lastVersionName);\n-      if (newIterator != null) {\n-         executePartialRTS(dependencies, newIterator);\n-      }\n-   }\n+\tfinal String lastVersionName = dependencies.getNewestVersion();\n+VersionIterator newIterator = getIterator(lastVersionName);\n+if (newIterator != null) {\n+\texecutePartialRTS(dependencies, newIterator);\n+\t}\n+\t}\n \n    private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n-      File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n+\tFile logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n       LOG.info(\"Executing regression test selection update (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n \n       try (LogRedirector director = new LogRedirector(logFile)) {\n-         DependencyReader reader = new DependencyReader(dependencyConfig, folders.getProjectFolder(), dependencyFile, dependencies.getUrl(), newIterator, executionConfig, env);\n+\tDependencyReader reader = new DependencyReader(dependencyConfig, folders.getProjectFolder(), dependencyFile, dependencies.getUrl(), newIterator, executionConfig, env);\n          newIterator.goTo0thCommit();\n \n          reader.readCompletedVersions(dependencies);\n          reader.readDependencies();\n-      }\n-   }\n+\t}\n+\t}\n \n    public File getDependencyreadingFolder() {\n-      File folder = new File(dependencyFile.getParentFile(), \"dependencyreading\");\n+\tFile folder = new File(dependencyFile.getParentFile(), \"dependencyreading\");\n       if (!folder.exists()) {\n-         folder.mkdirs();\n-      }\n+\tfolder.mkdirs();\n+\t}\n       return folder;\n-   }\n+\t}\n \n-   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws Exception {\n-      File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n+   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges) throws Exception {\n+\tFile logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n       LOG.info(\"Executing regression test selection (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n \n       try (LogRedirector director = new LogRedirector(logFile)) {\n-         final DependencyReader reader = new DependencyReader(dependencyConfig, folders, dependencyFile, url, iterator, nonChanges, executionConfig, env);\n+\tfinal DependencyReader reader = new DependencyReader(dependencyConfig, folders, dependencyFile, url, iterator, nonChanges, executionConfig, env);\n          iterator.goToPreviousCommit();\n          if (!reader.readInitialVersion()) {\n-            LOG.error(\"Analyzing first version was not possible\");\n-         } else {\n-            reader.readDependencies();\n-         }\n+\tLOG.error(\"Analyzing first version was not possible\");\n+\t} else {\n+\treader.readDependencies();\n+\t}\n          Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n          return dependencies;\n-      }\n-   }\n-}\n+\t}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/18/ContinuousDependencyReader.java\nindex 29a5575ea1c..1da71c693f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/18/ContinuousDependencyReader.java\n@@ -4,10 +4,8 @@ import java.io.File;\n import java.io.FileNotFoundException;\n import java.util.LinkedList;\n import java.util.List;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-\n import de.peass.config.DependencyConfig;\n import de.peass.config.ExecutionConfig;\n import de.peass.dependency.PeASSFolders;\n@@ -22,109 +20,97 @@ import de.peass.vcs.GitUtils;\n import de.peass.vcs.VersionIterator;\n import de.peass.vcs.VersionIteratorGit;\n \n-public class ContinuousDependencyReader {\n-\n-   private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n-\n-   private final DependencyConfig dependencyConfig;\n-   private final ExecutionConfig executionConfig;\n-   private final PeASSFolders folders;\n-   private final File dependencyFile;\n-   private final EnvironmentVariables env;\n-\n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n-      this.dependencyConfig = dependencyConfig;\n-      this.executionConfig = executionConfig;\n-      this.folders = folders;\n-      this.dependencyFile = dependencyFile;\n-      this.env = env;\n-   }\n-\n-   Dependencies getDependencies(final VersionIterator iterator, final String url)\n-         throws Exception {\n-      Dependencies dependencies;\n-\n-      final VersionKeeper noChanges = new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n-\n-      if (!dependencyFile.exists()) {\n-         dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-      } else {\n-         dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n-         VersionComparator.setDependencies(dependencies);\n-\n-         if (dependencies.getVersions().size() > 0) {\n-            partiallyLoadDependencies(dependencies);\n-         } else {\n-            dependencies = fullyLoadDependencies(url, iterator, noChanges);\n-         }\n-      }\n-      VersionComparator.setDependencies(dependencies);\n-\n-      return dependencies;\n-   }\n \n-   public VersionIterator getIterator(final String lastVersionName) {\n-      String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n-      if (versionName.equals(lastVersionName)) {\n-         return null;\n-      }\n-      GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n-      GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n-      \n-\n-      List<GitCommit> commits = new LinkedList<>();\n-      commits.add(lastAnalyzedCommit);\n-      commits.add(currentCommit);\n-      LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n-      VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n-      return newIterator;\n-   }\n-\n-   private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n-      final String lastVersionName = dependencies.getNewestVersion();\n-      \n-      VersionIterator newIterator = getIterator(lastVersionName);\n-      if (newIterator != null) {\n-         executePartialRTS(dependencies, newIterator);\n-      }\n-   }\n-\n-   private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n-      File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n-      LOG.info(\"Executing regression test selection update (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n-\n-      try (LogRedirector director = new LogRedirector(logFile)) {\n-         DependencyReader reader = new DependencyReader(dependencyConfig, folders.getProjectFolder(), dependencyFile, dependencies.getUrl(), newIterator, executionConfig, env);\n-         newIterator.goTo0thCommit();\n-\n-         reader.readCompletedVersions(dependencies);\n-         reader.readDependencies();\n-      }\n-   }\n-\n-   public File getDependencyreadingFolder() {\n-      File folder = new File(dependencyFile.getParentFile(), \"dependencyreading\");\n-      if (!folder.exists()) {\n-         folder.mkdirs();\n-      }\n-      return folder;\n+public class ContinuousDependencyReader {\n+ private static final Logger LOG = LogManager.getLogger(ContinuousDependencyReader.class);\n+ private final DependencyConfig dependencyConfig;\n+ private final ExecutionConfig executionConfig;\n+ private final PeASSFolders folders;\n+ private final File dependencyFile;\n+ private final EnvironmentVariables env;\n+\n+ public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n+  this.dependencyConfig = dependencyConfig;\n+  this.executionConfig = executionConfig;\n+  this.folders = folders;\n+  this.dependencyFile = dependencyFile;\n+  this.env = env;\n+ }\n+\n+ Dependencies getDependencies(final VersionIterator iterator, final String url) throws Exception {\n+  Dependencies dependencies;\n+  final VersionKeeper noChanges = new VersionKeeper(new File(dependencyFile.getParentFile(), \"nonChanges_\" + folders.getProjectName() + \".json\"));\n+  if (!dependencyFile.exists()) {\n+   dependencies = fullyLoadDependencies(url, iterator, noChanges);\n+  } else {\n+   dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n+   VersionComparator.setDependencies(dependencies);\n+   if (dependencies.getVersions().size() > 0) {\n+    partiallyLoadDependencies(dependencies);\n+   } else {\n+    dependencies = fullyLoadDependencies(url, iterator, noChanges);\n    }\n-\n-   private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges)\n-         throws Exception {\n-      File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n-      LOG.info(\"Executing regression test selection (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n-\n-      try (LogRedirector director = new LogRedirector(logFile)) {\n-         final DependencyReader reader = new DependencyReader(dependencyConfig, folders, dependencyFile, url, iterator, nonChanges, executionConfig, env);\n-         iterator.goToPreviousCommit();\n-         if (!reader.readInitialVersion()) {\n-            LOG.error(\"Analyzing first version was not possible\");\n-         } else {\n-            reader.readDependencies();\n-         }\n-         Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n-         return dependencies;\n-      }\n+  }\n+  VersionComparator.setDependencies(dependencies);\n+  return dependencies;\n+ }\n+\n+ public VersionIterator getIterator(final String lastVersionName) {\n+  String versionName = GitUtils.getName(executionConfig.getVersion() != null ? executionConfig.getVersion() : \"HEAD\", folders.getProjectFolder());\n+  if (versionName.equals(lastVersionName)) {\n+   return null;\n+  }\n+  GitCommit currentCommit = new GitCommit(versionName, \"\", \"\", \"\");\n+  GitCommit lastAnalyzedCommit = new GitCommit(executionConfig.getVersionOld() != null ? executionConfig.getVersionOld() : lastVersionName, \"\", \"\", \"\");\n+  List<GitCommit> commits = new LinkedList<>();\n+  commits.add(lastAnalyzedCommit);\n+  commits.add(currentCommit);\n+  LOG.info(\"Analyzing {} - {}\", lastAnalyzedCommit, currentCommit);\n+\n+  VersionIteratorGit newIterator = new VersionIteratorGit(folders.getProjectFolder(), commits, lastAnalyzedCommit);\n+  return newIterator;\n+ }\n+\n+ private void partiallyLoadDependencies(final Dependencies dependencies) throws FileNotFoundException, Exception {\n+  final String lastVersionName = dependencies.getNewestVersion();\n+  VersionIterator newIterator = getIterator(lastVersionName);\n+  if (newIterator != null) {\n+   executePartialRTS(dependencies, newIterator);\n+  }\n+ }\n+\n+ private void executePartialRTS(final Dependencies dependencies, final VersionIterator newIterator) throws FileNotFoundException {\n+  File logFile = new File(getDependencyreadingFolder(), newIterator.getTag() + \"_\" + newIterator.getPredecessor() + \".txt\");\n+  LOG.info(\"Executing regression test selection update (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n+  try (LogRedirector director = new LogRedirector(logFile)) {\n+   DependencyReader reader = new DependencyReader(dependencyConfig, folders.getProjectFolder(), dependencyFile, dependencies.getUrl(), newIterator, executionConfig, env);\n+   newIterator.goTo0thCommit();\n+   reader.readCompletedVersions(dependencies);\n+   reader.readDependencies();\n+  }\n+ }\n+\n+ public File getDependencyreadingFolder() {\n+  File folder = new File(dependencyFile.getParentFile(), \"dependencyreading\");\n+  if (!folder.exists()) {\n+   folder.mkdirs();\n+  }\n+  return folder;\n+ }\n+\n+ private Dependencies fullyLoadDependencies(final String url, final VersionIterator iterator, final VersionKeeper nonChanges) throws Exception {\n+  File logFile = new File(getDependencyreadingFolder(), iterator.getTag() + \"_\" + iterator.getPredecessor() + \".txt\");\n+  LOG.info(\"Executing regression test selection (step 1) - Log goes to {}\", logFile.getAbsolutePath());\n+  try (LogRedirector director = new LogRedirector(logFile)) {\n+   final DependencyReader reader = new DependencyReader(dependencyConfig, folders, dependencyFile, url, iterator, nonChanges, executionConfig, env);\n+   iterator.goToPreviousCommit();\n+   if (!reader.readInitialVersion()) {\n+    LOG.error(\"Analyzing first version was not possible\");\n+   } else {\n+    reader.readDependencies();\n    }\n-}\n+   Dependencies dependencies = Constants.OBJECTMAPPER.readValue(dependencyFile, Dependencies.class);\n+   return dependencies;\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 150
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/18/ContinuousDependencyReader.java\nindex 29a5575ea1c..5d7bcf3bae5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/18/ContinuousDependencyReader.java\n@@ -32,7 +32,7 @@ public class ContinuousDependencyReader {\n    private final File dependencyFile;\n    private final EnvironmentVariables env;\n \n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n+\t\t\tpublic ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n       this.dependencyConfig = dependencyConfig;\n       this.executionConfig = executionConfig;\n       this.folders = folders;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/18/ContinuousDependencyReader.java\nindex 29a5575ea1c..a6d21e7b65c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/18/ContinuousDependencyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/18/ContinuousDependencyReader.java\n@@ -31,8 +31,7 @@ public class ContinuousDependencyReader {\n    private final PeASSFolders folders;\n    private final File dependencyFile;\n    private final EnvironmentVariables env;\n-\n-   public ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n+\t\t\t\tpublic ContinuousDependencyReader(final DependencyConfig dependencyConfig, final ExecutionConfig executionConfig, final PeASSFolders folders, final File dependencyFile, final EnvironmentVariables env) {\n       this.dependencyConfig = dependencyConfig;\n       this.executionConfig = executionConfig;\n       this.folders = folders;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}