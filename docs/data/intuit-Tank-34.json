{
    "project_name": "intuit-Tank",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "68",
                "column": "67",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        } catch (CloneNotSupportedException e) {\n            throw new InternalError(\n                    \"CodeTemplate implementation not Cloneable: \" +\n                            getClass().getName());\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/34/AbstractCodeTemplate.java\nindex 6a3fa0033bf..e1b1b72c34a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/34/AbstractCodeTemplate.java\n@@ -65,8 +65,7 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n             return super.clone();\n         } catch (CloneNotSupportedException e) {\n             throw new InternalError(\n-                    \"CodeTemplate implementation not Cloneable: \" +\n-                            getClass().getName());\n+                    \"CodeTemplate implementation not Cloneable: \" + getClass().getName());\n         }\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "67",
                    "column": "55",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/34/AbstractCodeTemplate.java\nindex 6a3fa0033bf..586d1827876 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/34/AbstractCodeTemplate.java\n@@ -20,119 +20,114 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.\n  */\n+\n package org.fife.ui.rsyntaxtextarea.templates;\n \n /**\n  * A base class to build code templates on top of.\n- * \n+ *\n  * @author Robert Futrell\n  * @version 1.0\n  */\n public abstract class AbstractCodeTemplate implements CodeTemplate {\n \n-    /**\n-     * The ID of this template.\n-     */\n-    private String id;\n+  /**\n+   * The ID of this template.\n+   */\n+  private String id;\n \n-    /**\n-     * This no-arg constructor is required for serialization purposes.\n-     */\n-    public AbstractCodeTemplate() {\n-    }\n+  /**\n+   * This no-arg constructor is required for serialization purposes.\n+   */\n+  public AbstractCodeTemplate() {\n+  }\n \n-    /**\n-     * Creates a new template.\n-     * \n-     * @param id\n-     *            The ID for this template.\n-     * @throws IllegalArgumentException\n-     *             If <code>id</code> is <code>null</code>.\n-     */\n-    public AbstractCodeTemplate(String id) {\n-        setID(id);\n-    }\n+  /**\n+   * Creates a new template.\n+   *\n+   * @param id The ID for this template.\n+   * @throws IllegalArgumentException If <code>id</code> is <code>null</code>.\n+   */\n+  public AbstractCodeTemplate(String id) {\n+    setID(id);\n+  }\n \n-    /**\n-     * Creates a deep copy of this template.\n-     * \n-     * @return A deep copy of this template.\n-     */\n-    public Object clone() {\n-        // This method can't be abstract as compilers don't like concrete\n-        // subclassses calling super.clone() on an abstract super.\n-        try {\n-            return super.clone();\n-        } catch (CloneNotSupportedException e) {\n-            throw new InternalError(\n-                    \"CodeTemplate implementation not Cloneable: \" +\n-                            getClass().getName());\n-        }\n+  /**\n+   * Creates a deep copy of this template.\n+   *\n+   * @return A deep copy of this template.\n+   */\n+  public Object clone() {\n+    // This method can't be abstract as compilers don't like concrete\n+    // subclassses calling super.clone() on an abstract super.\n+    try {\n+      return super.clone();\n+    } catch (CloneNotSupportedException e) {\n+      throw new InternalError(\n+        \"CodeTemplate implementation not Cloneable: \" +\n+          getClass().getName());\n     }\n+  }\n \n-    /**\n-     * Compares the <code>StaticCodeTemplate</code> to another.\n-     * \n-     * @param o\n-     *            Another <code>StaticCodeTemplate</code> object.\n-     * @return A negative integer, zero, or a positive integer as this object is less than, equal-to, or greater than\n-     *         the passed-in object.\n-     * @throws ClassCastException\n-     *             If <code>o</code> is not an instance of <code>CodeTemplate</code>.\n-     */\n-    public int compareTo(Object o) {\n-        if (!(o instanceof CodeTemplate)) {\n-            return -1;\n-        }\n-        CodeTemplate t2 = (CodeTemplate) o;\n-        return getID().compareTo(t2.getID());\n+  /**\n+   * Compares the <code>StaticCodeTemplate</code> to another.\n+   *\n+   * @param o Another <code>StaticCodeTemplate</code> object.\n+   * @return A negative integer, zero, or a positive integer as this object is less than, equal-to, or greater than\n+   * the passed-in object.\n+   * @throws ClassCastException If <code>o</code> is not an instance of <code>CodeTemplate</code>.\n+   */\n+  public int compareTo(Object o) {\n+    if (!(o instanceof CodeTemplate)) {\n+      return -1;\n     }\n+    CodeTemplate t2 = (CodeTemplate) o;\n+    return getID().compareTo(t2.getID());\n+  }\n \n-    /**\n-     * Overridden to return \"<code>true</code>\" iff {@link #compareTo(Object)} returns <code>0</code>.\n-     * \n-     * @return Whether this code template is equal to another.\n-     */\n-    public boolean equals(Object obj) {\n-        if (obj instanceof CodeTemplate) {\n-            return compareTo(obj) == 0;\n-        }\n-        return false;\n+  /**\n+   * Overridden to return \"<code>true</code>\" iff {@link #compareTo(Object)} returns <code>0</code>.\n+   *\n+   * @return Whether this code template is equal to another.\n+   */\n+  public boolean equals(Object obj) {\n+    if (obj instanceof CodeTemplate) {\n+      return compareTo(obj) == 0;\n     }\n+    return false;\n+  }\n \n-    /**\n-     * Returns the ID of this code template.\n-     * \n-     * @return The template's ID.\n-     * @see #setID(String)\n-     */\n-    public String getID() {\n-        return id;\n-    }\n+  /**\n+   * Returns the ID of this code template.\n+   *\n+   * @return The template's ID.\n+   * @see #setID(String)\n+   */\n+  public String getID() {\n+    return id;\n+  }\n \n-    /**\n-     * Returns the hash code for this template.\n-     * \n-     * @return The hash code for this template.\n-     */\n-    public int hashCode() {\n-        return id.hashCode();\n-    }\n+  /**\n+   * Returns the hash code for this template.\n+   *\n+   * @return The hash code for this template.\n+   */\n+  public int hashCode() {\n+    return id.hashCode();\n+  }\n \n-    /**\n-     * Sets the ID for this template.\n-     * \n-     * @param id\n-     *            The ID for this template.\n-     * @throws IllegalArgumentException\n-     *             If <code>id</code> is <code>null</code>.\n-     * @see #getID()\n-     */\n-    public void setID(String id) {\n-        if (id == null) {\n-            throw new IllegalArgumentException(\"id cannot be null\");\n-        }\n-        this.id = id;\n+  /**\n+   * Sets the ID for this template.\n+   *\n+   * @param id The ID for this template.\n+   * @throws IllegalArgumentException If <code>id</code> is <code>null</code>.\n+   * @see #getID()\n+   */\n+  public void setID(String id) {\n+    if (id == null) {\n+      throw new IllegalArgumentException(\"id cannot be null\");\n     }\n+    this.id = id;\n+  }\n \n }\n\\ No newline at end of file\n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/34/AbstractCodeTemplate.java\nindex 6a3fa0033bf..8c495ea3315 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/34/AbstractCodeTemplate.java\n@@ -28,16 +28,22 @@ package org.fife.ui.rsyntaxtextarea.templates;\n  * @author Robert Futrell\n  * @version 1.0\n  */\n+\n+\n+\n+\n public abstract class AbstractCodeTemplate implements CodeTemplate {\n \n     /**\n      * The ID of this template.\n      */\n+\n     private String id;\n \n     /**\n      * This no-arg constructor is required for serialization purposes.\n      */\n+\n     public AbstractCodeTemplate() {\n     }\n \n@@ -49,6 +55,8 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n      * @throws IllegalArgumentException\n      *             If <code>id</code> is <code>null</code>.\n      */\n+\n+\n     public AbstractCodeTemplate(String id) {\n         setID(id);\n     }\n@@ -58,15 +66,15 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n      * \n      * @return A deep copy of this template.\n      */\n+\n+\n     public Object clone() {\n         // This method can't be abstract as compilers don't like concrete\n         // subclassses calling super.clone() on an abstract super.\n         try {\n             return super.clone();\n         } catch (CloneNotSupportedException e) {\n-            throw new InternalError(\n-                    \"CodeTemplate implementation not Cloneable: \" +\n-                            getClass().getName());\n+            throw new InternalError(\"CodeTemplate implementation not Cloneable: \" + getClass().getName());\n         }\n     }\n \n@@ -80,6 +88,8 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n      * @throws ClassCastException\n      *             If <code>o</code> is not an instance of <code>CodeTemplate</code>.\n      */\n+\n+\n     public int compareTo(Object o) {\n         if (!(o instanceof CodeTemplate)) {\n             return -1;\n@@ -93,6 +103,8 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n      * \n      * @return Whether this code template is equal to another.\n      */\n+\n+\n     public boolean equals(Object obj) {\n         if (obj instanceof CodeTemplate) {\n             return compareTo(obj) == 0;\n@@ -106,6 +118,8 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n      * @return The template's ID.\n      * @see #setID(String)\n      */\n+\n+\n     public String getID() {\n         return id;\n     }\n@@ -115,6 +129,8 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n      * \n      * @return The hash code for this template.\n      */\n+\n+\n     public int hashCode() {\n         return id.hashCode();\n     }\n@@ -128,6 +144,8 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n      *             If <code>id</code> is <code>null</code>.\n      * @see #getID()\n      */\n+\n+\n     public void setID(String id) {\n         if (id == null) {\n             throw new IllegalArgumentException(\"id cannot be null\");\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/34/AbstractCodeTemplate.java\nindex 6a3fa0033bf..e1b1b72c34a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/34/AbstractCodeTemplate.java\n@@ -65,8 +65,7 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n             return super.clone();\n         } catch (CloneNotSupportedException e) {\n             throw new InternalError(\n-                    \"CodeTemplate implementation not Cloneable: \" +\n-                            getClass().getName());\n+                    \"CodeTemplate implementation not Cloneable: \" + getClass().getName());\n         }\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/34/AbstractCodeTemplate.java\nindex 6a3fa0033bf..e1b1b72c34a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/34/AbstractCodeTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/34/AbstractCodeTemplate.java\n@@ -65,8 +65,7 @@ public abstract class AbstractCodeTemplate implements CodeTemplate {\n             return super.clone();\n         } catch (CloneNotSupportedException e) {\n             throw new InternalError(\n-                    \"CodeTemplate implementation not Cloneable: \" +\n-                            getClass().getName());\n+                    \"CodeTemplate implementation not Cloneable: \" + getClass().getName());\n         }\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize"
    ]
}