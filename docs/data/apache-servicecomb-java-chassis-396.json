{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "396",
    "information": {
        "errors": [
            {
                "line": "92",
                "column": "7",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    MicroserviceConfigLoader loader = new MicroserviceConfigLoader();\n    loader.loadAndSort();\n    if(model.getConfig() != null) {\n      loader.getConfigModels().add(model);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/396/ConfigUtil.java\nindex 052f8c4a3db..1f605396c0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/396/ConfigUtil.java\n@@ -89,7 +89,7 @@ public final class ConfigUtil {\n   public static ConcurrentCompositeConfiguration createLocalConfig() {\n     MicroserviceConfigLoader loader = new MicroserviceConfigLoader();\n     loader.loadAndSort();\n-    if(model.getConfig() != null) {\n+    if (model.getConfig() != null) {\n       loader.getConfigModels().add(model);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/396/ConfigUtil.java\nindex 052f8c4a3db..573b4ae3703 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/396/ConfigUtil.java\n@@ -89,7 +89,7 @@ public final class ConfigUtil {\n   public static ConcurrentCompositeConfiguration createLocalConfig() {\n     MicroserviceConfigLoader loader = new MicroserviceConfigLoader();\n     loader.loadAndSort();\n-    if(model.getConfig() != null) {\n+    if (model.getConfig() != null) {\n       loader.getConfigModels().add(model);\n     }\n \n@@ -104,7 +104,6 @@ public final class ConfigUtil {\n   }\n \n \n-\n   public static ConcurrentCompositeConfiguration createLocalConfig(List<ConfigModel> configModelList) {\n     ConcurrentCompositeConfiguration config = new ConcurrentCompositeConfiguration();\n \n@@ -151,8 +150,8 @@ public final class ConfigUtil {\n   }\n \n   private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+                                                      AbstractConfiguration source,\n+                                                      String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n \n     compositeConfiguration.addConfiguration(source, sourceName);\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/396/ConfigUtil.java\nindex 052f8c4a3db..ad9a8674c91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/396/ConfigUtil.java\n@@ -89,7 +89,7 @@ public final class ConfigUtil {\n   public static ConcurrentCompositeConfiguration createLocalConfig() {\n     MicroserviceConfigLoader loader = new MicroserviceConfigLoader();\n     loader.loadAndSort();\n-    if(model.getConfig() != null) {\n+    if (model.getConfig() != null) {\n       loader.getConfigModels().add(model);\n     }\n \n@@ -103,9 +103,7 @@ public final class ConfigUtil {\n     return config;\n   }\n \n-\n-\n-  public static ConcurrentCompositeConfiguration createLocalConfig(List<ConfigModel> configModelList) {\n+public static ConcurrentCompositeConfiguration createLocalConfig(List<ConfigModel> configModelList) {\n     ConcurrentCompositeConfiguration config = new ConcurrentCompositeConfiguration();\n \n     duplicateServiceCombConfigToCse(config,\n@@ -151,8 +149,7 @@ public final class ConfigUtil {\n   }\n \n   private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+      AbstractConfiguration source, String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n \n     compositeConfiguration.addConfiguration(source, sourceName);\n@@ -243,4 +240,4 @@ public final class ConfigUtil {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/396/ConfigUtil.java\nindex 052f8c4a3db..cedf1f21067 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/396/ConfigUtil.java\n@@ -24,7 +24,6 @@ import static org.apache.servicecomb.foundation.common.base.ServiceCombConstants\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.commons.configuration.AbstractConfiguration;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.EnvironmentConfiguration;\n@@ -37,7 +36,6 @@ import org.apache.servicecomb.config.spi.ConfigCenterConfigurationSource;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.netflix.config.ConcurrentCompositeConfiguration;\n import com.netflix.config.ConcurrentMapConfiguration;\n import com.netflix.config.ConfigurationManager;\n@@ -89,7 +87,7 @@ public final class ConfigUtil {\n   public static ConcurrentCompositeConfiguration createLocalConfig() {\n     MicroserviceConfigLoader loader = new MicroserviceConfigLoader();\n     loader.loadAndSort();\n-    if(model.getConfig() != null) {\n+    if (model.getConfig() != null) {\n       loader.getConfigModels().add(model);\n     }\n \n@@ -103,22 +101,18 @@ public final class ConfigUtil {\n     return config;\n   }\n \n-\n-\n   public static ConcurrentCompositeConfiguration createLocalConfig(List<ConfigModel> configModelList) {\n     ConcurrentCompositeConfiguration config = new ConcurrentCompositeConfiguration();\n-\n     duplicateServiceCombConfigToCse(config,\n-        new ConcurrentMapConfiguration(new SystemConfiguration()),\n+      new ConcurrentMapConfiguration(new SystemConfiguration()),\n         \"configFromSystem\");\n     duplicateServiceCombConfigToCse(config,\n-        convertEnvVariable(new ConcurrentMapConfiguration(new EnvironmentConfiguration())),\n+      convertEnvVariable(new ConcurrentMapConfiguration(new EnvironmentConfiguration())),\n         \"configFromEnvironment\");\n     duplicateServiceCombConfigToCse(config,\n-        new DynamicConfiguration(\n-            new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n-        \"configFromYamlFile\");\n-\n+      new DynamicConfiguration(new MicroserviceConfigurationSource(configModelList),\n+        new NeverStartPollingScheduler()),\n+          \"configFromYamlFile\");\n     return config;\n   }\n \n@@ -130,6 +124,7 @@ public final class ConfigUtil {\n       if (separatedKey.length == 1) {\n         continue;\n       }\n+\n       String newKey = String.join(\".\", separatedKey);\n       source.addProperty(newKey, source.getProperty(key));\n     }\n@@ -137,6 +132,7 @@ public final class ConfigUtil {\n   }\n \n   //inject a copy of cse.xxx for servicecomb.xxx\n+\n   private static void duplicateServiceCombConfigToCse(AbstractConfiguration source) {\n     Iterator<String> keys = source.getKeys();\n     while (keys.hasNext()) {\n@@ -150,20 +146,15 @@ public final class ConfigUtil {\n     }\n   }\n \n-  private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+  private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration, AbstractConfiguration source, String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n-\n     compositeConfiguration.addConfiguration(source, sourceName);\n   }\n \n   public static DynamicWatchedConfiguration createConfigFromConfigCenter(Configuration localConfiguration) {\n-    ConfigCenterConfigurationSource configCenterConfigurationSource =\n-        SPIServiceUtils.getTargetService(ConfigCenterConfigurationSource.class);\n+    ConfigCenterConfigurationSource configCenterConfigurationSource = SPIServiceUtils.getTargetService(ConfigCenterConfigurationSource.class);\n     if (null == configCenterConfigurationSource) {\n-      LOGGER.info(\n-          \"config center SPI service can not find, skip to load configuration from config center\");\n+      LOGGER.info(\"config center SPI service can not find, skip to load configuration from config center\");\n       return null;\n     }\n \n@@ -178,18 +169,16 @@ public final class ConfigUtil {\n \n   public static AbstractConfiguration createDynamicConfig() {\n     LOGGER.info(\"create dynamic config:\");\n+\n     ConcurrentCompositeConfiguration config = ConfigUtil.createLocalConfig();\n     DynamicWatchedConfiguration configFromConfigCenter = createConfigFromConfigCenter(config);\n     if (configFromConfigCenter != null) {\n       ConcurrentMapConfiguration injectConfig = new ConcurrentMapConfiguration();\n       config.addConfigurationAtFront(injectConfig, \"extraInjectConfig\");\n-\n       duplicateServiceCombConfigToCse(configFromConfigCenter);\n       config.addConfigurationAtFront(configFromConfigCenter, \"configCenterConfig\");\n-\n       configFromConfigCenter.getSource().addUpdateListener(new ServiceCombPropertyUpdateListener(injectConfig));\n     }\n-\n     return config;\n   }\n \n@@ -204,7 +193,6 @@ public final class ConfigUtil {\n   }\n \n   private static class ServiceCombPropertyUpdateListener implements WatchedUpdateListener {\n-\n     private final ConcurrentMapConfiguration injectConfig;\n \n     ServiceCombPropertyUpdateListener(ConcurrentMapConfiguration injectConfig) {\n@@ -243,4 +231,4 @@ public final class ConfigUtil {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/396/ConfigUtil.java\nindex 052f8c4a3db..1f605396c0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/396/ConfigUtil.java\n@@ -89,7 +89,7 @@ public final class ConfigUtil {\n   public static ConcurrentCompositeConfiguration createLocalConfig() {\n     MicroserviceConfigLoader loader = new MicroserviceConfigLoader();\n     loader.loadAndSort();\n-    if(model.getConfig() != null) {\n+    if (model.getConfig() != null) {\n       loader.getConfigModels().add(model);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/396/ConfigUtil.java\nindex 052f8c4a3db..1f605396c0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/396/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/396/ConfigUtil.java\n@@ -89,7 +89,7 @@ public final class ConfigUtil {\n   public static ConcurrentCompositeConfiguration createLocalConfig() {\n     MicroserviceConfigLoader loader = new MicroserviceConfigLoader();\n     loader.loadAndSort();\n-    if(model.getConfig() != null) {\n+    if (model.getConfig() != null) {\n       loader.getConfigModels().add(model);\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}