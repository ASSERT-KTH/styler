{
    "project_name": "intuit-Tank",
    "error_id": "171",
    "information": {
        "errors": [
            {
                "line": "23",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n\n\t/**\n\t * Returns a null token.\n\t *\n\t * @return A null token.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "23",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/171/TokenFactory.java\nindex fa74a1e92f8..b59bd18a2e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/171/TokenFactory.java\n@@ -19,13 +19,12 @@ import javax.swing.text.Segment;\n  */\n interface TokenFactory {\n \n-\n-\t/**\n+    /**\n \t * Returns a null token.\n \t *\n \t * @return A null token.\n \t */\n-\tTokenImpl createToken();\n+        TokenImpl createToken();\n \n \n \t/**\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/171/TokenFactory.java\nindex fa74a1e92f8..a24023d6348 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/171/TokenFactory.java\n@@ -6,6 +6,7 @@\n  * This library is distributed under a modified BSD license.  See the included\n  * LICENSE file for details.\n  */\n+\n package org.fife.ui.rsyntaxtextarea;\n \n import javax.swing.text.Segment;\n@@ -20,46 +21,46 @@ import javax.swing.text.Segment;\n interface TokenFactory {\n \n \n-\t/**\n-\t * Returns a null token.\n-\t *\n-\t * @return A null token.\n-\t */\n-\tTokenImpl createToken();\n+  /**\n+   * Returns a null token.\n+   *\n+   * @return A null token.\n+   */\n+  TokenImpl createToken();\n \n \n-\t/**\n-\t * Returns a token.\n-\t *\n-\t * @param line The segment from which to get the token's text.\n-\t * @param beg The starting offset of the token's text in the segment.\n-\t * @param end The ending offset of the token's text in the segment.\n-\t * @param startOffset The offset in the document of the token.\n-\t * @param type The type of token.\n-\t * @return The token.\n-\t */\n-\tTokenImpl createToken(Segment line, int beg, int end, int startOffset, int type);\n+  /**\n+   * Returns a token.\n+   *\n+   * @param line        The segment from which to get the token's text.\n+   * @param beg         The starting offset of the token's text in the segment.\n+   * @param end         The ending offset of the token's text in the segment.\n+   * @param startOffset The offset in the document of the token.\n+   * @param type        The type of token.\n+   * @return The token.\n+   */\n+  TokenImpl createToken(Segment line, int beg, int end, int startOffset, int type);\n \n \n-\t/**\n-\t * Returns a token.\n-\t *\n-\t * @param line The char array from which to get the token's text.\n-\t * @param beg The starting offset of the token's text in the char array.\n-\t * @param end The ending offset of the token's text in the char array.\n-\t * @param startOffset The offset in the document of the token.\n-\t * @param type The type of token.\n-\t * @return The token.\n-\t */\n-\tTokenImpl createToken(char[] line, int beg, int end, int startOffset, int type);\n+  /**\n+   * Returns a token.\n+   *\n+   * @param line        The char array from which to get the token's text.\n+   * @param beg         The starting offset of the token's text in the char array.\n+   * @param end         The ending offset of the token's text in the char array.\n+   * @param startOffset The offset in the document of the token.\n+   * @param type        The type of token.\n+   * @return The token.\n+   */\n+  TokenImpl createToken(char[] line, int beg, int end, int startOffset, int type);\n \n \n-\t/**\n-\t * Resets the state of this token maker.  This method should be called\n-\t * by the <code>TokenMaker</code> every time a token list is generated for\n-\t * a new line so the tokens can be reused.\n-\t */\n-\tvoid resetAllTokens();\n+  /**\n+   * Resets the state of this token maker.  This method should be called\n+   * by the <code>TokenMaker</code> every time a token list is generated for\n+   * a new line so the tokens can be reused.\n+   */\n+  void resetAllTokens();\n \n \n }\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "22",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/171/TokenFactory.java\nindex fa74a1e92f8..39fa9f20b5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/171/TokenFactory.java\n@@ -10,7 +10,6 @@ package org.fife.ui.rsyntaxtextarea;\n \n import javax.swing.text.Segment;\n \n-\n /**\n  * Interface for a class that generates tokens somehow.\n  *\n@@ -19,16 +18,14 @@ import javax.swing.text.Segment;\n  */\n interface TokenFactory {\n \n-\n-\t/**\n+    /**\n \t * Returns a null token.\n \t *\n \t * @return A null token.\n \t */\n \tTokenImpl createToken();\n \n-\n-\t/**\n+/**\n \t * Returns a token.\n \t *\n \t * @param line The segment from which to get the token's text.\n@@ -40,8 +37,7 @@ interface TokenFactory {\n \t */\n \tTokenImpl createToken(Segment line, int beg, int end, int startOffset, int type);\n \n-\n-\t/**\n+/**\n \t * Returns a token.\n \t *\n \t * @param line The char array from which to get the token's text.\n@@ -53,13 +49,11 @@ interface TokenFactory {\n \t */\n \tTokenImpl createToken(char[] line, int beg, int end, int startOffset, int type);\n \n-\n-\t/**\n+/**\n \t * Resets the state of this token maker.  This method should be called\n \t * by the <code>TokenMaker</code> every time a token list is generated for\n \t * a new line so the tokens can be reused.\n \t */\n \tvoid resetAllTokens();\n \n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/171/TokenFactory.java\nindex fa74a1e92f8..69ce6e7dfe7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/171/TokenFactory.java\n@@ -8,6 +8,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea;\n \n+\n+\n import javax.swing.text.Segment;\n \n \n@@ -17,49 +19,54 @@ import javax.swing.text.Segment;\n  * @author Robert Futrell\n  * @version 0.1\n  */\n+\n+\n interface TokenFactory {\n \n \n-\t/**\n-\t * Returns a null token.\n-\t *\n-\t * @return A null token.\n-\t */\n-\tTokenImpl createToken();\n-\n-\n-\t/**\n-\t * Returns a token.\n-\t *\n-\t * @param line The segment from which to get the token's text.\n-\t * @param beg The starting offset of the token's text in the segment.\n-\t * @param end The ending offset of the token's text in the segment.\n-\t * @param startOffset The offset in the document of the token.\n-\t * @param type The type of token.\n-\t * @return The token.\n-\t */\n-\tTokenImpl createToken(Segment line, int beg, int end, int startOffset, int type);\n-\n-\n-\t/**\n-\t * Returns a token.\n-\t *\n-\t * @param line The char array from which to get the token's text.\n-\t * @param beg The starting offset of the token's text in the char array.\n-\t * @param end The ending offset of the token's text in the char array.\n-\t * @param startOffset The offset in the document of the token.\n-\t * @param type The type of token.\n-\t * @return The token.\n-\t */\n-\tTokenImpl createToken(char[] line, int beg, int end, int startOffset, int type);\n-\n-\n-\t/**\n-\t * Resets the state of this token maker.  This method should be called\n-\t * by the <code>TokenMaker</code> every time a token list is generated for\n-\t * a new line so the tokens can be reused.\n-\t */\n-\tvoid resetAllTokens();\n-\n-\n-}\n+    /**\n+     * Returns a null token.\n+     *\n+     * @return A null token.\n+     */\n+\n+    TokenImpl createToken();\n+\n+\n+    /**\n+     * Returns a token.\n+     *\n+     * @param line The segment from which to get the token's text.\n+     * @param beg The starting offset of the token's text in the segment.\n+     * @param end The ending offset of the token's text in the segment.\n+     * @param startOffset The offset in the document of the token.\n+     * @param type The type of token.\n+     * @return The token.\n+     */\n+\n+    TokenImpl createToken(Segment line, int beg, int end, int startOffset, int type);\n+\n+\n+    /**\n+     * Returns a token.\n+     *\n+     * @param line The char array from which to get the token's text.\n+     * @param beg The starting offset of the token's text in the char array.\n+     * @param end The ending offset of the token's text in the char array.\n+     * @param startOffset The offset in the document of the token.\n+     * @param type The type of token.\n+     * @return The token.\n+     */\n+\n+    TokenImpl createToken(char[] line, int beg, int end, int startOffset, int type);\n+\n+\n+    /**\n+     * Resets the state of this token maker.  This method should be called\n+     * by the <code>TokenMaker</code> every time a token list is generated for\n+     * a new line so the tokens can be reused.\n+     */\n+\n+    void resetAllTokens();\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "23",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/171/TokenFactory.java\nindex fa74a1e92f8..b59bd18a2e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/171/TokenFactory.java\n@@ -19,13 +19,12 @@ import javax.swing.text.Segment;\n  */\n interface TokenFactory {\n \n-\n-\t/**\n+    /**\n \t * Returns a null token.\n \t *\n \t * @return A null token.\n \t */\n-\tTokenImpl createToken();\n+        TokenImpl createToken();\n \n \n \t/**\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "23",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/171/TokenFactory.java\nindex fa74a1e92f8..5dfeda28d4a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/171/TokenFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/171/TokenFactory.java\n@@ -19,13 +19,12 @@ import javax.swing.text.Segment;\n  */\n interface TokenFactory {\n \n-\n-\t/**\n+    /**\n \t * Returns a null token.\n \t *\n \t * @return A null token.\n \t */\n-\tTokenImpl createToken();\n+ TokenImpl createToken();\n \n \n \t/**\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}