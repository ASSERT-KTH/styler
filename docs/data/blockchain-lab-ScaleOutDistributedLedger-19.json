{
    "project_name": "blockchain-lab-ScaleOutDistributedLedger",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "63",
                "column": "13",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "\t\t\t}\n\n\t\t\tif(block.getNumber() > 0 && !block.checkHash()) return false;\n\t\t\tBlockAbstract blockAbstract = block.getBlockAbstract();\n\t\t\tif (blockAbstract != null && blockAbstract.isOnMainChain()) {\n\t\t\t\tabsmark = blockAbstract.getBlockNumber();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "63",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/19/Proof.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/intellij/19/Proof.java\nindex a5295b1950e..08ce4778564 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/19/Proof.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/intellij/19/Proof.java\n@@ -11,70 +11,86 @@ import java.util.OptionalInt;\n  */\n public class Proof {\n \n-\t@Getter\n-\tprivate final Transaction transaction;\n+    @Getter\n+    private final Transaction transaction;\n \n-\t@Getter\n-\tprivate final HashMap<Node, List<Block>> chainUpdates;\n+    @Getter\n+    private final HashMap<Node, List<Block>> chainUpdates;\n \n-\t/**\n-\t * Constructor.\n-\t * @param transaction - the transaction to be proven.\n-\t */\n-\tpublic Proof(Transaction transaction) {\n-\t\tthis.transaction = transaction;\n-\t\tthis.chainUpdates = new HashMap<>();\n-\t}\n+    /**\n+     * Constructor.\n+     *\n+     * @param transaction - the transaction to be proven.\n+     */\n+    public Proof(Transaction transaction) {\n+        this.transaction = transaction;\n+        this.chainUpdates = new HashMap<>();\n+    }\n \n-\t/**\n-\t * Add a block to the proof.\n-\t * @param block - the block to be added\n-\t */\n-\tpublic void addBlock(Block block) {\n-\t\tchainUpdates.get(block.getOwner().getId()).add(block);\n-\t}\n+    /**\n+     * Add a block to the proof.\n+     *\n+     * @param block - the block to be added\n+     */\n+    public void addBlock(Block block) {\n+        chainUpdates.get(block.getOwner().getId()).add(block);\n+    }\n \n-\t/**\n-\t * Verifies this proof.\n-\t * @return - boolean indicating if this proof is valid.\n-\t */\n-\tpublic boolean verify() {\n-\t\treturn verify(this.transaction);\n-\t}\n+    /**\n+     * Verifies this proof.\n+     *\n+     * @return - boolean indicating if this proof is valid.\n+     */\n+    public boolean verify() {\n+        return verify(this.transaction);\n+    }\n \n-\t/**\n-\t * Verifies the given transaction using this proof.\n-\t * @param transaction - the transaction to verify\n-\t * @return - boolean indicating if this transaction is valid.\n-\t */\n-\tprivate boolean verify(Transaction transaction) {\n-\t\tint absmark = 0;\n-\t\tboolean seen = false;\n+    /**\n+     * Verifies the given transaction using this proof.\n+     *\n+     * @param transaction - the transaction to verify\n+     * @return - boolean indicating if this transaction is valid.\n+     */\n+    private boolean verify(Transaction transaction) {\n+        int absmark = 0;\n+        boolean seen = false;\n \n-\t\tChainView chainView = new ChainView(transaction.getSender().getChain(), chainUpdates.get(transaction.getSender()));\n-\t\tif (!chainView.isValid()) return false;\n+        ChainView chainView = new ChainView(transaction.getSender().getChain(), chainUpdates.get(transaction.getSender()));\n+        if (!chainView.isValid()) {\n+            return false;\n+        }\n \n-\t\tfor (Block block : chainView) {\n-\t\t\tif (block.getTransactions().contains(transaction)) {\n-\t\t\t\tif (seen) return false;\n-\t\t\t\tseen = true;\n-\t\t\t}\n+        for (Block block : chainView) {\n+            if (block.getTransactions().contains(transaction)) {\n+                if (seen) {\n+                    return false;\n+                }\n+                seen = true;\n+            }\n \n-\t\t\tif(block.getNumber() > 0 && !block.checkHash()) return false;\n-\t\t\tBlockAbstract blockAbstract = block.getBlockAbstract();\n-\t\t\tif (blockAbstract != null && blockAbstract.isOnMainChain()) {\n-\t\t\t\tabsmark = blockAbstract.getBlockNumber();\n-\t\t\t\tif (!blockAbstract.checkBlockHash(block) || !blockAbstract.checkSignature()) return false;\n-\t\t\t}\n-\t\t}\n+            if (block.getNumber() > 0 && !block.checkHash()) {\n+                return false;\n+            }\n+            BlockAbstract blockAbstract = block.getBlockAbstract();\n+            if (blockAbstract != null && blockAbstract.isOnMainChain()) {\n+                absmark = blockAbstract.getBlockNumber();\n+                if (!blockAbstract.checkBlockHash(block) || !blockAbstract.checkSignature()) {\n+                    return false;\n+                }\n+            }\n+        }\n \n-\t\tOptionalInt blockNumber = transaction.getBlockNumber();\n-\t\tif (!blockNumber.isPresent() || absmark < blockNumber.getAsInt()) return false;\n+        OptionalInt blockNumber = transaction.getBlockNumber();\n+        if (!blockNumber.isPresent() || absmark < blockNumber.getAsInt()) {\n+            return false;\n+        }\n \n-\t\t// Verify source transaction\n-\t\tfor (Transaction sourceTransaction : transaction.getSource()) {\n-\t\t\tif (!verify(sourceTransaction)) return false;\n-\t\t}\n-\t\treturn true;\n-\t}\n+        // Verify source transaction\n+        for (Transaction sourceTransaction : transaction.getSource()) {\n+            if (!verify(sourceTransaction)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "column": "39",
                    "severity": "warning",
                    "message": "'{' at column 36 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "35",
                    "column": "39",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "69",
                    "column": "73",
                    "severity": "warning",
                    "message": "'{' at column 64 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/19/Proof.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/naturalize/19/Proof.java\nindex a5295b1950e..dcd635d7077 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/errored/1/19/Proof.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/blockchain-lab-ScaleOutDistributedLedger/naturalize/19/Proof.java\n@@ -3,15 +3,16 @@ package nl.tudelft.blockchain.scaleoutdistributedledger.model;\n import lombok.Getter;\n \n import java.util.HashMap;\n+\n import java.util.List;\n+\n import java.util.OptionalInt;\n \n /**\n  * Proof class.\n  */\n public class Proof {\n-\n-\t@Getter\n+@Getter\n \tprivate final Transaction transaction;\n \n \t@Getter\n@@ -22,25 +23,27 @@ public class Proof {\n \t * @param transaction - the transaction to be proven.\n \t */\n \tpublic Proof(Transaction transaction) {\n-\t\tthis.transaction = transaction;\n+this.transaction = transaction;\n \t\tthis.chainUpdates = new HashMap<>();\n-\t}\n+\n+}\n \n \t/**\n \t * Add a block to the proof.\n \t * @param block - the block to be added\n \t */\n-\tpublic void addBlock(Block block) {\n-\t\tchainUpdates.get(block.getOwner().getId()).add(block);\n-\t}\n+\tpublic void addBlock(Block block) {chainUpdates.get(block.getOwner().getId()).add(block);\n+\n+}\n \n \t/**\n \t * Verifies this proof.\n \t * @return - boolean indicating if this proof is valid.\n \t */\n \tpublic boolean verify() {\n-\t\treturn verify(this.transaction);\n-\t}\n+return verify(this.transaction);\n+\n+}\n \n \t/**\n \t * Verifies the given transaction using this proof.\n@@ -48,33 +51,35 @@ public class Proof {\n \t * @return - boolean indicating if this transaction is valid.\n \t */\n \tprivate boolean verify(Transaction transaction) {\n-\t\tint absmark = 0;\n+int absmark = 0;\n \t\tboolean seen = false;\n \n \t\tChainView chainView = new ChainView(transaction.getSender().getChain(), chainUpdates.get(transaction.getSender()));\n \t\tif (!chainView.isValid()) return false;\n \n \t\tfor (Block block : chainView) {\n-\t\t\tif (block.getTransactions().contains(transaction)) {\n-\t\t\t\tif (seen) return false;\n+if (block.getTransactions().contains(transaction)) {\n+if (seen) return false;\n \t\t\t\tseen = true;\n-\t\t\t}\n+\n+}\n \n \t\t\tif(block.getNumber() > 0 && !block.checkHash()) return false;\n \t\t\tBlockAbstract blockAbstract = block.getBlockAbstract();\n-\t\t\tif (blockAbstract != null && blockAbstract.isOnMainChain()) {\n-\t\t\t\tabsmark = blockAbstract.getBlockNumber();\n+\t\t\tif (blockAbstract != null && blockAbstract.isOnMainChain()) { absmark = blockAbstract.getBlockNumber();\n \t\t\t\tif (!blockAbstract.checkBlockHash(block) || !blockAbstract.checkSignature()) return false;\n-\t\t\t}\n-\t\t}\n+\n+}\n+    }\n \n \t\tOptionalInt blockNumber = transaction.getBlockNumber();\n \t\tif (!blockNumber.isPresent() || absmark < blockNumber.getAsInt()) return false;\n \n \t\t// Verify source transaction\n \t\tfor (Transaction sourceTransaction : transaction.getSource()) {\n-\t\t\tif (!verify(sourceTransaction)) return false;\n-\t\t}\n+if (!verify(sourceTransaction)) return false;\n+}\n \t\treturn true;\n-\t}\n+\n }\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "63",
                    "column": "13",
                    "severity": "warning",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}