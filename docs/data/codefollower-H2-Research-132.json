{
    "project_name": "codefollower-H2-Research",
    "error_id": "132",
    "information": {
        "errors": [
            {
                "line": "93",
                "column": "46",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public int compareTo(MetaRecord other) { //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n        int c1 = getCreateOrder();\n        int c2 = other.getCreateOrder();\n        if (c1 != c2) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/132/MetaRecord.java\nindex 30b725e26bc..141f1ca4a1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/132/MetaRecord.java\n@@ -90,8 +90,9 @@ public class MetaRecord implements Comparable<MetaRecord> {\n      * @return -1, 0, or 1\n      */\n     @Override\n-    public int compareTo(MetaRecord other) { //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n-        int c1 = getCreateOrder();\n+    public int compareTo(MetaRecord other) {\n+        //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n+    int c1 = getCreateOrder();\n         int c2 = other.getCreateOrder();\n         if (c1 != c2) {\n             return c1 - c2;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "95",
                    "column": "44",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/132/MetaRecord.java\nindex 30b725e26bc..15482eb2376 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/132/MetaRecord.java\n@@ -3,9 +3,11 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.engine;\n \n import java.sql.SQLException;\n+\n import org.h2.api.DatabaseEventListener;\n import org.h2.command.Prepared;\n import org.h2.message.DbException;\n@@ -20,134 +22,134 @@ import org.h2.value.ValueString;\n  */\n public class MetaRecord implements Comparable<MetaRecord> {\n \n-    private final int id;\n-    private final int objectType;\n-    private final String sql;\n+  private final int id;\n+  private final int objectType;\n+  private final String sql;\n \n-    public MetaRecord(SearchRow r) {\n-        id = r.getValue(0).getInt();\n-        objectType = r.getValue(2).getInt();\n-        sql = r.getValue(3).getString();\n-    }\n+  public MetaRecord(SearchRow r) {\n+    id = r.getValue(0).getInt();\n+    objectType = r.getValue(2).getInt();\n+    sql = r.getValue(3).getString();\n+  }\n \n-    MetaRecord(DbObject obj) {\n-        id = obj.getId();\n-        objectType = obj.getType();\n-        sql = obj.getCreateSQL();\n-    }\n-    \n-    //\u5206\u522b\u5bf9\u5e94ID\u3001HEAD\u3001TYPE\u3001SQL\u8fd94\u4e2a\u5b57\u6bb5\n-    void setRecord(SearchRow r) {\n-        r.setValue(0, ValueInt.get(id));\n-        r.setValue(1, ValueInt.get(0));\n-        r.setValue(2, ValueInt.get(objectType));\n-        r.setValue(3, ValueString.get(sql));\n-    }\n+  MetaRecord(DbObject obj) {\n+    id = obj.getId();\n+    objectType = obj.getType();\n+    sql = obj.getCreateSQL();\n+  }\n \n-    /**\n-     * Execute the meta data statement.\n-     *\n-     * @param db the database\n-     * @param systemSession the system session\n-     * @param listener the database event listener\n-     */\n-    void execute(Database db, Session systemSession,\n-            DatabaseEventListener listener) {\n-        try {\n-            Prepared command = systemSession.prepare(sql);\n-            //System.out.println(sql);\n-            command.setObjectId(id);\n-            command.update();\n-        } catch (DbException e) {\n-            e = e.addSQL(sql);\n-            SQLException s = e.getSQLException();\n-            db.getTrace(Trace.DATABASE).error(s, sql);\n-            if (listener != null) {\n-                listener.exceptionThrown(s, sql);\n-                // continue startup in this case\n-            } else {\n-                throw e;\n-            }\n-        }\n-    }\n+  //\u5206\u522b\u5bf9\u5e94ID\u3001HEAD\u3001TYPE\u3001SQL\u8fd94\u4e2a\u5b57\u6bb5\n+  void setRecord(SearchRow r) {\n+    r.setValue(0, ValueInt.get(id));\n+    r.setValue(1, ValueInt.get(0));\n+    r.setValue(2, ValueInt.get(objectType));\n+    r.setValue(3, ValueString.get(sql));\n+  }\n \n-    public int getId() {\n-        return id;\n+  /**\n+   * Execute the meta data statement.\n+   *\n+   * @param db            the database\n+   * @param systemSession the system session\n+   * @param listener      the database event listener\n+   */\n+  void execute(Database db, Session systemSession,\n+               DatabaseEventListener listener) {\n+    try {\n+      Prepared command = systemSession.prepare(sql);\n+      //System.out.println(sql);\n+      command.setObjectId(id);\n+      command.update();\n+    } catch (DbException e) {\n+      e = e.addSQL(sql);\n+      SQLException s = e.getSQLException();\n+      db.getTrace(Trace.DATABASE).error(s, sql);\n+      if (listener != null) {\n+        listener.exceptionThrown(s, sql);\n+        // continue startup in this case\n+      } else {\n+        throw e;\n+      }\n     }\n+  }\n \n-    public int getObjectType() {\n-        return objectType;\n-    }\n+  public int getId() {\n+    return id;\n+  }\n \n-    public String getSQL() {\n-        return sql;\n-    }\n+  public int getObjectType() {\n+    return objectType;\n+  }\n \n-    /**\n-     * Sort the list of meta records by 'create order'.\n-     *\n-     * @param other the other record\n-     * @return -1, 0, or 1\n-     */\n-    @Override\n-    public int compareTo(MetaRecord other) { //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n-        int c1 = getCreateOrder();\n-        int c2 = other.getCreateOrder();\n-        if (c1 != c2) {\n-            return c1 - c2;\n-        }\n-        return getId() - other.getId();\n-    }\n+  public String getSQL() {\n+    return sql;\n+  }\n \n-    /**\n-     * Get the sort order id for this object type. Objects are created in this\n-     * order when opening a database.\n-     *\n-     * @return the sort index\n-     */\n-    private int getCreateOrder() {\n-        switch (objectType) {\n-        case DbObject.SETTING:\n-            return 0;\n-        case DbObject.USER:\n-            return 1;\n-        case DbObject.SCHEMA:\n-            return 2;\n-        case DbObject.FUNCTION_ALIAS:\n-            return 3;\n-        case DbObject.USER_DATATYPE:\n-            return 4;\n-        case DbObject.SEQUENCE:\n-            return 5;\n-        case DbObject.CONSTANT:\n-            return 6;\n-        case DbObject.TABLE_OR_VIEW:\n-            return 7;\n-        case DbObject.INDEX:\n-            return 8;\n-        case DbObject.CONSTRAINT:\n-            return 9;\n-        case DbObject.TRIGGER:\n-            return 10;\n-        case DbObject.SYNONYM:\n-            return 11;\n-        case DbObject.ROLE:\n-            return 12;\n-        case DbObject.RIGHT:\n-            return 13;\n-        case DbObject.AGGREGATE:\n-            return 14;\n-        case DbObject.COMMENT:\n-            return 15;\n-        default:\n-            throw DbException.throwInternalError(\"type=\"+objectType);\n-        }\n+  /**\n+   * Sort the list of meta records by 'create order'.\n+   *\n+   * @param other the other record\n+   * @return -1, 0, or 1\n+   */\n+  @Override\n+  public int compareTo(MetaRecord other) { //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n+    int c1 = getCreateOrder();\n+    int c2 = other.getCreateOrder();\n+    if (c1 != c2) {\n+      return c1 - c2;\n     }\n+    return getId() - other.getId();\n+  }\n \n-    @Override\n-    public String toString() {\n-        return \"MetaRecord [id=\" + id + \", objectType=\" + objectType +\n-                \", sql=\" + sql + \"]\";\n+  /**\n+   * Get the sort order id for this object type. Objects are created in this\n+   * order when opening a database.\n+   *\n+   * @return the sort index\n+   */\n+  private int getCreateOrder() {\n+    switch (objectType) {\n+      case DbObject.SETTING:\n+        return 0;\n+      case DbObject.USER:\n+        return 1;\n+      case DbObject.SCHEMA:\n+        return 2;\n+      case DbObject.FUNCTION_ALIAS:\n+        return 3;\n+      case DbObject.USER_DATATYPE:\n+        return 4;\n+      case DbObject.SEQUENCE:\n+        return 5;\n+      case DbObject.CONSTANT:\n+        return 6;\n+      case DbObject.TABLE_OR_VIEW:\n+        return 7;\n+      case DbObject.INDEX:\n+        return 8;\n+      case DbObject.CONSTRAINT:\n+        return 9;\n+      case DbObject.TRIGGER:\n+        return 10;\n+      case DbObject.SYNONYM:\n+        return 11;\n+      case DbObject.ROLE:\n+        return 12;\n+      case DbObject.RIGHT:\n+        return 13;\n+      case DbObject.AGGREGATE:\n+        return 14;\n+      case DbObject.COMMENT:\n+        return 15;\n+      default:\n+        throw DbException.throwInternalError(\"type=\" + objectType);\n     }\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"MetaRecord [id=\" + id + \", objectType=\" + objectType +\n+        \", sql=\" + sql + \"]\";\n+  }\n \n }\n",
            "diff_size": 189
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "102",
                    "column": "46",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/132/MetaRecord.java\nindex 30b725e26bc..98e516669e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/132/MetaRecord.java\n@@ -18,6 +18,8 @@ import org.h2.value.ValueString;\n  * A record in the system table of the database.\n  * It contains the SQL statement to create the database object.\n  */\n+\n+\n public class MetaRecord implements Comparable<MetaRecord> {\n \n     private final int id;\n@@ -37,6 +39,8 @@ public class MetaRecord implements Comparable<MetaRecord> {\n     }\n     \n     //\u5206\u522b\u5bf9\u5e94ID\u3001HEAD\u3001TYPE\u3001SQL\u8fd94\u4e2a\u5b57\u6bb5\n+\n+\n     void setRecord(SearchRow r) {\n         r.setValue(0, ValueInt.get(id));\n         r.setValue(1, ValueInt.get(0));\n@@ -51,8 +55,9 @@ public class MetaRecord implements Comparable<MetaRecord> {\n      * @param systemSession the system session\n      * @param listener the database event listener\n      */\n-    void execute(Database db, Session systemSession,\n-            DatabaseEventListener listener) {\n+\n+\n+    void execute(Database db, Session systemSession, DatabaseEventListener listener) {\n         try {\n             Prepared command = systemSession.prepare(sql);\n             //System.out.println(sql);\n@@ -71,14 +76,17 @@ public class MetaRecord implements Comparable<MetaRecord> {\n         }\n     }\n \n+\n     public int getId() {\n         return id;\n     }\n \n+\n     public int getObjectType() {\n         return objectType;\n     }\n \n+\n     public String getSQL() {\n         return sql;\n     }\n@@ -89,6 +97,7 @@ public class MetaRecord implements Comparable<MetaRecord> {\n      * @param other the other record\n      * @return -1, 0, or 1\n      */\n+\n     @Override\n     public int compareTo(MetaRecord other) { //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n         int c1 = getCreateOrder();\n@@ -105,6 +114,7 @@ public class MetaRecord implements Comparable<MetaRecord> {\n      *\n      * @return the sort index\n      */\n+\n     private int getCreateOrder() {\n         switch (objectType) {\n         case DbObject.SETTING:\n@@ -140,14 +150,15 @@ public class MetaRecord implements Comparable<MetaRecord> {\n         case DbObject.COMMENT:\n             return 15;\n         default:\n-            throw DbException.throwInternalError(\"type=\"+objectType);\n+            throw DbException.throwInternalError(\"type=\" + objectType);\n         }\n     }\n \n     @Override\n     public String toString() {\n-        return \"MetaRecord [id=\" + id + \", objectType=\" + objectType +\n-                \", sql=\" + sql + \"]\";\n+        return \"MetaRecord [id=\" + id + \", objectType=\"\n+        + objectType + \", sql=\"\n+        + sql + \"]\";\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/132/MetaRecord.java\nindex 30b725e26bc..141f1ca4a1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/132/MetaRecord.java\n@@ -90,8 +90,9 @@ public class MetaRecord implements Comparable<MetaRecord> {\n      * @return -1, 0, or 1\n      */\n     @Override\n-    public int compareTo(MetaRecord other) { //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n-        int c1 = getCreateOrder();\n+    public int compareTo(MetaRecord other) {\n+        //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n+    int c1 = getCreateOrder();\n         int c2 = other.getCreateOrder();\n         if (c1 != c2) {\n             return c1 - c2;\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/132/MetaRecord.java\nindex 30b725e26bc..9867672a459 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/132/MetaRecord.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/132/MetaRecord.java\n@@ -90,8 +90,9 @@ public class MetaRecord implements Comparable<MetaRecord> {\n      * @return -1, 0, or 1\n      */\n     @Override\n-    public int compareTo(MetaRecord other) { //createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n-        int c1 = getCreateOrder();\n+    public int compareTo(MetaRecord other) {\n+//createOrder\u8d8a\u5c0f\u8868\u793a\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u540c\u7b49\u4f18\u5148\u7ea7\u7684\u6309id\u5148\u540e\u987a\u5e8f\n+    int c1 = getCreateOrder();\n         int c2 = other.getCreateOrder();\n         if (c1 != c2) {\n             return c1 - c2;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}