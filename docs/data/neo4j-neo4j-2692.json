{
    "project_name": "neo4j-neo4j",
    "error_id": "2692",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2692/WaitingOnLock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2692/WaitingOnLock.java\nindex fec7687dcc0..900059fb770 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2692/WaitingOnLock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2692/WaitingOnLock.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.query;\n \n import java.util.ArrayList;\n@@ -37,7 +38,7 @@ class WaitingOnLock extends ExecutingQueryStatus\n     private final long[] resourceIds;\n     private final long startTimeNanos;\n \n-    WaitingOnLock( LockType lockType, ResourceType resourceType, long transactionId, long[] resourceIds, long startTimeNanos )\n+    WaitingOnLock(LockType lockType, ResourceType resourceType, long transactionId, long[] resourceIds, long startTimeNanos)\n     {\n         this.lockType = lockType;\n         this.resourceType = resourceType;\n@@ -47,20 +48,20 @@ class WaitingOnLock extends ExecutingQueryStatus\n     }\n \n     @Override\n-    long waitTimeNanos( long currentTimeNanos )\n+    long waitTimeNanos(long currentTimeNanos)\n     {\n         return currentTimeNanos - startTimeNanos;\n     }\n \n     @Override\n-    Map<String,Object> toMap( long currentTimeNanos )\n+    Map<String, Object> toMap(long currentTimeNanos)\n     {\n-        Map<String,Object> map = new HashMap<>();\n-        map.put( \"lockMode\", lockType.getDescription() );\n-        map.put( \"waitTimeMillis\", TimeUnit.NANOSECONDS.toMillis( waitTimeNanos( currentTimeNanos ) ) );\n-        map.put( \"resourceType\", resourceType.toString() );\n-        map.put( \"resourceIds\", resourceIds );\n-        map.put( \"transactionId\", transactionId );\n+        Map<String, Object> map = new HashMap<>();\n+        map.put(\"lockMode\", lockType.getDescription());\n+        map.put(\"waitTimeMillis\", TimeUnit.NANOSECONDS.toMillis(waitTimeNanos(currentTimeNanos)));\n+        map.put(\"resourceType\", resourceType.toString());\n+        map.put(\"resourceIds\", resourceIds);\n+        map.put(\"transactionId\", transactionId);\n         return map;\n     }\n \n@@ -79,10 +80,10 @@ class WaitingOnLock extends ExecutingQueryStatus\n     @Override\n     List<ActiveLock> waitingOnLocks()\n     {\n-        List<ActiveLock> locks = new ArrayList<>( resourceIds.length );\n-        for ( long resourceId : resourceIds )\n+        List<ActiveLock> locks = new ArrayList<>(resourceIds.length);\n+        for (long resourceId : resourceIds)\n         {\n-            locks.add( new ActiveLock( resourceType, lockType, transactionId, resourceId ) );\n+            locks.add(new ActiveLock(resourceType, lockType, transactionId, resourceId));\n         }\n         return locks;\n     }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}