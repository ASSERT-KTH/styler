{
    "project_name": "neo4j-neo4j",
    "error_id": "962",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/962/StreamFilesRecursive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/962/StreamFilesRecursive.java\nindex 54602c5138d..2d858de4f79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/962/StreamFilesRecursive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/962/StreamFilesRecursive.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.fs;\n \n import java.nio.file.Path;\n@@ -35,7 +36,7 @@ public final class StreamFilesRecursive\n     /**\n      * Static implementation of {@link FileSystemAbstraction#streamFilesRecursive(Path)} that does not require\n      * any external state, other than what is presented through the given {@link FileSystemAbstraction}.\n-     *\n+     * <p>\n      * Return a stream of {@link FileHandle file handles} for every file in the given directory, and its\n      * sub-directories.\n      * <p>\n@@ -51,32 +52,31 @@ public final class StreamFilesRecursive\n      * directories will be created prior to the file rename.\n      *\n      * @param directory The base directory to start streaming files from, or the specific individual file to stream.\n-     * @param fs The {@link FileSystemAbstraction} to use for manipulating files.\n+     * @param fs        The {@link FileSystemAbstraction} to use for manipulating files.\n      * @return A {@link Stream} of {@link FileHandle}s\n      */\n-    public static Stream<FileHandle> streamFilesRecursive( Path directory, FileSystemAbstraction fs )\n+    public static Stream<FileHandle> streamFilesRecursive(Path directory, FileSystemAbstraction fs)\n     {\n         Path canonicalizedDirectory = directory.toAbsolutePath().normalize();\n         // We grab a snapshot of the file tree to avoid seeing the same file twice or more due to renames.\n-        List<Path> snapshot = streamFilesRecursiveInner( canonicalizedDirectory, fs ).collect( toList() );\n-        return snapshot.stream().map( f -> new WrappingFileHandle( f, canonicalizedDirectory, fs ) );\n+        List<Path> snapshot = streamFilesRecursiveInner(canonicalizedDirectory, fs).collect(toList());\n+        return snapshot.stream().map(f -> new WrappingFileHandle(f, canonicalizedDirectory, fs));\n     }\n \n-    private static Stream<Path> streamFilesRecursiveInner( Path directory, FileSystemAbstraction fs )\n+    private static Stream<Path> streamFilesRecursiveInner(Path directory, FileSystemAbstraction fs)\n     {\n-        Path[] files = fs.listFiles( directory );\n-        if ( files == null )\n+        Path[] files = fs.listFiles(directory);\n+        if (files == null)\n         {\n-            if ( !fs.fileExists( directory ) )\n+            if (!fs.fileExists(directory))\n             {\n                 return Stream.empty();\n             }\n-            return Stream.of( directory );\n-        }\n-        else\n+            return Stream.of(directory);\n+        } else\n         {\n-            return Stream.of( files )\n-                    .flatMap( f -> fs.isDirectory( f ) ? streamFilesRecursiveInner( f, fs ) : Stream.of( f ) );\n+            return Stream.of(files)\n+              .flatMap(f -> fs.isDirectory(f) ? streamFilesRecursiveInner(f, fs) : Stream.of(f));\n         }\n     }\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}