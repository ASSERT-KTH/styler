{
    "project_name": "graphfoundation-ongdb",
    "error_id": "7",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/7/JmxCompositeDataRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/7/JmxCompositeDataRepresentation.java\nindex 7df3705649f..c6b6feeef8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/7/JmxCompositeDataRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/7/JmxCompositeDataRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.management.repr;\n \n import java.util.ArrayList;\n@@ -30,44 +31,44 @@ import org.neo4j.server.rest.repr.ValueRepresentation;\n \n public class JmxCompositeDataRepresentation extends ObjectRepresentation\n {\n-    protected CompositeData data;\n-    private static final RepresentationDispatcher REPRESENTATION_DISPATCHER = new JmxAttributeRepresentationDispatcher();\n+  protected CompositeData data;\n+  private static final RepresentationDispatcher REPRESENTATION_DISPATCHER = new JmxAttributeRepresentationDispatcher();\n \n-    public JmxCompositeDataRepresentation( CompositeData data )\n-    {\n-        super( \"jmxCompositeData\" );\n-        this.data = data;\n-    }\n+  public JmxCompositeDataRepresentation(CompositeData data)\n+  {\n+    super(\"jmxCompositeData\");\n+    this.data = data;\n+  }\n \n-    @Mapping( \"type\" )\n-    public ValueRepresentation getType()\n-    {\n-        return ValueRepresentation.string( data.getCompositeType()\n-                .getTypeName() );\n-    }\n+  @Mapping(\"type\")\n+  public ValueRepresentation getType()\n+  {\n+    return ValueRepresentation.string(data.getCompositeType()\n+        .getTypeName());\n+  }\n \n-    @Mapping( \"description\" )\n-    public ValueRepresentation getDescription()\n-    {\n-        return ValueRepresentation.string( data.getCompositeType()\n-                .getDescription() );\n-    }\n-\n-    @Mapping( \"value\" )\n-    public ListRepresentation getValue()\n-    {\n+  @Mapping(\"description\")\n+  public ValueRepresentation getDescription()\n+  {\n+    return ValueRepresentation.string(data.getCompositeType()\n+        .getDescription());\n+  }\n \n-        ArrayList<Representation> values = new ArrayList<>();\n-        for ( Object key : data.getCompositeType().keySet() )\n-        {\n-            String name = key.toString();\n-            String description = data.getCompositeType().getDescription( name );\n+  @Mapping(\"value\")\n+  public ListRepresentation getValue()\n+  {\n \n-            Representation value = REPRESENTATION_DISPATCHER.dispatch( data.get( name ), \"\" );\n+    ArrayList<Representation> values = new ArrayList<>();\n+    for (Object key : data.getCompositeType().keySet())\n+    {\n+      String name = key.toString();\n+      String description = data.getCompositeType().getDescription(name);\n \n-            values.add( new NameDescriptionValueRepresentation( name, description, value ) );\n-        }\n+      Representation value = REPRESENTATION_DISPATCHER.dispatch(data.get(name), \"\");\n \n-        return new ListRepresentation( \"value\", values );\n+      values.add(new NameDescriptionValueRepresentation(name, description, value));\n     }\n+\n+    return new ListRepresentation(\"value\", values);\n+  }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/7/JmxCompositeDataRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/7/JmxCompositeDataRepresentation.java\nindex 7df3705649f..3662a26e1a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/7/JmxCompositeDataRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/7/JmxCompositeDataRepresentation.java\n@@ -42,32 +42,27 @@ public class JmxCompositeDataRepresentation extends ObjectRepresentation\n     @Mapping( \"type\" )\n     public ValueRepresentation getType()\n     {\n-        return ValueRepresentation.string( data.getCompositeType()\n-                .getTypeName() );\n+        return ValueRepresentation.string( data.getCompositeType().getTypeName() );\n     }\n \n     @Mapping( \"description\" )\n     public ValueRepresentation getDescription()\n     {\n-        return ValueRepresentation.string( data.getCompositeType()\n-                .getDescription() );\n+        return ValueRepresentation.string( data.getCompositeType().getDescription() );\n     }\n \n     @Mapping( \"value\" )\n     public ListRepresentation getValue()\n     {\n-\n-        ArrayList<Representation> values = new ArrayList<>();\n+    ArrayList<Representation> values = new ArrayList<>();\n         for ( Object key : data.getCompositeType().keySet() )\n         {\n             String name = key.toString();\n             String description = data.getCompositeType().getDescription( name );\n-\n-            Representation value = REPRESENTATION_DISPATCHER.dispatch( data.get( name ), \"\" );\n-\n-            values.add( new NameDescriptionValueRepresentation( name, description, value ) );\n+Representation value = REPRESENTATION_DISPATCHER.dispatch( data.get( name ), \"\" );\n+values.add( new NameDescriptionValueRepresentation( name, description, value ) );\n         }\n \n         return new ListRepresentation( \"value\", values );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}