{
    "project_name": "CESNET-perun",
    "error_id": "131",
    "information": {
        "errors": [
            {
                "line": "318",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\tInputStream rpcServerAnswer = null;\n\n\t\ttry {\n\t\t\t response = httpClient.execute(get);\n\t\t\t rpcServerAnswer = response.getEntity().getContent();\n\t\t} catch(IOException ex) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/131/ExtSourcePerun.java\nindex d5675a30815..6bee9e9630f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/131/ExtSourcePerun.java\n@@ -316,7 +316,7 @@ public class ExtSourcePerun extends ExtSource implements ExtSourceApi {\n \t\tInputStream rpcServerAnswer = null;\n \n \t\ttry {\n-\t\t\t response = httpClient.execute(get);\n+\t\t\tresponse = httpClient.execute(get);\n \t\t\t rpcServerAnswer = response.getEntity().getContent();\n \t\t} catch(IOException ex) {\n \t\t\tthis.processIOException(ex);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/131/ExtSourcePerun.java\nindex d5675a30815..2d0b7d4d194 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/131/ExtSourcePerun.java\n@@ -50,329 +50,350 @@ import java.util.regex.Pattern;\n  */\n public class ExtSourcePerun extends ExtSource implements ExtSourceApi {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(ExtSourcePerun.class);\n-\n-\tprivate static final String format = \"json\";\n-\tprivate String perunUrl;\n-\tprivate String username;\n-\tprivate String password;\n-\t// this will allow us to keep session to other Perun instances on all subsequent synchronization calls\n-\tprivate static CookieStore cookieStore = new BasicCookieStore();\n-\n-\tprivate String extSourceNameForLogin = null;\n-\tpublic static final Pattern attributePattern = Pattern.compile(\"[{](.+)[}]\");\n-\n-\tprivate static PerunBlImpl perunBl;\n-\n-\t// filled by spring (perun-core.xml)\n-\tpublic static PerunBlImpl setPerunBlImpl(PerunBlImpl perun) {\n-\t\tperunBl = perun;\n-\t\treturn perun;\n-\t}\n-\n-\n-\t@Override\n-\tpublic List<Map<String,String>> findSubjectsLogins(String searchString) throws ExtSourceUnsupportedOperationException {\n-\t\treturn findSubjectsLogins(searchString, 0);\n-\t}\n-\n-\t@Override\n-\tpublic List<Map<String,String>> findSubjectsLogins(String searchString, int maxResulsts) throws ExtSourceUnsupportedOperationException {\n-\t\tthrow new ExtSourceUnsupportedOperationException(\"For Perun ExtSource is not supported to use this method. Use findSubjects instead.\");\n-\t}\n-\n-\t@Override\n-\tpublic List<Map<String,String>> findSubjects(String searchString) {\n-\t\treturn findSubjects(searchString, 0);\n-\t}\n-\n-\t@Override\n-\tpublic List<Map<String,String>> findSubjects(String searchString, int maxResults) {\n-\t\tsetEnviroment();\n-\t\tList<RichUser> richUsers = findRichUsers(searchString);\n-\t\tif(maxResults != 0) {\n-\t\t\tif(richUsers.size() > maxResults) {\n-\t\t\t\trichUsers = richUsers.subList(0, maxResults);\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Map<String,String>> subjects = convertRichUsersToListOfSubjects(richUsers);\n-\t\treturn subjects;\n-\t}\n-\n-\t@Override\n-\tpublic Map<String, String> getSubjectByLogin(String login) throws SubjectNotExistsException {\n-\t\tsetEnviroment();\n-\t\tMap<String,String> subject = covertRichUserToSubject(findRichUser(login));\n-\t\treturn subject;\n-\t}\n-\n-\t@Override\n-\tpublic List<Map<String, String>> getGroupSubjects(Map<String, String> attributes) {\n-\t\tsetEnviroment();\n-\t\t// Get the query for the group subjects\n-\t\tString queryForGroup = attributes.get(GroupsManager.GROUPMEMBERSQUERY_ATTRNAME);\n-\n-\t\t//If there is no query for group, throw exception\n-\t\tif(queryForGroup == null) throw new InternalErrorException(\"Attribute \" + GroupsManager.GROUPMEMBERSQUERY_ATTRNAME + \" can't be null.\");\n-\n-\t\tInteger groupId = Integer.valueOf(queryForGroup);\n-\n-\t\tList<Map<String,String>> subjectsFromGroup = convertRichUsersToListOfSubjects(findRichUsers(groupId));\n-\n-\t\treturn subjectsFromGroup;\n-\t}\n-\n-\t@Override\n-\tpublic List<Map<String, String>> getUsersSubjects() {\n-\t\tString query = getAttributes().get(UsersManager.USERS_QUERY);\n-\n-\t\tsetEnviroment();\n-\n-\t\treturn convertRichUsersToListOfSubjects(findRichUsers(query));\n-\t}\n-\n-\tprivate List<Map<String, String>> convertRichUsersToListOfSubjects(List<RichUser> richUsers) {\n-\t\tList<Map<String, String>> listOfSubjects = new ArrayList<>();\n-\t\tfor(RichUser ru: richUsers) {\n-\t\t\tlistOfSubjects.add(covertRichUserToSubject(ru));\n-\t\t}\n-\t\treturn listOfSubjects;\n-\t}\n-\n-\tprivate Map<String, String> covertRichUserToSubject(RichUser richUser) {\n-\t\tMap<String,String> richUserInMap = new HashMap<>();\n-\t\tString mapping = getAttributes().get(\"xmlMapping\");\n-\t\tString[] mappingArray = mapping.split(\",\\n\");\n-\n-\t\t//Get user login\n-\t\tString login = \"\";\n-\t\tfor(UserExtSource ues: richUser.getUserExtSources()) {\n-\t\t\tif(ues.getExtSource() != null && ues.getExtSource().getName().equals(extSourceNameForLogin)) {\n-\t\t\t\tlogin = ues.getLogin();\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Null login is not allowed there\n-\t\tif(login == null) throw new InternalErrorException(\"There is missing login for user \" + richUser + \" and extSource \" + extSourceNameForLogin);\n-\n-\t\tfor (String s : mappingArray) {\n-\t\t\tString attr = s.trim();\n-\t\t\tint index = attr.indexOf(\"=\");\n-\n-\t\t\tif (index <= 0)\n-\t\t\t\tthrow new InternalErrorException(\"There is no text in xmlMapping attribute or there is no '=' character.\");\n-\t\t\tString name = attr.substring(0, index);\n-\t\t\tString value = attr.substring(index + 1);\n-\n-\t\t\tMatcher attributeMatcher = attributePattern.matcher(value);\n-\t\t\t//Try to find perun attributes in value part\n-\t\t\tif (attributeMatcher.find()) {\n-\t\t\t\tif (attributeMatcher.group(1).equals(\"login\")) {\n-\t\t\t\t\tvalue = attributeMatcher.replaceFirst(login);\n-\t\t\t\t} else {\n-\t\t\t\t\tString replacement = lookingForValueInRichUserAttributes(attributeMatcher.group(1), richUser);\n-\t\t\t\t\tif (replacement == null) replacement = \"\";\n-\t\t\t\t\tvalue = attributeMatcher.replaceFirst(replacement);\n-\t\t\t\t\t//If whole value is empty because of replacement, it means null for us\n-\t\t\t\t\tif (value.isEmpty()) value = null;\n-\t\t\t\t}\n-\t\t\t} else if (value.startsWith(\"urn:perun:\")) {\n-\t\t\t\t//DEPRECATED, but need to be first removed from all settings of PerunExtSource in perun-extSource.xml file\n-\t\t\t\t//It is probably old way how to use attribute (without {}) so try to find value for it\n-\t\t\t\tvalue = lookingForValueInRichUserAttributes(value, richUser);\n-\t\t\t}\n-\t\t\t//If nothing found, let the value be the same, it is probably static value (without any attribute)\n-\n-\t\t\trichUserInMap.put(name.trim(), value);\n-\t\t}\n-\n-\t\treturn richUserInMap;\n-\t}\n-\n-\tprivate String lookingForValueInRichUserAttributes(String value, RichUser richUser) {\n-\t\tString returnedValue = null;\n-\t\tList<Attribute> attributes = richUser.getUserAttributes();\n-\t\tfor(Attribute attr: attributes) {\n-\t\t\tif(attr.getName().equals(value)) {\n-\t\t\t\treturnedValue = BeansUtils.attributeValueToString(attr);\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\treturn returnedValue;\n-\t}\n-\n-\tprivate RichUser findRichUser(String login) throws SubjectNotExistsException {\n-\t\tMap<String, Object> params = new HashMap<>();\n-\n-\t\tList<RichUser> richUsers = this.findRichUsers(login);\n-\n-\t\tList<RichUser> matchesRichUsers = new ArrayList<>();\n-\t\tfor(RichUser richUser: richUsers) {\n-\t\t\tList<UserExtSource> userExtSources = richUser.getUserExtSources();\n-\t\t\tfor(UserExtSource userExtSource: userExtSources) {\n-\t\t\t\tif(extSourceNameForLogin.equals(userExtSource.getExtSource().getName())) {\n-\t\t\t\t\tif(login.equals(userExtSource.getLogin())) matchesRichUsers.add(richUser);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif(matchesRichUsers.isEmpty()) throw new SubjectNotExistsException(\"There is no subject with login \" + login + \" in extSource \" + extSourceNameForLogin + \" in System perun with RPC url: \" + perunUrl);\n-\t\tif(matchesRichUsers.size() > 1) throw new InternalErrorException(\"There are more then one subject with login \" + login + \" in extSource \" + extSourceNameForLogin + \" in System perun with RPC url: \" + perunUrl);\n-\n-\t\treturn richUsers.get(0);\n-\t}\n-\n-\tprivate List<RichUser> findRichUsers(String substring) {\n-\n-\t\tString query;\n-\t\t// encode query params\n-\t\tquery = \"searchString=\" + URLEncoder.encode(substring, StandardCharsets.UTF_8);\n-\n-\t\tList<RichUser> richUsers;\n-\t\ttry {\n-\t\t\trichUsers = this.call(\"usersManager\", \"findRichUsers\", query).readList(RichUser.class);\n-\t\t} catch (PerunException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tIterator<RichUser> iterator = richUsers.iterator();\n-\t\twhile(iterator.hasNext()) {\n-\t\t\tRichUser richUser = iterator.next();\n-\t\t\tboolean hasLogin = false;\n-\t\t\tfor(UserExtSource ues: richUser.getUserExtSources()) {\n-\t\t\t\tif(ues.getExtSource() != null && ues.getExtSource().getName().equals(extSourceNameForLogin)) {\n-\t\t\t\t\thasLogin = true;\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif(!hasLogin) iterator.remove();\n-\t\t}\n-\n-\t\treturn richUsers;\n-\t}\n-\n-\tprivate List<RichUser> findRichUsers(Integer groupId) {\n-\t\t// we don't need to encode query params here, no unsafe char in fixed string\n-\t\tString query = \"group=\" + groupId + \"&\" + \"allowedStatuses[]=\" + \"VALID\";\n-\n-\t\tList<RichMember> richMembers;\n-\t\ttry {\n-\t\t\trichMembers = this.call(\"membersManager\", \"getRichMembersWithAttributes\", query).readList(RichMember.class);\n-\t\t} catch (PerunException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\treturn convertListOfRichMembersToListOfRichUsers(richMembers);\n-\t}\n-\n-\tprivate void setEnviroment() {\n-\t\tperunUrl = getAttributes().get(\"perunUrl\");\n-\t\tusername = getAttributes().get(\"username\");\n-\t\tpassword = getAttributes().get(\"password\");\n-\t\textSourceNameForLogin = getAttributes().get(\"extSourceNameForLogin\");\n-\t\tBeansUtils.notNull(perunUrl, \"perunUrl\");\n-\t\tBeansUtils.notNull(username, \"username\");\n-\t\tBeansUtils.notNull(password, \"password\");\n-\t\tBeansUtils.notNull(extSourceNameForLogin, \"extSourceNameForLogin\");\n-\t}\n-\n-\tprivate List<RichUser> convertListOfRichMembersToListOfRichUsers(List<RichMember> richMembers) {\n-\t\tList<RichUser> richUsers = new ArrayList<>();\n-\t\tif(richMembers == null || richMembers.isEmpty()) return richUsers;\n-\n-\t\tfor(RichMember rm: richMembers) {\n-\t\t\tRichUser ru = new RichUser(rm.getUser(), rm.getUserExtSources(), rm.getUserAttributes());\n-\t\t\trichUsers.add(ru);\n-\t\t}\n-\n-\t\treturn richUsers;\n-\t}\n-\n-\tprivate Deserializer call(String managerName, String methodName) throws PerunException {\n-\t\treturn this.call(managerName, methodName, null);\n-\t}\n-\n-\tprotected Deserializer call(String managerName, String methodName, String query) throws PerunException {\n-\t\t//Prepare sending message\n-\t\tHttpResponse response;\n-\t\tHttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n-\t\thttpClientBuilder.setDefaultCookieStore(cookieStore);\n-\t\tHttpClient httpClient = httpClientBuilder.build();\n-\n-\t\tString commandUrl = perunUrl + format + \"/\" + managerName + \"/\" + methodName;\n-\t\tif(query != null) commandUrl+= \"?\" + query;\n-\n-\t\tHttpGet get = new HttpGet(commandUrl);\n-\t\tget.setHeader(\"Content-Type\", \"application/json\");\n-\t\tget.setHeader(\"charset\", StandardCharsets.UTF_8.toString());\n-\t\tget.setHeader(\"Connection\", \"Close\");\n-\t\tUsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n-\n-\t\tget.addHeader(BasicScheme.authenticate(credentials, StandardCharsets.UTF_8.toString(), false));\n-\t\t//post.setParams(params);\n-\n-\t\tInputStream rpcServerAnswer = null;\n-\n-\t\ttry {\n-\t\t\t response = httpClient.execute(get);\n-\t\t\t rpcServerAnswer = response.getEntity().getContent();\n-\t\t} catch(IOException ex) {\n-\t\t\tthis.processIOException(ex);\n-\t\t}\n-\n-\t\tJsonDeserializer des = null;\n-\t\ttry {\n-\t\t\tdes = new JsonDeserializer(rpcServerAnswer);\n-\t\t} catch (IOException ex) {\n-\t\t\tthis.processIOException(ex);\n-\t\t}\n-\n-\t\treturn des;\n-\t}\n-\n-\tprivate void processIOException(Throwable e) {\n-\t\tthis.processIOException(null, e);\n-\t}\n-\n-\tprivate void processIOException(HttpURLConnection con, Throwable e) {\n-\t\t// Process known IOExceptions\n-\t\tif (e instanceof ProtocolException) {\n-\t\t\tthrow new RpcException(RpcException.Type.COMMUNICATION_ERROR_WITH_PERUN_RPC_SERVER, \"Communication problem with Perun server on URL: \" + perunUrl, e);\n-\t\t} else if (e instanceof UnknownHostException) {\n-\t\t\tthrow new RpcException(RpcException.Type.UNKNOWN_PERUN_RPC_SERVER, \"Perun server cannot be contacted on URL: \" + perunUrl, e);\n-\t\t}\n-\n-\t\t// If the connection has been provided, check the responseCode\n-\t\tif (con != null) {\n-\t\t\t// Check return code\n-\t\t\tint responseCode;\n-\t\t\ttry {\n-\t\t\t\tresponseCode = con.getResponseCode();\n-\n-\t\t\t\tif (responseCode != HttpURLConnection.HTTP_OK) {\n-\t\t\t\t\tthrow new RpcException(RpcException.Type.PERUN_RPC_SERVER_ERROR_HTTP_CODE, \"Perun server on URL: \" + perunUrl + \" returned HTTP code: \" + responseCode, e);\n-\t\t\t\t}\n-\t\t\t} catch (IOException e1) {\n-\t\t\t\tthrow new RpcException(RpcException.Type.UNKNOWN_EXCEPTION, \"Failed to contact Perun server on URL: \" + perunUrl, e1);\n-\t\t\t}\n-\t\t}\n-\n-\t\tthrow new RpcException(RpcException.Type.UNKNOWN_EXCEPTION, \"Failed to contact Perun server on URL: \" + perunUrl, e);\n-\t}\n-\n-\t@Override\n-\tpublic void close() {\n-\t\t//not needed there\n-\t}\n-\n-\t@Override\n-\tpublic List<Map<String, String>> getSubjectGroups(Map<String, String> attributes) throws ExtSourceUnsupportedOperationException {\n-\t\tthrow new ExtSourceUnsupportedOperationException();\n-\t}\n-\n-\tprotected Map<String,String> getAttributes() {\n-\t\treturn perunBl.getExtSourcesManagerBl().getAttributes(this);\n-\t}\n+    private final static Logger log = LoggerFactory.getLogger(ExtSourcePerun.class);\n+\n+    private static final String format = \"json\";\n+    private String perunUrl;\n+    private String username;\n+    private String password;\n+    // this will allow us to keep session to other Perun instances on all subsequent synchronization calls\n+    private static CookieStore cookieStore = new BasicCookieStore();\n+\n+    private String extSourceNameForLogin = null;\n+    public static final Pattern attributePattern = Pattern.compile(\"[{](.+)[}]\");\n+\n+    private static PerunBlImpl perunBl;\n+\n+    // filled by spring (perun-core.xml)\n+    public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun) {\n+        perunBl = perun;\n+        return perun;\n+    }\n+\n+\n+    @Override\n+    public List<Map<String, String>> findSubjectsLogins(String searchString) throws ExtSourceUnsupportedOperationException {\n+        return findSubjectsLogins(searchString, 0);\n+    }\n+\n+    @Override\n+    public List<Map<String, String>> findSubjectsLogins(String searchString, int maxResulsts) throws ExtSourceUnsupportedOperationException {\n+        throw new ExtSourceUnsupportedOperationException(\"For Perun ExtSource is not supported to use this method. Use findSubjects instead.\");\n+    }\n+\n+    @Override\n+    public List<Map<String, String>> findSubjects(String searchString) {\n+        return findSubjects(searchString, 0);\n+    }\n+\n+    @Override\n+    public List<Map<String, String>> findSubjects(String searchString, int maxResults) {\n+        setEnviroment();\n+        List<RichUser> richUsers = findRichUsers(searchString);\n+        if (maxResults != 0) {\n+            if (richUsers.size() > maxResults) {\n+                richUsers = richUsers.subList(0, maxResults);\n+            }\n+        }\n+\n+        List<Map<String, String>> subjects = convertRichUsersToListOfSubjects(richUsers);\n+        return subjects;\n+    }\n+\n+    @Override\n+    public Map<String, String> getSubjectByLogin(String login) throws SubjectNotExistsException {\n+        setEnviroment();\n+        Map<String, String> subject = covertRichUserToSubject(findRichUser(login));\n+        return subject;\n+    }\n+\n+    @Override\n+    public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes) {\n+        setEnviroment();\n+        // Get the query for the group subjects\n+        String queryForGroup = attributes.get(GroupsManager.GROUPMEMBERSQUERY_ATTRNAME);\n+\n+        //If there is no query for group, throw exception\n+        if (queryForGroup == null) {\n+            throw new InternalErrorException(\"Attribute \" + GroupsManager.GROUPMEMBERSQUERY_ATTRNAME + \" can't be null.\");\n+        }\n+\n+        Integer groupId = Integer.valueOf(queryForGroup);\n+\n+        List<Map<String, String>> subjectsFromGroup = convertRichUsersToListOfSubjects(findRichUsers(groupId));\n+\n+        return subjectsFromGroup;\n+    }\n+\n+    @Override\n+    public List<Map<String, String>> getUsersSubjects() {\n+        String query = getAttributes().get(UsersManager.USERS_QUERY);\n+\n+        setEnviroment();\n+\n+        return convertRichUsersToListOfSubjects(findRichUsers(query));\n+    }\n+\n+    private List<Map<String, String>> convertRichUsersToListOfSubjects(List<RichUser> richUsers) {\n+        List<Map<String, String>> listOfSubjects = new ArrayList<>();\n+        for (RichUser ru : richUsers) {\n+            listOfSubjects.add(covertRichUserToSubject(ru));\n+        }\n+        return listOfSubjects;\n+    }\n+\n+    private Map<String, String> covertRichUserToSubject(RichUser richUser) {\n+        Map<String, String> richUserInMap = new HashMap<>();\n+        String mapping = getAttributes().get(\"xmlMapping\");\n+        String[] mappingArray = mapping.split(\",\\n\");\n+\n+        //Get user login\n+        String login = \"\";\n+        for (UserExtSource ues : richUser.getUserExtSources()) {\n+            if (ues.getExtSource() != null && ues.getExtSource().getName().equals(extSourceNameForLogin)) {\n+                login = ues.getLogin();\n+                break;\n+            }\n+        }\n+\n+        //Null login is not allowed there\n+        if (login == null) {\n+            throw new InternalErrorException(\"There is missing login for user \" + richUser + \" and extSource \" + extSourceNameForLogin);\n+        }\n+\n+        for (String s : mappingArray) {\n+            String attr = s.trim();\n+            int index = attr.indexOf(\"=\");\n+\n+            if (index <= 0) {\n+                throw new InternalErrorException(\"There is no text in xmlMapping attribute or there is no '=' character.\");\n+            }\n+            String name = attr.substring(0, index);\n+            String value = attr.substring(index + 1);\n+\n+            Matcher attributeMatcher = attributePattern.matcher(value);\n+            //Try to find perun attributes in value part\n+            if (attributeMatcher.find()) {\n+                if (attributeMatcher.group(1).equals(\"login\")) {\n+                    value = attributeMatcher.replaceFirst(login);\n+                } else {\n+                    String replacement = lookingForValueInRichUserAttributes(attributeMatcher.group(1), richUser);\n+                    if (replacement == null) {\n+                        replacement = \"\";\n+                    }\n+                    value = attributeMatcher.replaceFirst(replacement);\n+                    //If whole value is empty because of replacement, it means null for us\n+                    if (value.isEmpty()) {\n+                        value = null;\n+                    }\n+                }\n+            } else if (value.startsWith(\"urn:perun:\")) {\n+                //DEPRECATED, but need to be first removed from all settings of PerunExtSource in perun-extSource.xml file\n+                //It is probably old way how to use attribute (without {}) so try to find value for it\n+                value = lookingForValueInRichUserAttributes(value, richUser);\n+            }\n+            //If nothing found, let the value be the same, it is probably static value (without any attribute)\n+\n+            richUserInMap.put(name.trim(), value);\n+        }\n+\n+        return richUserInMap;\n+    }\n+\n+    private String lookingForValueInRichUserAttributes(String value, RichUser richUser) {\n+        String returnedValue = null;\n+        List<Attribute> attributes = richUser.getUserAttributes();\n+        for (Attribute attr : attributes) {\n+            if (attr.getName().equals(value)) {\n+                returnedValue = BeansUtils.attributeValueToString(attr);\n+                break;\n+            }\n+        }\n+        return returnedValue;\n+    }\n+\n+    private RichUser findRichUser(String login) throws SubjectNotExistsException {\n+        Map<String, Object> params = new HashMap<>();\n+\n+        List<RichUser> richUsers = this.findRichUsers(login);\n+\n+        List<RichUser> matchesRichUsers = new ArrayList<>();\n+        for (RichUser richUser : richUsers) {\n+            List<UserExtSource> userExtSources = richUser.getUserExtSources();\n+            for (UserExtSource userExtSource : userExtSources) {\n+                if (extSourceNameForLogin.equals(userExtSource.getExtSource().getName())) {\n+                    if (login.equals(userExtSource.getLogin())) {\n+                        matchesRichUsers.add(richUser);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (matchesRichUsers.isEmpty()) {\n+            throw new SubjectNotExistsException(\"There is no subject with login \" + login + \" in extSource \" + extSourceNameForLogin + \" in System perun with RPC url: \" + perunUrl);\n+        }\n+        if (matchesRichUsers.size() > 1) {\n+            throw new InternalErrorException(\"There are more then one subject with login \" + login + \" in extSource \" + extSourceNameForLogin + \" in System perun with RPC url: \" + perunUrl);\n+        }\n+\n+        return richUsers.get(0);\n+    }\n+\n+    private List<RichUser> findRichUsers(String substring) {\n+\n+        String query;\n+        // encode query params\n+        query = \"searchString=\" + URLEncoder.encode(substring, StandardCharsets.UTF_8);\n+\n+        List<RichUser> richUsers;\n+        try {\n+            richUsers = this.call(\"usersManager\", \"findRichUsers\", query).readList(RichUser.class);\n+        } catch (PerunException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        Iterator<RichUser> iterator = richUsers.iterator();\n+        while (iterator.hasNext()) {\n+            RichUser richUser = iterator.next();\n+            boolean hasLogin = false;\n+            for (UserExtSource ues : richUser.getUserExtSources()) {\n+                if (ues.getExtSource() != null && ues.getExtSource().getName().equals(extSourceNameForLogin)) {\n+                    hasLogin = true;\n+                    continue;\n+                }\n+            }\n+            if (!hasLogin) {\n+                iterator.remove();\n+            }\n+        }\n+\n+        return richUsers;\n+    }\n+\n+    private List<RichUser> findRichUsers(Integer groupId) {\n+        // we don't need to encode query params here, no unsafe char in fixed string\n+        String query = \"group=\" + groupId + \"&\" + \"allowedStatuses[]=\" + \"VALID\";\n+\n+        List<RichMember> richMembers;\n+        try {\n+            richMembers = this.call(\"membersManager\", \"getRichMembersWithAttributes\", query).readList(RichMember.class);\n+        } catch (PerunException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        return convertListOfRichMembersToListOfRichUsers(richMembers);\n+    }\n+\n+    private void setEnviroment() {\n+        perunUrl = getAttributes().get(\"perunUrl\");\n+        username = getAttributes().get(\"username\");\n+        password = getAttributes().get(\"password\");\n+        extSourceNameForLogin = getAttributes().get(\"extSourceNameForLogin\");\n+        BeansUtils.notNull(perunUrl, \"perunUrl\");\n+        BeansUtils.notNull(username, \"username\");\n+        BeansUtils.notNull(password, \"password\");\n+        BeansUtils.notNull(extSourceNameForLogin, \"extSourceNameForLogin\");\n+    }\n+\n+    private List<RichUser> convertListOfRichMembersToListOfRichUsers(List<RichMember> richMembers) {\n+        List<RichUser> richUsers = new ArrayList<>();\n+        if (richMembers == null || richMembers.isEmpty()) {\n+            return richUsers;\n+        }\n+\n+        for (RichMember rm : richMembers) {\n+            RichUser ru = new RichUser(rm.getUser(), rm.getUserExtSources(), rm.getUserAttributes());\n+            richUsers.add(ru);\n+        }\n+\n+        return richUsers;\n+    }\n+\n+    private Deserializer call(String managerName, String methodName) throws PerunException {\n+        return this.call(managerName, methodName, null);\n+    }\n+\n+    protected Deserializer call(String managerName, String methodName, String query) throws PerunException {\n+        //Prepare sending message\n+        HttpResponse response;\n+        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n+        httpClientBuilder.setDefaultCookieStore(cookieStore);\n+        HttpClient httpClient = httpClientBuilder.build();\n+\n+        String commandUrl = perunUrl + format + \"/\" + managerName + \"/\" + methodName;\n+        if (query != null) {\n+            commandUrl += \"?\" + query;\n+        }\n+\n+        HttpGet get = new HttpGet(commandUrl);\n+        get.setHeader(\"Content-Type\", \"application/json\");\n+        get.setHeader(\"charset\", StandardCharsets.UTF_8.toString());\n+        get.setHeader(\"Connection\", \"Close\");\n+        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n+\n+        get.addHeader(BasicScheme.authenticate(credentials, StandardCharsets.UTF_8.toString(), false));\n+        //post.setParams(params);\n+\n+        InputStream rpcServerAnswer = null;\n+\n+        try {\n+            response = httpClient.execute(get);\n+            rpcServerAnswer = response.getEntity().getContent();\n+        } catch (IOException ex) {\n+            this.processIOException(ex);\n+        }\n+\n+        JsonDeserializer des = null;\n+        try {\n+            des = new JsonDeserializer(rpcServerAnswer);\n+        } catch (IOException ex) {\n+            this.processIOException(ex);\n+        }\n+\n+        return des;\n+    }\n+\n+    private void processIOException(Throwable e) {\n+        this.processIOException(null, e);\n+    }\n+\n+    private void processIOException(HttpURLConnection con, Throwable e) {\n+        // Process known IOExceptions\n+        if (e instanceof ProtocolException) {\n+            throw new RpcException(RpcException.Type.COMMUNICATION_ERROR_WITH_PERUN_RPC_SERVER, \"Communication problem with Perun server on URL: \" + perunUrl, e);\n+        } else if (e instanceof UnknownHostException) {\n+            throw new RpcException(RpcException.Type.UNKNOWN_PERUN_RPC_SERVER, \"Perun server cannot be contacted on URL: \" + perunUrl, e);\n+        }\n+\n+        // If the connection has been provided, check the responseCode\n+        if (con != null) {\n+            // Check return code\n+            int responseCode;\n+            try {\n+                responseCode = con.getResponseCode();\n+\n+                if (responseCode != HttpURLConnection.HTTP_OK) {\n+                    throw new RpcException(RpcException.Type.PERUN_RPC_SERVER_ERROR_HTTP_CODE, \"Perun server on URL: \" + perunUrl + \" returned HTTP code: \" + responseCode, e);\n+                }\n+            } catch (IOException e1) {\n+                throw new RpcException(RpcException.Type.UNKNOWN_EXCEPTION, \"Failed to contact Perun server on URL: \" + perunUrl, e1);\n+            }\n+        }\n+\n+        throw new RpcException(RpcException.Type.UNKNOWN_EXCEPTION, \"Failed to contact Perun server on URL: \" + perunUrl, e);\n+    }\n+\n+    @Override\n+    public void close() {\n+        //not needed there\n+    }\n+\n+    @Override\n+    public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes) throws ExtSourceUnsupportedOperationException {\n+        throw new ExtSourceUnsupportedOperationException();\n+    }\n+\n+    protected Map<String, String> getAttributes() {\n+        return perunBl.getExtSourcesManagerBl().getAttributes(this);\n+    }\n }\n",
            "diff_size": 346
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/131/ExtSourcePerun.java\nindex d5675a30815..6bee9e9630f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/131/ExtSourcePerun.java\n@@ -316,7 +316,7 @@ public class ExtSourcePerun extends ExtSource implements ExtSourceApi {\n \t\tInputStream rpcServerAnswer = null;\n \n \t\ttry {\n-\t\t\t response = httpClient.execute(get);\n+\t\t\tresponse = httpClient.execute(get);\n \t\t\t rpcServerAnswer = response.getEntity().getContent();\n \t\t} catch(IOException ex) {\n \t\t\tthis.processIOException(ex);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/131/ExtSourcePerun.java\nindex d5675a30815..6bee9e9630f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/131/ExtSourcePerun.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/131/ExtSourcePerun.java\n@@ -316,7 +316,7 @@ public class ExtSourcePerun extends ExtSource implements ExtSourceApi {\n \t\tInputStream rpcServerAnswer = null;\n \n \t\ttry {\n-\t\t\t response = httpClient.execute(get);\n+\t\t\tresponse = httpClient.execute(get);\n \t\t\t rpcServerAnswer = response.getEntity().getContent();\n \t\t} catch(IOException ex) {\n \t\t\tthis.processIOException(ex);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}