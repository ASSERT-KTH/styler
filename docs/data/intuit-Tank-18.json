{
    "project_name": "intuit-Tank",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "36",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        if (step.getType().equals(getType())) {\n            for (RequestData requestData : step.getData()) {\n                if (requestData.getKey().equals(ScriptConstants.MAX_TIME) && requestData.getValue().equals(searchQuery)) {\n                    reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n                            step.getType()));\n                }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "column": "74",
                    "severity": "warning",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/18/MaxTimeReplacement.java\nindex 8bf751e1576..b38af4a9cbf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/18/MaxTimeReplacement.java\n@@ -33,7 +33,7 @@ public class MaxTimeReplacement extends AbstractReplacement {\n         List<ReplaceEntity> reList = new ArrayList<ReplaceEntity>();\n         if (step.getType().equals(getType())) {\n             for (RequestData requestData : step.getData()) {\n-                if (requestData.getKey().equals(ScriptConstants.MAX_TIME) && requestData.getValue().equals(searchQuery)) {\n+                if (requestData.getKey().equals(ScriptConstants.MAX_TIME)&& requestData .getValue().equals(searchQuery)) {\n                     reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n                             step.getType()));\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/18/MaxTimeReplacement.java\nindex 8bf751e1576..197900f26e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/18/MaxTimeReplacement.java\n@@ -23,27 +23,27 @@ import com.intuit.tank.search.script.ThinkTimeSection;\n \n public class MaxTimeReplacement extends AbstractReplacement {\n \n-    public MaxTimeReplacement() {\n-        super(ThinkTimeSection.maxTime, ScriptConstants.THINK_TIME);\n-    }\n+  public MaxTimeReplacement() {\n+    super(ThinkTimeSection.maxTime, ScriptConstants.THINK_TIME);\n+  }\n \n-    @Override\n-    public List<ReplaceEntity> getReplacements(ScriptStep step, String searchQuery, String replaceString,\n-            SearchMode searchMode) {\n-        List<ReplaceEntity> reList = new ArrayList<ReplaceEntity>();\n-        if (step.getType().equals(getType())) {\n-            for (RequestData requestData : step.getData()) {\n-                if (requestData.getKey().equals(ScriptConstants.MAX_TIME) && requestData.getValue().equals(searchQuery)) {\n-                    reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n-                            step.getType()));\n-                }\n-            }\n+  @Override\n+  public List<ReplaceEntity> getReplacements(ScriptStep step, String searchQuery, String replaceString,\n+                                             SearchMode searchMode) {\n+    List<ReplaceEntity> reList = new ArrayList<ReplaceEntity>();\n+    if (step.getType().equals(getType())) {\n+      for (RequestData requestData : step.getData()) {\n+        if (requestData.getKey().equals(ScriptConstants.MAX_TIME) && requestData.getValue().equals(searchQuery)) {\n+          reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n+            step.getType()));\n         }\n-        return reList;\n+      }\n     }\n+    return reList;\n+  }\n \n-    @Override\n-    public void replace(ScriptStep step, String replaceString, String key, ReplaceMode replaceMode) {\n-        replaceInRequestDatas(step.getData(), replaceString, ScriptConstants.MAX_TIME);\n-    }\n+  @Override\n+  public void replace(ScriptStep step, String replaceString, String key, ReplaceMode replaceMode) {\n+    replaceInRequestDatas(step.getData(), replaceString, ScriptConstants.MAX_TIME);\n+  }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/18/MaxTimeReplacement.java\nindex 8bf751e1576..468fce3deb5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/18/MaxTimeReplacement.java\n@@ -46,4 +46,4 @@ public class MaxTimeReplacement extends AbstractReplacement {\n     public void replace(ScriptStep step, String replaceString, String key, ReplaceMode replaceMode) {\n         replaceInRequestDatas(step.getData(), replaceString, ScriptConstants.MAX_TIME);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/18/MaxTimeReplacement.java\nindex 8bf751e1576..1c705eb7996 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/18/MaxTimeReplacement.java\n@@ -13,29 +13,32 @@ package com.intuit.tank.script.replace;\n  * #L%\n  */\n \n+\n+\n import java.util.ArrayList;\n import java.util.List;\n-\n import com.intuit.tank.project.RequestData;\n import com.intuit.tank.project.ScriptStep;\n import com.intuit.tank.script.ScriptConstants;\n import com.intuit.tank.search.script.ThinkTimeSection;\n \n+\n public class MaxTimeReplacement extends AbstractReplacement {\n \n     public MaxTimeReplacement() {\n-        super(ThinkTimeSection.maxTime, ScriptConstants.THINK_TIME);\n+        super(ThinkTimeSection.maxTime,\n+            ScriptConstants.THINK_TIME);\n     }\n \n     @Override\n-    public List<ReplaceEntity> getReplacements(ScriptStep step, String searchQuery, String replaceString,\n-            SearchMode searchMode) {\n+    public List<ReplaceEntity> getReplacements(ScriptStep step,\n+        String searchQuery,\n+            String replaceString, SearchMode searchMode) {\n         List<ReplaceEntity> reList = new ArrayList<ReplaceEntity>();\n         if (step.getType().equals(getType())) {\n             for (RequestData requestData : step.getData()) {\n                 if (requestData.getKey().equals(ScriptConstants.MAX_TIME) && requestData.getValue().equals(searchQuery)) {\n-                    reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n-                            step.getType()));\n+                    reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(), step.getType()));\n                 }\n             }\n         }\n@@ -44,6 +47,8 @@ public class MaxTimeReplacement extends AbstractReplacement {\n \n     @Override\n     public void replace(ScriptStep step, String replaceString, String key, ReplaceMode replaceMode) {\n-        replaceInRequestDatas(step.getData(), replaceString, ScriptConstants.MAX_TIME);\n+        replaceInRequestDatas(step.getData(),\n+                             replaceString,\n+                             ScriptConstants.MAX_TIME);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "column": "74",
                    "severity": "warning",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/18/MaxTimeReplacement.java\nindex 8bf751e1576..b38af4a9cbf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/18/MaxTimeReplacement.java\n@@ -33,7 +33,7 @@ public class MaxTimeReplacement extends AbstractReplacement {\n         List<ReplaceEntity> reList = new ArrayList<ReplaceEntity>();\n         if (step.getType().equals(getType())) {\n             for (RequestData requestData : step.getData()) {\n-                if (requestData.getKey().equals(ScriptConstants.MAX_TIME) && requestData.getValue().equals(searchQuery)) {\n+                if (requestData.getKey().equals(ScriptConstants.MAX_TIME)&& requestData .getValue().equals(searchQuery)) {\n                     reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n                             step.getType()));\n                 }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "column": "17",
                    "severity": "warning",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "37",
                    "column": "40",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "40",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "37",
                    "column": "42",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "65",
                    "severity": "warning",
                    "message": "'{' at column 65 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "37",
                    "column": "65",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "37",
                    "column": "65",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/18/MaxTimeReplacement.java\nindex 8bf751e1576..1cd04ad0db4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/18/MaxTimeReplacement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/18/MaxTimeReplacement.java\n@@ -33,8 +33,8 @@ public class MaxTimeReplacement extends AbstractReplacement {\n         List<ReplaceEntity> reList = new ArrayList<ReplaceEntity>();\n         if (step.getType().equals(getType())) {\n             for (RequestData requestData : step.getData()) {\n-                if (requestData.getKey().equals(ScriptConstants.MAX_TIME) && requestData.getValue().equals(searchQuery)) {\n-                    reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n+                if (requestData.getKey().equals(ScriptConstants.MAX_TIME)\n+                &&requestData.getValue ( ) .equals(searchQuery)){reList.addAll(getReplacementInValue(searchQuery, replaceString, requestData.getValue(),\n                             step.getType()));\n                 }\n             }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}