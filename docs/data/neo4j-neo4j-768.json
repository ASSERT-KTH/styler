{
    "project_name": "neo4j-neo4j",
    "error_id": "768",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/768/Nodes.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/768/Nodes.java\nindex fbbb4485678..c31defb8dc5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/768/Nodes.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/768/Nodes.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.helpers;\n \n import org.neo4j.graphdb.Direction;\n@@ -34,7 +35,7 @@ public final class Nodes\n {\n     private Nodes()\n     {\n-        throw new UnsupportedOperationException( \"Do not instantiate\" );\n+        throw new UnsupportedOperationException(\"Do not instantiate\");\n     }\n \n     /**\n@@ -45,9 +46,9 @@ public final class Nodes\n      * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n      * @return the number of outgoing - including loops - relationships from the node\n      */\n-    public static int countOutgoing( NodeCursor nodeCursor )\n+    public static int countOutgoing(NodeCursor nodeCursor)\n     {\n-        return count( nodeCursor, OUTGOING );\n+        return count(nodeCursor, OUTGOING);\n     }\n \n     /**\n@@ -56,12 +57,12 @@ public final class Nodes\n      * NOTE: The number of outgoing relationships also includes eventual loops.\n      *\n      * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param type the type of the relationship we're counting\n+     * @param type       the type of the relationship we're counting\n      * @return the number of outgoing - including loops - relationships from the node with the given type\n      */\n-    public static int countOutgoing( NodeCursor nodeCursor, int type )\n+    public static int countOutgoing(NodeCursor nodeCursor, int type)\n     {\n-        return count( nodeCursor, type, OUTGOING );\n+        return count(nodeCursor, type, OUTGOING);\n     }\n \n     /**\n@@ -72,9 +73,9 @@ public final class Nodes\n      * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n      * @return the number of incoming - including loops - relationships from the node\n      */\n-    public static int countIncoming( NodeCursor nodeCursor )\n+    public static int countIncoming(NodeCursor nodeCursor)\n     {\n-        return count( nodeCursor, INCOMING );\n+        return count(nodeCursor, INCOMING);\n     }\n \n     /**\n@@ -83,12 +84,12 @@ public final class Nodes\n      * NOTE: The number of incoming relationships also includes eventual loops.\n      *\n      * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param type the type of the relationship we're counting\n+     * @param type       the type of the relationship we're counting\n      * @return the number of incoming - including loops - relationships from the node with the given type\n      */\n-    public static int countIncoming( NodeCursor nodeCursor, int type )\n+    public static int countIncoming(NodeCursor nodeCursor, int type)\n     {\n-        return count( nodeCursor, type, INCOMING );\n+        return count(nodeCursor, type, INCOMING);\n     }\n \n     /**\n@@ -97,40 +98,40 @@ public final class Nodes\n      * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n      * @return the number of relationships from the node\n      */\n-    public static int countAll( NodeCursor nodeCursor )\n+    public static int countAll(NodeCursor nodeCursor)\n     {\n-        return count( nodeCursor, BOTH );\n+        return count(nodeCursor, BOTH);\n     }\n \n     /**\n      * Counts all the relationships of the given type from node where the cursor is positioned.\n      *\n      * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param type the type of the relationship we're counting\n+     * @param type       the type of the relationship we're counting\n      * @return the number relationships from the node with the given type\n      */\n-    public static int countAll( NodeCursor nodeCursor, int type )\n+    public static int countAll(NodeCursor nodeCursor, int type)\n     {\n-        return count( nodeCursor, type, BOTH );\n+        return count(nodeCursor, type, BOTH);\n     }\n \n-    public static int count( NodeCursor nodeCursor, int type, Direction direction )\n+    public static int count(NodeCursor nodeCursor, int type, Direction direction)\n     {\n-        return nodeCursor.degree( selection( type, direction ) );\n+        return nodeCursor.degree(selection(type, direction));\n     }\n \n-    public static int count( NodeCursor nodeCursor, Direction direction )\n+    public static int count(NodeCursor nodeCursor, Direction direction)\n     {\n-        return nodeCursor.degree( selection( direction ) );\n+        return nodeCursor.degree(selection(direction));\n     }\n \n-    public static int countWithMax( int maxDegree, NodeCursor nodeCursor, Direction direction )\n+    public static int countWithMax(int maxDegree, NodeCursor nodeCursor, Direction direction)\n     {\n-        return nodeCursor.degreeWithMax( maxDegree, selection( direction ));\n+        return nodeCursor.degreeWithMax(maxDegree, selection(direction));\n     }\n \n-    public static int countWithMax( int maxDegree, NodeCursor nodeCursor, int type, Direction direction )\n+    public static int countWithMax(int maxDegree, NodeCursor nodeCursor, int type, Direction direction)\n     {\n-        return nodeCursor.degreeWithMax( maxDegree, selection( type, direction ));\n+        return nodeCursor.degreeWithMax(maxDegree, selection(type, direction));\n     }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}