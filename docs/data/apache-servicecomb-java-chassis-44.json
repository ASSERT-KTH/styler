{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "106",
                "column": "89",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "      }\n      throw new OperationException(\n          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\" +\n              httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n    } catch (Exception e) {\n      LOGGER.error(\"query configuration from {} failed, message={}\", url, e.getMessage());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/44/KieClient.java\nindex bd8450501b1..34185e3b02e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/44/KieClient.java\n@@ -103,8 +103,8 @@ public class KieClient implements KieConfigOperation {\n         return configurationsResponse;\n       }\n       throw new OperationException(\n-          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\" +\n-              httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n+          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\"\n+              + httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n     } catch (Exception e) {\n       LOGGER.error(\"query configuration from {} failed, message={}\", url, e.getMessage());\n       throw new OperationException(\"read response failed. \", e);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "106",
                    "column": "89",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/44/KieClient.java\nindex bd8450501b1..fc84620c726 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/44/KieClient.java\n@@ -71,11 +71,11 @@ public class KieClient implements KieConfigOperation {\n         + DEFAULT_KIE_API_VERSION\n         + \"/\"\n         + kieConfiguration.getProject()\n-        + \"/kie/kv?\"\n+    + \"/kie/kv?\"\n         + request.getLabelsQuery()\n-        + \"&revision=\"\n+    + \"&revision=\"\n         + request.getRevision()\n-        + \"&withExact=\"\n+    + \"&withExact=\"\n         + request.isWithExact();\n \n     try {\n@@ -103,8 +103,7 @@ public class KieClient implements KieConfigOperation {\n         return configurationsResponse;\n       }\n       throw new OperationException(\n-          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\" +\n-              httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n+          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\" + httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n     } catch (Exception e) {\n       LOGGER.error(\"query configuration from {} failed, message={}\", url, e.getMessage());\n       throw new OperationException(\"read response failed. \", e);\n@@ -145,7 +144,7 @@ public class KieClient implements KieConfigOperation {\n         default:\n           kvMap.put(kvDoc.getKey(), kvDoc.getValue());\n           return kvMap;\n-      }\n+  }\n     } catch (Exception e) {\n       LOGGER.error(\"read config failed\");\n     }\n@@ -166,4 +165,4 @@ public class KieClient implements KieConfigOperation {\n     }\n     return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/44/KieClient.java\nindex bd8450501b1..747cc2a9ae3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/44/KieClient.java\n@@ -24,7 +24,6 @@ import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n import java.util.stream.Collectors;\n-\n import org.apache.http.HttpStatus;\n import org.apache.servicecomb.config.kie.client.exception.OperationException;\n import org.apache.servicecomb.config.kie.client.model.ConfigConstants;\n@@ -45,7 +44,6 @@ import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n import org.springframework.core.io.ByteArrayResource;\n \n public class KieClient implements KieConfigOperation {\n-\n   private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n \n   protected HttpTransport httpTransport;\n@@ -66,18 +64,7 @@ public class KieClient implements KieConfigOperation {\n \n   @Override\n   public ConfigurationsResponse queryConfigurations(ConfigurationsRequest request) {\n-    String url = addressManager.address()\n-        + \"/\"\n-        + DEFAULT_KIE_API_VERSION\n-        + \"/\"\n-        + kieConfiguration.getProject()\n-        + \"/kie/kv?\"\n-        + request.getLabelsQuery()\n-        + \"&revision=\"\n-        + request.getRevision()\n-        + \"&withExact=\"\n-        + request.isWithExact();\n-\n+    String url = addressManager.address() + \"/\" + DEFAULT_KIE_API_VERSION + \"/\" + kieConfiguration.getProject() + \"/kie/kv?\" + request.getLabelsQuery() + \"&revision=\" + request.getRevision() + \"&withExact=\" + request.isWithExact();\n     try {\n       if (kieConfiguration.isEnableLongPolling()) {\n         url += \"&wait=\" + kieConfiguration.getPollingWaitInSeconds() + \"s\";\n@@ -88,6 +75,7 @@ public class KieClient implements KieConfigOperation {\n       ConfigurationsResponse configurationsResponse = new ConfigurationsResponse();\n       if (httpResponse.getStatusCode() == HttpStatus.SC_OK) {\n         revision = httpResponse.getHeader(\"X-Kie-Revision\");\n+\n         KVResponse allConfigList = HttpUtils.deserialize(httpResponse.getContent(), KVResponse.class);\n         Map<String, Object> configurations = getConfigByLabel(allConfigList);\n         configurationsResponse.setConfigurations(configurations);\n@@ -95,16 +83,17 @@ public class KieClient implements KieConfigOperation {\n         configurationsResponse.setRevision(revision);\n         return configurationsResponse;\n       }\n+\n       if (httpResponse.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n         throw new OperationException(\"Bad request for query configurations.\");\n       }\n+\n       if (httpResponse.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n         configurationsResponse.setChanged(false);\n         return configurationsResponse;\n       }\n-      throw new OperationException(\n-          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\" +\n-              httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n+\n+      throw new OperationException(\"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\" + httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n     } catch (Exception e) {\n       LOGGER.error(\"query configuration from {} failed, message={}\", url, e.getMessage());\n       throw new OperationException(\"read response failed. \", e);\n@@ -114,10 +103,9 @@ public class KieClient implements KieConfigOperation {\n   private Map<String, Object> getConfigByLabel(KVResponse resp) {\n     Map<String, Object> resultMap = new HashMap<>();\n     resp.getData().stream()\n-        .filter(doc -> doc.getStatus() == null || ConfigConstants.STATUS_ENABLED.equalsIgnoreCase(doc.getStatus()))\n-        .map(this::processValueType)\n-        .collect(Collectors.toList())\n-        .forEach(resultMap::putAll);\n+                  .filter(doc -> doc.getStatus() == null || ConfigConstants.STATUS_ENABLED.equalsIgnoreCase(doc.getStatus()))\n+                  .map(this::processValueType)\n+                  .collect(Collectors.toList()).forEach(resultMap::putAll);\n     return resultMap;\n   }\n \n@@ -128,6 +116,7 @@ public class KieClient implements KieConfigOperation {\n     } catch (IllegalArgumentException e) {\n       throw new OperationException(\"value type not support\");\n     }\n+\n     Properties properties = new Properties();\n     Map<String, Object> kvMap = new HashMap<>();\n     try {\n@@ -141,8 +130,7 @@ public class KieClient implements KieConfigOperation {\n           properties.load(new StringReader(kvDoc.getValue()));\n           return toMap(properties);\n         case text:\n-        case string:\n-        default:\n+        case string: default:\n           kvMap.put(kvDoc.getKey(), kvDoc.getValue());\n           return kvMap;\n       }\n@@ -157,6 +145,7 @@ public class KieClient implements KieConfigOperation {\n     if (properties == null) {\n       return Collections.emptyMap();\n     }\n+\n     Map<String, Object> result = new HashMap<>();\n     Enumeration<String> keys = (Enumeration<String>) properties.propertyNames();\n     while (keys.hasMoreElements()) {\n@@ -166,4 +155,4 @@ public class KieClient implements KieConfigOperation {\n     }\n     return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "106",
                    "column": "89",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/44/KieClient.java\nindex bd8450501b1..34185e3b02e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/44/KieClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/44/KieClient.java\n@@ -103,8 +103,8 @@ public class KieClient implements KieConfigOperation {\n         return configurationsResponse;\n       }\n       throw new OperationException(\n-          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\" +\n-              httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n+          \"read response failed. status:\" + httpResponse.getStatusCode() + \"; message:\"\n+              + httpResponse.getMessage() + \"; content:\" + httpResponse.getContent());\n     } catch (Exception e) {\n       LOGGER.error(\"query configuration from {} failed, message={}\", url, e.getMessage());\n       throw new OperationException(\"read response failed. \", e);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}