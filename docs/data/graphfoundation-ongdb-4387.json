{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4387",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4387/TraversalAStar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4387/TraversalAStar.java\nindex 08401803519..eae54267f07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4387/TraversalAStar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4387/TraversalAStar.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.path;\n \n import org.neo4j.graphalgo.CostEvaluator;\n@@ -50,146 +51,145 @@ import static org.neo4j.graphdb.traversal.InitialBranchState.NO_STATE;\n  */\n public class TraversalAStar implements PathFinder<WeightedPath>\n {\n-    private final CostEvaluator<Double> costEvaluator;\n-    private final PathExpander expander;\n-    private final InitialBranchState initialState;\n-    private Traverser lastTraverser;\n-\n-    private final EstimateEvaluator<Double> estimateEvaluator;\n-    private boolean stopAfterLowestWeight;\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    public <T> TraversalAStar( PathExpander<T> expander,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+  private final CostEvaluator<Double> costEvaluator;\n+  private final PathExpander expander;\n+  private final InitialBranchState initialState;\n+  private Traverser lastTraverser;\n+\n+  private final EstimateEvaluator<Double> estimateEvaluator;\n+  private boolean stopAfterLowestWeight;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> TraversalAStar(PathExpander<T> expander,\n+                            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator)\n+  {\n+    this(expander, NO_STATE, costEvaluator, estimateEvaluator, true);\n+  }\n+\n+  public <T> TraversalAStar(PathExpander<T> expander, InitialBranchState<T> initialState,\n+                            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator)\n+  {\n+    this(expander, initialState, costEvaluator, estimateEvaluator, true);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> TraversalAStar(PathExpander<T> expander,\n+                            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n+                            boolean stopAfterLowestWeight)\n+  {\n+    this(expander, NO_STATE, costEvaluator, estimateEvaluator, stopAfterLowestWeight);\n+  }\n+\n+  public <T> TraversalAStar(PathExpander<T> expander, InitialBranchState<T> initialState,\n+                            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n+                            boolean stopAfterLowestWeight)\n+  {\n+    this.costEvaluator = costEvaluator;\n+    this.estimateEvaluator = estimateEvaluator;\n+    this.stopAfterLowestWeight = stopAfterLowestWeight;\n+    this.expander = expander;\n+    this.initialState = initialState;\n+  }\n+\n+  @Override\n+  public Iterable<WeightedPath> findAllPaths(Node start, final Node end)\n+  {\n+    return Iterables.asIterable(findSinglePath(start, end));\n+  }\n+\n+  @Override\n+  public WeightedPath findSinglePath(Node start, Node end)\n+  {\n+    return Iterables.firstOrNull(findPaths(start, end, false));\n+  }\n+\n+  private ResourceIterable<WeightedPath> findPaths(Node start, Node end, boolean multiplePaths)\n+  {\n+    PathInterest interest;\n+    if (multiplePaths)\n     {\n-        this( expander, NO_STATE, costEvaluator, estimateEvaluator, true );\n-    }\n-\n-    public <T> TraversalAStar( PathExpander<T> expander, InitialBranchState<T> initialState,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+      interest = stopAfterLowestWeight ? PathInterestFactory.allShortest() : PathInterestFactory.all();\n+    } else\n     {\n-        this( expander, initialState, costEvaluator, estimateEvaluator, true );\n+      interest = PathInterestFactory.single();\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public <T> TraversalAStar( PathExpander<T> expander,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n-            boolean stopAfterLowestWeight )\n+    GraphDatabaseService db = start.getGraphDatabase();\n+    TraversalDescription traversalDescription = db.traversalDescription().uniqueness(Uniqueness.NONE)\n+        .expand(expander, initialState);\n+\n+    lastTraverser = traversalDescription.order(\n+        new SelectorFactory(end, interest))\n+        .evaluator(includeWhereEndNodeIs(end))\n+        .traverse(start);\n+    return Iterators.asResourceIterable(\n+        new WeightedPathIterator(lastTraverser.iterator(), costEvaluator, stopAfterLowestWeight));\n+  }\n+\n+  @Override\n+  public TraversalMetadata metadata()\n+  {\n+    return lastTraverser.metadata();\n+  }\n+\n+  private static class PositionData implements Comparable<PositionData>\n+  {\n+    private final double wayLengthG;\n+    private final double estimateH;\n+\n+    PositionData(double wayLengthG, double estimateH)\n     {\n-        this( expander, NO_STATE, costEvaluator, estimateEvaluator, stopAfterLowestWeight );\n+      this.wayLengthG = wayLengthG;\n+      this.estimateH = estimateH;\n     }\n \n-    public <T> TraversalAStar( PathExpander<T> expander, InitialBranchState<T> initialState,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n-            boolean stopAfterLowestWeight )\n+    Double f()\n     {\n-        this.costEvaluator = costEvaluator;\n-        this.estimateEvaluator = estimateEvaluator;\n-        this.stopAfterLowestWeight = stopAfterLowestWeight;\n-        this.expander = expander;\n-        this.initialState = initialState;\n+      return this.estimateH + this.wayLengthG;\n     }\n \n     @Override\n-    public Iterable<WeightedPath> findAllPaths( Node start, final Node end )\n+    public int compareTo(PositionData o)\n     {\n-        return Iterables.asIterable( findSinglePath( start, end ) );\n+      return f().compareTo(o.f());\n     }\n \n     @Override\n-    public WeightedPath findSinglePath( Node start, Node end )\n+    public String toString()\n     {\n-        return Iterables.firstOrNull( findPaths( start, end, false ) );\n+      return \"g:\" + wayLengthG + \", h:\" + estimateH;\n     }\n+  }\n+\n+  private class SelectorFactory extends BestFirstSelectorFactory<PositionData, Double>\n+  {\n+    private final Node end;\n \n-    private ResourceIterable<WeightedPath> findPaths( Node start, Node end, boolean multiplePaths )\n+    SelectorFactory(Node end, PathInterest interest)\n     {\n-        PathInterest interest;\n-        if ( multiplePaths )\n-        {\n-            interest = stopAfterLowestWeight ? PathInterestFactory.allShortest() : PathInterestFactory.all();\n-        }\n-        else\n-        {\n-            interest = PathInterestFactory.single();\n-        }\n-\n-        GraphDatabaseService db = start.getGraphDatabase();\n-        TraversalDescription traversalDescription = db.traversalDescription().uniqueness( Uniqueness.NONE )\n-                .expand( expander, initialState );\n-\n-        lastTraverser = traversalDescription.order(\n-                new SelectorFactory( end, interest ) )\n-                .evaluator( includeWhereEndNodeIs( end ) )\n-                .traverse( start );\n-        return Iterators.asResourceIterable(\n-                new WeightedPathIterator( lastTraverser.iterator(), costEvaluator, stopAfterLowestWeight ) );\n+      super(interest);\n+      this.end = end;\n     }\n \n     @Override\n-    public TraversalMetadata metadata()\n+    protected PositionData addPriority(TraversalBranch source,\n+                                       PositionData currentAggregatedValue, Double value)\n     {\n-        return lastTraverser.metadata();\n+      return new PositionData(currentAggregatedValue.wayLengthG + value,\n+          estimateEvaluator.getCost(source.endNode(), end));\n     }\n \n-    private static class PositionData implements Comparable<PositionData>\n+    @Override\n+    protected Double calculateValue(TraversalBranch next)\n     {\n-        private final double wayLengthG;\n-        private final double estimateH;\n-\n-        PositionData( double wayLengthG, double estimateH )\n-        {\n-            this.wayLengthG = wayLengthG;\n-            this.estimateH = estimateH;\n-        }\n-\n-        Double f()\n-        {\n-            return this.estimateH + this.wayLengthG;\n-        }\n-\n-        @Override\n-        public int compareTo( PositionData o )\n-        {\n-            return f().compareTo( o.f() );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"g:\" + wayLengthG + \", h:\" + estimateH;\n-        }\n+      return next.length() == 0 ? 0d :\n+          costEvaluator.getCost(next.lastRelationship(), Direction.OUTGOING);\n     }\n \n-    private class SelectorFactory extends BestFirstSelectorFactory<PositionData, Double>\n+    @Override\n+    protected PositionData getStartData()\n     {\n-        private final Node end;\n-\n-        SelectorFactory( Node end, PathInterest interest )\n-        {\n-            super( interest );\n-            this.end = end;\n-        }\n-\n-        @Override\n-        protected PositionData addPriority( TraversalBranch source,\n-                PositionData currentAggregatedValue, Double value )\n-        {\n-            return new PositionData( currentAggregatedValue.wayLengthG + value,\n-                    estimateEvaluator.getCost( source.endNode(), end ) );\n-        }\n-\n-        @Override\n-        protected Double calculateValue( TraversalBranch next )\n-        {\n-            return next.length() == 0 ? 0d :\n-                costEvaluator.getCost( next.lastRelationship(), Direction.OUTGOING );\n-        }\n-\n-        @Override\n-        protected PositionData getStartData()\n-        {\n-            return new PositionData( 0, 0 );\n-        }\n+      return new PositionData(0, 0);\n     }\n+  }\n }\n",
            "diff_size": 189
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4387/TraversalAStar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4387/TraversalAStar.java\nindex 08401803519..d71f5c3bd67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4387/TraversalAStar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4387/TraversalAStar.java\n@@ -59,28 +59,24 @@ public class TraversalAStar implements PathFinder<WeightedPath>\n     private boolean stopAfterLowestWeight;\n \n     @SuppressWarnings( \"unchecked\" )\n-    public <T> TraversalAStar( PathExpander<T> expander,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+    public <T> TraversalAStar( PathExpander<T> expander, CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n     {\n         this( expander, NO_STATE, costEvaluator, estimateEvaluator, true );\n     }\n \n-    public <T> TraversalAStar( PathExpander<T> expander, InitialBranchState<T> initialState,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n+    public <T> TraversalAStar( PathExpander<T> expander, InitialBranchState<T> initialState, CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator )\n     {\n         this( expander, initialState, costEvaluator, estimateEvaluator, true );\n     }\n \n     @SuppressWarnings( \"unchecked\" )\n-    public <T> TraversalAStar( PathExpander<T> expander,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n+    public <T> TraversalAStar( PathExpander<T> expander, CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n             boolean stopAfterLowestWeight )\n     {\n         this( expander, NO_STATE, costEvaluator, estimateEvaluator, stopAfterLowestWeight );\n     }\n \n-    public <T> TraversalAStar( PathExpander<T> expander, InitialBranchState<T> initialState,\n-            CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n+    public <T> TraversalAStar( PathExpander<T> expander, InitialBranchState<T> initialState, CostEvaluator<Double> costEvaluator, EstimateEvaluator<Double> estimateEvaluator,\n             boolean stopAfterLowestWeight )\n     {\n         this.costEvaluator = costEvaluator;\n@@ -115,15 +111,9 @@ public class TraversalAStar implements PathFinder<WeightedPath>\n         }\n \n         GraphDatabaseService db = start.getGraphDatabase();\n-        TraversalDescription traversalDescription = db.traversalDescription().uniqueness( Uniqueness.NONE )\n-                .expand( expander, initialState );\n-\n-        lastTraverser = traversalDescription.order(\n-                new SelectorFactory( end, interest ) )\n-                .evaluator( includeWhereEndNodeIs( end ) )\n-                .traverse( start );\n-        return Iterators.asResourceIterable(\n-                new WeightedPathIterator( lastTraverser.iterator(), costEvaluator, stopAfterLowestWeight ) );\n+        TraversalDescription traversalDescription = db.traversalDescription().uniqueness( Uniqueness.NONE ).expand( expander, initialState );\n+lastTraverser = traversalDescription.order( new SelectorFactory( end, interest ) ).evaluator( includeWhereEndNodeIs( end ) ).traverse( start );\n+return Iterators.asResourceIterable( new WeightedPathIterator( lastTraverser.iterator(), costEvaluator, stopAfterLowestWeight ) );\n     }\n \n     @Override\n@@ -184,7 +174,7 @@ public class TraversalAStar implements PathFinder<WeightedPath>\n         {\n             return next.length() == 0 ? 0d :\n                 costEvaluator.getCost( next.lastRelationship(), Direction.OUTGOING );\n-        }\n+    }\n \n         @Override\n         protected PositionData getStartData()\n@@ -192,4 +182,4 @@ public class TraversalAStar implements PathFinder<WeightedPath>\n             return new PositionData( 0, 0 );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}