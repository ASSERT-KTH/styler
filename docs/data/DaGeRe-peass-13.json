{
    "project_name": "DaGeRe-peass",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "69",
                "column": "79",
                "severity": "error",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n   private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() &&\n            statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n   }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/13/DifferentNodeDeterminer.java\nindex 251395b554f..fe8e6d48ad1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/13/DifferentNodeDeterminer.java\n@@ -66,8 +66,7 @@ public abstract class DifferentNodeDeterminer {\n    }\n \n    private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n-      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() &&\n-            statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n+      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() && statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n    }\n \n    private List<CallTreeNode> buildCurrentDiffering(final CallTreeNode currentPredecessorNode) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "40",
                    "column": "43",
                    "severity": "error",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                },
                {
                    "line": "69",
                    "column": "77",
                    "severity": "error",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/13/DifferentNodeDeterminer.java\nindex 251395b554f..3f0e2e11d89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/13/DifferentNodeDeterminer.java\n@@ -17,78 +17,78 @@ import de.peass.measurement.rca.data.CallTreeNode;\n \n public abstract class DifferentNodeDeterminer {\n \n-   private static final Logger LOG = LogManager.getLogger(DifferentNodeDeterminer.class);\n-\n-   protected List<CallTreeNode> measurePredecessor = new LinkedList<>();\n-\n-   protected final List<CallTreeNode> measureNextlevelPredecessor = new LinkedList<>();\n-   protected final List<CallTreeNode> measureNextLevel = new LinkedList<>();\n-\n-   protected final List<CallTreeNode> currentLevelDifferent = new LinkedList<>();\n-\n-   protected final CauseSearcherConfig causeSearchConfig;\n-   protected final MeasurementConfiguration measurementConfig;\n-\n-   public DifferentNodeDeterminer(final CauseSearcherConfig causeSearchConfig, final MeasurementConfiguration measurementConfig) {\n-      this.causeSearchConfig = causeSearchConfig;\n-      this.measurementConfig = measurementConfig;\n-   }\n-\n-   public void calculateDiffering() {\n-      final Iterator<CallTreeNode> predecessorIterator = measurePredecessor.iterator();\n-      // final Iterator<CallTreeNode> currentIterator = needToMeasureCurrent.iterator();\n-      for (; predecessorIterator.hasNext();) {\n-         final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n-         // final CallTreeNode currentVersionNode = currentIterator.next();\n-         final SummaryStatistics statisticsPredecessor = currentPredecessorNode.getStatistics(measurementConfig.getVersionOld());\n-         final SummaryStatistics statisticsVersion = currentPredecessorNode.getStatistics(measurementConfig.getVersion());\n-         LOG.debug(\"Comparison {} - {}\",\n-               currentPredecessorNode.getKiekerPattern(),\n-               currentPredecessorNode.getOtherVersionNode() != null ? currentPredecessorNode.getOtherVersionNode().getKiekerPattern() : null);\n-         LOG.debug(\"Current: {} {} Predecessor: {} {}\",\n-               statisticsVersion.getMean(), statisticsVersion.getStandardDeviation(),\n-               statisticsPredecessor.getMean(), statisticsPredecessor.getStandardDeviation());\n-         final Relation relation = StatisticUtil.agnosticTTest(statisticsPredecessor, statisticsVersion, measurementConfig);\n-         if (relation == Relation.UNEQUAL && needsEnoughTime(statisticsPredecessor, statisticsVersion)) {\n-            measureNextlevelPredecessor.addAll(currentPredecessorNode.getChildren());\n-            final List<CallTreeNode> currentNodes = buildCurrentDiffering(currentPredecessorNode);\n-            measureNextLevel.addAll(currentNodes);\n-\n-            final int childsRemeasure = getRemeasureChilds(currentPredecessorNode);\n-\n-            if (childsRemeasure == 0) {\n-               LOG.debug(\"Adding {} - no childs needs to be remeasured, T={}\", currentPredecessorNode, childsRemeasure, TestUtils.t(statisticsPredecessor, statisticsVersion));\n-               LOG.debug(\"Childs: {}\", currentPredecessorNode.getChildren());\n-               currentLevelDifferent.add(currentPredecessorNode);\n-            }\n-         }\n+  private static final Logger LOG = LogManager.getLogger(DifferentNodeDeterminer.class);\n+\n+  protected List<CallTreeNode> measurePredecessor = new LinkedList<>();\n+\n+  protected final List<CallTreeNode> measureNextlevelPredecessor = new LinkedList<>();\n+  protected final List<CallTreeNode> measureNextLevel = new LinkedList<>();\n+\n+  protected final List<CallTreeNode> currentLevelDifferent = new LinkedList<>();\n+\n+  protected final CauseSearcherConfig causeSearchConfig;\n+  protected final MeasurementConfiguration measurementConfig;\n+\n+  public DifferentNodeDeterminer(final CauseSearcherConfig causeSearchConfig, final MeasurementConfiguration measurementConfig) {\n+    this.causeSearchConfig = causeSearchConfig;\n+    this.measurementConfig = measurementConfig;\n+  }\n+\n+  public void calculateDiffering() {\n+    final Iterator<CallTreeNode> predecessorIterator = measurePredecessor.iterator();\n+    // final Iterator<CallTreeNode> currentIterator = needToMeasureCurrent.iterator();\n+    for (; predecessorIterator.hasNext(); ) {\n+      final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n+      // final CallTreeNode currentVersionNode = currentIterator.next();\n+      final SummaryStatistics statisticsPredecessor = currentPredecessorNode.getStatistics(measurementConfig.getVersionOld());\n+      final SummaryStatistics statisticsVersion = currentPredecessorNode.getStatistics(measurementConfig.getVersion());\n+      LOG.debug(\"Comparison {} - {}\",\n+          currentPredecessorNode.getKiekerPattern(),\n+          currentPredecessorNode.getOtherVersionNode() != null ? currentPredecessorNode.getOtherVersionNode().getKiekerPattern() : null);\n+      LOG.debug(\"Current: {} {} Predecessor: {} {}\",\n+          statisticsVersion.getMean(), statisticsVersion.getStandardDeviation(),\n+          statisticsPredecessor.getMean(), statisticsPredecessor.getStandardDeviation());\n+      final Relation relation = StatisticUtil.agnosticTTest(statisticsPredecessor, statisticsVersion, measurementConfig);\n+      if (relation == Relation.UNEQUAL && needsEnoughTime(statisticsPredecessor, statisticsVersion)) {\n+        measureNextlevelPredecessor.addAll(currentPredecessorNode.getChildren());\n+        final List<CallTreeNode> currentNodes = buildCurrentDiffering(currentPredecessorNode);\n+        measureNextLevel.addAll(currentNodes);\n+\n+        final int childsRemeasure = getRemeasureChilds(currentPredecessorNode);\n+\n+        if (childsRemeasure == 0) {\n+          LOG.debug(\"Adding {} - no childs needs to be remeasured, T={}\", currentPredecessorNode, childsRemeasure, TestUtils.t(statisticsPredecessor, statisticsVersion));\n+          LOG.debug(\"Childs: {}\", currentPredecessorNode.getChildren());\n+          currentLevelDifferent.add(currentPredecessorNode);\n+        }\n       }\n-   }\n-\n-   private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n-      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() &&\n-            statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n-   }\n-\n-   private List<CallTreeNode> buildCurrentDiffering(final CallTreeNode currentPredecessorNode) {\n-      final List<CallTreeNode> currentNodes = new LinkedList<>();\n-      currentPredecessorNode.getChildren().forEach(node -> currentNodes.add(node.getOtherVersionNode()));\n-      return currentNodes;\n-   }\n-\n-   private int getRemeasureChilds(final CallTreeNode predecessorNode) {\n-      int childsRemeasure = 0;\n-      LOG.debug(\"Children: {}\", predecessorNode.getChildren().size());\n-      for (final CallTreeNode testChild : predecessorNode.getChildren()) {\n-         LOG.debug(\"Child: {} Parent: {}\", testChild, measureNextlevelPredecessor);\n-         if (measureNextlevelPredecessor.contains(testChild)) {\n-            childsRemeasure++;\n-         }\n+    }\n+  }\n+\n+  private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n+    return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() &&\n+        statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n+  }\n+\n+  private List<CallTreeNode> buildCurrentDiffering(final CallTreeNode currentPredecessorNode) {\n+    final List<CallTreeNode> currentNodes = new LinkedList<>();\n+    currentPredecessorNode.getChildren().forEach(node -> currentNodes.add(node.getOtherVersionNode()));\n+    return currentNodes;\n+  }\n+\n+  private int getRemeasureChilds(final CallTreeNode predecessorNode) {\n+    int childsRemeasure = 0;\n+    LOG.debug(\"Children: {}\", predecessorNode.getChildren().size());\n+    for (final CallTreeNode testChild : predecessorNode.getChildren()) {\n+      LOG.debug(\"Child: {} Parent: {}\", testChild, measureNextlevelPredecessor);\n+      if (measureNextlevelPredecessor.contains(testChild)) {\n+        childsRemeasure++;\n       }\n-      return childsRemeasure;\n-   }\n+    }\n+    return childsRemeasure;\n+  }\n \n-   public List<CallTreeNode> getCurrentLevelDifferent() {\n-      return currentLevelDifferent;\n-   }\n+  public List<CallTreeNode> getCurrentLevelDifferent() {\n+    return currentLevelDifferent;\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/13/DifferentNodeDeterminer.java\nindex 251395b554f..de6c851a5a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/13/DifferentNodeDeterminer.java\n@@ -3,92 +3,83 @@ package de.peass.measurement.rca.treeanalysis;\n import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n-\n import org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n import org.apache.commons.math3.stat.inference.TestUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-\n import de.peass.dependency.execution.MeasurementConfiguration;\n import de.peass.measurement.analysis.Relation;\n import de.peass.measurement.analysis.StatisticUtil;\n import de.peass.measurement.rca.CauseSearcherConfig;\n import de.peass.measurement.rca.data.CallTreeNode;\n \n-public abstract class DifferentNodeDeterminer {\n-\n-   private static final Logger LOG = LogManager.getLogger(DifferentNodeDeterminer.class);\n-\n-   protected List<CallTreeNode> measurePredecessor = new LinkedList<>();\n-\n-   protected final List<CallTreeNode> measureNextlevelPredecessor = new LinkedList<>();\n-   protected final List<CallTreeNode> measureNextLevel = new LinkedList<>();\n-\n-   protected final List<CallTreeNode> currentLevelDifferent = new LinkedList<>();\n-\n-   protected final CauseSearcherConfig causeSearchConfig;\n-   protected final MeasurementConfiguration measurementConfig;\n-\n-   public DifferentNodeDeterminer(final CauseSearcherConfig causeSearchConfig, final MeasurementConfiguration measurementConfig) {\n-      this.causeSearchConfig = causeSearchConfig;\n-      this.measurementConfig = measurementConfig;\n-   }\n \n-   public void calculateDiffering() {\n-      final Iterator<CallTreeNode> predecessorIterator = measurePredecessor.iterator();\n+public abstract class DifferentNodeDeterminer {\n+ private static final Logger LOG = LogManager.getLogger(DifferentNodeDeterminer.class);\n+ protected List<CallTreeNode> measurePredecessor = new LinkedList<>();\n+ protected final List<CallTreeNode> measureNextlevelPredecessor = new LinkedList<>();\n+ protected final List<CallTreeNode> measureNextLevel = new LinkedList<>();\n+ protected final List<CallTreeNode> currentLevelDifferent = new LinkedList<>();\n+ protected final CauseSearcherConfig causeSearchConfig;\n+ protected final MeasurementConfiguration measurementConfig;\n+\n+ public DifferentNodeDeterminer(final CauseSearcherConfig causeSearchConfig, final MeasurementConfiguration measurementConfig) {\n+  this.causeSearchConfig = causeSearchConfig;\n+  this.measurementConfig = measurementConfig;\n+ }\n+\n+\n+ public void calculateDiffering() {\n+  final Iterator<CallTreeNode> predecessorIterator = measurePredecessor.iterator();\n       // final Iterator<CallTreeNode> currentIterator = needToMeasureCurrent.iterator();\n-      for (; predecessorIterator.hasNext();) {\n-         final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n+  for (; predecessorIterator.hasNext();) {\n+   final CallTreeNode currentPredecessorNode = predecessorIterator.next();\n          // final CallTreeNode currentVersionNode = currentIterator.next();\n-         final SummaryStatistics statisticsPredecessor = currentPredecessorNode.getStatistics(measurementConfig.getVersionOld());\n-         final SummaryStatistics statisticsVersion = currentPredecessorNode.getStatistics(measurementConfig.getVersion());\n-         LOG.debug(\"Comparison {} - {}\",\n-               currentPredecessorNode.getKiekerPattern(),\n-               currentPredecessorNode.getOtherVersionNode() != null ? currentPredecessorNode.getOtherVersionNode().getKiekerPattern() : null);\n-         LOG.debug(\"Current: {} {} Predecessor: {} {}\",\n-               statisticsVersion.getMean(), statisticsVersion.getStandardDeviation(),\n-               statisticsPredecessor.getMean(), statisticsPredecessor.getStandardDeviation());\n-         final Relation relation = StatisticUtil.agnosticTTest(statisticsPredecessor, statisticsVersion, measurementConfig);\n-         if (relation == Relation.UNEQUAL && needsEnoughTime(statisticsPredecessor, statisticsVersion)) {\n-            measureNextlevelPredecessor.addAll(currentPredecessorNode.getChildren());\n-            final List<CallTreeNode> currentNodes = buildCurrentDiffering(currentPredecessorNode);\n-            measureNextLevel.addAll(currentNodes);\n-\n-            final int childsRemeasure = getRemeasureChilds(currentPredecessorNode);\n-\n-            if (childsRemeasure == 0) {\n-               LOG.debug(\"Adding {} - no childs needs to be remeasured, T={}\", currentPredecessorNode, childsRemeasure, TestUtils.t(statisticsPredecessor, statisticsVersion));\n-               LOG.debug(\"Childs: {}\", currentPredecessorNode.getChildren());\n-               currentLevelDifferent.add(currentPredecessorNode);\n-            }\n-         }\n-      }\n+   final SummaryStatistics statisticsPredecessor = currentPredecessorNode.getStatistics(measurementConfig.getVersionOld());\n+   final SummaryStatistics statisticsVersion = currentPredecessorNode.getStatistics(measurementConfig.getVersion());\n+   LOG.debug(\"Comparison {} - {}\", currentPredecessorNode.getKiekerPattern(), currentPredecessorNode.getOtherVersionNode() != null ? currentPredecessorNode.getOtherVersionNode().getKiekerPattern() : null);\n+   LOG.debug(\"Current: {} {} Predecessor: {} {}\", statisticsVersion.getMean(), statisticsVersion.getStandardDeviation(), statisticsPredecessor.getMean(), statisticsPredecessor.getStandardDeviation());\n+\n+   final Relation relation = StatisticUtil.agnosticTTest(statisticsPredecessor, statisticsVersion, measurementConfig);\n+   if (relation == Relation.UNEQUAL && needsEnoughTime(statisticsPredecessor, statisticsVersion)) {\n+    measureNextlevelPredecessor.addAll(currentPredecessorNode.getChildren());\n+\n+    final List<CallTreeNode> currentNodes = buildCurrentDiffering(currentPredecessorNode);\n+    measureNextLevel.addAll(currentNodes);\n+\n+    final int childsRemeasure = getRemeasureChilds(currentPredecessorNode);\n+    if (childsRemeasure == 0) {\n+     LOG.debug(\"Adding {} - no childs needs to be remeasured, T={}\", currentPredecessorNode, childsRemeasure, TestUtils.t(statisticsPredecessor, statisticsVersion));\n+     LOG.debug(\"Childs: {}\", currentPredecessorNode.getChildren());\n+     currentLevelDifferent.add(currentPredecessorNode);\n+    }\n    }\n-\n-   private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n-      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() &&\n-            statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n+  }\n+ }\n+\n+ private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n+  return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() && statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n+ }\n+\n+ private List<CallTreeNode> buildCurrentDiffering(final CallTreeNode currentPredecessorNode) {\n+  final List<CallTreeNode> currentNodes = new LinkedList<>();\n+  currentPredecessorNode.getChildren().forEach(node -> currentNodes.add(node.getOtherVersionNode()));\n+  return currentNodes;\n+ }\n+\n+ private int getRemeasureChilds(final CallTreeNode predecessorNode) {\n+  int childsRemeasure = 0;\n+  LOG.debug(\"Children: {}\", predecessorNode.getChildren().size());\n+  for (final CallTreeNode testChild : predecessorNode.getChildren()) {\n+   LOG.debug(\"Child: {} Parent: {}\", testChild, measureNextlevelPredecessor);\n+   if (measureNextlevelPredecessor.contains(testChild)) {\n+    childsRemeasure++;\n    }\n+  }\n+  return childsRemeasure;\n+ }\n \n-   private List<CallTreeNode> buildCurrentDiffering(final CallTreeNode currentPredecessorNode) {\n-      final List<CallTreeNode> currentNodes = new LinkedList<>();\n-      currentPredecessorNode.getChildren().forEach(node -> currentNodes.add(node.getOtherVersionNode()));\n-      return currentNodes;\n-   }\n-\n-   private int getRemeasureChilds(final CallTreeNode predecessorNode) {\n-      int childsRemeasure = 0;\n-      LOG.debug(\"Children: {}\", predecessorNode.getChildren().size());\n-      for (final CallTreeNode testChild : predecessorNode.getChildren()) {\n-         LOG.debug(\"Child: {} Parent: {}\", testChild, measureNextlevelPredecessor);\n-         if (measureNextlevelPredecessor.contains(testChild)) {\n-            childsRemeasure++;\n-         }\n-      }\n-      return childsRemeasure;\n-   }\n-\n-   public List<CallTreeNode> getCurrentLevelDifferent() {\n-      return currentLevelDifferent;\n-   }\n+ public List<CallTreeNode> getCurrentLevelDifferent() {\n+  return currentLevelDifferent;\n+ }\n }\n\\ No newline at end of file\n",
            "diff_size": 106
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/13/DifferentNodeDeterminer.java\nindex 251395b554f..fe8e6d48ad1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/13/DifferentNodeDeterminer.java\n@@ -66,8 +66,7 @@ public abstract class DifferentNodeDeterminer {\n    }\n \n    private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n-      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() &&\n-            statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n+      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() && statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n    }\n \n    private List<CallTreeNode> buildCurrentDiffering(final CallTreeNode currentPredecessorNode) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/13/DifferentNodeDeterminer.java\nindex 251395b554f..fe8e6d48ad1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/13/DifferentNodeDeterminer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/13/DifferentNodeDeterminer.java\n@@ -66,8 +66,7 @@ public abstract class DifferentNodeDeterminer {\n    }\n \n    private boolean needsEnoughTime(final SummaryStatistics statisticsPredecessor, final SummaryStatistics statisticsVersion) {\n-      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() &&\n-            statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n+      return statisticsPredecessor.getMean() > causeSearchConfig.getMinTime() && statisticsVersion.getMean() > causeSearchConfig.getMinTime();\n    }\n \n    private List<CallTreeNode> buildCurrentDiffering(final CallTreeNode currentPredecessorNode) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}