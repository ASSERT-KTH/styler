{
    "project_name": "HuygensING-timbuctoo",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "import statement should not be line-wrapped.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
            }
        ]
    },
    "source_code": "import java.util.stream.Stream;\n\nimport static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n  .getPaginatedList;\n\npublic class CollectionDataFetcher implements CollectionFetcher {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler/0/CollectionDataFetcher.java\nindex 40f9ae8a4e2..3c00f62b0fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler/0/CollectionDataFetcher.java\n@@ -15,8 +15,7 @@ import java.io.IOException;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n \n public class CollectionDataFetcher implements CollectionFetcher {\n   private static final Logger LOG = LoggerFactory.getLogger(CollectionDataFetcher.class);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "import statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/0/CollectionDataFetcher.java\nindex 40f9ae8a4e2..14093cca8da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/0/CollectionDataFetcher.java\n@@ -15,8 +15,7 @@ import java.io.IOException;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n \n public class CollectionDataFetcher implements CollectionFetcher {\n   private static final Logger LOG = LoggerFactory.getLogger(CollectionDataFetcher.class);\n@@ -53,4 +52,4 @@ public class CollectionDataFetcher implements CollectionFetcher {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/0/CollectionDataFetcher.java\nindex 40f9ae8a4e2..ebadd17b308 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/0/CollectionDataFetcher.java\n@@ -10,17 +10,14 @@ import nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.PaginationArguments\n import nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.SubjectReference;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.IOException;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n \n public class CollectionDataFetcher implements CollectionFetcher {\n   private static final Logger LOG = LoggerFactory.getLogger(CollectionDataFetcher.class);\n-\n   private final String collectionUri;\n \n   public CollectionDataFetcher(String collectionUri) {\n@@ -32,25 +29,18 @@ public class CollectionDataFetcher implements CollectionFetcher {\n     String cursor = arguments.getCursor();\n     if (arguments.getFilter().isPresent()) {\n       try {\n-        final FilterResult result = arguments.getFilter().get().query();\n-        return PaginatedList.create(\n-          null,\n-          result.getNextToken(),\n-          result.getUriList().stream().map(x -> new LazyTypeSubjectReference(x, dataSet)).collect(Collectors.toList())\n-        );\n+        final FilterResult result = arguments.getFilter().get()\n+                                                         .query();\n+        return PaginatedList.create(null, result.getNextToken(), result.getUriList().stream()\n+                                                                                    .map(x -> new LazyTypeSubjectReference(x, dataSet))\n+                                                                                    .collect(Collectors.toList()));\n       } catch (IOException e) {\n         throw new RuntimeException(e);\n       }\n     } else {\n       try (Stream<CursorSubject> subjectStream = dataSet.getCollectionIndex().getSubjects(collectionUri, cursor)) {\n-        return getPaginatedList(\n-          subjectStream,\n-          cursorSubject -> new LazyTypeSubjectReference(cursorSubject.getSubjectUri(), dataSet),\n-          arguments.getCount(),\n-          !cursor.isEmpty()\n-        );\n+        return getPaginatedList(subjectStream, cursorSubject -> new LazyTypeSubjectReference(cursorSubject.getSubjectUri(), dataSet), arguments.getCount(), !cursor.isEmpty());\n       }\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_random/0/CollectionDataFetcher.java\nindex 40f9ae8a4e2..3c00f62b0fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_random/0/CollectionDataFetcher.java\n@@ -15,8 +15,7 @@ import java.io.IOException;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n \n public class CollectionDataFetcher implements CollectionFetcher {\n   private static final Logger LOG = LoggerFactory.getLogger(CollectionDataFetcher.class);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/0/CollectionDataFetcher.java\nindex 40f9ae8a4e2..3c00f62b0fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/0/CollectionDataFetcher.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/0/CollectionDataFetcher.java\n@@ -15,8 +15,7 @@ import java.io.IOException;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper\n-  .getPaginatedList;\n+import static nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.berkeleydb.datafetchers.PaginationHelper.getPaginatedList;\n \n public class CollectionDataFetcher implements CollectionFetcher {\n   private static final Logger LOG = LoggerFactory.getLogger(CollectionDataFetcher.class);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}