{
    "project_name": "apache-metron",
    "error_id": "113",
    "information": {
        "errors": [
            {
                "line": "103",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * Initializes this implementation by setting the supplied IndexDao and also setting a separate SolrDao.\n   * This is needed for some specific Solr functions (looking up an index from a GUID for example).\n   * @param indexDao The DAO to wrap for our queries\n   * @param threatSort The summary aggregation of the child threat triage scores used",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/113/SolrMetaAlertDao.java\nindex ca4a1723932..c5072446419 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/113/SolrMetaAlertDao.java\n@@ -61,11 +61,12 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Wraps an {@link org.apache.metron.indexing.dao.IndexDao} to handle meta alerts.\n+   *\n    * @param indexDao The Dao to wrap\n    */\n   public SolrMetaAlertDao(IndexDao indexDao, SolrMetaAlertSearchDao metaAlertSearchDao,\n-      SolrMetaAlertUpdateDao metaAlertUpdateDao,\n-      SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao) {\n+                          SolrMetaAlertUpdateDao metaAlertUpdateDao,\n+                          SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao) {\n     this(indexDao, metaAlertSearchDao, metaAlertUpdateDao, metaAlertRetrieveLatestDao,\n         METAALERTS_COLLECTION,\n         MetaAlertConstants.THREAT_FIELD_DEFAULT,\n@@ -74,18 +75,19 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n \n   /**\n    * Wraps an {@link org.apache.metron.indexing.dao.IndexDao} to handle meta alerts.\n-   * @param indexDao The Dao to wrap\n+   *\n+   * @param indexDao         The Dao to wrap\n    * @param triageLevelField The field name to use as the threat scoring field\n-   * @param threatSort The summary aggregation of all child threat triage scores used\n-   *                   as the overall threat triage score for the metaalert. This\n-   *                   can be either max, min, average, count, median, or sum.\n+   * @param threatSort       The summary aggregation of all child threat triage scores used\n+   *                         as the overall threat triage score for the metaalert. This\n+   *                         can be either max, min, average, count, median, or sum.\n    */\n   public SolrMetaAlertDao(IndexDao indexDao, SolrMetaAlertSearchDao metaAlertSearchDao,\n-      SolrMetaAlertUpdateDao metaAlertUpdateDao,\n-      SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao,\n-      String metaAlertsCollection,\n-      String triageLevelField,\n-      String threatSort) {\n+                          SolrMetaAlertUpdateDao metaAlertUpdateDao,\n+                          SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao,\n+                          String metaAlertsCollection,\n+                          String triageLevelField,\n+                          String threatSort) {\n     init(indexDao, Optional.of(threatSort));\n     this.metaAlertSearchDao = metaAlertSearchDao;\n     this.metaAlertUpdateDao = metaAlertUpdateDao;\n@@ -102,7 +104,8 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n   /**\n    * Initializes this implementation by setting the supplied IndexDao and also setting a separate SolrDao.\n    * This is needed for some specific Solr functions (looking up an index from a GUID for example).\n-   * @param indexDao The DAO to wrap for our queries\n+   *\n+   * @param indexDao   The DAO to wrap for our queries\n    * @param threatSort The summary aggregation of the child threat triage scores used\n    *                   as the overall threat triage score for the metaalert. This\n    *                   can be either max, min, average, count, median, or sum.\n@@ -189,7 +192,7 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n \n   @Override\n   public void patch(RetrieveLatestDao retrieveLatestDao, PatchRequest request,\n-      Optional<Long> timestamp)\n+                    Optional<Long> timestamp)\n       throws OriginalNotFoundException, IOException {\n     metaAlertUpdateDao.patch(retrieveLatestDao, request, timestamp);\n   }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "180",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "196",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "200",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "205",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/113/SolrMetaAlertDao.java\nindex ca4a1723932..3c8886cd855 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/113/SolrMetaAlertDao.java\n@@ -66,10 +66,9 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n   public SolrMetaAlertDao(IndexDao indexDao, SolrMetaAlertSearchDao metaAlertSearchDao,\n       SolrMetaAlertUpdateDao metaAlertUpdateDao,\n       SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao) {\n-    this(indexDao, metaAlertSearchDao, metaAlertUpdateDao, metaAlertRetrieveLatestDao,\n+  this(indexDao, metaAlertSearchDao, metaAlertUpdateDao, metaAlertRetrieveLatestDao,\n         METAALERTS_COLLECTION,\n-        MetaAlertConstants.THREAT_FIELD_DEFAULT,\n-        MetaAlertConstants.THREAT_SORT_DEFAULT);\n+        MetaAlertConstants.THREAT_FIELD_DEFAULT, MetaAlertConstants.THREAT_SORT_DEFAULT);\n   }\n \n   /**\n@@ -86,7 +85,7 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n       String metaAlertsCollection,\n       String triageLevelField,\n       String threatSort) {\n-    init(indexDao, Optional.of(threatSort));\n+  init(indexDao, Optional.of(threatSort));\n     this.metaAlertSearchDao = metaAlertSearchDao;\n     this.metaAlertUpdateDao = metaAlertUpdateDao;\n     this.metaAlertRetrieveLatestDao = metaAlertRetrieveLatestDao;\n@@ -122,27 +121,17 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n       this.solrDao = (SolrDao) indexDao;\n     } else {\n       throw new IllegalArgumentException(\n-          \"Need a SolrDao when using SolrMetaAlertDao\"\n-      );\n+          \"Need a SolrDao when using SolrMetaAlertDao\");\n     }\n \n-    MetaAlertConfig config = new MetaAlertConfig(\n-        metaAlertsCollection,\n-        threatTriageField,\n-        this.threatSort,\n-        Constants.SENSOR_TYPE\n-    );\n+    MetaAlertConfig config = new MetaAlertConfig(metaAlertsCollection, threatTriageField,\n+        this.threatSort, Constants.SENSOR_TYPE);\n \n     SolrClient solrClient = solrDao.getSolrClient(solrDao.getZkHost());\n     this.metaAlertSearchDao = new SolrMetaAlertSearchDao(solrClient, solrDao.getSolrSearchDao());\n     this.metaAlertRetrieveLatestDao = new SolrMetaAlertRetrieveLatestDao(solrDao);\n-    this.metaAlertUpdateDao = new SolrMetaAlertUpdateDao(\n-        solrDao,\n-        metaAlertSearchDao,\n-        metaAlertRetrieveLatestDao,\n-        config);\n-\n-    if (threatSort.isPresent()) {\n+    this.metaAlertUpdateDao = new SolrMetaAlertUpdateDao(solrDao, metaAlertSearchDao, metaAlertRetrieveLatestDao, config);\n+if (threatSort.isPresent()) {\n       this.threatSort = threatSort.get();\n     }\n   }\n@@ -188,10 +177,8 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n   }\n \n   @Override\n-  public void patch(RetrieveLatestDao retrieveLatestDao, PatchRequest request,\n-      Optional<Long> timestamp)\n-      throws OriginalNotFoundException, IOException {\n-    metaAlertUpdateDao.patch(retrieveLatestDao, request, timestamp);\n+  public void patch(RetrieveLatestDao retrieveLatestDao, PatchRequest request, Optional<Long> timestamp) throws OriginalNotFoundException, IOException {\n+  metaAlertUpdateDao.patch(retrieveLatestDao, request, timestamp);\n   }\n \n   @Override\n@@ -200,26 +187,22 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n   }\n \n   @Override\n-  public MetaAlertCreateResponse createMetaAlert(MetaAlertCreateRequest request)\n-      throws InvalidCreateException, IOException {\n-    return metaAlertUpdateDao.createMetaAlert(request);\n+  public MetaAlertCreateResponse createMetaAlert(MetaAlertCreateRequest request) throws InvalidCreateException, IOException {\n+  return metaAlertUpdateDao.createMetaAlert(request);\n   }\n \n   @Override\n-  public boolean addAlertsToMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests)\n-      throws IOException {\n-    return metaAlertUpdateDao.addAlertsToMetaAlert(metaAlertGuid, alertRequests);\n+  public boolean addAlertsToMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests) throws IOException {\n+  return metaAlertUpdateDao.addAlertsToMetaAlert(metaAlertGuid, alertRequests);\n   }\n \n   @Override\n-  public boolean removeAlertsFromMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests)\n-      throws IOException {\n-    return metaAlertUpdateDao.removeAlertsFromMetaAlert(metaAlertGuid, alertRequests);\n+  public boolean removeAlertsFromMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests) throws IOException {\n+  return metaAlertUpdateDao.removeAlertsFromMetaAlert(metaAlertGuid, alertRequests);\n   }\n \n   @Override\n-  public boolean updateMetaAlertStatus(String metaAlertGuid, MetaAlertStatus status)\n-      throws IOException {\n-    return metaAlertUpdateDao.updateMetaAlertStatus(metaAlertGuid, status);\n+  public boolean updateMetaAlertStatus(String metaAlertGuid, MetaAlertStatus status) throws IOException {\n+  return metaAlertUpdateDao.updateMetaAlertStatus(metaAlertGuid, status);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 264).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'threatTriageField' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'this' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'Constants' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/113/SolrMetaAlertDao.java\nindex ca4a1723932..23b0d75bc12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/113/SolrMetaAlertDao.java\n@@ -49,7 +49,6 @@ import org.apache.solr.client.solrj.SolrClient;\n public class SolrMetaAlertDao implements MetaAlertDao {\n \n   public static final String METAALERTS_COLLECTION = \"metaalert\";\n-\n   private IndexDao indexDao;\n   private SolrDao solrDao;\n   private SolrMetaAlertSearchDao metaAlertSearchDao;\n@@ -63,13 +62,9 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n    * Wraps an {@link org.apache.metron.indexing.dao.IndexDao} to handle meta alerts.\n    * @param indexDao The Dao to wrap\n    */\n-  public SolrMetaAlertDao(IndexDao indexDao, SolrMetaAlertSearchDao metaAlertSearchDao,\n-      SolrMetaAlertUpdateDao metaAlertUpdateDao,\n-      SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao) {\n-    this(indexDao, metaAlertSearchDao, metaAlertUpdateDao, metaAlertRetrieveLatestDao,\n-        METAALERTS_COLLECTION,\n-        MetaAlertConstants.THREAT_FIELD_DEFAULT,\n-        MetaAlertConstants.THREAT_SORT_DEFAULT);\n+\n+  public SolrMetaAlertDao(IndexDao indexDao, SolrMetaAlertSearchDao metaAlertSearchDao, SolrMetaAlertUpdateDao metaAlertUpdateDao, SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao) {\n+    this(indexDao, metaAlertSearchDao, metaAlertUpdateDao, metaAlertRetrieveLatestDao, METAALERTS_COLLECTION, MetaAlertConstants.THREAT_FIELD_DEFAULT, MetaAlertConstants.THREAT_SORT_DEFAULT);\n   }\n \n   /**\n@@ -80,12 +75,8 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n    *                   as the overall threat triage score for the metaalert. This\n    *                   can be either max, min, average, count, median, or sum.\n    */\n-  public SolrMetaAlertDao(IndexDao indexDao, SolrMetaAlertSearchDao metaAlertSearchDao,\n-      SolrMetaAlertUpdateDao metaAlertUpdateDao,\n-      SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao,\n-      String metaAlertsCollection,\n-      String triageLevelField,\n-      String threatSort) {\n+\n+  public SolrMetaAlertDao(IndexDao indexDao, SolrMetaAlertSearchDao metaAlertSearchDao, SolrMetaAlertUpdateDao metaAlertUpdateDao, SolrMetaAlertRetrieveLatestDao metaAlertRetrieveLatestDao, String metaAlertsCollection, String triageLevelField, String threatSort) {\n     init(indexDao, Optional.of(threatSort));\n     this.metaAlertSearchDao = metaAlertSearchDao;\n     this.metaAlertUpdateDao = metaAlertUpdateDao;\n@@ -107,6 +98,7 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n    *                   as the overall threat triage score for the metaalert. This\n    *                   can be either max, min, average, count, median, or sum.\n    */\n+\n   @Override\n   public void init(IndexDao indexDao, Optional<String> threatSort) {\n     if (indexDao instanceof MultiIndexDao) {\n@@ -118,30 +110,20 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n         }\n       }\n     } else if (indexDao instanceof SolrDao) {\n-      this.indexDao = indexDao;\n-      this.solrDao = (SolrDao) indexDao;\n-    } else {\n-      throw new IllegalArgumentException(\n-          \"Need a SolrDao when using SolrMetaAlertDao\"\n-      );\n-    }\n-\n-    MetaAlertConfig config = new MetaAlertConfig(\n-        metaAlertsCollection,\n-        threatTriageField,\n-        this.threatSort,\n-        Constants.SENSOR_TYPE\n-    );\n-\n+             this.indexDao = indexDao;\n+             this.solrDao = (SolrDao) indexDao;\n+           } else {\n+             throw new IllegalArgumentException(\n+                 \"Need a SolrDao when using SolrMetaAlertDao\");\n+           }\n+    MetaAlertConfig config = new MetaAlertConfig(metaAlertsCollection,\n+      threatTriageField,\n+this.threatSort,\n+  Constants.SENSOR_TYPE);\n     SolrClient solrClient = solrDao.getSolrClient(solrDao.getZkHost());\n     this.metaAlertSearchDao = new SolrMetaAlertSearchDao(solrClient, solrDao.getSolrSearchDao());\n     this.metaAlertRetrieveLatestDao = new SolrMetaAlertRetrieveLatestDao(solrDao);\n-    this.metaAlertUpdateDao = new SolrMetaAlertUpdateDao(\n-        solrDao,\n-        metaAlertSearchDao,\n-        metaAlertRetrieveLatestDao,\n-        config);\n-\n+    this.metaAlertUpdateDao = new SolrMetaAlertUpdateDao(solrDao, metaAlertSearchDao, metaAlertRetrieveLatestDao, config);\n     if (threatSort.isPresent()) {\n       this.threatSort = threatSort.get();\n     }\n@@ -188,9 +170,7 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n   }\n \n   @Override\n-  public void patch(RetrieveLatestDao retrieveLatestDao, PatchRequest request,\n-      Optional<Long> timestamp)\n-      throws OriginalNotFoundException, IOException {\n+  public void patch(RetrieveLatestDao retrieveLatestDao, PatchRequest request, Optional<Long> timestamp) throws OriginalNotFoundException, IOException {\n     metaAlertUpdateDao.patch(retrieveLatestDao, request, timestamp);\n   }\n \n@@ -200,26 +180,22 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n   }\n \n   @Override\n-  public MetaAlertCreateResponse createMetaAlert(MetaAlertCreateRequest request)\n-      throws InvalidCreateException, IOException {\n+  public MetaAlertCreateResponse createMetaAlert(MetaAlertCreateRequest request) throws InvalidCreateException, IOException {\n     return metaAlertUpdateDao.createMetaAlert(request);\n   }\n \n   @Override\n-  public boolean addAlertsToMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests)\n-      throws IOException {\n+  public boolean addAlertsToMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests) throws IOException {\n     return metaAlertUpdateDao.addAlertsToMetaAlert(metaAlertGuid, alertRequests);\n   }\n \n   @Override\n-  public boolean removeAlertsFromMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests)\n-      throws IOException {\n+  public boolean removeAlertsFromMetaAlert(String metaAlertGuid, List<GetRequest> alertRequests) throws IOException {\n     return metaAlertUpdateDao.removeAlertsFromMetaAlert(metaAlertGuid, alertRequests);\n   }\n \n   @Override\n-  public boolean updateMetaAlertStatus(String metaAlertGuid, MetaAlertStatus status)\n-      throws IOException {\n+  public boolean updateMetaAlertStatus(String metaAlertGuid, MetaAlertStatus status) throws IOException {\n     return metaAlertUpdateDao.updateMetaAlertStatus(metaAlertGuid, status);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 110.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/113/SolrMetaAlertDao.java\nindex ca4a1723932..b706e7518b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/113/SolrMetaAlertDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/styler_three_grams/113/SolrMetaAlertDao.java\n@@ -98,8 +98,7 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n   public SolrMetaAlertDao() {\n     //uninitialized.\n   }\n-\n-  /**\n+    /**\n    * Initializes this implementation by setting the supplied IndexDao and also setting a separate SolrDao.\n    * This is needed for some specific Solr functions (looking up an index from a GUID for example).\n    * @param indexDao The DAO to wrap for our queries\n@@ -107,6 +106,7 @@ public class SolrMetaAlertDao implements MetaAlertDao {\n    *                   as the overall threat triage score for the metaalert. This\n    *                   can be either max, min, average, count, median, or sum.\n    */\n+\n   @Override\n   public void init(IndexDao indexDao, Optional<String> threatSort) {\n     if (indexDao instanceof MultiIndexDao) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}