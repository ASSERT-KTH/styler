{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4025",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4025/VmPauseMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4025/VmPauseMonitor.java\nindex 7d55e450457..ff244d4c157 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4025/VmPauseMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4025/VmPauseMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.monitoring;\n \n import java.lang.management.GarbageCollectorMXBean;\n@@ -41,133 +42,131 @@ import static org.neo4j.util.Preconditions.requirePositive;\n \n public class VmPauseMonitor\n {\n-    private final long measurementDurationNs;\n-    private final long stallAlertThresholdNs;\n-    private final Log log;\n-    private final JobScheduler jobScheduler;\n-    private final Consumer<VmPauseInfo> listener;\n-    private JobHandle job;\n-\n-    public VmPauseMonitor( Duration measureInterval, Duration stallAlertThreshold, Log log, JobScheduler jobScheduler, Consumer<VmPauseInfo> listener )\n+  private final long measurementDurationNs;\n+  private final long stallAlertThresholdNs;\n+  private final Log log;\n+  private final JobScheduler jobScheduler;\n+  private final Consumer<VmPauseInfo> listener;\n+  private JobHandle job;\n+\n+  public VmPauseMonitor(Duration measureInterval, Duration stallAlertThreshold, Log log, JobScheduler jobScheduler, Consumer<VmPauseInfo> listener)\n+  {\n+    this.measurementDurationNs = requirePositive(measureInterval.toNanos());\n+    this.stallAlertThresholdNs = requireNonNegative(stallAlertThreshold.toNanos());\n+    this.log = requireNonNull(log);\n+    this.jobScheduler = requireNonNull(jobScheduler);\n+    this.listener = requireNonNull(listener);\n+  }\n+\n+  public void start()\n+  {\n+    log.debug(\"Starting VM pause monitor\");\n+    checkState(job == null, \"VM pause monitor is already started\");\n+    job = requireNonNull(jobScheduler.schedule(JobScheduler.Groups.vmPauseMonitor, this::run));\n+  }\n+\n+  public void stop()\n+  {\n+    log.debug(\"Stopping VM pause monitor\");\n+    checkState(job != null, \"VM pause monitor is not started\");\n+    job.cancel(true);\n+    job = null;\n+  }\n+\n+  private void run()\n+  {\n+    try\n     {\n-        this.measurementDurationNs = requirePositive( measureInterval.toNanos() );\n-        this.stallAlertThresholdNs = requireNonNegative( stallAlertThreshold.toNanos() );\n-        this.log = requireNonNull( log );\n-        this.jobScheduler = requireNonNull( jobScheduler );\n-        this.listener = requireNonNull( listener );\n-    }\n-\n-    public void start()\n+      monitor();\n+    } catch (InterruptedException ignore)\n     {\n-        log.debug( \"Starting VM pause monitor\" );\n-        checkState( job == null, \"VM pause monitor is already started\" );\n-        job = requireNonNull( jobScheduler.schedule( JobScheduler.Groups.vmPauseMonitor, this::run ) );\n-    }\n-\n-    public void stop()\n+      log.debug(\"VM pause monitor stopped\");\n+    } catch (RuntimeException e)\n     {\n-        log.debug( \"Stopping VM pause monitor\" );\n-        checkState( job != null, \"VM pause monitor is not started\" );\n-        job.cancel( true );\n-        job = null;\n+      log.debug(\"VM pause monitor failed\", e);\n     }\n+  }\n+\n+  @VisibleForTesting\n+  void monitor() throws InterruptedException\n+  {\n+    GcStats lastGcStats = getGcStats();\n+    long nextCheckPoint = nanoTime() + measurementDurationNs;\n \n-    private void run()\n+    while (!isStopped())\n     {\n-        try\n-        {\n-            monitor();\n-        }\n-        catch ( InterruptedException ignore )\n-        {\n-            log.debug( \"VM pause monitor stopped\" );\n-        }\n-        catch ( RuntimeException e )\n-        {\n-            log.debug( \"VM pause monitor failed\", e );\n-        }\n+      NANOSECONDS.sleep(measurementDurationNs);\n+      final long now = nanoTime();\n+      final long pauseNs = max(0L, now - nextCheckPoint);\n+      nextCheckPoint = now + measurementDurationNs;\n+\n+      final GcStats gcStats = getGcStats();\n+      if (pauseNs >= stallAlertThresholdNs)\n+      {\n+        final VmPauseInfo pauseInfo = new VmPauseInfo(\n+            NANOSECONDS.toMillis(pauseNs),\n+            gcStats.time - lastGcStats.time,\n+            gcStats.count - lastGcStats.count\n+        );\n+        listener.accept(pauseInfo);\n+      }\n+      lastGcStats = gcStats;\n     }\n-\n-    @VisibleForTesting\n-    void monitor() throws InterruptedException\n+  }\n+\n+  @SuppressWarnings(\"MethodMayBeStatic\")\n+  @VisibleForTesting\n+  boolean isStopped()\n+  {\n+    return currentThread().isInterrupted();\n+  }\n+\n+  public static class VmPauseInfo\n+  {\n+    private final long pauseTime;\n+    private final long gcTime;\n+    private final long gcCount;\n+\n+    VmPauseInfo(long pauseTime, long gcTime, long gcCount)\n     {\n-        GcStats lastGcStats = getGcStats();\n-        long nextCheckPoint = nanoTime() + measurementDurationNs;\n-\n-        while ( !isStopped() )\n-        {\n-            NANOSECONDS.sleep( measurementDurationNs );\n-            final long now = nanoTime();\n-            final long pauseNs = max( 0L, now - nextCheckPoint );\n-            nextCheckPoint = now + measurementDurationNs;\n-\n-            final GcStats gcStats = getGcStats();\n-            if ( pauseNs >= stallAlertThresholdNs )\n-            {\n-                final VmPauseInfo pauseInfo = new VmPauseInfo(\n-                        NANOSECONDS.toMillis( pauseNs ),\n-                        gcStats.time - lastGcStats.time,\n-                        gcStats.count - lastGcStats.count\n-                );\n-                listener.accept( pauseInfo );\n-            }\n-            lastGcStats = gcStats;\n-        }\n+      this.pauseTime = pauseTime;\n+      this.gcTime = gcTime;\n+      this.gcCount = gcCount;\n     }\n \n-    @SuppressWarnings( \"MethodMayBeStatic\" )\n-    @VisibleForTesting\n-    boolean isStopped()\n+    public long getPauseTime()\n     {\n-        return currentThread().isInterrupted();\n+      return pauseTime;\n     }\n \n-    public static class VmPauseInfo\n+    @Override\n+    public String toString()\n     {\n-        private final long pauseTime;\n-        private final long gcTime;\n-        private final long gcCount;\n-\n-        VmPauseInfo( long pauseTime, long gcTime, long gcCount )\n-        {\n-            this.pauseTime = pauseTime;\n-            this.gcTime = gcTime;\n-            this.gcCount = gcCount;\n-        }\n-\n-        public long getPauseTime()\n-        {\n-            return pauseTime;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return format( \"{pauseTime=%d, gcTime=%d, gcCount=%d}\", pauseTime, gcTime, gcCount );\n-        }\n+      return format(\"{pauseTime=%d, gcTime=%d, gcCount=%d}\", pauseTime, gcTime, gcCount);\n     }\n+  }\n \n-    private static GcStats getGcStats()\n+  private static GcStats getGcStats()\n+  {\n+    long time = 0;\n+    long count = 0;\n+    for (GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans())\n     {\n-        long time = 0;\n-        long count = 0;\n-        for ( GarbageCollectorMXBean gcBean : ManagementFactory.getGarbageCollectorMXBeans() )\n-        {\n-            time += gcBean.getCollectionTime();\n-            count += gcBean.getCollectionCount();\n-        }\n-        return new GcStats( time, count );\n+      time += gcBean.getCollectionTime();\n+      count += gcBean.getCollectionCount();\n     }\n+    return new GcStats(time, count);\n+  }\n+\n+  private static class GcStats\n+  {\n+    private final long time;\n+    private final long count;\n \n-    private static class GcStats\n+    private GcStats(long time, long count)\n     {\n-        private final long time;\n-        private final long count;\n-\n-        private GcStats( long time, long count )\n-        {\n-            this.time = time;\n-            this.count = count;\n-        }\n+      this.time = time;\n+      this.count = count;\n     }\n+  }\n }\n",
            "diff_size": 173
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4025/VmPauseMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4025/VmPauseMonitor.java\nindex 7d55e450457..0a115b338d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4025/VmPauseMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4025/VmPauseMonitor.java\n@@ -104,14 +104,12 @@ public class VmPauseMonitor\n             final GcStats gcStats = getGcStats();\n             if ( pauseNs >= stallAlertThresholdNs )\n             {\n-                final VmPauseInfo pauseInfo = new VmPauseInfo(\n-                        NANOSECONDS.toMillis( pauseNs ),\n-                        gcStats.time - lastGcStats.time,\n-                        gcStats.count - lastGcStats.count\n-                );\n+                final VmPauseInfo pauseInfo = new VmPauseInfo( NANOSECONDS.toMillis( pauseNs ), gcStats.time - lastGcStats.time,\n+                        gcStats.count - lastGcStats.count );\n                 listener.accept( pauseInfo );\n             }\n-            lastGcStats = gcStats;\n+\n+lastGcStats = gcStats;\n         }\n     }\n \n@@ -170,4 +168,4 @@ public class VmPauseMonitor\n             this.count = count;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}