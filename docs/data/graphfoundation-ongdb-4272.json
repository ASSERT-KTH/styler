{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4272",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "12",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "157",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "255",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "271",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "300",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "313",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "384",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "389",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4272/IndexProviderShellApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4272/IndexProviderShellApp.java\nindex 99996572fd6..4df204d6828 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4272/IndexProviderShellApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4272/IndexProviderShellApp.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.rmi.RemoteException;\n@@ -44,50 +45,50 @@ import org.neo4j.shell.ShellException;\n import org.neo4j.shell.util.json.JSONException;\n import org.neo4j.shell.util.json.JSONObject;\n \n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class IndexProviderShellApp extends TransactionProvidingApp\n {\n-    {\n-        addOptionDefinition( \"g\", new OptionDefinition( OptionValueType.NONE,\n-                \"Get entities for the given key and value\" ) );\n-        addOptionDefinition( \"q\", new OptionDefinition( OptionValueType.NONE,\n-                \"Get entities for the given query\" ) );\n-        addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE,\n-                \"Index the current entity with a key and (optionally) value. \" +\n-                \"If no value is given the property value for the key is \" +\n-                \"used\" ) );\n-        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE,\n-                \"Removes a key-value pair for the current entity from the index. \" +\n-                \"Key and value are optional\" ) );\n-        addOptionDefinition( \"c\", OPTION_DEF_FOR_C );\n-        addOptionDefinition( \"cd\", new OptionDefinition( OptionValueType.NONE,\n-                \"Does a 'cd' command to the returned node. \" +\n-                \"Could also be done using the -c option. (Implies -g)\" ) );\n-        addOptionDefinition( \"ls\", new OptionDefinition( OptionValueType.NONE,\n-                \"Does a 'ls' command on the returned entities. \" +\n-                \"Could also be done using the -c option. (Implies -g)\" ) );\n-        addOptionDefinition( \"create\", new OptionDefinition( OptionValueType.NONE,\n-                \"Creates a new index with a set of configuration parameters\" ) );\n-        addOptionDefinition( \"get-config\", new OptionDefinition( OptionValueType.NONE,\n-                \"Displays the configuration for an index\" ) );\n-        addOptionDefinition( \"set-config\", new OptionDefinition( OptionValueType.NONE,\n-                \"EXPERT, USE WITH CARE: Set one configuration parameter for an index (remove if no value)\" ) );\n-        addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST,\n-                \"The type of index, either Node or Relationship\" ) );\n-        addOptionDefinition( \"indexes\", new OptionDefinition( OptionValueType.NONE, \"Lists all index names\" ) );\n-        addOptionDefinition( \"delete\", new OptionDefinition( OptionValueType.NONE, \"Deletes an index\" ) );\n-    }\n+  {\n+    addOptionDefinition(\"g\", new OptionDefinition(OptionValueType.NONE,\n+        \"Get entities for the given key and value\"));\n+    addOptionDefinition(\"q\", new OptionDefinition(OptionValueType.NONE,\n+        \"Get entities for the given query\"));\n+    addOptionDefinition(\"i\", new OptionDefinition(OptionValueType.NONE,\n+        \"Index the current entity with a key and (optionally) value. \" +\n+            \"If no value is given the property value for the key is \" +\n+            \"used\"));\n+    addOptionDefinition(\"r\", new OptionDefinition(OptionValueType.NONE,\n+        \"Removes a key-value pair for the current entity from the index. \" +\n+            \"Key and value are optional\"));\n+    addOptionDefinition(\"c\", OPTION_DEF_FOR_C);\n+    addOptionDefinition(\"cd\", new OptionDefinition(OptionValueType.NONE,\n+        \"Does a 'cd' command to the returned node. \" +\n+            \"Could also be done using the -c option. (Implies -g)\"));\n+    addOptionDefinition(\"ls\", new OptionDefinition(OptionValueType.NONE,\n+        \"Does a 'ls' command on the returned entities. \" +\n+            \"Could also be done using the -c option. (Implies -g)\"));\n+    addOptionDefinition(\"create\", new OptionDefinition(OptionValueType.NONE,\n+        \"Creates a new index with a set of configuration parameters\"));\n+    addOptionDefinition(\"get-config\", new OptionDefinition(OptionValueType.NONE,\n+        \"Displays the configuration for an index\"));\n+    addOptionDefinition(\"set-config\", new OptionDefinition(OptionValueType.NONE,\n+        \"EXPERT, USE WITH CARE: Set one configuration parameter for an index (remove if no value)\"));\n+    addOptionDefinition(\"t\", new OptionDefinition(OptionValueType.MUST,\n+        \"The type of index, either Node or Relationship\"));\n+    addOptionDefinition(\"indexes\", new OptionDefinition(OptionValueType.NONE, \"Lists all index names\"));\n+    addOptionDefinition(\"delete\", new OptionDefinition(OptionValueType.NONE, \"Deletes an index\"));\n+  }\n \n-    @Override\n-    public String getName()\n-    {\n-        return \"index\";\n-    }\n+  @Override\n+  public String getName()\n+  {\n+    return \"index\";\n+  }\n \n-    @Override\n-    public String getDescription()\n-    {\n-        return \"Access the explicit indexes for your Neo4j graph database. \" +\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Access the explicit indexes for your Neo4j graph database. \" +\n         \"Use -g for getting nodes, -i and -r to manipulate.\\nExamples:\\n\" +\n         \"$ index -i persons name  (will index property 'name' with its value for current node in the 'persons' index)\\n\" +\n         \"$ index -g persons name \\\"Thomas A. Anderson\\\"  (will get nodes matching that name from the 'persons' index)\\n\" +\n@@ -97,316 +98,301 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n         \"$ index --set-config accounts type fulltext  (will set parameter 'type'='fulltext' for 'accounts' index).\\n\" +\n         \"$ index --set-config accounts to_lower_case  (will remove parameter 'to_lower_case' from 'accounts' index).\\n\" +\n         \"$ index -t Relationship --delete friends  (will delete the 'friends' relationship index).\";\n-    }\n+  }\n \n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-            throws ShellException, RemoteException\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session, Output out)\n+      throws ShellException, RemoteException\n+  {\n+    boolean doCd = parser.options().containsKey(\"cd\");\n+    boolean doLs = parser.options().containsKey(\"ls\");\n+    boolean query = parser.options().containsKey(\"q\");\n+    boolean get = parser.options().containsKey(\"g\") || query || doCd || doLs;\n+    boolean index = parser.options().containsKey(\"i\");\n+    boolean remove = parser.options().containsKey(\"r\");\n+    boolean getConfig = parser.options().containsKey(\"get-config\");\n+    boolean create = parser.options().containsKey(\"create\");\n+    boolean setConfig = parser.options().containsKey(\"set-config\");\n+    boolean delete = parser.options().containsKey(\"delete\");\n+    boolean indexes = parser.options().containsKey(\"indexes\");\n+    int count = boolCount(get, index, remove, getConfig, create, setConfig, delete, indexes);\n+    if (count != 1)\n     {\n-        boolean doCd = parser.options().containsKey( \"cd\" );\n-        boolean doLs = parser.options().containsKey( \"ls\" );\n-        boolean query = parser.options().containsKey( \"q\" );\n-        boolean get = parser.options().containsKey( \"g\" ) || query || doCd || doLs;\n-        boolean index = parser.options().containsKey( \"i\" );\n-        boolean remove = parser.options().containsKey( \"r\" );\n-        boolean getConfig = parser.options().containsKey( \"get-config\" );\n-        boolean create = parser.options().containsKey( \"create\" );\n-        boolean setConfig = parser.options().containsKey( \"set-config\" );\n-        boolean delete = parser.options().containsKey( \"delete\" );\n-        boolean indexes = parser.options().containsKey( \"indexes\" );\n-        int count = boolCount( get, index, remove, getConfig, create, setConfig, delete, indexes );\n-        if ( count != 1 )\n-        {\n-            throw new ShellException( \"Supply one of: -g, -i, -r, --get-config, --set-config, --create, --delete, --indexes\" );\n-        }\n-\n-        if ( get )\n-        {\n-            String commandToRun = parser.options().get( \"c\" );\n-            Collection<String> commandsToRun = new ArrayList<>();\n-            boolean specialCommand = false;\n-            if ( doCd || doLs )\n-            {\n-                specialCommand = true;\n-                if ( doCd )\n-                {\n-                    commandsToRun.add( \"cd -a $i\" );\n-                }\n-                else if ( doLs )\n-                {\n-                    commandsToRun.add( \"ls $i\" );\n-                }\n-            }\n-            else if ( commandToRun != null )\n-            {\n-                commandsToRun.addAll( Arrays.asList( commandToRun.split( Pattern.quote( \"&&\" ) ) ) );\n-            }\n-\n-            if ( getIndex( getIndexName( parser ), getEntityType( parser ), out ) == null )\n-            {\n-                return Continuation.INPUT_COMPLETE;\n-            }\n+      throw new ShellException(\"Supply one of: -g, -i, -r, --get-config, --set-config, --create, --delete, --indexes\");\n+    }\n \n-            try ( IndexHits<PropertyContainer> result = query ? query( parser, out ) : get( parser, out ) )\n-            {\n-                for ( PropertyContainer hit : result )\n-                {\n-                    printAndInterpretTemplateLines( commandsToRun, !specialCommand,\n-                            NodeOrRelationship.wrap( hit ), getServer(), session, out );\n-                }\n-            }\n-        }\n-        else if ( index )\n-        {\n-            index( parser, session, out );\n-        }\n-        else if ( remove )\n-        {\n-            if ( getIndex( getIndexName( parser ), Node.class, out ) == null )\n-            {\n-                return null;\n-            }\n-            remove( parser, session, out );\n-        }\n-        else if ( getConfig )\n-        {\n-            displayConfig( parser, out );\n-        }\n-        else if ( create )\n-        {\n-            createIndex( parser, out );\n-        }\n-        else if ( setConfig )\n+    if (get)\n+    {\n+      String commandToRun = parser.options().get(\"c\");\n+      Collection<String> commandsToRun = new ArrayList<>();\n+      boolean specialCommand = false;\n+      if (doCd || doLs)\n+      {\n+        specialCommand = true;\n+        if (doCd)\n         {\n-            setConfig( parser, out );\n-        }\n-        else if ( delete )\n+          commandsToRun.add(\"cd -a $i\");\n+        } else if (doLs)\n         {\n-            deleteIndex( parser, out );\n-        }\n-\n-        if ( indexes )\n-        {\n-            listIndexes( out );\n+          commandsToRun.add(\"ls $i\");\n         }\n+      } else if (commandToRun != null)\n+      {\n+        commandsToRun.addAll(Arrays.asList(commandToRun.split(Pattern.quote(\"&&\"))));\n+      }\n \n+      if (getIndex(getIndexName(parser), getEntityType(parser), out) == null)\n+      {\n         return Continuation.INPUT_COMPLETE;\n-    }\n+      }\n \n-    private String getIndexName( AppCommandParser parser ) throws ShellException\n+      try (IndexHits<PropertyContainer> result = query ? query(parser, out) : get(parser, out))\n+      {\n+        for (PropertyContainer hit : result)\n+        {\n+          printAndInterpretTemplateLines(commandsToRun, !specialCommand,\n+              NodeOrRelationship.wrap(hit), getServer(), session, out);\n+        }\n+      }\n+    } else if (index)\n+    {\n+      index(parser, session, out);\n+    } else if (remove)\n     {\n-        return parser.argument( 0, \"Index name not supplied\" );\n+      if (getIndex(getIndexName(parser), Node.class, out) == null)\n+      {\n+        return null;\n+      }\n+      remove(parser, session, out);\n+    } else if (getConfig)\n+    {\n+      displayConfig(parser, out);\n+    } else if (create)\n+    {\n+      createIndex(parser, out);\n+    } else if (setConfig)\n+    {\n+      setConfig(parser, out);\n+    } else if (delete)\n+    {\n+      deleteIndex(parser, out);\n     }\n \n-    private void listIndexes( Output out ) throws RemoteException\n+    if (indexes)\n     {\n-        out.println( \"Node indexes:\" );\n-        for ( String name : getServer().getDb().index().nodeIndexNames() )\n-        {\n-            out.println( \"  \" + name );\n-        }\n-        out.println( \"\" );\n-        out.println( \"Relationship indexes:\" );\n-        for ( String name : getServer().getDb().index().relationshipIndexNames() )\n-        {\n-            out.println( \"  \" + name );\n-        }\n+      listIndexes(out);\n     }\n \n-    private void deleteIndex( AppCommandParser parser, Output out ) throws RemoteException, ShellException\n+    return Continuation.INPUT_COMPLETE;\n+  }\n+\n+  private String getIndexName(AppCommandParser parser) throws ShellException\n+  {\n+    return parser.argument(0, \"Index name not supplied\");\n+  }\n+\n+  private void listIndexes(Output out) throws RemoteException\n+  {\n+    out.println(\"Node indexes:\");\n+    for (String name : getServer().getDb().index().nodeIndexNames())\n     {\n-        Index<? extends PropertyContainer> index = getIndex( getIndexName( parser ), getEntityType( parser ), out );\n-        if ( index != null )\n-        {\n-            index.delete();\n-        }\n+      out.println(\"  \" + name);\n     }\n-\n-    private void setConfig( AppCommandParser parser, Output out ) throws ShellException, RemoteException\n+    out.println(\"\");\n+    out.println(\"Relationship indexes:\");\n+    for (String name : getServer().getDb().index().relationshipIndexNames())\n     {\n-        String indexName = getIndexName( parser );\n-        String key = parser.argument( 1, \"Key not supplied\" );\n-        String value = parser.arguments().size() > 2 ? parser.arguments().get( 2 ) : null;\n-\n-        Class<? extends PropertyContainer> entityType = getEntityType( parser );\n-        Index<? extends PropertyContainer> index = getIndex( indexName, entityType, out );\n-        if ( index == null )\n-        {\n-            return;\n-        }\n-        String oldValue = value != null ?\n-                getServer().getDb().index().setConfiguration( index, key, value ) :\n-                getServer().getDb().index().removeConfiguration( index, key );\n-        printWarning( out );\n+      out.println(\"  \" + name);\n     }\n+  }\n \n-    private void printWarning( Output out ) throws RemoteException\n+  private void deleteIndex(AppCommandParser parser, Output out) throws RemoteException, ShellException\n+  {\n+    Index<? extends PropertyContainer> index = getIndex(getIndexName(parser), getEntityType(parser), out);\n+    if (index != null)\n     {\n-        out.println( \"INDEX CONFIGURATION CHANGED, INDEX DATA MAY BE INVALID\" );\n+      index.delete();\n     }\n+  }\n+\n+  private void setConfig(AppCommandParser parser, Output out) throws ShellException, RemoteException\n+  {\n+    String indexName = getIndexName(parser);\n+    String key = parser.argument(1, \"Key not supplied\");\n+    String value = parser.arguments().size() > 2 ? parser.arguments().get(2) : null;\n \n-    private void createIndex( AppCommandParser parser, Output out ) throws RemoteException, ShellException\n+    Class<? extends PropertyContainer> entityType = getEntityType(parser);\n+    Index<? extends PropertyContainer> index = getIndex(indexName, entityType, out);\n+    if (index == null)\n     {\n-        String indexName = getIndexName( parser );\n-        Class<? extends PropertyContainer> entityType = getEntityType( parser );\n-        if ( getIndex( indexName, entityType, null ) != null )\n-        {\n-            out.println( entityType.getSimpleName() + \" index '\" + indexName + \"' already exists\" );\n-            return;\n-        }\n+      return;\n+    }\n+    String oldValue = value != null ?\n+        getServer().getDb().index().setConfiguration(index, key, value) :\n+        getServer().getDb().index().removeConfiguration(index, key);\n+    printWarning(out);\n+  }\n \n-        Map config;\n-        try\n-        {\n-            config = parser.arguments().size() >= 2 ? parseJSONMap( parser.arguments().get( 1 ) ) : null;\n-        }\n-        catch ( JSONException e )\n-        {\n-            throw ShellException.wrapCause( e );\n-        }\n+  private void printWarning(Output out) throws RemoteException\n+  {\n+    out.println(\"INDEX CONFIGURATION CHANGED, INDEX DATA MAY BE INVALID\");\n+  }\n \n-        if ( entityType.equals( Node.class ) )\n-        {\n-            Index<Node> index = config != null ? getServer().getDb().index().forNodes( indexName, config ) :\n-                    getServer().getDb().index().forNodes( indexName );\n-        }\n-        else\n-        {\n-            Index<Relationship> index = config != null ? getServer().getDb().index().forRelationships( indexName, config ) :\n-                getServer().getDb().index().forRelationships( indexName );\n-        }\n+  private void createIndex(AppCommandParser parser, Output out) throws RemoteException, ShellException\n+  {\n+    String indexName = getIndexName(parser);\n+    Class<? extends PropertyContainer> entityType = getEntityType(parser);\n+    if (getIndex(indexName, entityType, null) != null)\n+    {\n+      out.println(entityType.getSimpleName() + \" index '\" + indexName + \"' already exists\");\n+      return;\n     }\n \n-    private <T extends PropertyContainer> Index<T> getIndex( String indexName, Class<T> type, Output out )\n-            throws RemoteException\n+    Map config;\n+    try\n     {\n-        IndexManager index = getServer().getDb().index();\n-        boolean exists = (type.equals( Node.class ) && index.existsForNodes( indexName )) ||\n-                (type.equals( Relationship.class ) && index.existsForRelationships( indexName ));\n-        if ( !exists )\n-        {\n-            if ( out != null )\n-            {\n-                out.println( \"No such \" + type.getSimpleName().toLowerCase() + \" index '\" + indexName + \"'\" );\n-            }\n-            return null;\n-        }\n-        return (Index<T>) (type.equals( Node.class ) ? index.forNodes( indexName ) : index.forRelationships( indexName ));\n+      config = parser.arguments().size() >= 2 ? parseJSONMap(parser.arguments().get(1)) : null;\n+    } catch (JSONException e)\n+    {\n+      throw ShellException.wrapCause(e);\n     }\n \n-    private void displayConfig( AppCommandParser parser, Output out )\n-            throws RemoteException, ShellException\n+    if (entityType.equals(Node.class))\n     {\n-        String indexName = getIndexName( parser );\n-        Index<? extends PropertyContainer> index = getIndex( indexName, getEntityType( parser ), out );\n-        if ( index == null )\n-        {\n-            return;\n-        }\n-        try\n-        {\n-            out.println( new JSONObject( getServer().getDb().index().getConfiguration( index ) ).toString( 4 ) );\n-        }\n-        catch ( JSONException e )\n-        {\n-            throw ShellException.wrapCause( e );\n-        }\n+      Index<Node> index = config != null ? getServer().getDb().index().forNodes(indexName, config) :\n+          getServer().getDb().index().forNodes(indexName);\n+    } else\n+    {\n+      Index<Relationship> index = config != null ? getServer().getDb().index().forRelationships(indexName, config) :\n+          getServer().getDb().index().forRelationships(indexName);\n     }\n+  }\n \n-    private Class<? extends PropertyContainer> getEntityType( AppCommandParser parser ) throws ShellException\n+  private <T extends PropertyContainer> Index<T> getIndex(String indexName, Class<T> type, Output out)\n+      throws RemoteException\n+  {\n+    IndexManager index = getServer().getDb().index();\n+    boolean exists = (type.equals(Node.class) && index.existsForNodes(indexName)) ||\n+        (type.equals(Relationship.class) && index.existsForRelationships(indexName));\n+    if (!exists)\n     {\n-        String type = parser.options().get( \"t\" );\n-        type = type != null ? type.toLowerCase() : null;\n-        if ( type == null || type.equals( \"node\" ) )\n-        {\n-            return Node.class;\n-        }\n-        else if ( type.equals( \"relationship\" ) )\n-        {\n-            return Relationship.class;\n-        }\n-        throw new ShellException( \"'type' expects one of [Node, Relationship]\" );\n+      if (out != null)\n+      {\n+        out.println(\"No such \" + type.getSimpleName().toLowerCase() + \" index '\" + indexName + \"'\");\n+      }\n+      return null;\n     }\n+    return (Index<T>) (type.equals(Node.class) ? index.forNodes(indexName) : index.forRelationships(indexName));\n+  }\n \n-    private int boolCount( boolean... bools )\n+  private void displayConfig(AppCommandParser parser, Output out)\n+      throws RemoteException, ShellException\n+  {\n+    String indexName = getIndexName(parser);\n+    Index<? extends PropertyContainer> index = getIndex(indexName, getEntityType(parser), out);\n+    if (index == null)\n     {\n-        int count = 0;\n-        for ( boolean bool : bools )\n-        {\n-            if ( bool )\n-            {\n-                count++;\n-            }\n-        }\n-        return count;\n+      return;\n+    }\n+    try\n+    {\n+      out.println(new JSONObject(getServer().getDb().index().getConfiguration(index)).toString(4));\n+    } catch (JSONException e)\n+    {\n+      throw ShellException.wrapCause(e);\n     }\n+  }\n \n-    private IndexHits<PropertyContainer> get( AppCommandParser parser, Output out ) throws ShellException, RemoteException\n+  private Class<? extends PropertyContainer> getEntityType(AppCommandParser parser) throws ShellException\n+  {\n+    String type = parser.options().get(\"t\");\n+    type = type != null ? type.toLowerCase() : null;\n+    if (type == null || type.equals(\"node\"))\n     {\n-        String index = getIndexName( parser );\n-        String key = parser.argument( 1, \"Key not supplied\" );\n-        String value = parser.argument( 2, \"Value not supplied\" );\n-        Index theIndex = getIndex( index, getEntityType( parser ), out );\n-        return theIndex.get( key, value );\n+      return Node.class;\n+    } else if (type.equals(\"relationship\"))\n+    {\n+      return Relationship.class;\n     }\n+    throw new ShellException(\"'type' expects one of [Node, Relationship]\");\n+  }\n \n-    private IndexHits<PropertyContainer> query( AppCommandParser parser, Output out ) throws RemoteException, ShellException\n+  private int boolCount(boolean... bools)\n+  {\n+    int count = 0;\n+    for (boolean bool : bools)\n     {\n-        String index = getIndexName( parser );\n-        String query1 = parser.argument( 1, \"Key not supplied\" );\n-        String query2 = parser.argumentWithDefault( 2, null );\n-        Index theIndex = getIndex( index, getEntityType( parser ), out );\n-        return query2 != null ? theIndex.query( query1, query2 ) : theIndex.query( query1 );\n+      if (bool)\n+      {\n+        count++;\n+      }\n     }\n+    return count;\n+  }\n+\n+  private IndexHits<PropertyContainer> get(AppCommandParser parser, Output out) throws ShellException, RemoteException\n+  {\n+    String index = getIndexName(parser);\n+    String key = parser.argument(1, \"Key not supplied\");\n+    String value = parser.argument(2, \"Value not supplied\");\n+    Index theIndex = getIndex(index, getEntityType(parser), out);\n+    return theIndex.get(key, value);\n+  }\n+\n+  private IndexHits<PropertyContainer> query(AppCommandParser parser, Output out) throws RemoteException, ShellException\n+  {\n+    String index = getIndexName(parser);\n+    String query1 = parser.argument(1, \"Key not supplied\");\n+    String query2 = parser.argumentWithDefault(2, null);\n+    Index theIndex = getIndex(index, getEntityType(parser), out);\n+    return query2 != null ? theIndex.query(query1, query2) : theIndex.query(query1);\n+  }\n \n-    private void index( AppCommandParser parser, Session session, Output out ) throws ShellException\n+  private void index(AppCommandParser parser, Session session, Output out) throws ShellException\n+  {\n+    NodeOrRelationship current = getCurrent(session);\n+    String index = getIndexName(parser);\n+    String key = parser.argument(1, \"Key not supplied\");\n+    Object value = parser.arguments().size() > 2 ? parser.arguments().get(2) : current.getProperty(key, null);\n+    if (value == null)\n     {\n-        NodeOrRelationship current = getCurrent( session );\n-        String index = getIndexName( parser );\n-        String key = parser.argument( 1, \"Key not supplied\" );\n-        Object value = parser.arguments().size() > 2 ? parser.arguments().get( 2 ) : current.getProperty( key, null );\n-        if ( value == null )\n-        {\n-            throw new ShellException( \"No value to index\" );\n-        }\n-        Index theIndex = current.isNode() ? getServer().getDb().index().forNodes( index ) :\n-                getServer().getDb().index().forRelationships( index );\n-        theIndex.add( current.asPropertyContainer(), key, value );\n+      throw new ShellException(\"No value to index\");\n     }\n+    Index theIndex = current.isNode() ? getServer().getDb().index().forNodes(index) :\n+        getServer().getDb().index().forRelationships(index);\n+    theIndex.add(current.asPropertyContainer(), key, value);\n+  }\n \n-    private void remove( AppCommandParser parser, Session session, Output out ) throws ShellException, RemoteException\n+  private void remove(AppCommandParser parser, Session session, Output out) throws ShellException, RemoteException\n+  {\n+    NodeOrRelationship current = getCurrent(session);\n+    String index = getIndexName(parser);\n+    String key = parser.argumentWithDefault(1, null);\n+    Object value = null;\n+    if (key != null)\n     {\n-        NodeOrRelationship current = getCurrent( session );\n-        String index = getIndexName( parser );\n-        String key = parser.argumentWithDefault( 1, null );\n-        Object value = null;\n-        if ( key != null )\n-        {\n-            value = parser.argumentWithDefault( 2, null );\n-        }\n-        Index theIndex;\n-        if ( current.isNode() )\n-        {\n-            theIndex = getIndex( index, Node.class, out );\n-        }\n-        else\n-        {\n-            theIndex = getIndex( index, Relationship.class, out );\n-        }\n-        if ( theIndex != null )\n-        {\n-            if ( key != null && value != null )\n-            {\n-                theIndex.remove( current.asPropertyContainer(), key, value );\n-            }\n-            else if ( key != null )\n-            {\n-                theIndex.remove( current.asPropertyContainer(), key );\n-            }\n-            else\n-            {\n-                theIndex.remove( current.asPropertyContainer() );\n-            }\n-        }\n+      value = parser.argumentWithDefault(2, null);\n+    }\n+    Index theIndex;\n+    if (current.isNode())\n+    {\n+      theIndex = getIndex(index, Node.class, out);\n+    } else\n+    {\n+      theIndex = getIndex(index, Relationship.class, out);\n+    }\n+    if (theIndex != null)\n+    {\n+      if (key != null && value != null)\n+      {\n+        theIndex.remove(current.asPropertyContainer(), key, value);\n+      } else if (key != null)\n+      {\n+        theIndex.remove(current.asPropertyContainer(), key);\n+      } else\n+      {\n+        theIndex.remove(current.asPropertyContainer());\n+      }\n     }\n+  }\n }\n",
            "diff_size": 435
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,004).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4272/IndexProviderShellApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4272/IndexProviderShellApp.java\nindex 99996572fd6..a9088fffca4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4272/IndexProviderShellApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4272/IndexProviderShellApp.java\n@@ -48,33 +48,18 @@ import org.neo4j.shell.util.json.JSONObject;\n public class IndexProviderShellApp extends TransactionProvidingApp\n {\n     {\n-        addOptionDefinition( \"g\", new OptionDefinition( OptionValueType.NONE,\n-                \"Get entities for the given key and value\" ) );\n-        addOptionDefinition( \"q\", new OptionDefinition( OptionValueType.NONE,\n-                \"Get entities for the given query\" ) );\n-        addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE,\n-                \"Index the current entity with a key and (optionally) value. \" +\n-                \"If no value is given the property value for the key is \" +\n-                \"used\" ) );\n-        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE,\n-                \"Removes a key-value pair for the current entity from the index. \" +\n-                \"Key and value are optional\" ) );\n-        addOptionDefinition( \"c\", OPTION_DEF_FOR_C );\n-        addOptionDefinition( \"cd\", new OptionDefinition( OptionValueType.NONE,\n-                \"Does a 'cd' command to the returned node. \" +\n-                \"Could also be done using the -c option. (Implies -g)\" ) );\n-        addOptionDefinition( \"ls\", new OptionDefinition( OptionValueType.NONE,\n-                \"Does a 'ls' command on the returned entities. \" +\n-                \"Could also be done using the -c option. (Implies -g)\" ) );\n-        addOptionDefinition( \"create\", new OptionDefinition( OptionValueType.NONE,\n-                \"Creates a new index with a set of configuration parameters\" ) );\n-        addOptionDefinition( \"get-config\", new OptionDefinition( OptionValueType.NONE,\n-                \"Displays the configuration for an index\" ) );\n-        addOptionDefinition( \"set-config\", new OptionDefinition( OptionValueType.NONE,\n-                \"EXPERT, USE WITH CARE: Set one configuration parameter for an index (remove if no value)\" ) );\n-        addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST,\n-                \"The type of index, either Node or Relationship\" ) );\n-        addOptionDefinition( \"indexes\", new OptionDefinition( OptionValueType.NONE, \"Lists all index names\" ) );\n+        addOptionDefinition( \"g\", new OptionDefinition( OptionValueType.NONE, \"Get entities for the given key and value\" ) );\n+addOptionDefinition( \"q\", new OptionDefinition( OptionValueType.NONE, \"Get entities for the given query\" ) );\n+addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE, \"Index the current entity with a key and (optionally) value. \" + \"If no value is given the property value for the key is \" + \"used\" ) );\n+addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE, \"Removes a key-value pair for the current entity from the index. \" + \"Key and value are optional\" ) );\n+addOptionDefinition( \"c\", OPTION_DEF_FOR_C );\n+        addOptionDefinition( \"cd\", new OptionDefinition( OptionValueType.NONE, \"Does a 'cd' command to the returned node. \" + \"Could also be done using the -c option. (Implies -g)\" ) );\n+addOptionDefinition( \"ls\", new OptionDefinition( OptionValueType.NONE, \"Does a 'ls' command on the returned entities. \" + \"Could also be done using the -c option. (Implies -g)\" ) );\n+addOptionDefinition( \"create\", new OptionDefinition( OptionValueType.NONE, \"Creates a new index with a set of configuration parameters\" ) );\n+addOptionDefinition( \"get-config\", new OptionDefinition( OptionValueType.NONE, \"Displays the configuration for an index\" ) );\n+addOptionDefinition( \"set-config\", new OptionDefinition( OptionValueType.NONE, \"EXPERT, USE WITH CARE: Set one configuration parameter for an index (remove if no value)\" ) );\n+addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST, \"The type of index, either Node or Relationship\" ) );\n+addOptionDefinition( \"indexes\", new OptionDefinition( OptionValueType.NONE, \"Lists all index names\" ) );\n         addOptionDefinition( \"delete\", new OptionDefinition( OptionValueType.NONE, \"Deletes an index\" ) );\n     }\n \n@@ -87,22 +72,12 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n     @Override\n     public String getDescription()\n     {\n-        return \"Access the explicit indexes for your Neo4j graph database. \" +\n-        \"Use -g for getting nodes, -i and -r to manipulate.\\nExamples:\\n\" +\n-        \"$ index -i persons name  (will index property 'name' with its value for current node in the 'persons' index)\\n\" +\n-        \"$ index -g persons name \\\"Thomas A. Anderson\\\"  (will get nodes matching that name from the 'persons' index)\\n\" +\n-        \"$ index -q persons \\\"name:'Thomas*'\\\"  (will get nodes with names that start with Thomas)\\n\" +\n-        \"$ index --cd persons name \\\"Agent Smith\\\"  (will 'cd' to the 'Agent Smith' node from the 'persons' index).\\n\\n\" +\n-        \"EXPERT, USE WITH CARE. NOTE THAT INDEX DATA MAY BECOME INVALID AFTER CONFIGURATION CHANGES:\\n\" +\n-        \"$ index --set-config accounts type fulltext  (will set parameter 'type'='fulltext' for 'accounts' index).\\n\" +\n-        \"$ index --set-config accounts to_lower_case  (will remove parameter 'to_lower_case' from 'accounts' index).\\n\" +\n-        \"$ index -t Relationship --delete friends  (will delete the 'friends' relationship index).\";\n+        return \"Access the explicit indexes for your Neo4j graph database. \" + \"Use -g for getting nodes, -i and -r to manipulate.\\nExamples:\\n\" + \"$ index -i persons name  (will index property 'name' with its value for current node in the 'persons' index)\\n\" + \"$ index -g persons name \\\"Thomas A. Anderson\\\"  (will get nodes matching that name from the 'persons' index)\\n\" + \"$ index -q persons \\\"name:'Thomas*'\\\"  (will get nodes with names that start with Thomas)\\n\" + \"$ index --cd persons name \\\"Agent Smith\\\"  (will 'cd' to the 'Agent Smith' node from the 'persons' index).\\n\\n\" + \"EXPERT, USE WITH CARE. NOTE THAT INDEX DATA MAY BECOME INVALID AFTER CONFIGURATION CHANGES:\\n\" + \"$ index --set-config accounts type fulltext  (will set parameter 'type'='fulltext' for 'accounts' index).\\n\" + \"$ index --set-config accounts to_lower_case  (will remove parameter 'to_lower_case' from 'accounts' index).\\n\" + \"$ index -t Relationship --delete friends  (will delete the 'friends' relationship index).\";\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-            throws ShellException, RemoteException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws ShellException, RemoteException\n+{\n         boolean doCd = parser.options().containsKey( \"cd\" );\n         boolean doLs = parser.options().containsKey( \"ls\" );\n         boolean query = parser.options().containsKey( \"q\" );\n@@ -153,7 +128,7 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n                 {\n                     printAndInterpretTemplateLines( commandsToRun, !specialCommand,\n                             NodeOrRelationship.wrap( hit ), getServer(), session, out );\n-                }\n+    }\n             }\n         }\n         else if ( index )\n@@ -166,7 +141,8 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n             {\n                 return null;\n             }\n-            remove( parser, session, out );\n+\n+remove( parser, session, out );\n         }\n         else if ( getConfig )\n         {\n@@ -234,10 +210,9 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n         {\n             return;\n         }\n-        String oldValue = value != null ?\n-                getServer().getDb().index().setConfiguration( index, key, value ) :\n-                getServer().getDb().index().removeConfiguration( index, key );\n-        printWarning( out );\n+\n+String oldValue = value != null ? getServer().getDb().index().setConfiguration( index, key, value ) : getServer().getDb().index().removeConfiguration( index, key );\n+printWarning( out );\n     }\n \n     private void printWarning( Output out ) throws RemoteException\n@@ -267,23 +242,19 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n \n         if ( entityType.equals( Node.class ) )\n         {\n-            Index<Node> index = config != null ? getServer().getDb().index().forNodes( indexName, config ) :\n-                    getServer().getDb().index().forNodes( indexName );\n+            Index<Node> index = config != null ? getServer().getDb().index().forNodes( indexName, config ) : getServer().getDb().index().forNodes( indexName );\n         }\n         else\n         {\n-            Index<Relationship> index = config != null ? getServer().getDb().index().forRelationships( indexName, config ) :\n-                getServer().getDb().index().forRelationships( indexName );\n-        }\n+            Index<Relationship> index = config != null ? getServer().getDb().index().forRelationships( indexName, config ) : getServer().getDb().index().forRelationships( indexName );\n+    }\n     }\n \n-    private <T extends PropertyContainer> Index<T> getIndex( String indexName, Class<T> type, Output out )\n-            throws RemoteException\n-    {\n+    private <T extends PropertyContainer> Index<T> getIndex( String indexName, Class<T> type, Output out ) throws RemoteException\n+{\n         IndexManager index = getServer().getDb().index();\n-        boolean exists = (type.equals( Node.class ) && index.existsForNodes( indexName )) ||\n-                (type.equals( Relationship.class ) && index.existsForRelationships( indexName ));\n-        if ( !exists )\n+        boolean exists = (type.equals( Node.class ) && index.existsForNodes( indexName )) || (type.equals( Relationship.class ) && index.existsForRelationships( indexName ));\n+if ( !exists )\n         {\n             if ( out != null )\n             {\n@@ -294,16 +265,16 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n         return (Index<T>) (type.equals( Node.class ) ? index.forNodes( indexName ) : index.forRelationships( indexName ));\n     }\n \n-    private void displayConfig( AppCommandParser parser, Output out )\n-            throws RemoteException, ShellException\n-    {\n+    private void displayConfig( AppCommandParser parser, Output out ) throws RemoteException, ShellException\n+{\n         String indexName = getIndexName( parser );\n         Index<? extends PropertyContainer> index = getIndex( indexName, getEntityType( parser ), out );\n         if ( index == null )\n         {\n             return;\n         }\n-        try\n+\n+try\n         {\n             out.println( new JSONObject( getServer().getDb().index().getConfiguration( index ) ).toString( 4 ) );\n         }\n@@ -369,9 +340,9 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n         {\n             throw new ShellException( \"No value to index\" );\n         }\n-        Index theIndex = current.isNode() ? getServer().getDb().index().forNodes( index ) :\n-                getServer().getDb().index().forRelationships( index );\n-        theIndex.add( current.asPropertyContainer(), key, value );\n+\n+Index theIndex = current.isNode() ? getServer().getDb().index().forNodes( index ) : getServer().getDb().index().forRelationships( index );\n+theIndex.add( current.asPropertyContainer(), key, value );\n     }\n \n     private void remove( AppCommandParser parser, Session session, Output out ) throws ShellException, RemoteException\n@@ -384,7 +355,8 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n         {\n             value = parser.argumentWithDefault( 2, null );\n         }\n-        Index theIndex;\n+\n+Index theIndex;\n         if ( current.isNode() )\n         {\n             theIndex = getIndex( index, Node.class, out );\n@@ -393,7 +365,8 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n         {\n             theIndex = getIndex( index, Relationship.class, out );\n         }\n-        if ( theIndex != null )\n+\n+if ( theIndex != null )\n         {\n             if ( key != null && value != null )\n             {\n@@ -409,4 +382,4 @@ public class IndexProviderShellApp extends TransactionProvidingApp\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 71
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}