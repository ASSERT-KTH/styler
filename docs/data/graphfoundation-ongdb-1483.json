{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1483",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1483/TransactionDependenciesResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1483/TransactionDependenciesResolver.java\nindex 1ecfb14d2f4..ead3ceac0f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1483/TransactionDependenciesResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1483/TransactionDependenciesResolver.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.enterprise.builtinprocs;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -45,131 +46,131 @@ import static java.util.stream.Collectors.toMap;\n \n public class TransactionDependenciesResolver\n {\n-    private final Map<KernelTransactionHandle,List<QuerySnapshot>> handleSnapshotsMap;\n-    private Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies;\n-\n-    TransactionDependenciesResolver( Map<KernelTransactionHandle,List<QuerySnapshot>> handleSnapshotsMap )\n-    {\n-        this.handleSnapshotsMap = handleSnapshotsMap;\n-        this.directDependencies = initDirectDependencies();\n-    }\n-\n-    public boolean isBlocked( KernelTransactionHandle handle )\n-    {\n-        return directDependencies.get( handle ) != null;\n-    }\n-\n-    public String describeBlockingTransactions( KernelTransactionHandle handle  )\n+  private final Map<KernelTransactionHandle, List<QuerySnapshot>> handleSnapshotsMap;\n+  private Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies;\n+\n+  TransactionDependenciesResolver(Map<KernelTransactionHandle, List<QuerySnapshot>> handleSnapshotsMap)\n+  {\n+    this.handleSnapshotsMap = handleSnapshotsMap;\n+    this.directDependencies = initDirectDependencies();\n+  }\n+\n+  public boolean isBlocked(KernelTransactionHandle handle)\n+  {\n+    return directDependencies.get(handle) != null;\n+  }\n+\n+  public String describeBlockingTransactions(KernelTransactionHandle handle)\n+  {\n+    Set<KernelTransactionHandle> allBlockers = new TreeSet<>(\n+        Comparator.comparingLong(KernelTransactionHandle::getUserTransactionId));\n+    Set<KernelTransactionHandle> handles = directDependencies.get(handle);\n+    if (handles != null)\n     {\n-        Set<KernelTransactionHandle> allBlockers = new TreeSet<>(\n-                Comparator.comparingLong( KernelTransactionHandle::getUserTransactionId ) );\n-        Set<KernelTransactionHandle> handles = directDependencies.get( handle );\n-        if ( handles != null )\n+      Deque<KernelTransactionHandle> blockerQueue = new ArrayDeque<>(handles);\n+      while (!blockerQueue.isEmpty())\n+      {\n+        KernelTransactionHandle transactionHandle = blockerQueue.pop();\n+        if (allBlockers.add(transactionHandle))\n         {\n-            Deque<KernelTransactionHandle> blockerQueue = new ArrayDeque<>( handles );\n-            while ( !blockerQueue.isEmpty() )\n-            {\n-                KernelTransactionHandle transactionHandle = blockerQueue.pop();\n-                if ( allBlockers.add( transactionHandle ) )\n-                {\n-                    Set<KernelTransactionHandle> transactionHandleSet = directDependencies.get( transactionHandle );\n-                    if ( transactionHandleSet != null )\n-                    {\n-                        blockerQueue.addAll( transactionHandleSet );\n-                    }\n-                }\n-            }\n+          Set<KernelTransactionHandle> transactionHandleSet = directDependencies.get(transactionHandle);\n+          if (transactionHandleSet != null)\n+          {\n+            blockerQueue.addAll(transactionHandleSet);\n+          }\n         }\n-        return describe( allBlockers );\n+      }\n     }\n+    return describe(allBlockers);\n+  }\n \n-    public Map<String,Object> describeBlockingLocks( KernelTransactionHandle handle )\n+  public Map<String, Object> describeBlockingLocks(KernelTransactionHandle handle)\n+  {\n+    List<QuerySnapshot> querySnapshots = handleSnapshotsMap.get(handle);\n+    if (!querySnapshots.isEmpty())\n     {\n-        List<QuerySnapshot> querySnapshots = handleSnapshotsMap.get( handle );\n-        if ( !querySnapshots.isEmpty() )\n-        {\n-            return querySnapshots.get( 0 ).resourceInformation();\n-        }\n-        return Collections.emptyMap();\n+      return querySnapshots.get(0).resourceInformation();\n     }\n+    return Collections.emptyMap();\n+  }\n \n-    private Map<KernelTransactionHandle,Set<KernelTransactionHandle>> initDirectDependencies()\n-    {\n-        Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies = new HashMap<>();\n+  private Map<KernelTransactionHandle, Set<KernelTransactionHandle>> initDirectDependencies()\n+  {\n+    Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies = new HashMap<>();\n \n-        Map<KernelTransactionHandle,List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream()\n-                .collect( toMap( identity(), getTransactionLocks() ) );\n-\n-        for ( Map.Entry<KernelTransactionHandle,List<QuerySnapshot>> entry : handleSnapshotsMap.entrySet() )\n-        {\n-            List<QuerySnapshot> querySnapshots = entry.getValue();\n-            if ( !querySnapshots.isEmpty() )\n-            {\n-                KernelTransactionHandle txHandle = entry.getKey();\n-                evaluateDirectDependencies( directDependencies, transactionLocksMap, txHandle, querySnapshots.get( 0 ) );\n-            }\n-        }\n-        return directDependencies;\n-    }\n+    Map<KernelTransactionHandle, List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream()\n+        .collect(toMap(identity(), getTransactionLocks()));\n \n-    private Function<KernelTransactionHandle,List<ActiveLock>> getTransactionLocks()\n+    for (Map.Entry<KernelTransactionHandle, List<QuerySnapshot>> entry : handleSnapshotsMap.entrySet())\n     {\n-        return transactionHandle -> transactionHandle.activeLocks().collect( toList() );\n+      List<QuerySnapshot> querySnapshots = entry.getValue();\n+      if (!querySnapshots.isEmpty())\n+      {\n+        KernelTransactionHandle txHandle = entry.getKey();\n+        evaluateDirectDependencies(directDependencies, transactionLocksMap, txHandle, querySnapshots.get(0));\n+      }\n     }\n-\n-    private void evaluateDirectDependencies( Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies,\n-            Map<KernelTransactionHandle,List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle,\n-            QuerySnapshot querySnapshot )\n+    return directDependencies;\n+  }\n+\n+  private Function<KernelTransactionHandle, List<ActiveLock>> getTransactionLocks()\n+  {\n+    return transactionHandle -> transactionHandle.activeLocks().collect(toList());\n+  }\n+\n+  private void evaluateDirectDependencies(Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies,\n+                                          Map<KernelTransactionHandle, List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle,\n+                                          QuerySnapshot querySnapshot)\n+  {\n+    List<ActiveLock> waitingOnLocks = querySnapshot.waitingLocks();\n+    for (ActiveLock activeLock : waitingOnLocks)\n     {\n-        List<ActiveLock> waitingOnLocks = querySnapshot.waitingLocks();\n-        for ( ActiveLock activeLock : waitingOnLocks )\n+      for (Map.Entry<KernelTransactionHandle, List<ActiveLock>> handleListEntry : handleLocksMap.entrySet())\n+      {\n+        KernelTransactionHandle kernelTransactionHandle = handleListEntry.getKey();\n+        if (!kernelTransactionHandle.equals(txHandle))\n         {\n-            for ( Map.Entry<KernelTransactionHandle,List<ActiveLock>> handleListEntry : handleLocksMap.entrySet() )\n-            {\n-                KernelTransactionHandle kernelTransactionHandle = handleListEntry.getKey();\n-                if ( !kernelTransactionHandle.equals( txHandle ) )\n-                {\n-                    if ( isBlocked( activeLock, handleListEntry.getValue() ) )\n-                    {\n-                        Set<KernelTransactionHandle> kernelTransactionHandles =\n-                                directDependencies.computeIfAbsent( txHandle, handle -> new HashSet<>() );\n-                        kernelTransactionHandles.add( kernelTransactionHandle );\n-                    }\n-                }\n-            }\n+          if (isBlocked(activeLock, handleListEntry.getValue()))\n+          {\n+            Set<KernelTransactionHandle> kernelTransactionHandles =\n+                directDependencies.computeIfAbsent(txHandle, handle -> new HashSet<>());\n+            kernelTransactionHandles.add(kernelTransactionHandle);\n+          }\n         }\n+      }\n     }\n-\n-    private boolean isBlocked( ActiveLock activeLock, List<ActiveLock> activeLocks )\n-    {\n-        return ActiveLock.EXCLUSIVE_MODE.equals( activeLock.mode() ) ?\n-               haveAnyLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() ) :\n-               haveExclusiveLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() );\n-    }\n-\n-    private static boolean haveAnyLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n-    {\n-        return locks.stream().anyMatch( lock -> lock.resourceId() == resourceId && lock.resourceType() == resourceType );\n-    }\n-\n-    private static boolean haveExclusiveLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n+  }\n+\n+  private boolean isBlocked(ActiveLock activeLock, List<ActiveLock> activeLocks)\n+  {\n+    return ActiveLock.EXCLUSIVE_MODE.equals(activeLock.mode()) ?\n+        haveAnyLocking(activeLocks, activeLock.resourceType(), activeLock.resourceId()) :\n+        haveExclusiveLocking(activeLocks, activeLock.resourceType(), activeLock.resourceId());\n+  }\n+\n+  private static boolean haveAnyLocking(List<ActiveLock> locks, ResourceType resourceType, long resourceId)\n+  {\n+    return locks.stream().anyMatch(lock -> lock.resourceId() == resourceId && lock.resourceType() == resourceType);\n+  }\n+\n+  private static boolean haveExclusiveLocking(List<ActiveLock> locks, ResourceType resourceType, long resourceId)\n+  {\n+    return locks.stream().anyMatch(lock -> ActiveLock.EXCLUSIVE_MODE.equals(lock.mode()) &&\n+        lock.resourceId() == resourceId &&\n+        lock.resourceType() == resourceType);\n+  }\n+\n+  private String describe(Set<KernelTransactionHandle> allBlockers)\n+  {\n+    if (allBlockers.isEmpty())\n     {\n-        return locks.stream().anyMatch( lock -> ActiveLock.EXCLUSIVE_MODE.equals( lock.mode() ) &&\n-                lock.resourceId() == resourceId &&\n-                lock.resourceType() == resourceType );\n+      return StringUtils.EMPTY;\n     }\n-\n-    private String describe( Set<KernelTransactionHandle> allBlockers )\n+    StringJoiner stringJoiner = new StringJoiner(\", \", \"[\", \"]\");\n+    for (KernelTransactionHandle blocker : allBlockers)\n     {\n-        if ( allBlockers.isEmpty() )\n-        {\n-            return StringUtils.EMPTY;\n-        }\n-        StringJoiner stringJoiner = new StringJoiner( \", \", \"[\", \"]\" );\n-        for ( KernelTransactionHandle blocker : allBlockers )\n-        {\n-            stringJoiner.add( blocker.getUserTransactionName() );\n-        }\n-        return stringJoiner.toString();\n+      stringJoiner.add(blocker.getUserTransactionName());\n     }\n+    return stringJoiner.toString();\n+  }\n }\n",
            "diff_size": 151
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "column": "97",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1483/TransactionDependenciesResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1483/TransactionDependenciesResolver.java\nindex 1ecfb14d2f4..e75b53d2cbe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1483/TransactionDependenciesResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1483/TransactionDependenciesResolver.java\n@@ -59,11 +59,10 @@ public class TransactionDependenciesResolver\n         return directDependencies.get( handle ) != null;\n     }\n \n-    public String describeBlockingTransactions( KernelTransactionHandle handle  )\n+    public String describeBlockingTransactions( KernelTransactionHandle handle )\n     {\n-        Set<KernelTransactionHandle> allBlockers = new TreeSet<>(\n-                Comparator.comparingLong( KernelTransactionHandle::getUserTransactionId ) );\n-        Set<KernelTransactionHandle> handles = directDependencies.get( handle );\n+        Set<KernelTransactionHandle> allBlockers = new TreeSet<>( Comparator.comparingLong( KernelTransactionHandle::getUserTransactionId ) );\n+Set<KernelTransactionHandle> handles = directDependencies.get( handle );\n         if ( handles != null )\n         {\n             Deque<KernelTransactionHandle> blockerQueue = new ArrayDeque<>( handles );\n@@ -90,17 +89,16 @@ public class TransactionDependenciesResolver\n         {\n             return querySnapshots.get( 0 ).resourceInformation();\n         }\n-        return Collections.emptyMap();\n+\n+return Collections.emptyMap();\n     }\n \n     private Map<KernelTransactionHandle,Set<KernelTransactionHandle>> initDirectDependencies()\n     {\n         Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies = new HashMap<>();\n \n-        Map<KernelTransactionHandle,List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream()\n-                .collect( toMap( identity(), getTransactionLocks() ) );\n-\n-        for ( Map.Entry<KernelTransactionHandle,List<QuerySnapshot>> entry : handleSnapshotsMap.entrySet() )\n+        Map<KernelTransactionHandle,List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream().collect( toMap( identity(), getTransactionLocks() ) );\n+for ( Map.Entry<KernelTransactionHandle,List<QuerySnapshot>> entry : handleSnapshotsMap.entrySet() )\n         {\n             List<QuerySnapshot> querySnapshots = entry.getValue();\n             if ( !querySnapshots.isEmpty() )\n@@ -117,8 +115,7 @@ public class TransactionDependenciesResolver\n         return transactionHandle -> transactionHandle.activeLocks().collect( toList() );\n     }\n \n-    private void evaluateDirectDependencies( Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies,\n-            Map<KernelTransactionHandle,List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle,\n+    private void evaluateDirectDependencies( Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies, Map<KernelTransactionHandle,List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle,\n             QuerySnapshot querySnapshot )\n     {\n         List<ActiveLock> waitingOnLocks = querySnapshot.waitingLocks();\n@@ -131,9 +128,8 @@ public class TransactionDependenciesResolver\n                 {\n                     if ( isBlocked( activeLock, handleListEntry.getValue() ) )\n                     {\n-                        Set<KernelTransactionHandle> kernelTransactionHandles =\n-                                directDependencies.computeIfAbsent( txHandle, handle -> new HashSet<>() );\n-                        kernelTransactionHandles.add( kernelTransactionHandle );\n+                        Set<KernelTransactionHandle> kernelTransactionHandles = directDependencies.computeIfAbsent( txHandle, handle -> new HashSet<>() );\n+kernelTransactionHandles.add( kernelTransactionHandle );\n                     }\n                 }\n             }\n@@ -142,9 +138,7 @@ public class TransactionDependenciesResolver\n \n     private boolean isBlocked( ActiveLock activeLock, List<ActiveLock> activeLocks )\n     {\n-        return ActiveLock.EXCLUSIVE_MODE.equals( activeLock.mode() ) ?\n-               haveAnyLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() ) :\n-               haveExclusiveLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() );\n+        return ActiveLock.EXCLUSIVE_MODE.equals( activeLock.mode() ) ? haveAnyLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() ) : haveExclusiveLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() );\n     }\n \n     private static boolean haveAnyLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n@@ -154,8 +148,7 @@ public class TransactionDependenciesResolver\n \n     private static boolean haveExclusiveLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n     {\n-        return locks.stream().anyMatch( lock -> ActiveLock.EXCLUSIVE_MODE.equals( lock.mode() ) &&\n-                lock.resourceId() == resourceId &&\n+        return locks.stream().anyMatch( lock -> ActiveLock.EXCLUSIVE_MODE.equals( lock.mode() ) &&lock.resourceId() == resourceId &&\n                 lock.resourceType() == resourceType );\n     }\n \n@@ -165,11 +158,13 @@ public class TransactionDependenciesResolver\n         {\n             return StringUtils.EMPTY;\n         }\n-        StringJoiner stringJoiner = new StringJoiner( \", \", \"[\", \"]\" );\n+\n+StringJoiner stringJoiner = new StringJoiner( \", \", \"[\", \"]\" );\n         for ( KernelTransactionHandle blocker : allBlockers )\n         {\n             stringJoiner.add( blocker.getUserTransactionName() );\n         }\n-        return stringJoiner.toString();\n+\n+return stringJoiner.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "68",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "122",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 243).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "column": "80",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "column": "96",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "152",
                    "column": "130",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1483/TransactionDependenciesResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1483/TransactionDependenciesResolver.java\nindex 1ecfb14d2f4..dc783600a59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1483/TransactionDependenciesResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1483/TransactionDependenciesResolver.java\n@@ -20,7 +20,6 @@\n package org.neo4j.kernel.enterprise.builtinprocs;\n \n import org.apache.commons.lang3.StringUtils;\n-\n import java.util.ArrayDeque;\n import java.util.Collections;\n import java.util.Comparator;\n@@ -33,14 +32,14 @@ import java.util.Set;\n import java.util.StringJoiner;\n import java.util.TreeSet;\n import java.util.function.Function;\n-\n import org.neo4j.kernel.api.KernelTransactionHandle;\n import org.neo4j.kernel.api.query.QuerySnapshot;\n import org.neo4j.kernel.impl.locking.ActiveLock;\n import org.neo4j.storageengine.api.lock.ResourceType;\n-\n import static java.util.function.Function.identity;\n+\n import static java.util.stream.Collectors.toList;\n+\n import static java.util.stream.Collectors.toMap;\n \n public class TransactionDependenciesResolver\n@@ -59,15 +58,14 @@ public class TransactionDependenciesResolver\n         return directDependencies.get( handle ) != null;\n     }\n \n-    public String describeBlockingTransactions( KernelTransactionHandle handle  )\n+    public String describeBlockingTransactions( KernelTransactionHandle handle )\n     {\n-        Set<KernelTransactionHandle> allBlockers = new TreeSet<>(\n-                Comparator.comparingLong( KernelTransactionHandle::getUserTransactionId ) );\n+        Set<KernelTransactionHandle> allBlockers = new TreeSet<>( Comparator.comparingLong( KernelTransactionHandle::getUserTransactionId ) );\n         Set<KernelTransactionHandle> handles = directDependencies.get( handle );\n         if ( handles != null )\n         {\n             Deque<KernelTransactionHandle> blockerQueue = new ArrayDeque<>( handles );\n-            while ( !blockerQueue.isEmpty() )\n+            while( ! blockerQueue.isEmpty())\n             {\n                 KernelTransactionHandle transactionHandle = blockerQueue.pop();\n                 if ( allBlockers.add( transactionHandle ) )\n@@ -80,35 +78,36 @@ public class TransactionDependenciesResolver\n                 }\n             }\n         }\n+\n         return describe( allBlockers );\n     }\n \n     public Map<String,Object> describeBlockingLocks( KernelTransactionHandle handle )\n     {\n         List<QuerySnapshot> querySnapshots = handleSnapshotsMap.get( handle );\n-        if ( !querySnapshots.isEmpty() )\n+        if ( ! querySnapshots.isEmpty() )\n         {\n             return querySnapshots.get( 0 ).resourceInformation();\n         }\n+\n         return Collections.emptyMap();\n     }\n \n     private Map<KernelTransactionHandle,Set<KernelTransactionHandle>> initDirectDependencies()\n     {\n-        Map<KernelTransactionHandle, Set<KernelTransactionHandle>> directDependencies = new HashMap<>();\n-\n-        Map<KernelTransactionHandle,List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream()\n-                .collect( toMap( identity(), getTransactionLocks() ) );\n-\n-        for ( Map.Entry<KernelTransactionHandle,List<QuerySnapshot>> entry : handleSnapshotsMap.entrySet() )\n+        Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies = new HashMap<>();\n+        Map<KernelTransactionHandle,List<ActiveLock>> transactionLocksMap = handleSnapshotsMap.keySet().stream().collect( toMap( identity(), getTransactionLocks() ) );\n+        for( Map.Entry<KernelTransactionHandle,List<QuerySnapshot>> entry : handleSnapshotsMap.entrySet()\n+        )\n         {\n             List<QuerySnapshot> querySnapshots = entry.getValue();\n-            if ( !querySnapshots.isEmpty() )\n+            if ( ! querySnapshots.isEmpty() )\n             {\n                 KernelTransactionHandle txHandle = entry.getKey();\n                 evaluateDirectDependencies( directDependencies, transactionLocksMap, txHandle, querySnapshots.get( 0 ) );\n             }\n         }\n+\n         return directDependencies;\n     }\n \n@@ -117,22 +116,20 @@ public class TransactionDependenciesResolver\n         return transactionHandle -> transactionHandle.activeLocks().collect( toList() );\n     }\n \n-    private void evaluateDirectDependencies( Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies,\n-            Map<KernelTransactionHandle,List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle,\n-            QuerySnapshot querySnapshot )\n+    private void evaluateDirectDependencies( Map<KernelTransactionHandle,Set<KernelTransactionHandle>> directDependencies, Map<KernelTransactionHandle,List<ActiveLock>> handleLocksMap, KernelTransactionHandle txHandle, QuerySnapshot querySnapshot )\n     {\n         List<ActiveLock> waitingOnLocks = querySnapshot.waitingLocks();\n-        for ( ActiveLock activeLock : waitingOnLocks )\n+        for( ActiveLock activeLock : waitingOnLocks)\n         {\n-            for ( Map.Entry<KernelTransactionHandle,List<ActiveLock>> handleListEntry : handleLocksMap.entrySet() )\n+            for( Map.Entry<KernelTransactionHandle,List<ActiveLock>> handleListEntry : handleLocksMap.entrySet()\n+            )\n             {\n                 KernelTransactionHandle kernelTransactionHandle = handleListEntry.getKey();\n-                if ( !kernelTransactionHandle.equals( txHandle ) )\n+                if ( ! kernelTransactionHandle.equals( txHandle ) )\n                 {\n                     if ( isBlocked( activeLock, handleListEntry.getValue() ) )\n                     {\n-                        Set<KernelTransactionHandle> kernelTransactionHandles =\n-                                directDependencies.computeIfAbsent( txHandle, handle -> new HashSet<>() );\n+                        Set<KernelTransactionHandle> kernelTransactionHandles = directDependencies.computeIfAbsent( txHandle, handle -> new HashSet<>() );\n                         kernelTransactionHandles.add( kernelTransactionHandle );\n                     }\n                 }\n@@ -142,21 +139,17 @@ public class TransactionDependenciesResolver\n \n     private boolean isBlocked( ActiveLock activeLock, List<ActiveLock> activeLocks )\n     {\n-        return ActiveLock.EXCLUSIVE_MODE.equals( activeLock.mode() ) ?\n-               haveAnyLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() ) :\n-               haveExclusiveLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() );\n+        return ActiveLock.EXCLUSIVE_MODE.equals( activeLock.mode() ) ? haveAnyLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() ) : haveExclusiveLocking( activeLocks, activeLock.resourceType(), activeLock.resourceId() );\n     }\n \n     private static boolean haveAnyLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n     {\n-        return locks.stream().anyMatch( lock -> lock.resourceId() == resourceId && lock.resourceType() == resourceType );\n+        return locks.stream().anyMatch( lock -> lock.resourceId() == resourceId&& lock.resourceType() == resourceType );\n     }\n \n     private static boolean haveExclusiveLocking( List<ActiveLock> locks, ResourceType resourceType, long resourceId )\n     {\n-        return locks.stream().anyMatch( lock -> ActiveLock.EXCLUSIVE_MODE.equals( lock.mode() ) &&\n-                lock.resourceId() == resourceId &&\n-                lock.resourceType() == resourceType );\n+        return locks.stream().anyMatch( lock -> ActiveLock.EXCLUSIVE_MODE.equals( lock.mode() )&& lock.resourceId() == resourceId&& lock.resourceType() == resourceType );\n     }\n \n     private String describe( Set<KernelTransactionHandle> allBlockers )\n@@ -165,11 +158,13 @@ public class TransactionDependenciesResolver\n         {\n             return StringUtils.EMPTY;\n         }\n+\n         StringJoiner stringJoiner = new StringJoiner( \", \", \"[\", \"]\" );\n-        for ( KernelTransactionHandle blocker : allBlockers )\n+        for( KernelTransactionHandle blocker : allBlockers)\n         {\n             stringJoiner.add( blocker.getUserTransactionName() );\n         }\n+\n         return stringJoiner.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}