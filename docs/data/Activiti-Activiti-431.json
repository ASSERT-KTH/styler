{
    "project_name": "Activiti-Activiti",
    "error_id": "431",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.converter.child;\n\nimport javax.xml.stream.XMLStreamReader;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/431/SignalEventDefinitionParser.java\nindex 67fc4b7cb43..929d49a477f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/431/SignalEventDefinitionParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/431/SignalEventDefinitionParser.java\nindex 67fc4b7cb43..be4f27d8aa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/431/SignalEventDefinitionParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n@@ -39,21 +40,21 @@ public class SignalEventDefinitionParser extends BaseChildElementParser {\n \n         SignalEventDefinition eventDefinition = new SignalEventDefinition();\n         BpmnXMLUtil.addXMLLocation(eventDefinition,\n-                                   xtr);\n+                xtr);\n         eventDefinition.setSignalRef(xtr.getAttributeValue(null,\n-                                                           ATTRIBUTE_SIGNAL_REF));\n+                ATTRIBUTE_SIGNAL_REF));\n         eventDefinition.setSignalExpression(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                                  ATTRIBUTE_SIGNAL_EXPRESSION));\n+                ATTRIBUTE_SIGNAL_EXPRESSION));\n         if (StringUtils.isNotEmpty(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                         ATTRIBUTE_ACTIVITY_ASYNCHRONOUS))) {\n+                ATTRIBUTE_ACTIVITY_ASYNCHRONOUS))) {\n             eventDefinition.setAsync(Boolean.parseBoolean(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                                                ATTRIBUTE_ACTIVITY_ASYNCHRONOUS)));\n+                    ATTRIBUTE_ACTIVITY_ASYNCHRONOUS)));\n         }\n \n         BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_SIGNALDEFINITION,\n-                                       eventDefinition,\n-                                       xtr,\n-                                       model);\n+                eventDefinition,\n+                xtr,\n+                model);\n \n         ((Event) parentElement).getEventDefinitions().add(eventDefinition);\n     }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/431/SignalEventDefinitionParser.java\nindex 67fc4b7cb43..1ebacd9f5b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/431/SignalEventDefinitionParser.java\n@@ -16,7 +16,6 @@\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n-\n import org.activiti.bpmn.converter.util.BpmnXMLUtil;\n import org.activiti.bpmn.model.BaseElement;\n import org.activiti.bpmn.model.BpmnModel;\n@@ -24,37 +23,32 @@ import org.activiti.bpmn.model.Event;\n import org.activiti.bpmn.model.SignalEventDefinition;\n import org.apache.commons.lang3.StringUtils;\n \n-public class SignalEventDefinitionParser extends BaseChildElementParser {\n-\n-    public String getElementName() {\n-        return ELEMENT_EVENT_SIGNALDEFINITION;\n-    }\n \n-    public void parseChildElement(XMLStreamReader xtr,\n-                                  BaseElement parentElement,\n-                                  BpmnModel model) throws Exception {\n-        if (!(parentElement instanceof Event)) {\n-            return;\n-        }\n+public class SignalEventDefinitionParser extends BaseChildElementParser {\n \n-        SignalEventDefinition eventDefinition = new SignalEventDefinition();\n-        BpmnXMLUtil.addXMLLocation(eventDefinition,\n-                                   xtr);\n-        eventDefinition.setSignalRef(xtr.getAttributeValue(null,\n-                                                           ATTRIBUTE_SIGNAL_REF));\n-        eventDefinition.setSignalExpression(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                                  ATTRIBUTE_SIGNAL_EXPRESSION));\n-        if (StringUtils.isNotEmpty(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                         ATTRIBUTE_ACTIVITY_ASYNCHRONOUS))) {\n-            eventDefinition.setAsync(Boolean.parseBoolean(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                                                ATTRIBUTE_ACTIVITY_ASYNCHRONOUS)));\n-        }\n+  public String getElementName() {\n+    return ELEMENT_EVENT_SIGNALDEFINITION;\n+  }\n \n-        BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_SIGNALDEFINITION,\n-                                       eventDefinition,\n-                                       xtr,\n-                                       model);\n+  public void parseChildElement(XMLStreamReader xtr, BaseElement parentElement, BpmnModel model) throws Exception {\n+    if (!(parentElement instanceof Event)) {\n+      return;\n+    }\n \n-        ((Event) parentElement).getEventDefinitions().add(eventDefinition);\n+    SignalEventDefinition eventDefinition = new SignalEventDefinition();\n+    BpmnXMLUtil.addXMLLocation(eventDefinition, xtr);\n+    eventDefinition.setSignalRef(xtr.getAttributeValue(null, ATTRIBUTE_SIGNAL_REF));\n+    eventDefinition.setSignalExpression(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n+                                                              ATTRIBUTE_SIGNAL_EXPRESSION));\n+    if (StringUtils.isNotEmpty(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n+                                                     ATTRIBUTE_ACTIVITY_ASYNCHRONOUS))) {\n+      eventDefinition.setAsync(Boolean.parseBoolean(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n+                                                                          ATTRIBUTE_ACTIVITY_ASYNCHRONOUS)));\n     }\n-}\n+    BpmnXMLUtil.parseChildElements(ELEMENT_EVENT_SIGNALDEFINITION,\n+                                   eventDefinition,\n+                                   xtr,\n+                                   model);\n+    ((Event) parentElement).getEventDefinitions().add(eventDefinition);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/431/SignalEventDefinitionParser.java\nindex 67fc4b7cb43..929d49a477f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/431/SignalEventDefinitionParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/431/SignalEventDefinitionParser.java\nindex 67fc4b7cb43..929d49a477f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/431/SignalEventDefinitionParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/431/SignalEventDefinitionParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.child;\n \n import javax.xml.stream.XMLStreamReader;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}