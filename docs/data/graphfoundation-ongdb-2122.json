{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2122",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2122/NetworkedServerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2122/NetworkedServerFactory.java\nindex c2131a29dda..503054caaf3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2122/NetworkedServerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2122/NetworkedServerFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster;\n \n import java.net.URI;\n@@ -45,153 +46,153 @@ import org.neo4j.logging.LogProvider;\n  */\n public class NetworkedServerFactory\n {\n-    private LifeSupport life;\n-    private ProtocolServerFactory protocolServerFactory;\n-    private TimeoutStrategy timeoutStrategy;\n-    private final NetworkReceiver.Monitor networkReceiverMonitor;\n-    private final NetworkSender.Monitor networkSenderMonitor;\n-    private LogProvider logProvider;\n-    private ObjectInputStreamFactory objectInputStreamFactory;\n-    private ObjectOutputStreamFactory objectOutputStreamFactory;\n-    private final NamedThreadFactory.Monitor namedThreadFactoryMonitor;\n-\n-    public NetworkedServerFactory( LifeSupport life, ProtocolServerFactory protocolServerFactory,\n-                                   TimeoutStrategy timeoutStrategy,\n-                                   LogProvider logProvider,\n-                                   ObjectInputStreamFactory objectInputStreamFactory,\n-                                   ObjectOutputStreamFactory objectOutputStreamFactory,\n-                                   NetworkReceiver.Monitor networkReceiverMonitor,\n-                                   NetworkSender.Monitor networkSenderMonitor,\n-                                   NamedThreadFactory.Monitor namedThreadFactoryMonitor )\n+  private LifeSupport life;\n+  private ProtocolServerFactory protocolServerFactory;\n+  private TimeoutStrategy timeoutStrategy;\n+  private final NetworkReceiver.Monitor networkReceiverMonitor;\n+  private final NetworkSender.Monitor networkSenderMonitor;\n+  private LogProvider logProvider;\n+  private ObjectInputStreamFactory objectInputStreamFactory;\n+  private ObjectOutputStreamFactory objectOutputStreamFactory;\n+  private final NamedThreadFactory.Monitor namedThreadFactoryMonitor;\n+\n+  public NetworkedServerFactory(LifeSupport life, ProtocolServerFactory protocolServerFactory,\n+                                TimeoutStrategy timeoutStrategy,\n+                                LogProvider logProvider,\n+                                ObjectInputStreamFactory objectInputStreamFactory,\n+                                ObjectOutputStreamFactory objectOutputStreamFactory,\n+                                NetworkReceiver.Monitor networkReceiverMonitor,\n+                                NetworkSender.Monitor networkSenderMonitor,\n+                                NamedThreadFactory.Monitor namedThreadFactoryMonitor)\n+  {\n+    this.life = life;\n+    this.protocolServerFactory = protocolServerFactory;\n+    this.timeoutStrategy = timeoutStrategy;\n+    this.networkReceiverMonitor = networkReceiverMonitor;\n+    this.networkSenderMonitor = networkSenderMonitor;\n+    this.logProvider = logProvider;\n+    this.objectInputStreamFactory = objectInputStreamFactory;\n+    this.objectOutputStreamFactory = objectOutputStreamFactory;\n+    this.namedThreadFactoryMonitor = namedThreadFactoryMonitor;\n+  }\n+\n+  public ProtocolServer newNetworkedServer(final Config config, AcceptorInstanceStore acceptorInstanceStore,\n+                                           ElectionCredentialsProvider electionCredentialsProvider)\n+  {\n+    final NetworkReceiver receiver = new NetworkReceiver(networkReceiverMonitor,\n+        new NetworkReceiver.Configuration()\n+        {\n+          @Override\n+          public HostnamePort clusterServer()\n+          {\n+            return config.get(ClusterSettings.cluster_server);\n+          }\n+\n+          @Override\n+          public int defaultPort()\n+          {\n+            return 5001;\n+          }\n+\n+          @Override\n+          public String name()\n+          {\n+            return null;\n+          }\n+        }, logProvider);\n+\n+    final NetworkSender sender = new NetworkSender(networkSenderMonitor, new NetworkSender.Configuration()\n     {\n-        this.life = life;\n-        this.protocolServerFactory = protocolServerFactory;\n-        this.timeoutStrategy = timeoutStrategy;\n-        this.networkReceiverMonitor = networkReceiverMonitor;\n-        this.networkSenderMonitor = networkSenderMonitor;\n-        this.logProvider = logProvider;\n-        this.objectInputStreamFactory = objectInputStreamFactory;\n-        this.objectOutputStreamFactory = objectOutputStreamFactory;\n-        this.namedThreadFactoryMonitor = namedThreadFactoryMonitor;\n-    }\n-\n-    public ProtocolServer newNetworkedServer( final Config config, AcceptorInstanceStore acceptorInstanceStore,\n-                                              ElectionCredentialsProvider electionCredentialsProvider )\n+      @Override\n+      public int defaultPort()\n+      {\n+        return 5001;\n+      }\n+\n+      @Override\n+      public int port()\n+      {\n+        return config.get(ClusterSettings.cluster_server).getPort();\n+      }\n+    }, receiver, logProvider);\n+\n+    ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter(() ->\n+        Executors.newSingleThreadExecutor(\n+            new NamedThreadFactory(\"State machine\", namedThreadFactoryMonitor)));\n+\n+    final ProtocolServer protocolServer = protocolServerFactory.newProtocolServer(\n+        config.get(ClusterSettings.server_id), timeoutStrategy, receiver, sender,\n+        acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor, objectInputStreamFactory,\n+        objectOutputStreamFactory, config);\n+    receiver.addNetworkChannelsListener(new NetworkReceiver.NetworkChannelsListener()\n     {\n-        final NetworkReceiver receiver = new NetworkReceiver( networkReceiverMonitor,\n-                new NetworkReceiver.Configuration()\n-        {\n-            @Override\n-            public HostnamePort clusterServer()\n-            {\n-                return config.get( ClusterSettings.cluster_server );\n-            }\n-\n-            @Override\n-            public int defaultPort()\n-            {\n-                return 5001;\n-            }\n-\n-            @Override\n-            public String name()\n-            {\n-                return null;\n-            }\n-        }, logProvider );\n-\n-        final NetworkSender sender = new NetworkSender( networkSenderMonitor, new NetworkSender.Configuration()\n-        {\n-            @Override\n-            public int defaultPort()\n-            {\n-                return 5001;\n-            }\n-\n-            @Override\n-            public int port()\n-            {\n-                return config.get( ClusterSettings.cluster_server ).getPort();\n-            }\n-        }, receiver, logProvider );\n-\n-        ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter( () ->\n-                Executors.newSingleThreadExecutor(\n-                        new NamedThreadFactory( \"State machine\", namedThreadFactoryMonitor ) ) );\n-\n-        final ProtocolServer protocolServer = protocolServerFactory.newProtocolServer(\n-                config.get( ClusterSettings.server_id ), timeoutStrategy, receiver, sender,\n-                acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor, objectInputStreamFactory,\n-                objectOutputStreamFactory, config );\n-        receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n+      private StateTransitionLogger logger;\n+\n+      @Override\n+      public void listeningAt(URI me)\n+      {\n+        protocolServer.listeningAt(me);\n+        if (logger == null)\n         {\n-            private StateTransitionLogger logger;\n-\n-            @Override\n-            public void listeningAt( URI me )\n-            {\n-                protocolServer.listeningAt( me );\n-                if ( logger == null )\n-                {\n-                    logger = new StateTransitionLogger( logProvider,\n-                            new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n-                    protocolServer.addStateTransitionListener( logger );\n-                }\n-            }\n-\n-            @Override\n-            public void channelOpened( URI to )\n-            {\n-            }\n-\n-            @Override\n-            public void channelClosed( URI to )\n-            {\n-            }\n-        } );\n-\n-        life.add( stateMachineExecutor );\n-\n-        // Timeout timer - triggers every 10 ms\n-        life.add( new Lifecycle()\n+          logger = new StateTransitionLogger(logProvider,\n+              new AtomicBroadcastSerializer(objectInputStreamFactory, objectOutputStreamFactory));\n+          protocolServer.addStateTransitionListener(logger);\n+        }\n+      }\n+\n+      @Override\n+      public void channelOpened(URI to)\n+      {\n+      }\n+\n+      @Override\n+      public void channelClosed(URI to)\n+      {\n+      }\n+    });\n+\n+    life.add(stateMachineExecutor);\n+\n+    // Timeout timer - triggers every 10 ms\n+    life.add(new Lifecycle()\n+    {\n+      private ScheduledExecutorService scheduler;\n+\n+      @Override\n+      public void init()\n+      {\n+        protocolServer.getTimeouts().tick(System.currentTimeMillis());\n+      }\n+\n+      @Override\n+      public void start()\n+      {\n+        scheduler = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"timeout\"));\n+\n+        scheduler.scheduleWithFixedDelay(() ->\n         {\n-            private ScheduledExecutorService scheduler;\n-\n-            @Override\n-            public void init()\n-            {\n-                protocolServer.getTimeouts().tick( System.currentTimeMillis() );\n-            }\n-\n-            @Override\n-            public void start()\n-            {\n-                scheduler = Executors.newSingleThreadScheduledExecutor( new NamedThreadFactory( \"timeout\" ) );\n-\n-                scheduler.scheduleWithFixedDelay( () ->\n-                {\n-                    long now = System.currentTimeMillis();\n-\n-                    protocolServer.getTimeouts().tick( now );\n-                }, 0, 10, TimeUnit.MILLISECONDS );\n-            }\n-\n-            @Override\n-            public void stop()\n-            {\n-                scheduler.shutdownNow();\n-            }\n-\n-            @Override\n-            public void shutdown()\n-            {\n-            }\n-        } );\n-\n-        // Add this last to ensure that timeout service is setup first\n-        life.add( sender );\n-        life.add( receiver );\n-\n-        return protocolServer;\n-    }\n+          long now = System.currentTimeMillis();\n+\n+          protocolServer.getTimeouts().tick(now);\n+        }, 0, 10, TimeUnit.MILLISECONDS);\n+      }\n+\n+      @Override\n+      public void stop()\n+      {\n+        scheduler.shutdownNow();\n+      }\n+\n+      @Override\n+      public void shutdown()\n+      {\n+      }\n+    });\n+\n+    // Add this last to ensure that timeout service is setup first\n+    life.add(sender);\n+    life.add(receiver);\n+\n+    return protocolServer;\n+  }\n }\n",
            "diff_size": 200
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 484).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "column": "484",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2122/NetworkedServerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2122/NetworkedServerFactory.java\nindex c2131a29dda..ee9439c162f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2122/NetworkedServerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2122/NetworkedServerFactory.java\n@@ -55,15 +55,14 @@ public class NetworkedServerFactory\n     private ObjectOutputStreamFactory objectOutputStreamFactory;\n     private final NamedThreadFactory.Monitor namedThreadFactoryMonitor;\n \n-    public NetworkedServerFactory( LifeSupport life, ProtocolServerFactory protocolServerFactory,\n-                                   TimeoutStrategy timeoutStrategy,\n+    public NetworkedServerFactory( LifeSupport life, ProtocolServerFactory protocolServerFactory, TimeoutStrategy timeoutStrategy,\n                                    LogProvider logProvider,\n                                    ObjectInputStreamFactory objectInputStreamFactory,\n                                    ObjectOutputStreamFactory objectOutputStreamFactory,\n                                    NetworkReceiver.Monitor networkReceiverMonitor,\n                                    NetworkSender.Monitor networkSenderMonitor,\n                                    NamedThreadFactory.Monitor namedThreadFactoryMonitor )\n-    {\n+{\n         this.life = life;\n         this.protocolServerFactory = protocolServerFactory;\n         this.timeoutStrategy = timeoutStrategy;\n@@ -75,12 +74,10 @@ public class NetworkedServerFactory\n         this.namedThreadFactoryMonitor = namedThreadFactoryMonitor;\n     }\n \n-    public ProtocolServer newNetworkedServer( final Config config, AcceptorInstanceStore acceptorInstanceStore,\n-                                              ElectionCredentialsProvider electionCredentialsProvider )\n-    {\n-        final NetworkReceiver receiver = new NetworkReceiver( networkReceiverMonitor,\n-                new NetworkReceiver.Configuration()\n-        {\n+    public ProtocolServer newNetworkedServer( final Config config, AcceptorInstanceStore acceptorInstanceStore, ElectionCredentialsProvider electionCredentialsProvider )\n+{\n+        final NetworkReceiver receiver = new NetworkReceiver( networkReceiverMonitor, new NetworkReceiver.Configuration()\n+{\n             @Override\n             public HostnamePort clusterServer()\n             {\n@@ -114,16 +111,8 @@ public class NetworkedServerFactory\n                 return config.get( ClusterSettings.cluster_server ).getPort();\n             }\n         }, receiver, logProvider );\n-\n-        ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter( () ->\n-                Executors.newSingleThreadExecutor(\n-                        new NamedThreadFactory( \"State machine\", namedThreadFactoryMonitor ) ) );\n-\n-        final ProtocolServer protocolServer = protocolServerFactory.newProtocolServer(\n-                config.get( ClusterSettings.server_id ), timeoutStrategy, receiver, sender,\n-                acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor, objectInputStreamFactory,\n-                objectOutputStreamFactory, config );\n-        receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n+ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter( () -> Executors.newSingleThreadExecutor( new NamedThreadFactory( \"State machine\", namedThreadFactoryMonitor ) ) ); final ProtocolServer protocolServer = protocolServerFactory.newProtocolServer( config.get( ClusterSettings.server_id ), timeoutStrategy, receiver, sender, acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor, objectInputStreamFactory, objectOutputStreamFactory, config );\n+receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n         {\n             private StateTransitionLogger logger;\n \n@@ -133,9 +122,8 @@ public class NetworkedServerFactory\n                 protocolServer.listeningAt( me );\n                 if ( logger == null )\n                 {\n-                    logger = new StateTransitionLogger( logProvider,\n-                            new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n-                    protocolServer.addStateTransitionListener( logger );\n+                    logger = new StateTransitionLogger( logProvider, new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n+protocolServer.addStateTransitionListener( logger );\n                 }\n             }\n \n@@ -149,8 +137,7 @@ public class NetworkedServerFactory\n             {\n             }\n         } );\n-\n-        life.add( stateMachineExecutor );\n+life.add( stateMachineExecutor );\n \n         // Timeout timer - triggers every 10 ms\n         life.add( new Lifecycle()\n@@ -167,12 +154,10 @@ public class NetworkedServerFactory\n             public void start()\n             {\n                 scheduler = Executors.newSingleThreadScheduledExecutor( new NamedThreadFactory( \"timeout\" ) );\n-\n-                scheduler.scheduleWithFixedDelay( () ->\n+scheduler.scheduleWithFixedDelay( () ->\n                 {\n                     long now = System.currentTimeMillis();\n-\n-                    protocolServer.getTimeouts().tick( now );\n+protocolServer.getTimeouts().tick( now );\n                 }, 0, 10, TimeUnit.MILLISECONDS );\n             }\n \n@@ -191,7 +176,6 @@ public class NetworkedServerFactory\n         // Add this last to ensure that timeout service is setup first\n         life.add( sender );\n         life.add( receiver );\n-\n-        return protocolServer;\n+return protocolServer;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 406).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 299).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2122/NetworkedServerFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2122/NetworkedServerFactory.java\nindex c2131a29dda..905f2b74dc4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2122/NetworkedServerFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2122/NetworkedServerFactory.java\n@@ -23,7 +23,6 @@ import java.net.URI;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n-\n import org.neo4j.cluster.com.NetworkReceiver;\n import org.neo4j.cluster.com.NetworkSender;\n import org.neo4j.cluster.protocol.atomicbroadcast.AtomicBroadcastSerializer;\n@@ -43,6 +42,7 @@ import org.neo4j.logging.LogProvider;\n /**\n  * TODO\n  */\n+\n public class NetworkedServerFactory\n {\n     private LifeSupport life;\n@@ -55,14 +55,7 @@ public class NetworkedServerFactory\n     private ObjectOutputStreamFactory objectOutputStreamFactory;\n     private final NamedThreadFactory.Monitor namedThreadFactoryMonitor;\n \n-    public NetworkedServerFactory( LifeSupport life, ProtocolServerFactory protocolServerFactory,\n-                                   TimeoutStrategy timeoutStrategy,\n-                                   LogProvider logProvider,\n-                                   ObjectInputStreamFactory objectInputStreamFactory,\n-                                   ObjectOutputStreamFactory objectOutputStreamFactory,\n-                                   NetworkReceiver.Monitor networkReceiverMonitor,\n-                                   NetworkSender.Monitor networkSenderMonitor,\n-                                   NamedThreadFactory.Monitor namedThreadFactoryMonitor )\n+    public NetworkedServerFactory( LifeSupport life, ProtocolServerFactory protocolServerFactory, TimeoutStrategy timeoutStrategy, LogProvider logProvider, ObjectInputStreamFactory objectInputStreamFactory, ObjectOutputStreamFactory objectOutputStreamFactory, NetworkReceiver.Monitor networkReceiverMonitor, NetworkSender.Monitor networkSenderMonitor, NamedThreadFactory.Monitor namedThreadFactoryMonitor )\n     {\n         this.life = life;\n         this.protocolServerFactory = protocolServerFactory;\n@@ -75,123 +68,106 @@ public class NetworkedServerFactory\n         this.namedThreadFactoryMonitor = namedThreadFactoryMonitor;\n     }\n \n-    public ProtocolServer newNetworkedServer( final Config config, AcceptorInstanceStore acceptorInstanceStore,\n-                                              ElectionCredentialsProvider electionCredentialsProvider )\n+    public ProtocolServer newNetworkedServer( final Config config, AcceptorInstanceStore acceptorInstanceStore, ElectionCredentialsProvider electionCredentialsProvider )\n     {\n-        final NetworkReceiver receiver = new NetworkReceiver( networkReceiverMonitor,\n-                new NetworkReceiver.Configuration()\n-        {\n-            @Override\n-            public HostnamePort clusterServer()\n-            {\n-                return config.get( ClusterSettings.cluster_server );\n-            }\n-\n-            @Override\n-            public int defaultPort()\n-            {\n-                return 5001;\n-            }\n-\n-            @Override\n-            public String name()\n-            {\n-                return null;\n-            }\n-        }, logProvider );\n-\n-        final NetworkSender sender = new NetworkSender( networkSenderMonitor, new NetworkSender.Configuration()\n-        {\n-            @Override\n-            public int defaultPort()\n-            {\n-                return 5001;\n-            }\n+        final NetworkReceiver receiver = new NetworkReceiver( networkReceiverMonitor, new NetworkReceiver. Configuration()\n+{\n+    @Override\n+    public HostnamePort clusterServer()\n+    {\n+        return config.get( ClusterSettings.cluster_server );\n+    }\n \n-            @Override\n-            public int port()\n-            {\n-                return config.get( ClusterSettings.cluster_server ).getPort();\n-            }\n-        }, receiver, logProvider );\n+    @Override\n+    public int defaultPort()\n+    {\n+        return 5001;\n+    }\n \n-        ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter( () ->\n-                Executors.newSingleThreadExecutor(\n-                        new NamedThreadFactory( \"State machine\", namedThreadFactoryMonitor ) ) );\n+    @Override\n+    public String name()\n+    {\n+        return null;\n+    }\n+}, logProvider );\n+        final NetworkSender sender = new NetworkSender( networkSenderMonitor, new NetworkSender. Configuration()\n+{\n+    @Override\n+    public int defaultPort()\n+    {\n+        return 5001;\n+    }\n \n-        final ProtocolServer protocolServer = protocolServerFactory.newProtocolServer(\n-                config.get( ClusterSettings.server_id ), timeoutStrategy, receiver, sender,\n-                acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor, objectInputStreamFactory,\n-                objectOutputStreamFactory, config );\n-        receiver.addNetworkChannelsListener( new NetworkReceiver.NetworkChannelsListener()\n+    @Override\n+    public int port()\n+    {\n+        return config.get( ClusterSettings.cluster_server ).getPort();\n+    }\n+}, receiver, logProvider );\n+        ExecutorLifecycleAdapter stateMachineExecutor = new ExecutorLifecycleAdapter( () -> Executors.newSingleThreadExecutor( new NamedThreadFactory( \"State machine\", namedThreadFactoryMonitor ) ) );\n+        final ProtocolServer protocolServer = protocolServerFactory.newProtocolServer( config.get( ClusterSettings.server_id ), timeoutStrategy, receiver, sender, acceptorInstanceStore, electionCredentialsProvider, stateMachineExecutor, objectInputStreamFactory, objectOutputStreamFactory, config );\n+        receiver.addNetworkChannelsListener( new NetworkReceiver. NetworkChannelsListener()\n+{\n+    private StateTransitionLogger logger;\n+    @Override\n+    public void listeningAt( URI me )\n+    {\n+        protocolServer.listeningAt( me );\n+        if ( logger == null )\n         {\n-            private StateTransitionLogger logger;\n-\n-            @Override\n-            public void listeningAt( URI me )\n-            {\n-                protocolServer.listeningAt( me );\n-                if ( logger == null )\n-                {\n-                    logger = new StateTransitionLogger( logProvider,\n-                            new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n-                    protocolServer.addStateTransitionListener( logger );\n-                }\n-            }\n-\n-            @Override\n-            public void channelOpened( URI to )\n-            {\n-            }\n+            logger = new StateTransitionLogger( logProvider, new AtomicBroadcastSerializer( objectInputStreamFactory, objectOutputStreamFactory ) );\n+            protocolServer.addStateTransitionListener( logger );\n+        }\n+    }\n \n-            @Override\n-            public void channelClosed( URI to )\n-            {\n-            }\n-        } );\n+    @Override\n+    public void channelOpened( URI to )\n+    {\n+    }\n \n+    @Override\n+    public void channelClosed( URI to )\n+    {\n+    }\n+} );\n         life.add( stateMachineExecutor );\n \n         // Timeout timer - triggers every 10 ms\n         life.add( new Lifecycle()\n-        {\n-            private ScheduledExecutorService scheduler;\n-\n-            @Override\n-            public void init()\n-            {\n-                protocolServer.getTimeouts().tick( System.currentTimeMillis() );\n-            }\n-\n-            @Override\n-            public void start()\n-            {\n-                scheduler = Executors.newSingleThreadScheduledExecutor( new NamedThreadFactory( \"timeout\" ) );\n-\n-                scheduler.scheduleWithFixedDelay( () ->\n-                {\n-                    long now = System.currentTimeMillis();\n+{\n+    private ScheduledExecutorService scheduler;\n+    @Override\n+    public void init()\n+    {\n+        protocolServer.getTimeouts().tick( System.currentTimeMillis() );\n+    }\n \n-                    protocolServer.getTimeouts().tick( now );\n-                }, 0, 10, TimeUnit.MILLISECONDS );\n-            }\n+    @Override\n+    public void start()\n+    {\n+        scheduler = Executors.newSingleThreadScheduledExecutor( new NamedThreadFactory( \"timeout\" ) );\n+        scheduler.scheduleWithFixedDelay( () ->\n+                                          {\n+                                              long now = System.currentTimeMillis();\n+                                              protocolServer.getTimeouts().tick( now );\n+                                          }, 0, 10, TimeUnit.MILLISECONDS );\n+    }\n \n-            @Override\n-            public void stop()\n-            {\n-                scheduler.shutdownNow();\n-            }\n+    @Override\n+    public void stop()\n+    {\n+        scheduler.shutdownNow();\n+    }\n \n-            @Override\n-            public void shutdown()\n-            {\n-            }\n-        } );\n+    @Override\n+    public void shutdown()\n+    {\n+    }\n+} );\n \n         // Add this last to ensure that timeout service is setup first\n         life.add( sender );\n         life.add( receiver );\n-\n         return protocolServer;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 143
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}