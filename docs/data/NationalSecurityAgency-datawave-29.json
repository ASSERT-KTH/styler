{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "5",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import com.github.benmanes.caffeine.cache.Cache;\nimport com.github.benmanes.caffeine.cache.Caffeine;\nimport org.apache.accumulo.core.conf.AccumuloConfiguration;\nimport org.apache.accumulo.core.data.Range;\nimport org.apache.log4j.Logger;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "5",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "5",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/29/ActiveQueryLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/29/ActiveQueryLog.java\nindex 3050b0939a3..36ba85177ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/29/ActiveQueryLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/29/ActiveQueryLog.java\n@@ -15,213 +15,214 @@ import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n public class ActiveQueryLog {\n-    \n-    private static final String DEFAULT_EMPTY_QUERY_ID = new UUID(0, 0).toString();\n-    private static Logger log = Logger.getLogger(ActiveQueryLog.class);\n-    private static ActiveQueryLog instance = null;\n-    private static AccumuloConfiguration conf = null;\n-    \n-    // Accumulo properties\n-    public static final String MAX_IDLE = \"datawave.query.active.maxIdleMs\";\n-    public static final String LOG_PERIOD = \"datawave.query.active.logPeriodMs\";\n-    public static final String LOG_MAX_QUERIES = \"datawave.query.active.logMaxQueries\";\n-    public static final String WINDOW_SIZE = \"datawave.query.active.windowSize\";\n-    \n-    // Changeable via Accumulo properties\n-    private long maxIdle = 900000;\n-    private long logPeriod = 60000;\n-    private int logMaxQueries = 5;\n-    private int windowSize = 10;\n-    \n-    private Cache<String,ActiveQuery> CACHE = null;\n-    private ReentrantReadWriteLock cacheLock = new ReentrantReadWriteLock();\n-    private Timer timer = new Timer(\"ActiveQueryLog\");\n-    \n-    synchronized public static void setConfig(AccumuloConfiguration conf) {\n-        if (conf != null) {\n-            if (ActiveQueryLog.conf == null || conf.getUpdateCount() > ActiveQueryLog.conf.getUpdateCount()) {\n-                ActiveQueryLog.getInstance().checkSettings(conf, false);\n-                ActiveQueryLog.conf = conf;\n-            }\n-        }\n+\n+  private static final String DEFAULT_EMPTY_QUERY_ID = new UUID(0, 0).toString();\n+  private static Logger log = Logger.getLogger(ActiveQueryLog.class);\n+  private static ActiveQueryLog instance = null;\n+  private static AccumuloConfiguration conf = null;\n+\n+  // Accumulo properties\n+  public static final String MAX_IDLE = \"datawave.query.active.maxIdleMs\";\n+  public static final String LOG_PERIOD = \"datawave.query.active.logPeriodMs\";\n+  public static final String LOG_MAX_QUERIES = \"datawave.query.active.logMaxQueries\";\n+  public static final String WINDOW_SIZE = \"datawave.query.active.windowSize\";\n+\n+  // Changeable via Accumulo properties\n+  private long maxIdle = 900000;\n+  private long logPeriod = 60000;\n+  private int logMaxQueries = 5;\n+  private int windowSize = 10;\n+\n+  private Cache<String, ActiveQuery> CACHE = null;\n+  private ReentrantReadWriteLock cacheLock = new ReentrantReadWriteLock();\n+  private Timer timer = new Timer(\"ActiveQueryLog\");\n+\n+  synchronized public static void setConfig(AccumuloConfiguration conf) {\n+    if (conf != null) {\n+      if (ActiveQueryLog.conf == null || conf.getUpdateCount() > ActiveQueryLog.conf.getUpdateCount()) {\n+        ActiveQueryLog.getInstance().checkSettings(conf, false);\n+        ActiveQueryLog.conf = conf;\n+      }\n     }\n-    \n-    public static ActiveQueryLog getInstance() {\n-        \n+  }\n+\n+  public static ActiveQueryLog getInstance() {\n+\n+    if (ActiveQueryLog.instance == null) {\n+      synchronized (ActiveQueryLog.class) {\n         if (ActiveQueryLog.instance == null) {\n-            synchronized (ActiveQueryLog.class) {\n-                if (ActiveQueryLog.instance == null) {\n-                    ActiveQueryLog.instance = new ActiveQueryLog(conf);\n-                }\n-            }\n+          ActiveQueryLog.instance = new ActiveQueryLog(conf);\n         }\n-        return ActiveQueryLog.instance;\n+      }\n     }\n-    \n-    private ActiveQueryLog(AccumuloConfiguration conf) {\n-        if (conf != null) {\n-            checkSettings(conf, true);\n-        } else {\n-            // use the default values\n-            setLogPeriod(this.logPeriod);\n-            setMaxIdle(this.maxIdle);\n-        }\n+    return ActiveQueryLog.instance;\n+  }\n+\n+  private ActiveQueryLog(AccumuloConfiguration conf) {\n+    if (conf != null) {\n+      checkSettings(conf, true);\n+    } else {\n+      // use the default values\n+      setLogPeriod(this.logPeriod);\n+      setMaxIdle(this.maxIdle);\n     }\n-    \n-    synchronized public void setLogPeriod(long logPeriod) {\n-        if (logPeriod > 0) {\n-            if (logPeriod != this.logPeriod || this.timer == null) {\n-                if (this.timer != null) {\n-                    this.timer.cancel();\n-                    this.timer = new Timer(\"ActiveQueryLog\");\n-                }\n-                this.logPeriod = logPeriod;\n-                this.timer.schedule(new ActiveQueryTimerTask(), this.logPeriod, this.logPeriod);\n-            }\n-        } else {\n-            log.error(\"Bad value: (\" + logPeriod + \") for logPeriod\");\n+  }\n+\n+  synchronized public void setLogPeriod(long logPeriod) {\n+    if (logPeriod > 0) {\n+      if (logPeriod != this.logPeriod || this.timer == null) {\n+        if (this.timer != null) {\n+          this.timer.cancel();\n+          this.timer = new Timer(\"ActiveQueryLog\");\n         }\n-        \n+        this.logPeriod = logPeriod;\n+        this.timer.schedule(new ActiveQueryTimerTask(), this.logPeriod, this.logPeriod);\n+      }\n+    } else {\n+      log.error(\"Bad value: (\" + logPeriod + \") for logPeriod\");\n     }\n-    \n-    synchronized public void setLogMaxQueries(int logMaxQueries) {\n-        this.logMaxQueries = logMaxQueries;\n+\n+  }\n+\n+  synchronized public void setLogMaxQueries(int logMaxQueries) {\n+    this.logMaxQueries = logMaxQueries;\n+  }\n+\n+  synchronized public void setWindowSize(int windowSize) {\n+    if (windowSize > 0) {\n+      this.windowSize = windowSize;\n+    } else {\n+      log.error(\"Bad value: (\" + windowSize + \") for windowSize\");\n     }\n-    \n-    synchronized public void setWindowSize(int windowSize) {\n-        if (windowSize > 0) {\n-            this.windowSize = windowSize;\n-        } else {\n-            log.error(\"Bad value: (\" + windowSize + \") for windowSize\");\n+  }\n+\n+  public void setMaxIdle(long maxIdle) {\n+    if (this.maxIdle != maxIdle || this.CACHE == null) {\n+      if (maxIdle > 0) {\n+        cacheLock.writeLock().lock();\n+        try {\n+          Cache<String, ActiveQuery> newCache = setupCache(maxIdle);\n+          if (this.CACHE == null) {\n+            this.CACHE = newCache;\n+          } else {\n+            Cache<String, ActiveQuery> oldCache = this.CACHE;\n+            this.CACHE = newCache;\n+            this.CACHE.putAll(oldCache.asMap());\n+          }\n+        } finally {\n+          cacheLock.writeLock().unlock();\n         }\n+      } else {\n+        log.error(\"Bad value: (\" + maxIdle + \") for maxIdle\");\n+      }\n     }\n-    \n-    public void setMaxIdle(long maxIdle) {\n-        if (this.maxIdle != maxIdle || this.CACHE == null) {\n-            if (maxIdle > 0) {\n-                cacheLock.writeLock().lock();\n-                try {\n-                    Cache<String,ActiveQuery> newCache = setupCache(maxIdle);\n-                    if (this.CACHE == null) {\n-                        this.CACHE = newCache;\n-                    } else {\n-                        Cache<String,ActiveQuery> oldCache = this.CACHE;\n-                        this.CACHE = newCache;\n-                        this.CACHE.putAll(oldCache.asMap());\n-                    }\n-                } finally {\n-                    cacheLock.writeLock().unlock();\n-                }\n-            } else {\n-                log.error(\"Bad value: (\" + maxIdle + \") for maxIdle\");\n-            }\n-        }\n+  }\n+\n+  private void checkSettings(AccumuloConfiguration conf, boolean useDefaults) {\n+\n+    String maxIdleStr = conf.get(MAX_IDLE);\n+    if (maxIdleStr != null) {\n+      try {\n+        setMaxIdle(Long.valueOf(maxIdleStr));\n+      } catch (NumberFormatException e) {\n+        log.error(\"Bad value: (\" + maxIdleStr + \") in \" + MAX_IDLE + \" : \" + e.getMessage());\n+      }\n+    } else if (useDefaults) {\n+      setMaxIdle(this.maxIdle);\n     }\n-    \n-    private void checkSettings(AccumuloConfiguration conf, boolean useDefaults) {\n-        \n-        String maxIdleStr = conf.get(MAX_IDLE);\n-        if (maxIdleStr != null) {\n-            try {\n-                setMaxIdle(Long.valueOf(maxIdleStr));\n-            } catch (NumberFormatException e) {\n-                log.error(\"Bad value: (\" + maxIdleStr + \") in \" + MAX_IDLE + \" : \" + e.getMessage());\n-            }\n-        } else if (useDefaults) {\n-            setMaxIdle(this.maxIdle);\n-        }\n-        \n-        String logPeriodStr = conf.get(LOG_PERIOD);\n-        if (logPeriodStr != null) {\n-            try {\n-                setLogPeriod(Long.valueOf(logPeriodStr));\n-            } catch (NumberFormatException e) {\n-                log.error(\"Bad value: (\" + logPeriodStr + \") in \" + LOG_PERIOD + \" : \" + e.getMessage());\n-            }\n-        } else if (useDefaults) {\n-            setLogPeriod(this.logPeriod);\n-        }\n-        \n-        String logMaxQueriesStr = conf.get(LOG_MAX_QUERIES);\n-        if (logMaxQueriesStr != null) {\n-            try {\n-                setLogMaxQueries(Integer.valueOf(logMaxQueriesStr));\n-            } catch (NumberFormatException e) {\n-                log.error(\"Bad value: (\" + logMaxQueriesStr + \") in \" + LOG_MAX_QUERIES + \" : \" + e.getMessage());\n-            }\n-        }\n-        \n-        String windowSizeStr = conf.get(WINDOW_SIZE);\n-        if (windowSizeStr != null) {\n-            try {\n-                setWindowSize(Integer.valueOf(windowSizeStr));\n-            } catch (NumberFormatException e) {\n-                log.error(\"Bad value: (\" + windowSizeStr + \") in \" + WINDOW_SIZE + \" : \" + e.getMessage());\n-            }\n-        }\n+\n+    String logPeriodStr = conf.get(LOG_PERIOD);\n+    if (logPeriodStr != null) {\n+      try {\n+        setLogPeriod(Long.valueOf(logPeriodStr));\n+      } catch (NumberFormatException e) {\n+        log.error(\"Bad value: (\" + logPeriodStr + \") in \" + LOG_PERIOD + \" : \" + e.getMessage());\n+      }\n+    } else if (useDefaults) {\n+      setLogPeriod(this.logPeriod);\n     }\n-    \n-    private Cache<String,ActiveQuery> setupCache(long maxIdle) {\n-        Caffeine<Object,Object> caffeine = Caffeine.newBuilder();\n-        caffeine.expireAfterAccess(maxIdle, TimeUnit.MILLISECONDS);\n-        return caffeine.build();\n+\n+    String logMaxQueriesStr = conf.get(LOG_MAX_QUERIES);\n+    if (logMaxQueriesStr != null) {\n+      try {\n+        setLogMaxQueries(Integer.valueOf(logMaxQueriesStr));\n+      } catch (NumberFormatException e) {\n+        log.error(\"Bad value: (\" + logMaxQueriesStr + \") in \" + LOG_MAX_QUERIES + \" : \" + e.getMessage());\n+      }\n     }\n-    \n-    public void remove(String queryId, Range range) {\n-        ActiveQuery activeQuery = get(queryId);\n-        int numActiveRanges = activeQuery.removeRange(range);\n-        if (numActiveRanges == 0) {\n-            cacheLock.readLock().lock();\n-            try {\n-                this.CACHE.invalidate(queryIdFor(queryId));\n-            } finally {\n-                cacheLock.readLock().unlock();\n-            }\n-        }\n+\n+    String windowSizeStr = conf.get(WINDOW_SIZE);\n+    if (windowSizeStr != null) {\n+      try {\n+        setWindowSize(Integer.valueOf(windowSizeStr));\n+      } catch (NumberFormatException e) {\n+        log.error(\"Bad value: (\" + windowSizeStr + \") in \" + WINDOW_SIZE + \" : \" + e.getMessage());\n+      }\n     }\n-    \n-    private String queryIdFor(String queryId) {\n-        return (queryId == null ? DEFAULT_EMPTY_QUERY_ID : queryId);\n+  }\n+\n+  private Cache<String, ActiveQuery> setupCache(long maxIdle) {\n+    Caffeine<Object, Object> caffeine = Caffeine.newBuilder();\n+    caffeine.expireAfterAccess(maxIdle, TimeUnit.MILLISECONDS);\n+    return caffeine.build();\n+  }\n+\n+  public void remove(String queryId, Range range) {\n+    ActiveQuery activeQuery = get(queryId);\n+    int numActiveRanges = activeQuery.removeRange(range);\n+    if (numActiveRanges == 0) {\n+      cacheLock.readLock().lock();\n+      try {\n+        this.CACHE.invalidate(queryIdFor(queryId));\n+      } finally {\n+        cacheLock.readLock().unlock();\n+      }\n     }\n-    \n-    public ActiveQuery get(String queryId) {\n-        ActiveQuery activeQuery = null;\n-        cacheLock.readLock().lock();\n-        try {\n-            activeQuery = this.CACHE.get(queryIdFor(queryId), s -> new ActiveQuery(queryIdFor(queryId), this.windowSize));\n-        } finally {\n-            cacheLock.readLock().unlock();\n-        }\n-        return activeQuery;\n+  }\n+\n+  private String queryIdFor(String queryId) {\n+    return (queryId == null ? DEFAULT_EMPTY_QUERY_ID : queryId);\n+  }\n+\n+  public ActiveQuery get(String queryId) {\n+    ActiveQuery activeQuery = null;\n+    cacheLock.readLock().lock();\n+    try {\n+      activeQuery = this.CACHE.get(queryIdFor(queryId), s -> new ActiveQuery(queryIdFor(queryId), this.windowSize));\n+    } finally {\n+      cacheLock.readLock().unlock();\n+    }\n+    return activeQuery;\n+  }\n+\n+  class ActiveQueryTimerTask extends TimerTask {\n+\n+    public ActiveQueryTimerTask() {\n     }\n-    \n-    class ActiveQueryTimerTask extends TimerTask {\n-        \n-        public ActiveQueryTimerTask() {}\n-        \n-        @Override\n-        public void run() {\n-            List<ActiveQuerySnapshot> activeQueryList = new ArrayList<>();\n-            cacheLock.readLock().lock();\n-            try {\n-                for (ActiveQuery q : ActiveQueryLog.this.CACHE.asMap().values()) {\n-                    activeQueryList.add(q.snapshot());\n-                }\n-            } finally {\n-                cacheLock.readLock().unlock();\n-            }\n-            \n-            activeQueryList.sort(ActiveQuerySnapshot.greatestElapsedTime);\n-            \n-            List<ActiveQuerySnapshot> sublist = activeQueryList;\n-            if (ActiveQueryLog.this.logMaxQueries > 0) {\n-                sublist = activeQueryList.subList(0, Math.min(ActiveQueryLog.this.logMaxQueries, activeQueryList.size()));\n-            }\n-            \n-            for (ActiveQuerySnapshot q : sublist) {\n-                log.debug(q.toString());\n-            }\n+\n+    @Override\n+    public void run() {\n+      List<ActiveQuerySnapshot> activeQueryList = new ArrayList<>();\n+      cacheLock.readLock().lock();\n+      try {\n+        for (ActiveQuery q : ActiveQueryLog.this.CACHE.asMap().values()) {\n+          activeQueryList.add(q.snapshot());\n         }\n+      } finally {\n+        cacheLock.readLock().unlock();\n+      }\n+\n+      activeQueryList.sort(ActiveQuerySnapshot.greatestElapsedTime);\n+\n+      List<ActiveQuerySnapshot> sublist = activeQueryList;\n+      if (ActiveQueryLog.this.logMaxQueries > 0) {\n+        sublist = activeQueryList.subList(0, Math.min(ActiveQueryLog.this.logMaxQueries, activeQueryList.size()));\n+      }\n+\n+      for (ActiveQuerySnapshot q : sublist) {\n+        log.debug(q.toString());\n+      }\n     }\n-    \n+  }\n+\n }\n",
            "diff_size": 265
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "5",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/29/ActiveQueryLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/29/ActiveQueryLog.java\nindex 3050b0939a3..17c3fc5f12e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/29/ActiveQueryLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/29/ActiveQueryLog.java\n@@ -36,8 +36,7 @@ public class ActiveQueryLog {\n     private Cache<String,ActiveQuery> CACHE = null;\n     private ReentrantReadWriteLock cacheLock = new ReentrantReadWriteLock();\n     private Timer timer = new Timer(\"ActiveQueryLog\");\n-    \n-    synchronized public static void setConfig(AccumuloConfiguration conf) {\n+synchronized public static void setConfig(AccumuloConfiguration conf) {\n         if (conf != null) {\n             if (ActiveQueryLog.conf == null || conf.getUpdateCount() > ActiveQueryLog.conf.getUpdateCount()) {\n                 ActiveQueryLog.getInstance().checkSettings(conf, false);\n@@ -67,8 +66,8 @@ public class ActiveQueryLog {\n             setMaxIdle(this.maxIdle);\n         }\n     }\n-    \n-    synchronized public void setLogPeriod(long logPeriod) {\n+\n+        synchronized public void setLogPeriod(long logPeriod) {\n         if (logPeriod > 0) {\n             if (logPeriod != this.logPeriod || this.timer == null) {\n                 if (this.timer != null) {\n@@ -87,8 +86,8 @@ public class ActiveQueryLog {\n     synchronized public void setLogMaxQueries(int logMaxQueries) {\n         this.logMaxQueries = logMaxQueries;\n     }\n-    \n-    synchronized public void setWindowSize(int windowSize) {\n+\n+        synchronized public void setWindowSize(int windowSize) {\n         if (windowSize > 0) {\n             this.windowSize = windowSize;\n         } else {\n@@ -224,4 +223,4 @@ public class ActiveQueryLog {\n         }\n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "5",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/29/ActiveQueryLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/29/ActiveQueryLog.java\nindex 3050b0939a3..b88a12d49cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/29/ActiveQueryLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/29/ActiveQueryLog.java\n@@ -5,7 +5,6 @@ import com.github.benmanes.caffeine.cache.Caffeine;\n import org.apache.accumulo.core.conf.AccumuloConfiguration;\n import org.apache.accumulo.core.data.Range;\n import org.apache.log4j.Logger;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Timer;\n@@ -14,17 +13,21 @@ import java.util.UUID;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n+\n public class ActiveQueryLog {\n-    \n     private static final String DEFAULT_EMPTY_QUERY_ID = new UUID(0, 0).toString();\n     private static Logger log = Logger.getLogger(ActiveQueryLog.class);\n     private static ActiveQueryLog instance = null;\n     private static AccumuloConfiguration conf = null;\n     \n     // Accumulo properties\n+\n     public static final String MAX_IDLE = \"datawave.query.active.maxIdleMs\";\n+\n     public static final String LOG_PERIOD = \"datawave.query.active.logPeriodMs\";\n+\n     public static final String LOG_MAX_QUERIES = \"datawave.query.active.logMaxQueries\";\n+\n     public static final String WINDOW_SIZE = \"datawave.query.active.windowSize\";\n     \n     // Changeable via Accumulo properties\n@@ -32,11 +35,9 @@ public class ActiveQueryLog {\n     private long logPeriod = 60000;\n     private int logMaxQueries = 5;\n     private int windowSize = 10;\n-    \n     private Cache<String,ActiveQuery> CACHE = null;\n     private ReentrantReadWriteLock cacheLock = new ReentrantReadWriteLock();\n     private Timer timer = new Timer(\"ActiveQueryLog\");\n-    \n     synchronized public static void setConfig(AccumuloConfiguration conf) {\n         if (conf != null) {\n             if (ActiveQueryLog.conf == null || conf.getUpdateCount() > ActiveQueryLog.conf.getUpdateCount()) {\n@@ -45,9 +46,8 @@ public class ActiveQueryLog {\n             }\n         }\n     }\n-    \n+\n     public static ActiveQueryLog getInstance() {\n-        \n         if (ActiveQueryLog.instance == null) {\n             synchronized (ActiveQueryLog.class) {\n                 if (ActiveQueryLog.instance == null) {\n@@ -57,7 +57,7 @@ public class ActiveQueryLog {\n         }\n         return ActiveQueryLog.instance;\n     }\n-    \n+\n     private ActiveQueryLog(AccumuloConfiguration conf) {\n         if (conf != null) {\n             checkSettings(conf, true);\n@@ -67,7 +67,7 @@ public class ActiveQueryLog {\n             setMaxIdle(this.maxIdle);\n         }\n     }\n-    \n+\n     synchronized public void setLogPeriod(long logPeriod) {\n         if (logPeriod > 0) {\n             if (logPeriod != this.logPeriod || this.timer == null) {\n@@ -81,13 +81,12 @@ public class ActiveQueryLog {\n         } else {\n             log.error(\"Bad value: (\" + logPeriod + \") for logPeriod\");\n         }\n-        \n     }\n-    \n+\n     synchronized public void setLogMaxQueries(int logMaxQueries) {\n         this.logMaxQueries = logMaxQueries;\n     }\n-    \n+\n     synchronized public void setWindowSize(int windowSize) {\n         if (windowSize > 0) {\n             this.windowSize = windowSize;\n@@ -95,7 +94,7 @@ public class ActiveQueryLog {\n             log.error(\"Bad value: (\" + windowSize + \") for windowSize\");\n         }\n     }\n-    \n+\n     public void setMaxIdle(long maxIdle) {\n         if (this.maxIdle != maxIdle || this.CACHE == null) {\n             if (maxIdle > 0) {\n@@ -117,9 +116,8 @@ public class ActiveQueryLog {\n             }\n         }\n     }\n-    \n+\n     private void checkSettings(AccumuloConfiguration conf, boolean useDefaults) {\n-        \n         String maxIdleStr = conf.get(MAX_IDLE);\n         if (maxIdleStr != null) {\n             try {\n@@ -130,7 +128,7 @@ public class ActiveQueryLog {\n         } else if (useDefaults) {\n             setMaxIdle(this.maxIdle);\n         }\n-        \n+\n         String logPeriodStr = conf.get(LOG_PERIOD);\n         if (logPeriodStr != null) {\n             try {\n@@ -141,7 +139,7 @@ public class ActiveQueryLog {\n         } else if (useDefaults) {\n             setLogPeriod(this.logPeriod);\n         }\n-        \n+\n         String logMaxQueriesStr = conf.get(LOG_MAX_QUERIES);\n         if (logMaxQueriesStr != null) {\n             try {\n@@ -150,7 +148,7 @@ public class ActiveQueryLog {\n                 log.error(\"Bad value: (\" + logMaxQueriesStr + \") in \" + LOG_MAX_QUERIES + \" : \" + e.getMessage());\n             }\n         }\n-        \n+\n         String windowSizeStr = conf.get(WINDOW_SIZE);\n         if (windowSizeStr != null) {\n             try {\n@@ -160,13 +158,13 @@ public class ActiveQueryLog {\n             }\n         }\n     }\n-    \n+\n     private Cache<String,ActiveQuery> setupCache(long maxIdle) {\n         Caffeine<Object,Object> caffeine = Caffeine.newBuilder();\n         caffeine.expireAfterAccess(maxIdle, TimeUnit.MILLISECONDS);\n         return caffeine.build();\n     }\n-    \n+\n     public void remove(String queryId, Range range) {\n         ActiveQuery activeQuery = get(queryId);\n         int numActiveRanges = activeQuery.removeRange(range);\n@@ -179,11 +177,11 @@ public class ActiveQueryLog {\n             }\n         }\n     }\n-    \n+\n     private String queryIdFor(String queryId) {\n         return (queryId == null ? DEFAULT_EMPTY_QUERY_ID : queryId);\n     }\n-    \n+\n     public ActiveQuery get(String queryId) {\n         ActiveQuery activeQuery = null;\n         cacheLock.readLock().lock();\n@@ -194,11 +192,11 @@ public class ActiveQueryLog {\n         }\n         return activeQuery;\n     }\n-    \n+\n+\n     class ActiveQueryTimerTask extends TimerTask {\n-        \n         public ActiveQueryTimerTask() {}\n-        \n+\n         @Override\n         public void run() {\n             List<ActiveQuerySnapshot> activeQueryList = new ArrayList<>();\n@@ -210,18 +208,15 @@ public class ActiveQueryLog {\n             } finally {\n                 cacheLock.readLock().unlock();\n             }\n-            \n             activeQueryList.sort(ActiveQuerySnapshot.greatestElapsedTime);\n-            \n+\n             List<ActiveQuerySnapshot> sublist = activeQueryList;\n             if (ActiveQueryLog.this.logMaxQueries > 0) {\n                 sublist = activeQueryList.subList(0, Math.min(ActiveQueryLog.this.logMaxQueries, activeQueryList.size()));\n             }\n-            \n             for (ActiveQuerySnapshot q : sublist) {\n                 log.debug(q.toString());\n             }\n         }\n     }\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "5",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "5",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}