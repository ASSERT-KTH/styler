{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1227",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1227/Validators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1227/Validators.java\nindex 659fee9e119..2a6dda21244 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1227/Validators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1227/Validators.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.io.File;\n@@ -34,132 +35,129 @@ import org.neo4j.kernel.impl.storemigration.StoreFileType;\n \n public class Validators\n {\n-    public static final Validator<File> REGEX_FILE_EXISTS = file ->\n-    {\n-        if ( matchingFiles( file ).isEmpty() )\n-        {\n-            throw new IllegalArgumentException( \"File '\" + file + \"' doesn't exist\" );\n-        }\n-    };\n-\n-    private Validators()\n+  public static final Validator<File> REGEX_FILE_EXISTS = file ->\n+  {\n+    if (matchingFiles(file).isEmpty())\n     {\n+      throw new IllegalArgumentException(\"File '\" + file + \"' doesn't exist\");\n     }\n+  };\n \n-    static List<File> matchingFiles( File fileWithRegexInName )\n+  private Validators()\n+  {\n+  }\n+\n+  static List<File> matchingFiles(File fileWithRegexInName)\n+  {\n+    File parent = fileWithRegexInName.getAbsoluteFile().getParentFile();\n+    if (parent == null || !parent.exists())\n     {\n-        File parent = fileWithRegexInName.getAbsoluteFile().getParentFile();\n-        if ( parent == null || !parent.exists() )\n-        {\n-            throw new IllegalArgumentException( \"Directory of \" + fileWithRegexInName + \" doesn't exist\" );\n-        }\n-        final Pattern pattern = Pattern.compile( fileWithRegexInName.getName() );\n-        List<File> files = new ArrayList<>();\n-        for ( File file : parent.listFiles() )\n-        {\n-            if ( pattern.matcher( file.getName() ).matches() )\n-            {\n-                files.add( file );\n-            }\n-        }\n-        return files;\n+      throw new IllegalArgumentException(\"Directory of \" + fileWithRegexInName + \" doesn't exist\");\n     }\n-\n-    public static final Validator<File> DIRECTORY_IS_WRITABLE = value ->\n+    final Pattern pattern = Pattern.compile(fileWithRegexInName.getName());\n+    List<File> files = new ArrayList<>();\n+    for (File file : parent.listFiles())\n     {\n-        if ( value.mkdirs() )\n-        {   // It's OK, we created the directory right now, which means we have write access to it\n-            return;\n-        }\n+      if (pattern.matcher(file.getName()).matches())\n+      {\n+        files.add(file);\n+      }\n+    }\n+    return files;\n+  }\n \n-        File test = new File( value, \"_______test___\" );\n-        try\n-        {\n-            test.createNewFile();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new IllegalArgumentException( \"Directoy '\" + value + \"' not writable: \" + e.getMessage() );\n-        }\n-        finally\n-        {\n-            test.delete();\n-        }\n-    };\n+  public static final Validator<File> DIRECTORY_IS_WRITABLE = value ->\n+  {\n+    if (value.mkdirs())\n+    {   // It's OK, we created the directory right now, which means we have write access to it\n+      return;\n+    }\n \n-    public static final Validator<File> CONTAINS_NO_EXISTING_DATABASE = value ->\n+    File test = new File(value, \"_______test___\");\n+    try\n     {\n-        try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction() )\n-        {\n-            if ( isExistingDatabase( fileSystem, value ) )\n-            {\n-                throw new IllegalArgumentException( \"Directory '\" + value + \"' already contains a database\" );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n-    };\n-\n-    public static final Validator<File> CONTAINS_EXISTING_DATABASE = value ->\n+      test.createNewFile();\n+    } catch (IOException e)\n     {\n-        try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction() )\n-        {\n-            if ( !isExistingDatabase( fileSystem, value ) )\n-            {\n-                throw new IllegalArgumentException( \"Directory '\" + value + \"' does not contain a database\" );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UncheckedIOException( e );\n-        }\n-    };\n-\n-    private static boolean isExistingDatabase( FileSystemAbstraction fileSystem, File value )\n+      throw new IllegalArgumentException(\"Directoy '\" + value + \"' not writable: \" + e.getMessage());\n+    } finally\n     {\n-        return fileSystem.fileExists( new File( value, StoreFileType.STORE.augment( MetaDataStore.DEFAULT_NAME ) ) );\n+      test.delete();\n     }\n+  };\n \n-    public static Validator<String> inList( String[] validStrings )\n+  public static final Validator<File> CONTAINS_NO_EXISTING_DATABASE = value ->\n+  {\n+    try (FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction())\n     {\n-        return value ->\n-        {\n-            if ( Arrays.stream( validStrings ).noneMatch( s -> s.equals( value ) ) )\n-            {\n-                throw new IllegalArgumentException( \"'\" + value + \"' found but must be one of: \" +\n-                    Arrays.toString( validStrings ) + \".\" );\n-            }\n-        };\n+      if (isExistingDatabase(fileSystem, value))\n+      {\n+        throw new IllegalArgumentException(\"Directory '\" + value + \"' already contains a database\");\n+      }\n+    } catch (IOException e)\n+    {\n+      throw new UncheckedIOException(e);\n     }\n+  };\n \n-    public static <T> Validator<T[]> atLeast( final String key, final int length )\n+  public static final Validator<File> CONTAINS_EXISTING_DATABASE = value ->\n+  {\n+    try (FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction())\n+    {\n+      if (!isExistingDatabase(fileSystem, value))\n+      {\n+        throw new IllegalArgumentException(\"Directory '\" + value + \"' does not contain a database\");\n+      }\n+    } catch (IOException e)\n     {\n-        return value ->\n-        {\n-            if ( value.length < length )\n-            {\n-                throw new IllegalArgumentException( \"Expected '\" + key + \"' to have at least \" +\n-                        length + \" valid item\" + (length == 1 ? \"\" : \"s\") + \", but had \" + value.length +\n-                        \" \" + Arrays.toString( value ) );\n-            }\n-        };\n+      throw new UncheckedIOException(e);\n     }\n+  };\n+\n+  private static boolean isExistingDatabase(FileSystemAbstraction fileSystem, File value)\n+  {\n+    return fileSystem.fileExists(new File(value, StoreFileType.STORE.augment(MetaDataStore.DEFAULT_NAME)));\n+  }\n \n-    public static <T> Validator<T> emptyValidator()\n+  public static Validator<String> inList(String[] validStrings)\n+  {\n+    return value ->\n     {\n-        return value -> {};\n-    }\n+      if (Arrays.stream(validStrings).noneMatch(s -> s.equals(value)))\n+      {\n+        throw new IllegalArgumentException(\"'\" + value + \"' found but must be one of: \" +\n+            Arrays.toString(validStrings) + \".\");\n+      }\n+    };\n+  }\n \n-    public static <T> Validator<T> all( Validator<T>... validators )\n+  public static <T> Validator<T[]> atLeast(final String key, final int length)\n+  {\n+    return value ->\n     {\n-        return value ->\n-        {\n-            for ( Validator<T> validator : validators )\n-            {\n-                validator.validate( value );\n-            }\n-        };\n-    }\n+      if (value.length < length)\n+      {\n+        throw new IllegalArgumentException(\"Expected '\" + key + \"' to have at least \" +\n+            length + \" valid item\" + (length == 1 ? \"\" : \"s\") + \", but had \" + value.length +\n+            \" \" + Arrays.toString(value));\n+      }\n+    };\n+  }\n+\n+  public static <T> Validator<T> emptyValidator()\n+  {\n+    return value -> {\n+    };\n+  }\n+\n+  public static <T> Validator<T> all(Validator<T>... validators)\n+  {\n+    return value ->\n+    {\n+      for (Validator<T> validator : validators)\n+      {\n+        validator.validate(value);\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 165
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1227/Validators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1227/Validators.java\nindex 659fee9e119..4a98958a01a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1227/Validators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1227/Validators.java\n@@ -68,7 +68,8 @@ public class Validators\n     public static final Validator<File> DIRECTORY_IS_WRITABLE = value ->\n     {\n         if ( value.mkdirs() )\n-        {   // It's OK, we created the directory right now, which means we have write access to it\n+        {\n+    // It's OK, we created the directory right now, which means we have write access to it\n             return;\n         }\n \n@@ -128,9 +129,8 @@ public class Validators\n         {\n             if ( Arrays.stream( validStrings ).noneMatch( s -> s.equals( value ) ) )\n             {\n-                throw new IllegalArgumentException( \"'\" + value + \"' found but must be one of: \" +\n-                    Arrays.toString( validStrings ) + \".\" );\n-            }\n+                throw new IllegalArgumentException( \"'\" + value + \"' found but must be one of: \" + Arrays.toString( validStrings ) + \".\" );\n+    }\n         };\n     }\n \n@@ -140,16 +140,15 @@ public class Validators\n         {\n             if ( value.length < length )\n             {\n-                throw new IllegalArgumentException( \"Expected '\" + key + \"' to have at least \" +\n-                        length + \" valid item\" + (length == 1 ? \"\" : \"s\") + \", but had \" + value.length +\n-                        \" \" + Arrays.toString( value ) );\n-            }\n+                throw new IllegalArgumentException( \"Expected '\" + key + \"' to have at least \" + length + \" valid item\" + ( length == 1 ? \"\" : \"s\") + \", but had \" + value.length + \" \" + Arrays.toString( value ) );\n+    }\n         };\n     }\n \n     public static <T> Validator<T> emptyValidator()\n     {\n-        return value -> {};\n+        return value -> {\n+};\n     }\n \n     public static <T> Validator<T> all( Validator<T>... validators )\n@@ -162,4 +161,4 @@ public class Validators\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}