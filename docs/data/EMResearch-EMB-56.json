{
    "project_name": "EMResearch-EMB",
    "error_id": "56",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * @return a List of {@link DisambiguationPatternRule} objects\n   */\n  protected List<DisambiguationPatternRule> loadPatternRules(String filename) throws ParserConfigurationException, SAXException, IOException {\n    DisambiguationRuleLoader ruleLoader = new DisambiguationRuleLoader();\n    return ruleLoader.getRules(JLanguageTool.getDataBroker().getFromResourceDirAsStream(filename));\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/56/XmlRuleDisambiguator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/56/XmlRuleDisambiguator.java\nindex 5928a0b4a51..98942599f1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/56/XmlRuleDisambiguator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/56/XmlRuleDisambiguator.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2007 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -34,42 +34,44 @@ import org.xml.sax.SAXException;\n /**\n  * Rule-based disambiguator.\n  * Implements an idea by Agnes Souque.\n- * \n+ *\n  * @author Marcin Mi\u0142kowski\n  */\n public class XmlRuleDisambiguator extends AbstractDisambiguator {\n \n-  private static final String DISAMBIGUATION_FILE = \"disambiguation.xml\";\n+    private static final String DISAMBIGUATION_FILE = \"disambiguation.xml\";\n \n-  private final List<DisambiguationPatternRule> disambiguationRules;\n+    private final List<DisambiguationPatternRule> disambiguationRules;\n \n-  public XmlRuleDisambiguator(Language language) {\n-    Objects.requireNonNull(language);\n-    String disambiguationFile = language.getShortCode() + \"/\" + DISAMBIGUATION_FILE;\n-    try {\n-      disambiguationRules = loadPatternRules(disambiguationFile);\n-    } catch (Exception e) {\n-      throw new RuntimeException(\"Problems with loading disambiguation file: \" + disambiguationFile, e);\n+    public XmlRuleDisambiguator(Language language) {\n+        Objects.requireNonNull(language);\n+        String disambiguationFile = language.getShortCode() + \"/\" + DISAMBIGUATION_FILE;\n+        try {\n+            disambiguationRules = loadPatternRules(disambiguationFile);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Problems with loading disambiguation file: \" + disambiguationFile, e);\n+        }\n     }\n-  }\n \n-  @Override\n-  public AnalyzedSentence disambiguate(AnalyzedSentence input) throws IOException {\n-    AnalyzedSentence sentence = input;\n-    for (DisambiguationPatternRule patternRule : disambiguationRules) {\n-      sentence = patternRule.replace(sentence);\n+    @Override\n+    public AnalyzedSentence disambiguate(AnalyzedSentence input) throws IOException {\n+        AnalyzedSentence sentence = input;\n+        for (DisambiguationPatternRule patternRule : disambiguationRules) {\n+            sentence = patternRule.replace(sentence);\n+        }\n+        return sentence;\n     }\n-    return sentence;\n-  }\n \n-  /**\n-   * Load disambiguation rules from an XML file. Use {@link JLanguageTool#addRule} to add\n-   * these rules to the checking process.\n-   * @return a List of {@link DisambiguationPatternRule} objects\n-   */\n-  protected List<DisambiguationPatternRule> loadPatternRules(String filename) throws ParserConfigurationException, SAXException, IOException {\n-    DisambiguationRuleLoader ruleLoader = new DisambiguationRuleLoader();\n-    return ruleLoader.getRules(JLanguageTool.getDataBroker().getFromResourceDirAsStream(filename));\n-  }\n+    /**\n+     * Load disambiguation rules from an XML file. Use {@link JLanguageTool#addRule} to add\n+     * these rules to the checking process.\n+     *\n+     * @return a List of {@link DisambiguationPatternRule} objects\n+     */\n+    protected List<DisambiguationPatternRule> loadPatternRules(String filename)\n+        throws ParserConfigurationException, SAXException, IOException {\n+        DisambiguationRuleLoader ruleLoader = new DisambiguationRuleLoader();\n+        return ruleLoader.getRules(JLanguageTool.getDataBroker().getFromResourceDirAsStream(filename));\n+    }\n \n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/56/XmlRuleDisambiguator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/56/XmlRuleDisambiguator.java\nindex 5928a0b4a51..1608031f80a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/56/XmlRuleDisambiguator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/56/XmlRuleDisambiguator.java\n@@ -72,4 +72,4 @@ public class XmlRuleDisambiguator extends AbstractDisambiguator {\n     return ruleLoader.getRules(JLanguageTool.getDataBroker().getFromResourceDirAsStream(filename));\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/56/XmlRuleDisambiguator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/56/XmlRuleDisambiguator.java\nindex 5928a0b4a51..306de828f80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/56/XmlRuleDisambiguator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/56/XmlRuleDisambiguator.java\n@@ -22,9 +22,7 @@ package org.languagetool.tagging.disambiguation.rules;\n import java.io.IOException;\n import java.util.List;\n import java.util.Objects;\n-\n import javax.xml.parsers.ParserConfigurationException;\n-\n import org.languagetool.AnalyzedSentence;\n import org.languagetool.JLanguageTool;\n import org.languagetool.Language;\n@@ -37,39 +35,45 @@ import org.xml.sax.SAXException;\n  * \n  * @author Marcin Mi\u0142kowski\n  */\n+\n+\n public class XmlRuleDisambiguator extends AbstractDisambiguator {\n \n-  private static final String DISAMBIGUATION_FILE = \"disambiguation.xml\";\n+    private static final String DISAMBIGUATION_FILE = \"disambiguation.xml\";\n+    private final List<DisambiguationPatternRule> disambiguationRules;\n \n-  private final List<DisambiguationPatternRule> disambiguationRules;\n+    public XmlRuleDisambiguator(Language language) {\n+        Objects.requireNonNull(language);\n \n-  public XmlRuleDisambiguator(Language language) {\n-    Objects.requireNonNull(language);\n-    String disambiguationFile = language.getShortCode() + \"/\" + DISAMBIGUATION_FILE;\n-    try {\n-      disambiguationRules = loadPatternRules(disambiguationFile);\n-    } catch (Exception e) {\n-      throw new RuntimeException(\"Problems with loading disambiguation file: \" + disambiguationFile, e);\n+        String disambiguationFile = language.getShortCode() + \"/\"\n+        + DISAMBIGUATION_FILE;\n+        try {\n+            disambiguationRules = loadPatternRules(disambiguationFile);\n+        } catch (Exception e) {\n+          throw new RuntimeException(\"Problems with loading disambiguation file: \"\n+              + disambiguationFile, e);\n+        }\n     }\n-  }\n \n-  @Override\n-  public AnalyzedSentence disambiguate(AnalyzedSentence input) throws IOException {\n-    AnalyzedSentence sentence = input;\n-    for (DisambiguationPatternRule patternRule : disambiguationRules) {\n-      sentence = patternRule.replace(sentence);\n+    @Override\n+    public AnalyzedSentence disambiguate(AnalyzedSentence input) throws IOException {\n+        AnalyzedSentence sentence = input;\n+        for (DisambiguationPatternRule patternRule : disambiguationRules) {\n+        sentence = patternRule.replace(sentence);\n+        }\n+        return sentence;\n     }\n-    return sentence;\n-  }\n \n   /**\n    * Load disambiguation rules from an XML file. Use {@link JLanguageTool#addRule} to add\n    * these rules to the checking process.\n    * @return a List of {@link DisambiguationPatternRule} objects\n    */\n-  protected List<DisambiguationPatternRule> loadPatternRules(String filename) throws ParserConfigurationException, SAXException, IOException {\n-    DisambiguationRuleLoader ruleLoader = new DisambiguationRuleLoader();\n-    return ruleLoader.getRules(JLanguageTool.getDataBroker().getFromResourceDirAsStream(filename));\n-  }\n \n-}\n+    protected List<DisambiguationPatternRule> loadPatternRules(String filename) throws ParserConfigurationException,\n+    SAXException,\n+    IOException {\n+        DisambiguationRuleLoader ruleLoader = new DisambiguationRuleLoader();\n+        return ruleLoader.getRules(JLanguageTool.getDataBroker().getFromResourceDirAsStream(filename));\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}