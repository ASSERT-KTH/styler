{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1431",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "59",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1431/StatementLocksFactorySelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1431/StatementLocksFactorySelector.java\nindex f07ac5840d0..d2ff5b615b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1431/StatementLocksFactorySelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1431/StatementLocksFactorySelector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.factory;\n \n import java.util.List;\n@@ -32,56 +33,54 @@ import org.neo4j.logging.Log;\n \n public class StatementLocksFactorySelector\n {\n-    private final Locks locks;\n-    private final Config config;\n-    private final Log log;\n+  private final Locks locks;\n+  private final Config config;\n+  private final Log log;\n \n-    public StatementLocksFactorySelector( Locks locks, Config config, LogService logService )\n-    {\n-        this.locks = locks;\n-        this.config = config;\n-        this.log = logService.getInternalLog( getClass() );\n-    }\n+  public StatementLocksFactorySelector(Locks locks, Config config, LogService logService)\n+  {\n+    this.locks = locks;\n+    this.config = config;\n+    this.log = logService.getInternalLog(getClass());\n+  }\n \n-    public StatementLocksFactory select()\n-    {\n-        StatementLocksFactory statementLocksFactory;\n+  public StatementLocksFactory select()\n+  {\n+    StatementLocksFactory statementLocksFactory;\n \n-        String serviceName = StatementLocksFactory.class.getSimpleName();\n-        List<StatementLocksFactory> factories = serviceLoadFactories();\n-        if ( factories.isEmpty() )\n-        {\n-            statementLocksFactory = new SimpleStatementLocksFactory();\n+    String serviceName = StatementLocksFactory.class.getSimpleName();\n+    List<StatementLocksFactory> factories = serviceLoadFactories();\n+    if (factories.isEmpty())\n+    {\n+      statementLocksFactory = new SimpleStatementLocksFactory();\n \n-            log.info( \"No services implementing \" + serviceName + \" found. \" +\n-                      \"Using \" + SimpleStatementLocksFactory.class.getSimpleName() );\n-        }\n-        else if ( factories.size() == 1 )\n-        {\n-            statementLocksFactory = factories.get( 0 );\n+      log.info(\"No services implementing \" + serviceName + \" found. \" +\n+          \"Using \" + SimpleStatementLocksFactory.class.getSimpleName());\n+    } else if (factories.size() == 1)\n+    {\n+      statementLocksFactory = factories.get(0);\n \n-            log.info( \"Found single implementation of \" + serviceName +\n-                      \". Namely \" + statementLocksFactory.getClass().getSimpleName() );\n-        }\n-        else\n-        {\n-            throw new IllegalStateException(\n-                    \"Found more than one implementation of \" + serviceName + \": \" + factories );\n-        }\n+      log.info(\"Found single implementation of \" + serviceName +\n+          \". Namely \" + statementLocksFactory.getClass().getSimpleName());\n+    } else\n+    {\n+      throw new IllegalStateException(\n+          \"Found more than one implementation of \" + serviceName + \": \" + factories);\n+    }\n \n-        statementLocksFactory.initialize( locks, config );\n+    statementLocksFactory.initialize(locks, config);\n \n-        return statementLocksFactory;\n-    }\n+    return statementLocksFactory;\n+  }\n \n-    /**\n-     * Load all available factories via {@link Service}.\n-     * <b>Visible for testing only.</b>\n-     *\n-     * @return list of available factories.\n-     */\n-    List<StatementLocksFactory> serviceLoadFactories()\n-    {\n-        return Iterables.asList( Service.load( StatementLocksFactory.class ) );\n-    }\n+  /**\n+   * Load all available factories via {@link Service}.\n+   * <b>Visible for testing only.</b>\n+   *\n+   * @return list of available factories.\n+   */\n+  List<StatementLocksFactory> serviceLoadFactories()\n+  {\n+    return Iterables.asList(Service.load(StatementLocksFactory.class));\n+  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1431/StatementLocksFactorySelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1431/StatementLocksFactorySelector.java\nindex f07ac5840d0..4508d6594e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1431/StatementLocksFactorySelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1431/StatementLocksFactorySelector.java\n@@ -52,26 +52,20 @@ public class StatementLocksFactorySelector\n         if ( factories.isEmpty() )\n         {\n             statementLocksFactory = new SimpleStatementLocksFactory();\n-\n-            log.info( \"No services implementing \" + serviceName + \" found. \" +\n-                      \"Using \" + SimpleStatementLocksFactory.class.getSimpleName() );\n-        }\n+log.info( \"No services implementing \" + serviceName + \" found. \" + \"Using \" + SimpleStatementLocksFactory.class.getSimpleName() );\n+    }\n         else if ( factories.size() == 1 )\n         {\n             statementLocksFactory = factories.get( 0 );\n-\n-            log.info( \"Found single implementation of \" + serviceName +\n-                      \". Namely \" + statementLocksFactory.getClass().getSimpleName() );\n-        }\n+log.info( \"Found single implementation of \" + serviceName + \". Namely \" + statementLocksFactory.getClass().getSimpleName() );\n+    }\n         else\n         {\n-            throw new IllegalStateException(\n-                    \"Found more than one implementation of \" + serviceName + \": \" + factories );\n+            throw new IllegalStateException( \"Found more than one implementation of \" + serviceName + \": \" + factories );\n         }\n \n         statementLocksFactory.initialize( locks, config );\n-\n-        return statementLocksFactory;\n+return statementLocksFactory;\n     }\n \n     /**\n@@ -84,4 +78,4 @@ public class StatementLocksFactorySelector\n     {\n         return Iterables.asList( Service.load( StatementLocksFactory.class ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}