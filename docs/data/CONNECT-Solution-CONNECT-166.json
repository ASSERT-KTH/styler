{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "166",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.patientdiscovery.adapter;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.messaging.server.BaseService;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/166/AdapterPatientDiscoveryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/166/AdapterPatientDiscoveryImpl.java\nindex 535a7b5e551..91552d2a898 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/166/AdapterPatientDiscoveryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/166/AdapterPatientDiscoveryImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.adapter;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -41,33 +42,34 @@ import org.hl7.v3.RespondingGatewayPRPAIN201305UV02RequestType;\n  * @author jhoppesc, Les Westberg\n  */\n public class AdapterPatientDiscoveryImpl extends BaseService {\n-    private static final Logger LOG = Logger.getLogger(AdapterPatientDiscoveryImpl.class);\n+  private static final Logger LOG = Logger.getLogger(AdapterPatientDiscoveryImpl.class);\n \n-    /**\n-     * This method is called by the secure and unsecure Adapter Secure and unsecure web service. It calls the\n-     * orchestration code.\n-     *\n-     * @param bIsSecure TRUE if being called via secure web service.\n-     * @param request The message payload.\n-     * @param context The web service context.\n-     * @return Returns the response from the Adapter patient discovery request.\n-     */\n-    public PRPAIN201306UV02 respondingGatewayPRPAIN201305UV02(Boolean bIsSecure,\n-            RespondingGatewayPRPAIN201305UV02RequestType request, WebServiceContext context) {\n-        LOG.debug(\"Entering AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n+  /**\n+   * This method is called by the secure and unsecure Adapter Secure and unsecure web service. It calls the\n+   * orchestration code.\n+   *\n+   * @param bIsSecure TRUE if being called via secure web service.\n+   * @param request   The message payload.\n+   * @param context   The web service context.\n+   * @return Returns the response from the Adapter patient discovery request.\n+   */\n+  public PRPAIN201306UV02 respondingGatewayPRPAIN201305UV02(Boolean bIsSecure,\n+                                                            RespondingGatewayPRPAIN201305UV02RequestType request,\n+                                                            WebServiceContext context) {\n+    LOG.debug(\"Entering AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n \n-        AssertionType assertion = null;\n-        if ((bIsSecure) && (context != null)) {\n-            assertion = extractAssertion(context);\n-        } else {\n-            assertion = new AssertionType();\n-        }\n+    AssertionType assertion = null;\n+    if ((bIsSecure) && (context != null)) {\n+      assertion = extractAssertion(context);\n+    } else {\n+      assertion = new AssertionType();\n+    }\n \n-        AdapterPatientDiscoveryOrchImpl oOrchestrator = new AdapterPatientDiscoveryOrchImpl();\n-        PRPAIN201306UV02 response = oOrchestrator.respondingGatewayPRPAIN201305UV02(request, assertion);\n+    AdapterPatientDiscoveryOrchImpl oOrchestrator = new AdapterPatientDiscoveryOrchImpl();\n+    PRPAIN201306UV02 response = oOrchestrator.respondingGatewayPRPAIN201305UV02(request, assertion);\n \n-        // Send response back to the initiating Gateway\n-        LOG.debug(\"Exiting AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n-        return response;\n-    }\n+    // Send response back to the initiating Gateway\n+    LOG.debug(\"Exiting AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n+    return response;\n+  }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/166/AdapterPatientDiscoveryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/166/AdapterPatientDiscoveryImpl.java\nindex 535a7b5e551..8b9ea4c3d80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/166/AdapterPatientDiscoveryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/166/AdapterPatientDiscoveryImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.adapter;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -52,8 +53,7 @@ public class AdapterPatientDiscoveryImpl extends BaseService {\n      * @param context The web service context.\n      * @return Returns the response from the Adapter patient discovery request.\n      */\n-    public PRPAIN201306UV02 respondingGatewayPRPAIN201305UV02(Boolean bIsSecure,\n-            RespondingGatewayPRPAIN201305UV02RequestType request, WebServiceContext context) {\n+    public PRPAIN201306UV02 respondingGatewayPRPAIN201305UV02(Boolean bIsSecure, RespondingGatewayPRPAIN201305UV02RequestType request, WebServiceContext context) {\n         LOG.debug(\"Entering AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n \n         AssertionType assertion = null;\n@@ -68,6 +68,7 @@ public class AdapterPatientDiscoveryImpl extends BaseService {\n \n         // Send response back to the initiating Gateway\n         LOG.debug(\"Exiting AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n-        return response;\n+\n+return response;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "63",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/166/AdapterPatientDiscoveryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/166/AdapterPatientDiscoveryImpl.java\nindex 535a7b5e551..ad1ad13e2a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/166/AdapterPatientDiscoveryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/166/AdapterPatientDiscoveryImpl.java\n@@ -28,9 +28,7 @@ package gov.hhs.fha.nhinc.patientdiscovery.adapter;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n import gov.hhs.fha.nhinc.messaging.server.BaseService;\n-\n import javax.xml.ws.WebServiceContext;\n-\n import org.apache.log4j.Logger;\n import org.hl7.v3.PRPAIN201306UV02;\n import org.hl7.v3.RespondingGatewayPRPAIN201305UV02RequestType;\n@@ -40,7 +38,11 @@ import org.hl7.v3.RespondingGatewayPRPAIN201305UV02RequestType;\n  *\n  * @author jhoppesc, Les Westberg\n  */\n-public class AdapterPatientDiscoveryImpl extends BaseService {\n+\n+\n+public class AdapterPatientDiscoveryImpl extends\n+    BaseService {\n+\n     private static final Logger LOG = Logger.getLogger(AdapterPatientDiscoveryImpl.class);\n \n     /**\n@@ -52,17 +54,20 @@ public class AdapterPatientDiscoveryImpl extends BaseService {\n      * @param context The web service context.\n      * @return Returns the response from the Adapter patient discovery request.\n      */\n+\n+\n     public PRPAIN201306UV02 respondingGatewayPRPAIN201305UV02(Boolean bIsSecure,\n-            RespondingGatewayPRPAIN201305UV02RequestType request, WebServiceContext context) {\n+        RespondingGatewayPRPAIN201305UV02RequestType request, WebServiceContext context) {\n         LOG.debug(\"Entering AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n-\n         AssertionType assertion = null;\n-        if ((bIsSecure) && (context != null)) {\n+        if((bIsSecure) && (context != null)) {\n             assertion = extractAssertion(context);\n-        } else {\n-            assertion = new AssertionType();\n         }\n \n+\n+else {\n+            assertion = new AssertionType();\n+        }\n         AdapterPatientDiscoveryOrchImpl oOrchestrator = new AdapterPatientDiscoveryOrchImpl();\n         PRPAIN201306UV02 response = oOrchestrator.respondingGatewayPRPAIN201305UV02(request, assertion);\n \n@@ -70,4 +75,5 @@ public class AdapterPatientDiscoveryImpl extends BaseService {\n         LOG.debug(\"Exiting AdapterPatientDiscoveryImpl.respondingGatewayPRPAIN201305UV02\");\n         return response;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}