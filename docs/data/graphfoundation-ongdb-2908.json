{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2908",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "180",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "213",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "4",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "89",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "288",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2908/TypeMappers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2908/TypeMappers.java\nindex 09f0353c2f6..35079b08536 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2908/TypeMappers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2908/TypeMappers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc;\n \n import java.lang.reflect.ParameterizedType;\n@@ -71,229 +72,224 @@ import static org.neo4j.internal.kernel.api.procs.Neo4jTypes.NTTime;\n \n public class TypeMappers extends DefaultValueMapper\n {\n-    public abstract static class TypeChecker\n-    {\n-        final AnyType type;\n-        final Class<?> javaClass;\n-\n-        private TypeChecker( AnyType type, Class<?> javaClass )\n-        {\n-            this.type = type;\n-            this.javaClass = javaClass;\n-        }\n-\n-        public AnyType type()\n-        {\n-            return type;\n-        }\n-\n-        public Object typeCheck( Object javaValue ) throws ProcedureException\n-        {\n-            if ( javaValue == null || javaClass.isInstance( javaValue ) )\n-            {\n-                return javaValue;\n-            }\n-            throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                    \"Expected `%s` to be a `%s`, found `%s`.\", javaValue, javaClass.getSimpleName(),\n-                    javaValue.getClass() );\n-        }\n+  public abstract static class TypeChecker\n+  {\n+    final AnyType type;\n+    final Class<?> javaClass;\n \n-        public AnyValue toValue( Object obj )\n-        {\n-            return ValueUtils.of( obj );\n-        }\n-    }\n-\n-    private final Map<Type,DefaultValueConverter> javaToNeo = new HashMap<>();\n-\n-    /**\n-     * Used by testing.\n-     */\n-    public TypeMappers()\n+    private TypeChecker(AnyType type, Class<?> javaClass)\n     {\n-        this( null );\n+      this.type = type;\n+      this.javaClass = javaClass;\n     }\n \n-    public TypeMappers( EmbeddedProxySPI proxySPI )\n+    public AnyType type()\n     {\n-        super( proxySPI );\n-        registerScalarsAndCollections();\n+      return type;\n     }\n \n-    /**\n-     * We don't have Node, Relationship, Property available down here - and don't strictly want to,\n-     * we want the procedures to be independent of which Graph API is being used (and we don't want\n-     * them to get tangled up with kernel code). So, we only register the \"core\" type system here,\n-     * scalars and collection types. Node, Relationship, Path and any other future graph types should\n-     * be registered from the outside in the same place APIs to work with those types is registered.\n-     */\n-    private void registerScalarsAndCollections()\n+    public Object typeCheck(Object javaValue) throws ProcedureException\n     {\n-        registerType( String.class, TO_STRING );\n-        registerType( long.class, TO_INTEGER );\n-        registerType( Long.class, TO_INTEGER );\n-        registerType( double.class, TO_FLOAT );\n-        registerType( Double.class, TO_FLOAT );\n-        registerType( Number.class, TO_NUMBER );\n-        registerType( boolean.class, TO_BOOLEAN );\n-        registerType( Boolean.class, TO_BOOLEAN );\n-        registerType( Map.class, TO_MAP );\n-        registerType( List.class, TO_LIST );\n-        registerType( Object.class, TO_ANY );\n-        registerType( byte[].class, TO_BYTEARRAY );\n-        registerType( ZonedDateTime.class, new DefaultValueConverter( NTDateTime, ZonedDateTime.class ) );\n-        registerType( LocalDateTime.class, new DefaultValueConverter( NTLocalDateTime, LocalDateTime.class ) );\n-        registerType( LocalDate.class, new DefaultValueConverter( NTDate, LocalDate.class ) );\n-        registerType( OffsetTime.class, new DefaultValueConverter( NTTime, OffsetTime.class ) );\n-        registerType( LocalTime.class, new DefaultValueConverter( NTLocalTime, LocalTime.class ) );\n-        registerType( TemporalAmount.class, new DefaultValueConverter( NTDuration, TemporalAmount.class ) );\n+      if (javaValue == null || javaClass.isInstance(javaValue))\n+      {\n+        return javaValue;\n+      }\n+      throw new ProcedureException(Status.Procedure.ProcedureCallFailed,\n+          \"Expected `%s` to be a `%s`, found `%s`.\", javaValue, javaClass.getSimpleName(),\n+          javaValue.getClass());\n     }\n \n-    public AnyType toNeo4jType( Type type ) throws ProcedureException\n+    public AnyValue toValue(Object obj)\n     {\n-        return converterFor( type ).type;\n+      return ValueUtils.of(obj);\n     }\n+  }\n+\n+  private final Map<Type, DefaultValueConverter> javaToNeo = new HashMap<>();\n+\n+  /**\n+   * Used by testing.\n+   */\n+  public TypeMappers()\n+  {\n+    this(null);\n+  }\n \n-    public TypeChecker checkerFor( Type javaType ) throws ProcedureException\n+  public TypeMappers(EmbeddedProxySPI proxySPI)\n+  {\n+    super(proxySPI);\n+    registerScalarsAndCollections();\n+  }\n+\n+  /**\n+   * We don't have Node, Relationship, Property available down here - and don't strictly want to,\n+   * we want the procedures to be independent of which Graph API is being used (and we don't want\n+   * them to get tangled up with kernel code). So, we only register the \"core\" type system here,\n+   * scalars and collection types. Node, Relationship, Path and any other future graph types should\n+   * be registered from the outside in the same place APIs to work with those types is registered.\n+   */\n+  private void registerScalarsAndCollections()\n+  {\n+    registerType(String.class, TO_STRING);\n+    registerType(long.class, TO_INTEGER);\n+    registerType(Long.class, TO_INTEGER);\n+    registerType(double.class, TO_FLOAT);\n+    registerType(Double.class, TO_FLOAT);\n+    registerType(Number.class, TO_NUMBER);\n+    registerType(boolean.class, TO_BOOLEAN);\n+    registerType(Boolean.class, TO_BOOLEAN);\n+    registerType(Map.class, TO_MAP);\n+    registerType(List.class, TO_LIST);\n+    registerType(Object.class, TO_ANY);\n+    registerType(byte[].class, TO_BYTEARRAY);\n+    registerType(ZonedDateTime.class, new DefaultValueConverter(NTDateTime, ZonedDateTime.class));\n+    registerType(LocalDateTime.class, new DefaultValueConverter(NTLocalDateTime, LocalDateTime.class));\n+    registerType(LocalDate.class, new DefaultValueConverter(NTDate, LocalDate.class));\n+    registerType(OffsetTime.class, new DefaultValueConverter(NTTime, OffsetTime.class));\n+    registerType(LocalTime.class, new DefaultValueConverter(NTLocalTime, LocalTime.class));\n+    registerType(TemporalAmount.class, new DefaultValueConverter(NTDuration, TemporalAmount.class));\n+  }\n+\n+  public AnyType toNeo4jType(Type type) throws ProcedureException\n+  {\n+    return converterFor(type).type;\n+  }\n+\n+  public TypeChecker checkerFor(Type javaType) throws ProcedureException\n+  {\n+    return converterFor(javaType);\n+  }\n+\n+  DefaultValueConverter converterFor(Type javaType) throws ProcedureException\n+  {\n+    DefaultValueConverter converter = javaToNeo.get(javaType);\n+    if (converter != null)\n     {\n-        return converterFor( javaType );\n+      return converter;\n     }\n \n-    DefaultValueConverter converterFor( Type javaType ) throws ProcedureException\n+    if (javaType instanceof ParameterizedType)\n     {\n-        DefaultValueConverter converter = javaToNeo.get( javaType );\n-        if ( converter != null )\n-        {\n-            return converter;\n-        }\n+      ParameterizedType pt = (ParameterizedType) javaType;\n+      Type rawType = pt.getRawType();\n \n-        if ( javaType instanceof ParameterizedType )\n+      if (rawType == List.class)\n+      {\n+        Type type = pt.getActualTypeArguments()[0];\n+        return toList(converterFor(type), type);\n+      } else if (rawType == Map.class)\n+      {\n+        Type type = pt.getActualTypeArguments()[0];\n+        if (type != String.class)\n         {\n-            ParameterizedType pt = (ParameterizedType) javaType;\n-            Type rawType = pt.getRawType();\n-\n-            if ( rawType == List.class )\n-            {\n-                Type type = pt.getActualTypeArguments()[0];\n-                return toList( converterFor( type ), type );\n-            }\n-            else if ( rawType == Map.class )\n-            {\n-                Type type = pt.getActualTypeArguments()[0];\n-                if ( type != String.class )\n-                {\n-                    throw new ProcedureException(\n-                            Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Maps are required to have `String` keys - but this map has `%s` keys.\",\n-                            type.getTypeName() );\n-                }\n-                return TO_MAP;\n-            }\n+          throw new ProcedureException(\n+              Status.Procedure.ProcedureRegistrationFailed,\n+              \"Maps are required to have `String` keys - but this map has `%s` keys.\",\n+              type.getTypeName());\n         }\n-        throw javaToNeoMappingError( javaType );\n+        return TO_MAP;\n+      }\n     }\n+    throw javaToNeoMappingError(javaType);\n+  }\n+\n+  void registerType(Class<?> javaClass, DefaultValueConverter toNeo)\n+  {\n+    javaToNeo.put(javaClass, toNeo);\n+  }\n \n-    void registerType( Class<?> javaClass, DefaultValueConverter toNeo )\n+  private static final DefaultValueConverter TO_ANY = new DefaultValueConverter(NTAny, Object.class);\n+  private static final DefaultValueConverter TO_STRING = new DefaultValueConverter(NTString, String.class,\n+      DefaultParameterValue::ntString);\n+  private static final DefaultValueConverter TO_INTEGER = new DefaultValueConverter(NTInteger, Long.class, s ->\n+      ntInteger(parseLong(s)));\n+  private static final DefaultValueConverter TO_FLOAT = new DefaultValueConverter(NTFloat, Double.class, s ->\n+      ntFloat(parseDouble(s)));\n+  private static final DefaultValueConverter TO_NUMBER = new DefaultValueConverter(NTNumber, Number.class, s ->\n+  {\n+    try\n     {\n-        javaToNeo.put( javaClass, toNeo );\n+      return ntInteger(parseLong(s));\n+    } catch (NumberFormatException e)\n+    {\n+      return ntFloat(parseDouble(s));\n     }\n+  });\n+  private static final DefaultValueConverter TO_BOOLEAN = new DefaultValueConverter(NTBoolean, Boolean.class, s ->\n+      ntBoolean(parseBoolean(s)));\n+  private static final DefaultValueConverter TO_MAP =\n+      new DefaultValueConverter(NTMap, Map.class, new MapConverter());\n+  private static final DefaultValueConverter TO_LIST = toList(TO_ANY, Object.class);\n+  private final DefaultValueConverter TO_BYTEARRAY = new DefaultValueConverter(NTByteArray, byte[].class, new ByteArrayConverter());\n \n-    private static final DefaultValueConverter TO_ANY = new DefaultValueConverter( NTAny, Object.class );\n-    private static final DefaultValueConverter TO_STRING = new DefaultValueConverter( NTString, String.class,\n-            DefaultParameterValue::ntString );\n-    private static final DefaultValueConverter TO_INTEGER = new DefaultValueConverter( NTInteger, Long.class, s ->\n-            ntInteger( parseLong( s ) ) );\n-    private static final DefaultValueConverter TO_FLOAT = new DefaultValueConverter( NTFloat, Double.class, s ->\n-            ntFloat( parseDouble( s ) ) );\n-    private static final DefaultValueConverter TO_NUMBER = new DefaultValueConverter( NTNumber, Number.class, s ->\n-    {\n-        try\n-        {\n-            return ntInteger( parseLong( s ) );\n-        }\n-        catch ( NumberFormatException e )\n-        {\n-            return ntFloat( parseDouble( s ) );\n-        }\n-    } );\n-    private static final DefaultValueConverter TO_BOOLEAN = new DefaultValueConverter( NTBoolean, Boolean.class, s ->\n-            ntBoolean( parseBoolean( s ) ) );\n-    private static final DefaultValueConverter TO_MAP =\n-            new DefaultValueConverter( NTMap, Map.class, new MapConverter() );\n-    private static final DefaultValueConverter TO_LIST = toList( TO_ANY, Object.class );\n-    private final DefaultValueConverter TO_BYTEARRAY = new DefaultValueConverter( NTByteArray, byte[].class, new ByteArrayConverter() );\n+  private static DefaultValueConverter toList(DefaultValueConverter inner, Type type)\n+  {\n+    return new DefaultValueConverter(NTList(inner.type()), List.class, new ListConverter(type, inner.type()));\n+  }\n+\n+  private ProcedureException javaToNeoMappingError(Type cls)\n+  {\n+    List<String> types = Iterables.asList(javaToNeo.keySet())\n+        .stream()\n+        .map(Type::getTypeName)\n+        .sorted(String::compareTo)\n+        .collect(Collectors.toList());\n \n-    private static DefaultValueConverter toList( DefaultValueConverter inner, Type type )\n+    return new ProcedureException(Status.Statement.TypeError,\n+        \"Don't know how to map `%s` to the Neo4j Type System.%n\" +\n+            \"Please refer to to the documentation for full details.%n\" +\n+            \"For your reference, known types are: %s\", cls.getTypeName(), types);\n+  }\n+\n+  public static final class DefaultValueConverter extends TypeChecker\n+  {\n+    private final Function<String, DefaultParameterValue> parser;\n+\n+    public DefaultValueConverter(AnyType type, Class<?> javaClass)\n     {\n-        return new DefaultValueConverter( NTList( inner.type() ), List.class, new ListConverter( type, inner.type() ) );\n+      this(type, javaClass, nullParser(javaClass, type));\n     }\n \n-    private ProcedureException javaToNeoMappingError( Type cls )\n+    private DefaultValueConverter(AnyType type, Class<?> javaClass, Function<String, DefaultParameterValue> parser)\n     {\n-        List<String> types = Iterables.asList( javaToNeo.keySet() )\n-                .stream()\n-                .map( Type::getTypeName )\n-                .sorted( String::compareTo )\n-                .collect( Collectors.toList() );\n-\n-        return new ProcedureException( Status.Statement.TypeError,\n-                \"Don't know how to map `%s` to the Neo4j Type System.%n\" +\n-                        \"Please refer to to the documentation for full details.%n\" +\n-                        \"For your reference, known types are: %s\", cls.getTypeName(), types );\n+      super(type, javaClass);\n+      this.parser = parser;\n     }\n \n-    public static final class DefaultValueConverter extends TypeChecker\n+    public Optional<DefaultParameterValue> defaultValue(Name parameter) throws ProcedureException\n     {\n-        private final Function<String,DefaultParameterValue> parser;\n-\n-        public DefaultValueConverter( AnyType type, Class<?> javaClass )\n+      String defaultValue = parameter.defaultValue();\n+      if (defaultValue.equals(Name.DEFAULT_VALUE))\n+      {\n+        return Optional.empty();\n+      } else\n+      {\n+        try\n         {\n-            this( type, javaClass, nullParser( javaClass, type ) );\n-        }\n-\n-        private DefaultValueConverter( AnyType type, Class<?> javaClass, Function<String,DefaultParameterValue> parser )\n+          return Optional.of(parser.apply(defaultValue));\n+        } catch (Exception e)\n         {\n-            super( type, javaClass );\n-            this.parser = parser;\n+          throw new ProcedureException(Status.Procedure.ProcedureRegistrationFailed,\n+              \"Default value `%s` could not be parsed as a %s\", parameter.defaultValue(),\n+              javaClass.getSimpleName());\n         }\n+      }\n+    }\n \n-        public Optional<DefaultParameterValue> defaultValue( Name parameter ) throws ProcedureException\n+    private static Function<String, DefaultParameterValue> nullParser(Class<?> javaType, Neo4jTypes.AnyType neoType)\n+    {\n+      return s ->\n+      {\n+        if (s.equalsIgnoreCase(\"null\"))\n         {\n-            String defaultValue = parameter.defaultValue();\n-            if ( defaultValue.equals( Name.DEFAULT_VALUE ) )\n-            {\n-                return Optional.empty();\n-            }\n-            else\n-            {\n-                try\n-                {\n-                    return Optional.of( parser.apply( defaultValue ) );\n-                }\n-                catch ( Exception e )\n-                {\n-                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Default value `%s` could not be parsed as a %s\", parameter.defaultValue(),\n-                            javaClass.getSimpleName() );\n-                }\n-            }\n-        }\n-\n-        private static Function<String,DefaultParameterValue> nullParser( Class<?> javaType, Neo4jTypes.AnyType neoType )\n+          return nullValue(neoType);\n+        } else\n         {\n-            return s ->\n-            {\n-                if ( s.equalsIgnoreCase( \"null\" ) )\n-                {\n-                    return nullValue( neoType );\n-                }\n-                else\n-                {\n-                    throw new IllegalArgumentException( String.format(\n-                            \"A %s can only have a `defaultValue = \\\"null\\\"\",\n-                            javaType.getSimpleName() ) );\n-                }\n-            };\n+          throw new IllegalArgumentException(String.format(\n+              \"A %s can only have a `defaultValue = \\\"null\\\"\",\n+              javaType.getSimpleName()));\n         }\n+      };\n     }\n+  }\n }\n",
            "diff_size": 302
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "230",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 249).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "264",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2908/TypeMappers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2908/TypeMappers.java\nindex 09f0353c2f6..41142799b2e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2908/TypeMappers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2908/TypeMappers.java\n@@ -93,9 +93,7 @@ public class TypeMappers extends DefaultValueMapper\n             {\n                 return javaValue;\n             }\n-            throw new ProcedureException( Status.Procedure.ProcedureCallFailed,\n-                    \"Expected `%s` to be a `%s`, found `%s`.\", javaValue, javaClass.getSimpleName(),\n-                    javaValue.getClass() );\n+            throw new ProcedureException( Status.Procedure.ProcedureCallFailed, \"Expected `%s` to be a `%s`, found `%s`.\", javaValue, javaClass.getSimpleName(), javaValue.getClass() );\n         }\n \n         public AnyValue toValue( Object obj )\n@@ -171,8 +169,7 @@ public class TypeMappers extends DefaultValueMapper\n         {\n             ParameterizedType pt = (ParameterizedType) javaType;\n             Type rawType = pt.getRawType();\n-\n-            if ( rawType == List.class )\n+if ( rawType == List.class )\n             {\n                 Type type = pt.getActualTypeArguments()[0];\n                 return toList( converterFor( type ), type );\n@@ -182,12 +179,11 @@ public class TypeMappers extends DefaultValueMapper\n                 Type type = pt.getActualTypeArguments()[0];\n                 if ( type != String.class )\n                 {\n-                    throw new ProcedureException(\n-                            Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Maps are required to have `String` keys - but this map has `%s` keys.\",\n+                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Maps are required to have `String` keys - but this map has `%s` keys.\",\n                             type.getTypeName() );\n                 }\n-                return TO_MAP;\n+\n+return TO_MAP;\n             }\n         }\n         throw javaToNeoMappingError( javaType );\n@@ -201,11 +197,12 @@ public class TypeMappers extends DefaultValueMapper\n     private static final DefaultValueConverter TO_ANY = new DefaultValueConverter( NTAny, Object.class );\n     private static final DefaultValueConverter TO_STRING = new DefaultValueConverter( NTString, String.class,\n             DefaultParameterValue::ntString );\n-    private static final DefaultValueConverter TO_INTEGER = new DefaultValueConverter( NTInteger, Long.class, s ->\n-            ntInteger( parseLong( s ) ) );\n-    private static final DefaultValueConverter TO_FLOAT = new DefaultValueConverter( NTFloat, Double.class, s ->\n-            ntFloat( parseDouble( s ) ) );\n-    private static final DefaultValueConverter TO_NUMBER = new DefaultValueConverter( NTNumber, Number.class, s ->\n+\n+private static final DefaultValueConverter TO_INTEGER = new DefaultValueConverter( NTInteger, Long.class, s -> ntInteger( parseLong( s ) ) );\n+\n+private static final DefaultValueConverter TO_FLOAT = new DefaultValueConverter( NTFloat, Double.class, s -> ntFloat( parseDouble( s ) ) );\n+\n+private static final DefaultValueConverter TO_NUMBER = new DefaultValueConverter( NTNumber, Number.class, s ->\n     {\n         try\n         {\n@@ -216,11 +213,11 @@ public class TypeMappers extends DefaultValueMapper\n             return ntFloat( parseDouble( s ) );\n         }\n     } );\n-    private static final DefaultValueConverter TO_BOOLEAN = new DefaultValueConverter( NTBoolean, Boolean.class, s ->\n-            ntBoolean( parseBoolean( s ) ) );\n-    private static final DefaultValueConverter TO_MAP =\n-            new DefaultValueConverter( NTMap, Map.class, new MapConverter() );\n-    private static final DefaultValueConverter TO_LIST = toList( TO_ANY, Object.class );\n+    private static final DefaultValueConverter TO_BOOLEAN = new DefaultValueConverter( NTBoolean, Boolean.class, s -> ntBoolean( parseBoolean( s ) ) );\n+\n+private static final DefaultValueConverter TO_MAP = new DefaultValueConverter( NTMap, Map.class, new MapConverter() );\n+\n+private static final DefaultValueConverter TO_LIST = toList( TO_ANY, Object.class );\n     private final DefaultValueConverter TO_BYTEARRAY = new DefaultValueConverter( NTByteArray, byte[].class, new ByteArrayConverter() );\n \n     private static DefaultValueConverter toList( DefaultValueConverter inner, Type type )\n@@ -230,16 +227,8 @@ public class TypeMappers extends DefaultValueMapper\n \n     private ProcedureException javaToNeoMappingError( Type cls )\n     {\n-        List<String> types = Iterables.asList( javaToNeo.keySet() )\n-                .stream()\n-                .map( Type::getTypeName )\n-                .sorted( String::compareTo )\n-                .collect( Collectors.toList() );\n-\n-        return new ProcedureException( Status.Statement.TypeError,\n-                \"Don't know how to map `%s` to the Neo4j Type System.%n\" +\n-                        \"Please refer to to the documentation for full details.%n\" +\n-                        \"For your reference, known types are: %s\", cls.getTypeName(), types );\n+        List<String> types = Iterables.asList( javaToNeo.keySet() ).stream().map( Type::getTypeName ).sorted( String::compareTo ).collect( Collectors.toList() );\n+return new ProcedureException( Status.Statement.TypeError, \"Don't know how to map `%s` to the Neo4j Type System.%n\" + \"Please refer to to the documentation for full details.%n\" + \"For your reference, known types are: %s\", cls.getTypeName(), types );\n     }\n \n     public static final class DefaultValueConverter extends TypeChecker\n@@ -272,10 +261,8 @@ public class TypeMappers extends DefaultValueMapper\n                 }\n                 catch ( Exception e )\n                 {\n-                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed,\n-                            \"Default value `%s` could not be parsed as a %s\", parameter.defaultValue(),\n-                            javaClass.getSimpleName() );\n-                }\n+                    throw new ProcedureException( Status.Procedure.ProcedureRegistrationFailed, \"Default value `%s` could not be parsed as a %s\", parameter.defaultValue(), javaClass.getSimpleName() );\n+    }\n             }\n         }\n \n@@ -289,11 +276,10 @@ public class TypeMappers extends DefaultValueMapper\n                 }\n                 else\n                 {\n-                    throw new IllegalArgumentException( String.format(\n-                            \"A %s can only have a `defaultValue = \\\"null\\\"\",\n+                    throw new IllegalArgumentException( String.format( \"A %s can only have a `defaultValue = \\\"null\\\"\",\n                             javaType.getSimpleName() ) );\n-                }\n+    }\n             };\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}