{
    "project_name": "seedstack-business",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "8",
                "column": "1",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n */\npackage org.seedstack.business.specification;\n\nimport java.util.regex.Pattern;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/66/StringMatchingSpecification.java\nindex 0afb7eb9bca..74d862382a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler/66/StringMatchingSpecification.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification;\n \n import java.util.regex.Pattern;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/66/StringMatchingSpecification.java\nindex 0afb7eb9bca..74d862382a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/intellij/66/StringMatchingSpecification.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification;\n \n import java.util.regex.Pattern;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "25",
                    "column": "1",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "57",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "column": "5",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "column": "5",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/66/StringMatchingSpecification.java\nindex 0afb7eb9bca..e72417d7335 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/naturalize/66/StringMatchingSpecification.java\n@@ -21,7 +21,8 @@ public class StringMatchingSpecification extends StringSpecification {\n      * Wildcard for matching any zero-length or longer character sequence.\n      */\n     public static final String MULTI_CHARACTER_WILDCARD = \"*\";\n-    /**\n+\n+/**\n      * Wildcard for matching any character.\n      */\n     public static final String SINGLE_CHARACTER_WILDCARD = \"?\";\n@@ -53,21 +54,21 @@ public class StringMatchingSpecification extends StringSpecification {\n             if (ignoringCasePattern == null) {\n                 ignoringCasePattern = Pattern.compile(expectedString.replace(MULTI_CHARACTER_WILDCARD, \".*\")\n                         .replace(SINGLE_CHARACTER_WILDCARD, \".\"), Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n-            }\n+    }\n             return ignoringCasePattern.matcher(candidateString)\n                     .matches();\n-        } else {\n+    } else {\n             if (pattern == null) {\n                 pattern = Pattern.compile(expectedString.replace(MULTI_CHARACTER_WILDCARD, \".*\")\n                         .replace(SINGLE_CHARACTER_WILDCARD, \".\"));\n-            }\n+    }\n             return pattern.matcher(candidateString)\n                     .matches();\n-        }\n+    }\n     }\n \n     @Override\n     public String toString() {\n         return \"=~ \" + String.valueOf(expectedString);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "column": "1",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "41",
                    "column": "63",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 62, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "column": "80",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 79, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "61",
                    "column": "49",
                    "severity": "warning",
                    "message": "WhitespaceAround: '|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "62",
                    "column": "45",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 44, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "69",
                    "column": "33",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 32, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "column": "21",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/66/StringMatchingSpecification.java\nindex 0afb7eb9bca..edfcff34d1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/codebuff/66/StringMatchingSpecification.java\n@@ -15,11 +15,14 @@ import java.util.regex.Pattern;\n  * supports the following wildcards: <ul> <li>'{@literal *}' which matches any zero-length or longer\n  * character sequence,</li> <li>'{@literal ?}' which matches any character.</li> </ul>\n  */\n+\n+\n public class StringMatchingSpecification extends StringSpecification {\n \n     /**\n      * Wildcard for matching any zero-length or longer character sequence.\n      */\n+\n     public static final String MULTI_CHARACTER_WILDCARD = \"*\";\n     /**\n      * Wildcard for matching any character.\n@@ -33,8 +36,9 @@ public class StringMatchingSpecification extends StringSpecification {\n      *\n      * @param expectedString the string that the candidate is expected to match.\n      */\n+\n     public StringMatchingSpecification(String expectedString) {\n-        super(expectedString);\n+                                                              super(expectedString);\n     }\n \n     /**\n@@ -43,31 +47,33 @@ public class StringMatchingSpecification extends StringSpecification {\n      * @param expectedString the string that the candidate is expected to match.\n      * @param options        the matching options.\n      */\n+\n     public StringMatchingSpecification(String expectedString, Options options) {\n-        super(expectedString, options);\n+                                                                               super(expectedString, options);\n     }\n \n     @Override\n     protected boolean isSatisfiedByString(String candidateString) {\n         if (options.isIgnoringCase()) {\n-            if (ignoringCasePattern == null) {\n+            if(ignoringCasePattern == null) {\n                 ignoringCasePattern = Pattern.compile(expectedString.replace(MULTI_CHARACTER_WILDCARD, \".*\")\n-                        .replace(SINGLE_CHARACTER_WILDCARD, \".\"), Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n-            }\n+                    .replace(SINGLE_CHARACTER_WILDCARD, \".\"),\n+                        Pattern.CASE_INSENSITIVE| Pattern.UNICODE_CASE);\n+                                            }\n             return ignoringCasePattern.matcher(candidateString)\n-                    .matches();\n+                .matches();\n         } else {\n-            if (pattern == null) {\n+            if(pattern == null) {\n                 pattern = Pattern.compile(expectedString.replace(MULTI_CHARACTER_WILDCARD, \".*\")\n-                        .replace(SINGLE_CHARACTER_WILDCARD, \".\"));\n-            }\n+                    .replace(SINGLE_CHARACTER_WILDCARD, \".\"));\n+                                }\n             return pattern.matcher(candidateString)\n-                    .matches();\n+                .matches();\n         }\n     }\n \n     @Override\n     public String toString() {\n-        return \"=~ \" + String.valueOf(expectedString);\n+        return \"=~ \"+ String.valueOf(expectedString);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/66/StringMatchingSpecification.java\nindex 0afb7eb9bca..74d862382a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_random/66/StringMatchingSpecification.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification;\n \n import java.util.regex.Pattern;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/66/StringMatchingSpecification.java\nindex 0afb7eb9bca..74d862382a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/errored/1/66/StringMatchingSpecification.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/seedstack-business/styler_three_grams/66/StringMatchingSpecification.java\n@@ -5,6 +5,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package org.seedstack.business.specification;\n \n import java.util.regex.Pattern;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}