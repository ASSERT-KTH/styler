{
    "project_name": "Angel-ML-angel",
    "error_id": "961",
    "information": {
        "errors": [
            {
                "line": "107",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n        if (value > 1e-10 && point < Integer.MAX_VALUE) {\n          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n        }\n        byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n        buf.writeBytes(tmp);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/961/HistAggrFunc.java\nindex 3f39fff07ad..10726de6581 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/961/HistAggrFunc.java\n@@ -104,7 +104,8 @@ public class HistAggrFunc extends UpdateFunc {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n         if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n+            point+=(point < maxPoint&&Math\n+        .random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n         }\n         byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n         buf.writeBytes(tmp);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/961/HistAggrFunc.java\nindex 3f39fff07ad..a3d79dd4b19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/961/HistAggrFunc.java\n@@ -19,7 +19,7 @@ import java.util.List;\n public class HistAggrFunc extends UpdateFunc {\n \n   public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                       float[] array, int bitsPerItem) {\n+                      float[] array, int bitsPerItem) {\n     super(new HistAggrParam(matrixId, updateClock, rowId, array, bitsPerItem));\n   }\n \n@@ -58,7 +58,7 @@ public class HistAggrFunc extends UpdateFunc {\n           throw new AngelException(\"Wrong rowId\");\n         }\n         partParams.add(new HistAggrPartitionParam(matrixId, partKey, updateClock,\n-          rowId, array, (int) partKey.getStartCol(), (int) partKey.getEndCol(), bitsPerItem));\n+            rowId, array, (int) partKey.getStartCol(), (int) partKey.getEndCol(), bitsPerItem));\n       }\n       return partParams;\n     }\n@@ -104,7 +104,8 @@ public class HistAggrFunc extends UpdateFunc {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n         if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n+          point +=\n+              (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n         }\n         byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n         buf.writeBytes(tmp);\n@@ -147,7 +148,7 @@ public class HistAggrFunc extends UpdateFunc {\n       return rec;\n     }\n \n-    public static long byte2long(byte[] buffer){\n+    public static long byte2long(byte[] buffer) {\n       long rec = 0;\n       boolean isNegative = (buffer[0] & 0x80) == 0x80;\n       buffer[0] &= 0x7F;  // set the negative flag to 0\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 10, indentation should be the same level as line 103.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 6, indentation should be the same level as line 153.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/961/HistAggrFunc.java\nindex 3f39fff07ad..1c4be205f13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/961/HistAggrFunc.java\n@@ -18,14 +18,12 @@ import java.util.List;\n \n public class HistAggrFunc extends UpdateFunc {\n \n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                       float[] array, int bitsPerItem) {\n-    super(new HistAggrParam(matrixId, updateClock, rowId, array, bitsPerItem));\n+  public HistAggrFunc(int matrixId, boolean updateClock, int rowId, float[] array, int bitsPerItem) {\n+  super(new HistAggrParam(matrixId, updateClock, rowId, array, bitsPerItem));\n   }\n \n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                      DenseFloatVector vec, int bitsPerItem) {\n-    super(new HistAggrParam(matrixId, updateClock, rowId, vec.getValues(), bitsPerItem));\n+  public HistAggrFunc(int matrixId, boolean updateClock, int rowId, DenseFloatVector vec, int bitsPerItem) {\n+  super(new HistAggrParam(matrixId, updateClock, rowId, vec.getValues(), bitsPerItem));\n   }\n \n   public HistAggrFunc() {\n@@ -38,9 +36,8 @@ public class HistAggrFunc extends UpdateFunc {\n     private final float[] array;\n     private final int bitsPerItem;\n \n-    public HistAggrParam(int matrixId, boolean updateClock,\n-                         int rowId, float[] array, int bitsPerItem) {\n-      super(matrixId, updateClock);\n+    public HistAggrParam(int matrixId, boolean updateClock, int rowId, float[] array, int bitsPerItem) {\n+  super(matrixId, updateClock);\n       this.rowId = rowId;\n       this.array = array;\n       this.bitsPerItem = bitsPerItem;\n@@ -72,9 +69,8 @@ public class HistAggrFunc extends UpdateFunc {\n     private int end;\n     private int bitsPerItem;\n \n-    public HistAggrPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n-                                  int rowId, float[] array, int start, int end, int bitsPerItem) {\n-      super(matrixId, partKey, updateClock);\n+    public HistAggrPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock, int rowId, float[] array, int start, int end, int bitsPerItem) {\n+  super(matrixId, partKey, updateClock);\n       this.rowId = rowId;\n       this.array = array;\n       this.start = start;\n@@ -104,7 +100,8 @@ public class HistAggrFunc extends UpdateFunc {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n         if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n+          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;\n+// add Bernoulli random variable\n         }\n         byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n         buf.writeBytes(tmp);\n@@ -147,10 +144,11 @@ public class HistAggrFunc extends UpdateFunc {\n       return rec;\n     }\n \n-    public static long byte2long(byte[] buffer){\n+    public static long byte2long(byte[] buffer) {\n       long rec = 0;\n       boolean isNegative = (buffer[0] & 0x80) == 0x80;\n-      buffer[0] &= 0x7F;  // set the negative flag to 0\n+      buffer[0] &= 0x7F;\n+// set the negative flag to 0\n \n       int base = 0;\n       for (int i = buffer.length - 1; i >= 0; i--) {\n@@ -208,4 +206,4 @@ public class HistAggrFunc extends UpdateFunc {\n       row.getLock().writeLock().unlock();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/961/HistAggrFunc.java\nindex 3f39fff07ad..3af6e4d0639 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/961/HistAggrFunc.java\n@@ -11,20 +11,17 @@ import com.tencent.angel.ps.impl.matrix.ServerPartition;\n import com.tencent.angel.ps.impl.matrix.ServerRow;\n import com.tencent.angel.psagent.PSAgentContext;\n import io.netty.buffer.ByteBuf;\n-\n import java.nio.FloatBuffer;\n import java.util.ArrayList;\n import java.util.List;\n \n public class HistAggrFunc extends UpdateFunc {\n \n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                       float[] array, int bitsPerItem) {\n+  public HistAggrFunc(int matrixId, boolean updateClock, int rowId, float[] array, int bitsPerItem) {\n     super(new HistAggrParam(matrixId, updateClock, rowId, array, bitsPerItem));\n   }\n \n-  public HistAggrFunc(int matrixId, boolean updateClock, int rowId,\n-                      DenseFloatVector vec, int bitsPerItem) {\n+  public HistAggrFunc(int matrixId, boolean updateClock, int rowId, DenseFloatVector vec, int bitsPerItem) {\n     super(new HistAggrParam(matrixId, updateClock, rowId, vec.getValues(), bitsPerItem));\n   }\n \n@@ -32,14 +29,13 @@ public class HistAggrFunc extends UpdateFunc {\n     super(null);\n   }\n \n-\n   public static class HistAggrParam extends UpdateParam {\n+\n     private final int rowId;\n     private final float[] array;\n     private final int bitsPerItem;\n \n-    public HistAggrParam(int matrixId, boolean updateClock,\n-                         int rowId, float[] array, int bitsPerItem) {\n+    public HistAggrParam(int matrixId, boolean updateClock, int rowId, float[] array, int bitsPerItem) {\n       super(matrixId, updateClock);\n       this.rowId = rowId;\n       this.array = array;\n@@ -48,23 +44,24 @@ public class HistAggrFunc extends UpdateFunc {\n \n     @Override\n     public List<PartitionUpdateParam> split() {\n-      List<PartitionKey> partList = PSAgentContext.get()\n-          .getMatrixMetaManager().getPartitions(matrixId, rowId);\n-\n+      List<PartitionKey> partList = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowId);\n       int size = partList.size();\n       List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n       for (PartitionKey partKey : partList) {\n         if (rowId < partKey.getStartRow() || rowId >= partKey.getEndRow()) {\n           throw new AngelException(\"Wrong rowId\");\n         }\n-        partParams.add(new HistAggrPartitionParam(matrixId, partKey, updateClock,\n-          rowId, array, (int) partKey.getStartCol(), (int) partKey.getEndCol(), bitsPerItem));\n+        partParams.add(new HistAggrPartitionParam(matrixId, partKey, updateClock, rowId, array,\n+          (int) partKey.getStartCol(),\n+          (int) partKey.getEndCol(), bitsPerItem));\n       }\n       return partParams;\n     }\n+\n   }\n \n   public static class HistAggrPartitionParam extends PartitionUpdateParam {\n+\n     private int rowId;\n     private float[] array;\n     private float[] slice;\n@@ -72,8 +69,10 @@ public class HistAggrFunc extends UpdateFunc {\n     private int end;\n     private int bitsPerItem;\n \n-    public HistAggrPartitionParam(int matrixId, PartitionKey partKey, boolean updateClock,\n-                                  int rowId, float[] array, int start, int end, int bitsPerItem) {\n+    public HistAggrPartitionParam(int matrixId,\n+                                  PartitionKey partKey,\n+                                  boolean updateClock, int rowId,\n+                                  float[] array, int start, int end, int bitsPerItem) {\n       super(matrixId, partKey, updateClock);\n       this.rowId = rowId;\n       this.array = array;\n@@ -99,6 +98,7 @@ public class HistAggrFunc extends UpdateFunc {\n       }\n       buf.writeDouble(maxAbs);\n       // compress data\n+\n       long maxPoint = (long) Math.pow(2, bitsPerItem - 1) - 1;\n       for (int i = start; i < end; i++) {\n         double value = array[i];\n@@ -106,6 +106,7 @@ public class HistAggrFunc extends UpdateFunc {\n         if (value > 1e-10 && point < Integer.MAX_VALUE) {\n           point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n         }\n+\n         byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n         buf.writeBytes(tmp);\n       }\n@@ -115,6 +116,7 @@ public class HistAggrFunc extends UpdateFunc {\n     public void deserialize(ByteBuf buf) {\n       super.deserialize(buf);\n       rowId = buf.readInt();\n+\n       int length = buf.readInt();\n       bitsPerItem = buf.readInt();\n       double maxAbs = buf.readDouble();\n@@ -123,6 +125,7 @@ public class HistAggrFunc extends UpdateFunc {\n       slice = new float[length];\n       for (int i = 0; i < length; i++) {\n         buf.readBytes(itemBytes);\n+\n         long point = byte2long(itemBytes);\n         double parsedValue = (double) point / (double) maxPoint * maxAbs;\n         slice[i] = (float) parsedValue;\n@@ -136,18 +139,20 @@ public class HistAggrFunc extends UpdateFunc {\n \n     public static byte[] long2Byte(long value, int size, boolean isNeg) {\n       assert Math.pow(2, 8 * size - 1) > value;\n+\n       byte[] rec = new byte[size];\n       for (int i = 0; i < size; i++) {\n         rec[size - i - 1] = (byte) value;\n         value >>>= 8;\n       }\n+\n       if (isNeg) {\n         rec[0] |= 0x80;\n       }\n       return rec;\n     }\n \n-    public static long byte2long(byte[] buffer){\n+    public static long byte2long(byte[] buffer) {\n       long rec = 0;\n       boolean isNegative = (buffer[0] & 0x80) == 0x80;\n       buffer[0] &= 0x7F;  // set the negative flag to 0\n@@ -162,7 +167,6 @@ public class HistAggrFunc extends UpdateFunc {\n       if (isNegative) {\n         rec = -1 * rec;\n       }\n-\n       return rec;\n     }\n \n@@ -173,14 +177,12 @@ public class HistAggrFunc extends UpdateFunc {\n     public float[] getSlice() {\n       return slice;\n     }\n+\n   }\n \n   @Override\n   public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part =\n-        psContext.getMatrixStorageManager()\n-            .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n-\n+    ServerPartition part = psContext.getMatrixStorageManager().getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n     if (part != null) {\n       HistAggrPartitionParam param = (HistAggrPartitionParam) partParam;\n       ServerRow row = part.getRow(param.getRowId());\n@@ -208,4 +210,5 @@ public class HistAggrFunc extends UpdateFunc {\n       row.getLock().writeLock().unlock();\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/961/HistAggrFunc.java\nindex 3f39fff07ad..10726de6581 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/961/HistAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/961/HistAggrFunc.java\n@@ -104,7 +104,8 @@ public class HistAggrFunc extends UpdateFunc {\n         double value = array[i];\n         long point = (long) Math.floor(Math.abs(value) / maxAbs * maxPoint);\n         if (value > 1e-10 && point < Integer.MAX_VALUE) {\n-          point += (point < maxPoint && Math.random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n+            point+=(point < maxPoint&&Math\n+        .random() > 0.5) ? 1 : 0;  // add Bernoulli random variable\n         }\n         byte[] tmp = long2Byte(point, bitsPerItem / 8, value < -1e-10);\n         buf.writeBytes(tmp);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}