{
    "project_name": "neo4j-neo4j",
    "error_id": "1042",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1042/IndexSizes.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1042/IndexSizes.java\nindex 08f77d9295c..ddf411c9249 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1042/IndexSizes.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1042/IndexSizes.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checker;\n \n import java.util.ArrayList;\n@@ -46,12 +47,12 @@ class IndexSizes\n \n     private final ParallelExecution execution;\n     private final IndexAccessors indexAccessors;\n-    private final ConcurrentMap<IndexDescriptor,Long> nodeIndexSizes = new ConcurrentHashMap<>();\n-    private final ConcurrentMap<IndexDescriptor,Long> relationshipIndexSizes = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<IndexDescriptor, Long> nodeIndexSizes = new ConcurrentHashMap<>();\n+    private final ConcurrentMap<IndexDescriptor, Long> relationshipIndexSizes = new ConcurrentHashMap<>();\n     private final long highNodeId;\n     private final PageCacheTracer pageCacheTracer;\n \n-    IndexSizes( ParallelExecution execution, IndexAccessors indexAccessors, long highNodeId, PageCacheTracer pageCacheTracer )\n+    IndexSizes(ParallelExecution execution, IndexAccessors indexAccessors, long highNodeId, PageCacheTracer pageCacheTracer)\n     {\n         this.execution = execution;\n         this.indexAccessors = indexAccessors;\n@@ -61,74 +62,74 @@ class IndexSizes\n \n     void initialize() throws Exception\n     {\n-        calculateSizes( EntityType.NODE, nodeIndexSizes );\n-        calculateSizes( EntityType.RELATIONSHIP, relationshipIndexSizes );\n+        calculateSizes(EntityType.NODE, nodeIndexSizes);\n+        calculateSizes(EntityType.RELATIONSHIP, relationshipIndexSizes);\n     }\n \n-    private void calculateSizes( EntityType entityType, ConcurrentMap<IndexDescriptor,Long> indexSizes ) throws Exception\n+    private void calculateSizes(EntityType entityType, ConcurrentMap<IndexDescriptor, Long> indexSizes) throws Exception\n     {\n-        List<IndexDescriptor> indexes = indexAccessors.onlineRules( entityType );\n-        execution.run( \"Estimate index sizes\", indexes.stream().map( index -> (ThrowingRunnable) () ->\n+        List<IndexDescriptor> indexes = indexAccessors.onlineRules(entityType);\n+        execution.run(\"Estimate index sizes\", indexes.stream().map(index -> (ThrowingRunnable) () ->\n         {\n-            try ( var cursorTracer = pageCacheTracer.createPageCursorTracer( SIZE_CALCULATOR_TAG ) )\n+            try (var cursorTracer = pageCacheTracer.createPageCursorTracer(SIZE_CALCULATOR_TAG))\n             {\n-                IndexAccessor accessor = indexAccessors.accessorFor( index );\n-                indexSizes.put( index, accessor.estimateNumberOfEntries( cursorTracer ) );\n+                IndexAccessor accessor = indexAccessors.accessorFor(index);\n+                indexSizes.put(index, accessor.estimateNumberOfEntries(cursorTracer));\n             }\n-        } ).toArray( ThrowingRunnable[]::new ) );\n+        }).toArray(ThrowingRunnable[]::new));\n     }\n \n-    private List<IndexDescriptor> getAllIndexes( EntityType entityType )\n+    private List<IndexDescriptor> getAllIndexes(EntityType entityType)\n     {\n-        return new ArrayList<>( indexAccessors.onlineRules( entityType ) );\n+        return new ArrayList<>(indexAccessors.onlineRules(entityType));\n     }\n \n-    List<IndexDescriptor> smallIndexes( EntityType entityType )\n+    List<IndexDescriptor> smallIndexes(EntityType entityType)\n     {\n-        List<IndexDescriptor> smallIndexes = getAllIndexes( entityType );\n-        smallIndexes.removeAll( largeIndexes( entityType ) );\n+        List<IndexDescriptor> smallIndexes = getAllIndexes(entityType);\n+        smallIndexes.removeAll(largeIndexes(entityType));\n         return smallIndexes;\n     }\n \n-    List<IndexDescriptor> largeIndexes( EntityType entityType )\n+    List<IndexDescriptor> largeIndexes(EntityType entityType)\n     {\n-        List<IndexDescriptor> indexes = getAllIndexes( entityType );\n-        indexes.sort( Comparator.comparingLong( this::getEstimatedIndexSize ).reversed() );\n+        List<IndexDescriptor> indexes = getAllIndexes(entityType);\n+        indexes.sort(Comparator.comparingLong(this::getEstimatedIndexSize).reversed());\n         int threshold = 0;\n-        for ( IndexDescriptor index : indexes )\n+        for (IndexDescriptor index : indexes)\n         {\n-            if ( !hasValues( index ) )\n+            if (!hasValues(index))\n             {\n                 // Skip those that we cannot read values from. They should not be checked by the IndexChecker,\n                 // but the \"inefficient\" way of doing a lookup per node/index in NodeChecker instead\n                 continue;\n             }\n \n-            if ( getSizeFactor( index ) > SMALL_INDEX_FACTOR_THRESHOLD || threshold % IndexChecker.NUM_INDEXES_IN_CACHE != 0 )\n+            if (getSizeFactor(index) > SMALL_INDEX_FACTOR_THRESHOLD || threshold % IndexChecker.NUM_INDEXES_IN_CACHE != 0)\n             {\n                 threshold++;\n             }\n         }\n-        return indexes.subList( 0, threshold );\n+        return indexes.subList(0, threshold);\n     }\n \n-    static boolean hasValues( IndexDescriptor index )\n+    static boolean hasValues(IndexDescriptor index)\n     {\n         IndexCapability capabilities = index.getCapability();\n         ValueCategory[] categories = new ValueCategory[index.schema().getPropertyIds().length];\n-        Arrays.fill( categories, ValueCategory.UNKNOWN );\n-        return capabilities.valueCapability( categories ) == IndexValueCapability.YES && !index.schema().isFulltextSchemaDescriptor();\n+        Arrays.fill(categories, ValueCategory.UNKNOWN);\n+        return capabilities.valueCapability(categories) == IndexValueCapability.YES && !index.schema().isFulltextSchemaDescriptor();\n     }\n \n-    private double getSizeFactor( IndexDescriptor index )\n+    private double getSizeFactor(IndexDescriptor index)\n     {\n-        return (double) getEstimatedIndexSize( index ) / highNodeId;\n+        return (double) getEstimatedIndexSize(index) / highNodeId;\n     }\n \n-    long getEstimatedIndexSize( IndexDescriptor index )\n+    long getEstimatedIndexSize(IndexDescriptor index)\n     {\n         EntityType entityType = index.schema().entityType();\n-        ConcurrentMap<IndexDescriptor,Long> map = entityType == EntityType.NODE ? nodeIndexSizes : relationshipIndexSizes;\n-        return map.get( index );\n+        ConcurrentMap<IndexDescriptor, Long> map = entityType == EntityType.NODE ? nodeIndexSizes : relationshipIndexSizes;\n+        return map.get(index);\n     }\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}