{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1199",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1199/DegreeCounter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1199/DegreeCounter.java\nindex e8932e1e112..628b4286281 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1199/DegreeCounter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1199/DegreeCounter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.store;\n \n import org.neo4j.kernel.impl.store.InvalidRecordException;\n@@ -31,77 +32,77 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n \n class DegreeCounter\n {\n-    private DegreeCounter()\n+  private DegreeCounter()\n+  {\n+  }\n+\n+  static long countByFirstPrevPointer(long relationshipId, RecordCursor<RelationshipRecord> cursor,\n+                                      long nodeId, RelationshipRecord relationshipRecord)\n+  {\n+    if (relationshipId == Record.NO_NEXT_RELATIONSHIP.longValue())\n     {\n+      return 0;\n     }\n-\n-    static long countByFirstPrevPointer( long relationshipId, RecordCursor<RelationshipRecord> cursor,\n-            long nodeId, RelationshipRecord relationshipRecord )\n+    cursor.next(relationshipId, relationshipRecord, FORCE);\n+    if (relationshipRecord.getFirstNode() == nodeId)\n     {\n-        if ( relationshipId == Record.NO_NEXT_RELATIONSHIP.longValue() )\n-        {\n-            return 0;\n-        }\n-        cursor.next( relationshipId, relationshipRecord, FORCE );\n-        if ( relationshipRecord.getFirstNode() == nodeId )\n-        {\n-            return relationshipRecord.getFirstPrevRel();\n-        }\n-        if ( relationshipRecord.getSecondNode() == nodeId )\n-        {\n-            return relationshipRecord.getSecondPrevRel();\n-        }\n-        throw new InvalidRecordException( \"Node \" + nodeId + \" neither start nor end node of \" + relationshipRecord );\n+      return relationshipRecord.getFirstPrevRel();\n     }\n+    if (relationshipRecord.getSecondNode() == nodeId)\n+    {\n+      return relationshipRecord.getSecondPrevRel();\n+    }\n+    throw new InvalidRecordException(\"Node \" + nodeId + \" neither start nor end node of \" + relationshipRecord);\n+  }\n \n-    static int countRelationshipsInGroup( long groupId, Direction direction, Integer type, long nodeId,\n-            RelationshipRecord relationshipRecord, RelationshipGroupRecord groupRecord, RecordCursors cursors )\n+  static int countRelationshipsInGroup(long groupId, Direction direction, Integer type, long nodeId,\n+                                       RelationshipRecord relationshipRecord, RelationshipGroupRecord groupRecord, RecordCursors cursors)\n+  {\n+    int count = 0;\n+    while (groupId != Record.NO_NEXT_RELATIONSHIP.longValue())\n     {\n-        int count = 0;\n-        while ( groupId != Record.NO_NEXT_RELATIONSHIP.longValue() )\n+      boolean groupRecordInUse = cursors.relationshipGroup().next(groupId, groupRecord, FORCE);\n+      if (groupRecordInUse && (type == null || groupRecord.getType() == type))\n+      {\n+        count += nodeDegreeByDirection(direction, nodeId, relationshipRecord, groupRecord, cursors);\n+        if (type != null)\n         {\n-            boolean groupRecordInUse = cursors.relationshipGroup().next( groupId, groupRecord, FORCE );\n-            if ( groupRecordInUse && ( type == null || groupRecord.getType() == type ) )\n-            {\n-                count += nodeDegreeByDirection( direction, nodeId, relationshipRecord, groupRecord, cursors );\n-                if ( type != null )\n-                {\n-                    // we have read the only type we were interested on, so break the look\n-                    break;\n-                }\n-            }\n-            groupId = groupRecord.getNext();\n+          // we have read the only type we were interested on, so break the look\n+          break;\n         }\n-        return count;\n+      }\n+      groupId = groupRecord.getNext();\n     }\n+    return count;\n+  }\n \n-    private static long nodeDegreeByDirection( Direction direction, long nodeId,\n-            RelationshipRecord relationshipRecord, RelationshipGroupRecord groupRecord, RecordCursors cursors )\n+  private static long nodeDegreeByDirection(Direction direction, long nodeId,\n+                                            RelationshipRecord relationshipRecord, RelationshipGroupRecord groupRecord, RecordCursors cursors)\n+  {\n+    long firstLoop = groupRecord.getFirstLoop();\n+    RecordCursor<RelationshipRecord> cursor = cursors.relationship();\n+    long loopCount = countByFirstPrevPointer(firstLoop, cursor, nodeId, relationshipRecord);\n+    switch (direction)\n     {\n-        long firstLoop = groupRecord.getFirstLoop();\n-        RecordCursor<RelationshipRecord> cursor = cursors.relationship();\n-        long loopCount = countByFirstPrevPointer( firstLoop, cursor, nodeId, relationshipRecord );\n-        switch ( direction )\n-        {\n-        case OUTGOING:\n-        {\n-            long firstOut = groupRecord.getFirstOut();\n-            return countByFirstPrevPointer( firstOut, cursor, nodeId, relationshipRecord ) + loopCount;\n-        }\n-        case INCOMING:\n-        {\n-            long firstIn = groupRecord.getFirstIn();\n-            return countByFirstPrevPointer( firstIn, cursor, nodeId, relationshipRecord ) + loopCount;\n-        }\n-        case BOTH:\n-        {\n-            long firstOut = groupRecord.getFirstOut();\n-            long firstIn = groupRecord.getFirstIn();\n-            return countByFirstPrevPointer( firstOut, cursor, nodeId, relationshipRecord ) +\n-                    countByFirstPrevPointer( firstIn, cursor, nodeId, relationshipRecord ) + loopCount;\n-        }\n-        default:\n-            throw new IllegalArgumentException( direction.name() );\n-        }\n+      case OUTGOING:\n+      {\n+        long firstOut = groupRecord.getFirstOut();\n+        return countByFirstPrevPointer(firstOut, cursor, nodeId, relationshipRecord) + loopCount;\n+      }\n+      case INCOMING:\n+      {\n+        long firstIn = groupRecord.getFirstIn();\n+        return countByFirstPrevPointer(firstIn, cursor, nodeId, relationshipRecord) + loopCount;\n+      }\n+      case BOTH:\n+      {\n+        long firstOut = groupRecord.getFirstOut();\n+        long firstIn = groupRecord.getFirstIn();\n+        return countByFirstPrevPointer(firstOut, cursor, nodeId, relationshipRecord) +\n+            countByFirstPrevPointer(firstIn, cursor, nodeId, relationshipRecord) + loopCount;\n+      }\n+      default:\n+        throw new IllegalArgumentException(direction.name());\n     }\n+  }\n }\n",
            "diff_size": 91
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1199/DegreeCounter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1199/DegreeCounter.java\nindex e8932e1e112..9027695a605 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1199/DegreeCounter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1199/DegreeCounter.java\n@@ -47,7 +47,8 @@ class DegreeCounter\n         {\n             return relationshipRecord.getFirstPrevRel();\n         }\n-        if ( relationshipRecord.getSecondNode() == nodeId )\n+\n+if ( relationshipRecord.getSecondNode() == nodeId )\n         {\n             return relationshipRecord.getSecondPrevRel();\n         }\n@@ -72,7 +73,8 @@ class DegreeCounter\n             }\n             groupId = groupRecord.getNext();\n         }\n-        return count;\n+\n+return count;\n     }\n \n     private static long nodeDegreeByDirection( Direction direction, long nodeId,\n@@ -97,11 +99,10 @@ class DegreeCounter\n         {\n             long firstOut = groupRecord.getFirstOut();\n             long firstIn = groupRecord.getFirstIn();\n-            return countByFirstPrevPointer( firstOut, cursor, nodeId, relationshipRecord ) +\n-                    countByFirstPrevPointer( firstIn, cursor, nodeId, relationshipRecord ) + loopCount;\n-        }\n-        default:\n+            return countByFirstPrevPointer( firstOut, cursor, nodeId, relationshipRecord ) + countByFirstPrevPointer( firstIn, cursor, nodeId, relationshipRecord ) + loopCount;\n+    }\n+    default:\n             throw new IllegalArgumentException( direction.name() );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}