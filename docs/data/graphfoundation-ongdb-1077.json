{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1077",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "147",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "188",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1077/TicketedProcessing.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1077/TicketedProcessing.java\nindex ffa951f9adf..9e05560b6a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1077/TicketedProcessing.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1077/TicketedProcessing.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.util.Iterator;\n@@ -53,159 +54,157 @@ import static org.neo4j.helpers.FutureAdapter.future;\n  *                     \u2514\u2500>\u2502Job \u251c\u2500\u2500\u2518\n  *                        \u2514\u2500\u2500\u2500\u2500\u2518\n  * </pre>\n- *\n+ * <p>\n  * For easily spawning a thread sitting and submitting jobs to be processed from an {@link Iterator},\n  * see {@link #slurp(Iterator, boolean)}.\n  *\n- * @param <FROM> raw material to process\n+ * @param <FROM>  raw material to process\n  * @param <STATE> thread local state that each processing thread will share between jobs\n- * @param <TO> result that a raw material will be processed into\n+ * @param <TO>    result that a raw material will be processed into\n  */\n-public class TicketedProcessing<FROM,STATE,TO> implements Parallelizable, AutoCloseable, Panicable\n+public class TicketedProcessing<FROM, STATE, TO> implements Parallelizable, AutoCloseable, Panicable\n {\n-    private static final ParkStrategy park = new ParkStrategy.Park( 10, MILLISECONDS );\n-\n-    private final TaskExecutor<STATE> executor;\n-    private final BiFunction<FROM,STATE,TO> processor;\n-    private final ArrayBlockingQueue<TO> processed;\n-    private final AtomicLong submittedTicket = new AtomicLong( -1 );\n-    private final AtomicLong processedTicket = new AtomicLong( -1 );\n-    private final LongPredicate myTurnToAddToProcessedQueue = ticket -> processedTicket.get() == ticket - 1;\n-    private final Runnable healthCheck;\n-    private volatile boolean done;\n-\n-    public TicketedProcessing( String name, int maxProcessors, BiFunction<FROM,STATE,TO> processor,\n-            Supplier<STATE> threadLocalStateSupplier )\n+  private static final ParkStrategy park = new ParkStrategy.Park(10, MILLISECONDS);\n+\n+  private final TaskExecutor<STATE> executor;\n+  private final BiFunction<FROM, STATE, TO> processor;\n+  private final ArrayBlockingQueue<TO> processed;\n+  private final AtomicLong submittedTicket = new AtomicLong(-1);\n+  private final AtomicLong processedTicket = new AtomicLong(-1);\n+  private final LongPredicate myTurnToAddToProcessedQueue = ticket -> processedTicket.get() == ticket - 1;\n+  private final Runnable healthCheck;\n+  private volatile boolean done;\n+\n+  public TicketedProcessing(String name, int maxProcessors, BiFunction<FROM, STATE, TO> processor,\n+                            Supplier<STATE> threadLocalStateSupplier)\n+  {\n+    this.processor = processor;\n+    this.executor = new DynamicTaskExecutor<>(1, maxProcessors, maxProcessors, park, name,\n+        threadLocalStateSupplier);\n+    this.healthCheck = executor::assertHealthy;\n+    this.processed = new ArrayBlockingQueue<>(maxProcessors);\n+  }\n+\n+  /**\n+   * Submits a job for processing. Results from processed jobs will be available from {@link #next()}\n+   * in the order in which they got submitted. This method will queue jobs for processing, but not\n+   * more than the number of current processors and never more than number of maximum processors\n+   * given in the constructor; the call will block until queue size goes under this threshold.\n+   * Blocking will provide push-back of submitting new jobs as to reduce unnecessary memory requirements\n+   * for jobs that will sit and wait to be processed.\n+   *\n+   * @param job to process.\n+   */\n+  public void submit(FROM job)\n+  {\n+    long ticket = submittedTicket.incrementAndGet();\n+    executor.submit(threadLocalState ->\n     {\n-        this.processor = processor;\n-        this.executor = new DynamicTaskExecutor<>( 1, maxProcessors, maxProcessors, park, name,\n-                threadLocalStateSupplier );\n-        this.healthCheck = executor::assertHealthy;\n-        this.processed = new ArrayBlockingQueue<>( maxProcessors );\n-    }\n-\n-    /**\n-     * Submits a job for processing. Results from processed jobs will be available from {@link #next()}\n-     * in the order in which they got submitted. This method will queue jobs for processing, but not\n-     * more than the number of current processors and never more than number of maximum processors\n-     * given in the constructor; the call will block until queue size goes under this threshold.\n-     * Blocking will provide push-back of submitting new jobs as to reduce unnecessary memory requirements\n-     * for jobs that will sit and wait to be processed.\n-     *\n-     * @param job to process.\n-     */\n-    public void submit( FROM job )\n+      // Process this job (we're now in one of the processing threads)\n+      TO result = processor.apply(job, threadLocalState);\n+\n+      // Wait until it's my turn to add this result to the result queue, we have to add it in the\n+      // correct order so that we preserve the ticket order. We want to wait as short periods of time\n+      // as possible here because every cycle we wait adding this result, we're also blocking\n+      // other results from being added to the result queue\n+      // OK now it's my turn to add this result to the result queue which user will pull from later on\n+      while (!myTurnToAddToProcessedQueue.test(ticket) || !processed.offer(result, 10, MILLISECONDS))\n+      {\n+        healthCheck.run();\n+      }\n+\n+      // Signal that this ticket has been processed and added to the result queue\n+      processedTicket.incrementAndGet();\n+    });\n+  }\n+\n+  /**\n+   * Essentially starting a thread {@link #submit(Object) submitting} a stream of inputs which will\n+   * each be processed and asynchronically made available in order of processing ticket by later calling\n+   * {@link #next()}.\n+   *\n+   * @param input                  {@link Iterator} of input to process.\n+   * @param closeAfterAllSubmitted will call {@link #close()} after all jobs submitted if {@code true}.\n+   * @return {@link Future} representing the work of submitting the inputs to be processed. When the future\n+   * is completed all items from the {@code input} {@link Iterator} have been submitted, but some items\n+   * may still be queued and processed.\n+   */\n+  public Future<Void> slurp(Iterator<FROM> input, boolean closeAfterAllSubmitted)\n+  {\n+    return future(() ->\n     {\n-        long ticket = submittedTicket.incrementAndGet();\n-        executor.submit( threadLocalState ->\n+      try\n+      {\n+        while (input.hasNext())\n         {\n-            // Process this job (we're now in one of the processing threads)\n-            TO result = processor.apply( job, threadLocalState );\n-\n-            // Wait until it's my turn to add this result to the result queue, we have to add it in the\n-            // correct order so that we preserve the ticket order. We want to wait as short periods of time\n-            // as possible here because every cycle we wait adding this result, we're also blocking\n-            // other results from being added to the result queue\n-            // OK now it's my turn to add this result to the result queue which user will pull from later on\n-            while ( !myTurnToAddToProcessedQueue.test( ticket ) || !processed.offer( result, 10, MILLISECONDS ) )\n-            {\n-                healthCheck.run();\n-            }\n-\n-            // Signal that this ticket has been processed and added to the result queue\n-            processedTicket.incrementAndGet();\n-        } );\n-    }\n-\n-    /**\n-     * Essentially starting a thread {@link #submit(Object) submitting} a stream of inputs which will\n-     * each be processed and asynchronically made available in order of processing ticket by later calling\n-     * {@link #next()}.\n-     *\n-     * @param input {@link Iterator} of input to process.\n-     * @param closeAfterAllSubmitted will call {@link #close()} after all jobs submitted if {@code true}.\n-     * @return {@link Future} representing the work of submitting the inputs to be processed. When the future\n-     * is completed all items from the {@code input} {@link Iterator} have been submitted, but some items\n-     * may still be queued and processed.\n-     */\n-    public Future<Void> slurp( Iterator<FROM> input, boolean closeAfterAllSubmitted )\n-    {\n-        return future( () ->\n+          submit(input.next());\n+        }\n+        if (closeAfterAllSubmitted)\n         {\n-            try\n-            {\n-                while ( input.hasNext() )\n-                {\n-                    submit( input.next() );\n-                }\n-                if ( closeAfterAllSubmitted )\n-                {\n-                    close();\n-                }\n-                return null;\n-            }\n-            catch ( Throwable e )\n-            {\n-                receivePanic( e );\n-                close();\n-                throw e;\n-            }\n-        } );\n-    }\n-\n-    /**\n-     * Tells this processor that there will be no more submissions and so {@link #next()} will stop blocking,\n-     * waiting for new processed results.\n-     */\n-    @Override\n-    public void close()\n-    {\n-        done = true;\n-        executor.close();\n-    }\n-\n-    @Override\n-    public void receivePanic( Throwable cause )\n-    {\n-        executor.receivePanic( cause );\n-    }\n-\n-    /**\n-     * @return next processed job (blocking call), or {@code null} if all jobs have been processed\n-     * and {@link #close()} has been called.\n-     */\n-    public TO next()\n+          close();\n+        }\n+        return null;\n+      } catch (Throwable e)\n+      {\n+        receivePanic(e);\n+        close();\n+        throw e;\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Tells this processor that there will be no more submissions and so {@link #next()} will stop blocking,\n+   * waiting for new processed results.\n+   */\n+  @Override\n+  public void close()\n+  {\n+    done = true;\n+    executor.close();\n+  }\n+\n+  @Override\n+  public void receivePanic(Throwable cause)\n+  {\n+    executor.receivePanic(cause);\n+  }\n+\n+  /**\n+   * @return next processed job (blocking call), or {@code null} if all jobs have been processed\n+   * and {@link #close()} has been called.\n+   */\n+  public TO next()\n+  {\n+    while (!done || processedTicket.get() < submittedTicket.get() || !processed.isEmpty())\n     {\n-        while ( !done || processedTicket.get() < submittedTicket.get() || !processed.isEmpty()  )\n+      try\n+      {\n+        TO next = processed.poll(10, MILLISECONDS);\n+        if (next != null)\n         {\n-            try\n-            {\n-                TO next = processed.poll( 10, MILLISECONDS );\n-                if ( next != null )\n-                {\n-                    return next;\n-                }\n-            }\n-            catch ( InterruptedException e )\n-            {\n-                // Someone wants us to abort this thing\n-                Thread.currentThread().interrupt();\n-                return null;\n-            }\n-            healthCheck.run();\n+          return next;\n         }\n-\n-        // Health check here too since slurp may have failed and so if not checking health here then\n-        // a panic may go by unnoticed and may just look like the end of the stream. Checking health here\n-        // ensures that any slurp panic bubbles up and eventually spreads.\n-        healthCheck.run();\n-\n+      } catch (InterruptedException e)\n+      {\n+        // Someone wants us to abort this thing\n+        Thread.currentThread().interrupt();\n         return null;\n+      }\n+      healthCheck.run();\n     }\n \n-    @Override\n-    public int processors( int delta )\n-    {\n-        return executor.processors( delta );\n-    }\n+    // Health check here too since slurp may have failed and so if not checking health here then\n+    // a panic may go by unnoticed and may just look like the end of the stream. Checking health here\n+    // ensures that any slurp panic bubbles up and eventually spreads.\n+    healthCheck.run();\n+\n+    return null;\n+  }\n+\n+  @Override\n+  public int processors(int delta)\n+  {\n+    return executor.processors(delta);\n+  }\n }\n",
            "diff_size": 190
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1077/TicketedProcessing.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1077/TicketedProcessing.java\nindex ffa951f9adf..d52f5a53bb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1077/TicketedProcessing.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1077/TicketedProcessing.java\n@@ -74,13 +74,12 @@ public class TicketedProcessing<FROM,STATE,TO> implements Parallelizable, AutoCl\n     private final Runnable healthCheck;\n     private volatile boolean done;\n \n-    public TicketedProcessing( String name, int maxProcessors, BiFunction<FROM,STATE,TO> processor,\n-            Supplier<STATE> threadLocalStateSupplier )\n+    public TicketedProcessing( String name, int maxProcessors, BiFunction<FROM,STATE,TO> processor, Supplier<STATE> threadLocalStateSupplier )\n     {\n         this.processor = processor;\n         this.executor = new DynamicTaskExecutor<>( 1, maxProcessors, maxProcessors, park, name,\n                 threadLocalStateSupplier );\n-        this.healthCheck = executor::assertHealthy;\n+this.healthCheck = executor::assertHealthy;\n         this.processed = new ArrayBlockingQueue<>( maxProcessors );\n     }\n \n@@ -138,7 +137,8 @@ public class TicketedProcessing<FROM,STATE,TO> implements Parallelizable, AutoCl\n                 {\n                     submit( input.next() );\n                 }\n-                if ( closeAfterAllSubmitted )\n+\n+if ( closeAfterAllSubmitted )\n                 {\n                     close();\n                 }\n@@ -176,7 +176,7 @@ public class TicketedProcessing<FROM,STATE,TO> implements Parallelizable, AutoCl\n      */\n     public TO next()\n     {\n-        while ( !done || processedTicket.get() < submittedTicket.get() || !processed.isEmpty()  )\n+        while ( !done || processedTicket.get() < submittedTicket.get() || !processed.isEmpty() )\n         {\n             try\n             {\n@@ -199,8 +199,7 @@ public class TicketedProcessing<FROM,STATE,TO> implements Parallelizable, AutoCl\n         // a panic may go by unnoticed and may just look like the end of the stream. Checking health here\n         // ensures that any slurp panic bubbles up and eventually spreads.\n         healthCheck.run();\n-\n-        return null;\n+return null;\n     }\n \n     @Override\n@@ -208,4 +207,4 @@ public class TicketedProcessing<FROM,STATE,TO> implements Parallelizable, AutoCl\n     {\n         return executor.processors( delta );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}