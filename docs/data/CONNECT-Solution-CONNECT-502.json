{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "502",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.common.propaccessor;\n\nimport gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileRequestType;\nimport gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileResponseType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/502/NhincComponentPropAccessor.java\nindex d5a94aeb2cf..63cf7413c11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/502/NhincComponentPropAccessor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.common.propaccessor;\n \n import gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileRequestType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/502/NhincComponentPropAccessor.java\nindex d5a94aeb2cf..3a18cdd9a7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/502/NhincComponentPropAccessor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.common.propaccessor;\n \n import gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileRequestType;\n@@ -48,193 +49,190 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author Sai Valluripalli\n  */\n @BindingType(value = SOAPBinding.SOAP12HTTP_BINDING)\n public class NhincComponentPropAccessor\n-        implements gov.hhs.fha.nhinc.nhinccomponentpropaccessor.NhincComponentPropAccessorPortType {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(NhincComponentPropAccessor.class);\n-\n-    /**\n-     * This method returns the value of the given property that is located within the given property file. If the\n-     * properties have been cached and the cache is still fresh, then it will return the value from the cache. If the\n-     * properties are cached, but the cache is not fresh, then the cache will be updated with the current values in the\n-     * properties file and then the property will be returned. If the properties for that file are not cached at all,\n-     * the property will be retrieved from the properties file and returned.\n-     *\n-     * @param getPropertyRequest The input parameters - Property File and Property Name.\n-     * @return The value for the property.\n-     */\n-    @Override\n-    public GetPropertyResponseType getProperty(GetPropertyRequestType getPropertyRequest) {\n-        GetPropertyResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.getProperty(getPropertyRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to retrieve property.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    implements gov.hhs.fha.nhinc.nhinccomponentpropaccessor.NhincComponentPropAccessorPortType {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(NhincComponentPropAccessor.class);\n+\n+  /**\n+   * This method returns the value of the given property that is located within the given property file. If the\n+   * properties have been cached and the cache is still fresh, then it will return the value from the cache. If the\n+   * properties are cached, but the cache is not fresh, then the cache will be updated with the current values in the\n+   * properties file and then the property will be returned. If the properties for that file are not cached at all,\n+   * the property will be retrieved from the properties file and returned.\n+   *\n+   * @param getPropertyRequest The input parameters - Property File and Property Name.\n+   * @return The value for the property.\n+   */\n+  @Override\n+  public GetPropertyResponseType getProperty(GetPropertyRequestType getPropertyRequest) {\n+    GetPropertyResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.getProperty(getPropertyRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to retrieve property.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n-    /**\n-     * This will return true if the property value is: T, t, or any case combination of \"TRUE\" and it will return false\n-     * for all other values.\n-     *\n-     * @param getPropertyBooleanRequest The property file and property name.\n-     * @return TRUE if the property is true and false if it is not.\n-     */\n-    @Override\n-    public GetPropertyBooleanResponseType getPropertyBoolean(GetPropertyBooleanRequestType getPropertyBooleanRequest) {\n-        GetPropertyBooleanResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.getPropertyBoolean(getPropertyBooleanRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to retrieve boolean property.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    return oOutput;\n+  }\n+\n+  /**\n+   * This will return true if the property value is: T, t, or any case combination of \"TRUE\" and it will return false\n+   * for all other values.\n+   *\n+   * @param getPropertyBooleanRequest The property file and property name.\n+   * @return TRUE if the property is true and false if it is not.\n+   */\n+  @Override\n+  public GetPropertyBooleanResponseType getPropertyBoolean(GetPropertyBooleanRequestType getPropertyBooleanRequest) {\n+    GetPropertyBooleanResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.getPropertyBoolean(getPropertyBooleanRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to retrieve boolean property.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n-    /**\n-     * This method returns the set of keys in a property file.\n-     *\n-     * @param getPropertyNamesRequest The name of the property file.\n-     * @return The list of property names in the property file.\n-     */\n-    @Override\n-    public GetPropertyNamesResponseType getPropertyNames(GetPropertyNamesRequestType getPropertyNamesRequest) {\n-        GetPropertyNamesResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.getPropertyNames(getPropertyNamesRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to retrieve property names.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    return oOutput;\n+  }\n+\n+  /**\n+   * This method returns the set of keys in a property file.\n+   *\n+   * @param getPropertyNamesRequest The name of the property file.\n+   * @return The list of property names in the property file.\n+   */\n+  @Override\n+  public GetPropertyNamesResponseType getPropertyNames(GetPropertyNamesRequestType getPropertyNamesRequest) {\n+    GetPropertyNamesResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.getPropertyNames(getPropertyNamesRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to retrieve property names.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n-    /**\n-     * This method returns the properties that are located within the given property file. If the properties have been\n-     * cached and the cache is still fresh, then it will return the values from the cache. If the properties are cached,\n-     * but the cache is not fresh, then the cache will be updated with the current values in the properties file and\n-     * then the property values will be returned. If the properties for that file are not cached at all, the property\n-     * will be retrieved from the properties file and returned.\n-     *\n-     * NOTE: THIS IS AN EXPENSIVE OPERATION. IT WILL CREATE A DEEP COPY OF THE PROPERTIES AND RETURN IT. THAT MEANS IT\n-     * WILL CREATE AN EXACT REPLICA WITH ALL DATA. THIS IS A PROTECTION TO MAKE SURE THAT A PROPERTY IS NOT\n-     * INADVERTANTLY CHANGED OUTSIDE OF THIS CLASS.\n-     *\n-     * @param getPropertiesRequest Name of the property file.\n-     * @return Returns all of the properties and values in the property file.\n-     */\n-    @Override\n-    public GetPropertiesResponseType getProperties(GetPropertiesRequestType getPropertiesRequest) {\n-        GetPropertiesResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.getProperties(getPropertiesRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to retrieve properties.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    return oOutput;\n+  }\n+\n+  /**\n+   * This method returns the properties that are located within the given property file. If the properties have been\n+   * cached and the cache is still fresh, then it will return the values from the cache. If the properties are cached,\n+   * but the cache is not fresh, then the cache will be updated with the current values in the properties file and\n+   * then the property values will be returned. If the properties for that file are not cached at all, the property\n+   * will be retrieved from the properties file and returned.\n+   * <p>\n+   * NOTE: THIS IS AN EXPENSIVE OPERATION. IT WILL CREATE A DEEP COPY OF THE PROPERTIES AND RETURN IT. THAT MEANS IT\n+   * WILL CREATE AN EXACT REPLICA WITH ALL DATA. THIS IS A PROTECTION TO MAKE SURE THAT A PROPERTY IS NOT\n+   * INADVERTANTLY CHANGED OUTSIDE OF THIS CLASS.\n+   *\n+   * @param getPropertiesRequest Name of the property file.\n+   * @return Returns all of the properties and values in the property file.\n+   */\n+  @Override\n+  public GetPropertiesResponseType getProperties(GetPropertiesRequestType getPropertiesRequest) {\n+    GetPropertiesResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.getProperties(getPropertiesRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to retrieve properties.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n-    /**\n-     * This method will return the location of the property files. Essentially it will return the value in the\n-     * nhinc.properties.dir system variable.\n-     *\n-     * @param getPropertyFileLocationRequest Nothing important - just need this unique for document literal binding.\n-     * @return The path and location of the property files.\n-     */\n-    @Override\n-    public GetPropertyFileLocationResponseType getPropertyFileLocation(\n-            GetPropertyFileLocationRequestType getPropertyFileLocationRequest) {\n-        GetPropertyFileLocationResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.getPropertyFileLocation(getPropertyFileLocationRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to retrieve property file location.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    return oOutput;\n+  }\n+\n+  /**\n+   * This method will return the location of the property files. Essentially it will return the value in the\n+   * nhinc.properties.dir system variable.\n+   *\n+   * @param getPropertyFileLocationRequest Nothing important - just need this unique for document literal binding.\n+   * @return The path and location of the property files.\n+   */\n+  @Override\n+  public GetPropertyFileLocationResponseType getPropertyFileLocation(\n+      GetPropertyFileLocationRequestType getPropertyFileLocationRequest) {\n+    GetPropertyFileLocationResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.getPropertyFileLocation(getPropertyFileLocationRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to retrieve property file location.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n-    /**\n-     * This method dumps the properties and associated values for a properties file to the log file.\n-     *\n-     * @param dumpPropsToLogRequest the name of the property file.\n-     * @return Nothing - it simply always returns true.\n-     */\n-    @Override\n-    public DumpPropsToLogResponseType dumpPropsToLog(DumpPropsToLogRequestType dumpPropsToLogRequest) {\n-        DumpPropsToLogResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.dumpPropsToLog(dumpPropsToLogRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to dump property file to log.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    return oOutput;\n+  }\n+\n+  /**\n+   * This method dumps the properties and associated values for a properties file to the log file.\n+   *\n+   * @param dumpPropsToLogRequest the name of the property file.\n+   * @return Nothing - it simply always returns true.\n+   */\n+  @Override\n+  public DumpPropsToLogResponseType dumpPropsToLog(DumpPropsToLogRequestType dumpPropsToLogRequest) {\n+    DumpPropsToLogResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.dumpPropsToLog(dumpPropsToLogRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to dump property file to log.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n-    /**\n-     * This method writes out the given properties as the specified properties file. Note: It does not merge\n-     * information. It will completely overwrite the current file with the new properties information. If the file does\n-     * not exist, it will create it. This writes the property file to the NHINC properties directory.\n-     *\n-     *\n-     * @param writePropertyFileRequest The name of the property file and the properties to write.\n-     * @return True if this succeeds.\n-     */\n-    @Override\n-    public WritePropertyFileResponseType writePropertyFile(WritePropertyFileRequestType writePropertyFileRequest) {\n-        WritePropertyFileResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.writePropertyFile(writePropertyFileRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to write property file.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    return oOutput;\n+  }\n+\n+  /**\n+   * This method writes out the given properties as the specified properties file. Note: It does not merge\n+   * information. It will completely overwrite the current file with the new properties information. If the file does\n+   * not exist, it will create it. This writes the property file to the NHINC properties directory.\n+   *\n+   * @param writePropertyFileRequest The name of the property file and the properties to write.\n+   * @return True if this succeeds.\n+   */\n+  @Override\n+  public WritePropertyFileResponseType writePropertyFile(WritePropertyFileRequestType writePropertyFileRequest) {\n+    WritePropertyFileResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.writePropertyFile(writePropertyFileRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to write property file.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n-    /**\n-     * This method deletes the specified properties file. Note: It will completely delete the file from the NHINC\n-     * properties directory.\n-     *\n-     *\n-     * @param deletePropertyFileRequest The name of the property file to be deleted without the \".properties\" extension.\n-     * @return True if this succeeds.\n-     */\n-    @Override\n-    public DeletePropertyFileResponseType deletePropertyFile(DeletePropertyFileRequestType deletePropertyFileRequest) {\n-        DeletePropertyFileResponseType oOutput = null;\n-\n-        try {\n-            oOutput = PropertyAccessHelper.deletePropertyFile(deletePropertyFileRequest);\n-        } catch (Exception e) {\n-            String sMessage = \"Failed to delete property file.  Exception: \" + e.getMessage();\n-            LOG.error(sMessage, e);\n-        }\n-\n-        return oOutput;\n+    return oOutput;\n+  }\n+\n+  /**\n+   * This method deletes the specified properties file. Note: It will completely delete the file from the NHINC\n+   * properties directory.\n+   *\n+   * @param deletePropertyFileRequest The name of the property file to be deleted without the \".properties\" extension.\n+   * @return True if this succeeds.\n+   */\n+  @Override\n+  public DeletePropertyFileResponseType deletePropertyFile(DeletePropertyFileRequestType deletePropertyFileRequest) {\n+    DeletePropertyFileResponseType oOutput = null;\n+\n+    try {\n+      oOutput = PropertyAccessHelper.deletePropertyFile(deletePropertyFileRequest);\n+    } catch (Exception e) {\n+      String sMessage = \"Failed to delete property file.  Exception: \" + e.getMessage();\n+      LOG.error(sMessage, e);\n     }\n \n+    return oOutput;\n+  }\n+\n }\n",
            "diff_size": 173
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/502/NhincComponentPropAccessor.java\nindex d5a94aeb2cf..a4e140d40c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/502/NhincComponentPropAccessor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.common.propaccessor;\n \n import gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileRequestType;\n@@ -52,8 +53,7 @@ import org.slf4j.LoggerFactory;\n  * @author Sai Valluripalli\n  */\n @BindingType(value = SOAPBinding.SOAP12HTTP_BINDING)\n-public class NhincComponentPropAccessor\n-        implements gov.hhs.fha.nhinc.nhinccomponentpropaccessor.NhincComponentPropAccessorPortType {\n+public class NhincComponentPropAccessor implements gov.hhs.fha.nhinc.nhinccomponentpropaccessor.NhincComponentPropAccessorPortType {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NhincComponentPropAccessor.class);\n \n@@ -70,8 +70,7 @@ public class NhincComponentPropAccessor\n     @Override\n     public GetPropertyResponseType getProperty(GetPropertyRequestType getPropertyRequest) {\n         GetPropertyResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.getProperty(getPropertyRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve property.  Exception: \" + e.getMessage();\n@@ -91,8 +90,7 @@ public class NhincComponentPropAccessor\n     @Override\n     public GetPropertyBooleanResponseType getPropertyBoolean(GetPropertyBooleanRequestType getPropertyBooleanRequest) {\n         GetPropertyBooleanResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.getPropertyBoolean(getPropertyBooleanRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve boolean property.  Exception: \" + e.getMessage();\n@@ -111,8 +109,7 @@ public class NhincComponentPropAccessor\n     @Override\n     public GetPropertyNamesResponseType getPropertyNames(GetPropertyNamesRequestType getPropertyNamesRequest) {\n         GetPropertyNamesResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.getPropertyNames(getPropertyNamesRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve property names.  Exception: \" + e.getMessage();\n@@ -139,8 +136,7 @@ public class NhincComponentPropAccessor\n     @Override\n     public GetPropertiesResponseType getProperties(GetPropertiesRequestType getPropertiesRequest) {\n         GetPropertiesResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.getProperties(getPropertiesRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve properties.  Exception: \" + e.getMessage();\n@@ -161,8 +157,7 @@ public class NhincComponentPropAccessor\n     public GetPropertyFileLocationResponseType getPropertyFileLocation(\n             GetPropertyFileLocationRequestType getPropertyFileLocationRequest) {\n         GetPropertyFileLocationResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.getPropertyFileLocation(getPropertyFileLocationRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve property file location.  Exception: \" + e.getMessage();\n@@ -181,8 +176,7 @@ public class NhincComponentPropAccessor\n     @Override\n     public DumpPropsToLogResponseType dumpPropsToLog(DumpPropsToLogRequestType dumpPropsToLogRequest) {\n         DumpPropsToLogResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.dumpPropsToLog(dumpPropsToLogRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to dump property file to log.  Exception: \" + e.getMessage();\n@@ -204,8 +198,7 @@ public class NhincComponentPropAccessor\n     @Override\n     public WritePropertyFileResponseType writePropertyFile(WritePropertyFileRequestType writePropertyFileRequest) {\n         WritePropertyFileResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.writePropertyFile(writePropertyFileRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to write property file.  Exception: \" + e.getMessage();\n@@ -226,8 +219,7 @@ public class NhincComponentPropAccessor\n     @Override\n     public DeletePropertyFileResponseType deletePropertyFile(DeletePropertyFileRequestType deletePropertyFileRequest) {\n         DeletePropertyFileResponseType oOutput = null;\n-\n-        try {\n+try {\n             oOutput = PropertyAccessHelper.deletePropertyFile(deletePropertyFileRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to delete property file.  Exception: \" + e.getMessage();\n@@ -237,4 +229,4 @@ public class NhincComponentPropAccessor\n         return oOutput;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/502/NhincComponentPropAccessor.java\nindex d5a94aeb2cf..11ff8ce43b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/502/NhincComponentPropAccessor.java\n@@ -51,9 +51,10 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Sai Valluripalli\n  */\n+\n+\n @BindingType(value = SOAPBinding.SOAP12HTTP_BINDING)\n-public class NhincComponentPropAccessor\n-        implements gov.hhs.fha.nhinc.nhinccomponentpropaccessor.NhincComponentPropAccessorPortType {\n+public class NhincComponentPropAccessor implements gov.hhs.fha.nhinc.nhinccomponentpropaccessor.NhincComponentPropAccessorPortType {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NhincComponentPropAccessor.class);\n \n@@ -67,17 +68,17 @@ public class NhincComponentPropAccessor\n      * @param getPropertyRequest The input parameters - Property File and Property Name.\n      * @return The value for the property.\n      */\n+\n+\n     @Override\n     public GetPropertyResponseType getProperty(GetPropertyRequestType getPropertyRequest) {\n         GetPropertyResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.getProperty(getPropertyRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve property.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n@@ -88,17 +89,17 @@ public class NhincComponentPropAccessor\n      * @param getPropertyBooleanRequest The property file and property name.\n      * @return TRUE if the property is true and false if it is not.\n      */\n+\n+\n     @Override\n     public GetPropertyBooleanResponseType getPropertyBoolean(GetPropertyBooleanRequestType getPropertyBooleanRequest) {\n         GetPropertyBooleanResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.getPropertyBoolean(getPropertyBooleanRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve boolean property.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n@@ -108,17 +109,17 @@ public class NhincComponentPropAccessor\n      * @param getPropertyNamesRequest The name of the property file.\n      * @return The list of property names in the property file.\n      */\n+\n+\n     @Override\n     public GetPropertyNamesResponseType getPropertyNames(GetPropertyNamesRequestType getPropertyNamesRequest) {\n         GetPropertyNamesResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.getPropertyNames(getPropertyNamesRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve property names.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n@@ -136,17 +137,17 @@ public class NhincComponentPropAccessor\n      * @param getPropertiesRequest Name of the property file.\n      * @return Returns all of the properties and values in the property file.\n      */\n+\n+\n     @Override\n     public GetPropertiesResponseType getProperties(GetPropertiesRequestType getPropertiesRequest) {\n         GetPropertiesResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.getProperties(getPropertiesRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve properties.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n@@ -157,18 +158,17 @@ public class NhincComponentPropAccessor\n      * @param getPropertyFileLocationRequest Nothing important - just need this unique for document literal binding.\n      * @return The path and location of the property files.\n      */\n+\n+\n     @Override\n-    public GetPropertyFileLocationResponseType getPropertyFileLocation(\n-            GetPropertyFileLocationRequestType getPropertyFileLocationRequest) {\n+    public GetPropertyFileLocationResponseType getPropertyFileLocation(GetPropertyFileLocationRequestType getPropertyFileLocationRequest) {\n         GetPropertyFileLocationResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.getPropertyFileLocation(getPropertyFileLocationRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to retrieve property file location.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n@@ -178,17 +178,17 @@ public class NhincComponentPropAccessor\n      * @param dumpPropsToLogRequest the name of the property file.\n      * @return Nothing - it simply always returns true.\n      */\n+\n+\n     @Override\n     public DumpPropsToLogResponseType dumpPropsToLog(DumpPropsToLogRequestType dumpPropsToLogRequest) {\n         DumpPropsToLogResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.dumpPropsToLog(dumpPropsToLogRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to dump property file to log.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n@@ -201,17 +201,17 @@ public class NhincComponentPropAccessor\n      * @param writePropertyFileRequest The name of the property file and the properties to write.\n      * @return True if this succeeds.\n      */\n+\n+\n     @Override\n     public WritePropertyFileResponseType writePropertyFile(WritePropertyFileRequestType writePropertyFileRequest) {\n         WritePropertyFileResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.writePropertyFile(writePropertyFileRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to write property file.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n@@ -223,18 +223,18 @@ public class NhincComponentPropAccessor\n      * @param deletePropertyFileRequest The name of the property file to be deleted without the \".properties\" extension.\n      * @return True if this succeeds.\n      */\n+\n+\n     @Override\n     public DeletePropertyFileResponseType deletePropertyFile(DeletePropertyFileRequestType deletePropertyFileRequest) {\n         DeletePropertyFileResponseType oOutput = null;\n-\n         try {\n             oOutput = PropertyAccessHelper.deletePropertyFile(deletePropertyFileRequest);\n         } catch (Exception e) {\n             String sMessage = \"Failed to delete property file.  Exception: \" + e.getMessage();\n             LOG.error(sMessage, e);\n         }\n-\n         return oOutput;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/502/NhincComponentPropAccessor.java\nindex d5a94aeb2cf..0b57355b9b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/502/NhincComponentPropAccessor.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.common.propaccessor;\n-\n import gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileRequestType;\n import gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileResponseType;\n import gov.hhs.fha.nhinc.common.propertyaccess.DumpPropsToLogRequestType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/502/NhincComponentPropAccessor.java\nindex d5a94aeb2cf..63cf7413c11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/502/NhincComponentPropAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/502/NhincComponentPropAccessor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.common.propaccessor;\n \n import gov.hhs.fha.nhinc.common.propertyaccess.DeletePropertyFileRequestType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}