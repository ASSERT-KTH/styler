{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "33",
    "information": {
        "errors": [
            {
                "line": "55",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @param env the couchbase environment.\n     */\n    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port,\n        final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n        super(hostname, bucket, username, password, port, env, responseBuffer, false,\n                env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/33/KeyValueEndpoint.java\nindex b4ff5e96c4d..acb49824993 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/33/KeyValueEndpoint.java\n@@ -52,8 +52,9 @@ public class KeyValueEndpoint extends AbstractEndpoint {\n      * @param hostname the hostname to connect on this endpoint.\n      * @param env the couchbase environment.\n      */\n-    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port,\n-        final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n+    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password,\n+        int port,\n+         final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n         super(hostname, bucket, username, password, port, env, responseBuffer, false,\n                 env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/33/KeyValueEndpoint.java\nindex b4ff5e96c4d..1fc62484fa6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/33/KeyValueEndpoint.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core.endpoint.kv;\n \n import com.couchbase.client.core.ResponseEvent;\n@@ -38,7 +39,7 @@ public class KeyValueEndpoint extends AbstractEndpoint {\n      * Create a new {@link KeyValueEndpoint}.\n      *\n      * @param hostname the hostname to connect on this endpoint.\n-     * @param env the couchbase environment.\n+     * @param env      the couchbase environment.\n      */\n     @Deprecated\n     public KeyValueEndpoint(final String hostname, final String bucket, final String password, int port,\n@@ -50,12 +51,13 @@ public class KeyValueEndpoint extends AbstractEndpoint {\n      * Create a new {@link KeyValueEndpoint}.\n      *\n      * @param hostname the hostname to connect on this endpoint.\n-     * @param env the couchbase environment.\n+     * @param env      the couchbase environment.\n      */\n-    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port,\n-        final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n+    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password,\n+                            int port,\n+                            final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n         super(hostname, bucket, username, password, port, env, responseBuffer, false,\n-                env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);\n+            env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);\n     }\n \n \n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 313).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/33/KeyValueEndpoint.java\nindex b4ff5e96c4d..6fd74d23aa1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/33/KeyValueEndpoint.java\n@@ -23,7 +23,6 @@ import io.netty.channel.ChannelPipeline;\n import com.couchbase.client.deps.io.netty.handler.codec.memcache.binary.BinaryMemcacheClientCodec;\n import com.couchbase.client.deps.io.netty.handler.codec.memcache.binary.BinaryMemcacheObjectAggregator;\n import io.netty.handler.timeout.IdleStateHandler;\n-\n import java.util.concurrent.TimeUnit;\n \n /**\n@@ -32,6 +31,7 @@ import java.util.concurrent.TimeUnit;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n+\n public class KeyValueEndpoint extends AbstractEndpoint {\n \n     /**\n@@ -40,9 +40,9 @@ public class KeyValueEndpoint extends AbstractEndpoint {\n      * @param hostname the hostname to connect on this endpoint.\n      * @param env the couchbase environment.\n      */\n+\n     @Deprecated\n-    public KeyValueEndpoint(final String hostname, final String bucket, final String password, int port,\n-                            final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n+    public KeyValueEndpoint(final String hostname, final String bucket, final String password, int port, final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n         this(hostname, bucket, bucket, password, port, env, responseBuffer);\n     }\n \n@@ -52,25 +52,19 @@ public class KeyValueEndpoint extends AbstractEndpoint {\n      * @param hostname the hostname to connect on this endpoint.\n      * @param env the couchbase environment.\n      */\n-    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port,\n-        final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n-        super(hostname, bucket, username, password, port, env, responseBuffer, false,\n-                env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);\n-    }\n \n+    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port, final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n+        super(hostname, bucket, username, password, port, env, responseBuffer, false, env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);\n+    }\n \n     @Override\n     protected void customEndpointHandlers(final ChannelPipeline pipeline) {\n         if (environment().keepAliveInterval() > 0) {\n             pipeline.addLast(new IdleStateHandler(environment().keepAliveInterval(), 0, 0, TimeUnit.MILLISECONDS));\n         }\n-        pipeline\n-            .addLast(new BinaryMemcacheClientCodec())\n-            .addLast(new BinaryMemcacheObjectAggregator(Integer.MAX_VALUE))\n-            .addLast(new KeyValueFeatureHandler(environment()))\n-            .addLast(new KeyValueAuthHandler(username(), password()))\n-            .addLast(new KeyValueSelectBucketHandler(bucket()))\n-            .addLast(new KeyValueHandler(this, responseBuffer(), false, true));\n+        pipeline.addLast(new BinaryMemcacheClientCodec()).addLast(new BinaryMemcacheObjectAggregator(Integer.MAX_VALUE)).addLast(new KeyValueFeatureHandler(environment())).addLast(new KeyValueAuthHandler(username(), password())).addLast(new KeyValueSelectBucketHandler(bucket())).addLast(new KeyValueHandler(this,\n+            responseBuffer(),\n+            false,\n+            true));\n     }\n-\n }\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/33/KeyValueEndpoint.java\nindex b4ff5e96c4d..3ede264fc25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/33/KeyValueEndpoint.java\n@@ -52,8 +52,8 @@ public class KeyValueEndpoint extends AbstractEndpoint {\n      * @param hostname the hostname to connect on this endpoint.\n      * @param env the couchbase environment.\n      */\n-    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port,\n-        final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n+    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port, final\n+        CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n         super(hostname, bucket, username, password, port, env, responseBuffer, false,\n                 env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/33/KeyValueEndpoint.java\nindex b4ff5e96c4d..acb49824993 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/33/KeyValueEndpoint.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_three_grams/33/KeyValueEndpoint.java\n@@ -52,8 +52,9 @@ public class KeyValueEndpoint extends AbstractEndpoint {\n      * @param hostname the hostname to connect on this endpoint.\n      * @param env the couchbase environment.\n      */\n-    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password, int port,\n-        final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n+    public KeyValueEndpoint(final String hostname, final String bucket, final String username, final String password,\n+        int port,\n+         final CoreEnvironment env, final RingBuffer<ResponseEvent> responseBuffer) {\n         super(hostname, bucket, username, password, port, env, responseBuffer, false,\n                 env.kvIoPool() == null ? env.ioPool() : env.kvIoPool(), true);\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}