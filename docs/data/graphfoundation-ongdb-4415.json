{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4415",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4415/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4415/Schema.java\nindex 634d0d13608..a70eafbb748 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4415/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4415/Schema.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.schema;\n \n import java.util.concurrent.TimeUnit;\n@@ -28,138 +29,137 @@ import org.neo4j.graphdb.index.IndexPopulationProgress;\n /**\n  * Interface for managing the schema of your graph database. This currently includes\n  * the indexing support added in Neo4j 2.0. Please see the Neo4j manual for details.\n- *\n+ * <p>\n  * Compatibility note: New methods may be added to this interface without notice,\n  * backwards compatibility is only guaranteed for clients of this interface, not for\n  * implementors.\n  */\n public interface Schema\n {\n-    /**\n-     * The states that an index can be in. This mostly relates to tracking the background\n-     * population of an index, to tell when it is done populating and is online serving\n-     * requests.\n-     */\n-    enum IndexState\n-    {\n-        ONLINE,\n-        POPULATING,\n-        FAILED\n-    }\n-\n-    /**\n-     * Returns an {@link IndexCreator} where details about the index to create can be\n-     * specified. When all details have been entered {@link IndexCreator#create() create}\n-     * must be called for it to actually be created.\n-     *\n-     * Creating an index enables indexing for nodes with the specified label. The index will\n-     * have the details supplied to the {@link IndexCreator returned index creator}.\n-     * All existing and all future nodes matching the index definition will be indexed,\n-     * speeding up future operations.\n-     *\n-     * @param label {@link Label label} on nodes to be indexed\n-     *\n-     * @return an {@link IndexCreator} capable of providing details for, as well as creating\n-     * an index for the given {@link Label label}.\n-     */\n-    IndexCreator indexFor( Label label );\n-\n-    /**\n-     * @param label the {@link Label} to get {@link IndexDefinition indexes} for.\n-     * @return all {@link IndexDefinition indexes} attached to the given {@link Label label}.\n-     */\n-    Iterable<IndexDefinition> getIndexes( Label label );\n-\n-    /**\n-     * @return all {@link IndexDefinition indexes} in this database.\n-     */\n-    Iterable<IndexDefinition> getIndexes();\n-\n-    /**\n-     * Poll the database for the state of a given index. This can be used to track in which\n-     * state the creation of the index is, for example if it's still\n-     * {@link IndexState#POPULATING populating} in the background, or has come\n-     * {@link IndexState#ONLINE online}.\n-     *\n-     * @param index the index that we want to poll state for\n-     * @return the current {@link IndexState} of the index\n-     */\n-    IndexState getIndexState( IndexDefinition index );\n-\n-    /**\n-     * Poll the database for the population progress. This can be used to track the progress of the\n-     * population job associated to the given index. If the index is\n-     * {@link IndexState#POPULATING populating} or {@link IndexState#ONLINE online}, the state will contain current\n-     * progress. If the index is {@link IndexState#FAILED failed} then the state returned from this method\n-     * should be regarded as invalid.\n-     *\n-     * @param index the index that we want to poll state for\n-     * @return the current population progress for the index\n-     *\n-     */\n-    IndexPopulationProgress getIndexPopulationProgress( IndexDefinition index );\n-\n-    /**\n-     * If {@link #getIndexState(IndexDefinition)} return {@link IndexState#FAILED} this method will\n-     * return the failure description.\n-     * @param index the {@link IndexDefinition} to get failure from.\n-     * @return the failure description.\n-     * @throws IllegalStateException if the {@code index} isn't in a {@link IndexState#FAILED} state.\n-     */\n-    String getIndexFailure( IndexDefinition index );\n-\n-    /**\n-     * Returns a {@link ConstraintCreator} where details about the constraint can be\n-     * specified. When all details have been entered {@link ConstraintCreator#create()}\n-     * must be called for it to actually be created.\n-     *\n-     * Creating a constraint will block on the {@linkplain ConstraintCreator#create() create method} until\n-     * all existing data has been verified for compliance. If any existing data doesn't comply with the constraint an\n-     * exception will be thrown, and the constraint will not be created.\n-     *\n-     * @param label the label this constraint is for.\n-     * @return a {@link ConstraintCreator} capable of providing details for, as well as creating\n-     * a constraint for the given {@linkplain Label label}.\n-     */\n-    ConstraintCreator constraintFor( Label label );\n-\n-    /**\n-     * @param label the {@linkplain Label label} to get constraints for.\n-     * @return all constraints for the given label.\n-     */\n-    Iterable<ConstraintDefinition> getConstraints( Label label );\n-\n-    /**\n-     * @param type the {@linkplain RelationshipType relationship type} to get constraints for.\n-     * @return all constraints for the given relationship type.\n-     */\n-    Iterable<ConstraintDefinition> getConstraints( RelationshipType type );\n-\n-    /**\n-     * @return all constraints\n-     */\n-    Iterable<ConstraintDefinition> getConstraints();\n-\n-    /**\n-     * Wait until an index comes online\n-     *\n-     * @param index the index that we want to wait for\n-     * @param duration duration to wait for the index to come online\n-     * @param unit TimeUnit of duration\n-     * @throws IllegalStateException if the index did not enter the ONLINE state\n-     *             within the given duration or if the index entered the FAILED\n-     *             state\n-     */\n-    void awaitIndexOnline( IndexDefinition index, long duration, TimeUnit unit );\n-\n-    /**\n-     * Wait until all indices comes online\n-     *\n-     * @param duration duration to wait for all indexes to come online\n-     * @param unit TimeUnit of duration\n-     * @throws IllegalStateException if some index did not enter the ONLINE\n-     *             state within the given duration or if the index entered the\n-     *             FAILED state\n-     */\n-    void awaitIndexesOnline( long duration, TimeUnit unit );\n+  /**\n+   * The states that an index can be in. This mostly relates to tracking the background\n+   * population of an index, to tell when it is done populating and is online serving\n+   * requests.\n+   */\n+  enum IndexState\n+  {\n+    ONLINE,\n+    POPULATING,\n+    FAILED\n+  }\n+\n+  /**\n+   * Returns an {@link IndexCreator} where details about the index to create can be\n+   * specified. When all details have been entered {@link IndexCreator#create() create}\n+   * must be called for it to actually be created.\n+   * <p>\n+   * Creating an index enables indexing for nodes with the specified label. The index will\n+   * have the details supplied to the {@link IndexCreator returned index creator}.\n+   * All existing and all future nodes matching the index definition will be indexed,\n+   * speeding up future operations.\n+   *\n+   * @param label {@link Label label} on nodes to be indexed\n+   * @return an {@link IndexCreator} capable of providing details for, as well as creating\n+   * an index for the given {@link Label label}.\n+   */\n+  IndexCreator indexFor(Label label);\n+\n+  /**\n+   * @param label the {@link Label} to get {@link IndexDefinition indexes} for.\n+   * @return all {@link IndexDefinition indexes} attached to the given {@link Label label}.\n+   */\n+  Iterable<IndexDefinition> getIndexes(Label label);\n+\n+  /**\n+   * @return all {@link IndexDefinition indexes} in this database.\n+   */\n+  Iterable<IndexDefinition> getIndexes();\n+\n+  /**\n+   * Poll the database for the state of a given index. This can be used to track in which\n+   * state the creation of the index is, for example if it's still\n+   * {@link IndexState#POPULATING populating} in the background, or has come\n+   * {@link IndexState#ONLINE online}.\n+   *\n+   * @param index the index that we want to poll state for\n+   * @return the current {@link IndexState} of the index\n+   */\n+  IndexState getIndexState(IndexDefinition index);\n+\n+  /**\n+   * Poll the database for the population progress. This can be used to track the progress of the\n+   * population job associated to the given index. If the index is\n+   * {@link IndexState#POPULATING populating} or {@link IndexState#ONLINE online}, the state will contain current\n+   * progress. If the index is {@link IndexState#FAILED failed} then the state returned from this method\n+   * should be regarded as invalid.\n+   *\n+   * @param index the index that we want to poll state for\n+   * @return the current population progress for the index\n+   */\n+  IndexPopulationProgress getIndexPopulationProgress(IndexDefinition index);\n+\n+  /**\n+   * If {@link #getIndexState(IndexDefinition)} return {@link IndexState#FAILED} this method will\n+   * return the failure description.\n+   *\n+   * @param index the {@link IndexDefinition} to get failure from.\n+   * @return the failure description.\n+   * @throws IllegalStateException if the {@code index} isn't in a {@link IndexState#FAILED} state.\n+   */\n+  String getIndexFailure(IndexDefinition index);\n+\n+  /**\n+   * Returns a {@link ConstraintCreator} where details about the constraint can be\n+   * specified. When all details have been entered {@link ConstraintCreator#create()}\n+   * must be called for it to actually be created.\n+   * <p>\n+   * Creating a constraint will block on the {@linkplain ConstraintCreator#create() create method} until\n+   * all existing data has been verified for compliance. If any existing data doesn't comply with the constraint an\n+   * exception will be thrown, and the constraint will not be created.\n+   *\n+   * @param label the label this constraint is for.\n+   * @return a {@link ConstraintCreator} capable of providing details for, as well as creating\n+   * a constraint for the given {@linkplain Label label}.\n+   */\n+  ConstraintCreator constraintFor(Label label);\n+\n+  /**\n+   * @param label the {@linkplain Label label} to get constraints for.\n+   * @return all constraints for the given label.\n+   */\n+  Iterable<ConstraintDefinition> getConstraints(Label label);\n+\n+  /**\n+   * @param type the {@linkplain RelationshipType relationship type} to get constraints for.\n+   * @return all constraints for the given relationship type.\n+   */\n+  Iterable<ConstraintDefinition> getConstraints(RelationshipType type);\n+\n+  /**\n+   * @return all constraints\n+   */\n+  Iterable<ConstraintDefinition> getConstraints();\n+\n+  /**\n+   * Wait until an index comes online\n+   *\n+   * @param index    the index that we want to wait for\n+   * @param duration duration to wait for the index to come online\n+   * @param unit     TimeUnit of duration\n+   * @throws IllegalStateException if the index did not enter the ONLINE state\n+   *                               within the given duration or if the index entered the FAILED\n+   *                               state\n+   */\n+  void awaitIndexOnline(IndexDefinition index, long duration, TimeUnit unit);\n+\n+  /**\n+   * Wait until all indices comes online\n+   *\n+   * @param duration duration to wait for all indexes to come online\n+   * @param unit     TimeUnit of duration\n+   * @throws IllegalStateException if some index did not enter the ONLINE\n+   *                               state within the given duration or if the index entered the\n+   *                               FAILED state\n+   */\n+  void awaitIndexesOnline(long duration, TimeUnit unit);\n }\n",
            "diff_size": 129
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4415/Schema.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4415/Schema.java\nindex 634d0d13608..9441c0e0f54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4415/Schema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4415/Schema.java\n@@ -42,8 +42,7 @@ public interface Schema\n      */\n     enum IndexState\n     {\n-        ONLINE,\n-        POPULATING,\n+        ONLINE, POPULATING,\n         FAILED\n     }\n \n@@ -162,4 +161,4 @@ public interface Schema\n      *             FAILED state\n      */\n     void awaitIndexesOnline( long duration, TimeUnit unit );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}