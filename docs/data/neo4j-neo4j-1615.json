{
    "project_name": "neo4j-neo4j",
    "error_id": "1615",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1615/ConsistencyCheckingApplierFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1615/ConsistencyCheckingApplierFactory.java\nindex ee704d4acbb..e5d3b273f40 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1615/ConsistencyCheckingApplierFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1615/ConsistencyCheckingApplierFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import org.eclipse.collections.api.iterator.MutableLongIterator;\n@@ -34,22 +35,22 @@ import static org.neo4j.util.Preconditions.checkState;\n /**\n  * Performs record-local consistency checking when applying commands. For simplicity the checking is done after records have been applied,\n  * since doing it before would require more conditions and even distinction between recovery and online, where recovery would be even trickier.\n- *\n+ * <p>\n  * Currently only relationship chain checking is checked.\n  */\n class ConsistencyCheckingApplierFactory implements TransactionApplierFactory\n {\n     private final RelationshipStore relationshipStore;\n \n-    ConsistencyCheckingApplierFactory( NeoStores neoStores )\n+    ConsistencyCheckingApplierFactory(NeoStores neoStores)\n     {\n         this.relationshipStore = neoStores.getRelationshipStore();\n     }\n \n     @Override\n-    public TransactionApplier startTx( CommandsToApply transaction, BatchContext batchContext )\n+    public TransactionApplier startTx(CommandsToApply transaction, BatchContext batchContext)\n     {\n-        return new ConsistencyCheckingApplier( relationshipStore, transaction.cursorTracer() );\n+        return new ConsistencyCheckingApplier(relationshipStore, transaction.cursorTracer());\n     }\n \n     static class ConsistencyCheckingApplier extends TransactionApplier.Adapter\n@@ -58,16 +59,16 @@ class ConsistencyCheckingApplierFactory implements TransactionApplierFactory\n         private final RecordRelationshipScanCursor cursor;\n         private final RecordRelationshipScanCursor otherCursor;\n \n-        ConsistencyCheckingApplier( RelationshipStore relationshipStore, PageCursorTracer cursorTracer )\n+        ConsistencyCheckingApplier(RelationshipStore relationshipStore, PageCursorTracer cursorTracer)\n         {\n-            cursor = new RecordRelationshipScanCursor( relationshipStore, cursorTracer );\n-            otherCursor = new RecordRelationshipScanCursor( relationshipStore, cursorTracer );\n+            cursor = new RecordRelationshipScanCursor(relationshipStore, cursorTracer);\n+            otherCursor = new RecordRelationshipScanCursor(relationshipStore, cursorTracer);\n         }\n \n         @Override\n-        public boolean visitRelationshipCommand( Command.RelationshipCommand command )\n+        public boolean visitRelationshipCommand(Command.RelationshipCommand command)\n         {\n-            touchedRelationshipIds.add( command.getKey() );\n+            touchedRelationshipIds.add(command.getKey());\n             return false;\n         }\n \n@@ -75,60 +76,60 @@ class ConsistencyCheckingApplierFactory implements TransactionApplierFactory\n         public void close() throws Exception\n         {\n             MutableLongIterator ids = touchedRelationshipIds.longIterator();\n-            while ( ids.hasNext() )\n+            while (ids.hasNext())\n             {\n                 long id = ids.next();\n-                checkRelationship( id );\n+                checkRelationship(id);\n             }\n             cursor.close();\n             otherCursor.close();\n         }\n \n-        private void checkRelationship( long id )\n+        private void checkRelationship(long id)\n         {\n-            cursor.single( id );\n-            if ( !cursor.next() )\n+            cursor.single(id);\n+            if (!cursor.next())\n             {\n                 // It was deleted, so don't check it\n                 return;\n             }\n \n-            checkPrevPointer( cursor, cursor.isFirstInFirstChain(), cursor.getFirstPrevRel(), cursor.getFirstNode() );\n-            checkPrevPointer( cursor, cursor.isFirstInSecondChain(), cursor.getSecondPrevRel(), cursor.getSecondNode() );\n-            checkNextPointer( cursor, cursor.getFirstNextRel(), cursor.getFirstNode() );\n-            checkNextPointer( cursor, cursor.getSecondNextRel(), cursor.getSecondNode() );\n+            checkPrevPointer(cursor, cursor.isFirstInFirstChain(), cursor.getFirstPrevRel(), cursor.getFirstNode());\n+            checkPrevPointer(cursor, cursor.isFirstInSecondChain(), cursor.getSecondPrevRel(), cursor.getSecondNode());\n+            checkNextPointer(cursor, cursor.getFirstNextRel(), cursor.getFirstNode());\n+            checkNextPointer(cursor, cursor.getSecondNextRel(), cursor.getSecondNode());\n         }\n \n-        private void checkPrevPointer( RecordRelationshipScanCursor cursor, boolean firstInChain, long prevRel, long node )\n+        private void checkPrevPointer(RecordRelationshipScanCursor cursor, boolean firstInChain, long prevRel, long node)\n         {\n-            if ( firstInChain )\n+            if (firstInChain)\n             {\n                 // It's first in chain, nothing more to check\n                 return;\n             }\n \n-            otherCursor.single( prevRel );\n-            checkState( otherCursor.next(), \"%s prev refers to unused %s\", cursor, otherCursor );\n-            checkState( otherCursor.getFirstNode() == node || otherCursor.getSecondNode() == node,\n-                    \"%s prev refers to %s which is a relationship between other nodes\", cursor, otherCursor );\n+            otherCursor.single(prevRel);\n+            checkState(otherCursor.next(), \"%s prev refers to unused %s\", cursor, otherCursor);\n+            checkState(otherCursor.getFirstNode() == node || otherCursor.getSecondNode() == node,\n+              \"%s prev refers to %s which is a relationship between other nodes\", cursor, otherCursor);\n             long nextRel = otherCursor.getFirstNode() == node ? otherCursor.getFirstNextRel() : otherCursor.getSecondNextRel();\n-            checkState( nextRel == cursor.getId(), \"%s prev refers to %s that doesn't refer back\", cursor, otherCursor );\n+            checkState(nextRel == cursor.getId(), \"%s prev refers to %s that doesn't refer back\", cursor, otherCursor);\n         }\n \n-        private void checkNextPointer( RecordRelationshipScanCursor cursor, long nextRel, long node )\n+        private void checkNextPointer(RecordRelationshipScanCursor cursor, long nextRel, long node)\n         {\n-            if ( Record.NULL_REFERENCE.is( nextRel ) )\n+            if (Record.NULL_REFERENCE.is(nextRel))\n             {\n                 // It's last in chain, nothing more to check\n                 return;\n             }\n \n-            otherCursor.single( nextRel );\n-            checkState( otherCursor.next(), \"%s next refers to unused %s\",  cursor, otherCursor );\n-            checkState( otherCursor.getFirstNode() == node || otherCursor.getSecondNode() == node,\n-                    \"%s next refers to %s which is a relationship between other nodes\", cursor, otherCursor );\n+            otherCursor.single(nextRel);\n+            checkState(otherCursor.next(), \"%s next refers to unused %s\", cursor, otherCursor);\n+            checkState(otherCursor.getFirstNode() == node || otherCursor.getSecondNode() == node,\n+              \"%s next refers to %s which is a relationship between other nodes\", cursor, otherCursor);\n             long prevRel = otherCursor.getFirstNode() == node ? otherCursor.getFirstPrevRel() : otherCursor.getSecondPrevRel();\n-            checkState( prevRel == cursor.getId(), \"%s next refers to %s that doesn't refer back\", cursor, otherCursor );\n+            checkState(prevRel == cursor.getId(), \"%s next refers to %s that doesn't refer back\", cursor, otherCursor);\n         }\n     }\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}