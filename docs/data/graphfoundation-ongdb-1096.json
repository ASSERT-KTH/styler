{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1096",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1096/SingleSourceShortestPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1096/SingleSourceShortestPath.java\nindex 331ce72538e..06ddf7c2a17 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1096/SingleSourceShortestPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1096/SingleSourceShortestPath.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.List;\n@@ -32,100 +33,110 @@ import org.neo4j.graphdb.RelationshipType;\n  * An object implementing this encapsulates an algorithm able to solve the\n  * single source shortest path problem. I.e. it can find the shortest path(s)\n  * from a given start node to all other nodes in a network.\n+ *\n+ * @param <CostType> The datatype the edge weights are represented by.\n  * @author Patrik Larsson\n- * @param <CostType>\n- *            The datatype the edge weights are represented by.\n  */\n public interface SingleSourceShortestPath<CostType>\n {\n-    /**\n-     * This resets the calculation if we for some reason would like to redo it.\n-     */\n-    void reset();\n-\n-    /**\n-     * This sets the start node. The found paths will start in this node.\n-     * @param node\n-     *            The start node.\n-     */\n-    void setStartNode( Node node );\n-\n-    /**\n-     * A call to this will run the algorithm to find a single shortest path, if\n-     * not already done, and return it as an alternating list of\n-     * Node/Relationship.\n-     * @return The path as an alternating list of Node/Relationship.\n-     */\n-    List<PropertyContainer> getPath( Node targetNode );\n-\n-    /**\n-     * A call to this will run the algorithm, if not already done, and return\n-     * the found path to the target node if found as a list of nodes.\n-     * @return The path as a list of nodes.\n-     */\n-    List<Node> getPathAsNodes( Node targetNode );\n-\n-    /**\n-     * A call to this will run the algorithm to find a single shortest path, if\n-     * not already done, and return it as a list of Relationships.\n-     * @return The path as a list of Relationships.\n-     */\n-    List<Relationship> getPathAsRelationships( Node targetNode );\n-\n-    /**\n-     * A call to this will run the algorithm to find all shortest paths, if not\n-     * already done, and return them as alternating lists of Node/Relationship.\n-     * @return A list of the paths as alternating lists of Node/Relationship.\n-     */\n-    List<List<PropertyContainer>> getPaths( Node targetNode );\n-\n-    /**\n-     * A call to this will run the algorithm to find all shortest paths, if not\n-     * already done, and return them as lists of nodes.\n-     * @return A list of the paths as lists of nodes.\n-     */\n-    List<List<Node>> getPathsAsNodes( Node targetNode );\n-\n-    /**\n-     * A call to this will run the algorithm to find all shortest paths, if not\n-     * already done, and return them as lists of relationships.\n-     * @return A list of the paths as lists of relationships.\n-     */\n-    List<List<Relationship>> getPathsAsRelationships( Node targetNode );\n-\n-    /**\n-     * A call to this will run the algorithm, if not already done, and return\n-     * the cost for the shortest paths between the start node and the target\n-     * node.\n-     * @return The total weight of the shortest path(s).\n-     */\n-    CostType getCost( Node targetNode );\n-\n-    /**\n-     * @param node\n-     * @return The nodes previous to the argument node in all found shortest\n-     *         paths or null if there are no such nodes.\n-     */\n-    List<Node> getPredecessorNodes( Node node );\n-\n-    /**\n-     * This can be used to retrieve the entire data structure representing the\n-     * predecessors for every node.\n-     * @return\n-     */\n-    Map<Node,List<Relationship>> getPredecessors();\n-\n-    /**\n-     * This can be used to retrieve the Direction in which relationships should\n-     * be in the shortest path(s).\n-     * @return The direction.\n-     */\n-    Direction getDirection();\n-\n-    /**\n-     * This can be used to retrieve the types of relationships that are\n-     * traversed.\n-     * @return The relationship type(s).\n-     */\n-    RelationshipType[] getRelationshipTypes();\n+  /**\n+   * This resets the calculation if we for some reason would like to redo it.\n+   */\n+  void reset();\n+\n+  /**\n+   * This sets the start node. The found paths will start in this node.\n+   *\n+   * @param node The start node.\n+   */\n+  void setStartNode(Node node);\n+\n+  /**\n+   * A call to this will run the algorithm to find a single shortest path, if\n+   * not already done, and return it as an alternating list of\n+   * Node/Relationship.\n+   *\n+   * @return The path as an alternating list of Node/Relationship.\n+   */\n+  List<PropertyContainer> getPath(Node targetNode);\n+\n+  /**\n+   * A call to this will run the algorithm, if not already done, and return\n+   * the found path to the target node if found as a list of nodes.\n+   *\n+   * @return The path as a list of nodes.\n+   */\n+  List<Node> getPathAsNodes(Node targetNode);\n+\n+  /**\n+   * A call to this will run the algorithm to find a single shortest path, if\n+   * not already done, and return it as a list of Relationships.\n+   *\n+   * @return The path as a list of Relationships.\n+   */\n+  List<Relationship> getPathAsRelationships(Node targetNode);\n+\n+  /**\n+   * A call to this will run the algorithm to find all shortest paths, if not\n+   * already done, and return them as alternating lists of Node/Relationship.\n+   *\n+   * @return A list of the paths as alternating lists of Node/Relationship.\n+   */\n+  List<List<PropertyContainer>> getPaths(Node targetNode);\n+\n+  /**\n+   * A call to this will run the algorithm to find all shortest paths, if not\n+   * already done, and return them as lists of nodes.\n+   *\n+   * @return A list of the paths as lists of nodes.\n+   */\n+  List<List<Node>> getPathsAsNodes(Node targetNode);\n+\n+  /**\n+   * A call to this will run the algorithm to find all shortest paths, if not\n+   * already done, and return them as lists of relationships.\n+   *\n+   * @return A list of the paths as lists of relationships.\n+   */\n+  List<List<Relationship>> getPathsAsRelationships(Node targetNode);\n+\n+  /**\n+   * A call to this will run the algorithm, if not already done, and return\n+   * the cost for the shortest paths between the start node and the target\n+   * node.\n+   *\n+   * @return The total weight of the shortest path(s).\n+   */\n+  CostType getCost(Node targetNode);\n+\n+  /**\n+   * @param node\n+   * @return The nodes previous to the argument node in all found shortest\n+   * paths or null if there are no such nodes.\n+   */\n+  List<Node> getPredecessorNodes(Node node);\n+\n+  /**\n+   * This can be used to retrieve the entire data structure representing the\n+   * predecessors for every node.\n+   *\n+   * @return\n+   */\n+  Map<Node, List<Relationship>> getPredecessors();\n+\n+  /**\n+   * This can be used to retrieve the Direction in which relationships should\n+   * be in the shortest path(s).\n+   *\n+   * @return The direction.\n+   */\n+  Direction getDirection();\n+\n+  /**\n+   * This can be used to retrieve the types of relationships that are\n+   * traversed.\n+   *\n+   * @return The relationship type(s).\n+   */\n+  RelationshipType[] getRelationshipTypes();\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1096/SingleSourceShortestPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1096/SingleSourceShortestPath.java\nindex 331ce72538e..3e52a54e0ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1096/SingleSourceShortestPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1096/SingleSourceShortestPath.java\n@@ -128,4 +128,4 @@ public interface SingleSourceShortestPath<CostType>\n      * @return The relationship type(s).\n      */\n     RelationshipType[] getRelationshipTypes();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 410).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 621).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 839).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,096).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,305).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,530).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,774).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,946).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 2,095).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 2,259).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 2,411).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1096/SingleSourceShortestPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1096/SingleSourceShortestPath.java\nindex 331ce72538e..ae29220492e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1096/SingleSourceShortestPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1096/SingleSourceShortestPath.java\n@@ -21,7 +21,6 @@ package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.List;\n import java.util.Map;\n-\n import org.neo4j.graphdb.Direction;\n import org.neo4j.graphdb.Node;\n import org.neo4j.graphdb.PropertyContainer;\n@@ -36,96 +35,97 @@ import org.neo4j.graphdb.RelationshipType;\n  * @param <CostType>\n  *            The datatype the edge weights are represented by.\n  */\n+\n public interface SingleSourceShortestPath<CostType>\n {\n     /**\n      * This resets the calculation if we for some reason would like to redo it.\n      */\n-    void reset();\n+    void reset()\n+    ;\n \n     /**\n      * This sets the start node. The found paths will start in this node.\n      * @param node\n      *            The start node.\n-     */\n-    void setStartNode( Node node );\n+     */ void setStartNode( Node node )\n+                                                                                                                                                      ;\n \n     /**\n      * A call to this will run the algorithm to find a single shortest path, if\n      * not already done, and return it as an alternating list of\n      * Node/Relationship.\n      * @return The path as an alternating list of Node/Relationship.\n-     */\n-    List<PropertyContainer> getPath( Node targetNode );\n+     */ List<PropertyContainer> getPath( Node targetNode )\n+                                                                                                                                                                                                                                                                                                                                                                                                                         ;\n \n     /**\n      * A call to this will run the algorithm, if not already done, and return\n      * the found path to the target node if found as a list of nodes.\n      * @return The path as a list of nodes.\n-     */\n-    List<Node> getPathAsNodes( Node targetNode );\n+     */ List<Node> getPathAsNodes( Node targetNode )\nn \n     /**\n      * A call to this will run the algorithm to find a single shortest path, if\n      * not already done, and return it as a list of Relationships.\n      * @return The path as a list of Relationships.\n-     */\n-    List<Relationship> getPathAsRelationships( Node targetNode );\n+     */ List<Relationship> getPathAsRelationships( Node targetNode )\nn \n     /**\n      * A call to this will run the algorithm to find all shortest paths, if not\n      * already done, and return them as alternating lists of Node/Relationship.\n      * @return A list of the paths as alternating lists of Node/Relationship.\n-     */\n-    List<List<PropertyContainer>> getPaths( Node targetNode );\n+     */ List<List<PropertyContainer>> getPaths( Node targetNode )\nn \n     /**\n      * A call to this will run the algorithm to find all shortest paths, if not\n      * already done, and return them as lists of nodes.\n      * @return A list of the paths as lists of nodes.\n-     */\n-    List<List<Node>> getPathsAsNodes( Node targetNode );\n+     */ List<List<Node>> getPathsAsNodes( Node targetNode )\nn \n     /**\n      * A call to this will run the algorithm to find all shortest paths, if not\n      * already done, and return them as lists of relationships.\n      * @return A list of the paths as lists of relationships.\n-     */\n-    List<List<Relationship>> getPathsAsRelationships( Node targetNode );\n+     */ List<List<Relationship>> getPathsAsRelationships( Node targetNode )\nn \n     /**\n      * A call to this will run the algorithm, if not already done, and return\n      * the cost for the shortest paths between the start node and the target\n      * node.\n      * @return The total weight of the shortest path(s).\n-     */\n-    CostType getCost( Node targetNode );\n+     */ CostType getCost( Node targetNode )\nn \n     /**\n      * @param node\n      * @return The nodes previous to the argument node in all found shortest\n      *         paths or null if there are no such nodes.\n-     */\n-    List<Node> getPredecessorNodes( Node node );\n+     */ List<Node> getPredecessorNodes( Node node )\nn \n     /**\n      * This can be used to retrieve the entire data structure representing the\n      * predecessors for every node.\n      * @return\n-     */\n-    Map<Node,List<Relationship>> getPredecessors();\n+     */ Map<Node,List<Relationship>> getPredecessors()\nn \n     /**\n      * This can be used to retrieve the Direction in which relationships should\n      * be in the shortest path(s).\n      * @return The direction.\n-     */\n-    Direction getDirection();\n+     */ Direction getDirection()\nn \n     /**\n      * This can be used to retrieve the types of relationships that are\n      * traversed.\n      * @return The relationship type(s).\n-     */\n-    RelationshipType[] getRelationshipTypes();\n-}\n+     */ RelationshipType[] getRelationshipTypes()\n}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}