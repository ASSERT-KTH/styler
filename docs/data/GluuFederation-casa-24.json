{
    "project_name": "GluuFederation-casa",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "164",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 155).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        List<PersonPreferences> list = new ArrayList<>();\n        try {\n            list = persistenceService.find(PersonPreferences.class, persistenceService.getPeopleDn(), Filter.createPresenceFilter(\"oxTrustedDevicesInfo\"));\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/24/TrustedDevicesSweeper.java\nindex 88c0504a2c4..607854a31e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/24/TrustedDevicesSweeper.java\n@@ -68,9 +68,9 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n     public void setup() {\n         TrustedDevicesSettings tsettings = mainSettings.getTrustedDevicesSettings();\n         locationExpiration = TimeUnit.DAYS.toMillis(Optional.ofNullable(tsettings)\n-                .map(TrustedDevicesSettings::getLocationExpirationDays).orElse(TRUSTED_LOCATION_EXPIRATION_DAYS));\n+            .map(TrustedDevicesSettings::getLocationExpirationDays).orElse(TRUSTED_LOCATION_EXPIRATION_DAYS));\n         deviceExpiration = TimeUnit.DAYS.toMillis(Optional.ofNullable(tsettings)\n-                .map(TrustedDevicesSettings::getDeviceExpirationDays).orElse(TRUSTED_DEVICE_EXPIRATION_DAYS));\n+            .map(TrustedDevicesSettings::getDeviceExpirationDays).orElse(TRUSTED_DEVICE_EXPIRATION_DAYS));\n     }\n \n     public void activate(int gap) {\n@@ -101,7 +101,8 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n             String jsonStr = null;\n             try {\n                 String trustedDevicesInfo = persistenceService.getDecryptedString(person.getTrustedDevices());\n-                List<TrustedDevice> list = mapper.readValue(trustedDevicesInfo, new TypeReference<List<TrustedDevice>>() {});\n+                List<TrustedDevice> list = mapper.readValue(trustedDevicesInfo, new TypeReference<List<TrustedDevice>>() {\n+                });\n \n                 if (removeExpiredData(list, now)) {\n                     if (list.size() > 0) {\n@@ -161,7 +162,8 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n \n         List<PersonPreferences> list = new ArrayList<>();\n         try {\n-            list = persistenceService.find(PersonPreferences.class, persistenceService.getPeopleDn(), Filter.createPresenceFilter(\"oxTrustedDevicesInfo\"));\n+            list = persistenceService\n+                .find(PersonPreferences.class, persistenceService.getPeopleDn(), Filter.createPresenceFilter(\"oxTrustedDevicesInfo\"));\n         } catch (Exception e) {\n             logger.error(e.getMessage(), e);\n         }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/24/TrustedDevicesSweeper.java\nindex 88c0504a2c4..faad604e715 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/24/TrustedDevicesSweeper.java\n@@ -178,4 +178,4 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/24/TrustedDevicesSweeper.java\nindex 88c0504a2c4..9d7cd824f61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/24/TrustedDevicesSweeper.java\n@@ -13,7 +13,6 @@ import org.gluu.search.filter.Filter;\n import org.quartz.JobExecutionContext;\n import org.quartz.listeners.JobListenerSupport;\n import org.slf4j.Logger;\n-\n import javax.annotation.PostConstruct;\n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n@@ -26,6 +25,8 @@ import java.util.concurrent.TimeUnit;\n /**\n  * @author jgomer\n  */\n+\n+\n @Named\n @ApplicationScoped\n public class TrustedDevicesSweeper extends JobListenerSupport {\n@@ -44,7 +45,6 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n \n     @Inject\n     private MainSettings mainSettings;\n-\n     private String quartzJobName;\n     private long locationExpiration;\n     private long deviceExpiration;\n@@ -67,14 +67,14 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n \n     public void setup() {\n         TrustedDevicesSettings tsettings = mainSettings.getTrustedDevicesSettings();\n-        locationExpiration = TimeUnit.DAYS.toMillis(Optional.ofNullable(tsettings)\n-                .map(TrustedDevicesSettings::getLocationExpirationDays).orElse(TRUSTED_LOCATION_EXPIRATION_DAYS));\n-        deviceExpiration = TimeUnit.DAYS.toMillis(Optional.ofNullable(tsettings)\n-                .map(TrustedDevicesSettings::getDeviceExpirationDays).orElse(TRUSTED_DEVICE_EXPIRATION_DAYS));\n+        locationExpiration = TimeUnit.DAYS.toMillis(Optional.ofNullable(tsettings).map(TrustedDevicesSettings::getLocationExpirationDays).orElse(TRUSTED_LOCATION_EXPIRATION_DAYS));\n+        deviceExpiration = TimeUnit.DAYS.toMillis(Optional.ofNullable(tsettings).map(TrustedDevicesSettings::getDeviceExpirationDays).orElse(TRUSTED_DEVICE_EXPIRATION_DAYS));\n     }\n \n     public void activate(int gap) {\n+\n         try {\n+\n             int oneDay = (int) TimeUnit.DAYS.toSeconds(1);\n             timerService.addListener(this, quartzJobName);\n             //Start in one second and repeat indefinitely once every day\n@@ -92,17 +92,14 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n \n     @Override\n     public void jobToBeExecuted(JobExecutionContext context) {\n-\n         logger.info(\"TrustedDevicesSweeper. Running timer job\");\n         long now = System.currentTimeMillis();\n         List<PersonPreferences> people = getPeopleTrustedDevices();\n-\n         for (PersonPreferences person : people) {\n             String jsonStr = null;\n             try {\n                 String trustedDevicesInfo = persistenceService.getDecryptedString(person.getTrustedDevices());\n-                List<TrustedDevice> list = mapper.readValue(trustedDevicesInfo, new TypeReference<List<TrustedDevice>>() {});\n-\n+                List<TrustedDevice> list = mapper.readValue(trustedDevicesInfo, new TypeReference<List<TrustedDevice>>() { });\n                 if (removeExpiredData(list, now)) {\n                     if (list.size() > 0) {\n                         //update list\n@@ -128,16 +125,13 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n \n         boolean changed = false;\n         List<Integer> deviceIndexes = new ArrayList<>();\n-\n         for (int i = 0; i < list.size(); i++) {\n             TrustedDevice device = list.get(i);\n             List<TrustedOrigin> origins = device.getOrigins();\n-\n             if (origins != null) {\n                 List<Integer> origIndexes = new ArrayList<>();\n                 for (int j = 0; j < origins.size(); j++) {\n                     long timeStamp = origins.get(j).getTimestamp();\n-\n                     if (time - timeStamp > locationExpiration) {\n                         origIndexes.add(0, j);\n                     }\n@@ -154,11 +148,9 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n         //Right-to-left removal of expired devices\n         deviceIndexes.forEach(ind -> list.remove(ind.intValue()));\n         return changed;\n-\n     }\n \n     private List<PersonPreferences> getPeopleTrustedDevices() {\n-\n         List<PersonPreferences> list = new ArrayList<>();\n         try {\n             list = persistenceService.find(PersonPreferences.class, persistenceService.getPeopleDn(), Filter.createPresenceFilter(\"oxTrustedDevicesInfo\"));\n@@ -166,16 +158,13 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n             logger.error(e.getMessage(), e);\n         }\n         return list;\n-\n     }\n \n     private void updateTrustedDevices(PersonPreferences person, String value) {\n-\n         String uid = person.getUid();\n         logger.trace(\"TrustedDevicesSweeper. Cleaning expired trusted devices for user '{}'\", uid);\n         person.setTrustedDevices(value);\n         persistenceService.modify(person);\n-\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "column": "13",
                    "severity": "error",
                    "message": "'{' at column 13 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/24/TrustedDevicesSweeper.java\nindex 88c0504a2c4..1444c1369f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/24/TrustedDevicesSweeper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/24/TrustedDevicesSweeper.java\n@@ -160,9 +160,8 @@ public class TrustedDevicesSweeper extends JobListenerSupport {\n     private List<PersonPreferences> getPeopleTrustedDevices() {\n \n         List<PersonPreferences> list = new ArrayList<>();\n-        try {\n-            list = persistenceService.find(PersonPreferences.class, persistenceService.getPeopleDn(), Filter.createPresenceFilter(\"oxTrustedDevicesInfo\"));\n-        } catch (Exception e) {\n+        try {list= persistenceService.find(PersonPreferences.class, persistenceService.getPeopleDn(), Filter.createPresenceFilter(\"oxTrustedDevicesInfo\"));\n+    } catch (Exception e) {\n             logger.error(e.getMessage(), e);\n         }\n         return list;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}