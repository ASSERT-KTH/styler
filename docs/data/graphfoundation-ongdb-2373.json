{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2373",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "259",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "351",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "426",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "463",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "545",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "612",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "629",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "639",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "713",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "713",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "760",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2373/PhysicalLogCommandReaderV3_0_2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2373/PhysicalLogCommandReaderV3_0_2.java\nindex 59ab50e5aee..0e0dfc17b70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2373/PhysicalLogCommandReaderV3_0_2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2373/PhysicalLogCommandReaderV3_0_2.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.command;\n \n import java.io.IOException;\n@@ -65,724 +66,717 @@ import static org.neo4j.kernel.impl.util.IoPrimitiveUtils.read3bLengthAndString;\n \n public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n {\n-    @Override\n-    protected Command read( byte commandType, ReadableChannel channel ) throws IOException\n-    {\n-        switch ( commandType )\n-        {\n-        case NeoCommandType.NODE_COMMAND:\n-            return visitNodeCommand( channel );\n-        case NeoCommandType.PROP_COMMAND:\n-            return visitPropertyCommand( channel );\n-        case NeoCommandType.PROP_INDEX_COMMAND:\n-            return visitPropertyKeyTokenCommand( channel );\n-        case NeoCommandType.REL_COMMAND:\n-            return visitRelationshipCommand( channel );\n-        case NeoCommandType.REL_TYPE_COMMAND:\n-            return visitRelationshipTypeTokenCommand( channel );\n-        case NeoCommandType.LABEL_KEY_COMMAND:\n-            return visitLabelTokenCommand( channel );\n-        case NeoCommandType.NEOSTORE_COMMAND:\n-            return visitNeoStoreCommand( channel );\n-        case NeoCommandType.SCHEMA_RULE_COMMAND:\n-            return visitSchemaRuleCommand( channel );\n-        case NeoCommandType.REL_GROUP_COMMAND:\n-            return visitRelationshipGroupCommand( channel );\n-        case NeoCommandType.INDEX_DEFINE_COMMAND:\n-            return visitIndexDefineCommand( channel );\n-        case NeoCommandType.INDEX_ADD_COMMAND:\n-            return visitIndexAddNodeCommand( channel );\n-        case NeoCommandType.INDEX_ADD_RELATIONSHIP_COMMAND:\n-            return visitIndexAddRelationshipCommand( channel );\n-        case NeoCommandType.INDEX_REMOVE_COMMAND:\n-            return visitIndexRemoveCommand( channel );\n-        case NeoCommandType.INDEX_DELETE_COMMAND:\n-            return visitIndexDeleteCommand( channel );\n-        case NeoCommandType.INDEX_CREATE_COMMAND:\n-            return visitIndexCreateCommand( channel );\n-        case NeoCommandType.UPDATE_RELATIONSHIP_COUNTS_COMMAND:\n-            return visitRelationshipCountsCommand( channel );\n-        case NeoCommandType.UPDATE_NODE_COUNTS_COMMAND:\n-            return visitNodeCountsCommand( channel );\n-        default:\n-            throw unknownCommandType( commandType, channel );\n-        }\n-    }\n-\n-    private static final class IndexCommandHeader\n-    {\n-        byte valueType;\n-        byte entityType;\n-        boolean entityIdNeedsLong;\n-        int indexNameId;\n-        boolean startNodeNeedsLong;\n-        boolean endNodeNeedsLong;\n-        int keyId;\n-\n-        IndexCommandHeader( byte valueType, byte entityType, boolean entityIdNeedsLong, int indexNameId,\n-                boolean startNodeNeedsLong, boolean endNodeNeedsLong, int keyId )\n-        {\n-            this.valueType = valueType;\n-            this.entityType = entityType;\n-            this.entityIdNeedsLong = entityIdNeedsLong;\n-            this.indexNameId = indexNameId;\n-            this.startNodeNeedsLong = startNodeNeedsLong;\n-            this.endNodeNeedsLong = endNodeNeedsLong;\n-            this.keyId = keyId;\n-        }\n-    }\n-\n-    private Command visitNodeCommand( ReadableChannel channel ) throws IOException\n-    {\n-        long id = channel.getLong();\n-        NodeRecord before = readNodeRecord( id, channel );\n-        if ( before == null )\n-        {\n-            return null;\n-        }\n-        NodeRecord after = readNodeRecord( id, channel );\n-        if ( after == null )\n-        {\n-            return null;\n-        }\n-        if ( !before.inUse() && after.inUse() )\n-        {\n-            after.setCreated();\n-        }\n-        return new Command.NodeCommand( before, after );\n-    }\n-\n-    private Command visitRelationshipCommand( ReadableChannel channel ) throws IOException\n-    {\n-        long id = channel.getLong();\n-\n-        RelationshipRecord before = readRelationshipRecord( id, channel );\n-        if ( before == null )\n-        {\n-            return null;\n-        }\n-\n-        RelationshipRecord after = readRelationshipRecord( id, channel );\n-        if ( after == null )\n-        {\n-            return null;\n-        }\n-\n-        if ( !before.inUse() && after.inUse() )\n-        {\n-            after.setCreated();\n-        }\n-        return new Command.RelationshipCommand( before, after );\n-    }\n-\n-    private Command visitPropertyCommand( ReadableChannel channel ) throws IOException\n-    {\n-        // ID\n-        long id = channel.getLong(); // 8\n-        // BEFORE\n-        PropertyRecord before = readPropertyRecord( id, channel );\n-        if ( before == null )\n-        {\n-            return null;\n-        }\n-        // AFTER\n-        PropertyRecord after = readPropertyRecord( id, channel );\n-        if ( after == null )\n-        {\n-            return null;\n-        }\n-        return new Command.PropertyCommand( before, after );\n-    }\n-\n-    private Command visitRelationshipGroupCommand( ReadableChannel channel ) throws IOException\n-    {\n-        long id = channel.getLong();\n-        RelationshipGroupRecord before = readRelationshipGroupRecord( id, channel );\n-        RelationshipGroupRecord after = readRelationshipGroupRecord( id, channel );\n-        return new Command.RelationshipGroupCommand( before, after );\n-    }\n-\n-    private RelationshipGroupRecord readRelationshipGroupRecord( long id, ReadableChannel channel )\n-            throws IOException\n-    {\n-        byte flags = channel.get();\n-        boolean inUse = bitFlag( flags, Record.IN_USE.byteValue() );\n-        boolean requireSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n-        boolean hasSecondaryUnit = bitFlag( flags, Record.HAS_SECONDARY_UNIT );\n-        boolean usesFixedReferenceFormat = bitFlag( flags, Record.USES_FIXED_REFERENCE_FORMAT );\n-\n-        int type = unsignedShortToInt( channel.getShort() );\n-        RelationshipGroupRecord record = new RelationshipGroupRecord( id, type );\n-        record.setInUse( inUse );\n-        record.setNext( channel.getLong() );\n-        record.setFirstOut( channel.getLong() );\n-        record.setFirstIn( channel.getLong() );\n-        record.setFirstLoop( channel.getLong() );\n-        record.setOwningNode( channel.getLong() );\n-        record.setRequiresSecondaryUnit( requireSecondaryUnit );\n-        if ( hasSecondaryUnit )\n-        {\n-            record.setSecondaryUnitId( channel.getLong() );\n-        }\n-        record.setUseFixedReferences( usesFixedReferenceFormat );\n-        return record;\n-    }\n-\n-    private Command visitRelationshipTypeTokenCommand( ReadableChannel channel ) throws IOException\n-    {\n-        int id = channel.getInt();\n-        RelationshipTypeTokenRecord before = readRelationshipTypeTokenRecord( id, channel );\n-        if ( before == null )\n-        {\n-            return null;\n-        }\n-\n-        RelationshipTypeTokenRecord after = readRelationshipTypeTokenRecord( id, channel );\n-        if ( after == null )\n-        {\n-            return null;\n-        }\n-\n-        return new Command.RelationshipTypeTokenCommand( before, after );\n-    }\n-\n-    private RelationshipTypeTokenRecord readRelationshipTypeTokenRecord( int id, ReadableChannel channel )\n-            throws IOException\n-    {\n-        // in_use(byte)+type_blockId(int)+nr_type_records(int)\n-        byte inUseFlag = channel.get();\n-        boolean inUse = false;\n-        if ( (inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n-        {\n-            inUse = true;\n-        }\n-        else if ( inUseFlag != Record.NOT_IN_USE.byteValue() )\n-        {\n-            throw new IOException( \"Illegal in use flag: \" + inUseFlag );\n-        }\n-        RelationshipTypeTokenRecord record = new RelationshipTypeTokenRecord( id );\n-        record.setInUse( inUse );\n-        record.setNameId( channel.getInt() );\n-        int nrTypeRecords = channel.getInt();\n-        for ( int i = 0; i < nrTypeRecords; i++ )\n-        {\n-            DynamicRecord dr = readDynamicRecord( channel );\n-            if ( dr == null )\n-            {\n-                return null;\n-            }\n-            record.addNameRecord( dr );\n-        }\n-        return record;\n-    }\n-\n-    private Command visitLabelTokenCommand( ReadableChannel channel ) throws IOException\n-    {\n-        int id = channel.getInt();\n-        LabelTokenRecord before = readLabelTokenRecord( id, channel );\n-        if ( before == null )\n-        {\n-            return null;\n-        }\n-\n-        LabelTokenRecord after = readLabelTokenRecord( id, channel );\n-        if ( after == null )\n-        {\n-            return null;\n-        }\n-\n-        return new Command.LabelTokenCommand( before, after );\n-    }\n-\n-    private LabelTokenRecord readLabelTokenRecord( int id, ReadableChannel channel ) throws IOException\n-    {\n-        // in_use(byte)+type_blockId(int)+nr_type_records(int)\n-        byte inUseFlag = channel.get();\n-        boolean inUse = false;\n-        if ( (inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n-        {\n-            inUse = true;\n-        }\n-        else if ( inUseFlag != Record.NOT_IN_USE.byteValue() )\n-        {\n-            throw new IOException( \"Illegal in use flag: \" + inUseFlag );\n-        }\n-        LabelTokenRecord record = new LabelTokenRecord( id );\n-        record.setInUse( inUse );\n-        record.setNameId( channel.getInt() );\n-        int nrTypeRecords = channel.getInt();\n-        for ( int i = 0; i < nrTypeRecords; i++ )\n-        {\n-            DynamicRecord dr = readDynamicRecord( channel );\n-            if ( dr == null )\n-            {\n-                return null;\n-            }\n-            record.addNameRecord( dr );\n-        }\n-        return record;\n-    }\n-\n-    private Command visitPropertyKeyTokenCommand( ReadableChannel channel ) throws IOException\n-    {\n-        int id = channel.getInt();\n-        PropertyKeyTokenRecord before = readPropertyKeyTokenRecord( id, channel );\n-        if ( before == null )\n-        {\n-            return null;\n-        }\n-\n-        PropertyKeyTokenRecord after = readPropertyKeyTokenRecord( id, channel );\n-        if ( after == null )\n-        {\n-            return null;\n-        }\n-\n-        return new Command.PropertyKeyTokenCommand( before, after );\n-    }\n-\n-    private PropertyKeyTokenRecord readPropertyKeyTokenRecord( int id, ReadableChannel channel ) throws IOException\n-    {\n-        // in_use(byte)+count(int)+key_blockId(int)\n-        byte inUseFlag = channel.get();\n-        boolean inUse = false;\n-        if ( (inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n-        {\n-            inUse = true;\n-        }\n-        else if ( inUseFlag != Record.NOT_IN_USE.byteValue() )\n-        {\n-            throw new IOException( \"Illegal in use flag: \" + inUseFlag );\n-        }\n-        PropertyKeyTokenRecord record = new PropertyKeyTokenRecord( id );\n-        record.setInUse( inUse );\n-        record.setPropertyCount( channel.getInt() );\n-        record.setNameId( channel.getInt() );\n-        if ( readDynamicRecords( channel, record, PROPERTY_INDEX_DYNAMIC_RECORD_ADDER ) == -1 )\n-        {\n-            return null;\n-        }\n-        return record;\n-    }\n-\n-    private Command visitSchemaRuleCommand( ReadableChannel channel ) throws IOException\n-    {\n-        Collection<DynamicRecord> recordsBefore = new ArrayList<>();\n-        readDynamicRecords( channel, recordsBefore, COLLECTION_DYNAMIC_RECORD_ADDER );\n-        Collection<DynamicRecord> recordsAfter = new ArrayList<>();\n-        readDynamicRecords( channel, recordsAfter, COLLECTION_DYNAMIC_RECORD_ADDER );\n-        byte isCreated = channel.get();\n-        if ( 1 == isCreated )\n-        {\n-            for ( DynamicRecord record : recordsAfter )\n-            {\n-                record.setCreated();\n-            }\n-        }\n-        SchemaRule rule = Iterables.first( recordsAfter ).inUse()\n-                          ? readSchemaRule( recordsAfter )\n-                          : readSchemaRule( recordsBefore );\n-        return new Command.SchemaRuleCommand( recordsBefore, recordsAfter, rule );\n-    }\n-\n-    private Command visitNeoStoreCommand( ReadableChannel channel ) throws IOException\n-    {\n-        NeoStoreRecord before = readNeoStoreRecord( channel );\n-        NeoStoreRecord after = readNeoStoreRecord( channel );\n-        return new Command.NeoStoreCommand( before, after );\n-    }\n-\n-    private NeoStoreRecord readNeoStoreRecord( ReadableChannel channel ) throws IOException\n-    {\n-        long nextProp = channel.getLong();\n-        NeoStoreRecord record = new NeoStoreRecord();\n-        record.setNextProp( nextProp );\n-        return record;\n-    }\n-\n-    private NodeRecord readNodeRecord( long id, ReadableChannel channel ) throws IOException\n-    {\n-        byte flags = channel.get();\n-        boolean inUse = bitFlag( flags, Record.IN_USE.byteValue() );\n-        boolean requiresSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n-        boolean hasSecondaryUnit = bitFlag( flags, Record.HAS_SECONDARY_UNIT );\n-        boolean usesFixedReferenceFormat = bitFlag( flags, Record.USES_FIXED_REFERENCE_FORMAT );\n-\n-        NodeRecord record;\n-        Collection<DynamicRecord> dynamicLabelRecords = new ArrayList<>();\n-        long labelField = Record.NO_LABELS_FIELD.intValue();\n-        if ( inUse )\n-        {\n-            boolean dense = channel.get() == 1;\n-            record = new NodeRecord( id, dense, channel.getLong(), channel.getLong() );\n-            // labels\n-            labelField = channel.getLong();\n-            record.setRequiresSecondaryUnit( requiresSecondaryUnit );\n-            if ( hasSecondaryUnit )\n-            {\n-                record.setSecondaryUnitId( channel.getLong() );\n-            }\n-            record.setUseFixedReferences( usesFixedReferenceFormat );\n-        }\n-        else\n-        {\n-            record = new NodeRecord( id );\n-        }\n-        readDynamicRecords( channel, dynamicLabelRecords, COLLECTION_DYNAMIC_RECORD_ADDER );\n-        record.setLabelField( labelField, dynamicLabelRecords );\n-        record.setInUse( inUse );\n-        return record;\n-    }\n-\n-    private RelationshipRecord readRelationshipRecord( long id, ReadableChannel channel ) throws IOException\n-    {\n-        byte flags = channel.get();\n-        boolean inUse = bitFlag( flags, Record.IN_USE.byteValue() );\n-        boolean requiresSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n-        boolean hasSecondaryUnit = bitFlag( flags, Record.HAS_SECONDARY_UNIT );\n-        boolean usesFixedReferenceFormat = bitFlag( flags, Record.USES_FIXED_REFERENCE_FORMAT );\n-\n-        RelationshipRecord record;\n-        if ( inUse )\n-        {\n-            record = new RelationshipRecord( id, channel.getLong(), channel.getLong(), channel.getInt() );\n-            record.setInUse( true );\n-            record.setRequiresSecondaryUnit( requiresSecondaryUnit );\n-            record.setFirstPrevRel( channel.getLong() );\n-            record.setFirstNextRel( channel.getLong() );\n-            record.setSecondPrevRel( channel.getLong() );\n-            record.setSecondNextRel( channel.getLong() );\n-            record.setNextProp( channel.getLong() );\n-            byte extraByte = channel.get();\n-            record.setFirstInFirstChain( (extraByte & 0x1) > 0 );\n-            record.setFirstInSecondChain( (extraByte & 0x2) > 0 );\n-            if ( hasSecondaryUnit )\n-            {\n-                record.setSecondaryUnitId( channel.getLong() );\n-            }\n-            record.setUseFixedReferences( usesFixedReferenceFormat );\n-        }\n-        else\n-        {\n-            record = new RelationshipRecord( id, -1, -1, channel.getInt() );\n-            record.setInUse( false );\n-        }\n-        if ( bitFlag( flags, Record.CREATED_IN_TX ) )\n-        {\n-            record.setCreated();\n-        }\n-\n-        return record;\n-    }\n-\n-    private DynamicRecord readDynamicRecord( ReadableChannel channel ) throws IOException\n-    {\n-        // id+type+in_use(byte)+nr_of_bytes(int)+next_block(long)\n-        long id = channel.getLong();\n-        assert id >= 0 && id <= (1L << 36) - 1 : id + \" is not a valid dynamic record id\";\n-        int type = channel.getInt();\n-        byte inUseFlag = channel.get();\n-        boolean inUse = (inUseFlag & Record.IN_USE.byteValue()) != 0;\n-        DynamicRecord record = new DynamicRecord( id );\n-        record.setInUse( inUse, type );\n-        if ( inUse )\n-        {\n-            record.setStartRecord( (inUseFlag & Record.FIRST_IN_CHAIN.byteValue()) != 0 );\n-            int nrOfBytes = channel.getInt();\n-            assert nrOfBytes >= 0 && nrOfBytes < ((1 << 24) - 1) : nrOfBytes\n-                                                                   + \" is not valid for a number of bytes field of \" + \"a dynamic record\";\n-            long nextBlock = channel.getLong();\n-            assert (nextBlock >= 0 && nextBlock <= (1L << 36 - 1))\n-                   || (nextBlock == Record.NO_NEXT_BLOCK.intValue()) : nextBlock\n-                                                                       + \" is not valid for a next record field of \" + \"a dynamic record\";\n-            record.setNextBlock( nextBlock );\n-            byte[] data = new byte[nrOfBytes];\n-            channel.get( data, nrOfBytes );\n-            record.setData( data );\n-        }\n-        return record;\n-    }\n-\n-    private <T> int readDynamicRecords( ReadableChannel channel, T target, DynamicRecordAdder<T> adder )\n-            throws IOException\n-    {\n-        int numberOfRecords = channel.getInt();\n-        assert numberOfRecords >= 0;\n-        while ( numberOfRecords > 0 )\n-        {\n-            DynamicRecord read = readDynamicRecord( channel );\n-            if ( read == null )\n-            {\n-                return -1;\n-            }\n-            adder.add( target, read );\n-            numberOfRecords--;\n-        }\n-        return numberOfRecords;\n-    }\n-\n-    private PropertyRecord readPropertyRecord( long id, ReadableChannel channel ) throws IOException\n-    {\n-        // in_use(byte)+type(int)+key_indexId(int)+prop_blockId(long)+\n-        // prev_prop_id(long)+next_prop_id(long)\n-        PropertyRecord record = new PropertyRecord( id );\n-        byte flags = channel.get(); // 1\n-\n-        boolean inUse = bitFlag( flags, Record.IN_USE.byteValue() );\n-        boolean nodeProperty = !bitFlag( flags, Record.REL_PROPERTY.byteValue() );\n-        boolean requireSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n-        boolean hasSecondaryUnit = bitFlag( flags, Record.HAS_SECONDARY_UNIT );\n-        boolean usesFixedReferenceFormat = bitFlag( flags, Record.USES_FIXED_REFERENCE_FORMAT );\n-\n-        record.setRequiresSecondaryUnit( requireSecondaryUnit );\n-        record.setUseFixedReferences( usesFixedReferenceFormat );\n-\n-        long nextProp = channel.getLong(); // 8\n-        long prevProp = channel.getLong(); // 8\n-        record.setNextProp( nextProp );\n-        record.setPrevProp( prevProp );\n-\n-        long primitiveId = channel.getLong(); // 8\n-        if ( primitiveId != -1 && nodeProperty )\n-        {\n-            record.setNodeId( primitiveId );\n-        }\n-        else if ( primitiveId != -1 )\n-        {\n-            record.setRelId( primitiveId );\n-        }\n-        if ( hasSecondaryUnit )\n-        {\n-            record.setSecondaryUnitId( channel.getLong() );\n-        }\n-        int nrPropBlocks = channel.get();\n-        assert nrPropBlocks >= 0;\n-        if ( nrPropBlocks > 0 )\n-        {\n-            record.setInUse( true );\n-        }\n-        while ( nrPropBlocks-- > 0 )\n-        {\n-            PropertyBlock block = readPropertyBlock( channel );\n-            if ( block == null )\n-            {\n-                return null;\n-            }\n-            record.addPropertyBlock( block );\n-        }\n-        int deletedRecords = readDynamicRecords( channel, record, PROPERTY_DELETED_DYNAMIC_RECORD_ADDER );\n-        if ( deletedRecords == -1 )\n-        {\n-            return null;\n-        }\n-        assert deletedRecords >= 0;\n-        while ( deletedRecords-- > 0 )\n-        {\n-            DynamicRecord read = readDynamicRecord( channel );\n-            if ( read == null )\n-            {\n-                return null;\n-            }\n-            record.addDeletedRecord( read );\n-        }\n-        if ( (inUse && !record.inUse()) || (!inUse && record.inUse()) )\n-        {\n-            throw new IllegalStateException( \"Weird, inUse was read in as \" + inUse + \" but the record is \" + record );\n-        }\n-        return record;\n-    }\n-\n-    private PropertyBlock readPropertyBlock( ReadableChannel channel ) throws IOException\n-    {\n-        PropertyBlock toReturn = new PropertyBlock();\n-        byte blockSize = channel.get(); // the size is stored in bytes // 1\n-        assert blockSize > 0 && blockSize % 8 == 0 : blockSize + \" is not a valid block size value\";\n-        // Read in blocks\n-        long[] blocks = readLongs( channel, blockSize / 8 );\n-        assert blocks.length == blockSize / 8 : blocks.length\n-                                                + \" longs were read in while i asked for what corresponds to \" + blockSize;\n-\n-        assert PropertyType.getPropertyTypeOrThrow( blocks[0] ).calculateNumberOfBlocksUsed(\n-                blocks[0] ) == blocks.length : blocks.length + \" is not a valid number of blocks for type \"\n-                                               + PropertyType.getPropertyTypeOrThrow( blocks[0] );\n-        /*\n-         *  Ok, now we may be ready to return, if there are no DynamicRecords. So\n-         *  we start building the Object\n-         */\n-        toReturn.setValueBlocks( blocks );\n-        /*\n-         * Read in existence of DynamicRecords. Remember, this has already been\n-         * read in the buffer with the blocks, above.\n-         */\n-        if ( readDynamicRecords( channel, toReturn, PROPERTY_BLOCK_DYNAMIC_RECORD_ADDER ) == -1 )\n-        {\n-            return null;\n-        }\n-        return toReturn;\n-    }\n-\n-    private long[] readLongs( ReadableChannel channel, int count ) throws IOException\n-    {\n-        long[] result = new long[count];\n-        for ( int i = 0; i < count; i++ )\n-        {\n-            result[i] = channel.getLong();\n-        }\n-        return result;\n-    }\n-\n-    private SchemaRule readSchemaRule( Collection<DynamicRecord> recordsBefore )\n-    {\n-        // TODO: Why was this assertion here?\n-        //            assert first(recordsBefore).inUse() : \"Asked to deserialize schema records that were not in\n-        // use.\";\n-        SchemaRule rule;\n-        ByteBuffer deserialized = AbstractDynamicStore.concatData( recordsBefore, new byte[100] );\n-        try\n-        {\n-            rule = SchemaRuleSerialization.deserialize( Iterables.first( recordsBefore ).getId(), deserialized );\n-        }\n-        catch ( MalformedSchemaRuleException e )\n-        {\n-            return null;\n-        }\n-        return rule;\n-    }\n-\n-    private Command visitIndexAddNodeCommand( ReadableChannel channel ) throws IOException\n-    {\n-        IndexCommandHeader header = readIndexCommandHeader( channel );\n-        Number entityId = header.entityIdNeedsLong ? channel.getLong() : channel.getInt();\n-        Object value = readIndexValue( header.valueType, channel );\n-        AddNodeCommand command = new AddNodeCommand();\n-        command.init( header.indexNameId, entityId.longValue(), header.keyId, value );\n-        return command;\n-    }\n-\n-    private Command visitIndexAddRelationshipCommand( ReadableChannel channel ) throws IOException\n-    {\n-        IndexCommandHeader header = readIndexCommandHeader( channel );\n-        Number entityId = header.entityIdNeedsLong ? channel.getLong() : channel.getInt();\n-        Object value = readIndexValue( header.valueType, channel );\n-        Number startNode = header.startNodeNeedsLong ? channel.getLong() : channel.getInt();\n-        Number endNode = header.endNodeNeedsLong ? channel.getLong() : channel.getInt();\n-        AddRelationshipCommand command = new AddRelationshipCommand();\n-        command.init( header.indexNameId, entityId.longValue(), header.keyId, value, startNode.longValue(),\n-                endNode.longValue() );\n-        return command;\n-    }\n-\n-    private Command visitIndexRemoveCommand( ReadableChannel channel ) throws IOException\n-    {\n-        IndexCommandHeader header = readIndexCommandHeader( channel );\n-        Number entityId = header.entityIdNeedsLong ? channel.getLong() : channel.getInt();\n-        Object value = readIndexValue( header.valueType, channel );\n-        RemoveCommand command = new RemoveCommand();\n-        command.init( header.indexNameId, header.entityType, entityId.longValue(), header.keyId, value );\n-        return command;\n-    }\n-\n-    private Command visitIndexDeleteCommand( ReadableChannel channel ) throws IOException\n-    {\n-        IndexCommandHeader header = readIndexCommandHeader( channel );\n-        DeleteCommand command = new DeleteCommand();\n-        command.init( header.indexNameId, header.entityType );\n-        return command;\n-    }\n-\n-    private Command visitIndexCreateCommand( ReadableChannel channel ) throws IOException\n-    {\n-        IndexCommandHeader header = readIndexCommandHeader( channel );\n-        Map<String,String> config = read2bMap( channel );\n-        CreateCommand command = new CreateCommand();\n-        command.init( header.indexNameId, header.entityType, config );\n-        return command;\n-    }\n-\n-    private Command visitIndexDefineCommand( ReadableChannel channel ) throws IOException\n-    {\n-        readIndexCommandHeader( channel );\n-        Map<String,Integer> indexNames = readMap( channel );\n-        Map<String,Integer> keys = readMap( channel );\n-        IndexDefineCommand command = new IndexDefineCommand();\n-        command.init( indexNames, keys );\n-        return command;\n-    }\n-\n-    private Command visitNodeCountsCommand( ReadableChannel channel ) throws IOException\n+  @Override\n+  protected Command read(byte commandType, ReadableChannel channel) throws IOException\n+  {\n+    switch (commandType)\n+    {\n+      case NeoCommandType.NODE_COMMAND:\n+        return visitNodeCommand(channel);\n+      case NeoCommandType.PROP_COMMAND:\n+        return visitPropertyCommand(channel);\n+      case NeoCommandType.PROP_INDEX_COMMAND:\n+        return visitPropertyKeyTokenCommand(channel);\n+      case NeoCommandType.REL_COMMAND:\n+        return visitRelationshipCommand(channel);\n+      case NeoCommandType.REL_TYPE_COMMAND:\n+        return visitRelationshipTypeTokenCommand(channel);\n+      case NeoCommandType.LABEL_KEY_COMMAND:\n+        return visitLabelTokenCommand(channel);\n+      case NeoCommandType.NEOSTORE_COMMAND:\n+        return visitNeoStoreCommand(channel);\n+      case NeoCommandType.SCHEMA_RULE_COMMAND:\n+        return visitSchemaRuleCommand(channel);\n+      case NeoCommandType.REL_GROUP_COMMAND:\n+        return visitRelationshipGroupCommand(channel);\n+      case NeoCommandType.INDEX_DEFINE_COMMAND:\n+        return visitIndexDefineCommand(channel);\n+      case NeoCommandType.INDEX_ADD_COMMAND:\n+        return visitIndexAddNodeCommand(channel);\n+      case NeoCommandType.INDEX_ADD_RELATIONSHIP_COMMAND:\n+        return visitIndexAddRelationshipCommand(channel);\n+      case NeoCommandType.INDEX_REMOVE_COMMAND:\n+        return visitIndexRemoveCommand(channel);\n+      case NeoCommandType.INDEX_DELETE_COMMAND:\n+        return visitIndexDeleteCommand(channel);\n+      case NeoCommandType.INDEX_CREATE_COMMAND:\n+        return visitIndexCreateCommand(channel);\n+      case NeoCommandType.UPDATE_RELATIONSHIP_COUNTS_COMMAND:\n+        return visitRelationshipCountsCommand(channel);\n+      case NeoCommandType.UPDATE_NODE_COUNTS_COMMAND:\n+        return visitNodeCountsCommand(channel);\n+      default:\n+        throw unknownCommandType(commandType, channel);\n+    }\n+  }\n+\n+  private static final class IndexCommandHeader\n+  {\n+    byte valueType;\n+    byte entityType;\n+    boolean entityIdNeedsLong;\n+    int indexNameId;\n+    boolean startNodeNeedsLong;\n+    boolean endNodeNeedsLong;\n+    int keyId;\n+\n+    IndexCommandHeader(byte valueType, byte entityType, boolean entityIdNeedsLong, int indexNameId,\n+                       boolean startNodeNeedsLong, boolean endNodeNeedsLong, int keyId)\n+    {\n+      this.valueType = valueType;\n+      this.entityType = entityType;\n+      this.entityIdNeedsLong = entityIdNeedsLong;\n+      this.indexNameId = indexNameId;\n+      this.startNodeNeedsLong = startNodeNeedsLong;\n+      this.endNodeNeedsLong = endNodeNeedsLong;\n+      this.keyId = keyId;\n+    }\n+  }\n+\n+  private Command visitNodeCommand(ReadableChannel channel) throws IOException\n+  {\n+    long id = channel.getLong();\n+    NodeRecord before = readNodeRecord(id, channel);\n+    if (before == null)\n+    {\n+      return null;\n+    }\n+    NodeRecord after = readNodeRecord(id, channel);\n+    if (after == null)\n+    {\n+      return null;\n+    }\n+    if (!before.inUse() && after.inUse())\n+    {\n+      after.setCreated();\n+    }\n+    return new Command.NodeCommand(before, after);\n+  }\n+\n+  private Command visitRelationshipCommand(ReadableChannel channel) throws IOException\n+  {\n+    long id = channel.getLong();\n+\n+    RelationshipRecord before = readRelationshipRecord(id, channel);\n+    if (before == null)\n+    {\n+      return null;\n+    }\n+\n+    RelationshipRecord after = readRelationshipRecord(id, channel);\n+    if (after == null)\n+    {\n+      return null;\n+    }\n+\n+    if (!before.inUse() && after.inUse())\n+    {\n+      after.setCreated();\n+    }\n+    return new Command.RelationshipCommand(before, after);\n+  }\n+\n+  private Command visitPropertyCommand(ReadableChannel channel) throws IOException\n+  {\n+    // ID\n+    long id = channel.getLong(); // 8\n+    // BEFORE\n+    PropertyRecord before = readPropertyRecord(id, channel);\n+    if (before == null)\n+    {\n+      return null;\n+    }\n+    // AFTER\n+    PropertyRecord after = readPropertyRecord(id, channel);\n+    if (after == null)\n+    {\n+      return null;\n+    }\n+    return new Command.PropertyCommand(before, after);\n+  }\n+\n+  private Command visitRelationshipGroupCommand(ReadableChannel channel) throws IOException\n+  {\n+    long id = channel.getLong();\n+    RelationshipGroupRecord before = readRelationshipGroupRecord(id, channel);\n+    RelationshipGroupRecord after = readRelationshipGroupRecord(id, channel);\n+    return new Command.RelationshipGroupCommand(before, after);\n+  }\n+\n+  private RelationshipGroupRecord readRelationshipGroupRecord(long id, ReadableChannel channel)\n+      throws IOException\n+  {\n+    byte flags = channel.get();\n+    boolean inUse = bitFlag(flags, Record.IN_USE.byteValue());\n+    boolean requireSecondaryUnit = bitFlag(flags, Record.REQUIRE_SECONDARY_UNIT);\n+    boolean hasSecondaryUnit = bitFlag(flags, Record.HAS_SECONDARY_UNIT);\n+    boolean usesFixedReferenceFormat = bitFlag(flags, Record.USES_FIXED_REFERENCE_FORMAT);\n+\n+    int type = unsignedShortToInt(channel.getShort());\n+    RelationshipGroupRecord record = new RelationshipGroupRecord(id, type);\n+    record.setInUse(inUse);\n+    record.setNext(channel.getLong());\n+    record.setFirstOut(channel.getLong());\n+    record.setFirstIn(channel.getLong());\n+    record.setFirstLoop(channel.getLong());\n+    record.setOwningNode(channel.getLong());\n+    record.setRequiresSecondaryUnit(requireSecondaryUnit);\n+    if (hasSecondaryUnit)\n     {\n-        int labelId = channel.getInt();\n-        long delta = channel.getLong();\n-        return new Command.NodeCountsCommand( labelId, delta );\n+      record.setSecondaryUnitId(channel.getLong());\n     }\n+    record.setUseFixedReferences(usesFixedReferenceFormat);\n+    return record;\n+  }\n \n-    private Command visitRelationshipCountsCommand( ReadableChannel channel ) throws IOException\n+  private Command visitRelationshipTypeTokenCommand(ReadableChannel channel) throws IOException\n+  {\n+    int id = channel.getInt();\n+    RelationshipTypeTokenRecord before = readRelationshipTypeTokenRecord(id, channel);\n+    if (before == null)\n     {\n-        int startLabelId = channel.getInt();\n-        int typeId = channel.getInt();\n-        int endLabelId = channel.getInt();\n-        long delta = channel.getLong();\n-        return new Command.RelationshipCountsCommand( startLabelId, typeId, endLabelId, delta );\n+      return null;\n     }\n \n-    private Map<String,Integer> readMap( ReadableChannel channel ) throws IOException\n+    RelationshipTypeTokenRecord after = readRelationshipTypeTokenRecord(id, channel);\n+    if (after == null)\n     {\n-        int size = getUnsignedShort( channel );\n-        Map<String,Integer> result = new HashMap<>();\n-        for ( int i = 0; i < size; i++ )\n-        {\n-            String key = read2bLengthAndString( channel );\n-            int id = getUnsignedShort( channel );\n-            if ( key == null )\n-            {\n-                return null;\n-            }\n-            result.put( key, id );\n-        }\n-        return result;\n+      return null;\n     }\n \n-    private int getUnsignedShort( ReadableChannel channel ) throws IOException\n+    return new Command.RelationshipTypeTokenCommand(before, after);\n+  }\n+\n+  private RelationshipTypeTokenRecord readRelationshipTypeTokenRecord(int id, ReadableChannel channel)\n+      throws IOException\n+  {\n+    // in_use(byte)+type_blockId(int)+nr_type_records(int)\n+    byte inUseFlag = channel.get();\n+    boolean inUse = false;\n+    if ((inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue())\n+    {\n+      inUse = true;\n+    } else if (inUseFlag != Record.NOT_IN_USE.byteValue())\n+    {\n+      throw new IOException(\"Illegal in use flag: \" + inUseFlag);\n+    }\n+    RelationshipTypeTokenRecord record = new RelationshipTypeTokenRecord(id);\n+    record.setInUse(inUse);\n+    record.setNameId(channel.getInt());\n+    int nrTypeRecords = channel.getInt();\n+    for (int i = 0; i < nrTypeRecords; i++)\n     {\n-        int result = channel.getShort() & 0xFFFF;\n-        return result == 0xFFFF ? -1 : result;\n+      DynamicRecord dr = readDynamicRecord(channel);\n+      if (dr == null)\n+      {\n+        return null;\n+      }\n+      record.addNameRecord(dr);\n     }\n+    return record;\n+  }\n \n-    private IndexCommandHeader readIndexCommandHeader( ReadableChannel channel ) throws IOException\n+  private Command visitLabelTokenCommand(ReadableChannel channel) throws IOException\n+  {\n+    int id = channel.getInt();\n+    LabelTokenRecord before = readLabelTokenRecord(id, channel);\n+    if (before == null)\n     {\n-        byte firstHeaderByte = channel.get();\n-        byte valueType = (byte) ((firstHeaderByte & 0x1C) >> 2);\n-        byte entityType = (byte) ((firstHeaderByte & 0x2) >> 1);\n-        boolean entityIdNeedsLong = (firstHeaderByte & 0x1) > 0;\n-        byte secondHeaderByte = channel.get();\n-        boolean startNodeNeedsLong = (secondHeaderByte & 0x80) > 0;\n-        boolean endNodeNeedsLong = (secondHeaderByte & 0x40) > 0;\n-        int indexNameId = getUnsignedShort( channel );\n-        int keyId = getUnsignedShort( channel );\n-        return new IndexCommandHeader( valueType, entityType, entityIdNeedsLong, indexNameId, startNodeNeedsLong,\n-                endNodeNeedsLong, keyId );\n+      return null;\n     }\n \n-    private Object readIndexValue( byte valueType, ReadableChannel channel ) throws IOException\n+    LabelTokenRecord after = readLabelTokenRecord(id, channel);\n+    if (after == null)\n     {\n-        switch ( valueType )\n-        {\n-        case IndexCommand.VALUE_TYPE_NULL:\n-            return null;\n-        case IndexCommand.VALUE_TYPE_SHORT:\n-            return channel.getShort();\n-        case IndexCommand.VALUE_TYPE_INT:\n-            return channel.getInt();\n-        case IndexCommand.VALUE_TYPE_LONG:\n-            return channel.getLong();\n-        case IndexCommand.VALUE_TYPE_FLOAT:\n-            return channel.getFloat();\n-        case IndexCommand.VALUE_TYPE_DOUBLE:\n-            return channel.getDouble();\n-        case IndexCommand.VALUE_TYPE_STRING:\n-            return read3bLengthAndString( channel );\n-        default:\n-            throw new RuntimeException( \"Unknown value type \" + valueType );\n-        }\n+      return null;\n     }\n+\n+    return new Command.LabelTokenCommand(before, after);\n+  }\n+\n+  private LabelTokenRecord readLabelTokenRecord(int id, ReadableChannel channel) throws IOException\n+  {\n+    // in_use(byte)+type_blockId(int)+nr_type_records(int)\n+    byte inUseFlag = channel.get();\n+    boolean inUse = false;\n+    if ((inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue())\n+    {\n+      inUse = true;\n+    } else if (inUseFlag != Record.NOT_IN_USE.byteValue())\n+    {\n+      throw new IOException(\"Illegal in use flag: \" + inUseFlag);\n+    }\n+    LabelTokenRecord record = new LabelTokenRecord(id);\n+    record.setInUse(inUse);\n+    record.setNameId(channel.getInt());\n+    int nrTypeRecords = channel.getInt();\n+    for (int i = 0; i < nrTypeRecords; i++)\n+    {\n+      DynamicRecord dr = readDynamicRecord(channel);\n+      if (dr == null)\n+      {\n+        return null;\n+      }\n+      record.addNameRecord(dr);\n+    }\n+    return record;\n+  }\n+\n+  private Command visitPropertyKeyTokenCommand(ReadableChannel channel) throws IOException\n+  {\n+    int id = channel.getInt();\n+    PropertyKeyTokenRecord before = readPropertyKeyTokenRecord(id, channel);\n+    if (before == null)\n+    {\n+      return null;\n+    }\n+\n+    PropertyKeyTokenRecord after = readPropertyKeyTokenRecord(id, channel);\n+    if (after == null)\n+    {\n+      return null;\n+    }\n+\n+    return new Command.PropertyKeyTokenCommand(before, after);\n+  }\n+\n+  private PropertyKeyTokenRecord readPropertyKeyTokenRecord(int id, ReadableChannel channel) throws IOException\n+  {\n+    // in_use(byte)+count(int)+key_blockId(int)\n+    byte inUseFlag = channel.get();\n+    boolean inUse = false;\n+    if ((inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue())\n+    {\n+      inUse = true;\n+    } else if (inUseFlag != Record.NOT_IN_USE.byteValue())\n+    {\n+      throw new IOException(\"Illegal in use flag: \" + inUseFlag);\n+    }\n+    PropertyKeyTokenRecord record = new PropertyKeyTokenRecord(id);\n+    record.setInUse(inUse);\n+    record.setPropertyCount(channel.getInt());\n+    record.setNameId(channel.getInt());\n+    if (readDynamicRecords(channel, record, PROPERTY_INDEX_DYNAMIC_RECORD_ADDER) == -1)\n+    {\n+      return null;\n+    }\n+    return record;\n+  }\n+\n+  private Command visitSchemaRuleCommand(ReadableChannel channel) throws IOException\n+  {\n+    Collection<DynamicRecord> recordsBefore = new ArrayList<>();\n+    readDynamicRecords(channel, recordsBefore, COLLECTION_DYNAMIC_RECORD_ADDER);\n+    Collection<DynamicRecord> recordsAfter = new ArrayList<>();\n+    readDynamicRecords(channel, recordsAfter, COLLECTION_DYNAMIC_RECORD_ADDER);\n+    byte isCreated = channel.get();\n+    if (1 == isCreated)\n+    {\n+      for (DynamicRecord record : recordsAfter)\n+      {\n+        record.setCreated();\n+      }\n+    }\n+    SchemaRule rule = Iterables.first(recordsAfter).inUse()\n+        ? readSchemaRule(recordsAfter)\n+        : readSchemaRule(recordsBefore);\n+    return new Command.SchemaRuleCommand(recordsBefore, recordsAfter, rule);\n+  }\n+\n+  private Command visitNeoStoreCommand(ReadableChannel channel) throws IOException\n+  {\n+    NeoStoreRecord before = readNeoStoreRecord(channel);\n+    NeoStoreRecord after = readNeoStoreRecord(channel);\n+    return new Command.NeoStoreCommand(before, after);\n+  }\n+\n+  private NeoStoreRecord readNeoStoreRecord(ReadableChannel channel) throws IOException\n+  {\n+    long nextProp = channel.getLong();\n+    NeoStoreRecord record = new NeoStoreRecord();\n+    record.setNextProp(nextProp);\n+    return record;\n+  }\n+\n+  private NodeRecord readNodeRecord(long id, ReadableChannel channel) throws IOException\n+  {\n+    byte flags = channel.get();\n+    boolean inUse = bitFlag(flags, Record.IN_USE.byteValue());\n+    boolean requiresSecondaryUnit = bitFlag(flags, Record.REQUIRE_SECONDARY_UNIT);\n+    boolean hasSecondaryUnit = bitFlag(flags, Record.HAS_SECONDARY_UNIT);\n+    boolean usesFixedReferenceFormat = bitFlag(flags, Record.USES_FIXED_REFERENCE_FORMAT);\n+\n+    NodeRecord record;\n+    Collection<DynamicRecord> dynamicLabelRecords = new ArrayList<>();\n+    long labelField = Record.NO_LABELS_FIELD.intValue();\n+    if (inUse)\n+    {\n+      boolean dense = channel.get() == 1;\n+      record = new NodeRecord(id, dense, channel.getLong(), channel.getLong());\n+      // labels\n+      labelField = channel.getLong();\n+      record.setRequiresSecondaryUnit(requiresSecondaryUnit);\n+      if (hasSecondaryUnit)\n+      {\n+        record.setSecondaryUnitId(channel.getLong());\n+      }\n+      record.setUseFixedReferences(usesFixedReferenceFormat);\n+    } else\n+    {\n+      record = new NodeRecord(id);\n+    }\n+    readDynamicRecords(channel, dynamicLabelRecords, COLLECTION_DYNAMIC_RECORD_ADDER);\n+    record.setLabelField(labelField, dynamicLabelRecords);\n+    record.setInUse(inUse);\n+    return record;\n+  }\n+\n+  private RelationshipRecord readRelationshipRecord(long id, ReadableChannel channel) throws IOException\n+  {\n+    byte flags = channel.get();\n+    boolean inUse = bitFlag(flags, Record.IN_USE.byteValue());\n+    boolean requiresSecondaryUnit = bitFlag(flags, Record.REQUIRE_SECONDARY_UNIT);\n+    boolean hasSecondaryUnit = bitFlag(flags, Record.HAS_SECONDARY_UNIT);\n+    boolean usesFixedReferenceFormat = bitFlag(flags, Record.USES_FIXED_REFERENCE_FORMAT);\n+\n+    RelationshipRecord record;\n+    if (inUse)\n+    {\n+      record = new RelationshipRecord(id, channel.getLong(), channel.getLong(), channel.getInt());\n+      record.setInUse(true);\n+      record.setRequiresSecondaryUnit(requiresSecondaryUnit);\n+      record.setFirstPrevRel(channel.getLong());\n+      record.setFirstNextRel(channel.getLong());\n+      record.setSecondPrevRel(channel.getLong());\n+      record.setSecondNextRel(channel.getLong());\n+      record.setNextProp(channel.getLong());\n+      byte extraByte = channel.get();\n+      record.setFirstInFirstChain((extraByte & 0x1) > 0);\n+      record.setFirstInSecondChain((extraByte & 0x2) > 0);\n+      if (hasSecondaryUnit)\n+      {\n+        record.setSecondaryUnitId(channel.getLong());\n+      }\n+      record.setUseFixedReferences(usesFixedReferenceFormat);\n+    } else\n+    {\n+      record = new RelationshipRecord(id, -1, -1, channel.getInt());\n+      record.setInUse(false);\n+    }\n+    if (bitFlag(flags, Record.CREATED_IN_TX))\n+    {\n+      record.setCreated();\n+    }\n+\n+    return record;\n+  }\n+\n+  private DynamicRecord readDynamicRecord(ReadableChannel channel) throws IOException\n+  {\n+    // id+type+in_use(byte)+nr_of_bytes(int)+next_block(long)\n+    long id = channel.getLong();\n+    assert id >= 0 && id <= (1L << 36) - 1 : id + \" is not a valid dynamic record id\";\n+    int type = channel.getInt();\n+    byte inUseFlag = channel.get();\n+    boolean inUse = (inUseFlag & Record.IN_USE.byteValue()) != 0;\n+    DynamicRecord record = new DynamicRecord(id);\n+    record.setInUse(inUse, type);\n+    if (inUse)\n+    {\n+      record.setStartRecord((inUseFlag & Record.FIRST_IN_CHAIN.byteValue()) != 0);\n+      int nrOfBytes = channel.getInt();\n+      assert nrOfBytes >= 0 && nrOfBytes < ((1 << 24) - 1) : nrOfBytes\n+          + \" is not valid for a number of bytes field of \" + \"a dynamic record\";\n+      long nextBlock = channel.getLong();\n+      assert (nextBlock >= 0 && nextBlock <= (1L << 36 - 1))\n+          || (nextBlock == Record.NO_NEXT_BLOCK.intValue()) : nextBlock\n+          + \" is not valid for a next record field of \" + \"a dynamic record\";\n+      record.setNextBlock(nextBlock);\n+      byte[] data = new byte[nrOfBytes];\n+      channel.get(data, nrOfBytes);\n+      record.setData(data);\n+    }\n+    return record;\n+  }\n+\n+  private <T> int readDynamicRecords(ReadableChannel channel, T target, DynamicRecordAdder<T> adder)\n+      throws IOException\n+  {\n+    int numberOfRecords = channel.getInt();\n+    assert numberOfRecords >= 0;\n+    while (numberOfRecords > 0)\n+    {\n+      DynamicRecord read = readDynamicRecord(channel);\n+      if (read == null)\n+      {\n+        return -1;\n+      }\n+      adder.add(target, read);\n+      numberOfRecords--;\n+    }\n+    return numberOfRecords;\n+  }\n+\n+  private PropertyRecord readPropertyRecord(long id, ReadableChannel channel) throws IOException\n+  {\n+    // in_use(byte)+type(int)+key_indexId(int)+prop_blockId(long)+\n+    // prev_prop_id(long)+next_prop_id(long)\n+    PropertyRecord record = new PropertyRecord(id);\n+    byte flags = channel.get(); // 1\n+\n+    boolean inUse = bitFlag(flags, Record.IN_USE.byteValue());\n+    boolean nodeProperty = !bitFlag(flags, Record.REL_PROPERTY.byteValue());\n+    boolean requireSecondaryUnit = bitFlag(flags, Record.REQUIRE_SECONDARY_UNIT);\n+    boolean hasSecondaryUnit = bitFlag(flags, Record.HAS_SECONDARY_UNIT);\n+    boolean usesFixedReferenceFormat = bitFlag(flags, Record.USES_FIXED_REFERENCE_FORMAT);\n+\n+    record.setRequiresSecondaryUnit(requireSecondaryUnit);\n+    record.setUseFixedReferences(usesFixedReferenceFormat);\n+\n+    long nextProp = channel.getLong(); // 8\n+    long prevProp = channel.getLong(); // 8\n+    record.setNextProp(nextProp);\n+    record.setPrevProp(prevProp);\n+\n+    long primitiveId = channel.getLong(); // 8\n+    if (primitiveId != -1 && nodeProperty)\n+    {\n+      record.setNodeId(primitiveId);\n+    } else if (primitiveId != -1)\n+    {\n+      record.setRelId(primitiveId);\n+    }\n+    if (hasSecondaryUnit)\n+    {\n+      record.setSecondaryUnitId(channel.getLong());\n+    }\n+    int nrPropBlocks = channel.get();\n+    assert nrPropBlocks >= 0;\n+    if (nrPropBlocks > 0)\n+    {\n+      record.setInUse(true);\n+    }\n+    while (nrPropBlocks-- > 0)\n+    {\n+      PropertyBlock block = readPropertyBlock(channel);\n+      if (block == null)\n+      {\n+        return null;\n+      }\n+      record.addPropertyBlock(block);\n+    }\n+    int deletedRecords = readDynamicRecords(channel, record, PROPERTY_DELETED_DYNAMIC_RECORD_ADDER);\n+    if (deletedRecords == -1)\n+    {\n+      return null;\n+    }\n+    assert deletedRecords >= 0;\n+    while (deletedRecords-- > 0)\n+    {\n+      DynamicRecord read = readDynamicRecord(channel);\n+      if (read == null)\n+      {\n+        return null;\n+      }\n+      record.addDeletedRecord(read);\n+    }\n+    if ((inUse && !record.inUse()) || (!inUse && record.inUse()))\n+    {\n+      throw new IllegalStateException(\"Weird, inUse was read in as \" + inUse + \" but the record is \" + record);\n+    }\n+    return record;\n+  }\n+\n+  private PropertyBlock readPropertyBlock(ReadableChannel channel) throws IOException\n+  {\n+    PropertyBlock toReturn = new PropertyBlock();\n+    byte blockSize = channel.get(); // the size is stored in bytes // 1\n+    assert blockSize > 0 && blockSize % 8 == 0 : blockSize + \" is not a valid block size value\";\n+    // Read in blocks\n+    long[] blocks = readLongs(channel, blockSize / 8);\n+    assert blocks.length == blockSize / 8 : blocks.length\n+        + \" longs were read in while i asked for what corresponds to \" + blockSize;\n+\n+    assert PropertyType.getPropertyTypeOrThrow(blocks[0]).calculateNumberOfBlocksUsed(\n+        blocks[0]) == blocks.length : blocks.length + \" is not a valid number of blocks for type \"\n+        + PropertyType.getPropertyTypeOrThrow(blocks[0]);\n+    /*\n+     *  Ok, now we may be ready to return, if there are no DynamicRecords. So\n+     *  we start building the Object\n+     */\n+    toReturn.setValueBlocks(blocks);\n+    /*\n+     * Read in existence of DynamicRecords. Remember, this has already been\n+     * read in the buffer with the blocks, above.\n+     */\n+    if (readDynamicRecords(channel, toReturn, PROPERTY_BLOCK_DYNAMIC_RECORD_ADDER) == -1)\n+    {\n+      return null;\n+    }\n+    return toReturn;\n+  }\n+\n+  private long[] readLongs(ReadableChannel channel, int count) throws IOException\n+  {\n+    long[] result = new long[count];\n+    for (int i = 0; i < count; i++)\n+    {\n+      result[i] = channel.getLong();\n+    }\n+    return result;\n+  }\n+\n+  private SchemaRule readSchemaRule(Collection<DynamicRecord> recordsBefore)\n+  {\n+    // TODO: Why was this assertion here?\n+    //            assert first(recordsBefore).inUse() : \"Asked to deserialize schema records that were not in\n+    // use.\";\n+    SchemaRule rule;\n+    ByteBuffer deserialized = AbstractDynamicStore.concatData(recordsBefore, new byte[100]);\n+    try\n+    {\n+      rule = SchemaRuleSerialization.deserialize(Iterables.first(recordsBefore).getId(), deserialized);\n+    } catch (MalformedSchemaRuleException e)\n+    {\n+      return null;\n+    }\n+    return rule;\n+  }\n+\n+  private Command visitIndexAddNodeCommand(ReadableChannel channel) throws IOException\n+  {\n+    IndexCommandHeader header = readIndexCommandHeader(channel);\n+    Number entityId = header.entityIdNeedsLong ? channel.getLong() : channel.getInt();\n+    Object value = readIndexValue(header.valueType, channel);\n+    AddNodeCommand command = new AddNodeCommand();\n+    command.init(header.indexNameId, entityId.longValue(), header.keyId, value);\n+    return command;\n+  }\n+\n+  private Command visitIndexAddRelationshipCommand(ReadableChannel channel) throws IOException\n+  {\n+    IndexCommandHeader header = readIndexCommandHeader(channel);\n+    Number entityId = header.entityIdNeedsLong ? channel.getLong() : channel.getInt();\n+    Object value = readIndexValue(header.valueType, channel);\n+    Number startNode = header.startNodeNeedsLong ? channel.getLong() : channel.getInt();\n+    Number endNode = header.endNodeNeedsLong ? channel.getLong() : channel.getInt();\n+    AddRelationshipCommand command = new AddRelationshipCommand();\n+    command.init(header.indexNameId, entityId.longValue(), header.keyId, value, startNode.longValue(),\n+        endNode.longValue());\n+    return command;\n+  }\n+\n+  private Command visitIndexRemoveCommand(ReadableChannel channel) throws IOException\n+  {\n+    IndexCommandHeader header = readIndexCommandHeader(channel);\n+    Number entityId = header.entityIdNeedsLong ? channel.getLong() : channel.getInt();\n+    Object value = readIndexValue(header.valueType, channel);\n+    RemoveCommand command = new RemoveCommand();\n+    command.init(header.indexNameId, header.entityType, entityId.longValue(), header.keyId, value);\n+    return command;\n+  }\n+\n+  private Command visitIndexDeleteCommand(ReadableChannel channel) throws IOException\n+  {\n+    IndexCommandHeader header = readIndexCommandHeader(channel);\n+    DeleteCommand command = new DeleteCommand();\n+    command.init(header.indexNameId, header.entityType);\n+    return command;\n+  }\n+\n+  private Command visitIndexCreateCommand(ReadableChannel channel) throws IOException\n+  {\n+    IndexCommandHeader header = readIndexCommandHeader(channel);\n+    Map<String, String> config = read2bMap(channel);\n+    CreateCommand command = new CreateCommand();\n+    command.init(header.indexNameId, header.entityType, config);\n+    return command;\n+  }\n+\n+  private Command visitIndexDefineCommand(ReadableChannel channel) throws IOException\n+  {\n+    readIndexCommandHeader(channel);\n+    Map<String, Integer> indexNames = readMap(channel);\n+    Map<String, Integer> keys = readMap(channel);\n+    IndexDefineCommand command = new IndexDefineCommand();\n+    command.init(indexNames, keys);\n+    return command;\n+  }\n+\n+  private Command visitNodeCountsCommand(ReadableChannel channel) throws IOException\n+  {\n+    int labelId = channel.getInt();\n+    long delta = channel.getLong();\n+    return new Command.NodeCountsCommand(labelId, delta);\n+  }\n+\n+  private Command visitRelationshipCountsCommand(ReadableChannel channel) throws IOException\n+  {\n+    int startLabelId = channel.getInt();\n+    int typeId = channel.getInt();\n+    int endLabelId = channel.getInt();\n+    long delta = channel.getLong();\n+    return new Command.RelationshipCountsCommand(startLabelId, typeId, endLabelId, delta);\n+  }\n+\n+  private Map<String, Integer> readMap(ReadableChannel channel) throws IOException\n+  {\n+    int size = getUnsignedShort(channel);\n+    Map<String, Integer> result = new HashMap<>();\n+    for (int i = 0; i < size; i++)\n+    {\n+      String key = read2bLengthAndString(channel);\n+      int id = getUnsignedShort(channel);\n+      if (key == null)\n+      {\n+        return null;\n+      }\n+      result.put(key, id);\n+    }\n+    return result;\n+  }\n+\n+  private int getUnsignedShort(ReadableChannel channel) throws IOException\n+  {\n+    int result = channel.getShort() & 0xFFFF;\n+    return result == 0xFFFF ? -1 : result;\n+  }\n+\n+  private IndexCommandHeader readIndexCommandHeader(ReadableChannel channel) throws IOException\n+  {\n+    byte firstHeaderByte = channel.get();\n+    byte valueType = (byte) ((firstHeaderByte & 0x1C) >> 2);\n+    byte entityType = (byte) ((firstHeaderByte & 0x2) >> 1);\n+    boolean entityIdNeedsLong = (firstHeaderByte & 0x1) > 0;\n+    byte secondHeaderByte = channel.get();\n+    boolean startNodeNeedsLong = (secondHeaderByte & 0x80) > 0;\n+    boolean endNodeNeedsLong = (secondHeaderByte & 0x40) > 0;\n+    int indexNameId = getUnsignedShort(channel);\n+    int keyId = getUnsignedShort(channel);\n+    return new IndexCommandHeader(valueType, entityType, entityIdNeedsLong, indexNameId, startNodeNeedsLong,\n+        endNodeNeedsLong, keyId);\n+  }\n+\n+  private Object readIndexValue(byte valueType, ReadableChannel channel) throws IOException\n+  {\n+    switch (valueType)\n+    {\n+      case IndexCommand.VALUE_TYPE_NULL:\n+        return null;\n+      case IndexCommand.VALUE_TYPE_SHORT:\n+        return channel.getShort();\n+      case IndexCommand.VALUE_TYPE_INT:\n+        return channel.getInt();\n+      case IndexCommand.VALUE_TYPE_LONG:\n+        return channel.getLong();\n+      case IndexCommand.VALUE_TYPE_FLOAT:\n+        return channel.getFloat();\n+      case IndexCommand.VALUE_TYPE_DOUBLE:\n+        return channel.getDouble();\n+      case IndexCommand.VALUE_TYPE_STRING:\n+        return read3bLengthAndString(channel);\n+      default:\n+        throw new RuntimeException(\"Unknown value type \" + valueType);\n+    }\n+  }\n }\n",
            "diff_size": 1232
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "497",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "497",
                    "column": "70",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "497",
                    "column": "234",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "606",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2373/PhysicalLogCommandReaderV3_0_2.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2373/PhysicalLogCommandReaderV3_0_2.java\nindex 59ab50e5aee..9884c508a27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2373/PhysicalLogCommandReaderV3_0_2.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2373/PhysicalLogCommandReaderV3_0_2.java\n@@ -140,12 +140,14 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             return null;\n         }\n-        NodeRecord after = readNodeRecord( id, channel );\n+\n+NodeRecord after = readNodeRecord( id, channel );\n         if ( after == null )\n         {\n             return null;\n         }\n-        if ( !before.inUse() && after.inUse() )\n+\n+if ( !before.inUse() && after.inUse() )\n         {\n             after.setCreated();\n         }\n@@ -155,8 +157,7 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n     private Command visitRelationshipCommand( ReadableChannel channel ) throws IOException\n     {\n         long id = channel.getLong();\n-\n-        RelationshipRecord before = readRelationshipRecord( id, channel );\n+RelationshipRecord before = readRelationshipRecord( id, channel );\n         if ( before == null )\n         {\n             return null;\n@@ -202,9 +203,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         return new Command.RelationshipGroupCommand( before, after );\n     }\n \n-    private RelationshipGroupRecord readRelationshipGroupRecord( long id, ReadableChannel channel )\n-            throws IOException\n-    {\n+    private RelationshipGroupRecord readRelationshipGroupRecord( long id, ReadableChannel channel ) throws IOException\n+{\n         byte flags = channel.get();\n         boolean inUse = bitFlag( flags, Record.IN_USE.byteValue() );\n         boolean requireSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n@@ -246,13 +246,12 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         return new Command.RelationshipTypeTokenCommand( before, after );\n     }\n \n-    private RelationshipTypeTokenRecord readRelationshipTypeTokenRecord( int id, ReadableChannel channel )\n-            throws IOException\n-    {\n+    private RelationshipTypeTokenRecord readRelationshipTypeTokenRecord( int id, ReadableChannel channel ) throws IOException\n+{\n         // in_use(byte)+type_blockId(int)+nr_type_records(int)\n         byte inUseFlag = channel.get();\n         boolean inUse = false;\n-        if ( (inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n+        if ( ( inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n         {\n             inUse = true;\n         }\n@@ -260,7 +259,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             throw new IOException( \"Illegal in use flag: \" + inUseFlag );\n         }\n-        RelationshipTypeTokenRecord record = new RelationshipTypeTokenRecord( id );\n+\n+RelationshipTypeTokenRecord record = new RelationshipTypeTokenRecord( id );\n         record.setInUse( inUse );\n         record.setNameId( channel.getInt() );\n         int nrTypeRecords = channel.getInt();\n@@ -273,7 +273,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             }\n             record.addNameRecord( dr );\n         }\n-        return record;\n+\n+return record;\n     }\n \n     private Command visitLabelTokenCommand( ReadableChannel channel ) throws IOException\n@@ -299,7 +300,7 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         // in_use(byte)+type_blockId(int)+nr_type_records(int)\n         byte inUseFlag = channel.get();\n         boolean inUse = false;\n-        if ( (inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n+        if ( ( inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n         {\n             inUse = true;\n         }\n@@ -307,7 +308,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             throw new IOException( \"Illegal in use flag: \" + inUseFlag );\n         }\n-        LabelTokenRecord record = new LabelTokenRecord( id );\n+\n+LabelTokenRecord record = new LabelTokenRecord( id );\n         record.setInUse( inUse );\n         record.setNameId( channel.getInt() );\n         int nrTypeRecords = channel.getInt();\n@@ -320,7 +322,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             }\n             record.addNameRecord( dr );\n         }\n-        return record;\n+\n+return record;\n     }\n \n     private Command visitPropertyKeyTokenCommand( ReadableChannel channel ) throws IOException\n@@ -346,7 +349,7 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         // in_use(byte)+count(int)+key_blockId(int)\n         byte inUseFlag = channel.get();\n         boolean inUse = false;\n-        if ( (inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n+        if ( ( inUseFlag & Record.IN_USE.byteValue()) == Record.IN_USE.byteValue() )\n         {\n             inUse = true;\n         }\n@@ -354,7 +357,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             throw new IOException( \"Illegal in use flag: \" + inUseFlag );\n         }\n-        PropertyKeyTokenRecord record = new PropertyKeyTokenRecord( id );\n+\n+PropertyKeyTokenRecord record = new PropertyKeyTokenRecord( id );\n         record.setInUse( inUse );\n         record.setPropertyCount( channel.getInt() );\n         record.setNameId( channel.getInt() );\n@@ -362,7 +366,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             return null;\n         }\n-        return record;\n+\n+return record;\n     }\n \n     private Command visitSchemaRuleCommand( ReadableChannel channel ) throws IOException\n@@ -379,10 +384,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n                 record.setCreated();\n             }\n         }\n-        SchemaRule rule = Iterables.first( recordsAfter ).inUse()\n-                          ? readSchemaRule( recordsAfter )\n-                          : readSchemaRule( recordsBefore );\n-        return new Command.SchemaRuleCommand( recordsBefore, recordsAfter, rule );\n+        SchemaRule rule = Iterables.first( recordsAfter ).inUse() ? readSchemaRule( recordsAfter ) : readSchemaRule( recordsBefore );\n+return new Command.SchemaRuleCommand( recordsBefore, recordsAfter, rule );\n     }\n \n     private Command visitNeoStoreCommand( ReadableChannel channel ) throws IOException\n@@ -407,8 +410,7 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         boolean requiresSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n         boolean hasSecondaryUnit = bitFlag( flags, Record.HAS_SECONDARY_UNIT );\n         boolean usesFixedReferenceFormat = bitFlag( flags, Record.USES_FIXED_REFERENCE_FORMAT );\n-\n-        NodeRecord record;\n+NodeRecord record;\n         Collection<DynamicRecord> dynamicLabelRecords = new ArrayList<>();\n         long labelField = Record.NO_LABELS_FIELD.intValue();\n         if ( inUse )\n@@ -428,7 +430,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             record = new NodeRecord( id );\n         }\n-        readDynamicRecords( channel, dynamicLabelRecords, COLLECTION_DYNAMIC_RECORD_ADDER );\n+\n+readDynamicRecords( channel, dynamicLabelRecords, COLLECTION_DYNAMIC_RECORD_ADDER );\n         record.setLabelField( labelField, dynamicLabelRecords );\n         record.setInUse( inUse );\n         return record;\n@@ -441,8 +444,7 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         boolean requiresSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n         boolean hasSecondaryUnit = bitFlag( flags, Record.HAS_SECONDARY_UNIT );\n         boolean usesFixedReferenceFormat = bitFlag( flags, Record.USES_FIXED_REFERENCE_FORMAT );\n-\n-        RelationshipRecord record;\n+RelationshipRecord record;\n         if ( inUse )\n         {\n             record = new RelationshipRecord( id, channel.getLong(), channel.getLong(), channel.getInt() );\n@@ -454,8 +456,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             record.setSecondNextRel( channel.getLong() );\n             record.setNextProp( channel.getLong() );\n             byte extraByte = channel.get();\n-            record.setFirstInFirstChain( (extraByte & 0x1) > 0 );\n-            record.setFirstInSecondChain( (extraByte & 0x2) > 0 );\n+            record.setFirstInFirstChain( ( extraByte & 0x1) > 0 );\n+            record.setFirstInSecondChain( ( extraByte & 0x2) > 0 );\n             if ( hasSecondaryUnit )\n             {\n                 record.setSecondaryUnitId( channel.getLong() );\n@@ -467,7 +469,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             record = new RelationshipRecord( id, -1, -1, channel.getInt() );\n             record.setInUse( false );\n         }\n-        if ( bitFlag( flags, Record.CREATED_IN_TX ) )\n+\n+if ( bitFlag( flags, Record.CREATED_IN_TX ) )\n         {\n             record.setCreated();\n         }\n@@ -479,7 +482,7 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n     {\n         // id+type+in_use(byte)+nr_of_bytes(int)+next_block(long)\n         long id = channel.getLong();\n-        assert id >= 0 && id <= (1L << 36) - 1 : id + \" is not a valid dynamic record id\";\n+        assert id >= 0 && id <= ( 1L << 36) - 1 : id + \" is not a valid dynamic record id\";\n         int type = channel.getInt();\n         byte inUseFlag = channel.get();\n         boolean inUse = (inUseFlag & Record.IN_USE.byteValue()) != 0;\n@@ -487,25 +490,21 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         record.setInUse( inUse, type );\n         if ( inUse )\n         {\n-            record.setStartRecord( (inUseFlag & Record.FIRST_IN_CHAIN.byteValue()) != 0 );\n+            record.setStartRecord( ( inUseFlag & Record.FIRST_IN_CHAIN.byteValue()) != 0 );\n             int nrOfBytes = channel.getInt();\n-            assert nrOfBytes >= 0 && nrOfBytes < ((1 << 24) - 1) : nrOfBytes\n-                                                                   + \" is not valid for a number of bytes field of \" + \"a dynamic record\";\n-            long nextBlock = channel.getLong();\n-            assert (nextBlock >= 0 && nextBlock <= (1L << 36 - 1))\n-                   || (nextBlock == Record.NO_NEXT_BLOCK.intValue()) : nextBlock\n-                                                                       + \" is not valid for a next record field of \" + \"a dynamic record\";\n-            record.setNextBlock( nextBlock );\n+            assert nrOfBytes >= 0 && nrOfBytes < (( 1 << 24) - 1) : nrOfBytes + \" is not valid for a number of bytes field of \" + \"a dynamic record\";\n+    long nextBlock = channel.getLong();\n+            assert ( nextBlock >= 0 && nextBlock <= ( 1L << 36 - 1 ))|| ( nextBlock == Record.NO_NEXT_BLOCK.intValue() ) : nextBlock + \" is not valid for a next record field of \" + \"a dynamic record\"; record.setNextBlock( nextBlock );\n             byte[] data = new byte[nrOfBytes];\n             channel.get( data, nrOfBytes );\n             record.setData( data );\n         }\n-        return record;\n+\n+return record;\n     }\n \n-    private <T> int readDynamicRecords( ReadableChannel channel, T target, DynamicRecordAdder<T> adder )\n-            throws IOException\n-    {\n+    private <T> int readDynamicRecords( ReadableChannel channel, T target, DynamicRecordAdder<T> adder ) throws IOException\n+{\n         int numberOfRecords = channel.getInt();\n         assert numberOfRecords >= 0;\n         while ( numberOfRecords > 0 )\n@@ -518,7 +517,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             adder.add( target, read );\n             numberOfRecords--;\n         }\n-        return numberOfRecords;\n+\n+return numberOfRecords;\n     }\n \n     private PropertyRecord readPropertyRecord( long id, ReadableChannel channel ) throws IOException\n@@ -533,8 +533,7 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         boolean requireSecondaryUnit = bitFlag( flags, Record.REQUIRE_SECONDARY_UNIT );\n         boolean hasSecondaryUnit = bitFlag( flags, Record.HAS_SECONDARY_UNIT );\n         boolean usesFixedReferenceFormat = bitFlag( flags, Record.USES_FIXED_REFERENCE_FORMAT );\n-\n-        record.setRequiresSecondaryUnit( requireSecondaryUnit );\n+record.setRequiresSecondaryUnit( requireSecondaryUnit );\n         record.setUseFixedReferences( usesFixedReferenceFormat );\n \n         long nextProp = channel.getLong(); // 8\n@@ -551,7 +550,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             record.setRelId( primitiveId );\n         }\n-        if ( hasSecondaryUnit )\n+\n+if ( hasSecondaryUnit )\n         {\n             record.setSecondaryUnitId( channel.getLong() );\n         }\n@@ -575,7 +575,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             return null;\n         }\n-        assert deletedRecords >= 0;\n+\n+assert deletedRecords >= 0;\n         while ( deletedRecords-- > 0 )\n         {\n             DynamicRecord read = readDynamicRecord( channel );\n@@ -585,11 +586,13 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             }\n             record.addDeletedRecord( read );\n         }\n-        if ( (inUse && !record.inUse()) || (!inUse && record.inUse()) )\n+\n+if ( ( inUse && !record.inUse()) || (!inUse && record.inUse()) )\n         {\n             throw new IllegalStateException( \"Weird, inUse was read in as \" + inUse + \" but the record is \" + record );\n         }\n-        return record;\n+\n+return record;\n     }\n \n     private PropertyBlock readPropertyBlock( ReadableChannel channel ) throws IOException\n@@ -599,13 +602,9 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         assert blockSize > 0 && blockSize % 8 == 0 : blockSize + \" is not a valid block size value\";\n         // Read in blocks\n         long[] blocks = readLongs( channel, blockSize / 8 );\n-        assert blocks.length == blockSize / 8 : blocks.length\n-                                                + \" longs were read in while i asked for what corresponds to \" + blockSize;\n-\n-        assert PropertyType.getPropertyTypeOrThrow( blocks[0] ).calculateNumberOfBlocksUsed(\n-                blocks[0] ) == blocks.length : blocks.length + \" is not a valid number of blocks for type \"\n-                                               + PropertyType.getPropertyTypeOrThrow( blocks[0] );\n-        /*\n+        assert blocks.length == blockSize / 8 : blocks.length + \" longs were read in while i asked for what corresponds to \" + blockSize;\n+assert PropertyType.getPropertyTypeOrThrow( blocks[0] ).calculateNumberOfBlocksUsed( blocks[0] ) == blocks.length : blocks.length + \" is not a valid number of blocks for type \" + PropertyType.getPropertyTypeOrThrow( blocks[0] );\n+    /*\n          *  Ok, now we may be ready to return, if there are no DynamicRecords. So\n          *  we start building the Object\n          */\n@@ -618,7 +617,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             return null;\n         }\n-        return toReturn;\n+\n+return toReturn;\n     }\n \n     private long[] readLongs( ReadableChannel channel, int count ) throws IOException\n@@ -628,7 +628,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             result[i] = channel.getLong();\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private SchemaRule readSchemaRule( Collection<DynamicRecord> recordsBefore )\n@@ -646,7 +647,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         {\n             return null;\n         }\n-        return rule;\n+\n+return rule;\n     }\n \n     private Command visitIndexAddNodeCommand( ReadableChannel channel ) throws IOException\n@@ -667,9 +669,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n         Number startNode = header.startNodeNeedsLong ? channel.getLong() : channel.getInt();\n         Number endNode = header.endNodeNeedsLong ? channel.getLong() : channel.getInt();\n         AddRelationshipCommand command = new AddRelationshipCommand();\n-        command.init( header.indexNameId, entityId.longValue(), header.keyId, value, startNode.longValue(),\n-                endNode.longValue() );\n-        return command;\n+        command.init( header.indexNameId, entityId.longValue(), header.keyId, value, startNode.longValue(), endNode.longValue() );\n+return command;\n     }\n \n     private Command visitIndexRemoveCommand( ReadableChannel channel ) throws IOException\n@@ -739,7 +740,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             }\n             result.put( key, id );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private int getUnsignedShort( ReadableChannel channel ) throws IOException\n@@ -751,8 +753,8 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n     private IndexCommandHeader readIndexCommandHeader( ReadableChannel channel ) throws IOException\n     {\n         byte firstHeaderByte = channel.get();\n-        byte valueType = (byte) ((firstHeaderByte & 0x1C) >> 2);\n-        byte entityType = (byte) ((firstHeaderByte & 0x2) >> 1);\n+        byte valueType = (byte) ((firstHeaderByte & 0x1C) >> 2 );\n+        byte entityType = (byte) ((firstHeaderByte & 0x2) >> 1 );\n         boolean entityIdNeedsLong = (firstHeaderByte & 0x1) > 0;\n         byte secondHeaderByte = channel.get();\n         boolean startNodeNeedsLong = (secondHeaderByte & 0x80) > 0;\n@@ -785,4 +787,4 @@ public class PhysicalLogCommandReaderV3_0_2 extends BaseCommandReader\n             throw new RuntimeException( \"Unknown value type \" + valueType );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 88
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}