{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3122",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3122/BaseRecordFormats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3122/BaseRecordFormats.java\nindex 28bfd2e95bb..be58fc1c97e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3122/BaseRecordFormats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3122/BaseRecordFormats.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import java.util.Set;\n@@ -33,123 +34,123 @@ import static org.neo4j.helpers.ArrayUtil.contains;\n  */\n public abstract class BaseRecordFormats implements RecordFormats\n {\n-    private final int generation;\n-    private final Capability[] capabilities;\n-    private final String storeVersion;\n-    private final String introductionVersion;\n-\n-    protected BaseRecordFormats( String storeVersion, String introductionVersion, int generation,\n-            Capability... capabilities )\n-    {\n-        this.storeVersion = storeVersion;\n-        this.generation = generation;\n-        this.capabilities = capabilities;\n-        this.introductionVersion = introductionVersion;\n-    }\n-\n-    @Override\n-    public String storeVersion()\n-    {\n-        return storeVersion;\n-    }\n-\n-    @Override\n-    public String introductionVersion()\n-    {\n-        return introductionVersion;\n-    }\n-\n-    @Override\n-    public RecordFormat<MetaDataRecord> metaData()\n-    {\n-        return new MetaDataRecordFormat();\n-    }\n-\n-    @Override\n-    public boolean equals( Object obj )\n+  private final int generation;\n+  private final Capability[] capabilities;\n+  private final String storeVersion;\n+  private final String introductionVersion;\n+\n+  protected BaseRecordFormats(String storeVersion, String introductionVersion, int generation,\n+                              Capability... capabilities)\n+  {\n+    this.storeVersion = storeVersion;\n+    this.generation = generation;\n+    this.capabilities = capabilities;\n+    this.introductionVersion = introductionVersion;\n+  }\n+\n+  @Override\n+  public String storeVersion()\n+  {\n+    return storeVersion;\n+  }\n+\n+  @Override\n+  public String introductionVersion()\n+  {\n+    return introductionVersion;\n+  }\n+\n+  @Override\n+  public RecordFormat<MetaDataRecord> metaData()\n+  {\n+    return new MetaDataRecordFormat();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (obj == null || !(obj instanceof RecordFormats))\n     {\n-        if ( obj == null || !(obj instanceof RecordFormats) )\n-        {\n-            return false;\n-        }\n-\n-        RecordFormats other = (RecordFormats) obj;\n-        return  node().equals( other.node() ) &&\n-                relationship().equals( other.relationship() ) &&\n-                relationshipGroup().equals( other.relationshipGroup() ) &&\n-                property().equals( other.property() ) &&\n-                labelToken().equals( other.labelToken() ) &&\n-                relationshipTypeToken().equals( other.relationshipTypeToken() ) &&\n-                propertyKeyToken().equals( other.propertyKeyToken() ) &&\n-                dynamic().equals( other.dynamic() );\n+      return false;\n     }\n \n-    @Override\n-    public int hashCode()\n+    RecordFormats other = (RecordFormats) obj;\n+    return node().equals(other.node()) &&\n+        relationship().equals(other.relationship()) &&\n+        relationshipGroup().equals(other.relationshipGroup()) &&\n+        property().equals(other.property()) &&\n+        labelToken().equals(other.labelToken()) &&\n+        relationshipTypeToken().equals(other.relationshipTypeToken()) &&\n+        propertyKeyToken().equals(other.propertyKeyToken()) &&\n+        dynamic().equals(other.dynamic());\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int hashCode = 17;\n+    hashCode = 31 * hashCode + node().hashCode();\n+    hashCode = 31 * hashCode + relationship().hashCode();\n+    hashCode = 31 * hashCode + relationshipGroup().hashCode();\n+    hashCode = 31 * hashCode + property().hashCode();\n+    hashCode = 31 * hashCode + labelToken().hashCode();\n+    hashCode = 31 * hashCode + relationshipTypeToken().hashCode();\n+    hashCode = 31 * hashCode + propertyKeyToken().hashCode();\n+    hashCode = 31 * hashCode + dynamic().hashCode();\n+    return hashCode;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"RecordFormat:\" + getClass().getSimpleName() + \"[\" + storeVersion() + \"]\";\n+  }\n+\n+  @Override\n+  public int generation()\n+  {\n+    return generation;\n+  }\n+\n+  @Override\n+  public Capability[] capabilities()\n+  {\n+    return capabilities;\n+  }\n+\n+  @Override\n+  public boolean hasCapability(Capability capability)\n+  {\n+    return contains(capabilities(), capability);\n+  }\n+\n+  public static boolean hasCompatibleCapabilities(RecordFormats one, RecordFormats other, CapabilityType type)\n+  {\n+    Set<Capability> myFormatCapabilities = Stream.of(one.capabilities())\n+        .filter(capability -> capability.isType(type)).collect(toSet());\n+    Set<Capability> otherFormatCapabilities = Stream.of(other.capabilities())\n+        .filter(capability -> capability.isType(type)).collect(toSet());\n+\n+    if (myFormatCapabilities.equals(otherFormatCapabilities))\n     {\n-        int hashCode = 17;\n-        hashCode = 31 * hashCode + node().hashCode();\n-        hashCode = 31 * hashCode + relationship().hashCode();\n-        hashCode = 31 * hashCode + relationshipGroup().hashCode();\n-        hashCode = 31 * hashCode + property().hashCode();\n-        hashCode = 31 * hashCode + labelToken().hashCode();\n-        hashCode = 31 * hashCode + relationshipTypeToken().hashCode();\n-        hashCode = 31 * hashCode + propertyKeyToken().hashCode();\n-        hashCode = 31 * hashCode + dynamic().hashCode();\n-        return hashCode;\n+      // If they have the same capabilities then of course they are compatible\n+      return true;\n     }\n \n-    @Override\n-    public String toString()\n-    {\n-        return \"RecordFormat:\" + getClass().getSimpleName() + \"[\" + storeVersion() + \"]\";\n-    }\n-\n-    @Override\n-    public int generation()\n-    {\n-        return generation;\n-    }\n-\n-    @Override\n-    public Capability[] capabilities()\n-    {\n-        return capabilities;\n-    }\n+    boolean capabilitiesNotRemoved = otherFormatCapabilities.containsAll(myFormatCapabilities);\n \n-    @Override\n-    public boolean hasCapability( Capability capability )\n-    {\n-        return contains( capabilities(), capability );\n-    }\n+    otherFormatCapabilities.removeAll(myFormatCapabilities);\n+    boolean allAddedAreAdditive = otherFormatCapabilities.stream().allMatch(Capability::isAdditive);\n \n-    public static boolean hasCompatibleCapabilities( RecordFormats one, RecordFormats other, CapabilityType type )\n-    {\n-        Set<Capability> myFormatCapabilities = Stream.of( one.capabilities() )\n-                .filter( capability -> capability.isType( type ) ).collect( toSet() );\n-        Set<Capability> otherFormatCapabilities = Stream.of( other.capabilities() )\n-                .filter( capability -> capability.isType( type ) ).collect( toSet() );\n-\n-        if ( myFormatCapabilities.equals( otherFormatCapabilities ) )\n-        {\n-            // If they have the same capabilities then of course they are compatible\n-            return true;\n-        }\n-\n-        boolean capabilitiesNotRemoved = otherFormatCapabilities.containsAll( myFormatCapabilities );\n-\n-        otherFormatCapabilities.removeAll( myFormatCapabilities );\n-        boolean allAddedAreAdditive = otherFormatCapabilities.stream().allMatch( Capability::isAdditive );\n-\n-        // Even if capabilities of the two aren't the same then there's a special case where if the additional\n-        // capabilities of the other format are all additive then they are also compatible because no data\n-        // in the existing store needs to be migrated.\n-        return capabilitiesNotRemoved && allAddedAreAdditive;\n-    }\n+    // Even if capabilities of the two aren't the same then there's a special case where if the additional\n+    // capabilities of the other format are all additive then they are also compatible because no data\n+    // in the existing store needs to be migrated.\n+    return capabilitiesNotRemoved && allAddedAreAdditive;\n+  }\n \n-    @Override\n-    public boolean hasCompatibleCapabilities( RecordFormats other, CapabilityType type )\n-    {\n-        return hasCompatibleCapabilities( this, other, type );\n-    }\n+  @Override\n+  public boolean hasCompatibleCapabilities(RecordFormats other, CapabilityType type)\n+  {\n+    return hasCompatibleCapabilities(this, other, type);\n+  }\n }\n",
            "diff_size": 169
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3122/BaseRecordFormats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3122/BaseRecordFormats.java\nindex 28bfd2e95bb..59f1cdd1753 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3122/BaseRecordFormats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3122/BaseRecordFormats.java\n@@ -68,14 +68,13 @@ public abstract class BaseRecordFormats implements RecordFormats\n     @Override\n     public boolean equals( Object obj )\n     {\n-        if ( obj == null || !(obj instanceof RecordFormats) )\n+        if ( obj == null || !( obj instanceof RecordFormats) )\n         {\n             return false;\n         }\n \n         RecordFormats other = (RecordFormats) obj;\n-        return  node().equals( other.node() ) &&\n-                relationship().equals( other.relationship() ) &&\n+        return node().equals( other.node() ) && relationship().equals( other.relationship() ) &&\n                 relationshipGroup().equals( other.relationshipGroup() ) &&\n                 property().equals( other.property() ) &&\n                 labelToken().equals( other.labelToken() ) &&\n@@ -125,20 +124,16 @@ public abstract class BaseRecordFormats implements RecordFormats\n \n     public static boolean hasCompatibleCapabilities( RecordFormats one, RecordFormats other, CapabilityType type )\n     {\n-        Set<Capability> myFormatCapabilities = Stream.of( one.capabilities() )\n-                .filter( capability -> capability.isType( type ) ).collect( toSet() );\n-        Set<Capability> otherFormatCapabilities = Stream.of( other.capabilities() )\n-                .filter( capability -> capability.isType( type ) ).collect( toSet() );\n-\n-        if ( myFormatCapabilities.equals( otherFormatCapabilities ) )\n+        Set<Capability> myFormatCapabilities = Stream.of( one.capabilities() ).filter( capability -> capability.isType( type ) ).collect( toSet() );\n+Set<Capability> otherFormatCapabilities = Stream.of( other.capabilities() ).filter( capability -> capability.isType( type ) ).collect( toSet() );\n+if ( myFormatCapabilities.equals( otherFormatCapabilities ) )\n         {\n             // If they have the same capabilities then of course they are compatible\n             return true;\n         }\n \n         boolean capabilitiesNotRemoved = otherFormatCapabilities.containsAll( myFormatCapabilities );\n-\n-        otherFormatCapabilities.removeAll( myFormatCapabilities );\n+otherFormatCapabilities.removeAll( myFormatCapabilities );\n         boolean allAddedAreAdditive = otherFormatCapabilities.stream().allMatch( Capability::isAdditive );\n \n         // Even if capabilities of the two aren't the same then there's a special case where if the additional\n@@ -152,4 +147,4 @@ public abstract class BaseRecordFormats implements RecordFormats\n     {\n         return hasCompatibleCapabilities( this, other, type );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}