{
    "project_name": "Angel-ML-angel",
    "error_id": "577",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/577/PushPathTailParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/577/PushPathTailParam.java\nindex 69e6b62ea7d..c330d8afb4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/577/PushPathTailParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/577/PushPathTailParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.node2vec.updatefuncs.pushpathtail;\n \n import com.tencent.angel.PartitionKey;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 6, indentation should be the same level as line 70.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 0, expected is 6, indentation should be the same level as line 75.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/577/PushPathTailParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/577/PushPathTailParam.java\nindex 69e6b62ea7d..bf04d6623c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/577/PushPathTailParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/577/PushPathTailParam.java\n@@ -36,8 +36,7 @@ public class PushPathTailParam extends UpdateParam {\n   public PushPathTailParam(int matrixId, boolean updateClock, Long2LongOpenHashMap pathTail) {\n     super(matrixId, updateClock);\n     this.pathTail = pathTail;\n-\n-    this.keyIds = new long[pathTail.size()];\n+this.keyIds = new long[pathTail.size()];\n     LongIterator iter = pathTail.keySet().iterator();\n     int i = 0;\n     while (iter.hasNext()) {\n@@ -59,26 +58,27 @@ public class PushPathTailParam extends UpdateParam {\n     List<PartitionUpdateParam> partParams = new ArrayList<>(parts.size());\n \n     if (!RowUpdateSplitUtils.isInRange(keyIds, parts)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n+      throw new AngelException(\"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n               .get(parts.size() - 1).getEndCol());\n-    }\n+  }\n \n     int nodeIndex = 0;\n     for (PartitionKey part : parts) {\n-      int start = nodeIndex;  // include start\n+      int start = nodeIndex;\n+\n+// include start\n       while (nodeIndex < keyIds.length && keyIds[nodeIndex] < part.getEndCol()) {\n         nodeIndex++;\n       }\n-      int end = nodeIndex;  // exclude end\n+      int end = nodeIndex;\n+// exclude end\n       int sizePart = end - start;\n       if (sizePart > 0) {\n-        partParams\n-            .add(new PushPathTailPartitionParam(matrixId, part, pathTail, keyIds, start, end));\n+        partParams.add(new PushPathTailPartitionParam(matrixId, part, pathTail, keyIds, start, end));\n       }\n     }\n \n     return partParams;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/577/PushPathTailParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/577/PushPathTailParam.java\nindex 69e6b62ea7d..ec6422639e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/577/PushPathTailParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/577/PushPathTailParam.java\n@@ -36,7 +36,6 @@ public class PushPathTailParam extends UpdateParam {\n   public PushPathTailParam(int matrixId, boolean updateClock, Long2LongOpenHashMap pathTail) {\n     super(matrixId, updateClock);\n     this.pathTail = pathTail;\n-\n     this.keyIds = new long[pathTail.size()];\n     LongIterator iter = pathTail.keySet().iterator();\n     int i = 0;\n@@ -55,13 +54,9 @@ public class PushPathTailParam extends UpdateParam {\n   @Override\n   public List<PartitionUpdateParam> split() {\n     List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n     List<PartitionUpdateParam> partParams = new ArrayList<>(parts.size());\n-\n     if (!RowUpdateSplitUtils.isInRange(keyIds, parts)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n-              .get(parts.size() - 1).getEndCol());\n+      throw new AngelException(\"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts.get(parts.size() - 1).getEndCol());\n     }\n \n     int nodeIndex = 0;\n@@ -70,15 +65,14 @@ public class PushPathTailParam extends UpdateParam {\n       while (nodeIndex < keyIds.length && keyIds[nodeIndex] < part.getEndCol()) {\n         nodeIndex++;\n       }\n+\n       int end = nodeIndex;  // exclude end\n       int sizePart = end - start;\n       if (sizePart > 0) {\n-        partParams\n-            .add(new PushPathTailPartitionParam(matrixId, part, pathTail, keyIds, start, end));\n+        partParams.add(new PushPathTailPartitionParam(matrixId, part, pathTail, keyIds, start, end));\n       }\n     }\n-\n     return partParams;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}