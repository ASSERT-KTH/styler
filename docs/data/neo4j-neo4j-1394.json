{
    "project_name": "neo4j-neo4j",
    "error_id": "1394",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "147",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1394/RelationshipSelections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1394/RelationshipSelections.java\nindex 2edbc49b586..466f1b8490e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1394/RelationshipSelections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1394/RelationshipSelections.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.helpers;\n \n import org.neo4j.graphdb.Direction;\n@@ -36,112 +37,114 @@ public final class RelationshipSelections\n \n     private RelationshipSelections()\n     {\n-        throw new UnsupportedOperationException( \"Do not instantiate\" );\n+        throw new UnsupportedOperationException(\"Do not instantiate\");\n     }\n \n     /**\n      * Returns an outgoing selection cursor given the provided node cursor and relationship types.\n      *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n+     * @param cursors      A cursor factor used for allocating the needed cursors\n+     * @param node         A node cursor positioned at the current node.\n+     * @param types        The types of the relationship\n      * @param cursorTracer underlying page cursor tracer\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor outgoingCursor( CursorFactory cursors,\n-                                                              NodeCursor node,\n-                                                              int[] types,\n-                                                              PageCursorTracer cursorTracer )\n+    public static RelationshipTraversalCursor outgoingCursor(CursorFactory cursors,\n+                                                             NodeCursor node,\n+                                                             int[] types,\n+                                                             PageCursorTracer cursorTracer)\n     {\n-        return relationshipsCursor( cursors.allocateRelationshipTraversalCursor( cursorTracer ), node, types, Direction.OUTGOING );\n+        return relationshipsCursor(cursors.allocateRelationshipTraversalCursor(cursorTracer), node, types, Direction.OUTGOING);\n     }\n \n     /**\n      * Returns an outgoing selection cursor given the provided cursors and relationship types.\n+     *\n      * @param traversalCursor A traversal a cursor that will be used when traversing\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n+     * @param node            A node cursor positioned at the current node.\n+     * @param types           The types of the relationship\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor outgoingCursor( RelationshipTraversalCursor traversalCursor,\n-            NodeCursor node,\n-            int[] types )\n+    public static RelationshipTraversalCursor outgoingCursor(RelationshipTraversalCursor traversalCursor,\n+                                                             NodeCursor node,\n+                                                             int[] types)\n     {\n-        return relationshipsCursor( traversalCursor, node, types, Direction.OUTGOING );\n+        return relationshipsCursor(traversalCursor, node, types, Direction.OUTGOING);\n     }\n \n     /**\n      * Returns an incoming selection cursor given the provided cursors and relationship types.\n+     *\n      * @param traversalCursor A traversal a cursor that will be used when traversing\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n+     * @param node            A node cursor positioned at the current node.\n+     * @param types           The types of the relationship\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor incomingCursor( RelationshipTraversalCursor traversalCursor,\n-            NodeCursor node,\n-            int[] types )\n+    public static RelationshipTraversalCursor incomingCursor(RelationshipTraversalCursor traversalCursor,\n+                                                             NodeCursor node,\n+                                                             int[] types)\n     {\n-        return relationshipsCursor( traversalCursor, node, types, Direction.INCOMING );\n+        return relationshipsCursor(traversalCursor, node, types, Direction.INCOMING);\n     }\n \n     /**\n      * Returns an incoming selection cursor given the provided node cursor and relationship types.\n      *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n+     * @param cursors      A cursor factor used for allocating the needed cursors\n+     * @param node         A node cursor positioned at the current node.\n+     * @param types        The types of the relationship\n      * @param cursorTracer underlying page cursor tracer\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor incomingCursor( CursorFactory cursors,\n-                                                              NodeCursor node,\n-                                                              int[] types,\n-                                                              PageCursorTracer cursorTracer )\n+    public static RelationshipTraversalCursor incomingCursor(CursorFactory cursors,\n+                                                             NodeCursor node,\n+                                                             int[] types,\n+                                                             PageCursorTracer cursorTracer)\n     {\n-        return relationshipsCursor( cursors.allocateRelationshipTraversalCursor( cursorTracer ), node, types, Direction.INCOMING );\n+        return relationshipsCursor(cursors.allocateRelationshipTraversalCursor(cursorTracer), node, types, Direction.INCOMING);\n     }\n \n     /**\n      * Returns a multi-directed selection cursor given the provided node cursor and relationship types.\n      *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n+     * @param cursors      A cursor factor used for allocating the needed cursors\n+     * @param node         A node cursor positioned at the current node.\n+     * @param types        The types of the relationship\n      * @param cursorTracer underlying page cursor tracer\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor allCursor( CursorFactory cursors,\n-                                                         NodeCursor node,\n-                                                         int[] types,\n-                                                         PageCursorTracer cursorTracer )\n+    public static RelationshipTraversalCursor allCursor(CursorFactory cursors,\n+                                                        NodeCursor node,\n+                                                        int[] types,\n+                                                        PageCursorTracer cursorTracer)\n     {\n-        return relationshipsCursor( cursors.allocateRelationshipTraversalCursor( cursorTracer ), node, types, Direction.BOTH );\n+        return relationshipsCursor(cursors.allocateRelationshipTraversalCursor(cursorTracer), node, types, Direction.BOTH);\n     }\n \n     /**\n      * Returns a multi-directed selection cursor given the provided cursors and relationship types.\n+     *\n      * @param traversalCursor A traversal a cursor that will be used when traversing\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n+     * @param node            A node cursor positioned at the current node.\n+     * @param types           The types of the relationship\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor allCursor( RelationshipTraversalCursor traversalCursor,\n-                                                         NodeCursor node,\n-                                                         int[] types )\n+    public static RelationshipTraversalCursor allCursor(RelationshipTraversalCursor traversalCursor,\n+                                                        NodeCursor node,\n+                                                        int[] types)\n     {\n-        node.relationships( traversalCursor, RelationshipSelection.selection( types, Direction.BOTH ) );\n+        node.relationships(traversalCursor, RelationshipSelection.selection(types, Direction.BOTH));\n         return traversalCursor;\n     }\n \n-    public static RelationshipTraversalCursor relationshipsCursor( RelationshipTraversalCursor traversalCursor, NodeCursor node, int[] types,\n-            Direction outgoing )\n+    public static RelationshipTraversalCursor relationshipsCursor(RelationshipTraversalCursor traversalCursor, NodeCursor node, int[] types,\n+                                                                  Direction outgoing)\n     {\n         try\n         {\n-            node.relationships( traversalCursor, RelationshipSelection.selection( types, outgoing ) );\n+            node.relationships(traversalCursor, RelationshipSelection.selection(types, outgoing));\n             return traversalCursor;\n-        }\n-        catch ( Throwable t )\n+        } catch (Throwable t)\n         {\n             traversalCursor.close();\n             throw t;\n@@ -151,58 +154,58 @@ public final class RelationshipSelections\n     /**\n      * Returns an outgoing resource iterator given the provided node cursor, direction and relationship types.\n      *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @param factory factory for creating instance of generic type T\n+     * @param cursors      A cursor factor used for allocating the needed cursors\n+     * @param node         A node cursor positioned at the current node.\n+     * @param types        The types of the relationship\n+     * @param factory      factory for creating instance of generic type T\n      * @param cursorTracer underlying page cursor tracer\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> outgoingIterator( CursorFactory cursors,\n-                                                            NodeCursor node,\n-                                                            int[] types,\n-                                                            RelationshipFactory<T> factory,\n-                                                            PageCursorTracer cursorTracer )\n+    public static <T> ResourceIterator<T> outgoingIterator(CursorFactory cursors,\n+                                                           NodeCursor node,\n+                                                           int[] types,\n+                                                           RelationshipFactory<T> factory,\n+                                                           PageCursorTracer cursorTracer)\n     {\n-        return new RelationshipEntityIterator<>( outgoingCursor( cursors, node, types, cursorTracer ), factory );\n+        return new RelationshipEntityIterator<>(outgoingCursor(cursors, node, types, cursorTracer), factory);\n     }\n \n     /**\n      * Returns an incoming resource iterator given the provided node cursor, direction and relationship types.\n      *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @param factory factory for creating instance of generic type T\n+     * @param cursors      A cursor factor used for allocating the needed cursors\n+     * @param node         A node cursor positioned at the current node.\n+     * @param types        The types of the relationship\n+     * @param factory      factory for creating instance of generic type T\n      * @param cursorTracer underlying page cursor tracer\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> incomingIterator( CursorFactory cursors,\n-                                                            NodeCursor node,\n-                                                            int[] types,\n-                                                            RelationshipFactory<T> factory,\n-                                                            PageCursorTracer cursorTracer )\n+    public static <T> ResourceIterator<T> incomingIterator(CursorFactory cursors,\n+                                                           NodeCursor node,\n+                                                           int[] types,\n+                                                           RelationshipFactory<T> factory,\n+                                                           PageCursorTracer cursorTracer)\n     {\n-        return new RelationshipEntityIterator<>( incomingCursor( cursors, node, types, cursorTracer ), factory );\n+        return new RelationshipEntityIterator<>(incomingCursor(cursors, node, types, cursorTracer), factory);\n     }\n \n     /**\n      * Returns a multi-directed resource iterator given the provided node cursor, direction and relationship types.\n      *\n-     * @param cursors A cursor factor used for allocating the needed cursors\n-     * @param node A node cursor positioned at the current node.\n-     * @param types The types of the relationship\n-     * @param factory factory for creating instance of generic type T\n+     * @param cursors      A cursor factor used for allocating the needed cursors\n+     * @param node         A node cursor positioned at the current node.\n+     * @param types        The types of the relationship\n+     * @param factory      factory for creating instance of generic type T\n      * @param cursorTracer underlying page cursor tracer\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> allIterator( CursorFactory cursors,\n-                                                       NodeCursor node,\n-                                                       int[] types,\n-                                                       RelationshipFactory<T> factory,\n-                                                       PageCursorTracer cursorTracer )\n+    public static <T> ResourceIterator<T> allIterator(CursorFactory cursors,\n+                                                      NodeCursor node,\n+                                                      int[] types,\n+                                                      RelationshipFactory<T> factory,\n+                                                      PageCursorTracer cursorTracer)\n     {\n-        return new RelationshipEntityIterator<>( allCursor( cursors, node, types, cursorTracer ), factory );\n+        return new RelationshipEntityIterator<>(allCursor(cursors, node, types, cursorTracer), factory);\n     }\n \n     private static class RelationshipEntityIterator<T> extends PrefetchingResourceIterator<T>\n@@ -210,7 +213,7 @@ public final class RelationshipSelections\n         private final RelationshipTraversalCursor relationshipTraversalCursor;\n         private final RelationshipFactory<T> factory;\n \n-        RelationshipEntityIterator( RelationshipTraversalCursor relationshipTraversalCursor, RelationshipFactory<T> factory )\n+        RelationshipEntityIterator(RelationshipTraversalCursor relationshipTraversalCursor, RelationshipFactory<T> factory)\n         {\n             this.relationshipTraversalCursor = relationshipTraversalCursor;\n             this.factory = factory;\n@@ -225,10 +228,10 @@ public final class RelationshipSelections\n         @Override\n         protected T fetchNextOrNull()\n         {\n-            if ( relationshipTraversalCursor.next() )\n+            if (relationshipTraversalCursor.next())\n             {\n-                return factory.relationship( relationshipTraversalCursor.relationshipReference(), relationshipTraversalCursor.sourceNodeReference(),\n-                        relationshipTraversalCursor.type(), relationshipTraversalCursor.targetNodeReference() );\n+                return factory.relationship(relationshipTraversalCursor.relationshipReference(), relationshipTraversalCursor.sourceNodeReference(),\n+                  relationshipTraversalCursor.type(), relationshipTraversalCursor.targetNodeReference());\n             }\n             close();\n             return null;\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1394/RelationshipSelections.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1394/RelationshipSelections.java\nindex 2edbc49b586..7d78a0a1aa7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1394/RelationshipSelections.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1394/RelationshipSelections.java\n@@ -52,7 +52,7 @@ public final class RelationshipSelections\n                                                               NodeCursor node,\n                                                               int[] types,\n                                                               PageCursorTracer cursorTracer )\n-    {\n+{\n         return relationshipsCursor( cursors.allocateRelationshipTraversalCursor( cursorTracer ), node, types, Direction.OUTGOING );\n     }\n \n@@ -97,7 +97,7 @@ public final class RelationshipSelections\n                                                               NodeCursor node,\n                                                               int[] types,\n                                                               PageCursorTracer cursorTracer )\n-    {\n+{\n         return relationshipsCursor( cursors.allocateRelationshipTraversalCursor( cursorTracer ), node, types, Direction.INCOMING );\n     }\n \n@@ -110,11 +110,10 @@ public final class RelationshipSelections\n      * @param cursorTracer underlying page cursor tracer\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor allCursor( CursorFactory cursors,\n-                                                         NodeCursor node,\n+    public static RelationshipTraversalCursor allCursor( CursorFactory cursors, NodeCursor node,\n                                                          int[] types,\n                                                          PageCursorTracer cursorTracer )\n-    {\n+{\n         return relationshipsCursor( cursors.allocateRelationshipTraversalCursor( cursorTracer ), node, types, Direction.BOTH );\n     }\n \n@@ -125,10 +124,9 @@ public final class RelationshipSelections\n      * @param types The types of the relationship\n      * @return A cursor that allows traversing the relationship chain.\n      */\n-    public static RelationshipTraversalCursor allCursor( RelationshipTraversalCursor traversalCursor,\n-                                                         NodeCursor node,\n+    public static RelationshipTraversalCursor allCursor( RelationshipTraversalCursor traversalCursor, NodeCursor node,\n                                                          int[] types )\n-    {\n+{\n         node.relationships( traversalCursor, RelationshipSelection.selection( types, Direction.BOTH ) );\n         return traversalCursor;\n     }\n@@ -158,12 +156,11 @@ public final class RelationshipSelections\n      * @param cursorTracer underlying page cursor tracer\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> outgoingIterator( CursorFactory cursors,\n-                                                            NodeCursor node,\n+    public static <T> ResourceIterator<T> outgoingIterator( CursorFactory cursors, NodeCursor node,\n                                                             int[] types,\n                                                             RelationshipFactory<T> factory,\n                                                             PageCursorTracer cursorTracer )\n-    {\n+{\n         return new RelationshipEntityIterator<>( outgoingCursor( cursors, node, types, cursorTracer ), factory );\n     }\n \n@@ -177,12 +174,11 @@ public final class RelationshipSelections\n      * @param cursorTracer underlying page cursor tracer\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> incomingIterator( CursorFactory cursors,\n-                                                            NodeCursor node,\n+    public static <T> ResourceIterator<T> incomingIterator( CursorFactory cursors, NodeCursor node,\n                                                             int[] types,\n                                                             RelationshipFactory<T> factory,\n                                                             PageCursorTracer cursorTracer )\n-    {\n+{\n         return new RelationshipEntityIterator<>( incomingCursor( cursors, node, types, cursorTracer ), factory );\n     }\n \n@@ -196,12 +192,11 @@ public final class RelationshipSelections\n      * @param cursorTracer underlying page cursor tracer\n      * @return An iterator that allows traversing the relationship chain.\n      */\n-    public static <T> ResourceIterator<T> allIterator( CursorFactory cursors,\n-                                                       NodeCursor node,\n+    public static <T> ResourceIterator<T> allIterator( CursorFactory cursors, NodeCursor node,\n                                                        int[] types,\n                                                        RelationshipFactory<T> factory,\n                                                        PageCursorTracer cursorTracer )\n-    {\n+{\n         return new RelationshipEntityIterator<>( allCursor( cursors, node, types, cursorTracer ), factory );\n     }\n \n@@ -234,4 +229,4 @@ public final class RelationshipSelections\n             return null;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}