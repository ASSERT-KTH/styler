{
    "project_name": "neo4j-neo4j",
    "error_id": "3187",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "89",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "196",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3187/SimpleIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3187/SimpleIndexReader.java\nindex fffd66eaeb0..1e059786a72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3187/SimpleIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3187/SimpleIndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.reader;\n \n import org.apache.lucene.search.BooleanClause;\n@@ -65,12 +66,12 @@ public class SimpleIndexReader extends AbstractIndexReader\n     private final IndexSamplingConfig samplingConfig;\n     private final TaskCoordinator taskCoordinator;\n \n-    public SimpleIndexReader( SearcherReference searcherReference,\n-            IndexDescriptor descriptor,\n-            IndexSamplingConfig samplingConfig,\n-            TaskCoordinator taskCoordinator )\n+    public SimpleIndexReader(SearcherReference searcherReference,\n+                             IndexDescriptor descriptor,\n+                             IndexSamplingConfig samplingConfig,\n+                             TaskCoordinator taskCoordinator)\n     {\n-        super( descriptor );\n+        super(descriptor);\n         this.searcherReference = searcherReference;\n         this.descriptor = descriptor;\n         this.samplingConfig = samplingConfig;\n@@ -80,112 +81,109 @@ public class SimpleIndexReader extends AbstractIndexReader\n     @Override\n     public IndexSampler createSampler()\n     {\n-        if ( descriptor.isUnique() )\n+        if (descriptor.isUnique())\n         {\n-            return new UniqueLuceneIndexSampler( getIndexSearcher(), taskCoordinator );\n-        }\n-        else\n+            return new UniqueLuceneIndexSampler(getIndexSearcher(), taskCoordinator);\n+        } else\n         {\n-            return new NonUniqueLuceneIndexSampler( getIndexSearcher(), taskCoordinator, samplingConfig );\n+            return new NonUniqueLuceneIndexSampler(getIndexSearcher(), taskCoordinator, samplingConfig);\n         }\n     }\n \n     @Override\n-    public void query( QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n-            IndexQuery... predicates ) throws IndexNotApplicableKernelException\n+    public void query(QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n+                      IndexQuery... predicates) throws IndexNotApplicableKernelException\n     {\n-        Query query = toLuceneQuery( predicates );\n-        client.initialize( descriptor, search( query ).getIndexProgressor( NODE_ID_KEY, client ), predicates, constraints, false );\n+        Query query = toLuceneQuery(predicates);\n+        client.initialize(descriptor, search(query).getIndexProgressor(NODE_ID_KEY, client), predicates, constraints, false);\n     }\n \n-    private DocValuesCollector search( Query query )\n+    private DocValuesCollector search(Query query)\n     {\n         try\n         {\n             DocValuesCollector docValuesCollector = new DocValuesCollector();\n-            getIndexSearcher().search( query, docValuesCollector );\n+            getIndexSearcher().search(query, docValuesCollector);\n             return docValuesCollector;\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new RuntimeException( e );\n+            throw new RuntimeException(e);\n         }\n     }\n \n-    private Query toLuceneQuery( IndexQuery... predicates ) throws IndexNotApplicableKernelException\n+    private Query toLuceneQuery(IndexQuery... predicates) throws IndexNotApplicableKernelException\n     {\n         IndexQuery predicate = predicates[0];\n-        switch ( predicate.type() )\n+        switch (predicate.type())\n         {\n-        case exact:\n-            Value[] values = new Value[predicates.length];\n-            for ( int i = 0; i < predicates.length; i++ )\n-            {\n-                assert predicates[i].type() == exact :\n-                        \"Exact followed by another query predicate type is not supported at this moment.\";\n-                values[i] = ((IndexQuery.ExactPredicate) predicates[i]).value();\n-            }\n-            return LuceneDocumentStructure.newSeekQuery( values );\n-        case exists:\n-            for ( IndexQuery p : predicates )\n-            {\n-                if ( p.type() != IndexQueryType.exists )\n+            case exact:\n+                Value[] values = new Value[predicates.length];\n+                for (int i = 0; i < predicates.length; i++)\n+                {\n+                    assert predicates[i].type() == exact :\n+                      \"Exact followed by another query predicate type is not supported at this moment.\";\n+                    values[i] = ((IndexQuery.ExactPredicate) predicates[i]).value();\n+                }\n+                return LuceneDocumentStructure.newSeekQuery(values);\n+            case exists:\n+                for (IndexQuery p : predicates)\n                 {\n-                    throw new IndexNotApplicableKernelException(\n-                            \"Exists followed by another query predicate type is not supported.\" );\n+                    if (p.type() != IndexQueryType.exists)\n+                    {\n+                        throw new IndexNotApplicableKernelException(\n+                          \"Exists followed by another query predicate type is not supported.\");\n+                    }\n                 }\n-            }\n-            return LuceneDocumentStructure.newScanQuery();\n-        case range:\n-            assertNotComposite( predicates );\n-            if ( predicate.valueGroup() == ValueGroup.TEXT )\n-            {\n-                IndexQuery.TextRangePredicate sp = (IndexQuery.TextRangePredicate) predicate;\n-                return LuceneDocumentStructure.newRangeSeekByStringQuery( sp.from(), sp.fromInclusive(), sp.to(), sp.toInclusive() );\n-            }\n-            throw new UnsupportedOperationException( format( \"Range scans of value group %s are not supported\", predicate.valueGroup() ) );\n-\n-        case stringPrefix:\n-            assertNotComposite( predicates );\n-            IndexQuery.StringPrefixPredicate spp = (IndexQuery.StringPrefixPredicate) predicate;\n-            return LuceneDocumentStructure.newRangeSeekByPrefixQuery( spp.prefix().stringValue() );\n-        case stringContains:\n-            assertNotComposite( predicates );\n-            IndexQuery.StringContainsPredicate scp = (IndexQuery.StringContainsPredicate) predicate;\n-            return LuceneDocumentStructure.newWildCardStringQuery( scp.contains().stringValue() );\n-        case stringSuffix:\n-            assertNotComposite( predicates );\n-            IndexQuery.StringSuffixPredicate ssp = (IndexQuery.StringSuffixPredicate) predicate;\n-            return LuceneDocumentStructure.newSuffixStringQuery( ssp.suffix().stringValue() );\n-        default:\n-            // todo figure out a more specific exception\n-            throw new RuntimeException( \"Index query not supported: \" + Arrays.toString( predicates ) );\n+                return LuceneDocumentStructure.newScanQuery();\n+            case range:\n+                assertNotComposite(predicates);\n+                if (predicate.valueGroup() == ValueGroup.TEXT)\n+                {\n+                    IndexQuery.TextRangePredicate sp = (IndexQuery.TextRangePredicate) predicate;\n+                    return LuceneDocumentStructure.newRangeSeekByStringQuery(sp.from(), sp.fromInclusive(), sp.to(), sp.toInclusive());\n+                }\n+                throw new UnsupportedOperationException(format(\"Range scans of value group %s are not supported\", predicate.valueGroup()));\n+\n+            case stringPrefix:\n+                assertNotComposite(predicates);\n+                IndexQuery.StringPrefixPredicate spp = (IndexQuery.StringPrefixPredicate) predicate;\n+                return LuceneDocumentStructure.newRangeSeekByPrefixQuery(spp.prefix().stringValue());\n+            case stringContains:\n+                assertNotComposite(predicates);\n+                IndexQuery.StringContainsPredicate scp = (IndexQuery.StringContainsPredicate) predicate;\n+                return LuceneDocumentStructure.newWildCardStringQuery(scp.contains().stringValue());\n+            case stringSuffix:\n+                assertNotComposite(predicates);\n+                IndexQuery.StringSuffixPredicate ssp = (IndexQuery.StringSuffixPredicate) predicate;\n+                return LuceneDocumentStructure.newSuffixStringQuery(ssp.suffix().stringValue());\n+            default:\n+                // todo figure out a more specific exception\n+                throw new RuntimeException(\"Index query not supported: \" + Arrays.toString(predicates));\n         }\n     }\n \n-    private void assertNotComposite( IndexQuery[] predicates )\n+    private void assertNotComposite(IndexQuery[] predicates)\n     {\n         assert predicates.length == 1 : \"composite indexes not yet supported for this operation\";\n     }\n \n     @Override\n-    public long countIndexedEntities( long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues )\n+    public long countIndexedEntities(long entityId, PageCursorTracer cursorTracer, int[] propertyKeyIds, Value... propertyValues)\n     {\n-        Query entityIdQuery = new TermQuery( LuceneDocumentStructure.newTermForChangeOrRemove( entityId ) );\n-        Query valueQuery = LuceneDocumentStructure.newSeekQuery( propertyValues );\n+        Query entityIdQuery = new TermQuery(LuceneDocumentStructure.newTermForChangeOrRemove(entityId));\n+        Query valueQuery = LuceneDocumentStructure.newSeekQuery(propertyValues);\n         BooleanQuery.Builder entityIdAndValueQuery = new BooleanQuery.Builder();\n-        entityIdAndValueQuery.add( entityIdQuery, BooleanClause.Occur.MUST );\n-        entityIdAndValueQuery.add( valueQuery, BooleanClause.Occur.MUST );\n+        entityIdAndValueQuery.add(entityIdQuery, BooleanClause.Occur.MUST);\n+        entityIdAndValueQuery.add(valueQuery, BooleanClause.Occur.MUST);\n         try\n         {\n             TotalHitCountCollector collector = new TotalHitCountCollector();\n-            getIndexSearcher().search( entityIdAndValueQuery.build(), collector );\n+            getIndexSearcher().search(entityIdAndValueQuery.build(), collector);\n             // A <label,propertyKeyId,nodeId> tuple should only match at most a single propertyValue\n             return collector.getTotalHits();\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new RuntimeException( e );\n+            throw new RuntimeException(e);\n         }\n     }\n \n@@ -195,10 +193,9 @@ public class SimpleIndexReader extends AbstractIndexReader\n         try\n         {\n             searcherReference.close();\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new IndexReaderCloseException( e );\n+            throw new IndexReaderCloseException(e);\n         }\n     }\n \n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}