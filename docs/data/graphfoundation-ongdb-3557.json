{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3557",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "200",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "211",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "211",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "250",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "303",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "317",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "339",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "351",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "402",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "498",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "643",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "647",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "647",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "680",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "696",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "718",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "723",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "725",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "754",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "754",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "763",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "812",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "812",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3557/TransactionProvidingApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3557/TransactionProvidingApp.java\nindex 32acdff60dc..ecd0bf575ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3557/TransactionProvidingApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3557/TransactionProvidingApp.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.lang.reflect.Array;\n@@ -68,761 +69,748 @@ import static org.neo4j.shell.ShellException.stackTraceAsString;\n  */\n public abstract class TransactionProvidingApp extends AbstractApp\n {\n-    private static final Label[] EMPTY_LABELS = new Label[0];\n-    private static final RelationshipType[] EMPTY_REL_TYPES = new RelationshipType[0];\n-\n-    private static final Function<String[],Label[]> CREATE_LABELS = values ->\n-    {\n-        Label[] labels = new Label[values.length];\n-        for ( int i = 0; i < values.length; i++ )\n-        {\n-            labels[i] = Label.label( values[i] );\n-        }\n-        return labels;\n-    };\n-\n-    private static final Function<String[],RelationshipType[]> CREATE_REL_TYPES = values ->\n-    {\n-        RelationshipType[] types = new RelationshipType[values.length];\n-        for ( int i = 0; i < values.length; i++ )\n-        {\n-            types[i] = RelationshipType.withName( values[i] );\n-        }\n-        return types;\n-    };\n-\n-    protected static final String[] STANDARD_EVAL_IMPORTS = new String[] {\n-        \"org.neo4j.graphdb\",\n-        \"org.neo4j.graphdb.event\",\n-        \"org.neo4j.graphdb.index\",\n-        \"org.neo4j.graphdb.traversal\",\n-        \"org.neo4j.kernel\"\n-    };\n-\n-    protected static final OptionDefinition OPTION_DEF_FOR_C = new OptionDefinition(\n-            OptionValueType.MUST,\n-            \"Command to run for each returned node. Use $i for node/relationship id, example:\\n\" +\n-            \"-c \\\"ls -f name $i\\\". Multiple commands can be supplied with && in between\" );\n-\n-    /**\n-     * @param server the {@link GraphDatabaseShellServer} to get the current\n-     * node/relationship from.\n-     * @param session the {@link Session} used by the client.\n-     * @return the current node/relationship the client stands on\n-     * at the moment.\n-     * @throws ShellException if some error occured.\n-     */\n-    public static NodeOrRelationship getCurrent(\n-        GraphDatabaseShellServer server, Session session ) throws ShellException\n-    {\n-        String currentThing = session.getCurrent();\n-        NodeOrRelationship result;\n-        /*                           Note: Artifact of removing the ref node, revisit and clean up */\n-        if ( currentThing == null || currentThing.equals( \"(?)\" )  )\n-        {\n-            throw new ShellException( \"Not currently standing on any entity.\" );\n-        }\n-        else\n-        {\n-            TypedId typedId = new TypedId( currentThing );\n-            result = getThingById( server, typedId );\n-        }\n-        return result;\n-    }\n-\n-    protected NodeOrRelationship getCurrent( Session session )\n-        throws ShellException\n-    {\n-        return getCurrent( getServer(), session );\n-    }\n-\n-    public static boolean isCurrent( Session session, NodeOrRelationship thing )\n-    {\n-        String currentThing = session.getCurrent();\n-        return currentThing != null && currentThing.equals(\n-                thing.getTypedId().toString() );\n-    }\n-\n-    protected static void clearCurrent( Session session )\n-    {\n-        session.setCurrent( getDisplayNameForNonExistent());\n-    }\n-\n-    protected static void setCurrent( Session session,\n-                                      NodeOrRelationship current )\n-    {\n-        session.setCurrent( current.getTypedId().toString() );\n-    }\n-\n-    protected void assertCurrentIsNode( Session session )\n-        throws ShellException\n-    {\n-        NodeOrRelationship current = getCurrent( session );\n-        if ( !current.isNode() )\n-        {\n-            throw new ShellException(\n-                \"You must stand on a node to be able to do this\" );\n-        }\n-    }\n-\n-    @Override\n-    public GraphDatabaseShellServer getServer()\n-    {\n-        return (GraphDatabaseShellServer) super.getServer();\n-    }\n-\n-    protected static RelationshipType getRelationshipType( String name )\n-    {\n-        return RelationshipType.withName( name );\n-    }\n-\n-    protected static Direction getDirection( String direction )\n-    {\n-        return getDirection( direction, Direction.OUTGOING );\n-    }\n-\n-    protected static Direction getDirection( String direction,\n-        Direction defaultDirection )\n-    {\n-        return parseEnum( Direction.class, direction, defaultDirection );\n-    }\n-\n-    protected static NodeOrRelationship getThingById(\n-        GraphDatabaseShellServer server, TypedId typedId ) throws ShellException\n-    {\n-        NodeOrRelationship result;\n-        if ( typedId.isNode() )\n-        {\n-            try\n-            {\n-                result = NodeOrRelationship.wrap(\n-                    server.getDb().getNodeById( typedId.getId() ) );\n-            }\n-            catch ( NotFoundException e )\n-            {\n-                throw new ShellException( \"Node \" + typedId.getId() +\n-                    \" not found\" );\n-            }\n-        }\n-        else\n-        {\n-            try\n-            {\n-                result = NodeOrRelationship.wrap(\n-                    server.getDb().getRelationshipById( typedId.getId() ) );\n-            }\n-            catch ( NotFoundException e )\n-            {\n-                throw new ShellException( \"Relationship \" + typedId.getId() +\n-                    \" not found\" );\n-            }\n-        }\n-        return result;\n-    }\n-\n-    protected NodeOrRelationship getThingById( TypedId typedId )\n-        throws ShellException\n-    {\n-        return getThingById( getServer(), typedId );\n-    }\n-\n-    protected Node getNodeById( long id )\n-    {\n-        return this.getServer().getDb().getNodeById( id );\n-    }\n-\n-    @Override\n-    public Continuation execute( AppCommandParser parser, Session session, Output out ) throws Exception\n-    {\n-        try ( Transaction tx = getServer().getDb().beginTransaction( implicit, AUTH_DISABLED ) )\n-        {\n-            getServer().registerTopLevelTransactionInProgress( session.getId() );\n-            Continuation result = this.exec( parser, session, out );\n-            if ( result == Continuation.EXCEPTION_CAUGHT )\n-            {\n-                tx.failure();\n-            }\n-            else\n-            {\n-                tx.success();\n-            }\n-            return result;\n-        }\n-    }\n-\n-    @Override\n-    public final List<String> completionCandidates( String partOfLine, Session session ) throws ShellException\n-    {\n-        try ( Transaction tx = getServer().getDb().beginTx() )\n-        {\n-            List<String> result = completionCandidatesInTx( partOfLine, session );\n-            tx.success();\n-            return result;\n-        }\n-    }\n-\n-    protected List<String> completionCandidatesInTx( String partOfLine, Session session ) throws ShellException\n-    {\n-        /*\n-         * Calls super of the non-tx version (completionCandidates). In an implementation the call hierarchy would be:\n-         *\n-         * TransactionProvidingApp.completionCandidates()\n-         *    --> MyApp.completionCandidatesInTx() - calls super.completionCandidatesInTx()\n-         *       --> TransactionProvidingApp.completionCandidatesInTx()\n-         *          --> AbstractApp.completionCandidates()\n-         */\n-        return super.completionCandidates( partOfLine, session );\n-    }\n-\n-    protected String directionAlternatives()\n-    {\n-        return \"OUTGOING, INCOMING, o, i\";\n-    }\n-\n-    protected abstract Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws Exception;\n-\n-    protected void printPath( Path path, boolean quietPrint, Session session, Output out )\n-            throws RemoteException, ShellException\n-    {\n-        StringBuilder builder = new StringBuilder();\n-        Node currentNode = null;\n-        for ( PropertyContainer entity : path )\n-        {\n-            String display;\n-            if ( entity instanceof Relationship )\n-            {\n-                display = quietPrint ? \"\" : getDisplayName( getServer(), session, (Relationship) entity, false, true );\n-                display = withArrows( (Relationship) entity, display, currentNode );\n-            }\n-            else\n-            {\n-                currentNode = (Node) entity;\n-                display = getDisplayName( getServer(), session, currentNode, true );\n-            }\n-            builder.append( display );\n-        }\n-        out.println( builder.toString() );\n-    }\n-\n-    protected void setProperties( PropertyContainer entity, String propertyJson ) throws ShellException\n-    {\n-        if ( propertyJson == null )\n-        {\n-            return;\n-        }\n-\n-        try\n-        {\n-            Map<String, Object> properties = parseJSONMap( propertyJson );\n-            for ( Map.Entry<String, Object> entry : properties.entrySet() )\n-            {\n-                entity.setProperty( entry.getKey(), jsonToNeo4jPropertyValue( entry.getValue() ) );\n-            }\n-        }\n-        catch ( JSONException e )\n-        {\n-            throw ShellException.wrapCause( e );\n-        }\n-    }\n-\n-    private Object jsonToNeo4jPropertyValue( Object value ) throws ShellException\n-    {\n-        try\n-        {\n-            if ( value instanceof JSONArray )\n-            {\n-                JSONArray array = (JSONArray) value;\n-                Object firstItem = array.get( 0 );\n-                Object resultArray = Array.newInstance( firstItem.getClass(), array.length() );\n-                for ( int i = 0; i < array.length(); i++ )\n-                {\n-                    Array.set( resultArray, i, array.get( i ) );\n-                }\n-                return resultArray;\n-            }\n-            return value;\n-        }\n-        catch ( JSONException e )\n-        {\n-            throw new ShellException( stackTraceAsString( e ) );\n-        }\n-    }\n-\n-    protected void cdTo( Session session, Node node )\n-    {\n-        List<TypedId> wd = readCurrentWorkingDir( session );\n-        try\n-        {\n-            wd.add( getCurrent( session ).getTypedId() );\n-        }\n-        catch ( ShellException e )\n-        {   // OK not found then\n-        }\n-        writeCurrentWorkingDir( wd, session );\n-        setCurrent( session, NodeOrRelationship.wrap( node ) );\n-    }\n-\n-    private static String getDisplayNameForCurrent(\n-            GraphDatabaseShellServer server, Session session )\n-            throws ShellException\n-    {\n-        NodeOrRelationship current = getCurrent( server, session );\n-        return current.isNode() ? \"(me)\" : \"<me>\";\n-    }\n-\n-    public static String getDisplayNameForNonExistent()\n-    {\n-        return \"(?)\";\n-    }\n-\n-    /**\n-     * @param server the {@link GraphDatabaseShellServer} to run at.\n-     * @param session the {@link Session} used by the client.\n-     * @param thing the thing to get the name-representation for.\n-     * @param checkForMe check if node/rel is the current one in the session\n-     * @return the display name for a {@link Node}.\n-     * @throws ShellException if an error occurs.\n-     */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, NodeOrRelationship thing, boolean checkForMe )\n-        throws ShellException\n-    {\n-        if ( thing.isNode() )\n-        {\n-            return getDisplayName( server, session, thing.asNode(),\n-                    checkForMe );\n-        }\n-        else\n-        {\n-            return getDisplayName( server, session, thing.asRelationship(),\n-                true, checkForMe );\n-        }\n-    }\n-\n-    /**\n-     * @param server the {@link GraphDatabaseShellServer} to run at.\n-     * @param session the {@link Session} used by the client.\n-     * @param typedId the id for the item to display.\n-     * @param checkForMe check if node/rel is the current one in the session\n-     * @return a display string for the {@code typedId}.\n-     * @throws ShellException if an error occurs.\n+  private static final Label[] EMPTY_LABELS = new Label[0];\n+  private static final RelationshipType[] EMPTY_REL_TYPES = new RelationshipType[0];\n+\n+  private static final Function<String[], Label[]> CREATE_LABELS = values ->\n+  {\n+    Label[] labels = new Label[values.length];\n+    for (int i = 0; i < values.length; i++)\n+    {\n+      labels[i] = Label.label(values[i]);\n+    }\n+    return labels;\n+  };\n+\n+  private static final Function<String[], RelationshipType[]> CREATE_REL_TYPES = values ->\n+  {\n+    RelationshipType[] types = new RelationshipType[values.length];\n+    for (int i = 0; i < values.length; i++)\n+    {\n+      types[i] = RelationshipType.withName(values[i]);\n+    }\n+    return types;\n+  };\n+\n+  protected static final String[] STANDARD_EVAL_IMPORTS = new String[] {\n+      \"org.neo4j.graphdb\",\n+      \"org.neo4j.graphdb.event\",\n+      \"org.neo4j.graphdb.index\",\n+      \"org.neo4j.graphdb.traversal\",\n+      \"org.neo4j.kernel\"\n+  };\n+\n+  protected static final OptionDefinition OPTION_DEF_FOR_C = new OptionDefinition(\n+      OptionValueType.MUST,\n+      \"Command to run for each returned node. Use $i for node/relationship id, example:\\n\" +\n+          \"-c \\\"ls -f name $i\\\". Multiple commands can be supplied with && in between\");\n+\n+  /**\n+   * @param server  the {@link GraphDatabaseShellServer} to get the current\n+   *                node/relationship from.\n+   * @param session the {@link Session} used by the client.\n+   * @return the current node/relationship the client stands on\n+   * at the moment.\n+   * @throws ShellException if some error occured.\n+   */\n+  public static NodeOrRelationship getCurrent(\n+      GraphDatabaseShellServer server, Session session) throws ShellException\n+  {\n+    String currentThing = session.getCurrent();\n+    NodeOrRelationship result;\n+    /*                           Note: Artifact of removing the ref node, revisit and clean up */\n+    if (currentThing == null || currentThing.equals(\"(?)\"))\n+    {\n+      throw new ShellException(\"Not currently standing on any entity.\");\n+    } else\n+    {\n+      TypedId typedId = new TypedId(currentThing);\n+      result = getThingById(server, typedId);\n+    }\n+    return result;\n+  }\n+\n+  protected NodeOrRelationship getCurrent(Session session)\n+      throws ShellException\n+  {\n+    return getCurrent(getServer(), session);\n+  }\n+\n+  public static boolean isCurrent(Session session, NodeOrRelationship thing)\n+  {\n+    String currentThing = session.getCurrent();\n+    return currentThing != null && currentThing.equals(\n+        thing.getTypedId().toString());\n+  }\n+\n+  protected static void clearCurrent(Session session)\n+  {\n+    session.setCurrent(getDisplayNameForNonExistent());\n+  }\n+\n+  protected static void setCurrent(Session session,\n+                                   NodeOrRelationship current)\n+  {\n+    session.setCurrent(current.getTypedId().toString());\n+  }\n+\n+  protected void assertCurrentIsNode(Session session)\n+      throws ShellException\n+  {\n+    NodeOrRelationship current = getCurrent(session);\n+    if (!current.isNode())\n+    {\n+      throw new ShellException(\n+          \"You must stand on a node to be able to do this\");\n+    }\n+  }\n+\n+  @Override\n+  public GraphDatabaseShellServer getServer()\n+  {\n+    return (GraphDatabaseShellServer) super.getServer();\n+  }\n+\n+  protected static RelationshipType getRelationshipType(String name)\n+  {\n+    return RelationshipType.withName(name);\n+  }\n+\n+  protected static Direction getDirection(String direction)\n+  {\n+    return getDirection(direction, Direction.OUTGOING);\n+  }\n+\n+  protected static Direction getDirection(String direction,\n+                                          Direction defaultDirection)\n+  {\n+    return parseEnum(Direction.class, direction, defaultDirection);\n+  }\n+\n+  protected static NodeOrRelationship getThingById(\n+      GraphDatabaseShellServer server, TypedId typedId) throws ShellException\n+  {\n+    NodeOrRelationship result;\n+    if (typedId.isNode())\n+    {\n+      try\n+      {\n+        result = NodeOrRelationship.wrap(\n+            server.getDb().getNodeById(typedId.getId()));\n+      } catch (NotFoundException e)\n+      {\n+        throw new ShellException(\"Node \" + typedId.getId() +\n+            \" not found\");\n+      }\n+    } else\n+    {\n+      try\n+      {\n+        result = NodeOrRelationship.wrap(\n+            server.getDb().getRelationshipById(typedId.getId()));\n+      } catch (NotFoundException e)\n+      {\n+        throw new ShellException(\"Relationship \" + typedId.getId() +\n+            \" not found\");\n+      }\n+    }\n+    return result;\n+  }\n+\n+  protected NodeOrRelationship getThingById(TypedId typedId)\n+      throws ShellException\n+  {\n+    return getThingById(getServer(), typedId);\n+  }\n+\n+  protected Node getNodeById(long id)\n+  {\n+    return this.getServer().getDb().getNodeById(id);\n+  }\n+\n+  @Override\n+  public Continuation execute(AppCommandParser parser, Session session, Output out) throws Exception\n+  {\n+    try (Transaction tx = getServer().getDb().beginTransaction(implicit, AUTH_DISABLED))\n+    {\n+      getServer().registerTopLevelTransactionInProgress(session.getId());\n+      Continuation result = this.exec(parser, session, out);\n+      if (result == Continuation.EXCEPTION_CAUGHT)\n+      {\n+        tx.failure();\n+      } else\n+      {\n+        tx.success();\n+      }\n+      return result;\n+    }\n+  }\n+\n+  @Override\n+  public final List<String> completionCandidates(String partOfLine, Session session) throws ShellException\n+  {\n+    try (Transaction tx = getServer().getDb().beginTx())\n+    {\n+      List<String> result = completionCandidatesInTx(partOfLine, session);\n+      tx.success();\n+      return result;\n+    }\n+  }\n+\n+  protected List<String> completionCandidatesInTx(String partOfLine, Session session) throws ShellException\n+  {\n+    /*\n+     * Calls super of the non-tx version (completionCandidates). In an implementation the call hierarchy would be:\n+     *\n+     * TransactionProvidingApp.completionCandidates()\n+     *    --> MyApp.completionCandidatesInTx() - calls super.completionCandidatesInTx()\n+     *       --> TransactionProvidingApp.completionCandidatesInTx()\n+     *          --> AbstractApp.completionCandidates()\n      */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, TypedId typedId, boolean checkForMe )\n-        throws ShellException\n+    return super.completionCandidates(partOfLine, session);\n+  }\n+\n+  protected String directionAlternatives()\n+  {\n+    return \"OUTGOING, INCOMING, o, i\";\n+  }\n+\n+  protected abstract Continuation exec(AppCommandParser parser, Session session,\n+                                       Output out) throws Exception;\n+\n+  protected void printPath(Path path, boolean quietPrint, Session session, Output out)\n+      throws RemoteException, ShellException\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    Node currentNode = null;\n+    for (PropertyContainer entity : path)\n+    {\n+      String display;\n+      if (entity instanceof Relationship)\n+      {\n+        display = quietPrint ? \"\" : getDisplayName(getServer(), session, (Relationship) entity, false, true);\n+        display = withArrows((Relationship) entity, display, currentNode);\n+      } else\n+      {\n+        currentNode = (Node) entity;\n+        display = getDisplayName(getServer(), session, currentNode, true);\n+      }\n+      builder.append(display);\n+    }\n+    out.println(builder.toString());\n+  }\n+\n+  protected void setProperties(PropertyContainer entity, String propertyJson) throws ShellException\n+  {\n+    if (propertyJson == null)\n+    {\n+      return;\n+    }\n+\n+    try\n+    {\n+      Map<String, Object> properties = parseJSONMap(propertyJson);\n+      for (Map.Entry<String, Object> entry : properties.entrySet())\n+      {\n+        entity.setProperty(entry.getKey(), jsonToNeo4jPropertyValue(entry.getValue()));\n+      }\n+    } catch (JSONException e)\n+    {\n+      throw ShellException.wrapCause(e);\n+    }\n+  }\n+\n+  private Object jsonToNeo4jPropertyValue(Object value) throws ShellException\n+  {\n+    try\n+    {\n+      if (value instanceof JSONArray)\n+      {\n+        JSONArray array = (JSONArray) value;\n+        Object firstItem = array.get(0);\n+        Object resultArray = Array.newInstance(firstItem.getClass(), array.length());\n+        for (int i = 0; i < array.length(); i++)\n+        {\n+          Array.set(resultArray, i, array.get(i));\n+        }\n+        return resultArray;\n+      }\n+      return value;\n+    } catch (JSONException e)\n+    {\n+      throw new ShellException(stackTraceAsString(e));\n+    }\n+  }\n+\n+  protected void cdTo(Session session, Node node)\n+  {\n+    List<TypedId> wd = readCurrentWorkingDir(session);\n+    try\n+    {\n+      wd.add(getCurrent(session).getTypedId());\n+    } catch (ShellException e)\n+    {   // OK not found then\n+    }\n+    writeCurrentWorkingDir(wd, session);\n+    setCurrent(session, NodeOrRelationship.wrap(node));\n+  }\n+\n+  private static String getDisplayNameForCurrent(\n+      GraphDatabaseShellServer server, Session session)\n+      throws ShellException\n+  {\n+    NodeOrRelationship current = getCurrent(server, session);\n+    return current.isNode() ? \"(me)\" : \"<me>\";\n+  }\n+\n+  public static String getDisplayNameForNonExistent()\n+  {\n+    return \"(?)\";\n+  }\n+\n+  /**\n+   * @param server     the {@link GraphDatabaseShellServer} to run at.\n+   * @param session    the {@link Session} used by the client.\n+   * @param thing      the thing to get the name-representation for.\n+   * @param checkForMe check if node/rel is the current one in the session\n+   * @return the display name for a {@link Node}.\n+   * @throws ShellException if an error occurs.\n+   */\n+  public static String getDisplayName(GraphDatabaseShellServer server,\n+                                      Session session, NodeOrRelationship thing, boolean checkForMe)\n+      throws ShellException\n+  {\n+    if (thing.isNode())\n+    {\n+      return getDisplayName(server, session, thing.asNode(),\n+          checkForMe);\n+    } else\n+    {\n+      return getDisplayName(server, session, thing.asRelationship(),\n+          true, checkForMe);\n+    }\n+  }\n+\n+  /**\n+   * @param server     the {@link GraphDatabaseShellServer} to run at.\n+   * @param session    the {@link Session} used by the client.\n+   * @param typedId    the id for the item to display.\n+   * @param checkForMe check if node/rel is the current one in the session\n+   * @return a display string for the {@code typedId}.\n+   * @throws ShellException if an error occurs.\n+   */\n+  public static String getDisplayName(GraphDatabaseShellServer server,\n+                                      Session session, TypedId typedId, boolean checkForMe)\n+      throws ShellException\n+  {\n+    return getDisplayName(server, session,\n+        getThingById(server, typedId), checkForMe);\n+  }\n+\n+  /**\n+   * @param server     the {@link GraphDatabaseShellServer} to run at.\n+   * @param session    the {@link Session} used by the client.\n+   * @param node       the {@link Node} to get a display string for.\n+   * @param checkForMe check if node is the current one in the session\n+   * @return a display string for {@code node}.\n+   * @throws ShellException if an error occurs.\n+   */\n+  public static String getDisplayName(GraphDatabaseShellServer server,\n+                                      Session session, Node node, boolean checkForMe) throws ShellException\n+  {\n+    if (checkForMe &&\n+        isCurrent(session, NodeOrRelationship.wrap(node)))\n+    {\n+      return getDisplayNameForCurrent(server, session);\n+    }\n+\n+    String title = findTitle(session, node);\n+    return \"(\" + (title != null ? title + \",\" : \"\") + node.getId() + \")\";\n+  }\n+\n+  protected static String findTitle(Session session, Node node) throws ShellException\n+  {\n+    String keys = session.getTitleKeys();\n+    if (keys == null)\n+    {\n+      return null;\n+    }\n+\n+    String[] titleKeys = keys.split(Pattern.quote(\",\"));\n+    Pattern[] patterns = new Pattern[titleKeys.length];\n+    for (int i = 0; i < titleKeys.length; i++)\n+    {\n+      patterns[i] = Pattern.compile(titleKeys[i]);\n+    }\n+    for (Pattern pattern : patterns)\n+    {\n+      for (String nodeKey : node.getPropertyKeys())\n+      {\n+        if (matches(pattern, nodeKey, false, false))\n+        {\n+          return trimLength(session,\n+              format(node.getProperty(nodeKey), false));\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private static String trimLength(Session session, String string) throws ShellException\n+  {\n+    String maxLengthString = session.getMaxTitleLength();\n+    int maxLength = maxLengthString != null ?\n+        Integer.parseInt(maxLengthString) : Integer.MAX_VALUE;\n+    if (string.length() > maxLength)\n+    {\n+      string = string.substring(0, maxLength) + \"...\";\n+    }\n+    return string;\n+  }\n+\n+  /**\n+   * @param server       the {@link GraphDatabaseShellServer} to run at.\n+   * @param session      the {@link Session} used by the client.\n+   * @param relationship the {@link Relationship} to get a display name for.\n+   * @param verbose      whether or not to include the relationship id as well.\n+   * @param checkForMe   check if relationship is the current one in the session\n+   * @return a display string for the {@code relationship}.\n+   * @throws ShellException if an error occurs.\n+   */\n+  public static String getDisplayName(GraphDatabaseShellServer server,\n+                                      Session session, Relationship relationship, boolean verbose,\n+                                      boolean checkForMe) throws ShellException\n+  {\n+    if (checkForMe &&\n+        isCurrent(session, NodeOrRelationship.wrap(relationship)))\n     {\n-        return getDisplayName( server, session,\n-            getThingById( server, typedId ), checkForMe );\n+      return getDisplayNameForCurrent(server, session);\n     }\n \n-    /**\n-     * @param server the {@link GraphDatabaseShellServer} to run at.\n-     * @param session the {@link Session} used by the client.\n-     * @param node the {@link Node} to get a display string for.\n-     * @param checkForMe check if node is the current one in the session\n-     * @return a display string for {@code node}.\n-     * @throws ShellException if an error occurs.\n-     */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, Node node, boolean checkForMe ) throws ShellException\n-    {\n-        if ( checkForMe &&\n-                isCurrent( session, NodeOrRelationship.wrap( node ) ) )\n-        {\n-            return getDisplayNameForCurrent( server, session );\n-        }\n+    return \"[\" + \":\" + relationship.getType().name() + (verbose ? \",\" + relationship.getId() : \"\") + \"]\";\n+  }\n \n-        String title = findTitle( session, node );\n-        return \"(\" + (title != null ? title + \",\" : \"\") + node.getId() + \")\";\n-    }\n-\n-    protected static String findTitle( Session session, Node node ) throws ShellException\n+  public static String withArrows(Relationship relationship, String displayName, Node leftNode)\n+  {\n+    if (relationship.getStartNode().equals(leftNode))\n     {\n-        String keys = session.getTitleKeys();\n-        if ( keys == null )\n-        {\n-            return null;\n-        }\n-\n-        String[] titleKeys = keys.split( Pattern.quote( \",\" ) );\n-        Pattern[] patterns = new Pattern[ titleKeys.length ];\n-        for ( int i = 0; i < titleKeys.length; i++ )\n-        {\n-            patterns[ i ] = Pattern.compile( titleKeys[ i ] );\n-        }\n-        for ( Pattern pattern : patterns )\n-        {\n-            for ( String nodeKey : node.getPropertyKeys() )\n-            {\n-                if ( matches( pattern, nodeKey, false, false ) )\n-                {\n-                    return trimLength( session,\n-                        format( node.getProperty( nodeKey ), false ) );\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static String trimLength( Session session, String string ) throws ShellException\n+      return \"-\" + displayName + \"->\";\n+    } else if (relationship.getEndNode().equals(leftNode))\n     {\n-        String maxLengthString = session.getMaxTitleLength();\n-        int maxLength = maxLengthString != null ?\n-            Integer.parseInt( maxLengthString ) : Integer.MAX_VALUE;\n-        if ( string.length() > maxLength )\n-        {\n-            string = string.substring( 0, maxLength ) + \"...\";\n-        }\n-        return string;\n+      return \"<-\" + displayName + \"-\";\n     }\n+    throw new IllegalArgumentException(leftNode + \" is neither start nor end node to \" + relationship);\n+  }\n \n-    /**\n-     * @param server the {@link GraphDatabaseShellServer} to run at.\n-     * @param session the {@link Session} used by the client.\n-     * @param relationship the {@link Relationship} to get a display name for.\n-     * @param verbose whether or not to include the relationship id as well.\n-     * @param checkForMe check if relationship is the current one in the session\n-     * @return a display string for the {@code relationship}.\n-     * @throws ShellException if an error occurs.\n-     */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, Relationship relationship, boolean verbose,\n-        boolean checkForMe ) throws ShellException\n-    {\n-        if ( checkForMe &&\n-                isCurrent( session, NodeOrRelationship.wrap( relationship ) ) )\n-        {\n-            return getDisplayNameForCurrent( server, session );\n-        }\n+  protected static String fixCaseSensitivity(String string,\n+                                             boolean caseInsensitive)\n+  {\n+    return caseInsensitive ? string.toLowerCase() : string;\n+  }\n \n-        return \"[\" + \":\" + relationship.getType().name() + (verbose ? \",\" + relationship.getId() : \"\") + \"]\";\n-    }\n+  protected static Pattern newPattern(String pattern,\n+                                      boolean caseInsensitive)\n+  {\n+    return pattern == null ? null : Pattern.compile(\n+        fixCaseSensitivity(pattern, caseInsensitive));\n+  }\n \n-    public static String withArrows( Relationship relationship, String displayName, Node leftNode )\n+  protected static boolean matches(Pattern patternOrNull, String value,\n+                                   boolean caseInsensitive, boolean loose)\n+  {\n+    if (patternOrNull == null)\n     {\n-        if ( relationship.getStartNode().equals( leftNode ) )\n-        {\n-            return \"-\" + displayName + \"->\";\n-        }\n-        else if ( relationship.getEndNode().equals( leftNode ) )\n-        {\n-            return \"<-\" + displayName + \"-\";\n-        }\n-        throw new IllegalArgumentException( leftNode + \" is neither start nor end node to \" + relationship );\n+      return true;\n     }\n \n-    protected static String fixCaseSensitivity( String string,\n-        boolean caseInsensitive )\n-    {\n-        return caseInsensitive ? string.toLowerCase() : string;\n-    }\n+    value = fixCaseSensitivity(value, caseInsensitive);\n+    return loose ?\n+        patternOrNull.matcher(value).find() :\n+        patternOrNull.matcher(value).matches();\n+  }\n \n-    protected static Pattern newPattern( String pattern,\n-        boolean caseInsensitive )\n+  protected static <T extends Enum<T>> String niceEnumAlternatives(Class<T> enumClass)\n+  {\n+    StringBuilder builder = new StringBuilder(\"[\");\n+    int count = 0;\n+    for (T enumConstant : enumClass.getEnumConstants())\n     {\n-        return pattern == null ? null : Pattern.compile(\n-            fixCaseSensitivity( pattern, caseInsensitive ) );\n+      builder.append(count++ == 0 ? \"\" : \", \");\n+      builder.append(enumConstant.name());\n     }\n+    return builder.append(\"]\").toString();\n+  }\n \n-    protected static boolean matches( Pattern patternOrNull, String value,\n-        boolean caseInsensitive, boolean loose )\n+  protected static <T extends Enum<T>> T parseEnum(\n+      Class<T> enumClass, String name, T defaultValue, Pair<String, T>... additionalPairs)\n+  {\n+    if (name == null)\n     {\n-        if ( patternOrNull == null )\n-        {\n-            return true;\n-        }\n-\n-        value = fixCaseSensitivity( value, caseInsensitive );\n-        return loose ?\n-            patternOrNull.matcher( value ).find() :\n-            patternOrNull.matcher( value ).matches();\n+      return defaultValue;\n     }\n \n-    protected static <T extends Enum<T>> String niceEnumAlternatives( Class<T> enumClass )\n+    name = name.toLowerCase();\n+    for (T enumConstant : enumClass.getEnumConstants())\n     {\n-        StringBuilder builder = new StringBuilder( \"[\" );\n-        int count = 0;\n-        for ( T enumConstant : enumClass.getEnumConstants() )\n-        {\n-            builder.append( count++ == 0 ? \"\" : \", \" );\n-            builder.append( enumConstant.name() );\n-        }\n-        return builder.append( \"]\" ).toString();\n+      if (enumConstant.name().equalsIgnoreCase(name))\n+      {\n+        return enumConstant;\n+      }\n     }\n-\n-    protected static <T extends Enum<T>> T parseEnum(\n-        Class<T> enumClass, String name, T defaultValue, Pair<String, T>... additionalPairs )\n+    for (T enumConstant : enumClass.getEnumConstants())\n     {\n-        if ( name == null )\n-        {\n-            return defaultValue;\n-        }\n-\n-        name = name.toLowerCase();\n-        for ( T enumConstant : enumClass.getEnumConstants() )\n-        {\n-            if ( enumConstant.name().equalsIgnoreCase( name ) )\n-            {\n-                return enumConstant;\n-            }\n-        }\n-        for ( T enumConstant : enumClass.getEnumConstants() )\n-        {\n-            if ( enumConstant.name().toLowerCase().startsWith( name ) )\n-            {\n-                return enumConstant;\n-            }\n-        }\n-\n-        for ( Pair<String, T> additional : additionalPairs )\n-        {\n-            if ( additional.first().equalsIgnoreCase( name ) )\n-            {\n-                return additional.other();\n-            }\n-        }\n-        for ( Pair<String, T> additional : additionalPairs )\n-        {\n-            if ( additional.first().toLowerCase().startsWith( name ) )\n-            {\n-                return additional.other();\n-            }\n-        }\n-\n-        throw new IllegalArgumentException( \"No '\" + name + \"' or '\" +\n-            name + \".*' in \" + enumClass );\n+      if (enumConstant.name().toLowerCase().startsWith(name))\n+      {\n+        return enumConstant;\n+      }\n     }\n \n-    protected static boolean filterMatches( Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n-            boolean looseFilters, String key, Object value )\n+    for (Pair<String, T> additional : additionalPairs)\n     {\n-        if ( filterMap == null || filterMap.isEmpty() )\n-        {\n-            return true;\n-        }\n-        for ( Map.Entry<String, Object> filter : filterMap.entrySet() )\n-        {\n-            if ( matches( newPattern( filter.getKey(),\n-                caseInsensitiveFilters ), key, caseInsensitiveFilters,\n-                looseFilters ) )\n-            {\n-                String filterValue = filter.getValue() != null ?\n-                    filter.getValue().toString() : null;\n-                if ( matches( newPattern( filterValue,\n-                    caseInsensitiveFilters ), value.toString(),\n-                    caseInsensitiveFilters, looseFilters ) )\n-                {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n+      if (additional.first().equalsIgnoreCase(name))\n+      {\n+        return additional.other();\n+      }\n     }\n-\n-    protected static String frame( String string, boolean frame )\n+    for (Pair<String, T> additional : additionalPairs)\n     {\n-        return frame ? \"[\" + string + \"]\" : string;\n+      if (additional.first().toLowerCase().startsWith(name))\n+      {\n+        return additional.other();\n+      }\n     }\n \n-    protected static String format( Object value, boolean includeFraming )\n-    {\n-        String result;\n-        if ( value.getClass().isArray() )\n-        {\n-            StringBuilder buffer = new StringBuilder();\n-            int length = Array.getLength( value );\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                Object singleValue = Array.get( value, i );\n-                if ( i > 0 )\n-                {\n-                    buffer.append( \",\" );\n-                }\n-                buffer.append( frame( singleValue.toString(),\n-                    includeFraming ) );\n-            }\n-            result = buffer.toString();\n-        }\n-        else\n-        {\n-            result = frame( value.toString(), includeFraming );\n-        }\n-        return result;\n-    }\n+    throw new IllegalArgumentException(\"No '\" + name + \"' or '\" +\n+        name + \".*' in \" + enumClass);\n+  }\n \n-    protected static void printAndInterpretTemplateLines( Collection<String> templateLines, boolean newLineBetweenHits,\n-            NodeOrRelationship entity, GraphDatabaseShellServer server, Session session, Output out )\n-            throws ShellException, RemoteException\n+  protected static boolean filterMatches(Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+                                         boolean looseFilters, String key, Object value)\n+  {\n+    if (filterMap == null || filterMap.isEmpty())\n     {\n-        if ( templateLines.isEmpty() )\n-        {\n-            out.println( getDisplayName( server, session, entity, true ) );\n-        }\n-\n-        if ( !templateLines.isEmpty() )\n-        {\n-            Map<String, Object> data = new HashMap<>();\n-            data.put( \"i\", entity.getId() );\n-            for ( String command : templateLines )\n-            {\n-                String line = TextUtil.templateString( command, data );\n-                server.interpretLine( session.getId(), line, out );\n-            }\n-        }\n-        if ( newLineBetweenHits )\n-        {\n-            out.println();\n-        }\n+      return true;\n     }\n-\n-    /**\n-     * Reads the session variable specified in {@link org.neo4j.shell.Variables#WORKING_DIR_KEY} and\n-     * returns it as a list of typed ids.\n-     * @param session the session to read from.\n-     * @return the working directory as a list.\n-     * @throws RemoteException if an RMI error occurs.\n-     */\n-    public static List<TypedId> readCurrentWorkingDir( Session session )\n+    for (Map.Entry<String, Object> filter : filterMap.entrySet())\n     {\n-        List<TypedId> list = new ArrayList<>();\n-        String path = session.getPath();\n-        if ( path != null && path.trim().length() > 0 )\n+      if (matches(newPattern(filter.getKey(),\n+          caseInsensitiveFilters), key, caseInsensitiveFilters,\n+          looseFilters))\n+      {\n+        String filterValue = filter.getValue() != null ?\n+            filter.getValue().toString() : null;\n+        if (matches(newPattern(filterValue,\n+            caseInsensitiveFilters), value.toString(),\n+            caseInsensitiveFilters, looseFilters))\n         {\n-            for ( String typedId : path.split( \",\" ) )\n-            {\n-                list.add( new TypedId( typedId ) );\n-            }\n+          return true;\n         }\n-        return list;\n+      }\n     }\n+    return false;\n+  }\n \n-    public static void writeCurrentWorkingDir( List<TypedId> paths, Session session )\n-    {\n-        String path = makePath( paths );\n-        session.setPath( path );\n-    }\n+  protected static String frame(String string, boolean frame)\n+  {\n+    return frame ? \"[\" + string + \"]\" : string;\n+  }\n \n-    private static String makePath( List<TypedId> paths )\n+  protected static String format(Object value, boolean includeFraming)\n+  {\n+    String result;\n+    if (value.getClass().isArray())\n     {\n-        StringBuilder buffer = new StringBuilder();\n-        for ( TypedId typedId : paths )\n-        {\n-            if ( buffer.length() > 0 )\n-            {\n-                buffer.append( \",\" );\n-            }\n-            buffer.append( typedId.toString() );\n+      StringBuilder buffer = new StringBuilder();\n+      int length = Array.getLength(value);\n+      for (int i = 0; i < length; i++)\n+      {\n+        Object singleValue = Array.get(value, i);\n+        if (i > 0)\n+        {\n+          buffer.append(\",\");\n         }\n-        return buffer.length() > 0 ? buffer.toString() : null;\n-    }\n-\n-    protected static Map<String, Direction> filterMapToTypes( GraphDatabaseService db,\n-            Direction defaultDirection, Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n-            boolean looseFilters )\n+        buffer.append(frame(singleValue.toString(),\n+            includeFraming));\n+      }\n+      result = buffer.toString();\n+    } else\n     {\n-        Map<String, Direction> matches = new TreeMap<>();\n-        for ( RelationshipType type : db.getAllRelationshipTypes() )\n-        {\n-            Direction direction = null;\n-            if ( filterMap == null || filterMap.isEmpty() )\n-            {\n-                direction = defaultDirection;\n-            }\n-            else\n-            {\n-                for ( Map.Entry<String, Object> entry : filterMap.entrySet() )\n-                {\n-                    if ( matches( newPattern( entry.getKey(), caseInsensitiveFilters ),\n-                        type.name(), caseInsensitiveFilters, looseFilters ) )\n-                    {\n-                        direction = getDirection( entry.getValue() != null ? entry.getValue().toString() : null, defaultDirection );\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            // It matches\n-            if ( direction != null )\n-            {\n-                matches.put( type.name(), direction );\n-            }\n-        }\n-        return matches.isEmpty() ? Collections.emptyMap() : matches;\n+      result = frame(value.toString(), includeFraming);\n     }\n+    return result;\n+  }\n \n-    protected static PathExpander toExpander( GraphDatabaseService db, Direction defaultDirection,\n-            Map<String, Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters )\n-    {\n-        defaultDirection = defaultDirection != null ? defaultDirection : Direction.BOTH;\n-        Map<String, Direction> matches = filterMapToTypes( db, defaultDirection, relationshipTypes,\n-                caseInsensitiveFilters, looseFilters );\n-        if ( matches == null )\n-        {\n-            return PathExpanderBuilder.empty().build();\n-        }\n-        PathExpanderBuilder expander = PathExpanderBuilder.empty();\n-        for ( Map.Entry<String, Direction> entry : matches.entrySet() )\n-        {\n-            expander = expander.add( RelationshipType.withName( entry.getKey() ),\n-                    entry.getValue() );\n-        }\n-        return expander.build();\n-    }\n-\n-    protected static PathExpander toSortedExpander( GraphDatabaseService db, Direction defaultDirection,\n-            Map<String, Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters )\n-    {\n-        defaultDirection = defaultDirection != null ? defaultDirection : Direction.BOTH;\n-        Map<String, Direction> matches = filterMapToTypes( db, defaultDirection, relationshipTypes,\n-                caseInsensitiveFilters, looseFilters );\n-        PathExpanderBuilder expander = PathExpanderBuilder.emptyOrderedByType();\n-        for ( Map.Entry<String, Direction> entry : matches.entrySet() )\n-        {\n-            expander = expander.add( RelationshipType.withName( entry.getKey() ),\n-                    entry.getValue() );\n-        }\n-        return expander.build();\n-    }\n-\n-    protected Label[] parseLabels( AppCommandParser parser )\n-    {\n-        return parseValues( parser, \"l\", EMPTY_LABELS, CREATE_LABELS );\n-    }\n-\n-    protected RelationshipType[] parseRelTypes( AppCommandParser parser )\n-    {\n-        return parseValues( parser, \"r\", EMPTY_REL_TYPES, CREATE_REL_TYPES );\n-    }\n-\n-    protected <T> T[] parseValues( AppCommandParser parser, String opt, T[] emptyValue, Function<String[],T[]> factory )\n-    {\n-        String typeValue = parser.option( opt, null );\n-        if ( typeValue == null )\n-        {\n-            return emptyValue;\n-        }\n-        typeValue = typeValue.trim();\n-\n-        String[] stringItems;\n-        if ( typeValue.startsWith( \"[\" ) )\n-        {\n-            Object[] items = parseArray( typeValue );\n-            stringItems = new String[items.length];\n-            for ( int i = 0; i < items.length; i++ )\n-            {\n-                stringItems[i] = withOrWithoutColon( items[i].toString() );\n-            }\n-        }\n-        else\n-        {\n-            stringItems = new String[]{withOrWithoutColon( typeValue )};\n-        }\n-        return factory.apply( stringItems );\n-    }\n-\n-    private String withOrWithoutColon( String item )\n-    {\n-        return item.startsWith( \":\" ) ? item.substring( 1 ) : item;\n-    }\n+  protected static void printAndInterpretTemplateLines(Collection<String> templateLines, boolean newLineBetweenHits,\n+                                                       NodeOrRelationship entity, GraphDatabaseShellServer server, Session session, Output out)\n+      throws ShellException, RemoteException\n+  {\n+    if (templateLines.isEmpty())\n+    {\n+      out.println(getDisplayName(server, session, entity, true));\n+    }\n+\n+    if (!templateLines.isEmpty())\n+    {\n+      Map<String, Object> data = new HashMap<>();\n+      data.put(\"i\", entity.getId());\n+      for (String command : templateLines)\n+      {\n+        String line = TextUtil.templateString(command, data);\n+        server.interpretLine(session.getId(), line, out);\n+      }\n+    }\n+    if (newLineBetweenHits)\n+    {\n+      out.println();\n+    }\n+  }\n+\n+  /**\n+   * Reads the session variable specified in {@link org.neo4j.shell.Variables#WORKING_DIR_KEY} and\n+   * returns it as a list of typed ids.\n+   *\n+   * @param session the session to read from.\n+   * @return the working directory as a list.\n+   * @throws RemoteException if an RMI error occurs.\n+   */\n+  public static List<TypedId> readCurrentWorkingDir(Session session)\n+  {\n+    List<TypedId> list = new ArrayList<>();\n+    String path = session.getPath();\n+    if (path != null && path.trim().length() > 0)\n+    {\n+      for (String typedId : path.split(\",\"))\n+      {\n+        list.add(new TypedId(typedId));\n+      }\n+    }\n+    return list;\n+  }\n+\n+  public static void writeCurrentWorkingDir(List<TypedId> paths, Session session)\n+  {\n+    String path = makePath(paths);\n+    session.setPath(path);\n+  }\n+\n+  private static String makePath(List<TypedId> paths)\n+  {\n+    StringBuilder buffer = new StringBuilder();\n+    for (TypedId typedId : paths)\n+    {\n+      if (buffer.length() > 0)\n+      {\n+        buffer.append(\",\");\n+      }\n+      buffer.append(typedId.toString());\n+    }\n+    return buffer.length() > 0 ? buffer.toString() : null;\n+  }\n+\n+  protected static Map<String, Direction> filterMapToTypes(GraphDatabaseService db,\n+                                                           Direction defaultDirection, Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+                                                           boolean looseFilters)\n+  {\n+    Map<String, Direction> matches = new TreeMap<>();\n+    for (RelationshipType type : db.getAllRelationshipTypes())\n+    {\n+      Direction direction = null;\n+      if (filterMap == null || filterMap.isEmpty())\n+      {\n+        direction = defaultDirection;\n+      } else\n+      {\n+        for (Map.Entry<String, Object> entry : filterMap.entrySet())\n+        {\n+          if (matches(newPattern(entry.getKey(), caseInsensitiveFilters),\n+              type.name(), caseInsensitiveFilters, looseFilters))\n+          {\n+            direction = getDirection(entry.getValue() != null ? entry.getValue().toString() : null, defaultDirection);\n+            break;\n+          }\n+        }\n+      }\n+\n+      // It matches\n+      if (direction != null)\n+      {\n+        matches.put(type.name(), direction);\n+      }\n+    }\n+    return matches.isEmpty() ? Collections.emptyMap() : matches;\n+  }\n+\n+  protected static PathExpander toExpander(GraphDatabaseService db, Direction defaultDirection,\n+                                           Map<String, Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters)\n+  {\n+    defaultDirection = defaultDirection != null ? defaultDirection : Direction.BOTH;\n+    Map<String, Direction> matches = filterMapToTypes(db, defaultDirection, relationshipTypes,\n+        caseInsensitiveFilters, looseFilters);\n+    if (matches == null)\n+    {\n+      return PathExpanderBuilder.empty().build();\n+    }\n+    PathExpanderBuilder expander = PathExpanderBuilder.empty();\n+    for (Map.Entry<String, Direction> entry : matches.entrySet())\n+    {\n+      expander = expander.add(RelationshipType.withName(entry.getKey()),\n+          entry.getValue());\n+    }\n+    return expander.build();\n+  }\n+\n+  protected static PathExpander toSortedExpander(GraphDatabaseService db, Direction defaultDirection,\n+                                                 Map<String, Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters)\n+  {\n+    defaultDirection = defaultDirection != null ? defaultDirection : Direction.BOTH;\n+    Map<String, Direction> matches = filterMapToTypes(db, defaultDirection, relationshipTypes,\n+        caseInsensitiveFilters, looseFilters);\n+    PathExpanderBuilder expander = PathExpanderBuilder.emptyOrderedByType();\n+    for (Map.Entry<String, Direction> entry : matches.entrySet())\n+    {\n+      expander = expander.add(RelationshipType.withName(entry.getKey()),\n+          entry.getValue());\n+    }\n+    return expander.build();\n+  }\n+\n+  protected Label[] parseLabels(AppCommandParser parser)\n+  {\n+    return parseValues(parser, \"l\", EMPTY_LABELS, CREATE_LABELS);\n+  }\n+\n+  protected RelationshipType[] parseRelTypes(AppCommandParser parser)\n+  {\n+    return parseValues(parser, \"r\", EMPTY_REL_TYPES, CREATE_REL_TYPES);\n+  }\n+\n+  protected <T> T[] parseValues(AppCommandParser parser, String opt, T[] emptyValue, Function<String[], T[]> factory)\n+  {\n+    String typeValue = parser.option(opt, null);\n+    if (typeValue == null)\n+    {\n+      return emptyValue;\n+    }\n+    typeValue = typeValue.trim();\n+\n+    String[] stringItems;\n+    if (typeValue.startsWith(\"[\"))\n+    {\n+      Object[] items = parseArray(typeValue);\n+      stringItems = new String[items.length];\n+      for (int i = 0; i < items.length; i++)\n+      {\n+        stringItems[i] = withOrWithoutColon(items[i].toString());\n+      }\n+    } else\n+    {\n+      stringItems = new String[] {withOrWithoutColon(typeValue)};\n+    }\n+    return factory.apply(stringItems);\n+  }\n+\n+  private String withOrWithoutColon(String item)\n+  {\n+    return item.startsWith(\":\") ? item.substring(1) : item;\n+  }\n }\n",
            "diff_size": 1059
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 273).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "733",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3557/TransactionProvidingApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3557/TransactionProvidingApp.java\nindex 32acdff60dc..4072fef623c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3557/TransactionProvidingApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3557/TransactionProvidingApp.java\n@@ -78,7 +78,8 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         {\n             labels[i] = Label.label( values[i] );\n         }\n-        return labels;\n+\n+return labels;\n     };\n \n     private static final Function<String[],RelationshipType[]> CREATE_REL_TYPES = values ->\n@@ -88,23 +89,17 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         {\n             types[i] = RelationshipType.withName( values[i] );\n         }\n-        return types;\n+\n+return types;\n     };\n \n     protected static final String[] STANDARD_EVAL_IMPORTS = new String[] {\n-        \"org.neo4j.graphdb\",\n-        \"org.neo4j.graphdb.event\",\n-        \"org.neo4j.graphdb.index\",\n-        \"org.neo4j.graphdb.traversal\",\n-        \"org.neo4j.kernel\"\n+        \"org.neo4j.graphdb\", \"org.neo4j.graphdb.event\", \"org.neo4j.graphdb.index\", \"org.neo4j.graphdb.traversal\", \"org.neo4j.kernel\"\n     };\n \n-    protected static final OptionDefinition OPTION_DEF_FOR_C = new OptionDefinition(\n-            OptionValueType.MUST,\n-            \"Command to run for each returned node. Use $i for node/relationship id, example:\\n\" +\n-            \"-c \\\"ls -f name $i\\\". Multiple commands can be supplied with && in between\" );\n+    protected static final OptionDefinition OPTION_DEF_FOR_C = new OptionDefinition( OptionValueType.MUST, \"Command to run for each returned node. Use $i for node/relationship id, example:\\n\" + \"-c \\\"ls -f name $i\\\". Multiple commands can be supplied with && in between\" );\n \n-    /**\n+/**\n      * @param server the {@link GraphDatabaseShellServer} to get the current\n      * node/relationship from.\n      * @param session the {@link Session} used by the client.\n@@ -112,13 +107,12 @@ public abstract class TransactionProvidingApp extends AbstractApp\n      * at the moment.\n      * @throws ShellException if some error occured.\n      */\n-    public static NodeOrRelationship getCurrent(\n-        GraphDatabaseShellServer server, Session session ) throws ShellException\n-    {\n+    public static NodeOrRelationship getCurrent( GraphDatabaseShellServer server, Session session ) throws ShellException\n+{\n         String currentThing = session.getCurrent();\n         NodeOrRelationship result;\n         /*                           Note: Artifact of removing the ref node, revisit and clean up */\n-        if ( currentThing == null || currentThing.equals( \"(?)\" )  )\n+        if ( currentThing == null || currentThing.equals( \"(?)\" ))\n         {\n             throw new ShellException( \"Not currently standing on any entity.\" );\n         }\n@@ -127,42 +121,38 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             TypedId typedId = new TypedId( currentThing );\n             result = getThingById( server, typedId );\n         }\n-        return result;\n+\n+return result;\n     }\n \n-    protected NodeOrRelationship getCurrent( Session session )\n-        throws ShellException\n-    {\n+    protected NodeOrRelationship getCurrent( Session session ) throws ShellException\n+{\n         return getCurrent( getServer(), session );\n     }\n \n     public static boolean isCurrent( Session session, NodeOrRelationship thing )\n     {\n         String currentThing = session.getCurrent();\n-        return currentThing != null && currentThing.equals(\n-                thing.getTypedId().toString() );\n+        return currentThing != null && currentThing.equals( thing.getTypedId().toString() );\n     }\n \n     protected static void clearCurrent( Session session )\n     {\n-        session.setCurrent( getDisplayNameForNonExistent());\n+        session.setCurrent( getDisplayNameForNonExistent() );\n     }\n \n-    protected static void setCurrent( Session session,\n-                                      NodeOrRelationship current )\n-    {\n+    protected static void setCurrent( Session session, NodeOrRelationship current )\n+{\n         session.setCurrent( current.getTypedId().toString() );\n     }\n \n-    protected void assertCurrentIsNode( Session session )\n-        throws ShellException\n-    {\n+    protected void assertCurrentIsNode( Session session ) throws ShellException\n+{\n         NodeOrRelationship current = getCurrent( session );\n         if ( !current.isNode() )\n         {\n-            throw new ShellException(\n-                \"You must stand on a node to be able to do this\" );\n-        }\n+            throw new ShellException( \"You must stand on a node to be able to do this\" );\n+    }\n     }\n \n     @Override\n@@ -181,48 +171,41 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         return getDirection( direction, Direction.OUTGOING );\n     }\n \n-    protected static Direction getDirection( String direction,\n-        Direction defaultDirection )\n-    {\n+    protected static Direction getDirection( String direction, Direction defaultDirection )\n+{\n         return parseEnum( Direction.class, direction, defaultDirection );\n     }\n \n-    protected static NodeOrRelationship getThingById(\n-        GraphDatabaseShellServer server, TypedId typedId ) throws ShellException\n-    {\n+    protected static NodeOrRelationship getThingById( GraphDatabaseShellServer server, TypedId typedId ) throws ShellException\n+{\n         NodeOrRelationship result;\n         if ( typedId.isNode() )\n         {\n             try\n             {\n-                result = NodeOrRelationship.wrap(\n-                    server.getDb().getNodeById( typedId.getId() ) );\n-            }\n+                result = NodeOrRelationship.wrap( server.getDb().getNodeById( typedId.getId() ) );\n+    }\n             catch ( NotFoundException e )\n             {\n-                throw new ShellException( \"Node \" + typedId.getId() +\n-                    \" not found\" );\n-            }\n+                throw new ShellException( \"Node \" + typedId.getId() + \" not found\" );\n+    }\n         }\n         else\n         {\n             try\n             {\n-                result = NodeOrRelationship.wrap(\n-                    server.getDb().getRelationshipById( typedId.getId() ) );\n-            }\n+                result = NodeOrRelationship.wrap( server.getDb().getRelationshipById( typedId.getId() ) );\n+    }\n             catch ( NotFoundException e )\n             {\n-                throw new ShellException( \"Relationship \" + typedId.getId() +\n-                    \" not found\" );\n-            }\n+                throw new ShellException( \"Relationship \" + typedId.getId() + \" not found\" );\n+    }\n         }\n         return result;\n     }\n \n-    protected NodeOrRelationship getThingById( TypedId typedId )\n-        throws ShellException\n-    {\n+    protected NodeOrRelationship getThingById( TypedId typedId ) throws ShellException\n+{\n         return getThingById( getServer(), typedId );\n     }\n \n@@ -246,7 +229,8 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             {\n                 tx.success();\n             }\n-            return result;\n+\n+return result;\n         }\n     }\n \n@@ -279,12 +263,10 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         return \"OUTGOING, INCOMING, o, i\";\n     }\n \n-    protected abstract Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws Exception;\n+    protected abstract Continuation exec( AppCommandParser parser, Session session, Output out ) throws Exception;\n \n-    protected void printPath( Path path, boolean quietPrint, Session session, Output out )\n-            throws RemoteException, ShellException\n-    {\n+protected void printPath( Path path, boolean quietPrint, Session session, Output out ) throws RemoteException, ShellException\n+{\n         StringBuilder builder = new StringBuilder();\n         Node currentNode = null;\n         for ( PropertyContainer entity : path )\n@@ -314,8 +296,8 @@ public abstract class TransactionProvidingApp extends AbstractApp\n \n         try\n         {\n-            Map<String, Object> properties = parseJSONMap( propertyJson );\n-            for ( Map.Entry<String, Object> entry : properties.entrySet() )\n+            Map<String,Object> properties = parseJSONMap( propertyJson );\n+            for ( Map.Entry<String,Object> entry : properties.entrySet() )\n             {\n                 entity.setProperty( entry.getKey(), jsonToNeo4jPropertyValue( entry.getValue() ) );\n             }\n@@ -339,9 +321,11 @@ public abstract class TransactionProvidingApp extends AbstractApp\n                 {\n                     Array.set( resultArray, i, array.get( i ) );\n                 }\n-                return resultArray;\n+\n+return resultArray;\n             }\n-            return value;\n+\n+return value;\n         }\n         catch ( JSONException e )\n         {\n@@ -357,16 +341,16 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             wd.add( getCurrent( session ).getTypedId() );\n         }\n         catch ( ShellException e )\n-        {   // OK not found then\n+        {\n+    // OK not found then\n         }\n-        writeCurrentWorkingDir( wd, session );\n+\n+writeCurrentWorkingDir( wd, session );\n         setCurrent( session, NodeOrRelationship.wrap( node ) );\n     }\n \n-    private static String getDisplayNameForCurrent(\n-            GraphDatabaseShellServer server, Session session )\n-            throws ShellException\n-    {\n+    private static String getDisplayNameForCurrent( GraphDatabaseShellServer server, Session session ) throws ShellException\n+{\n         NodeOrRelationship current = getCurrent( server, session );\n         return current.isNode() ? \"(me)\" : \"<me>\";\n     }\n@@ -384,10 +368,8 @@ public abstract class TransactionProvidingApp extends AbstractApp\n      * @return the display name for a {@link Node}.\n      * @throws ShellException if an error occurs.\n      */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, NodeOrRelationship thing, boolean checkForMe )\n-        throws ShellException\n-    {\n+    public static String getDisplayName( GraphDatabaseShellServer server, Session session, NodeOrRelationship thing, boolean checkForMe ) throws ShellException\n+{\n         if ( thing.isNode() )\n         {\n             return getDisplayName( server, session, thing.asNode(),\n@@ -395,9 +377,8 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         }\n         else\n         {\n-            return getDisplayName( server, session, thing.asRelationship(),\n-                true, checkForMe );\n-        }\n+            return getDisplayName( server, session, thing.asRelationship(), true, checkForMe );\n+    }\n     }\n \n     /**\n@@ -408,13 +389,10 @@ public abstract class TransactionProvidingApp extends AbstractApp\n      * @return a display string for the {@code typedId}.\n      * @throws ShellException if an error occurs.\n      */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, TypedId typedId, boolean checkForMe )\n-        throws ShellException\n-    {\n-        return getDisplayName( server, session,\n-            getThingById( server, typedId ), checkForMe );\n-    }\n+    public static String getDisplayName( GraphDatabaseShellServer server, Session session, TypedId typedId, boolean checkForMe ) throws ShellException\n+{\n+        return getDisplayName( server, session, getThingById( server, typedId ), checkForMe );\n+            }\n \n     /**\n      * @param server the {@link GraphDatabaseShellServer} to run at.\n@@ -424,11 +402,9 @@ public abstract class TransactionProvidingApp extends AbstractApp\n      * @return a display string for {@code node}.\n      * @throws ShellException if an error occurs.\n      */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, Node node, boolean checkForMe ) throws ShellException\n-    {\n-        if ( checkForMe &&\n-                isCurrent( session, NodeOrRelationship.wrap( node ) ) )\n+    public static String getDisplayName( GraphDatabaseShellServer server, Session session, Node node, boolean checkForMe ) throws ShellException\n+{\n+        if ( checkForMe && isCurrent( session, NodeOrRelationship.wrap( node ) ) )\n         {\n             return getDisplayNameForCurrent( server, session );\n         }\n@@ -446,10 +422,10 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         }\n \n         String[] titleKeys = keys.split( Pattern.quote( \",\" ) );\n-        Pattern[] patterns = new Pattern[ titleKeys.length ];\n+        Pattern[] patterns = new Pattern[titleKeys.length];\n         for ( int i = 0; i < titleKeys.length; i++ )\n         {\n-            patterns[ i ] = Pattern.compile( titleKeys[ i ] );\n+            patterns[ i] = Pattern.compile( titleKeys[ i ] );\n         }\n         for ( Pattern pattern : patterns )\n         {\n@@ -457,9 +433,8 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             {\n                 if ( matches( pattern, nodeKey, false, false ) )\n                 {\n-                    return trimLength( session,\n-                        format( node.getProperty( nodeKey ), false ) );\n-                }\n+                    return trimLength( session, format( node.getProperty( nodeKey ), false ) );\n+    }\n             }\n         }\n         return null;\n@@ -468,13 +443,13 @@ public abstract class TransactionProvidingApp extends AbstractApp\n     private static String trimLength( Session session, String string ) throws ShellException\n     {\n         String maxLengthString = session.getMaxTitleLength();\n-        int maxLength = maxLengthString != null ?\n-            Integer.parseInt( maxLengthString ) : Integer.MAX_VALUE;\n-        if ( string.length() > maxLength )\n+        int maxLength = maxLengthString != null ? Integer.parseInt( maxLengthString ) : Integer.MAX_VALUE;\n+if ( string.length() > maxLength )\n         {\n             string = string.substring( 0, maxLength ) + \"...\";\n         }\n-        return string;\n+\n+return string;\n     }\n \n     /**\n@@ -486,17 +461,15 @@ public abstract class TransactionProvidingApp extends AbstractApp\n      * @return a display string for the {@code relationship}.\n      * @throws ShellException if an error occurs.\n      */\n-    public static String getDisplayName( GraphDatabaseShellServer server,\n-        Session session, Relationship relationship, boolean verbose,\n+    public static String getDisplayName( GraphDatabaseShellServer server, Session session, Relationship relationship, boolean verbose,\n         boolean checkForMe ) throws ShellException\n-    {\n-        if ( checkForMe &&\n-                isCurrent( session, NodeOrRelationship.wrap( relationship ) ) )\n+{\n+        if ( checkForMe && isCurrent( session, NodeOrRelationship.wrap( relationship ) ) )\n         {\n             return getDisplayNameForCurrent( server, session );\n         }\n \n-        return \"[\" + \":\" + relationship.getType().name() + (verbose ? \",\" + relationship.getId() : \"\") + \"]\";\n+        return \"[\" + \":\" + relationship.getType().name() + ( verbose ? \",\" + relationship.getId() : \"\") + \"]\";\n     }\n \n     public static String withArrows( Relationship relationship, String displayName, Node leftNode )\n@@ -512,31 +485,25 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         throw new IllegalArgumentException( leftNode + \" is neither start nor end node to \" + relationship );\n     }\n \n-    protected static String fixCaseSensitivity( String string,\n-        boolean caseInsensitive )\n-    {\n+    protected static String fixCaseSensitivity( String string, boolean caseInsensitive )\n+{\n         return caseInsensitive ? string.toLowerCase() : string;\n     }\n \n-    protected static Pattern newPattern( String pattern,\n-        boolean caseInsensitive )\n-    {\n-        return pattern == null ? null : Pattern.compile(\n-            fixCaseSensitivity( pattern, caseInsensitive ) );\n+    protected static Pattern newPattern( String pattern, boolean caseInsensitive )\n+{\n+        return pattern == null ? null : Pattern.compile( fixCaseSensitivity( pattern, caseInsensitive ) );\n     }\n \n-    protected static boolean matches( Pattern patternOrNull, String value,\n-        boolean caseInsensitive, boolean loose )\n-    {\n+    protected static boolean matches( Pattern patternOrNull, String value, boolean caseInsensitive, boolean loose )\n+{\n         if ( patternOrNull == null )\n         {\n             return true;\n         }\n \n         value = fixCaseSensitivity( value, caseInsensitive );\n-        return loose ?\n-            patternOrNull.matcher( value ).find() :\n-            patternOrNull.matcher( value ).matches();\n+        return loose ? patternOrNull.matcher( value ).find() : patternOrNull.matcher( value ).matches();\n     }\n \n     protected static <T extends Enum<T>> String niceEnumAlternatives( Class<T> enumClass )\n@@ -548,12 +515,12 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             builder.append( count++ == 0 ? \"\" : \", \" );\n             builder.append( enumConstant.name() );\n         }\n-        return builder.append( \"]\" ).toString();\n+\n+return builder.append( \"]\" ).toString();\n     }\n \n-    protected static <T extends Enum<T>> T parseEnum(\n-        Class<T> enumClass, String name, T defaultValue, Pair<String, T>... additionalPairs )\n-    {\n+    protected static <T extends Enum<T>> T parseEnum( Class<T> enumClass, String name, T defaultValue, Pair<String, T>... additionalPairs )\n+{\n         if ( name == null )\n         {\n             return defaultValue;\n@@ -575,14 +542,14 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             }\n         }\n \n-        for ( Pair<String, T> additional : additionalPairs )\n+        for ( Pair<String,T> additional : additionalPairs )\n         {\n             if ( additional.first().equalsIgnoreCase( name ) )\n             {\n                 return additional.other();\n             }\n         }\n-        for ( Pair<String, T> additional : additionalPairs )\n+        for ( Pair<String,T> additional : additionalPairs )\n         {\n             if ( additional.first().toLowerCase().startsWith( name ) )\n             {\n@@ -590,29 +557,23 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             }\n         }\n \n-        throw new IllegalArgumentException( \"No '\" + name + \"' or '\" +\n-            name + \".*' in \" + enumClass );\n+        throw new IllegalArgumentException( \"No '\" + name + \"' or '\" + name + \".*' in \" + enumClass );\n     }\n \n-    protected static boolean filterMatches( Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+    protected static boolean filterMatches( Map<String,Object> filterMap, boolean caseInsensitiveFilters,\n             boolean looseFilters, String key, Object value )\n     {\n         if ( filterMap == null || filterMap.isEmpty() )\n         {\n             return true;\n         }\n-        for ( Map.Entry<String, Object> filter : filterMap.entrySet() )\n+        for ( Map.Entry<String,Object> filter : filterMap.entrySet() )\n         {\n-            if ( matches( newPattern( filter.getKey(),\n-                caseInsensitiveFilters ), key, caseInsensitiveFilters,\n-                looseFilters ) )\n-            {\n-                String filterValue = filter.getValue() != null ?\n-                    filter.getValue().toString() : null;\n-                if ( matches( newPattern( filterValue,\n-                    caseInsensitiveFilters ), value.toString(),\n-                    caseInsensitiveFilters, looseFilters ) )\n-                {\n+            if ( matches( newPattern( filter.getKey(), caseInsensitiveFilters ), key, caseInsensitiveFilters, looseFilters ) )\n+{\n+                String filterValue = filter.getValue() != null ? filter.getValue().toString() : null;\n+if ( matches( newPattern( filterValue, caseInsensitiveFilters ), value.toString(), caseInsensitiveFilters, looseFilters ) )\n+{\n                     return true;\n                 }\n             }\n@@ -639,22 +600,21 @@ public abstract class TransactionProvidingApp extends AbstractApp\n                 {\n                     buffer.append( \",\" );\n                 }\n-                buffer.append( frame( singleValue.toString(),\n-                    includeFraming ) );\n-            }\n+                buffer.append( frame( singleValue.toString(), includeFraming ) );\n+    }\n             result = buffer.toString();\n         }\n         else\n         {\n             result = frame( value.toString(), includeFraming );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     protected static void printAndInterpretTemplateLines( Collection<String> templateLines, boolean newLineBetweenHits,\n-            NodeOrRelationship entity, GraphDatabaseShellServer server, Session session, Output out )\n-            throws ShellException, RemoteException\n-    {\n+            NodeOrRelationship entity, GraphDatabaseShellServer server, Session session, Output out ) throws ShellException, RemoteException\n+{\n         if ( templateLines.isEmpty() )\n         {\n             out.println( getDisplayName( server, session, entity, true ) );\n@@ -662,7 +622,7 @@ public abstract class TransactionProvidingApp extends AbstractApp\n \n         if ( !templateLines.isEmpty() )\n         {\n-            Map<String, Object> data = new HashMap<>();\n+            Map<String,Object> data = new HashMap<>();\n             data.put( \"i\", entity.getId() );\n             for ( String command : templateLines )\n             {\n@@ -714,14 +674,15 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             }\n             buffer.append( typedId.toString() );\n         }\n-        return buffer.length() > 0 ? buffer.toString() : null;\n+\n+return buffer.length() > 0 ? buffer.toString() : null;\n     }\n \n-    protected static Map<String, Direction> filterMapToTypes( GraphDatabaseService db,\n-            Direction defaultDirection, Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+    protected static Map<String,Direction> filterMapToTypes( GraphDatabaseService db,\n+            Direction defaultDirection, Map<String,Object> filterMap, boolean caseInsensitiveFilters,\n             boolean looseFilters )\n     {\n-        Map<String, Direction> matches = new TreeMap<>();\n+        Map<String,Direction> matches = new TreeMap<>();\n         for ( RelationshipType type : db.getAllRelationshipTypes() )\n         {\n             Direction direction = null;\n@@ -731,11 +692,10 @@ public abstract class TransactionProvidingApp extends AbstractApp\n             }\n             else\n             {\n-                for ( Map.Entry<String, Object> entry : filterMap.entrySet() )\n+                for ( Map.Entry<String,Object> entry : filterMap.entrySet() )\n                 {\n-                    if ( matches( newPattern( entry.getKey(), caseInsensitiveFilters ),\n-                        type.name(), caseInsensitiveFilters, looseFilters ) )\n-                    {\n+                    if ( matches( newPattern( entry.getKey(), caseInsensitiveFilters ), type.name(), caseInsensitiveFilters, looseFilters ) )\n+{\n                         direction = getDirection( entry.getValue() != null ? entry.getValue().toString() : null, defaultDirection );\n                         break;\n                     }\n@@ -751,38 +711,37 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         return matches.isEmpty() ? Collections.emptyMap() : matches;\n     }\n \n-    protected static PathExpander toExpander( GraphDatabaseService db, Direction defaultDirection,\n-            Map<String, Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters )\n+    protected static PathExpander toExpander( GraphDatabaseService db, Direction defaultDirection, Map<String,Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters )\n     {\n         defaultDirection = defaultDirection != null ? defaultDirection : Direction.BOTH;\n-        Map<String, Direction> matches = filterMapToTypes( db, defaultDirection, relationshipTypes,\n+        Map<String,Direction> matches = filterMapToTypes( db, defaultDirection, relationshipTypes,\n                 caseInsensitiveFilters, looseFilters );\n-        if ( matches == null )\n+if ( matches == null )\n         {\n             return PathExpanderBuilder.empty().build();\n         }\n-        PathExpanderBuilder expander = PathExpanderBuilder.empty();\n-        for ( Map.Entry<String, Direction> entry : matches.entrySet() )\n+\n+PathExpanderBuilder expander = PathExpanderBuilder.empty();\n+        for ( Map.Entry<String,Direction> entry : matches.entrySet() )\n         {\n-            expander = expander.add( RelationshipType.withName( entry.getKey() ),\n-                    entry.getValue() );\n+            expander = expander.add( RelationshipType.withName( entry.getKey() ), entry.getValue() );\n         }\n-        return expander.build();\n+\n+return expander.build();\n     }\n \n-    protected static PathExpander toSortedExpander( GraphDatabaseService db, Direction defaultDirection,\n-            Map<String, Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters )\n+    protected static PathExpander toSortedExpander( GraphDatabaseService db, Direction defaultDirection, Map<String,Object> relationshipTypes, boolean caseInsensitiveFilters, boolean looseFilters )\n     {\n         defaultDirection = defaultDirection != null ? defaultDirection : Direction.BOTH;\n-        Map<String, Direction> matches = filterMapToTypes( db, defaultDirection, relationshipTypes,\n+        Map<String,Direction> matches = filterMapToTypes( db, defaultDirection, relationshipTypes,\n                 caseInsensitiveFilters, looseFilters );\n-        PathExpanderBuilder expander = PathExpanderBuilder.emptyOrderedByType();\n-        for ( Map.Entry<String, Direction> entry : matches.entrySet() )\n+PathExpanderBuilder expander = PathExpanderBuilder.emptyOrderedByType();\n+        for ( Map.Entry<String,Direction> entry : matches.entrySet() )\n         {\n-            expander = expander.add( RelationshipType.withName( entry.getKey() ),\n-                    entry.getValue() );\n+            expander = expander.add( RelationshipType.withName( entry.getKey() ), entry.getValue() );\n         }\n-        return expander.build();\n+\n+return expander.build();\n     }\n \n     protected Label[] parseLabels( AppCommandParser parser )\n@@ -802,7 +761,8 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         {\n             return emptyValue;\n         }\n-        typeValue = typeValue.trim();\n+\n+typeValue = typeValue.trim();\n \n         String[] stringItems;\n         if ( typeValue.startsWith( \"[\" ) )\n@@ -818,11 +778,12 @@ public abstract class TransactionProvidingApp extends AbstractApp\n         {\n             stringItems = new String[]{withOrWithoutColon( typeValue )};\n         }\n-        return factory.apply( stringItems );\n+\n+return factory.apply( stringItems );\n     }\n \n     private String withOrWithoutColon( String item )\n     {\n         return item.startsWith( \":\" ) ? item.substring( 1 ) : item;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 190
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}