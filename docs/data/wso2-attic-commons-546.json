{
    "project_name": "wso2-attic-commons",
    "error_id": "546",
    "information": {
        "errors": [
            {
                "line": "154",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 128).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    OMElement scimProviderElement = scimProviders.next();\n                    //get attributes if exist\n                    String providerId = scimProviderElement.getAttributeValue(new QName(SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n                    scimProvider.setId(providerId);\n\n                    String userName = scimProviderElement.getAttributeValue(new QName(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/546/SCIMConfigProcessor.java\nindex bb7d79d5a37..5a50c2eaefb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/546/SCIMConfigProcessor.java\n@@ -151,7 +151,8 @@ public class SCIMConfigProcessor {\n \n                     OMElement scimProviderElement = scimProviders.next();\n                     //get attributes if exist\n-                    String providerId = scimProviderElement.getAttributeValue(new QName(SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n+                    String providerId = scimProviderElement.\n+                            getAttributeValue(new QName(SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n                     scimProvider.setId(providerId);\n \n                     String userName = scimProviderElement.getAttributeValue(new QName(\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/546/SCIMConfigProcessor.java\nindex bb7d79d5a37..25d72f2d648 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/546/SCIMConfigProcessor.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.charon.core.config;\n \n import org.apache.axiom.om.OMElement;\n@@ -40,152 +41,152 @@ import java.util.concurrent.ConcurrentHashMap;\n  */\n public class SCIMConfigProcessor {\n \n-    public SCIMConfig buildConfigFromFile(String filepath) throws CharonException {\n-        try {\n-            InputStream inputStream = null;\n-            File provisioningConfig = new File(filepath);\n-            if (provisioningConfig.exists()) {\n-                inputStream = new FileInputStream(provisioningConfig);\n-            }\n-            StAXOMBuilder staxOMBuilder = new StAXOMBuilder(inputStream);\n-            OMElement documentElement = staxOMBuilder.getDocumentElement();\n-            if (inputStream != null) {\n-                inputStream.close();\n-            }\n-            return buildConfigFromRootElement(documentElement);\n-        } catch (FileNotFoundException e) {\n-            throw new CharonException(SCIMConfigConstants.PROVISIONING_CONFIG_NAME + \"not found.\");\n-        } catch (XMLStreamException e) {\n-            throw new CharonException(\"Error in building the configuration file.\");\n-        } catch (IOException e) {\n-            throw new CharonException(\"Error in building the configuration file.\");\n-        }\n+  public SCIMConfig buildConfigFromFile(String filepath) throws CharonException {\n+    try {\n+      InputStream inputStream = null;\n+      File provisioningConfig = new File(filepath);\n+      if (provisioningConfig.exists()) {\n+        inputStream = new FileInputStream(provisioningConfig);\n+      }\n+      StAXOMBuilder staxOMBuilder = new StAXOMBuilder(inputStream);\n+      OMElement documentElement = staxOMBuilder.getDocumentElement();\n+      if (inputStream != null) {\n+        inputStream.close();\n+      }\n+      return buildConfigFromRootElement(documentElement);\n+    } catch (FileNotFoundException e) {\n+      throw new CharonException(SCIMConfigConstants.PROVISIONING_CONFIG_NAME + \"not found.\");\n+    } catch (XMLStreamException e) {\n+      throw new CharonException(\"Error in building the configuration file.\");\n+    } catch (IOException e) {\n+      throw new CharonException(\"Error in building the configuration file.\");\n     }\n+  }\n \n-    public SCIMConfig buildConfigFromRootElement(OMElement rootElement) {\n-\n-        //build scim config\n-        SCIMConfig scimConfig = new SCIMConfig();\n+  public SCIMConfig buildConfigFromRootElement(OMElement rootElement) {\n \n-        OMElement scimConsumersElement = rootElement.getFirstChildWithName(\n-                new QName(SCIMConfigConstants.ELEMENT_NAME_SCIM_CONSUMERS));\n+    //build scim config\n+    SCIMConfig scimConfig = new SCIMConfig();\n \n-        OMElement scimProvidersElement = rootElement.getFirstChildWithName(\n-                new QName(SCIMConfigConstants.ELEMENT_NAME_SCIM_PROVIDERS));\n+    OMElement scimConsumersElement = rootElement.getFirstChildWithName(\n+      new QName(SCIMConfigConstants.ELEMENT_NAME_SCIM_CONSUMERS));\n \n-        //iterate over the individual elements and create scim provider map\n-        Iterator<OMElement> scimProvidersIterator = scimProvidersElement.getChildrenWithName(new QName(\n-                SCIMConfigConstants.ELEMENT_NAME_SCIM_PROVIDER));\n+    OMElement scimProvidersElement = rootElement.getFirstChildWithName(\n+      new QName(SCIMConfigConstants.ELEMENT_NAME_SCIM_PROVIDERS));\n \n-        //build providers map\n-        if (scimProvidersIterator != null) {\n-            Map<String, SCIMProvider> providers = buildSCIMProviderMap(scimProvidersIterator);\n-            scimConfig.setProvidersMap(providers);\n-        }\n+    //iterate over the individual elements and create scim provider map\n+    Iterator<OMElement> scimProvidersIterator = scimProvidersElement.getChildrenWithName(new QName(\n+      SCIMConfigConstants.ELEMENT_NAME_SCIM_PROVIDER));\n \n-        //iterate over the individual elements and create scim consumer map\n-        Iterator<OMElement> scimConsumersIterator = scimConsumersElement.getChildrenWithName(new QName(\n-                SCIMConfigConstants.ELEMENT_NAME_SCIM_CONSUMER));\n+    //build providers map\n+    if (scimProvidersIterator != null) {\n+      Map<String, SCIMProvider> providers = buildSCIMProviderMap(scimProvidersIterator);\n+      scimConfig.setProvidersMap(providers);\n+    }\n \n-        //build consumers map\n-        if (scimConsumersIterator != null) {\n-            Map<String, SCIMConsumer> consumers = buildSCIMConsumersMap(scimConsumersIterator);\n-            scimConfig.setConsumersMap(consumers);\n-        }\n+    //iterate over the individual elements and create scim consumer map\n+    Iterator<OMElement> scimConsumersIterator = scimConsumersElement.getChildrenWithName(new QName(\n+      SCIMConfigConstants.ELEMENT_NAME_SCIM_CONSUMER));\n \n-        return scimConfig;\n+    //build consumers map\n+    if (scimConsumersIterator != null) {\n+      Map<String, SCIMConsumer> consumers = buildSCIMConsumersMap(scimConsumersIterator);\n+      scimConfig.setConsumersMap(consumers);\n     }\n \n-    private Map<String, SCIMProvider> buildSCIMProviderMap(Iterator<OMElement> providersIterator) {\n-\n-        Map<String, SCIMProvider> providersMap = new ConcurrentHashMap<String, SCIMProvider>();\n-\n-        while (providersIterator.hasNext()) {\n-            OMElement providerElement = providersIterator.next();\n-            SCIMProvider scimProvider = new SCIMProvider();\n-            Map<String, String> propertiesMap = new HashMap<String, String>();\n-\n-            //get provider id\n-            String providerId = providerElement.getAttributeValue(new QName(\n-                    SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n-            scimProvider.setId(providerId);\n-\n-            //read provider properties\n-            Iterator<OMElement> propertiesIterator = providerElement.getChildrenWithName(\n-                    new QName(SCIMConfigConstants.ELEMENT_NAME_PROPERTY));\n-            while (propertiesIterator.hasNext()) {\n-                OMElement propertyElement = propertiesIterator.next();\n-                String propertyName = propertyElement.getAttributeValue(\n-                        new QName(SCIMConfigConstants.ATTRIBUTE_NAME_NAME));\n-                String propertyValue = propertyElement.getText();\n-                propertiesMap.put(propertyName, propertyValue);\n-            }\n-            scimProvider.setProperties(propertiesMap);\n-            providersMap.put(providerId, scimProvider);\n-        }\n-        return providersMap;\n+    return scimConfig;\n+  }\n+\n+  private Map<String, SCIMProvider> buildSCIMProviderMap(Iterator<OMElement> providersIterator) {\n+\n+    Map<String, SCIMProvider> providersMap = new ConcurrentHashMap<String, SCIMProvider>();\n+\n+    while (providersIterator.hasNext()) {\n+      OMElement providerElement = providersIterator.next();\n+      SCIMProvider scimProvider = new SCIMProvider();\n+      Map<String, String> propertiesMap = new HashMap<String, String>();\n+\n+      //get provider id\n+      String providerId = providerElement.getAttributeValue(new QName(\n+        SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n+      scimProvider.setId(providerId);\n+\n+      //read provider properties\n+      Iterator<OMElement> propertiesIterator = providerElement.getChildrenWithName(\n+        new QName(SCIMConfigConstants.ELEMENT_NAME_PROPERTY));\n+      while (propertiesIterator.hasNext()) {\n+        OMElement propertyElement = propertiesIterator.next();\n+        String propertyName = propertyElement.getAttributeValue(\n+          new QName(SCIMConfigConstants.ATTRIBUTE_NAME_NAME));\n+        String propertyValue = propertyElement.getText();\n+        propertiesMap.put(propertyName, propertyValue);\n+      }\n+      scimProvider.setProperties(propertiesMap);\n+      providersMap.put(providerId, scimProvider);\n     }\n-\n-    private Map<String, SCIMConsumer> buildSCIMConsumersMap(Iterator<OMElement> consumersIterator) {\n-\n-        Map<String, SCIMConsumer> consumersMap = new ConcurrentHashMap<String, SCIMConsumer>();\n-\n-        //iterate\n-        while (consumersIterator.hasNext()) {\n-            SCIMConsumer scimConsumer = new SCIMConsumer();\n-            OMElement scimConsumerElement = consumersIterator.next();\n-            //get consumer id\n-            String consumerId = scimConsumerElement.getAttributeValue(new QName(\n-                    SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n-\n-            //get providers\n-            Iterator<OMElement> scimProviders = scimConsumerElement.getChildrenWithName(\n-                    new QName(SCIMConfigConstants.ELEMENT_NAME_SCIM_PROVIDER));\n-\n-            Map<String, SCIMProvider> providersMap = new HashMap<String, SCIMProvider>();\n-\n-            //iterate through providers and build the consumer specific provider map\n-            if (scimProviders != null) {\n-                while (scimProviders.hasNext()) {\n-                    SCIMProvider scimProvider = new SCIMProvider();\n-\n-                    OMElement scimProviderElement = scimProviders.next();\n-                    //get attributes if exist\n-                    String providerId = scimProviderElement.getAttributeValue(new QName(SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n-                    scimProvider.setId(providerId);\n-\n-                    String userName = scimProviderElement.getAttributeValue(new QName(\n-                            SCIMConfigConstants.ATTRIBUTE_NAME_USERNAME));\n-                    if (userName != null) {\n-                        scimProvider.setProperty(SCIMConfigConstants.ELEMENT_NAME_USERNAME, userName);\n-                    }\n-                    String password = scimProviderElement.getAttributeValue(new QName(\n-                            SCIMConfigConstants.ATTRIBUTE_NAME_PASSWORD));\n-                    if (password != null) {\n-                        scimProvider.setProperty(SCIMConfigConstants.ELEMENT_NAME_PASSWORD, password);\n-                    }\n-\n-                    //read properties if exist\n-                    Map<String, String> providerProperties = new HashMap<String, String>();\n-                    Iterator<OMElement> propertiesMap = scimConsumerElement.getChildrenWithName(\n-                            new QName(SCIMConfigConstants.ELEMENT_NAME_PROPERTY));\n-                    if (propertiesMap != null) {\n-                        //iterate through propertiesMap\n-                        while (propertiesMap.hasNext()) {\n-                            OMElement property = propertiesMap.next();\n-                            String propertyName = property.getAttributeValue(new QName(\n-                                    SCIMConfigConstants.ATTRIBUTE_NAME_NAME));\n-                            String propertyValue = property.getText();\n-                            providerProperties.put(propertyName, propertyValue);\n-                        }\n-                    }\n-                    scimProvider.setProperties(providerProperties);\n-                    providersMap.put(providerId, scimProvider);\n-                }\n-                scimConsumer.setScimProviders(providersMap);\n+    return providersMap;\n+  }\n+\n+  private Map<String, SCIMConsumer> buildSCIMConsumersMap(Iterator<OMElement> consumersIterator) {\n+\n+    Map<String, SCIMConsumer> consumersMap = new ConcurrentHashMap<String, SCIMConsumer>();\n+\n+    //iterate\n+    while (consumersIterator.hasNext()) {\n+      SCIMConsumer scimConsumer = new SCIMConsumer();\n+      OMElement scimConsumerElement = consumersIterator.next();\n+      //get consumer id\n+      String consumerId = scimConsumerElement.getAttributeValue(new QName(\n+        SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n+\n+      //get providers\n+      Iterator<OMElement> scimProviders = scimConsumerElement.getChildrenWithName(\n+        new QName(SCIMConfigConstants.ELEMENT_NAME_SCIM_PROVIDER));\n+\n+      Map<String, SCIMProvider> providersMap = new HashMap<String, SCIMProvider>();\n+\n+      //iterate through providers and build the consumer specific provider map\n+      if (scimProviders != null) {\n+        while (scimProviders.hasNext()) {\n+          SCIMProvider scimProvider = new SCIMProvider();\n+\n+          OMElement scimProviderElement = scimProviders.next();\n+          //get attributes if exist\n+          String providerId = scimProviderElement.getAttributeValue(new QName(SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n+          scimProvider.setId(providerId);\n+\n+          String userName = scimProviderElement.getAttributeValue(new QName(\n+            SCIMConfigConstants.ATTRIBUTE_NAME_USERNAME));\n+          if (userName != null) {\n+            scimProvider.setProperty(SCIMConfigConstants.ELEMENT_NAME_USERNAME, userName);\n+          }\n+          String password = scimProviderElement.getAttributeValue(new QName(\n+            SCIMConfigConstants.ATTRIBUTE_NAME_PASSWORD));\n+          if (password != null) {\n+            scimProvider.setProperty(SCIMConfigConstants.ELEMENT_NAME_PASSWORD, password);\n+          }\n+\n+          //read properties if exist\n+          Map<String, String> providerProperties = new HashMap<String, String>();\n+          Iterator<OMElement> propertiesMap = scimConsumerElement.getChildrenWithName(\n+            new QName(SCIMConfigConstants.ELEMENT_NAME_PROPERTY));\n+          if (propertiesMap != null) {\n+            //iterate through propertiesMap\n+            while (propertiesMap.hasNext()) {\n+              OMElement property = propertiesMap.next();\n+              String propertyName = property.getAttributeValue(new QName(\n+                SCIMConfigConstants.ATTRIBUTE_NAME_NAME));\n+              String propertyValue = property.getText();\n+              providerProperties.put(propertyName, propertyValue);\n             }\n-            consumersMap.put(consumerId, scimConsumer);\n+          }\n+          scimProvider.setProperties(providerProperties);\n+          providersMap.put(providerId, scimProvider);\n         }\n-        return consumersMap;\n+        scimConsumer.setScimProviders(providersMap);\n+      }\n+      consumersMap.put(consumerId, scimConsumer);\n     }\n+    return consumersMap;\n+  }\n }\n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/546/SCIMConfigProcessor.java\nindex bb7d79d5a37..7817858a332 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/546/SCIMConfigProcessor.java\n@@ -188,4 +188,4 @@ public class SCIMConfigProcessor {\n         }\n         return consumersMap;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/546/SCIMConfigProcessor.java\nindex bb7d79d5a37..5a50c2eaefb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/546/SCIMConfigProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/546/SCIMConfigProcessor.java\n@@ -151,7 +151,8 @@ public class SCIMConfigProcessor {\n \n                     OMElement scimProviderElement = scimProviders.next();\n                     //get attributes if exist\n-                    String providerId = scimProviderElement.getAttributeValue(new QName(SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n+                    String providerId = scimProviderElement.\n+                            getAttributeValue(new QName(SCIMConfigConstants.ATTRIBUTE_NAME_ID));\n                     scimProvider.setId(providerId);\n \n                     String userName = scimProviderElement.getAttributeValue(new QName(\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}