{
    "project_name": "graphfoundation-ongdb",
    "error_id": "254",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "54",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "57",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "60",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "64",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "72",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "75",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/254/MapRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/254/MapRepresentation.java\nindex 0161284c8ef..b7b60da0dba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/254/MapRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/254/MapRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr;\n \n import java.util.Map;\n@@ -32,81 +33,72 @@ import static java.util.Arrays.asList;\n public class MapRepresentation extends MappingRepresentation\n {\n \n-    private final Map value;\n+  private final Map value;\n \n-    public MapRepresentation( Map value )\n-    {\n-        super( RepresentationType.MAP );\n-        this.value = value;\n-    }\n+  public MapRepresentation(Map value)\n+  {\n+    super(RepresentationType.MAP);\n+    this.value = value;\n+  }\n \n-    @Override\n-    protected void serialize( MappingSerializer serializer )\n+  @Override\n+  protected void serialize(MappingSerializer serializer)\n+  {\n+    for (Object key : value.keySet())\n     {\n-        for ( Object key : value.keySet() )\n-        {\n-            Object val = value.get( key );\n-            String keyString = key == null ? \"null\" : key.toString();\n-            if ( val instanceof Number )\n-            {\n-                serializer.putNumber( keyString, (Number) val );\n-            }\n-            else if ( val instanceof Boolean )\n-            {\n-                serializer.putBoolean( keyString, (Boolean) val );\n-            }\n-            else if ( val instanceof String )\n-            {\n-                serializer.putString( keyString, (String) val );\n-            }\n-            else if ( val instanceof Path )\n-            {\n-                PathRepresentation<Path> representation = new PathRepresentation<>( (Path) val );\n-                serializer.putMapping( keyString, representation );\n-            }\n-            else if ( val instanceof Iterable )\n-            {\n-                serializer.putList( keyString, ObjectToRepresentationConverter.getListRepresentation( (Iterable)\n-                        val ) );\n-            }\n-            else if ( val instanceof Map )\n-            {\n-                serializer.putMapping( keyString, ObjectToRepresentationConverter.getMapRepresentation( (Map)\n-                        val ) );\n-            }\n-            else if ( val == null )\n-            {\n-                serializer.putString( keyString, null );\n-            }\n-            else if ( val.getClass().isArray() )\n-            {\n-                Object[] objects = toArray( val );\n+      Object val = value.get(key);\n+      String keyString = key == null ? \"null\" : key.toString();\n+      if (val instanceof Number)\n+      {\n+        serializer.putNumber(keyString, (Number) val);\n+      } else if (val instanceof Boolean)\n+      {\n+        serializer.putBoolean(keyString, (Boolean) val);\n+      } else if (val instanceof String)\n+      {\n+        serializer.putString(keyString, (String) val);\n+      } else if (val instanceof Path)\n+      {\n+        PathRepresentation<Path> representation = new PathRepresentation<>((Path) val);\n+        serializer.putMapping(keyString, representation);\n+      } else if (val instanceof Iterable)\n+      {\n+        serializer.putList(keyString, ObjectToRepresentationConverter.getListRepresentation((Iterable)\n+            val));\n+      } else if (val instanceof Map)\n+      {\n+        serializer.putMapping(keyString, ObjectToRepresentationConverter.getMapRepresentation((Map)\n+            val));\n+      } else if (val == null)\n+      {\n+        serializer.putString(keyString, null);\n+      } else if (val.getClass().isArray())\n+      {\n+        Object[] objects = toArray(val);\n \n-                serializer.putList( keyString, ObjectToRepresentationConverter.getListRepresentation( asList(objects) ) );\n-            }\n-            else if ( val instanceof Node || val instanceof Relationship )\n-            {\n-                Representation representation = ObjectToRepresentationConverter.getSingleRepresentation( val );\n-                serializer.putMapping( keyString, (MappingRepresentation) representation );\n-            }\n-            else\n-            {\n-                throw new IllegalArgumentException( \"Unsupported value type: \" + val.getClass() );\n-            }\n-        }\n+        serializer.putList(keyString, ObjectToRepresentationConverter.getListRepresentation(asList(objects)));\n+      } else if (val instanceof Node || val instanceof Relationship)\n+      {\n+        Representation representation = ObjectToRepresentationConverter.getSingleRepresentation(val);\n+        serializer.putMapping(keyString, (MappingRepresentation) representation);\n+      } else\n+      {\n+        throw new IllegalArgumentException(\"Unsupported value type: \" + val.getClass());\n+      }\n     }\n+  }\n \n-    private Object[] toArray( Object val )\n-    {\n-        int length = getLength( val );\n+  private Object[] toArray(Object val)\n+  {\n+    int length = getLength(val);\n \n-        Object[] objects = new Object[length];\n+    Object[] objects = new Object[length];\n \n-        for ( int i = 0; i < length; i++ )\n-        {\n-            objects[i] = get( val, i );\n-        }\n-\n-        return objects;\n+    for (int i = 0; i < length; i++)\n+    {\n+      objects[i] = get(val, i);\n     }\n+\n+    return objects;\n+  }\n }\n",
            "diff_size": 75
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/254/MapRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/254/MapRepresentation.java\nindex 0161284c8ef..4feeeac341b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/254/MapRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/254/MapRepresentation.java\n@@ -31,7 +31,6 @@ import static java.util.Arrays.asList;\n \n public class MapRepresentation extends MappingRepresentation\n {\n-\n     private final Map value;\n \n     public MapRepresentation( Map value )\n@@ -66,13 +65,11 @@ public class MapRepresentation extends MappingRepresentation\n             }\n             else if ( val instanceof Iterable )\n             {\n-                serializer.putList( keyString, ObjectToRepresentationConverter.getListRepresentation( (Iterable)\n-                        val ) );\n+                serializer.putList( keyString, ObjectToRepresentationConverter.getListRepresentation( (Iterable) val ) );\n             }\n             else if ( val instanceof Map )\n             {\n-                serializer.putMapping( keyString, ObjectToRepresentationConverter.getMapRepresentation( (Map)\n-                        val ) );\n+                serializer.putMapping( keyString, ObjectToRepresentationConverter.getMapRepresentation( (Map) val ) );\n             }\n             else if ( val == null )\n             {\n@@ -81,8 +78,7 @@ public class MapRepresentation extends MappingRepresentation\n             else if ( val.getClass().isArray() )\n             {\n                 Object[] objects = toArray( val );\n-\n-                serializer.putList( keyString, ObjectToRepresentationConverter.getListRepresentation( asList(objects) ) );\n+serializer.putList( keyString, ObjectToRepresentationConverter.getListRepresentation( asList(objects) ) );\n             }\n             else if ( val instanceof Node || val instanceof Relationship )\n             {\n@@ -101,12 +97,11 @@ public class MapRepresentation extends MappingRepresentation\n         int length = getLength( val );\n \n         Object[] objects = new Object[length];\n-\n-        for ( int i = 0; i < length; i++ )\n+for ( int i = 0; i < length; i++ )\n         {\n             objects[i] = get( val, i );\n         }\n \n         return objects;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}