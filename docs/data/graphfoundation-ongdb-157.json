{
    "project_name": "graphfoundation-ongdb",
    "error_id": "157",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/157/SecurityRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/157/SecurityRule.java\nindex 151e2babfaa..bb15de112e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/157/SecurityRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/157/SecurityRule.java\n@@ -17,42 +17,43 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.security;\n \n import javax.servlet.http.HttpServletRequest;\n \n public interface SecurityRule\n {\n-    /**\n-     * @param request The HTTP request currently under consideration.\n-     * @return <code>true</code> if the rule passes, <code>false</code> if the\n-     *         rule fails and the request is to be rejected with a \"401 Unauthorized\".\n-     */\n-    boolean isAuthorized( HttpServletRequest request );\n+  /**\n+   * @param request The HTTP request currently under consideration.\n+   * @return <code>true</code> if the rule passes, <code>false</code> if the\n+   * rule fails and the request is to be rejected with a \"401 Unauthorized\".\n+   */\n+  boolean isAuthorized(HttpServletRequest request);\n \n-    /**\n-     * @return the root of the URI path from which rules will be valid, e.g.\n-     *         <code>/db/data</code> will apply this rule to everything below\n-     *         the path <code>/db/data</code> It is possible to use * as a\n-     *         wildcard character in return values, e.g.\n-     *         <code>/myExtension*</code> will extend security coverage to\n-     *         everything under the <code>/myExtension</code> path. Similarly\n-     *         more complex path behavior can be specified with more wildcards,\n-     *         e.g.: <code>/myExtension*myApplication*specialResources</code>.\n-     *         Note that the wildcard represents any character (including the\n-     *         '/' character), meaning <code>/myExtension/*</code> is not the\n-     *         same as <code>/myExtension*</code> and implementers should take\n-     *         care to ensure their implementations are tested accordingly.\n-     *         <p>\n-     *         Final note: the only wildcard supported is '*' and there is no\n-     *         support for regular expression syntax.\n-     */\n-    String forUriPath();\n+  /**\n+   * @return the root of the URI path from which rules will be valid, e.g.\n+   * <code>/db/data</code> will apply this rule to everything below\n+   * the path <code>/db/data</code> It is possible to use * as a\n+   * wildcard character in return values, e.g.\n+   * <code>/myExtension*</code> will extend security coverage to\n+   * everything under the <code>/myExtension</code> path. Similarly\n+   * more complex path behavior can be specified with more wildcards,\n+   * e.g.: <code>/myExtension*myApplication*specialResources</code>.\n+   * Note that the wildcard represents any character (including the\n+   * '/' character), meaning <code>/myExtension/*</code> is not the\n+   * same as <code>/myExtension*</code> and implementers should take\n+   * care to ensure their implementations are tested accordingly.\n+   * <p>\n+   * Final note: the only wildcard supported is '*' and there is no\n+   * support for regular expression syntax.\n+   */\n+  String forUriPath();\n \n-    /**\n-     * @return the opaque string representing the WWW-Authenticate header to\n-     *         which the rule applies. Will be used to formulate a\n-     *         <code>401</code> response code if the rule denies a request.\n-     */\n-    String wwwAuthenticateHeader();\n+  /**\n+   * @return the opaque string representing the WWW-Authenticate header to\n+   * which the rule applies. Will be used to formulate a\n+   * <code>401</code> response code if the rule denies a request.\n+   */\n+  String wwwAuthenticateHeader();\n }\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/157/SecurityRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/157/SecurityRule.java\nindex 151e2babfaa..56b53430665 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/157/SecurityRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/157/SecurityRule.java\n@@ -55,4 +55,4 @@ public interface SecurityRule\n      *         <code>401</code> response code if the rule denies a request.\n      */\n     String wwwAuthenticateHeader();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}