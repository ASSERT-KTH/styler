{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "109",
    "information": {
        "errors": [
            {
                "line": "194",
                "column": "80",
                "severity": "warning",
                "message": "'>' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  private boolean isInQueueTimeout() {\n    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/109/AbstractRestInvocation.java\nindex 22cbc5313bf..ce5bc149725 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/109/AbstractRestInvocation.java\n@@ -191,8 +191,8 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "194",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/109/AbstractRestInvocation.java\nindex 22cbc5313bf..5d5c0888691 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/109/AbstractRestInvocation.java\n@@ -191,8 +191,7 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n@@ -326,4 +325,4 @@ public abstract class AbstractRestInvocation {\n   private String getMicroserviceQualifiedName() {\n     return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "274",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "288",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "319",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/109/AbstractRestInvocation.java\nindex 22cbc5313bf..11a9b987e11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/109/AbstractRestInvocation.java\n@@ -23,11 +23,9 @@ import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n-\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response.Status;\n import javax.xml.ws.Holder;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.common.rest.codec.produce.ProduceProcessor;\n import org.apache.servicecomb.common.rest.codec.produce.ProduceProcessorManager;\n@@ -79,7 +77,9 @@ public abstract class AbstractRestInvocation {\n   protected void findRestOperation(MicroserviceMeta microserviceMeta) {\n     ServicePathManager servicePathManager = ServicePathManager.getServicePathManager(microserviceMeta);\n     if (servicePathManager == null) {\n-      LOGGER.error(\"No schema defined for {}:{}.\", microserviceMeta.getAppId(), microserviceMeta.getName());\n+      LOGGER.error(\"No schema defined for {}:{}.\",\n+microserviceMeta.getAppId(),\n+microserviceMeta.getName());\n       throw new InvocationException(Status.NOT_FOUND, Status.NOT_FOUND.getReasonPhrase());\n     }\n \n@@ -103,8 +103,7 @@ public abstract class AbstractRestInvocation {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    Map<String, String> cseContext =\n-        JsonUtils.readValue(strCseContext.getBytes(StandardCharsets.UTF_8), Map.class);\n+    Map<String, String> cseContext = JsonUtils.readValue(strCseContext.getBytes(StandardCharsets.UTF_8), Map.class);\n     invocation.mergeContext(cseContext);\n   }\n \n@@ -112,7 +111,6 @@ public abstract class AbstractRestInvocation {\n     if (null == invocation || null == invocation.getContext()) {\n       return null;\n     }\n-\n     return invocation.getContext(key);\n   }\n \n@@ -126,8 +124,8 @@ public abstract class AbstractRestInvocation {\n \n     invocation.onStart(requestEx, start);\n     invocation.getInvocationStageTrace().startSchedule();\n-    OperationMeta operationMeta = restOperationMeta.getOperationMeta();\n \n+    OperationMeta operationMeta = restOperationMeta.getOperationMeta();\n     try {\n       this.setContext();\n     } catch (Exception e) {\n@@ -148,12 +146,11 @@ public abstract class AbstractRestInvocation {\n             if (isInQueueTimeout()) {\n               throw new InvocationException(Status.INTERNAL_SERVER_ERROR, \"Timeout when processing the request.\");\n             }\n+\n             if (requestEx.getAttribute(RestConst.REST_REQUEST) != requestEx) {\n               // already timeout\n               // in this time, request maybe recycled and reused by web container, do not use requestEx\n-              LOGGER.error(\"Rest request already timeout, abandon execute, method {}, operation {}.\",\n-                  operationMeta.getHttpMethod(),\n-                  operationMeta.getMicroserviceQualifiedName());\n+              LOGGER.error(\"Rest request already timeout, abandon execute, method {}, operation {}.\", operationMeta.getHttpMethod(), operationMeta.getMicroserviceQualifiedName());\n               return;\n             }\n \n@@ -165,7 +162,9 @@ public abstract class AbstractRestInvocation {\n         }\n       });\n     } catch (Throwable e) {\n-      LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\", e.getMessage(), e.getClass().getName());\n+      LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\",\n+e.getMessage(),\n+e.getClass().getName());\n       sendFailResponse(e);\n     }\n   }\n@@ -176,7 +175,8 @@ public abstract class AbstractRestInvocation {\n     Handler providerQpsFlowControlHandler = operationMeta.getProviderQpsFlowControlHandler();\n     if (null != providerQpsFlowControlHandler) {\n       try {\n-        providerQpsFlowControlHandler.handle(invocation, response -> {\n+        providerQpsFlowControlHandler.handle(invocation,\n+response -> {\n           qpsFlowControlReject.value = true;\n           produceProcessor = ProduceProcessorManager.JSON_PROCESSOR;\n           sendResponse(response);\n@@ -191,19 +191,19 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > invocation.getOperationMeta().getConfig()\n+                                                                                                              .getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n     invocation.onExecuteStart();\n-\n     invoke();\n   }\n \n   protected abstract OperationLocator locateOperation(ServicePathManager servicePathManager);\n \n   // create a invocation without args setted\n+\n   protected abstract void createInvocation();\n \n   public void invoke() {\n@@ -224,7 +224,6 @@ public abstract class AbstractRestInvocation {\n   protected Response prepareInvoke() throws Throwable {\n     this.initProduceProcessor();\n     invocation.getHandlerContext().put(RestConst.REST_REQUEST, requestEx);\n-\n     invocation.getInvocationStageTrace().startServerFiltersRequest();\n     for (HttpServerFilter filter : httpServerFilters) {\n       if (filter.enabled()) {\n@@ -234,7 +233,6 @@ public abstract class AbstractRestInvocation {\n         }\n       }\n     }\n-\n     return null;\n   }\n \n@@ -256,36 +254,38 @@ public abstract class AbstractRestInvocation {\n     if (invocation != null) {\n       invocation.getInvocationStageTrace().finishHandlersResponse();\n     }\n+\n     try {\n       sendResponse(response);\n     } catch (Throwable e) {\n       LOGGER.error(\"Failed to send rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+getMicroserviceQualifiedName(),\n+requestEx.getRequestURI(),\n+e);\n     }\n   }\n \n   @SuppressWarnings(\"deprecation\")\n   protected void sendResponse(Response response) {\n     if (response.getHeaders().getHeaderMap() != null) {\n-      for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap().entrySet()) {\n+      for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap()\n+                                                                    .entrySet()) {\n         for (Object value : entry.getValue()) {\n-          if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)\n-              && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n+          if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH) && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n             responseEx.addHeader(entry.getKey(), String.valueOf(value));\n           }\n         }\n       }\n     }\n+\n     responseEx.setStatus(response.getStatusCode(), response.getReasonPhrase());\n     responseEx.setAttribute(RestConst.INVOCATION_HANDLER_RESPONSE, response);\n     responseEx.setAttribute(RestConst.INVOCATION_HANDLER_PROCESSOR, produceProcessor);\n-\n     executeHttpServerFilters(response);\n   }\n \n   protected void executeHttpServerFilters(Response response) {\n-    HttpServerFilterBeforeSendResponseExecutor exec =\n-        new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n+    HttpServerFilterBeforeSendResponseExecutor exec = new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n     CompletableFuture<Void> future = exec.run();\n     future.whenComplete((v, e) -> {\n       if (invocation != null) {\n@@ -299,25 +299,29 @@ public abstract class AbstractRestInvocation {\n   protected void onExecuteHttpServerFiltersFinish(Response response, Throwable e) {\n     if (e != null) {\n       LOGGER.error(\"Failed to execute HttpServerFilters, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+getMicroserviceQualifiedName(),\n+requestEx.getRequestURI(),\n+e);\n     }\n \n     try {\n       responseEx.flushBuffer();\n     } catch (Throwable flushException) {\n       LOGGER.error(\"Failed to flush rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), flushException);\n+getMicroserviceQualifiedName(),\n+requestEx.getRequestURI(),\n+flushException);\n     }\n \n     try {\n       requestEx.getAsyncContext().complete();\n     } catch (Throwable completeException) {\n-      LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n+      LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\", getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n     }\n \n     // if failed to locate path, then will not create invocation\n     // TODO: statistics this case\n+\n     if (invocation != null) {\n       invocation.onFinish(response);\n     }\n@@ -326,4 +330,4 @@ public abstract class AbstractRestInvocation {\n   private String getMicroserviceQualifiedName() {\n     return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "194",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/109/AbstractRestInvocation.java\nindex 22cbc5313bf..ce5bc149725 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/109/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/109/AbstractRestInvocation.java\n@@ -191,8 +191,8 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}