{
    "project_name": "CESNET-perun",
    "error_id": "339",
    "information": {
        "errors": [
            {
                "line": "40",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\n\t\trefreshAuthz(sess);\n\t\t\n\t\tlog.debug(\"AuthzResolver: Complete PerunPrincipal: {}\", sess.getPerunPrincipal());\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/339/AuthzResolverBlImpl.java\nindex 4ce1749c570..13166ad1570 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/339/AuthzResolverBlImpl.java\n@@ -37,7 +37,7 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t\tlog.trace(\"Initializing AuthzResolver for [{}]\", sess.getPerunPrincipal());\n \n \t\trefreshAuthz(sess);\n-\t\t\n+\n \t\tlog.debug(\"AuthzResolver: Complete PerunPrincipal: {}\", sess.getPerunPrincipal());\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/339/AuthzResolverBlImpl.java\nindex 4ce1749c570..86628aebc9d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/339/AuthzResolverBlImpl.java\n@@ -20,1400 +20,1586 @@ import java.util.*;\n  */\n public class AuthzResolverBlImpl implements AuthzResolverBl {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(AuthzResolverBlImpl.class);\n-\tprivate static AuthzResolverImplApi authzResolverImpl;\n-\tprivate static PerunBl perunBl;\n-\n-\tprivate static final String UNSET_ROLE = \"UNSET\";\n-\tprivate static final String SET_ROLE = \"SET\";\n-\n-\t/**\n-\t * Retrieves information about the perun principal (in which VOs the principal is admin, ...)\n-\t *\n-\t * @param sess perunSession\n-\t * @throws InternalErrorException when problem\n-\t */\n-\tprotected static void init(PerunSession sess) throws InternalErrorException {\n-\t\tlog.trace(\"Initializing AuthzResolver for [{}]\", sess.getPerunPrincipal());\n-\n-\t\trefreshAuthz(sess);\n-\t\t\n-\t\tlog.debug(\"AuthzResolver: Complete PerunPrincipal: {}\", sess.getPerunPrincipal());\n-\t}\n-\n-\t/**\n-\t * Checks if the principal is authorized.\n-\t *\n-\t * @param sess                perunSession\n-\t * @param role                required role\n-\t * @param complementaryObject object which specifies particular action of the role (e.g. group)\n-\t * @return true if the principal authorized, false otherwise\n-\t * @throws InternalErrorException if something goes wrong\n-\t */\n-\tpublic static boolean isAuthorized(PerunSession sess, Role role, PerunBean complementaryObject) throws InternalErrorException {\n-\t\tlog.trace(\"Entering isAuthorized: sess='\" + sess + \"', role='\" + role + \"', complementaryObject='\" + complementaryObject + \"'\");\n-\t\tUtils.notNull(sess, \"sess\");\n-\n-\t\t// We need to load additional information about the principal\n-\t\tif (!sess.getPerunPrincipal().isAuthzInitialized()) {\n-\t\t\tinit(sess);\n-\t\t}\n-\n-\t\t// If the user has no roles, deny access\n-\t\tif (sess.getPerunPrincipal().getRoles() == null) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\t// Perun admin can do anything\n-\t\tif (sess.getPerunPrincipal().getRoles().hasRole(Role.PERUNADMIN)) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t// If user doesn't have requested role, deny request\n-\t\tif (!sess.getPerunPrincipal().getRoles().hasRole(role)) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\t// Check if the principal has the privileges\n-\t\tif (complementaryObject != null) {\n-\n-\t\t\tString beanName = BeansUtils.convertRichBeanNameToBeanName(complementaryObject.getBeanName());\n-\n-\t\t\t// Check various combinations of role and complementary objects\n-\t\t\tif (role.equals(Role.VOADMIN) || role.equals(Role.VOOBSERVER)) {\n-\t\t\t\t// VO admin (or VoObserver) and group, get vo id from group and check if the user is vo admin (or VoObserver)\n-\t\t\t\tif (beanName.equals(Group.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), ((Group) complementaryObject).getVoId());\n-\t\t\t\t}\n-\t\t\t\t// VO admin (or VoObserver) and resource, check if the user is vo admin (or VoObserver)\n-\t\t\t\tif (beanName.equals(Resource.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), ((Resource) complementaryObject).getVoId());\n-\t\t\t\t}\n-\t\t\t\t// VO admin (or VoObserver) and member, check if the member is from that VO\n-\t\t\t\tif (beanName.equals(Member.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), ((Member) complementaryObject).getVoId());\n-\t\t\t\t}\n-\t\t\t} else if (role.equals(Role.FACILITYADMIN)) {\n-\t\t\t\t// Facility admin and resource, get facility id from resource and check if the user is facility admin\n-\t\t\t\tif (beanName.equals(Resource.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, Facility.class.getSimpleName(), ((Resource) complementaryObject).getFacilityId());\n-\t\t\t\t}\n-\t\t\t} else if (role.equals(Role.RESOURCEADMIN)) {\n-\t\t\t\t// Resource admin, check if the user is admin of resource\n-\t\t\t\tif (beanName.equals(Resource.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, Resource.class.getSimpleName(), complementaryObject.getId());\n-\t\t\t\t}\n-\t\t\t} else if (role.equals(Role.SECURITYADMIN)) {\n-\t\t\t\t// Security admin, check if security admin is admin of the SecurityTeam\n-\t\t\t\tif (beanName.equals(SecurityTeam.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, SecurityTeam.class.getSimpleName(), complementaryObject.getId());\n-\t\t\t\t}\n-\t\t\t} else if (role.equals(Role.GROUPADMIN) || role.equals(Role.TOPGROUPCREATOR)) {\n-\t\t\t\t// Group admin can see some of the date of the VO\n-\t\t\t\tif (beanName.equals(Vo.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), complementaryObject.getId());\n-\t\t\t\t}\n-\t\t\t} else if (role.equals(Role.SELF)) {\n-\t\t\t\t// Check if the member belongs to the self role\n-\t\t\t\tif (beanName.equals(Member.class.getSimpleName())) {\n-\t\t\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, User.class.getSimpleName(), ((Member) complementaryObject).getUserId());\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn sess.getPerunPrincipal().getRoles().hasRole(role, complementaryObject);\n-\t\t} else {\n-\t\t\treturn true;\n-\t\t}\n-\t}\n-\n-\tpublic static boolean isAuthorizedForAttribute(PerunSession sess, ActionType actionType, AttributeDefinition attrDef, Object primaryHolder, Object secondaryHolder) throws InternalErrorException, AttributeNotExistsException, ActionTypeNotExistsException {\n-\t\tlog.trace(\"Entering isAuthorizedForAttribute: sess='\" + sess + \"', actionType='\" + actionType + \"', attrDef='\" + attrDef + \"', primaryHolder='\" + primaryHolder + \"', secondaryHolder='\" + secondaryHolder + \"'\");\n-\n-\t\tUtils.notNull(sess, \"sess\");\n-\t\tUtils.notNull(actionType, \"ActionType\");\n-\t\tUtils.notNull(attrDef, \"AttributeDefinition\");\n-\t\tgetPerunBl().getAttributesManagerBl().checkAttributeExists(sess, attrDef);\n-\n-\t\t// We need to load additional information about the principal\n-\t\tif (!sess.getPerunPrincipal().isAuthzInitialized()) {\n-\t\t\tinit(sess);\n-\t\t}\n-\n-\t\t// If the user has no roles, deny access\n-\t\tif (sess.getPerunPrincipal().getRoles() == null) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\t// Perun admin can do anything\n-\t\tif (sess.getPerunPrincipal().getRoles().hasRole(Role.PERUNADMIN)) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t// Engine and Service can read attributes\n-\t\tif (sess.getPerunPrincipal().getRoles().hasRole(Role.ENGINE) && actionType.equals(ActionType.READ)) {\n-\t\t\treturn true;\n-\t\t}\n-\n-\t\t//If attrDef is type of entityless, return false (only perunAdmin can read and write to entityless)\n-\t\tif (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attrDef, AttributesManager.NS_ENTITYLESS_ATTR))\n-\t\t\treturn false;\n-\n-\t\t//This method get all possible roles which can do action on attribute\n-\t\tList<Role> roles = cz.metacentrum.perun.core.impl.AuthzResolverImpl.getRolesWhichCanWorkWithAttribute(actionType, attrDef);\n-\n-\t\t//Now get information about primary and secondary holders to identify them!\n-\t\t//All possible useful perunBeans\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\t\tUserExtSource ues = null;\n-\n-\t\t//Get object for primaryHolder\n-\t\tif (primaryHolder != null) {\n-\t\t\tif (primaryHolder instanceof Vo) vo = (Vo) primaryHolder;\n-\t\t\telse if (primaryHolder instanceof Facility) facility = (Facility) primaryHolder;\n-\t\t\telse if (primaryHolder instanceof Group) group = (Group) primaryHolder;\n-\t\t\telse if (primaryHolder instanceof Member) member = (Member) primaryHolder;\n-\t\t\telse if (primaryHolder instanceof User) user = (User) primaryHolder;\n-\t\t\telse if (primaryHolder instanceof Host) host = (Host) primaryHolder;\n-\t\t\telse if (primaryHolder instanceof Resource) resource = (Resource) primaryHolder;\n-\t\t\telse if (primaryHolder instanceof UserExtSource) ues = (UserExtSource) primaryHolder;\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Adding attribute must have perunBean which is not null.\");\n-\t\t}\n-\n-\t\t//Get object for secondaryHolder\n-\t\tif (secondaryHolder != null) {\n-\t\t\tif (secondaryHolder instanceof Vo) vo = (Vo) secondaryHolder;\n-\t\t\telse if (secondaryHolder instanceof Facility) facility = (Facility) secondaryHolder;\n-\t\t\telse if (secondaryHolder instanceof Group) group = (Group) secondaryHolder;\n-\t\t\telse if (secondaryHolder instanceof Member) member = (Member) secondaryHolder;\n-\t\t\telse if (secondaryHolder instanceof User) user = (User) secondaryHolder;\n-\t\t\telse if (secondaryHolder instanceof Host) host = (Host) secondaryHolder;\n-\t\t\telse if (secondaryHolder instanceof Resource) resource = (Resource) secondaryHolder;\n-\t\t\telse if (secondaryHolder instanceof UserExtSource) ues = (UserExtSource) secondaryHolder;\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized perunBean in secondaryHolder.\");\n-\t\t\t}\n-\t\t} // If not, its ok, secondary holder can be null\n-\n-\t\t//Important: There is no options for other roles like service, serviceUser and other!\n-\t\tif (resource != null && member != null) {\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.FACILITYADMIN, resource)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.SELF)) {\n-\t\t\t\tif (isAuthorized(sess, Role.SELF, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\t//If groupManager has right on any group assigned to resource\n-\t\t\t\tList<Group> groups = getPerunBl().getGroupsManagerBl().getGroupsByPerunBean(sess, resource);\n-\t\t\t\tfor (Group g : groups) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, g)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (resource != null && group != null) {\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, resource)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, resource)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\t//If groupManager has right on the group\n-\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, group)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) {\n-\t\t\t\t//IMPORTANT \"for now possible, but need to discuss\"\n-\t\t\t\tif (getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource).contains(group)) {\n-\t\t\t\t\tList<Group> groups = getPerunBl().getGroupsManagerBl().getGroupsByPerunBean(sess, resource);\n-\t\t\t\t\tfor (Group g : groups) {\n-\t\t\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, g)) return true;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n+    private final static Logger log = LoggerFactory.getLogger(AuthzResolverBlImpl.class);\n+    private static AuthzResolverImplApi authzResolverImpl;\n+    private static PerunBl perunBl;\n+\n+    private static final String UNSET_ROLE = \"UNSET\";\n+    private static final String SET_ROLE = \"SET\";\n+\n+    /**\n+     * Retrieves information about the perun principal (in which VOs the principal is admin, ...)\n+     *\n+     * @param sess perunSession\n+     * @throws InternalErrorException when problem\n+     */\n+    protected static void init(PerunSession sess) throws InternalErrorException {\n+        log.trace(\"Initializing AuthzResolver for [{}]\", sess.getPerunPrincipal());\n+\n+        refreshAuthz(sess);\n+\n+        log.debug(\"AuthzResolver: Complete PerunPrincipal: {}\", sess.getPerunPrincipal());\n+    }\n+\n+    /**\n+     * Checks if the principal is authorized.\n+     *\n+     * @param sess                perunSession\n+     * @param role                required role\n+     * @param complementaryObject object which specifies particular action of the role (e.g. group)\n+     * @return true if the principal authorized, false otherwise\n+     * @throws InternalErrorException if something goes wrong\n+     */\n+    public static boolean isAuthorized(PerunSession sess, Role role, PerunBean complementaryObject) throws InternalErrorException {\n+        log.trace(\"Entering isAuthorized: sess='\" + sess + \"', role='\" + role + \"', complementaryObject='\" + complementaryObject + \"'\");\n+        Utils.notNull(sess, \"sess\");\n+\n+        // We need to load additional information about the principal\n+        if (!sess.getPerunPrincipal().isAuthzInitialized()) {\n+            init(sess);\n+        }\n+\n+        // If the user has no roles, deny access\n+        if (sess.getPerunPrincipal().getRoles() == null) {\n+            return false;\n+        }\n+\n+        // Perun admin can do anything\n+        if (sess.getPerunPrincipal().getRoles().hasRole(Role.PERUNADMIN)) {\n+            return true;\n+        }\n+\n+        // If user doesn't have requested role, deny request\n+        if (!sess.getPerunPrincipal().getRoles().hasRole(role)) {\n+            return false;\n+        }\n+\n+        // Check if the principal has the privileges\n+        if (complementaryObject != null) {\n+\n+            String beanName = BeansUtils.convertRichBeanNameToBeanName(complementaryObject.getBeanName());\n+\n+            // Check various combinations of role and complementary objects\n+            if (role.equals(Role.VOADMIN) || role.equals(Role.VOOBSERVER)) {\n+                // VO admin (or VoObserver) and group, get vo id from group and check if the user is vo admin (or VoObserver)\n+                if (beanName.equals(Group.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), ((Group) complementaryObject).getVoId());\n+                }\n+                // VO admin (or VoObserver) and resource, check if the user is vo admin (or VoObserver)\n+                if (beanName.equals(Resource.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), ((Resource) complementaryObject).getVoId());\n+                }\n+                // VO admin (or VoObserver) and member, check if the member is from that VO\n+                if (beanName.equals(Member.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), ((Member) complementaryObject).getVoId());\n+                }\n+            } else if (role.equals(Role.FACILITYADMIN)) {\n+                // Facility admin and resource, get facility id from resource and check if the user is facility admin\n+                if (beanName.equals(Resource.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, Facility.class.getSimpleName(), ((Resource) complementaryObject).getFacilityId());\n+                }\n+            } else if (role.equals(Role.RESOURCEADMIN)) {\n+                // Resource admin, check if the user is admin of resource\n+                if (beanName.equals(Resource.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, Resource.class.getSimpleName(), complementaryObject.getId());\n+                }\n+            } else if (role.equals(Role.SECURITYADMIN)) {\n+                // Security admin, check if security admin is admin of the SecurityTeam\n+                if (beanName.equals(SecurityTeam.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, SecurityTeam.class.getSimpleName(), complementaryObject.getId());\n+                }\n+            } else if (role.equals(Role.GROUPADMIN) || role.equals(Role.TOPGROUPCREATOR)) {\n+                // Group admin can see some of the date of the VO\n+                if (beanName.equals(Vo.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, Vo.class.getSimpleName(), complementaryObject.getId());\n+                }\n+            } else if (role.equals(Role.SELF)) {\n+                // Check if the member belongs to the self role\n+                if (beanName.equals(Member.class.getSimpleName())) {\n+                    return sess.getPerunPrincipal().getRoles().hasRole(role, User.class.getSimpleName(), ((Member) complementaryObject).getUserId());\n+                }\n+            }\n+\n+            return sess.getPerunPrincipal().getRoles().hasRole(role, complementaryObject);\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    public static boolean isAuthorizedForAttribute(PerunSession sess, ActionType actionType, AttributeDefinition attrDef, Object primaryHolder, Object secondaryHolder) throws InternalErrorException, AttributeNotExistsException, ActionTypeNotExistsException {\n+        log.trace(\"Entering isAuthorizedForAttribute: sess='\" + sess + \"', actionType='\" + actionType + \"', attrDef='\" + attrDef + \"', primaryHolder='\" + primaryHolder + \"', secondaryHolder='\" + secondaryHolder + \"'\");\n+\n+        Utils.notNull(sess, \"sess\");\n+        Utils.notNull(actionType, \"ActionType\");\n+        Utils.notNull(attrDef, \"AttributeDefinition\");\n+        getPerunBl().getAttributesManagerBl().checkAttributeExists(sess, attrDef);\n+\n+        // We need to load additional information about the principal\n+        if (!sess.getPerunPrincipal().isAuthzInitialized()) {\n+            init(sess);\n+        }\n+\n+        // If the user has no roles, deny access\n+        if (sess.getPerunPrincipal().getRoles() == null) {\n+            return false;\n+        }\n+\n+        // Perun admin can do anything\n+        if (sess.getPerunPrincipal().getRoles().hasRole(Role.PERUNADMIN)) {\n+            return true;\n+        }\n+\n+        // Engine and Service can read attributes\n+        if (sess.getPerunPrincipal().getRoles().hasRole(Role.ENGINE) && actionType.equals(ActionType.READ)) {\n+            return true;\n+        }\n+\n+        //If attrDef is type of entityless, return false (only perunAdmin can read and write to entityless)\n+        if (getPerunBl().getAttributesManagerBl().isFromNamespace(sess, attrDef, AttributesManager.NS_ENTITYLESS_ATTR)) {\n+            return false;\n+        }\n+\n+        //This method get all possible roles which can do action on attribute\n+        List<Role> roles = cz.metacentrum.perun.core.impl.AuthzResolverImpl.getRolesWhichCanWorkWithAttribute(actionType, attrDef);\n+\n+        //Now get information about primary and secondary holders to identify them!\n+        //All possible useful perunBeans\n+        Vo vo = null;\n+        Facility facility = null;\n+        Group group = null;\n+        Member member = null;\n+        User user = null;\n+        Host host = null;\n+        Resource resource = null;\n+        UserExtSource ues = null;\n+\n+        //Get object for primaryHolder\n+        if (primaryHolder != null) {\n+            if (primaryHolder instanceof Vo) {\n+                vo = (Vo) primaryHolder;\n+            } else if (primaryHolder instanceof Facility) {\n+                facility = (Facility) primaryHolder;\n+            } else if (primaryHolder instanceof Group) {\n+                group = (Group) primaryHolder;\n+            } else if (primaryHolder instanceof Member) {\n+                member = (Member) primaryHolder;\n+            } else if (primaryHolder instanceof User) {\n+                user = (User) primaryHolder;\n+            } else if (primaryHolder instanceof Host) {\n+                host = (Host) primaryHolder;\n+            } else if (primaryHolder instanceof Resource) {\n+                resource = (Resource) primaryHolder;\n+            } else if (primaryHolder instanceof UserExtSource) {\n+                ues = (UserExtSource) primaryHolder;\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized object in primaryHolder.\");\n+            }\n+        } else {\n+            throw new InternalErrorException(\"Adding attribute must have perunBean which is not null.\");\n+        }\n+\n+        //Get object for secondaryHolder\n+        if (secondaryHolder != null) {\n+            if (secondaryHolder instanceof Vo) {\n+                vo = (Vo) secondaryHolder;\n+            } else if (secondaryHolder instanceof Facility) {\n+                facility = (Facility) secondaryHolder;\n+            } else if (secondaryHolder instanceof Group) {\n+                group = (Group) secondaryHolder;\n+            } else if (secondaryHolder instanceof Member) {\n+                member = (Member) secondaryHolder;\n+            } else if (secondaryHolder instanceof User) {\n+                user = (User) secondaryHolder;\n+            } else if (secondaryHolder instanceof Host) {\n+                host = (Host) secondaryHolder;\n+            } else if (secondaryHolder instanceof Resource) {\n+                resource = (Resource) secondaryHolder;\n+            } else if (secondaryHolder instanceof UserExtSource) {\n+                ues = (UserExtSource) secondaryHolder;\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized perunBean in secondaryHolder.\");\n+            }\n+        } // If not, its ok, secondary holder can be null\n+\n+        //Important: There is no options for other roles like service, serviceUser and other!\n+        if (resource != null && member != null) {\n+            if (roles.contains(Role.VOADMIN)) {\n+                if (isAuthorized(sess, Role.VOADMIN, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                if (isAuthorized(sess, Role.VOOBSERVER, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.FACILITYADMIN)) {\n+                if (isAuthorized(sess, Role.FACILITYADMIN, resource)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.SELF)) {\n+                if (isAuthorized(sess, Role.SELF, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                //If groupManager has right on any group assigned to resource\n+                List<Group> groups = getPerunBl().getGroupsManagerBl().getGroupsByPerunBean(sess, resource);\n+                for (Group g : groups) {\n+                    if (isAuthorized(sess, Role.GROUPADMIN, g)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else if (resource != null && group != null) {\n+            if (roles.contains(Role.VOADMIN)) {\n+                if (isAuthorized(sess, Role.VOADMIN, resource)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                if (isAuthorized(sess, Role.VOOBSERVER, resource)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                //If groupManager has right on the group\n+                if (isAuthorized(sess, Role.GROUPADMIN, group)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.FACILITYADMIN)) {\n+                //IMPORTANT \"for now possible, but need to discuss\"\n+                if (getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource).contains(group)) {\n+                    List<Group> groups = getPerunBl().getGroupsManagerBl().getGroupsByPerunBean(sess, resource);\n+                    for (Group g : groups) {\n+                        if (isAuthorized(sess, Role.GROUPADMIN, g)) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            }\n //\t\t\tif (roles.contains(Role.SELF)) ; //Not Allowed\n-\t\t} else if (user != null && facility != null) {\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) if (isAuthorized(sess, Role.FACILITYADMIN, facility)) return true;\n-\t\t\tif (roles.contains(Role.SELF)) if (isAuthorized(sess, Role.SELF, user)) return true;\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tHashSet<Resource> resourcesFromUser = new HashSet<>();\n-\t\t\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\tresourcesFromUser.retainAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility));\n-\t\t\t\tfor (Resource resourceElement : resourcesFromUser) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, resourceElement)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tHashSet<Resource> resourcesFromUser = new HashSet<>();\n-\t\t\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\tresourcesFromUser.retainAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility));\n-\t\t\t\tfor (Resource resourceElement : resourcesFromUser) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, resourceElement)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\t//If groupManager has rights on \"any group which is assigned to any resource from the facility\" and \"the user has also member in vo where exists this group\"\n-\t\t\t\tList<Vo> userVos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n-\t\t\t\tSet<Integer> userVosIds = new HashSet<>();\n-\t\t\t\tfor (Vo voElement : userVos) {\n-\t\t\t\t\tuserVosIds.add(voElement.getId());\n-\t\t\t\t}\n-\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor (Group groupElement : groupsFromFacility) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, groupElement) && userVosIds.contains(groupElement.getVoId()))\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (member != null && group != null) {\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.SELF)) {\n-\t\t\t\tif (isAuthorized(sess, Role.SELF, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, group)) return true;\n-\t\t\t}\n-\t\t} else if (user != null) {\n-\t\t\tif (roles.contains(Role.SELF)) if (isAuthorized(sess, Role.SELF, user)) return true;\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\t//TEMPORARY, PROBABLY WILL BE FALSE\n-\t\t\t\tList<Vo> vosFromUser = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n-\t\t\t\tfor (Vo v : vosFromUser) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, v)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\t//TEMPORARY, PROBABLY WILL BE FALSE\n-\t\t\t\tList<Vo> vosFromUser = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n-\t\t\t\tfor (Vo v : vosFromUser) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, v)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\t//If principal is groupManager in any vo where user has member\n-\t\t\t\tList<Vo> userVos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n-\t\t\t\tfor (Vo voElement : userVos) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, voElement)) return true;\n-\t\t\t\t}\n-\t\t\t}\n+        } else if (user != null && facility != null) {\n+            if (roles.contains(Role.FACILITYADMIN)) {\n+                if (isAuthorized(sess, Role.FACILITYADMIN, facility)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.SELF)) {\n+                if (isAuthorized(sess, Role.SELF, user)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOADMIN)) {\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                HashSet<Resource> resourcesFromUser = new HashSet<>();\n+                for (Member memberElement : membersFromUser) {\n+                    resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, memberElement));\n+                }\n+                resourcesFromUser.retainAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility));\n+                for (Resource resourceElement : resourcesFromUser) {\n+                    if (isAuthorized(sess, Role.VOADMIN, resourceElement)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                HashSet<Resource> resourcesFromUser = new HashSet<>();\n+                for (Member memberElement : membersFromUser) {\n+                    resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, memberElement));\n+                }\n+                resourcesFromUser.retainAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility));\n+                for (Resource resourceElement : resourcesFromUser) {\n+                    if (isAuthorized(sess, Role.VOOBSERVER, resourceElement)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                //If groupManager has rights on \"any group which is assigned to any resource from the facility\" and \"the user has also member in vo where exists this group\"\n+                List<Vo> userVos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n+                Set<Integer> userVosIds = new HashSet<>();\n+                for (Vo voElement : userVos) {\n+                    userVosIds.add(voElement.getId());\n+                }\n+\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                for (Group groupElement : groupsFromFacility) {\n+                    if (isAuthorized(sess, Role.GROUPADMIN, groupElement) && userVosIds.contains(groupElement.getVoId())) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        } else if (member != null && group != null) {\n+            if (roles.contains(Role.VOADMIN)) {\n+                if (isAuthorized(sess, Role.VOADMIN, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                if (isAuthorized(sess, Role.VOOBSERVER, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.SELF)) {\n+                if (isAuthorized(sess, Role.SELF, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                if (isAuthorized(sess, Role.GROUPADMIN, group)) {\n+                    return true;\n+                }\n+            }\n+        } else if (user != null) {\n+            if (roles.contains(Role.SELF)) {\n+                if (isAuthorized(sess, Role.SELF, user)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOADMIN)) {\n+                //TEMPORARY, PROBABLY WILL BE FALSE\n+                List<Vo> vosFromUser = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n+                for (Vo v : vosFromUser) {\n+                    if (isAuthorized(sess, Role.VOADMIN, v)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                //TEMPORARY, PROBABLY WILL BE FALSE\n+                List<Vo> vosFromUser = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n+                for (Vo v : vosFromUser) {\n+                    if (isAuthorized(sess, Role.VOOBSERVER, v)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                //If principal is groupManager in any vo where user has member\n+                List<Vo> userVos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user);\n+                for (Vo voElement : userVos) {\n+                    if (isAuthorized(sess, Role.GROUPADMIN, voElement)) {\n+                        return true;\n+                    }\n+                }\n+            }\n //\t\t\tif (roles.contains(Role.FACILITYADMIN)) ; //Not allowed\n-\t\t} else if (member != null) {\n-\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.SELF)) {\n-\t\t\t\tif (isAuthorized(sess, Role.SELF, member)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\t//if principal is groupManager in vo where the member has membership\n-\t\t\t\tVo v = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, v)) return true;\n-\t\t\t}\n+        } else if (member != null) {\n+\n+            if (roles.contains(Role.VOADMIN)) {\n+                if (isAuthorized(sess, Role.VOADMIN, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                if (isAuthorized(sess, Role.VOOBSERVER, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.SELF)) {\n+                if (isAuthorized(sess, Role.SELF, member)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                //if principal is groupManager in vo where the member has membership\n+                Vo v = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+                if (isAuthorized(sess, Role.GROUPADMIN, v)) {\n+                    return true;\n+                }\n+            }\n //\t\t\tif (roles.contains(Role.FACILITYADMIN)) ; //Not allowed\n-\t\t} else if (vo != null) {\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, vo)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, vo)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\t//if Principal is GroupManager in the vo\n-\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, vo)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) {\n-\t\t\t\t// is facility manager of any vo resource\n-\t\t\t\tList<Resource> resourceList = perunBl.getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tfor (Resource res : resourceList) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.FACILITYADMIN, res)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.SELF)) {\n-\t\t\t\tif (actionType.equals(ActionType.READ)) {\n-\t\t\t\t\t// any user can read\n-\t\t\t\t\treturn true;\n-\t\t\t\t} else if (actionType.equals(ActionType.WRITE)) {\n-\t\t\t\t\t// only vo member can write\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tperunBl.getMembersManagerBl().getMemberByUser(sess, vo, sess.getPerunPrincipal().getUser());\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t} catch (MemberNotExistsException ex) {\n-\t\t\t\t\t\t// not vo member -> not allowed\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (group != null) {\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, group)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, group)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) if (isAuthorized(sess, Role.GROUPADMIN, group)) return true;\n+        } else if (vo != null) {\n+            if (roles.contains(Role.VOADMIN)) {\n+                if (isAuthorized(sess, Role.VOADMIN, vo)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                if (isAuthorized(sess, Role.VOOBSERVER, vo)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                //if Principal is GroupManager in the vo\n+                if (isAuthorized(sess, Role.GROUPADMIN, vo)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.FACILITYADMIN)) {\n+                // is facility manager of any vo resource\n+                List<Resource> resourceList = perunBl.getResourcesManagerBl().getResources(sess, vo);\n+                for (Resource res : resourceList) {\n+                    if (isAuthorized(sess, Role.FACILITYADMIN, res)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.SELF)) {\n+                if (actionType.equals(ActionType.READ)) {\n+                    // any user can read\n+                    return true;\n+                } else if (actionType.equals(ActionType.WRITE)) {\n+                    // only vo member can write\n+                    try {\n+                        perunBl.getMembersManagerBl().getMemberByUser(sess, vo, sess.getPerunPrincipal().getUser());\n+                        return true;\n+                    } catch (MemberNotExistsException ex) {\n+                        // not vo member -> not allowed\n+                    }\n+                }\n+            }\n+        } else if (group != null) {\n+            if (roles.contains(Role.VOADMIN)) {\n+                if (isAuthorized(sess, Role.VOADMIN, group)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                if (isAuthorized(sess, Role.VOOBSERVER, group)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                if (isAuthorized(sess, Role.GROUPADMIN, group)) {\n+                    return true;\n+                }\n+            }\n //\t\t\tif (roles.contains(Role.FACILITYADMIN)) ; //Not allowed\n //\t\t\tif (roles.contains(Role.SELF)) ; //Not allowed\n-\t\t} else if (resource != null) {\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, resource)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, resource)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.FACILITYADMIN, resource)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.RESOURCEADMIN)) {\n-\t\t\t\tif (isAuthorized(sess, Role.RESOURCEADMIN, resource)) return true;\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tfor (Group g : groupsFromResource) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, g)) return true;\n-\t\t\t\t}\n-\t\t\t}\n+        } else if (resource != null) {\n+            if (roles.contains(Role.VOADMIN)) {\n+                if (isAuthorized(sess, Role.VOADMIN, resource)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                if (isAuthorized(sess, Role.VOOBSERVER, resource)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.FACILITYADMIN)) {\n+                if (isAuthorized(sess, Role.FACILITYADMIN, resource)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.RESOURCEADMIN)) {\n+                if (isAuthorized(sess, Role.RESOURCEADMIN, resource)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                for (Group g : groupsFromResource) {\n+                    if (isAuthorized(sess, Role.GROUPADMIN, g)) {\n+                        return true;\n+                    }\n+                }\n+            }\n //\t\t\tif (roles.contains(Role.SELF)) ; //Not allowed\n-\t\t} else if (facility != null) {\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) if (isAuthorized(sess, Role.FACILITYADMIN, facility)) return true;\n-\t\t\tif (roles.contains(Role.VOADMIN)) {\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor (Resource r : resourcesFromFacility) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, r)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor (Resource r : resourcesFromFacility) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, r)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor (Group g : groupsFromFacility) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, g)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.SELF)) {\n-\t\t\t\tList<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tif (usersFromFacility.contains(sess.getPerunPrincipal().getUser())) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (host != null) {\n+        } else if (facility != null) {\n+            if (roles.contains(Role.FACILITYADMIN)) {\n+                if (isAuthorized(sess, Role.FACILITYADMIN, facility)) {\n+                    return true;\n+                }\n+            }\n+            if (roles.contains(Role.VOADMIN)) {\n+                List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource r : resourcesFromFacility) {\n+                    if (isAuthorized(sess, Role.VOADMIN, r)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.VOOBSERVER)) {\n+                List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource r : resourcesFromFacility) {\n+                    if (isAuthorized(sess, Role.VOOBSERVER, r)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.GROUPADMIN)) {\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                for (Group g : groupsFromFacility) {\n+                    if (isAuthorized(sess, Role.GROUPADMIN, g)) {\n+                        return true;\n+                    }\n+                }\n+            }\n+            if (roles.contains(Role.SELF)) {\n+                List<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                if (usersFromFacility.contains(sess.getPerunPrincipal().getUser())) {\n+                    return true;\n+                }\n+            }\n+        } else if (host != null) {\n //\t\t\tif (roles.contains(Role.VOADMIN)) ; //Not allowed\n //\t\t\tif (roles.contains(Role.VOOBSERVER)) ; //Not allowed\n //\t\t\tif (roles.contains(Role.GROUPADMIN)) ; //Not allowed\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) {\n-\t\t\t\tFacility f = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tif (isAuthorized(sess, Role.FACILITYADMIN, f)) return true;\n-\t\t\t}\n+            if (roles.contains(Role.FACILITYADMIN)) {\n+                Facility f = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                if (isAuthorized(sess, Role.FACILITYADMIN, f)) {\n+                    return true;\n+                }\n+            }\n //\t\t\tif (roles.contains(Role.SELF)) ; //Not allowed\n-\t\t} else //noinspection ConstantConditions\n-\t\t\tif (ues != null) {\n-\t\t\tUser sessUser = sess.getPerunPrincipal().getUser();\n-\t\t\tUser uesUser;\n-\t\t\ttry {\n-\t\t\t\tuesUser = getPerunBl().getUsersManagerBl().getUserById(sess, ues.getUserId());\n-\t\t\t} catch (UserNotExistsException ex) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tif (ues.getUserId() == sessUser.getId()) return true;\n-\t\t\tif (roles.contains(Role.FACILITYADMIN)) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAssignedFacilities(sess, uesUser);\n-\t\t\t\tfor (Facility f : facilities) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.FACILITYADMIN, f)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.VOADMIN) || roles.contains(Role.VOOBSERVER)) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, uesUser);\n-\t\t\t\tfor (Vo v : vos) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOADMIN, v)) return true;\n-\t\t\t\t\tif (isAuthorized(sess, Role.VOOBSERVER, v)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (roles.contains(Role.GROUPADMIN)) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, uesUser);\n-\t\t\t\tfor (Vo v : vos) {\n-\t\t\t\t\tif (isAuthorized(sess, Role.GROUPADMIN, v)) return true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"There is no other possible variants for now!\");\n-\t\t}\n-\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Return list of roles which are authorized for doing \"action\" on \"attribute\".\n-\t *\n-\t * @param sess       perun session\n-\t * @param actionType type of action on attribute (ex.: write, read, etc...)\n-\t * @param attrDef    attribute what principal want to work with\n-\t * @return list of roles\n-\t */\n-\tpublic static List<Role> getRolesWhichCanWorkWithAttribute(PerunSession sess, ActionType actionType, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, ActionTypeNotExistsException {\n-\t\tgetPerunBl().getAttributesManagerBl().checkAttributeExists(sess, attrDef);\n-\t\tgetPerunBl().getAttributesManagerBl().checkActionTypeExists(sess, actionType);\n-\t\treturn cz.metacentrum.perun.core.impl.AuthzResolverImpl.getRolesWhichCanWorkWithAttribute(actionType, attrDef);\n-\t}\n-\n-\t/**\n-\t * Checks if the principal is authorized.\n-\t *\n-\t * @param sess perunSession\n-\t * @param role required role\n-\t * @return true if the principal authorized, false otherwise\n-\t * @throws InternalErrorException if something goes wrong\n-\t */\n-\tpublic static boolean isAuthorized(PerunSession sess, Role role) throws InternalErrorException {\n-\t\treturn isAuthorized(sess, role, null);\n-\t}\n-\n-\n-\t/**\n-\t * Returns true if the perunPrincipal has requested role.\n-\t *\n-\t * @param perunPrincipal acting person for whom the role is checked\n-\t * @param role           role to be checked\n-\t */\n-\tpublic static boolean hasRole(PerunPrincipal perunPrincipal, Role role) {\n-\t\treturn perunPrincipal.getRoles().hasRole(role);\n-\t}\n-\n-\t/**\n-\t * Set role for user and <b>all</b> complementary objects.\n-\t * <p>\n-\t * If some complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary objects.\n-\t *\n-\t * @param sess                 perun session\n-\t * @param user                 the user for setting role\n-\t * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator | securityadmin  )\n-\t * @param complementaryObjects objects for which role will be set\n-\t */\n-\tpublic static void setRole(PerunSession sess, User user, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, AlreadyAdminException {\n-\t\tif (complementaryObjects == null || complementaryObjects.isEmpty()) {\n-\t\t\ttry {\n-\t\t\t\tmanageRole(sess, SET_ROLE, null, user, role, null);\n-\t\t\t\t//These exceptions should never happen\n-\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tfor (PerunBean compObject : complementaryObjects) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmanageRole(sess, SET_ROLE, null, user, role, compObject);\n-\t\t\t\t\t//These exceptions should never happen\n-\t\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Set role for user and <b>one</b> complementary object.\n-\t * <p>\n-\t * If complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary object.\n-\t *\n-\t * @param sess                perun session\n-\t * @param user                the user for setting role\n-\t * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator | securityadmin )\n-\t * @param complementaryObject object for which role will be set\n-\t */\n-\tpublic static void setRole(PerunSession sess, User user, PerunBean complementaryObject, Role role) throws InternalErrorException, AlreadyAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.setRole(sess, user, role, complementaryObjects);\n-\t}\n-\n-\t/**\n-\t * Set role for auhtorizedGroup and <b>all</b> complementary objects.\n-\t * <p>\n-\t * If some complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary objects.\n-\t *\n-\t * @param sess                 perun session\n-\t * @param authorizedGroup      the group for setting role\n-\t * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n-\t * @param complementaryObjects objects for which role will be set\n-\t */\n-\tpublic static void setRole(PerunSession sess, Group authorizedGroup, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, AlreadyAdminException {\n-\t\tif (complementaryObjects == null || complementaryObjects.isEmpty()) {\n-\t\t\ttry {\n-\t\t\t\tmanageRole(sess, SET_ROLE, authorizedGroup, null, role, null);\n-\t\t\t\t//These exceptions should never happen\n-\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tfor (PerunBean compObject : complementaryObjects) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmanageRole(sess, SET_ROLE, authorizedGroup, null, role, compObject);\n-\t\t\t\t\t//These exceptions should never happen\n-\t\t\t\t} catch (GroupNotAdminException | UserNotAdminException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Set role for authorizedGroup and <b>one</b> complementary object.\n-\t * <p>\n-\t * If complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary object.\n-\t *\n-\t * @param sess                perun session\n-\t * @param authorizedGroup     the group for setting role\n-\t * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n-\t * @param complementaryObject object for which role will be set\n-\t */\n-\tpublic static void setRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, Role role) throws InternalErrorException, AlreadyAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.setRole(sess, authorizedGroup, role, complementaryObjects);\n-\t}\n-\n-\t/**\n-\t * Unset role for user and <b>all</b> complementary objects\n-\t * <p>\n-\t * If some complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary objects.\n-\t *\n-\t * @param sess                 perun session\n-\t * @param user                 the user for unsetting role\n-\t * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n-\t * @param complementaryObjects objects for which role will be unset\n-\t */\n-\tpublic static void unsetRole(PerunSession sess, User user, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, UserNotAdminException {\n-\t\tif (complementaryObjects == null || complementaryObjects.isEmpty()) {\n-\t\t\ttry {\n-\t\t\t\tmanageRole(sess, UNSET_ROLE, null, user, role, null);\n-\t\t\t\t//These exceptions should never happen\n-\t\t\t} catch (GroupNotAdminException | AlreadyAdminException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tfor (PerunBean compObject : complementaryObjects) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmanageRole(sess, UNSET_ROLE, null, user, role, compObject);\n-\t\t\t\t\t//These exceptions should never happen\n-\t\t\t\t} catch (GroupNotAdminException | AlreadyAdminException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Unset role for user and <b>one</b> complementary object.\n-\t * <p>\n-\t * If complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary object.\n-\t *\n-\t * @param sess                perun session\n-\t * @param user                the user for unsetting role\n-\t * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n-\t * @param complementaryObject object for which role will be unset\n-\t */\n-\tpublic static void unsetRole(PerunSession sess, User user, PerunBean complementaryObject, Role role) throws InternalErrorException, UserNotAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, user, role, complementaryObjects);\n-\t}\n-\n-\t/**\n-\t * Unset role for group and <b>all</b> complementary objects\n-\t * <p>\n-\t * If some complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary objects.\n-\t *\n-\t * @param sess                 perun session\n-\t * @param authorizedGroup      the group for unsetting role\n-\t * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n-\t * @param complementaryObjects objects for which role will be unset\n-\t */\n-\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, GroupNotAdminException {\n-\t\tif (complementaryObjects == null || complementaryObjects.isEmpty()) {\n-\t\t\ttry {\n-\t\t\t\tmanageRole(sess, UNSET_ROLE, authorizedGroup, null, role, null);\n-\t\t\t\t//These exceptions should never happen\n-\t\t\t} catch (UserNotAdminException | AlreadyAdminException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tfor (PerunBean compObject : complementaryObjects) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmanageRole(sess, UNSET_ROLE, authorizedGroup, null, role, compObject);\n-\t\t\t\t\t//These exceptions should never happen\n-\t\t\t\t} catch (UserNotAdminException | AlreadyAdminException ex) {\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Unset role for group and <b>one</b> complementary object\n-\t * <p>\n-\t * If some complementary object is wrong for the role, throw an exception.\n-\t * For role \"perunadmin\" ignore complementary object.\n-\t *\n-\t * @param sess                perun session\n-\t * @param authorizedGroup     the group for unsetting role\n-\t * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n-\t * @param complementaryObject object for which role will be unset\n-\t */\n-\tpublic static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, Role role) throws InternalErrorException, GroupNotAdminException {\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tcomplementaryObjects.add(complementaryObject);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, authorizedGroup, role, complementaryObjects);\n-\t}\n-\n-\t/**\n-\t * Set or unset role for user or authorized group and complementary object\n-\t * <p>\n-\t * If user and authorizedGroup are null, throw exception. Only one can be filled at once, if both, throw exception.\n-\t * If complementaryObject is null, throw an exception if the role is not PerunAdmin.\n-\t * <p>\n-\t * <b>IMPORTANT:</b> refresh authz only if user in session is affected\n-\t *\n-\t * @param sess                perun session\n-\t * @param user                the user for set role\n-\t * @param authorizedGroup     the group for set role\n-\t * @param operation           'SET' or 'UNSET'\n-\t * @param role                role to set\n-\t * @param complementaryObject object for setting role on it\n-\t */\n-\tprivate static void manageRole(PerunSession sess, String operation, Group authorizedGroup, User user, Role role, PerunBean complementaryObject) throws InternalErrorException, AlreadyAdminException, UserNotAdminException, GroupNotAdminException {\n-\t\tif (authorizedGroup == null && user == null)\n-\t\t\tthrow new InternalErrorException(\"There is no object for setting role (user or authorizedGroup).\");\n-\t\tif (authorizedGroup != null && user != null)\n-\t\t\tthrow new InternalErrorException(\"There are both authorizedGroup and user for setting role, only one is acceptable.\");\n-\t\tif (!role.equals(Role.PERUNADMIN) && complementaryObject == null)\n-\t\t\tthrow new InternalErrorException(\"Complementary object can be null only for the role perunadmin.\");\n-\n-\t\t//Check operation\n-\t\tswitch (operation) {\n-\t\t\tcase SET_ROLE:\n-\t\t\t\t//Check role\n-\t\t\t\tif (role.equals(Role.PERUNADMIN)) {\n-\t\t\t\t\tif (user != null) authzResolverImpl.makeUserPerunAdmin(sess, user);\n-\t\t\t\t\telse throw new InternalErrorException(\"Not supported perunRole on authorizedGroup.\");\n-\t\t\t\t} else if (role.equals(Role.VOOBSERVER)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set VoObserver rights without Vo.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for VoObserver role: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.VOADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set VoAdmin rights without Vo.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addVoRole(sess, Role.VOADMIN,(Vo) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addVoRole(sess, Role.VOADMIN, (Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for VoAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.TOPGROUPCREATOR)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set TopGroupCreator rights without Vo.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for VoObserver role: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.GROUPADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set GroupAdmin rights without Group.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Group) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addAdmin(sess, (Group) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addAdmin(sess, (Group) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for GroupAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.FACILITYADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set FacilityAdmin rights without Facility.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Facility) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addAdmin(sess, (Facility) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addAdmin(sess, (Facility) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for FacilityAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.RESOURCEADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set ResourceAdmin rights without Resource.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Resource) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addAdmin(sess, (Resource) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addAdmin(sess, (Resource) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for ResourceAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.SECURITYADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set SecurityAdmin rights without SecurityTeam.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof SecurityTeam) {\n-\t\t\t\t\t\tif (user != null) addAdmin(sess, (SecurityTeam) complementaryObject, user);\n-\t\t\t\t\t\telse addAdmin(sess, (SecurityTeam) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for FacilityAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.SPONSOR)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set SponsoredUser rights without user.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof User) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addAdmin(sess, (User) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addAdmin(sess, (User) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.addVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.addVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for SponsoredUser: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Not supported role: \" + role);\n-\t\t\t\t}\n-\t\t\t\t// Check operation\n-\t\t\t\tbreak;\n-\t\t\tcase UNSET_ROLE:\n-\t\t\t\t//Check role\n-\t\t\t\tif (role.equals(Role.PERUNADMIN)) {\n-\t\t\t\t\tif (user != null) authzResolverImpl.removePerunAdmin(sess, user);\n-\t\t\t\t\telse throw new InternalErrorException(\"Not supported perunRole on authorizedGroup.\");\n-\t\t\t\t} else if (role.equals(Role.VOOBSERVER)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't unset VoObserver rights without Vo this way.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.removeVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.removeVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for VoObserver: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.VOADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't unset VoAdmin rights without Vo this way.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.removeVoRole(sess, Role.VOADMIN,(Vo) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.removeVoRole(sess, Role.VOADMIN,(Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for VoAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.TOPGROUPCREATOR)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't set TopGroupCreator rights without Vo.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.removeVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.removeVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for VoObserver role: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.GROUPADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't unset GroupAdmin rights without Group this way.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Group) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.removeAdmin(sess, (Group) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.removeAdmin(sess, (Group) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for GroupAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.FACILITYADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't unset FacilityAdmin rights without Facility this way.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Facility) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.removeAdmin(sess, (Facility) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.removeAdmin(sess, (Facility) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for FacilityAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.RESOURCEADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't unset ResourceAdmin rights without Resource this way.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof Resource) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.removeAdmin(sess, (Resource) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.removeAdmin(sess, (Resource) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for ResourceAdmin: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.SECURITYADMIN)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't unset SecurityAdmin rights without Security this way.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof SecurityTeam) {\n-\t\t\t\t\t\tif (user != null) removeAdmin(sess, (SecurityTeam) complementaryObject, user);\n-\t\t\t\t\t\telse removeAdmin(sess, (SecurityTeam) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for VoObserver: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else if (role.equals(Role.SPONSOR)) {\n-\t\t\t\t\tif (complementaryObject == null) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported operation, can't unset Sponsor rights without User this way.\");\n-\t\t\t\t\t} else if (complementaryObject instanceof User) {\n-\t\t\t\t\t\tif (user != null) authzResolverImpl.removeAdmin(sess, (User) complementaryObject, user);\n-\t\t\t\t\t\telse authzResolverImpl.removeAdmin(sess, (User) complementaryObject, authorizedGroup);\n-\t\t\t\t\t} else if (complementaryObject instanceof Vo) {\n-\t\t\t\t\t\tif (user != null) {\n-\t\t\t\t\t\t\tauthzResolverImpl.removeVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, user);\n-\t\t\t\t\t\t\tgetPerunBl().getVosManagerBl().handleUserLostVoRole(sess, user, (Vo) complementaryObject, Role.SPONSOR);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tauthzResolverImpl.removeVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, authorizedGroup);\n-\t\t\t\t\t\t\tgetPerunBl().getVosManagerBl().handleGroupLostVoRole(sess, authorizedGroup, (Vo) complementaryObject, Role.SPONSOR);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"Not supported complementary object for Sponsor: \" + complementaryObject);\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Not supported role: \" + role);\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow new InternalErrorException(\"Unsupported operation. Only set and unset are correct. Operation: \" + operation);\n-\t\t}\n-\n-\t\t//After set or unset role without exception, refresh authz if user in session is the same like user in parameter\n-\t\tif (user != null && sess.getPerunPrincipal() != null) {\n-\t\t\tif (user.getId() == sess.getPerunPrincipal().getUserId()) {\n-\t\t\t\tAuthzResolverBlImpl.refreshAuthz(sess);\n-\t\t\t}\n-\t\t\t//If there is authorized group instead of user, try to find intersection in members and if there is at least one, then refresh authz\n-\t\t} else if (authorizedGroup != null && sess.getPerunPrincipal() != null && sess.getPerunPrincipal().getUser() != null) {\n-\t\t\tList<Member> groupMembers = perunBl.getGroupsManagerBl().getGroupMembers(sess, authorizedGroup);\n-\t\t\tList<Member> userMembers = perunBl.getMembersManagerBl().getMembersByUser(sess, sess.getPerunPrincipal().getUser());\n-\t\t\tuserMembers.retainAll(groupMembers);\n-\t\t\tif (!userMembers.isEmpty()) AuthzResolverBlImpl.refreshAuthz(sess);\n-\t\t}\n-\t}\n-\n-\tpublic String toString() {\n-\t\treturn getClass().getSimpleName() + \":[]\";\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is vo admin.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is vo admin\n-\t */\n-\tpublic static boolean isVoAdmin(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.VOADMIN);\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is group admin.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is group admin.\n-\t */\n-\tpublic static boolean isGroupAdmin(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.GROUPADMIN);\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is facility admin.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is facility admin.\n-\t */\n-\tpublic static boolean isFacilityAdmin(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.FACILITYADMIN);\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is resource admin.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is resource admin.\n-\t */\n-\tpublic static boolean isResourceAdmin(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.RESOURCEADMIN);\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is security admin.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is security admin.\n-\t */\n-\tpublic static boolean isSecurityAdmin(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.SECURITYADMIN);\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is vo observer.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is vo observer\n-\t */\n-\tpublic static boolean isVoObserver(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.VOOBSERVER);\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is top group creator.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is top group creator.\n-\t */\n-\tpublic static boolean isTopGroupCreator(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.TOPGROUPCREATOR);\n-\t}\n-\n-\t/**\n-\t * Returns true if the perun principal inside the perun session is perun admin.\n-\t *\n-\t * @param sess perun session\n-\t * @return true if the perun principal is perun admin.\n-\t */\n-\tpublic static boolean isPerunAdmin(PerunSession sess) {\n-\t\treturn sess.getPerunPrincipal().getRoles().hasRole(Role.PERUNADMIN);\n-\t}\n-\n-\t/**\n-\t * Get all principal role names. Role is defined as a name, translation table is in Role class.\n-\t *\n-\t * @param sess perun session\n-\t * @return list of integers, which represents role from enum Role.\n-\t */\n-\tpublic static List<String> getPrincipalRoleNames(PerunSession sess) throws InternalErrorException {\n-\t\t// We need to load the principals roles\n-\t\tif (!sess.getPerunPrincipal().isAuthzInitialized()) {\n-\t\t\tinit(sess);\n-\t\t}\n-\n-\t\treturn sess.getPerunPrincipal().getRoles().getRolesNames();\n-\t}\n-\n-\t/**\n-\t * Returns user which is associated with credentials used to log-in to Perun.\n-\t *\n-\t * @param sess perun session\n-\t * @return currently logged user\n-\t */\n-\tpublic static User getLoggedUser(PerunSession sess) throws UserNotExistsException, InternalErrorException {\n-\t\t// We need to load additional information about the principal\n-\t\tif (!sess.getPerunPrincipal().isAuthzInitialized()) {\n-\t\t\tinit(sess);\n-\t\t}\n-\t\treturn sess.getPerunPrincipal().getUser();\n-\t}\n-\n-\t/**\n-\t * Returns PerunPrincipal object associated with current session. It contains necessary information,\n-\t * including user identification, authorization and metadata. Each call of this method refresh the\n-\t * session including authorization data.\n-\t *\n-\t * @param sess perun session\n-\t * @return perunPrincipal object\n-\t * @throws InternalErrorException if the PerunSession is not valid.\n-\t */\n-\tpublic static PerunPrincipal getPerunPrincipal(PerunSession sess) throws InternalErrorException, UserNotExistsException {\n-\t\tUtils.checkPerunSession(sess);\n-\n-\t\tif (!sess.getPerunPrincipal().isAuthzInitialized()) {\n-\t\t\tinit(sess);\n-\t\t} else {\n-\t\t\trefreshAuthz(sess);\n-\t\t}\n-\n-\t\treturn sess.getPerunPrincipal();\n-\t}\n-\n-\t/**\n-\t * Returns all complementary objects for defined role.\n-\t *\n-\t * @param sess perun session\n-\t * @param role to get object for\n-\t * @return list of complementary objects\n-\t */\n-\tpublic static List<PerunBean> getComplementaryObjectsForRole(PerunSession sess, Role role) throws InternalErrorException {\n-\t\treturn AuthzResolverBlImpl.getComplementaryObjectsForRole(sess, role, null);\n-\t}\n-\n-\t/**\n-\t * Returns only complementary objects for defined role which fits perunBeanClass class.\n-\t *\n-\t * @param sess           perun session\n-\t * @param role           to get object for\n-\t * @param perunBeanClass particular class ( Vo | Group | ... )\n-\t * @return list of complementary objects\n-\t */\n-\tpublic static List<PerunBean> getComplementaryObjectsForRole(PerunSession sess, Role role, Class perunBeanClass) throws InternalErrorException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tUtils.notNull(sess.getPerunPrincipal(), \"sess.getPerunPrincipal()\");\n-\n-\t\tList<PerunBean> complementaryObjects = new ArrayList<>();\n-\t\tif (sess.getPerunPrincipal().getRoles().get(role) != null) {\n-\t\t\tfor (String beanName : sess.getPerunPrincipal().getRoles().get(role).keySet()) {\n-\t\t\t\t// Do we filter results on particular class?\n-\t\t\t\tif (perunBeanClass == null || beanName.equals(perunBeanClass.getSimpleName())) {\n-\n-\t\t\t\t\tif (beanName.equals(Vo.class.getSimpleName())) {\n-\t\t\t\t\t\tfor (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tcomplementaryObjects.add(perunBl.getVosManagerBl().getVoById(sess, beanId));\n-\t\t\t\t\t\t\t} catch (VoNotExistsException ex) {\n-\t\t\t\t\t\t\t\t//this is ok, vo was probably deleted but still exists in user session, only log it\n-\t\t\t\t\t\t\t\tlog.debug(\"Vo not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (beanName.equals(Group.class.getSimpleName())) {\n-\t\t\t\t\t\tfor (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tcomplementaryObjects.add(perunBl.getGroupsManagerBl().getGroupById(sess, beanId));\n-\t\t\t\t\t\t\t} catch (GroupNotExistsException ex) {\n-\t\t\t\t\t\t\t\t//this is ok, group was probably deleted but still exists in user session, only log it\n-\t\t\t\t\t\t\t\tlog.debug(\"Group not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (beanName.equals(Facility.class.getSimpleName())) {\n-\t\t\t\t\t\tfor (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tcomplementaryObjects.add(perunBl.getFacilitiesManagerBl().getFacilityById(sess, beanId));\n-\t\t\t\t\t\t\t} catch (FacilityNotExistsException ex) {\n-\t\t\t\t\t\t\t\t//this is ok, facility was probably deleted but still exists in user session, only log it\n-\t\t\t\t\t\t\t\tlog.debug(\"Facility not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (beanName.equals(Resource.class.getSimpleName())) {\n-\t\t\t\t\t\tfor (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tcomplementaryObjects.add(perunBl.getResourcesManagerBl().getResourceById(sess, beanId));\n-\t\t\t\t\t\t\t} catch (ResourceNotExistsException ex) {\n-\t\t\t\t\t\t\t\t//this is ok, resource was probably deleted but still exists in user session, only log it\n-\t\t\t\t\t\t\t\tlog.debug(\"Resource not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (beanName.equals(Service.class.getSimpleName())) {\n-\t\t\t\t\t\tfor (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tcomplementaryObjects.add(perunBl.getServicesManagerBl().getServiceById(sess, beanId));\n-\t\t\t\t\t\t\t} catch (ServiceNotExistsException ex) {\n-\t\t\t\t\t\t\t\t//this is ok, service was probably deleted but still exists in user session, only log it\n-\t\t\t\t\t\t\t\tlog.debug(\"Service not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (beanName.equals(SecurityTeam.class.getSimpleName())) {\n-\t\t\t\t\t\tfor (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tcomplementaryObjects.add(perunBl.getSecurityTeamsManagerBl().getSecurityTeamById(sess, beanId));\n-\t\t\t\t\t\t\t} catch (SecurityTeamNotExistsException e) {\n-\t\t\t\t\t\t\t\t//this is ok, securityTeam was probably deleted but still exists in user session, only log it\n-\t\t\t\t\t\t\t\tlog.debug(\"SecurityTeam not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn complementaryObjects;\n-\t}\n-\n-\t/**\n-\t * Refresh authorization data inside session.\n-\t * <p>\n-\t * Fill in proper roles and their relative entities (vos, groups, ....).\n-\t * User itself or ext source data is NOT updated.\n-\t *\n-\t * @param sess perun session to refresh authz for\n-\t */\n-\tpublic static synchronized void refreshAuthz(PerunSession sess) throws InternalErrorException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tlog.trace(\"Refreshing authz roles for session {}.\", sess);\n-\n-\t\t//set empty set of roles\n-\t\tsess.getPerunPrincipal().setRoles(new AuthzRoles());\n-\t\t//Prepare service roles like engine, service, registrar, perunAdmin etc.\n-\t\tprepareServiceRoles(sess);\n-\n-\t\t// if have some of the service principal, we do not need to search further\n-\t\tif (sess.getPerunPrincipal().getRoles().isEmpty()) {\n-\t\t\tUser user = sess.getPerunPrincipal().getUser();\n-\t\t\tAuthzRoles roles;\n-\t\t\tif (user == null) {\n-\t\t\t\troles = new AuthzRoles();\n-\t\t\t} else {\n-\t\t\t\t// Load all user's roles with all possible subgroups\n-\t\t\t\troles = addAllSubgroupsToAuthzRoles(sess, authzResolverImpl.getRoles(user));\n-\t\t\t\t// Add self role for the user\n-\t\t\t\troles.putAuthzRole(Role.SELF, user);\n-\t\t\t\t// Add service user role\n-\t\t\t\tif (user.isServiceUser()) {\n-\t\t\t\t\troles.putAuthzRole(Role.SERVICEUSER);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tsess.getPerunPrincipal().setRoles(roles);\n-\t\t}\n-\n-\t\t//for OAuth clients, do not allow delegating roles not allowed by scopes\n-\t\tif (sess.getPerunClient().getType() == PerunClient.Type.OAUTH) {\n-\t\t\tList<String> oauthScopes = sess.getPerunClient().getScopes();\n-\t\t\tif(!oauthScopes.contains(PerunClient.PERUN_ADMIN_SCOPE)) {\n-\t\t\t\tlog.debug(\"removing PERUNADMIN role from session {}\",sess);\n-\t\t\t\tsess.getPerunPrincipal().getRoles().remove(Role.PERUNADMIN);\n-\t\t\t}\n-\t\t\tif(!oauthScopes.contains(PerunClient.PERUN_API_SCOPE)) {\n-\t\t\t\tlog.warn(\"removing all roles from session {}\",sess);\n-\t\t\t\tsess.getPerunPrincipal().getRoles().clear();\n-\t\t\t}\n-\t\t}\n-\t\tlog.trace(\"Refreshed roles: {}\", sess.getPerunPrincipal().getRoles());\n-\t\tsess.getPerunPrincipal().setAuthzInitialized(true);\n-\t}\n-\n-\t/**\n-\t * Refresh all session data excluding Ext. Source and additional information.\n-\t * <p>\n-\t * This method update user in session (try to find user by ext. source data).\n-\t * Then it updates authorization data in session.\n-\t *\n-\t * @param sess Perun session to refresh data for\n-\t */\n-\tpublic static synchronized void refreshSession(PerunSession sess) throws InternalErrorException {\n-\t\tUtils.checkPerunSession(sess);\n-\t\tlog.debug(\"Refreshing session data for session {}.\", sess);\n-\n-\t\ttry {\n-\t\t\tUser user = perunBl.getUsersManagerBl().getUserByExtSourceNameAndExtLogin(sess, sess.getPerunPrincipal().getExtSourceName(), sess.getPerunPrincipal().getActor());\n-\t\t\tsess.getPerunPrincipal().setUser(user);\n-\t\t} catch (Exception ex) {\n-\t\t\t// we don't care that user was not found\n-\t\t}\n-\n-\t\tAuthzResolverBlImpl.refreshAuthz(sess);\n-\n-\t}\n-\n-\t/**\n-\t * For role GroupAdmin with association to \"Group\" add also all subgroups to authzRoles.\n-\t * If authzRoles is null, return empty AuthzRoles.\n-\t * If there is no GroupAdmin role or Group object for this role, return not changed authzRoles.\n-\t *\n-\t * @param sess       perun session\n-\t * @param authzRoles authzRoles for some user\n-\t * @return authzRoles also with subgroups of groups\n-\t */\n-\tpublic static AuthzRoles addAllSubgroupsToAuthzRoles(PerunSession sess, AuthzRoles authzRoles) throws InternalErrorException {\n-\t\tif (authzRoles == null) return new AuthzRoles();\n-\t\tif (authzRoles.hasRole(Role.GROUPADMIN)) {\n-\t\t\tMap<String, Set<Integer>> groupAdminRoles = authzRoles.get(Role.GROUPADMIN);\n-\t\t\tSet<Integer> groupsIds = groupAdminRoles.get(\"Group\");\n-\t\t\tSet<Integer> newGroupsIds = new HashSet<>(groupsIds);\n-\t\t\tfor (Integer id : groupsIds) {\n-\t\t\t\tGroup parentGroup;\n-\t\t\t\ttry {\n-\t\t\t\t\tparentGroup = getPerunBl().getGroupsManagerBl().getGroupById(sess, id);\n-\t\t\t\t} catch (GroupNotExistsException ex) {\n-\t\t\t\t\tlog.debug(\"Group with id=\" + id + \" not exists when initializing rights for user: \" + sess.getPerunPrincipal().getUser());\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tList<Group> subGroups = getPerunBl().getGroupsManagerBl().getAllSubGroups(sess, parentGroup);\n-\t\t\t\tfor (Group g : subGroups) {\n-\t\t\t\t\tnewGroupsIds.add(g.getId());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tgroupAdminRoles.put(\"Group\", newGroupsIds);\n-\t\t\tauthzRoles.put(Role.GROUPADMIN, groupAdminRoles);\n-\t\t}\n-\t\treturn authzRoles;\n-\t}\n-\n-\tpublic static void removeAllAuthzForVo(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\tauthzResolverImpl.removeAllAuthzForVo(sess, vo);\n-\t}\n-\n-\tstatic List<Vo> getVosForGroupInRole(PerunSession sess, Group group, Role role) throws InternalErrorException {\n-\t\tList<Vo> vos = new ArrayList<>();\n-\t\tfor (Integer voId : authzResolverImpl.getVoIdsForGroupInRole(sess, group, role)) {\n-\t\t\ttry {\n-\t\t\t\tvos.add(getPerunBl().getVosManagerBl().getVoById(sess, voId));\n-\t\t\t} catch (VoNotExistsException e) {\n-\t\t\t\tlog.error(\"vo \" + voId + \" not found\", e);\n-\t\t\t}\n-\t\t}\n-\t\treturn vos;\n-\t}\n-\n-\tstatic void removeAllUserAuthz(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//notify vosManager that the deleted user had SPONSOR role for some VOs\n-\t\tList<Integer> sponsoredVoIds = authzResolverImpl.getVoIdsForUserInRole(sess, user, Role.SPONSOR);\n-\t\tfor (Integer voId : sponsoredVoIds) {\n-\t\t\tVosManagerBl vosManagerBl = getPerunBl().getVosManagerBl();\n-\t\t\ttry {\n-\t\t\t\tvosManagerBl.handleUserLostVoRole(sess, user, vosManagerBl.getVoById(sess, voId),Role.SPONSOR);\n-\t\t\t} catch (VoNotExistsException e) {\n-\t\t\t\tlog.error(\"Vo {} has user {} in role SPONSOR, but does not exist\",voId,user.getId());\n-\t\t\t}\n-\t\t}\n-\t\t//remove all roles from the user\n-\t\tauthzResolverImpl.removeAllUserAuthz(sess, user);\n-\t}\n-\n-\tstatic void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) throws InternalErrorException {\n-\t\tauthzResolverImpl.removeAllSponsoredUserAuthz(sess, sponsoredUser);\n-\t}\n-\n-\tpublic static void removeAllAuthzForGroup(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t//notify vosManager that the deleted group had SPONSOR role for some VOs\n-\t\tfor (Vo vo : getVosForGroupInRole(sess, group, Role.SPONSOR)) {\n-\t\t\tgetPerunBl().getVosManagerBl().handleGroupLostVoRole(sess, group, vo ,Role.SPONSOR);\n-\t\t}\n-\t\t//remove all roles from the group\n-\t\tauthzResolverImpl.removeAllAuthzForGroup(sess, group);\n-\t}\n-\n-\tpublic static void removeAllAuthzForFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\tauthzResolverImpl.removeAllAuthzForFacility(sess, facility);\n-\t}\n-\n-\tpublic static void removeAllAuthzForResource(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\tauthzResolverImpl.removeAllAuthzForResource(sess, resource);\n-\t}\n-\n-\tpublic static void removeAllAuthzForService(PerunSession sess, Service service) throws InternalErrorException {\n-\t\tauthzResolverImpl.removeAllAuthzForService(sess, service);\n-\t}\n-\n-\tpublic static void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException {\n-\t\tauthzResolverImpl.removeAllAuthzForSecurityTeam(sess, securityTeam);\n-\t}\n-\n-\tpublic static void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\tauthzResolverImpl.addAdmin(sess, securityTeam, user);\n-\t}\n-\n-\tpublic static void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\tauthzResolverImpl.addAdmin(sess, securityTeam, group);\n-\t}\n-\n-\tpublic static void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, UserNotAdminException {\n-\t\tauthzResolverImpl.removeAdmin(sess, securityTeam, user);\n-\t}\n-\n-\tpublic static void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\tauthzResolverImpl.removeAdmin(sess, securityTeam, group);\n-\t}\n-\n-\t/**\n-\t * Checks whether the user is in role for Vo.\n-\t */\n-\tstatic boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo) {\n-\t\treturn authzResolverImpl.isUserInRoleForVo(session, user, role, vo);\n-\t}\n-\n-\t/**\n-\t * Checks whether the group is in role for Vo.\n-\t */\n-\tstatic boolean isGroupInRoleForVo(PerunSession session, Group group, Role role, Vo vo) {\n-\t\treturn authzResolverImpl.isGroupInRoleForVo(session, group, role, vo);\n-\t}\n-\n-\t// Filled by Spring\n-\tpublic static AuthzResolverImplApi setAuthzResolverImpl(AuthzResolverImplApi authzResolverImpl) {\n-\t\tAuthzResolverBlImpl.authzResolverImpl = authzResolverImpl;\n-\t\treturn authzResolverImpl;\n-\t}\n-\n-\t//Filled by Spring\n-\tpublic static PerunBl setPerunBl(PerunBl perunBl) {\n-\t\tAuthzResolverBlImpl.perunBl = perunBl;\n-\t\treturn perunBl;\n-\t}\n-\n-\tprivate static PerunBl getPerunBl() {\n-\t\treturn perunBl;\n-\t}\n-\n-\t/**\n-\t * Prepare service roles to session AuthzRoles (perunadmin, service, rpc, engine etc.)\n-\t *\n-\t * @param sess use session to add roles\n-\t */\n-\tprivate static void prepareServiceRoles(PerunSession sess) throws InternalErrorException {\n-\t\t// Load list of perunAdmins from the configuration, split the list by the comma\n-\t\tList<String> perunAdmins = BeansUtils.getCoreConfig().getAdmins();\n-\n-\t\t// Check if the PerunPrincipal is in a group of Perun Admins\n-\t\tif (perunAdmins.contains(sess.getPerunPrincipal().getActor())) {\n-\t\t\tsess.getPerunPrincipal().getRoles().putAuthzRole(Role.PERUNADMIN);\n-\t\t\tsess.getPerunPrincipal().setAuthzInitialized(true);\n-\t\t\t// We can quit, because perun admin has all privileges\n-\t\t\tlog.trace(\"AuthzResolver.init: Perun Admin {} loaded\", sess.getPerunPrincipal().getActor());\n-\t\t\treturn;\n-\t\t}\n-\n-\t\tString perunRpcAdmin = BeansUtils.getCoreConfig().getRpcPrincipal();\n-\t\tif (sess.getPerunPrincipal().getActor().equals(perunRpcAdmin)) {\n-\t\t\tsess.getPerunPrincipal().getRoles().putAuthzRole(Role.RPC);\n-\t\t\tlog.trace(\"AuthzResolver.init: Perun RPC {} loaded\", perunRpcAdmin);\n-\t\t}\n-\n-\t\tList<String> perunEngineAdmins = BeansUtils.getCoreConfig().getEnginePrincipals();\n-\t\tif (perunEngineAdmins.contains(sess.getPerunPrincipal().getActor())) {\n-\t\t\tsess.getPerunPrincipal().getRoles().putAuthzRole(Role.ENGINE);\n-\t\t\tlog.trace(\"AuthzResolver.init: Perun Engine {} loaded\", perunEngineAdmins);\n-\t\t}\n-\n-\t\tList<String> perunNotifications = BeansUtils.getCoreConfig().getNotificationPrincipals();\n-\t\tif (perunNotifications.contains(sess.getPerunPrincipal().getActor())) {\n-\t\t\tsess.getPerunPrincipal().getRoles().putAuthzRole(Role.NOTIFICATIONS);\n-\n-\t\t\tlog.trace(\"AuthzResolver.init: Perun Notifications {} loaded\", perunNotifications);\n-\t\t}\n-\n-\t\tList<String> perunRegistrars = BeansUtils.getCoreConfig().getRegistrarPrincipals();\n-\t\tif (perunRegistrars.contains(sess.getPerunPrincipal().getActor())) {\n-\t\t\tsess.getPerunPrincipal().getRoles().putAuthzRole(Role.REGISTRAR);\n-\n-\t\t\t//FIXME ted pridame i roli plneho admina\n-\t\t\tsess.getPerunPrincipal().getRoles().putAuthzRole(Role.PERUNADMIN);\n-\n-\t\t\tlog.trace(\"AuthzResolver.init: Perun Registrar {} loaded\", perunRegistrars);\n-\t\t}\n-\t}\n+        } else //noinspection ConstantConditions\n+            if (ues != null) {\n+                User sessUser = sess.getPerunPrincipal().getUser();\n+                User uesUser;\n+                try {\n+                    uesUser = getPerunBl().getUsersManagerBl().getUserById(sess, ues.getUserId());\n+                } catch (UserNotExistsException ex) {\n+                    return false;\n+                }\n+                if (ues.getUserId() == sessUser.getId()) {\n+                    return true;\n+                }\n+                if (roles.contains(Role.FACILITYADMIN)) {\n+                    List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAssignedFacilities(sess, uesUser);\n+                    for (Facility f : facilities) {\n+                        if (isAuthorized(sess, Role.FACILITYADMIN, f)) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                if (roles.contains(Role.VOADMIN) || roles.contains(Role.VOOBSERVER)) {\n+                    List<Vo> vos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, uesUser);\n+                    for (Vo v : vos) {\n+                        if (isAuthorized(sess, Role.VOADMIN, v)) {\n+                            return true;\n+                        }\n+                        if (isAuthorized(sess, Role.VOOBSERVER, v)) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                if (roles.contains(Role.GROUPADMIN)) {\n+                    List<Vo> vos = getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, uesUser);\n+                    for (Vo v : vos) {\n+                        if (isAuthorized(sess, Role.GROUPADMIN, v)) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            } else {\n+                throw new InternalErrorException(\"There is no other possible variants for now!\");\n+            }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Return list of roles which are authorized for doing \"action\" on \"attribute\".\n+     *\n+     * @param sess       perun session\n+     * @param actionType type of action on attribute (ex.: write, read, etc...)\n+     * @param attrDef    attribute what principal want to work with\n+     * @return list of roles\n+     */\n+    public static List<Role> getRolesWhichCanWorkWithAttribute(PerunSession sess, ActionType actionType, AttributeDefinition attrDef) throws InternalErrorException, AttributeNotExistsException, ActionTypeNotExistsException {\n+        getPerunBl().getAttributesManagerBl().checkAttributeExists(sess, attrDef);\n+        getPerunBl().getAttributesManagerBl().checkActionTypeExists(sess, actionType);\n+        return cz.metacentrum.perun.core.impl.AuthzResolverImpl.getRolesWhichCanWorkWithAttribute(actionType, attrDef);\n+    }\n+\n+    /**\n+     * Checks if the principal is authorized.\n+     *\n+     * @param sess perunSession\n+     * @param role required role\n+     * @return true if the principal authorized, false otherwise\n+     * @throws InternalErrorException if something goes wrong\n+     */\n+    public static boolean isAuthorized(PerunSession sess, Role role) throws InternalErrorException {\n+        return isAuthorized(sess, role, null);\n+    }\n+\n+\n+    /**\n+     * Returns true if the perunPrincipal has requested role.\n+     *\n+     * @param perunPrincipal acting person for whom the role is checked\n+     * @param role           role to be checked\n+     */\n+    public static boolean hasRole(PerunPrincipal perunPrincipal, Role role) {\n+        return perunPrincipal.getRoles().hasRole(role);\n+    }\n+\n+    /**\n+     * Set role for user and <b>all</b> complementary objects.\n+     * <p>\n+     * If some complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary objects.\n+     *\n+     * @param sess                 perun session\n+     * @param user                 the user for setting role\n+     * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator | securityadmin  )\n+     * @param complementaryObjects objects for which role will be set\n+     */\n+    public static void setRole(PerunSession sess, User user, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, AlreadyAdminException {\n+        if (complementaryObjects == null || complementaryObjects.isEmpty()) {\n+            try {\n+                manageRole(sess, SET_ROLE, null, user, role, null);\n+                //These exceptions should never happen\n+            } catch (GroupNotAdminException | UserNotAdminException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            for (PerunBean compObject : complementaryObjects) {\n+                try {\n+                    manageRole(sess, SET_ROLE, null, user, role, compObject);\n+                    //These exceptions should never happen\n+                } catch (GroupNotAdminException | UserNotAdminException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Set role for user and <b>one</b> complementary object.\n+     * <p>\n+     * If complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary object.\n+     *\n+     * @param sess                perun session\n+     * @param user                the user for setting role\n+     * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator | securityadmin )\n+     * @param complementaryObject object for which role will be set\n+     */\n+    public static void setRole(PerunSession sess, User user, PerunBean complementaryObject, Role role) throws InternalErrorException, AlreadyAdminException {\n+        List<PerunBean> complementaryObjects = new ArrayList<>();\n+        complementaryObjects.add(complementaryObject);\n+        AuthzResolverBlImpl.setRole(sess, user, role, complementaryObjects);\n+    }\n+\n+    /**\n+     * Set role for auhtorizedGroup and <b>all</b> complementary objects.\n+     * <p>\n+     * If some complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary objects.\n+     *\n+     * @param sess                 perun session\n+     * @param authorizedGroup      the group for setting role\n+     * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n+     * @param complementaryObjects objects for which role will be set\n+     */\n+    public static void setRole(PerunSession sess, Group authorizedGroup, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, AlreadyAdminException {\n+        if (complementaryObjects == null || complementaryObjects.isEmpty()) {\n+            try {\n+                manageRole(sess, SET_ROLE, authorizedGroup, null, role, null);\n+                //These exceptions should never happen\n+            } catch (GroupNotAdminException | UserNotAdminException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            for (PerunBean compObject : complementaryObjects) {\n+                try {\n+                    manageRole(sess, SET_ROLE, authorizedGroup, null, role, compObject);\n+                    //These exceptions should never happen\n+                } catch (GroupNotAdminException | UserNotAdminException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Set role for authorizedGroup and <b>one</b> complementary object.\n+     * <p>\n+     * If complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary object.\n+     *\n+     * @param sess                perun session\n+     * @param authorizedGroup     the group for setting role\n+     * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n+     * @param complementaryObject object for which role will be set\n+     */\n+    public static void setRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, Role role) throws InternalErrorException, AlreadyAdminException {\n+        List<PerunBean> complementaryObjects = new ArrayList<>();\n+        complementaryObjects.add(complementaryObject);\n+        AuthzResolverBlImpl.setRole(sess, authorizedGroup, role, complementaryObjects);\n+    }\n+\n+    /**\n+     * Unset role for user and <b>all</b> complementary objects\n+     * <p>\n+     * If some complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary objects.\n+     *\n+     * @param sess                 perun session\n+     * @param user                 the user for unsetting role\n+     * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n+     * @param complementaryObjects objects for which role will be unset\n+     */\n+    public static void unsetRole(PerunSession sess, User user, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, UserNotAdminException {\n+        if (complementaryObjects == null || complementaryObjects.isEmpty()) {\n+            try {\n+                manageRole(sess, UNSET_ROLE, null, user, role, null);\n+                //These exceptions should never happen\n+            } catch (GroupNotAdminException | AlreadyAdminException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            for (PerunBean compObject : complementaryObjects) {\n+                try {\n+                    manageRole(sess, UNSET_ROLE, null, user, role, compObject);\n+                    //These exceptions should never happen\n+                } catch (GroupNotAdminException | AlreadyAdminException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unset role for user and <b>one</b> complementary object.\n+     * <p>\n+     * If complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary object.\n+     *\n+     * @param sess                perun session\n+     * @param user                the user for unsetting role\n+     * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n+     * @param complementaryObject object for which role will be unset\n+     */\n+    public static void unsetRole(PerunSession sess, User user, PerunBean complementaryObject, Role role) throws InternalErrorException, UserNotAdminException {\n+        List<PerunBean> complementaryObjects = new ArrayList<>();\n+        complementaryObjects.add(complementaryObject);\n+        AuthzResolverBlImpl.unsetRole(sess, user, role, complementaryObjects);\n+    }\n+\n+    /**\n+     * Unset role for group and <b>all</b> complementary objects\n+     * <p>\n+     * If some complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary objects.\n+     *\n+     * @param sess                 perun session\n+     * @param authorizedGroup      the group for unsetting role\n+     * @param role                 role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n+     * @param complementaryObjects objects for which role will be unset\n+     */\n+    public static void unsetRole(PerunSession sess, Group authorizedGroup, Role role, List<PerunBean> complementaryObjects) throws InternalErrorException, GroupNotAdminException {\n+        if (complementaryObjects == null || complementaryObjects.isEmpty()) {\n+            try {\n+                manageRole(sess, UNSET_ROLE, authorizedGroup, null, role, null);\n+                //These exceptions should never happen\n+            } catch (UserNotAdminException | AlreadyAdminException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            for (PerunBean compObject : complementaryObjects) {\n+                try {\n+                    manageRole(sess, UNSET_ROLE, authorizedGroup, null, role, compObject);\n+                    //These exceptions should never happen\n+                } catch (UserNotAdminException | AlreadyAdminException ex) {\n+                    throw new InternalErrorException(ex);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Unset role for group and <b>one</b> complementary object\n+     * <p>\n+     * If some complementary object is wrong for the role, throw an exception.\n+     * For role \"perunadmin\" ignore complementary object.\n+     *\n+     * @param sess                perun session\n+     * @param authorizedGroup     the group for unsetting role\n+     * @param role                role of user in a session ( perunadmin | voadmin | groupadmin | self | facilityadmin | voobserver | topgroupcreator )\n+     * @param complementaryObject object for which role will be unset\n+     */\n+    public static void unsetRole(PerunSession sess, Group authorizedGroup, PerunBean complementaryObject, Role role) throws InternalErrorException, GroupNotAdminException {\n+        List<PerunBean> complementaryObjects = new ArrayList<>();\n+        complementaryObjects.add(complementaryObject);\n+        AuthzResolverBlImpl.unsetRole(sess, authorizedGroup, role, complementaryObjects);\n+    }\n+\n+    /**\n+     * Set or unset role for user or authorized group and complementary object\n+     * <p>\n+     * If user and authorizedGroup are null, throw exception. Only one can be filled at once, if both, throw exception.\n+     * If complementaryObject is null, throw an exception if the role is not PerunAdmin.\n+     * <p>\n+     * <b>IMPORTANT:</b> refresh authz only if user in session is affected\n+     *\n+     * @param sess                perun session\n+     * @param user                the user for set role\n+     * @param authorizedGroup     the group for set role\n+     * @param operation           'SET' or 'UNSET'\n+     * @param role                role to set\n+     * @param complementaryObject object for setting role on it\n+     */\n+    private static void manageRole(PerunSession sess, String operation, Group authorizedGroup, User user, Role role, PerunBean complementaryObject) throws InternalErrorException, AlreadyAdminException, UserNotAdminException, GroupNotAdminException {\n+        if (authorizedGroup == null && user == null) {\n+            throw new InternalErrorException(\"There is no object for setting role (user or authorizedGroup).\");\n+        }\n+        if (authorizedGroup != null && user != null) {\n+            throw new InternalErrorException(\"There are both authorizedGroup and user for setting role, only one is acceptable.\");\n+        }\n+        if (!role.equals(Role.PERUNADMIN) && complementaryObject == null) {\n+            throw new InternalErrorException(\"Complementary object can be null only for the role perunadmin.\");\n+        }\n+\n+        //Check operation\n+        switch (operation) {\n+            case SET_ROLE:\n+                //Check role\n+                if (role.equals(Role.PERUNADMIN)) {\n+                    if (user != null) {\n+                        authzResolverImpl.makeUserPerunAdmin(sess, user);\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported perunRole on authorizedGroup.\");\n+                    }\n+                } else if (role.equals(Role.VOOBSERVER)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set VoObserver rights without Vo.\");\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.addVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for VoObserver role: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.VOADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set VoAdmin rights without Vo.\");\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.addVoRole(sess, Role.VOADMIN, (Vo) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addVoRole(sess, Role.VOADMIN, (Vo) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for VoAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.TOPGROUPCREATOR)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set TopGroupCreator rights without Vo.\");\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.addVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for VoObserver role: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.GROUPADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set GroupAdmin rights without Group.\");\n+                    } else if (complementaryObject instanceof Group) {\n+                        if (user != null) {\n+                            authzResolverImpl.addAdmin(sess, (Group) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addAdmin(sess, (Group) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for GroupAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.FACILITYADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set FacilityAdmin rights without Facility.\");\n+                    } else if (complementaryObject instanceof Facility) {\n+                        if (user != null) {\n+                            authzResolverImpl.addAdmin(sess, (Facility) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addAdmin(sess, (Facility) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for FacilityAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.RESOURCEADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set ResourceAdmin rights without Resource.\");\n+                    } else if (complementaryObject instanceof Resource) {\n+                        if (user != null) {\n+                            authzResolverImpl.addAdmin(sess, (Resource) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addAdmin(sess, (Resource) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for ResourceAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.SECURITYADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set SecurityAdmin rights without SecurityTeam.\");\n+                    } else if (complementaryObject instanceof SecurityTeam) {\n+                        if (user != null) {\n+                            addAdmin(sess, (SecurityTeam) complementaryObject, user);\n+                        } else {\n+                            addAdmin(sess, (SecurityTeam) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for FacilityAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.SPONSOR)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set SponsoredUser rights without user.\");\n+                    } else if (complementaryObject instanceof User) {\n+                        if (user != null) {\n+                            authzResolverImpl.addAdmin(sess, (User) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addAdmin(sess, (User) complementaryObject, authorizedGroup);\n+                        }\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.addVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.addVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for SponsoredUser: \" + complementaryObject);\n+                    }\n+                } else {\n+                    throw new InternalErrorException(\"Not supported role: \" + role);\n+                }\n+                // Check operation\n+                break;\n+            case UNSET_ROLE:\n+                //Check role\n+                if (role.equals(Role.PERUNADMIN)) {\n+                    if (user != null) {\n+                        authzResolverImpl.removePerunAdmin(sess, user);\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported perunRole on authorizedGroup.\");\n+                    }\n+                } else if (role.equals(Role.VOOBSERVER)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't unset VoObserver rights without Vo this way.\");\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.removeVoRole(sess, Role.VOOBSERVER, (Vo) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for VoObserver: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.VOADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't unset VoAdmin rights without Vo this way.\");\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeVoRole(sess, Role.VOADMIN, (Vo) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.removeVoRole(sess, Role.VOADMIN, (Vo) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for VoAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.TOPGROUPCREATOR)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't set TopGroupCreator rights without Vo.\");\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.removeVoRole(sess, Role.TOPGROUPCREATOR, (Vo) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for VoObserver role: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.GROUPADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't unset GroupAdmin rights without Group this way.\");\n+                    } else if (complementaryObject instanceof Group) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeAdmin(sess, (Group) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.removeAdmin(sess, (Group) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for GroupAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.FACILITYADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't unset FacilityAdmin rights without Facility this way.\");\n+                    } else if (complementaryObject instanceof Facility) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeAdmin(sess, (Facility) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.removeAdmin(sess, (Facility) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for FacilityAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.RESOURCEADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't unset ResourceAdmin rights without Resource this way.\");\n+                    } else if (complementaryObject instanceof Resource) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeAdmin(sess, (Resource) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.removeAdmin(sess, (Resource) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for ResourceAdmin: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.SECURITYADMIN)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't unset SecurityAdmin rights without Security this way.\");\n+                    } else if (complementaryObject instanceof SecurityTeam) {\n+                        if (user != null) {\n+                            removeAdmin(sess, (SecurityTeam) complementaryObject, user);\n+                        } else {\n+                            removeAdmin(sess, (SecurityTeam) complementaryObject, authorizedGroup);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for VoObserver: \" + complementaryObject);\n+                    }\n+                } else if (role.equals(Role.SPONSOR)) {\n+                    if (complementaryObject == null) {\n+                        throw new InternalErrorException(\"Not supported operation, can't unset Sponsor rights without User this way.\");\n+                    } else if (complementaryObject instanceof User) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeAdmin(sess, (User) complementaryObject, user);\n+                        } else {\n+                            authzResolverImpl.removeAdmin(sess, (User) complementaryObject, authorizedGroup);\n+                        }\n+                    } else if (complementaryObject instanceof Vo) {\n+                        if (user != null) {\n+                            authzResolverImpl.removeVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, user);\n+                            getPerunBl().getVosManagerBl().handleUserLostVoRole(sess, user, (Vo) complementaryObject, Role.SPONSOR);\n+                        } else {\n+                            authzResolverImpl.removeVoRole(sess, Role.SPONSOR, (Vo) complementaryObject, authorizedGroup);\n+                            getPerunBl().getVosManagerBl().handleGroupLostVoRole(sess, authorizedGroup, (Vo) complementaryObject, Role.SPONSOR);\n+                        }\n+                    } else {\n+                        throw new InternalErrorException(\"Not supported complementary object for Sponsor: \" + complementaryObject);\n+                    }\n+                } else {\n+                    throw new InternalErrorException(\"Not supported role: \" + role);\n+                }\n+                break;\n+            default:\n+                throw new InternalErrorException(\"Unsupported operation. Only set and unset are correct. Operation: \" + operation);\n+        }\n+\n+        //After set or unset role without exception, refresh authz if user in session is the same like user in parameter\n+        if (user != null && sess.getPerunPrincipal() != null) {\n+            if (user.getId() == sess.getPerunPrincipal().getUserId()) {\n+                AuthzResolverBlImpl.refreshAuthz(sess);\n+            }\n+            //If there is authorized group instead of user, try to find intersection in members and if there is at least one, then refresh authz\n+        } else if (authorizedGroup != null && sess.getPerunPrincipal() != null && sess.getPerunPrincipal().getUser() != null) {\n+            List<Member> groupMembers = perunBl.getGroupsManagerBl().getGroupMembers(sess, authorizedGroup);\n+            List<Member> userMembers = perunBl.getMembersManagerBl().getMembersByUser(sess, sess.getPerunPrincipal().getUser());\n+            userMembers.retainAll(groupMembers);\n+            if (!userMembers.isEmpty()) {\n+                AuthzResolverBlImpl.refreshAuthz(sess);\n+            }\n+        }\n+    }\n+\n+    public String toString() {\n+        return getClass().getSimpleName() + \":[]\";\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is vo admin.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is vo admin\n+     */\n+    public static boolean isVoAdmin(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.VOADMIN);\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is group admin.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is group admin.\n+     */\n+    public static boolean isGroupAdmin(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.GROUPADMIN);\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is facility admin.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is facility admin.\n+     */\n+    public static boolean isFacilityAdmin(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.FACILITYADMIN);\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is resource admin.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is resource admin.\n+     */\n+    public static boolean isResourceAdmin(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.RESOURCEADMIN);\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is security admin.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is security admin.\n+     */\n+    public static boolean isSecurityAdmin(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.SECURITYADMIN);\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is vo observer.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is vo observer\n+     */\n+    public static boolean isVoObserver(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.VOOBSERVER);\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is top group creator.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is top group creator.\n+     */\n+    public static boolean isTopGroupCreator(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.TOPGROUPCREATOR);\n+    }\n+\n+    /**\n+     * Returns true if the perun principal inside the perun session is perun admin.\n+     *\n+     * @param sess perun session\n+     * @return true if the perun principal is perun admin.\n+     */\n+    public static boolean isPerunAdmin(PerunSession sess) {\n+        return sess.getPerunPrincipal().getRoles().hasRole(Role.PERUNADMIN);\n+    }\n+\n+    /**\n+     * Get all principal role names. Role is defined as a name, translation table is in Role class.\n+     *\n+     * @param sess perun session\n+     * @return list of integers, which represents role from enum Role.\n+     */\n+    public static List<String> getPrincipalRoleNames(PerunSession sess) throws InternalErrorException {\n+        // We need to load the principals roles\n+        if (!sess.getPerunPrincipal().isAuthzInitialized()) {\n+            init(sess);\n+        }\n+\n+        return sess.getPerunPrincipal().getRoles().getRolesNames();\n+    }\n+\n+    /**\n+     * Returns user which is associated with credentials used to log-in to Perun.\n+     *\n+     * @param sess perun session\n+     * @return currently logged user\n+     */\n+    public static User getLoggedUser(PerunSession sess) throws UserNotExistsException, InternalErrorException {\n+        // We need to load additional information about the principal\n+        if (!sess.getPerunPrincipal().isAuthzInitialized()) {\n+            init(sess);\n+        }\n+        return sess.getPerunPrincipal().getUser();\n+    }\n+\n+    /**\n+     * Returns PerunPrincipal object associated with current session. It contains necessary information,\n+     * including user identification, authorization and metadata. Each call of this method refresh the\n+     * session including authorization data.\n+     *\n+     * @param sess perun session\n+     * @return perunPrincipal object\n+     * @throws InternalErrorException if the PerunSession is not valid.\n+     */\n+    public static PerunPrincipal getPerunPrincipal(PerunSession sess) throws InternalErrorException, UserNotExistsException {\n+        Utils.checkPerunSession(sess);\n+\n+        if (!sess.getPerunPrincipal().isAuthzInitialized()) {\n+            init(sess);\n+        } else {\n+            refreshAuthz(sess);\n+        }\n+\n+        return sess.getPerunPrincipal();\n+    }\n+\n+    /**\n+     * Returns all complementary objects for defined role.\n+     *\n+     * @param sess perun session\n+     * @param role to get object for\n+     * @return list of complementary objects\n+     */\n+    public static List<PerunBean> getComplementaryObjectsForRole(PerunSession sess, Role role) throws InternalErrorException {\n+        return AuthzResolverBlImpl.getComplementaryObjectsForRole(sess, role, null);\n+    }\n+\n+    /**\n+     * Returns only complementary objects for defined role which fits perunBeanClass class.\n+     *\n+     * @param sess           perun session\n+     * @param role           to get object for\n+     * @param perunBeanClass particular class ( Vo | Group | ... )\n+     * @return list of complementary objects\n+     */\n+    public static List<PerunBean> getComplementaryObjectsForRole(PerunSession sess, Role role, Class perunBeanClass) throws InternalErrorException {\n+        Utils.checkPerunSession(sess);\n+        Utils.notNull(sess.getPerunPrincipal(), \"sess.getPerunPrincipal()\");\n+\n+        List<PerunBean> complementaryObjects = new ArrayList<>();\n+        if (sess.getPerunPrincipal().getRoles().get(role) != null) {\n+            for (String beanName : sess.getPerunPrincipal().getRoles().get(role).keySet()) {\n+                // Do we filter results on particular class?\n+                if (perunBeanClass == null || beanName.equals(perunBeanClass.getSimpleName())) {\n+\n+                    if (beanName.equals(Vo.class.getSimpleName())) {\n+                        for (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n+                            try {\n+                                complementaryObjects.add(perunBl.getVosManagerBl().getVoById(sess, beanId));\n+                            } catch (VoNotExistsException ex) {\n+                                //this is ok, vo was probably deleted but still exists in user session, only log it\n+                                log.debug(\"Vo not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n+                            }\n+                        }\n+                    }\n+\n+                    if (beanName.equals(Group.class.getSimpleName())) {\n+                        for (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n+                            try {\n+                                complementaryObjects.add(perunBl.getGroupsManagerBl().getGroupById(sess, beanId));\n+                            } catch (GroupNotExistsException ex) {\n+                                //this is ok, group was probably deleted but still exists in user session, only log it\n+                                log.debug(\"Group not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n+                            }\n+                        }\n+                    }\n+\n+                    if (beanName.equals(Facility.class.getSimpleName())) {\n+                        for (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n+                            try {\n+                                complementaryObjects.add(perunBl.getFacilitiesManagerBl().getFacilityById(sess, beanId));\n+                            } catch (FacilityNotExistsException ex) {\n+                                //this is ok, facility was probably deleted but still exists in user session, only log it\n+                                log.debug(\"Facility not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n+                            }\n+                        }\n+                    }\n+\n+                    if (beanName.equals(Resource.class.getSimpleName())) {\n+                        for (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n+                            try {\n+                                complementaryObjects.add(perunBl.getResourcesManagerBl().getResourceById(sess, beanId));\n+                            } catch (ResourceNotExistsException ex) {\n+                                //this is ok, resource was probably deleted but still exists in user session, only log it\n+                                log.debug(\"Resource not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n+                            }\n+                        }\n+                    }\n+\n+                    if (beanName.equals(Service.class.getSimpleName())) {\n+                        for (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n+                            try {\n+                                complementaryObjects.add(perunBl.getServicesManagerBl().getServiceById(sess, beanId));\n+                            } catch (ServiceNotExistsException ex) {\n+                                //this is ok, service was probably deleted but still exists in user session, only log it\n+                                log.debug(\"Service not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n+                            }\n+                        }\n+                    }\n+\n+                    if (beanName.equals(SecurityTeam.class.getSimpleName())) {\n+                        for (Integer beanId : sess.getPerunPrincipal().getRoles().get(role).get(beanName)) {\n+                            try {\n+                                complementaryObjects.add(perunBl.getSecurityTeamsManagerBl().getSecurityTeamById(sess, beanId));\n+                            } catch (SecurityTeamNotExistsException e) {\n+                                //this is ok, securityTeam was probably deleted but still exists in user session, only log it\n+                                log.debug(\"SecurityTeam not find by id {} but still exists in user session when getComplementaryObjectsForRole method was called.\", beanId);\n+                            }\n+                        }\n+                    }\n+\n+                }\n+            }\n+        }\n+\n+        return complementaryObjects;\n+    }\n+\n+    /**\n+     * Refresh authorization data inside session.\n+     * <p>\n+     * Fill in proper roles and their relative entities (vos, groups, ....).\n+     * User itself or ext source data is NOT updated.\n+     *\n+     * @param sess perun session to refresh authz for\n+     */\n+    public static synchronized void refreshAuthz(PerunSession sess) throws InternalErrorException {\n+        Utils.checkPerunSession(sess);\n+        log.trace(\"Refreshing authz roles for session {}.\", sess);\n+\n+        //set empty set of roles\n+        sess.getPerunPrincipal().setRoles(new AuthzRoles());\n+        //Prepare service roles like engine, service, registrar, perunAdmin etc.\n+        prepareServiceRoles(sess);\n+\n+        // if have some of the service principal, we do not need to search further\n+        if (sess.getPerunPrincipal().getRoles().isEmpty()) {\n+            User user = sess.getPerunPrincipal().getUser();\n+            AuthzRoles roles;\n+            if (user == null) {\n+                roles = new AuthzRoles();\n+            } else {\n+                // Load all user's roles with all possible subgroups\n+                roles = addAllSubgroupsToAuthzRoles(sess, authzResolverImpl.getRoles(user));\n+                // Add self role for the user\n+                roles.putAuthzRole(Role.SELF, user);\n+                // Add service user role\n+                if (user.isServiceUser()) {\n+                    roles.putAuthzRole(Role.SERVICEUSER);\n+                }\n+            }\n+            sess.getPerunPrincipal().setRoles(roles);\n+        }\n+\n+        //for OAuth clients, do not allow delegating roles not allowed by scopes\n+        if (sess.getPerunClient().getType() == PerunClient.Type.OAUTH) {\n+            List<String> oauthScopes = sess.getPerunClient().getScopes();\n+            if (!oauthScopes.contains(PerunClient.PERUN_ADMIN_SCOPE)) {\n+                log.debug(\"removing PERUNADMIN role from session {}\", sess);\n+                sess.getPerunPrincipal().getRoles().remove(Role.PERUNADMIN);\n+            }\n+            if (!oauthScopes.contains(PerunClient.PERUN_API_SCOPE)) {\n+                log.warn(\"removing all roles from session {}\", sess);\n+                sess.getPerunPrincipal().getRoles().clear();\n+            }\n+        }\n+        log.trace(\"Refreshed roles: {}\", sess.getPerunPrincipal().getRoles());\n+        sess.getPerunPrincipal().setAuthzInitialized(true);\n+    }\n+\n+    /**\n+     * Refresh all session data excluding Ext. Source and additional information.\n+     * <p>\n+     * This method update user in session (try to find user by ext. source data).\n+     * Then it updates authorization data in session.\n+     *\n+     * @param sess Perun session to refresh data for\n+     */\n+    public static synchronized void refreshSession(PerunSession sess) throws InternalErrorException {\n+        Utils.checkPerunSession(sess);\n+        log.debug(\"Refreshing session data for session {}.\", sess);\n+\n+        try {\n+            User user = perunBl.getUsersManagerBl().getUserByExtSourceNameAndExtLogin(sess, sess.getPerunPrincipal().getExtSourceName(), sess.getPerunPrincipal().getActor());\n+            sess.getPerunPrincipal().setUser(user);\n+        } catch (Exception ex) {\n+            // we don't care that user was not found\n+        }\n+\n+        AuthzResolverBlImpl.refreshAuthz(sess);\n+\n+    }\n+\n+    /**\n+     * For role GroupAdmin with association to \"Group\" add also all subgroups to authzRoles.\n+     * If authzRoles is null, return empty AuthzRoles.\n+     * If there is no GroupAdmin role or Group object for this role, return not changed authzRoles.\n+     *\n+     * @param sess       perun session\n+     * @param authzRoles authzRoles for some user\n+     * @return authzRoles also with subgroups of groups\n+     */\n+    public static AuthzRoles addAllSubgroupsToAuthzRoles(PerunSession sess, AuthzRoles authzRoles) throws InternalErrorException {\n+        if (authzRoles == null) {\n+            return new AuthzRoles();\n+        }\n+        if (authzRoles.hasRole(Role.GROUPADMIN)) {\n+            Map<String, Set<Integer>> groupAdminRoles = authzRoles.get(Role.GROUPADMIN);\n+            Set<Integer> groupsIds = groupAdminRoles.get(\"Group\");\n+            Set<Integer> newGroupsIds = new HashSet<>(groupsIds);\n+            for (Integer id : groupsIds) {\n+                Group parentGroup;\n+                try {\n+                    parentGroup = getPerunBl().getGroupsManagerBl().getGroupById(sess, id);\n+                } catch (GroupNotExistsException ex) {\n+                    log.debug(\"Group with id=\" + id + \" not exists when initializing rights for user: \" + sess.getPerunPrincipal().getUser());\n+                    continue;\n+                }\n+                List<Group> subGroups = getPerunBl().getGroupsManagerBl().getAllSubGroups(sess, parentGroup);\n+                for (Group g : subGroups) {\n+                    newGroupsIds.add(g.getId());\n+                }\n+            }\n+            groupAdminRoles.put(\"Group\", newGroupsIds);\n+            authzRoles.put(Role.GROUPADMIN, groupAdminRoles);\n+        }\n+        return authzRoles;\n+    }\n+\n+    public static void removeAllAuthzForVo(PerunSession sess, Vo vo) throws InternalErrorException {\n+        authzResolverImpl.removeAllAuthzForVo(sess, vo);\n+    }\n+\n+    static List<Vo> getVosForGroupInRole(PerunSession sess, Group group, Role role) throws InternalErrorException {\n+        List<Vo> vos = new ArrayList<>();\n+        for (Integer voId : authzResolverImpl.getVoIdsForGroupInRole(sess, group, role)) {\n+            try {\n+                vos.add(getPerunBl().getVosManagerBl().getVoById(sess, voId));\n+            } catch (VoNotExistsException e) {\n+                log.error(\"vo \" + voId + \" not found\", e);\n+            }\n+        }\n+        return vos;\n+    }\n+\n+    static void removeAllUserAuthz(PerunSession sess, User user) throws InternalErrorException {\n+        //notify vosManager that the deleted user had SPONSOR role for some VOs\n+        List<Integer> sponsoredVoIds = authzResolverImpl.getVoIdsForUserInRole(sess, user, Role.SPONSOR);\n+        for (Integer voId : sponsoredVoIds) {\n+            VosManagerBl vosManagerBl = getPerunBl().getVosManagerBl();\n+            try {\n+                vosManagerBl.handleUserLostVoRole(sess, user, vosManagerBl.getVoById(sess, voId), Role.SPONSOR);\n+            } catch (VoNotExistsException e) {\n+                log.error(\"Vo {} has user {} in role SPONSOR, but does not exist\", voId, user.getId());\n+            }\n+        }\n+        //remove all roles from the user\n+        authzResolverImpl.removeAllUserAuthz(sess, user);\n+    }\n+\n+    static void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) throws InternalErrorException {\n+        authzResolverImpl.removeAllSponsoredUserAuthz(sess, sponsoredUser);\n+    }\n+\n+    public static void removeAllAuthzForGroup(PerunSession sess, Group group) throws InternalErrorException {\n+        //notify vosManager that the deleted group had SPONSOR role for some VOs\n+        for (Vo vo : getVosForGroupInRole(sess, group, Role.SPONSOR)) {\n+            getPerunBl().getVosManagerBl().handleGroupLostVoRole(sess, group, vo, Role.SPONSOR);\n+        }\n+        //remove all roles from the group\n+        authzResolverImpl.removeAllAuthzForGroup(sess, group);\n+    }\n+\n+    public static void removeAllAuthzForFacility(PerunSession sess, Facility facility) throws InternalErrorException {\n+        authzResolverImpl.removeAllAuthzForFacility(sess, facility);\n+    }\n+\n+    public static void removeAllAuthzForResource(PerunSession sess, Resource resource) throws InternalErrorException {\n+        authzResolverImpl.removeAllAuthzForResource(sess, resource);\n+    }\n+\n+    public static void removeAllAuthzForService(PerunSession sess, Service service) throws InternalErrorException {\n+        authzResolverImpl.removeAllAuthzForService(sess, service);\n+    }\n+\n+    public static void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) throws InternalErrorException {\n+        authzResolverImpl.removeAllAuthzForSecurityTeam(sess, securityTeam);\n+    }\n+\n+    public static void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, AlreadyAdminException {\n+        authzResolverImpl.addAdmin(sess, securityTeam, user);\n+    }\n+\n+    public static void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, AlreadyAdminException {\n+        authzResolverImpl.addAdmin(sess, securityTeam, group);\n+    }\n+\n+    public static void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws InternalErrorException, UserNotAdminException {\n+        authzResolverImpl.removeAdmin(sess, securityTeam, user);\n+    }\n+\n+    public static void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws InternalErrorException, GroupNotAdminException {\n+        authzResolverImpl.removeAdmin(sess, securityTeam, group);\n+    }\n+\n+    /**\n+     * Checks whether the user is in role for Vo.\n+     */\n+    static boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo) {\n+        return authzResolverImpl.isUserInRoleForVo(session, user, role, vo);\n+    }\n+\n+    /**\n+     * Checks whether the group is in role for Vo.\n+     */\n+    static boolean isGroupInRoleForVo(PerunSession session, Group group, Role role, Vo vo) {\n+        return authzResolverImpl.isGroupInRoleForVo(session, group, role, vo);\n+    }\n+\n+    // Filled by Spring\n+    public static AuthzResolverImplApi setAuthzResolverImpl(AuthzResolverImplApi authzResolverImpl) {\n+        AuthzResolverBlImpl.authzResolverImpl = authzResolverImpl;\n+        return authzResolverImpl;\n+    }\n+\n+    //Filled by Spring\n+    public static PerunBl setPerunBl(PerunBl perunBl) {\n+        AuthzResolverBlImpl.perunBl = perunBl;\n+        return perunBl;\n+    }\n+\n+    private static PerunBl getPerunBl() {\n+        return perunBl;\n+    }\n+\n+    /**\n+     * Prepare service roles to session AuthzRoles (perunadmin, service, rpc, engine etc.)\n+     *\n+     * @param sess use session to add roles\n+     */\n+    private static void prepareServiceRoles(PerunSession sess) throws InternalErrorException {\n+        // Load list of perunAdmins from the configuration, split the list by the comma\n+        List<String> perunAdmins = BeansUtils.getCoreConfig().getAdmins();\n+\n+        // Check if the PerunPrincipal is in a group of Perun Admins\n+        if (perunAdmins.contains(sess.getPerunPrincipal().getActor())) {\n+            sess.getPerunPrincipal().getRoles().putAuthzRole(Role.PERUNADMIN);\n+            sess.getPerunPrincipal().setAuthzInitialized(true);\n+            // We can quit, because perun admin has all privileges\n+            log.trace(\"AuthzResolver.init: Perun Admin {} loaded\", sess.getPerunPrincipal().getActor());\n+            return;\n+        }\n+\n+        String perunRpcAdmin = BeansUtils.getCoreConfig().getRpcPrincipal();\n+        if (sess.getPerunPrincipal().getActor().equals(perunRpcAdmin)) {\n+            sess.getPerunPrincipal().getRoles().putAuthzRole(Role.RPC);\n+            log.trace(\"AuthzResolver.init: Perun RPC {} loaded\", perunRpcAdmin);\n+        }\n+\n+        List<String> perunEngineAdmins = BeansUtils.getCoreConfig().getEnginePrincipals();\n+        if (perunEngineAdmins.contains(sess.getPerunPrincipal().getActor())) {\n+            sess.getPerunPrincipal().getRoles().putAuthzRole(Role.ENGINE);\n+            log.trace(\"AuthzResolver.init: Perun Engine {} loaded\", perunEngineAdmins);\n+        }\n+\n+        List<String> perunNotifications = BeansUtils.getCoreConfig().getNotificationPrincipals();\n+        if (perunNotifications.contains(sess.getPerunPrincipal().getActor())) {\n+            sess.getPerunPrincipal().getRoles().putAuthzRole(Role.NOTIFICATIONS);\n+\n+            log.trace(\"AuthzResolver.init: Perun Notifications {} loaded\", perunNotifications);\n+        }\n+\n+        List<String> perunRegistrars = BeansUtils.getCoreConfig().getRegistrarPrincipals();\n+        if (perunRegistrars.contains(sess.getPerunPrincipal().getActor())) {\n+            sess.getPerunPrincipal().getRoles().putAuthzRole(Role.REGISTRAR);\n+\n+            //FIXME ted pridame i roli plneho admina\n+            sess.getPerunPrincipal().getRoles().putAuthzRole(Role.PERUNADMIN);\n+\n+            log.trace(\"AuthzResolver.init: Perun Registrar {} loaded\", perunRegistrars);\n+        }\n+    }\n }\n",
            "diff_size": 1572
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/339/AuthzResolverBlImpl.java\nindex 4ce1749c570..13166ad1570 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/339/AuthzResolverBlImpl.java\n@@ -37,7 +37,7 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \t\tlog.trace(\"Initializing AuthzResolver for [{}]\", sess.getPerunPrincipal());\n \n \t\trefreshAuthz(sess);\n-\t\t\n+\n \t\tlog.debug(\"AuthzResolver: Complete PerunPrincipal: {}\", sess.getPerunPrincipal());\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/339/AuthzResolverBlImpl.java\nindex 4ce1749c570..dd10dac3eab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/339/AuthzResolverBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/339/AuthzResolverBlImpl.java\n@@ -36,9 +36,9 @@ public class AuthzResolverBlImpl implements AuthzResolverBl {\n \tprotected static void init(PerunSession sess) throws InternalErrorException {\n \t\tlog.trace(\"Initializing AuthzResolver for [{}]\", sess.getPerunPrincipal());\n \n-\t\trefreshAuthz(sess);\n-\t\t\n-\t\tlog.debug(\"AuthzResolver: Complete PerunPrincipal: {}\", sess.getPerunPrincipal());\n+\t\trefreshAuthz(sess)\n+\n+\t\t;log.debug(\"AuthzResolver: Complete PerunPrincipal: {}\", sess.getPerunPrincipal());\n \t}\n \n \t/**\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}