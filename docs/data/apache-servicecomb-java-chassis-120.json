{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "120",
    "information": {
        "errors": [
            {
                "line": "83",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  // RandomRule using getReachableServers & alive\n  // WeightedResponseTimeRule using getAllServers & alive\n  // To make all rules work only on \"how to choose a server from alive servers\", we do not rely on Robbin getReachableServers.\n  // We ensure getReachableServers & getAllServers work in the same way.\n  public List<Server> getAllServers() {\n    return serverList;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/120/LoadBalancer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/120/LoadBalancer.java\nindex 51bcc682b37..339546158c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/120/LoadBalancer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/120/LoadBalancer.java\n@@ -26,7 +26,7 @@ import com.netflix.loadbalancer.LoadBalancerStats;\n import com.netflix.loadbalancer.Server;\n \n /**\n- *  Robbin LoadBalancer implementation. Only support IRule and basic operations.\n+ * Robbin LoadBalancer implementation. Only support IRule and basic operations.\n  */\n public class LoadBalancer extends AbstractLoadBalancer {\n   private List<Server> serverList = Collections.emptyList();\n@@ -38,7 +38,7 @@ public class LoadBalancer extends AbstractLoadBalancer {\n   private String microServiceName;\n \n   public LoadBalancer(IRule rule, String microServiceName,\n-      LoadBalancerStats stats) {\n+                      LoadBalancerStats stats) {\n     this.microServiceName = microServiceName;\n     this.rule = rule;\n     this.rule.setLoadBalancer(this);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/120/LoadBalancer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/120/LoadBalancer.java\nindex 51bcc682b37..1827052b8f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/120/LoadBalancer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/120/LoadBalancer.java\n@@ -99,4 +99,4 @@ public class LoadBalancer extends AbstractLoadBalancer {\n   public String getMicroServiceName() {\n     return microServiceName;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/120/LoadBalancer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/120/LoadBalancer.java\nindex 51bcc682b37..67599b523ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/120/LoadBalancer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/120/LoadBalancer.java\n@@ -19,7 +19,6 @@ package org.apache.servicecomb.loadbalance;\n \n import java.util.Collections;\n import java.util.List;\n-\n import com.netflix.loadbalancer.AbstractLoadBalancer;\n import com.netflix.loadbalancer.IRule;\n import com.netflix.loadbalancer.LoadBalancerStats;\n@@ -28,6 +27,7 @@ import com.netflix.loadbalancer.Server;\n /**\n  *  Robbin LoadBalancer implementation. Only support IRule and basic operations.\n  */\n+\n public class LoadBalancer extends AbstractLoadBalancer {\n   private List<Server> serverList = Collections.emptyList();\n \n@@ -37,8 +37,7 @@ public class LoadBalancer extends AbstractLoadBalancer {\n \n   private String microServiceName;\n \n-  public LoadBalancer(IRule rule, String microServiceName,\n-      LoadBalancerStats stats) {\n+  public LoadBalancer(IRule rule, String microServiceName, LoadBalancerStats stats) {\n     this.microServiceName = microServiceName;\n     this.rule = rule;\n     this.rule.setLoadBalancer(this);\n@@ -99,4 +98,4 @@ public class LoadBalancer extends AbstractLoadBalancer {\n   public String getMicroServiceName() {\n     return microServiceName;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}