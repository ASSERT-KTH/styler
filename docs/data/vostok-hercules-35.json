{
    "project_name": "vostok-hercules",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "88",
                "column": "54",
                "severity": "warning",
                "message": "'{' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                }\n\n                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n                    String[] streams = ((DerivedStream) stream).getStreams();\n                    if (streams == null || streams.length == 0) {\n                        r.complete(HttpStatusCodes.BAD_REQUEST);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/35/CreateStreamHandler.java\nindex d182e9c4ebd..de4dcdf693d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/35/CreateStreamHandler.java\n@@ -85,7 +85,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) { // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         r.complete(HttpStatusCodes.BAD_REQUEST);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "88",
                    "column": "46",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/35/CreateStreamHandler.java\nindex d182e9c4ebd..b40308b9a37 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/35/CreateStreamHandler.java\n@@ -30,96 +30,96 @@ import java.util.concurrent.TimeUnit;\n  */\n public class CreateStreamHandler implements HttpHandler {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n-    private static final Validator<Stream> STREAM_VALIDATOR = StreamValidators.streamValidatorForHandler();\n-\n-    private final AuthProvider authProvider;\n-    private final TaskQueue<StreamTask> taskQueue;\n-    private final StreamRepository streamRepository;\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n+  private static final Validator<Stream> STREAM_VALIDATOR = StreamValidators.streamValidatorForHandler();\n+\n+  private final AuthProvider authProvider;\n+  private final TaskQueue<StreamTask> taskQueue;\n+  private final StreamRepository streamRepository;\n+\n+  private final ObjectReader deserializer;\n+\n+  public CreateStreamHandler(AuthProvider authProvider, TaskQueue<StreamTask> taskQueue, StreamRepository streamRepository) {\n+    this.authProvider = authProvider;\n+    this.taskQueue = taskQueue;\n+    this.streamRepository = streamRepository;\n+\n+    ObjectMapper objectMapper = new ObjectMapper();\n+    this.deserializer = objectMapper.readerFor(Stream.class);\n+  }\n+\n+  @Override\n+  public void handle(HttpServerRequest request) {\n+    Optional<Integer> optionalContentLength = request.getContentLength();\n+    if (!optionalContentLength.isPresent()) {\n+      request.complete(HttpStatusCodes.LENGTH_REQUIRED);\n+      return;\n+    }\n \n-    private final ObjectReader deserializer;\n+    request.readBodyAsync((r, bytes) -> {\n+      try {\n+        Stream stream = deserializer.readValue(bytes);\n \n-    public CreateStreamHandler(AuthProvider authProvider, TaskQueue<StreamTask> taskQueue, StreamRepository streamRepository) {\n-        this.authProvider = authProvider;\n-        this.taskQueue = taskQueue;\n-        this.streamRepository = streamRepository;\n+        if (stream.getShardingKey() == null) {\n+          stream.setShardingKey(new String[0]);\n+        }\n \n-        ObjectMapper objectMapper = new ObjectMapper();\n-        this.deserializer = objectMapper.readerFor(Stream.class);\n-    }\n+        ValidationResult validationResult = STREAM_VALIDATOR.validate(stream);\n+        if (validationResult.isError()) {\n+          r.complete(HttpStatusCodes.BAD_REQUEST);\n+          return;\n+        }\n \n-    @Override\n-    public void handle(HttpServerRequest request) {\n-        Optional<Integer> optionalContentLength = request.getContentLength();\n-        if (!optionalContentLength.isPresent()) {\n-            request.complete(HttpStatusCodes.LENGTH_REQUIRED);\n+        AuthResult authResult = authProvider.authManage(r, stream.getName());\n+        if (!authResult.isSuccess()) {\n+          if (authResult.isUnknown()) {\n+            r.complete(HttpStatusCodes.UNAUTHORIZED);\n             return;\n+          }\n+          r.complete(HttpStatusCodes.FORBIDDEN);\n+          return;\n         }\n \n-        request.readBodyAsync((r, bytes) -> {\n-            try {\n-                Stream stream = deserializer.readValue(bytes);\n-\n-                if (stream.getShardingKey() == null) {\n-                    stream.setShardingKey(new String[0]);\n-                }\n-\n-                ValidationResult validationResult = STREAM_VALIDATOR.validate(stream);\n-                if (validationResult.isError()) {\n-                    r.complete(HttpStatusCodes.BAD_REQUEST);\n-                    return;\n-                }\n-\n-                AuthResult authResult = authProvider.authManage(r, stream.getName());\n-                if (!authResult.isSuccess()) {\n-                    if (authResult.isUnknown()) {\n-                        r.complete(HttpStatusCodes.UNAUTHORIZED);\n-                        return;\n-                    }\n-                    r.complete(HttpStatusCodes.FORBIDDEN);\n-                    return;\n-                }\n-\n-                if (streamRepository.exists(stream.getName())) {\n-                    r.complete(HttpStatusCodes.CONFLICT);\n-                    return;\n-                }\n-\n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n-                    String[] streams = ((DerivedStream) stream).getStreams();\n-                    if (streams == null || streams.length == 0) {\n-                        r.complete(HttpStatusCodes.BAD_REQUEST);\n-                        return;\n-                    }\n-                    for (String sourceStream : streams) {\n-                        authResult = authProvider.authRead(r, sourceStream);\n-                        if (!authResult.isSuccess()) {\n-                            r.complete(HttpStatusCodes.FORBIDDEN);\n-                            return;\n-                        }\n-                    }\n-                }\n-\n-                TaskFuture taskFuture =\n-                        taskQueue.submit(\n-                                new StreamTask(stream, StreamTaskType.CREATE),\n-                                stream.getName(),\n-                                10_000L,//TODO: Move to properties\n-                                TimeUnit.MILLISECONDS);\n-                HttpAsyncApiHelper.awaitAndComplete(taskFuture, r);\n-            } catch (IOException ex) {\n-                LOGGER.warn(\"Error on processing request\", ex);\n-                r.complete(HttpStatusCodes.BAD_REQUEST);\n-                return;\n-            } catch (Exception ex) {\n-                LOGGER.error(\"Error on processing request\", ex);\n-                r.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n-                return;\n-            }\n-        }, (r, exception) -> {\n-            LOGGER.error(\"Error on processing request\", exception);\n+        if (streamRepository.exists(stream.getName())) {\n+          r.complete(HttpStatusCodes.CONFLICT);\n+          return;\n+        }\n+\n+        if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+          String[] streams = ((DerivedStream) stream).getStreams();\n+          if (streams == null || streams.length == 0) {\n             r.complete(HttpStatusCodes.BAD_REQUEST);\n             return;\n-        });\n-    }\n+          }\n+          for (String sourceStream : streams) {\n+            authResult = authProvider.authRead(r, sourceStream);\n+            if (!authResult.isSuccess()) {\n+              r.complete(HttpStatusCodes.FORBIDDEN);\n+              return;\n+            }\n+          }\n+        }\n+\n+        TaskFuture taskFuture =\n+          taskQueue.submit(\n+            new StreamTask(stream, StreamTaskType.CREATE),\n+            stream.getName(),\n+            10_000L,//TODO: Move to properties\n+            TimeUnit.MILLISECONDS);\n+        HttpAsyncApiHelper.awaitAndComplete(taskFuture, r);\n+      } catch (IOException ex) {\n+        LOGGER.warn(\"Error on processing request\", ex);\n+        r.complete(HttpStatusCodes.BAD_REQUEST);\n+        return;\n+      } catch (Exception ex) {\n+        LOGGER.error(\"Error on processing request\", ex);\n+        r.complete(HttpStatusCodes.INTERNAL_SERVER_ERROR);\n+        return;\n+      }\n+    }, (r, exception) -> {\n+      LOGGER.error(\"Error on processing request\", exception);\n+      r.complete(HttpStatusCodes.BAD_REQUEST);\n+      return;\n+    });\n+  }\n }\n",
            "diff_size": 139
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/35/CreateStreamHandler.java\nindex d182e9c4ebd..1adab896ab0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/35/CreateStreamHandler.java\n@@ -85,7 +85,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) { // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         r.complete(HttpStatusCodes.BAD_REQUEST);\n@@ -104,7 +104,8 @@ public class CreateStreamHandler implements HttpHandler {\n                         taskQueue.submit(\n                                 new StreamTask(stream, StreamTaskType.CREATE),\n                                 stream.getName(),\n-                                10_000L,//TODO: Move to properties\n+                                10_000L,\n+//TODO: Move to properties\n                                 TimeUnit.MILLISECONDS);\n                 HttpAsyncApiHelper.awaitAndComplete(taskFuture, r);\n             } catch (IOException ex) {\n@@ -122,4 +123,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "85",
                    "column": "54",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/35/CreateStreamHandler.java\nindex d182e9c4ebd..8a6f3966de1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/35/CreateStreamHandler.java\n@@ -20,7 +20,6 @@ import ru.kontur.vostok.hercules.meta.task.stream.StreamTask;\n import ru.kontur.vostok.hercules.meta.task.stream.StreamTaskType;\n import ru.kontur.vostok.hercules.util.validation.ValidationResult;\n import ru.kontur.vostok.hercules.util.validation.Validator;\n-\n import java.io.IOException;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n@@ -28,15 +27,15 @@ import java.util.concurrent.TimeUnit;\n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class CreateStreamHandler implements HttpHandler {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CreateStreamHandler.class);\n     private static final Validator<Stream> STREAM_VALIDATOR = StreamValidators.streamValidatorForHandler();\n-\n     private final AuthProvider authProvider;\n     private final TaskQueue<StreamTask> taskQueue;\n     private final StreamRepository streamRepository;\n-\n     private final ObjectReader deserializer;\n \n     public CreateStreamHandler(AuthProvider authProvider, TaskQueue<StreamTask> taskQueue, StreamRepository streamRepository) {\n@@ -59,7 +58,6 @@ public class CreateStreamHandler implements HttpHandler {\n         request.readBodyAsync((r, bytes) -> {\n             try {\n                 Stream stream = deserializer.readValue(bytes);\n-\n                 if (stream.getShardingKey() == null) {\n                     stream.setShardingKey(new String[0]);\n                 }\n@@ -76,21 +74,21 @@ public class CreateStreamHandler implements HttpHandler {\n                         r.complete(HttpStatusCodes.UNAUTHORIZED);\n                         return;\n                     }\n+\n                     r.complete(HttpStatusCodes.FORBIDDEN);\n                     return;\n                 }\n-\n                 if (streamRepository.exists(stream.getName())) {\n                     r.complete(HttpStatusCodes.CONFLICT);\n                     return;\n                 }\n-\n                 if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         r.complete(HttpStatusCodes.BAD_REQUEST);\n                         return;\n                     }\n+\n                     for (String sourceStream : streams) {\n                         authResult = authProvider.authRead(r, sourceStream);\n                         if (!authResult.isSuccess()) {\n@@ -100,12 +98,12 @@ public class CreateStreamHandler implements HttpHandler {\n                     }\n                 }\n \n-                TaskFuture taskFuture =\n-                        taskQueue.submit(\n-                                new StreamTask(stream, StreamTaskType.CREATE),\n-                                stream.getName(),\n-                                10_000L,//TODO: Move to properties\n-                                TimeUnit.MILLISECONDS);\n+                TaskFuture taskFuture = taskQueue.submit(\n+                    new StreamTask(stream, StreamTaskType.CREATE),\n+                    stream.getName(),\n+                    10_000L,//TODO: Move to properties\n+                    TimeUnit.MILLISECONDS\n+        );\n                 HttpAsyncApiHelper.awaitAndComplete(taskFuture, r);\n             } catch (IOException ex) {\n                 LOGGER.warn(\"Error on processing request\", ex);\n@@ -122,4 +120,4 @@ public class CreateStreamHandler implements HttpHandler {\n             return;\n         });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/35/CreateStreamHandler.java\nindex d182e9c4ebd..de4dcdf693d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/35/CreateStreamHandler.java\n@@ -85,7 +85,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) { // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         r.complete(HttpStatusCodes.BAD_REQUEST);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/35/CreateStreamHandler.java\nindex d182e9c4ebd..3f77c4d0001 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/35/CreateStreamHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/35/CreateStreamHandler.java\n@@ -85,7 +85,7 @@ public class CreateStreamHandler implements HttpHandler {\n                     return;\n                 }\n \n-                if (stream instanceof DerivedStream) {// Auth source streams for DerivedStream\n+                if (stream instanceof DerivedStream) {  // Auth source streams for DerivedStream\n                     String[] streams = ((DerivedStream) stream).getStreams();\n                     if (streams == null || streams.length == 0) {\n                         r.complete(HttpStatusCodes.BAD_REQUEST);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}