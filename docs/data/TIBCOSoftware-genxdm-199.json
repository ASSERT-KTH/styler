{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "199",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "final class ParticleElementExpression implements ValidationExpr\n{\n\tprivate final boolean isMaxOccursUnbounded;\n\tprivate final ElementDefinition m_element;\n\tprivate final int m_maxOccurs;\n\tprivate final int m_minOccurs;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/199/ParticleElementExpression.java\nindex 8772ab6fcdf..8aadc164723 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/199/ParticleElementExpression.java\n@@ -25,7 +25,7 @@ import org.genxdm.xs.components.ParticleTerm;\n \n final class ParticleElementExpression implements ValidationExpr\n {\n-\tprivate final boolean isMaxOccursUnbounded;\n+private final boolean isMaxOccursUnbounded;\n \tprivate final ElementDefinition m_element;\n \tprivate final int m_maxOccurs;\n \tprivate final int m_minOccurs;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/199/ParticleElementExpression.java\nindex 8772ab6fcdf..6776b284ccd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/199/ParticleElementExpression.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.Collections;\n@@ -23,111 +24,91 @@ import org.genxdm.exceptions.PreCondition;\n import org.genxdm.xs.components.ElementDefinition;\n import org.genxdm.xs.components.ParticleTerm;\n \n-final class ParticleElementExpression implements ValidationExpr\n-{\n-\tprivate final boolean isMaxOccursUnbounded;\n-\tprivate final ElementDefinition m_element;\n-\tprivate final int m_maxOccurs;\n-\tprivate final int m_minOccurs;\n-\n-\tpublic ParticleElementExpression(final int minOccurs, final int maxOccurs, final ElementDefinition element)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = maxOccurs;\n-\t\tthis.isMaxOccursUnbounded = false;\n-\t\tthis.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n-\t}\n-\n-\tpublic ParticleElementExpression(final int minOccurs, final ElementDefinition element)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = -1;\n-\t\tthis.isMaxOccursUnbounded = true;\n-\t\tthis.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n-\t}\n-\n-\tpublic ElementDefinition getParticleTerm()\n-\t{\n-\t\treturn m_element;\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\treturn Collections.emptyList();\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\tif (other.isGroup())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfinal ParticleTerm term = other.getParticleTerm();\n-\t\t\tif (term instanceof ElementDefinition)\n-\t\t\t{\n-\t\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n-\t\t\t\treturn matches(element.getName());\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// It must be a wildcard.\n-\t\t\t\treturn other.intersects(this);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn isMaxOccursUnbounded;\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean matches(final QName name)\n-\t{\n-\t\tif (null != name)\n-\t\t{\n-\t\t\treturn m_element.getName().equals(name);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn m_maxOccurs;\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn m_minOccurs;\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\treturn \"element \" + m_element.getName();\n-\t}\n+final class ParticleElementExpression implements ValidationExpr {\n+    private final boolean isMaxOccursUnbounded;\n+\n+    private final ElementDefinition m_element;\n+\n+    private final int m_maxOccurs;\n+\n+    private final int m_minOccurs;\n+\n+    public ParticleElementExpression(final int minOccurs, final int maxOccurs,\n+                                     final ElementDefinition element) {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = maxOccurs;\n+        this.isMaxOccursUnbounded = false;\n+        this.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n+    }\n+\n+    public ParticleElementExpression(final int minOccurs, final ElementDefinition element) {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = -1;\n+        this.isMaxOccursUnbounded = true;\n+        this.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n+    }\n+\n+    public ElementDefinition getParticleTerm() {\n+        return m_element;\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms() {\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean intersects(final ValidationExpr other) {\n+        if (other.isGroup()) {\n+            return false;\n+        } else {\n+            final ParticleTerm term = other.getParticleTerm();\n+            if (term instanceof ElementDefinition) {\n+                final ElementDefinition element = (ElementDefinition) term;\n+                return matches(element.getName());\n+            } else {\n+                // It must be a wildcard.\n+                return other.intersects(this);\n+            }\n+        }\n+    }\n+\n+    public boolean isChoice() {\n+        return false;\n+    }\n+\n+    public boolean isGroup() {\n+        return false;\n+    }\n+\n+    public boolean isInterleave() {\n+        return false;\n+    }\n+\n+    public boolean isMaxOccursUnbounded() {\n+        return isMaxOccursUnbounded;\n+    }\n+\n+    public boolean isSequence() {\n+        return false;\n+    }\n+\n+    public boolean matches(final QName name) {\n+        if (null != name) {\n+            return m_element.getName().equals(name);\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    public int maxOccurs() {\n+        return m_maxOccurs;\n+    }\n+\n+    public int minOccurs() {\n+        return m_minOccurs;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"element \" + m_element.getName();\n+    }\n }\n",
            "diff_size": 112
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/199/ParticleElementExpression.java\nindex 8772ab6fcdf..baeed0acf91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/199/ParticleElementExpression.java\n@@ -25,109 +25,109 @@ import org.genxdm.xs.components.ParticleTerm;\n \n final class ParticleElementExpression implements ValidationExpr\n {\n-\tprivate final boolean isMaxOccursUnbounded;\n+    private final boolean isMaxOccursUnbounded;\n \tprivate final ElementDefinition m_element;\n \tprivate final int m_maxOccurs;\n \tprivate final int m_minOccurs;\n \n \tpublic ParticleElementExpression(final int minOccurs, final int maxOccurs, final ElementDefinition element)\n \t{\n-\t\tthis.m_minOccurs = minOccurs;\n+    this.m_minOccurs = minOccurs;\n \t\tthis.m_maxOccurs = maxOccurs;\n \t\tthis.isMaxOccursUnbounded = false;\n \t\tthis.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n-\t}\n+    }\n \n \tpublic ParticleElementExpression(final int minOccurs, final ElementDefinition element)\n \t{\n-\t\tthis.m_minOccurs = minOccurs;\n+    this.m_minOccurs = minOccurs;\n \t\tthis.m_maxOccurs = -1;\n \t\tthis.isMaxOccursUnbounded = true;\n \t\tthis.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n-\t}\n+    }\n \n \tpublic ElementDefinition getParticleTerm()\n \t{\n-\t\treturn m_element;\n-\t}\n+    return m_element;\n+    }\n \n \tpublic Iterable<ValidationExpr> getSubTerms()\n \t{\n-\t\treturn Collections.emptyList();\n-\t}\n+    return Collections.emptyList();\n+    }\n \n \tpublic boolean intersects(final ValidationExpr other)\n \t{\n-\t\tif (other.isGroup())\n+    if (other.isGroup())\n \t\t{\n-\t\t\treturn false;\n-\t\t}\n+    return false;\n+    }\n \t\telse\n \t\t{\n-\t\t\tfinal ParticleTerm term = other.getParticleTerm();\n+    final ParticleTerm term = other.getParticleTerm();\n \t\t\tif (term instanceof ElementDefinition)\n \t\t\t{\n-\t\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n+    final ElementDefinition element = (ElementDefinition)term;\n \t\t\t\treturn matches(element.getName());\n-\t\t\t}\n+    }\n \t\t\telse\n \t\t\t{\n-\t\t\t\t// It must be a wildcard.\n+    // It must be a wildcard.\n \t\t\t\treturn other.intersects(this);\n-\t\t\t}\n-\t\t}\n-\t}\n+    }\n+    }\n+    }\n \n \tpublic boolean isChoice()\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean isGroup()\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean isInterleave()\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean isMaxOccursUnbounded()\n \t{\n-\t\treturn isMaxOccursUnbounded;\n-\t}\n+    return isMaxOccursUnbounded;\n+    }\n \n \tpublic boolean isSequence()\n \t{\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \tpublic boolean matches(final QName name)\n \t{\n-\t\tif (null != name)\n+    if (null != name)\n \t\t{\n-\t\t\treturn m_element.getName().equals(name);\n-\t\t}\n+    return m_element.getName().equals(name);\n+    }\n \t\telse\n \t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n+    return false;\n+    }\n+    }\n \n \tpublic int maxOccurs()\n \t{\n-\t\treturn m_maxOccurs;\n-\t}\n+    return m_maxOccurs;\n+    }\n \n \tpublic int minOccurs()\n \t{\n-\t\treturn m_minOccurs;\n-\t}\n+    return m_minOccurs;\n+    }\n \n \t@Override\n \tpublic String toString()\n \t{\n-\t\treturn \"element \" + m_element.getName();\n-\t}\n-}\n+    return \"element \" + m_element.getName();\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/199/ParticleElementExpression.java\nindex 8772ab6fcdf..a19a71e54cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/199/ParticleElementExpression.java\n@@ -16,118 +16,116 @@\n package org.genxdm.processor.w3c.xs.validation.impl;\n \n import java.util.Collections;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.xs.components.ElementDefinition;\n import org.genxdm.xs.components.ParticleTerm;\n \n final class ParticleElementExpression implements ValidationExpr\n {\n-\tprivate final boolean isMaxOccursUnbounded;\n-\tprivate final ElementDefinition m_element;\n-\tprivate final int m_maxOccurs;\n-\tprivate final int m_minOccurs;\n-\n-\tpublic ParticleElementExpression(final int minOccurs, final int maxOccurs, final ElementDefinition element)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = maxOccurs;\n-\t\tthis.isMaxOccursUnbounded = false;\n-\t\tthis.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n-\t}\n-\n-\tpublic ParticleElementExpression(final int minOccurs, final ElementDefinition element)\n-\t{\n-\t\tthis.m_minOccurs = minOccurs;\n-\t\tthis.m_maxOccurs = -1;\n-\t\tthis.isMaxOccursUnbounded = true;\n-\t\tthis.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n-\t}\n-\n-\tpublic ElementDefinition getParticleTerm()\n-\t{\n-\t\treturn m_element;\n-\t}\n-\n-\tpublic Iterable<ValidationExpr> getSubTerms()\n-\t{\n-\t\treturn Collections.emptyList();\n-\t}\n-\n-\tpublic boolean intersects(final ValidationExpr other)\n-\t{\n-\t\tif (other.isGroup())\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tfinal ParticleTerm term = other.getParticleTerm();\n-\t\t\tif (term instanceof ElementDefinition)\n-\t\t\t{\n-\t\t\t\tfinal ElementDefinition element = (ElementDefinition)term;\n-\t\t\t\treturn matches(element.getName());\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// It must be a wildcard.\n-\t\t\t\treturn other.intersects(this);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean isChoice()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isGroup()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isInterleave()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isMaxOccursUnbounded()\n-\t{\n-\t\treturn isMaxOccursUnbounded;\n-\t}\n-\n-\tpublic boolean isSequence()\n-\t{\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean matches(final QName name)\n-\t{\n-\t\tif (null != name)\n-\t\t{\n-\t\t\treturn m_element.getName().equals(name);\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tpublic int maxOccurs()\n-\t{\n-\t\treturn m_maxOccurs;\n-\t}\n-\n-\tpublic int minOccurs()\n-\t{\n-\t\treturn m_minOccurs;\n-\t}\n-\n-\t@Override\n-\tpublic String toString()\n-\t{\n-\t\treturn \"element \" + m_element.getName();\n-\t}\n-}\n+    private final boolean isMaxOccursUnbounded;\n+    private final ElementDefinition m_element;\n+    private final int m_maxOccurs;\n+    private final int m_minOccurs;\n+\n+    public ParticleElementExpression(final int minOccurs, final int maxOccurs, final ElementDefinition element)\n+    {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = maxOccurs;\n+        this.isMaxOccursUnbounded = false;\n+        this.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n+    }\n+\n+    public ParticleElementExpression(final int minOccurs, final ElementDefinition element)\n+    {\n+        this.m_minOccurs = minOccurs;\n+        this.m_maxOccurs = -1;\n+        this.isMaxOccursUnbounded = true;\n+        this.m_element = PreCondition.assertArgumentNotNull(element, \"element\");\n+    }\n+\n+    public ElementDefinition getParticleTerm()\n+    {\n+        return m_element;\n+    }\n+\n+    public Iterable<ValidationExpr> getSubTerms()\n+    {\n+        return Collections.emptyList();\n+    }\n+\n+    public boolean intersects(final ValidationExpr other)\n+    {\n+        if (other.isGroup())\n+        {\n+            return false;\n+        }\n+        else\n+        {\n+            final ParticleTerm term = other.getParticleTerm();\n+            if (term instanceof ElementDefinition)\n+            {\n+                final ElementDefinition element = (ElementDefinition)term;\n+                return matches(element.getName());\n+            }\n+            else\n+            {\n+                // It must be a wildcard.\n+                return other.intersects(this);\n+            }\n+        }\n+    }\n+\n+    public boolean isChoice()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isGroup()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isInterleave()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isMaxOccursUnbounded()\n+    {\n+        return isMaxOccursUnbounded;\n+    }\n+\n+    public boolean isSequence()\n+    {\n+        return false;\n+    }\n+\n+    public boolean matches(final QName name)\n+    {\n+        if (null != name)\n+        {\n+            return m_element.getName().equals(name);\n+        }\n+        else\n+        {\n+            return false;\n+        }\n+    }\n+\n+    public int maxOccurs()\n+    {\n+        return m_maxOccurs;\n+    }\n+\n+    public int minOccurs()\n+    {\n+        return m_minOccurs;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+        return \"element \" + m_element.getName();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 108
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/199/ParticleElementExpression.java\nindex 8772ab6fcdf..8aadc164723 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/199/ParticleElementExpression.java\n@@ -25,7 +25,7 @@ import org.genxdm.xs.components.ParticleTerm;\n \n final class ParticleElementExpression implements ValidationExpr\n {\n-\tprivate final boolean isMaxOccursUnbounded;\n+private final boolean isMaxOccursUnbounded;\n \tprivate final ElementDefinition m_element;\n \tprivate final int m_maxOccurs;\n \tprivate final int m_minOccurs;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/199/ParticleElementExpression.java\nindex 8772ab6fcdf..2655dbaa8e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/199/ParticleElementExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/199/ParticleElementExpression.java\n@@ -25,7 +25,7 @@ import org.genxdm.xs.components.ParticleTerm;\n \n final class ParticleElementExpression implements ValidationExpr\n {\n-\tprivate final boolean isMaxOccursUnbounded;\n+    private final boolean isMaxOccursUnbounded;\n \tprivate final ElementDefinition m_element;\n \tprivate final int m_maxOccurs;\n \tprivate final int m_minOccurs;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}