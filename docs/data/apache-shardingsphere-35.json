{
    "project_name": "apache-shardingsphere",
    "error_id": "35",
    "information": {
        "errors": [
            {
                "line": "105",
                "column": "5",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n    /**\n     * Check authentication.\n     * @param user user\n     * @param validate validate",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/35/SQLCheckEngine.java\nindex 1452462af09..476fce1f13b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/35/SQLCheckEngine.java\n@@ -101,7 +101,6 @@ public final class SQLCheckEngine {\n         return true;\n     }\n \n-\n     /**\n      * Check authentication.\n      * @param user user\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "106",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/35/SQLCheckEngine.java\nindex 1452462af09..d393310af99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/35/SQLCheckEngine.java\n@@ -37,17 +37,17 @@ import java.util.function.BiPredicate;\n  */\n @NoArgsConstructor(access = AccessLevel.PRIVATE)\n public final class SQLCheckEngine {\n-    \n+\n     static {\n         ShardingSphereServiceLoader.register(SQLChecker.class);\n     }\n-    \n+\n     /**\n      * Check schema.\n      *\n      * @param schemaName schema name\n-     * @param rules rules\n-     * @param grantee grantee\n+     * @param rules      rules\n+     * @param grantee    grantee\n      * @return check result\n      */\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n@@ -60,19 +60,19 @@ public final class SQLCheckEngine {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * Check SQL.\n-     * \n-     * @param sqlStatement SQL statement\n-     * @param parameters SQL parameters\n-     * @param rules rules\n+     *\n+     * @param sqlStatement  SQL statement\n+     * @param parameters    SQL parameters\n+     * @param rules         rules\n      * @param currentSchema current schema\n-     * @param metaDataMap meta data map\n-     * @param grantee grantee\n+     * @param metaDataMap   meta data map\n+     * @param grantee       grantee\n      */\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, \n+    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules,\n                              final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n         for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n             SQLCheckResult checkResult = entry.getValue().check(sqlStatement, parameters, grantee, currentSchema, metaDataMap, entry.getKey());\n@@ -84,7 +84,8 @@ public final class SQLCheckEngine {\n \n     /**\n      * Check user exists.\n-     * @param user user\n+     *\n+     * @param user  user\n      * @param rules rules\n      * @return check result\n      */\n@@ -104,10 +105,11 @@ public final class SQLCheckEngine {\n \n     /**\n      * Check authentication.\n-     * @param user user\n+     *\n+     * @param user     user\n      * @param validate validate\n-     * @param cipher cipher\n-     * @param rules rules\n+     * @param cipher   cipher\n+     * @param rules    rules\n      * @return check result\n      */\n     public static boolean check(final Grantee user, final BiPredicate<Object, Object> validate, final Object cipher, final Collection<ShardingSphereRule> rules) {\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/35/SQLCheckEngine.java\nindex 1452462af09..4632e4a72ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/35/SQLCheckEngine.java\n@@ -74,7 +74,7 @@ public final class SQLCheckEngine {\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n     public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, \n                              final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n-        for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n+    for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n             SQLCheckResult checkResult = entry.getValue().check(sqlStatement, parameters, grantee, currentSchema, metaDataMap, entry.getKey());\n             if (!checkResult.isPassed()) {\n                 throw new SQLCheckException(checkResult.getErrorMessage());\n@@ -101,8 +101,7 @@ public final class SQLCheckEngine {\n         return true;\n     }\n \n-\n-    /**\n+/**\n      * Check authentication.\n      * @param user user\n      * @param validate validate\n@@ -122,4 +121,4 @@ public final class SQLCheckEngine {\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 244).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "109",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/35/SQLCheckEngine.java\nindex 1452462af09..cd84828b084 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/35/SQLCheckEngine.java\n@@ -25,7 +25,6 @@ import org.apache.shardingsphere.infra.rule.ShardingSphereRule;\n import org.apache.shardingsphere.infra.spi.ShardingSphereServiceLoader;\n import org.apache.shardingsphere.infra.spi.ordered.OrderedSPIRegistry;\n import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;\n-\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n@@ -35,9 +34,11 @@ import java.util.function.BiPredicate;\n /**\n  * SQL check engine.\n  */\n+\n+\n @NoArgsConstructor(access = AccessLevel.PRIVATE)\n public final class SQLCheckEngine {\n-    \n+\n     static {\n         ShardingSphereServiceLoader.register(SQLChecker.class);\n     }\n@@ -50,6 +51,7 @@ public final class SQLCheckEngine {\n      * @param grantee grantee\n      * @return check result\n      */\n+\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n     public static boolean check(final String schemaName, final Collection<ShardingSphereRule> rules, final Grantee grantee) {\n         for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n@@ -71,9 +73,9 @@ public final class SQLCheckEngine {\n      * @param metaDataMap meta data map\n      * @param grantee grantee\n      */\n+\n     @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n-    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, \n-                             final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n+    public static void check(final SQLStatement sqlStatement, final List<Object> parameters, final Collection<ShardingSphereRule> rules, final String currentSchema, final Map<String, ShardingSphereMetaData> metaDataMap, final Grantee grantee) {\n         for (Entry<ShardingSphereRule, SQLChecker> entry : OrderedSPIRegistry.getRegisteredServices(rules, SQLChecker.class).entrySet()) {\n             SQLCheckResult checkResult = entry.getValue().check(sqlStatement, parameters, grantee, currentSchema, metaDataMap, entry.getKey());\n             if (!checkResult.isPassed()) {\n@@ -88,6 +90,8 @@ public final class SQLCheckEngine {\n      * @param rules rules\n      * @return check result\n      */\n+\n+\n     public static boolean check(final Grantee user, final Collection<ShardingSphereRule> rules) {\n         if (rules.isEmpty()) {\n             return false;\n@@ -110,6 +114,8 @@ public final class SQLCheckEngine {\n      * @param rules rules\n      * @return check result\n      */\n+\n+\n     public static boolean check(final Grantee user, final BiPredicate<Object, Object> validate, final Object cipher, final Collection<ShardingSphereRule> rules) {\n         if (rules.isEmpty()) {\n             return false;\n@@ -122,4 +128,4 @@ public final class SQLCheckEngine {\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/35/SQLCheckEngine.java\nindex 1452462af09..476fce1f13b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/35/SQLCheckEngine.java\n@@ -101,7 +101,6 @@ public final class SQLCheckEngine {\n         return true;\n     }\n \n-\n     /**\n      * Check authentication.\n      * @param user user\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/35/SQLCheckEngine.java\nindex 1452462af09..476fce1f13b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/35/SQLCheckEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/35/SQLCheckEngine.java\n@@ -101,7 +101,6 @@ public final class SQLCheckEngine {\n         return true;\n     }\n \n-\n     /**\n      * Check authentication.\n      * @param user user\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}