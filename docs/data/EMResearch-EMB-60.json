{
    "project_name": "EMResearch-EMB",
    "error_id": "60",
    "information": {
        "errors": [
            {
                "line": "50",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 152).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Override\n  public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {\n    Component component = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);\n\n    if (value instanceof CategoryNode) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/60/CheckBoxTreeCellRenderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/60/CheckBoxTreeCellRenderer.java\nindex 5261f8a9879..9189e973caf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/60/CheckBoxTreeCellRenderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/60/CheckBoxTreeCellRenderer.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2005 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.gui;\n \n import java.awt.BorderLayout;\n@@ -27,51 +28,52 @@ import javax.swing.tree.DefaultTreeCellRenderer;\n import javax.swing.tree.TreeCellRenderer;\n \n /**\n- *\n  * @author Panagiotis Minos\n  * @since 2.6\n  */\n class CheckBoxTreeCellRenderer extends JPanel implements TreeCellRenderer {\n \n-  private final DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();\n-  private final JCheckBox checkBox = new JCheckBox();\n-  \n-  private Component defaultComponent;\n-\n-  CheckBoxTreeCellRenderer() {\n-    setLayout(new BorderLayout());\n-    setOpaque(false);\n-    checkBox.setOpaque(false);\n-    renderer.setLeafIcon(null);\n-    add(checkBox, BorderLayout.WEST);\n-  }\n+    private final DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();\n+    private final JCheckBox checkBox = new JCheckBox();\n \n-  @Override\n-  public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {\n-    Component component = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);\n+    private Component defaultComponent;\n \n-    if (value instanceof CategoryNode) {\n-      if (defaultComponent != null) {\n-        remove(defaultComponent);\n-      }\n-      defaultComponent = component;\n-      add(component, BorderLayout.CENTER);\n-      CategoryNode node = (CategoryNode) value;\n-      checkBox.setSelected(node.isEnabled());\n-      return this;\n+    CheckBoxTreeCellRenderer() {\n+        setLayout(new BorderLayout());\n+        setOpaque(false);\n+        checkBox.setOpaque(false);\n+        renderer.setLeafIcon(null);\n+        add(checkBox, BorderLayout.WEST);\n     }\n \n-    if (value instanceof RuleNode) {\n-      if (defaultComponent != null) {\n-        remove(defaultComponent);\n-      }\n-      defaultComponent = component;\n-      add(component, BorderLayout.CENTER);\n-      RuleNode node = (RuleNode) value;\n-      checkBox.setSelected(node.isEnabled());\n-      return this;\n-    }\n+    @Override\n+    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded,\n+                                                  boolean leaf, int row, boolean hasFocus) {\n+        Component component =\n+            renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);\n+\n+        if (value instanceof CategoryNode) {\n+            if (defaultComponent != null) {\n+                remove(defaultComponent);\n+            }\n+            defaultComponent = component;\n+            add(component, BorderLayout.CENTER);\n+            CategoryNode node = (CategoryNode) value;\n+            checkBox.setSelected(node.isEnabled());\n+            return this;\n+        }\n \n-    return component;\n-  }\n+        if (value instanceof RuleNode) {\n+            if (defaultComponent != null) {\n+                remove(defaultComponent);\n+            }\n+            defaultComponent = component;\n+            add(component, BorderLayout.CENTER);\n+            RuleNode node = (RuleNode) value;\n+            checkBox.setSelected(node.isEnabled());\n+            return this;\n+        }\n+\n+        return component;\n+    }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/60/CheckBoxTreeCellRenderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/60/CheckBoxTreeCellRenderer.java\nindex 5261f8a9879..99505b38438 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/60/CheckBoxTreeCellRenderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/60/CheckBoxTreeCellRenderer.java\n@@ -74,4 +74,4 @@ class CheckBoxTreeCellRenderer extends JPanel implements TreeCellRenderer {\n \n     return component;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/60/CheckBoxTreeCellRenderer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/60/CheckBoxTreeCellRenderer.java\nindex 5261f8a9879..c32db1ef41d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/60/CheckBoxTreeCellRenderer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/60/CheckBoxTreeCellRenderer.java\n@@ -31,47 +31,52 @@ import javax.swing.tree.TreeCellRenderer;\n  * @author Panagiotis Minos\n  * @since 2.6\n  */\n+\n+\n class CheckBoxTreeCellRenderer extends JPanel implements TreeCellRenderer {\n \n-  private final DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();\n-  private final JCheckBox checkBox = new JCheckBox();\n-  \n-  private Component defaultComponent;\n+    private final DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();\n+    private final JCheckBox checkBox = new JCheckBox();\n+    private Component defaultComponent;\n \n-  CheckBoxTreeCellRenderer() {\n+    CheckBoxTreeCellRenderer() {\n     setLayout(new BorderLayout());\n     setOpaque(false);\n     checkBox.setOpaque(false);\n     renderer.setLeafIcon(null);\n     add(checkBox, BorderLayout.WEST);\n-  }\n+    }\n \n-  @Override\n-  public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {\n-    Component component = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);\n+    @Override\n+    public Component getTreeCellRendererComponent(JTree tree,\n+                                                  Object value,\n+                                                  boolean selected,\n+                                                  boolean expanded,\n+                                                  boolean leaf,\n+                                                  int row, boolean hasFocus) {\n+        Component component = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus);\n+        if (value instanceof CategoryNode) {\n+        if (defaultComponent != null) {\n+            remove(defaultComponent);\n+        }\n+        defaultComponent = component;\n+        add(component, BorderLayout.CENTER);\n \n-    if (value instanceof CategoryNode) {\n-      if (defaultComponent != null) {\n-        remove(defaultComponent);\n-      }\n-      defaultComponent = component;\n-      add(component, BorderLayout.CENTER);\n-      CategoryNode node = (CategoryNode) value;\n-      checkBox.setSelected(node.isEnabled());\n-      return this;\n-    }\n+        CategoryNode node = (CategoryNode) value;\n+        checkBox.setSelected(node.isEnabled());\n+        return this;\n+        }\n+        if (value instanceof RuleNode) {\n+        if (defaultComponent != null) {\n+            remove(defaultComponent);\n+        }\n+        defaultComponent = component;\n+        add(component, BorderLayout.CENTER);\n \n-    if (value instanceof RuleNode) {\n-      if (defaultComponent != null) {\n-        remove(defaultComponent);\n-      }\n-      defaultComponent = component;\n-      add(component, BorderLayout.CENTER);\n-      RuleNode node = (RuleNode) value;\n-      checkBox.setSelected(node.isEnabled());\n-      return this;\n+        RuleNode node = (RuleNode) value;\n+        checkBox.setSelected(node.isEnabled());\n+        return this;\n+        }\n+        return component;\n     }\n-\n-    return component;\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}