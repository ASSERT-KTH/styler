{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "403",
    "information": {
        "errors": [
            {
                "line": "53",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * A Google Big Query row to be inserted into a table. Each {@code RowToInsert} has an associated\n   * id used by BigQuery to detect duplicate insertion requests on a best-effort basis. Please\n   * notice that data for fields of type {@link LegacySQLTypeName#BYTES} must be provided as a base64\n   * encoded string.\n   *\n   * <p>Example usage of creating a row to insert:",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/403/InsertAllRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/403/InsertAllRequest.java\nindex e81a311ad95..fdeab33cb9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/403/InsertAllRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/403/InsertAllRequest.java\n@@ -35,7 +35,7 @@ import java.util.Objects;\n  * choosing an approach.\n  *\n  * @see <a href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery\">Streaming Data into\n- *     BigQuery</a>\n+ * BigQuery</a>\n  */\n public final class InsertAllRequest implements Serializable {\n \n@@ -67,7 +67,7 @@ public final class InsertAllRequest implements Serializable {\n    * }</pre>\n    *\n    * @see <a href =\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#dataconsistency\">\n-   *     Data Consistency</a>\n+   * Data Consistency</a>\n    */\n   public static class RowToInsert implements Serializable {\n \n@@ -124,7 +124,7 @@ public final class InsertAllRequest implements Serializable {\n      * Creates a row to be inserted with associated id. Please notice that data for fields of type\n      * {@link LegacySQLTypeName#BYTES} must be provided as a base64 encoded string.\n      *\n-     * @param id id of the row, used to identify duplicates\n+     * @param id      id of the row, used to identify duplicates\n      * @param content the actual content of the row\n      */\n     public static RowToInsert of(String id, Map<String, ?> content) {\n@@ -150,7 +150,8 @@ public final class InsertAllRequest implements Serializable {\n     private Boolean ignoreUnknownValues;\n     private String templateSuffix;\n \n-    private Builder() {}\n+    private Builder() {\n+    }\n \n \n     /**\n@@ -264,8 +265,8 @@ public final class InsertAllRequest implements Serializable {\n      * }}</pre>\n      *\n      * @see <a\n-     *     href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables\">\n-     *     Template Tables</a>\n+     * href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables\">\n+     * Template Tables</a>\n      */\n     public Builder setTemplateSuffix(String templateSuffix) {\n       this.templateSuffix = templateSuffix;\n@@ -336,8 +337,8 @@ public final class InsertAllRequest implements Serializable {\n    * }}</pre>\n    *\n    * @see <a\n-   *     href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables\">\n-   *     Template Tables</a>\n+   * href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables\">\n+   * Template Tables</a>\n    */\n   public String getTemplateSuffix() {\n     return templateSuffix;\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "'ctor def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/403/InsertAllRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/403/InsertAllRequest.java\nindex e81a311ad95..b1bc484fc3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/403/InsertAllRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/403/InsertAllRequest.java\n@@ -150,10 +150,10 @@ public final class InsertAllRequest implements Serializable {\n     private Boolean ignoreUnknownValues;\n     private String templateSuffix;\n \n-    private Builder() {}\n-\n+    private Builder() {\n+}\n \n-    /**\n+/**\n      * Sets the destination table for rows insert request.\n      */\n     public Builder setTable(TableId table) {\n@@ -486,4 +486,4 @@ public final class InsertAllRequest implements Serializable {\n         && Objects.equals(skipInvalidRows, other.skipInvalidRows)\n         && Objects.equals(templateSuffix, other.templateSuffix);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "489",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/403/InsertAllRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/403/InsertAllRequest.java\nindex e81a311ad95..a0b10e6b1c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/403/InsertAllRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/403/InsertAllRequest.java\n@@ -22,7 +22,6 @@ import com.google.common.base.MoreObjects;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n-\n import java.io.Serializable;\n import java.util.List;\n import java.util.Map;\n@@ -37,10 +36,11 @@ import java.util.Objects;\n  * @see <a href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery\">Streaming Data into\n  *     BigQuery</a>\n  */\n+\n+\n public final class InsertAllRequest implements Serializable {\n \n   private static final long serialVersionUID = 211200307773853078L;\n-\n   private final TableId table;\n   private final List<RowToInsert> rows;\n   private final Boolean skipInvalidRows;\n@@ -69,10 +69,10 @@ public final class InsertAllRequest implements Serializable {\n    * @see <a href =\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#dataconsistency\">\n    *     Data Consistency</a>\n    */\n+\n   public static class RowToInsert implements Serializable {\n \n     private static final long serialVersionUID = 8563060538219179157L;\n-\n     private final String id;\n     private final Map<String, Object> content;\n \n@@ -85,6 +85,7 @@ public final class InsertAllRequest implements Serializable {\n     /**\n      * Returns the id associated with the row. Returns {@code null} if not set.\n      */\n+\n     public String getId() {\n       return id;\n     }\n@@ -93,16 +94,14 @@ public final class InsertAllRequest implements Serializable {\n     /**\n      * Returns the actual content of the row, as a map.\n      */\n+\n     public Map<String, Object> getContent() {\n       return content;\n     }\n \n     @Override\n     public String toString() {\n-      return MoreObjects.toStringHelper(this)\n-          .add(\"id\", id)\n-          .add(\"content\", content)\n-          .toString();\n+      return MoreObjects.toStringHelper(this).add(\"id\", id).add(\"content\", content).toString();\n     }\n \n     @Override\n@@ -117,7 +116,7 @@ public final class InsertAllRequest implements Serializable {\n       }\n       RowToInsert other = (RowToInsert) obj;\n       return Objects.equals(id, other.id)\n-          && Objects.equals(content, other.content);\n+        && Objects.equals(content, other.content);\n     }\n \n     /**\n@@ -127,6 +126,7 @@ public final class InsertAllRequest implements Serializable {\n      * @param id id of the row, used to identify duplicates\n      * @param content the actual content of the row\n      */\n+\n     public static RowToInsert of(String id, Map<String, ?> content) {\n       return new RowToInsert(checkNotNull(id), checkNotNull(content));\n     }\n@@ -137,6 +137,7 @@ public final class InsertAllRequest implements Serializable {\n      *\n      * @param content the actual content of the row\n      */\n+\n     public static RowToInsert of(Map<String, ?> content) {\n       return new RowToInsert(null, checkNotNull(content));\n     }\n@@ -156,6 +157,7 @@ public final class InsertAllRequest implements Serializable {\n     /**\n      * Sets the destination table for rows insert request.\n      */\n+\n     public Builder setTable(TableId table) {\n       this.table = checkNotNull(table);\n       return this;\n@@ -165,6 +167,7 @@ public final class InsertAllRequest implements Serializable {\n     /**\n      * Sets the rows to insert as a list of {@link RowToInsert} objects.\n      */\n+\n     public Builder setRows(Iterable<RowToInsert> rows) {\n       this.rows = Lists.newLinkedList(checkNotNull(rows));\n       return this;\n@@ -173,6 +176,7 @@ public final class InsertAllRequest implements Serializable {\n     /**\n      * Adds a row to be inserted.\n      */\n+\n     public Builder addRow(RowToInsert rowToInsert) {\n       checkNotNull(rowToInsert);\n       if (rows == null) {\n@@ -200,6 +204,7 @@ public final class InsertAllRequest implements Serializable {\n      * builder.addRow(\"rowId\", rowContent);\n      * }</pre>\n      */\n+\n     public Builder addRow(String id, Map<String, ?> content) {\n       addRow(new RowToInsert(id, content));\n       return this;\n@@ -223,6 +228,7 @@ public final class InsertAllRequest implements Serializable {\n      * builder.addRow(rowContent);\n      * }</pre>\n      */\n+\n     public Builder addRow(Map<String, ?> content) {\n       addRow(new RowToInsert(null, content));\n       return this;\n@@ -233,6 +239,7 @@ public final class InsertAllRequest implements Serializable {\n      * Sets whether to insert all valid rows of a request, even if invalid rows exist. If not set\n      * the entire insert request will fail if it contains an invalid row.\n      */\n+\n     public Builder setSkipInvalidRows(boolean skipInvalidRows) {\n       this.skipInvalidRows = skipInvalidRows;\n       return this;\n@@ -243,6 +250,7 @@ public final class InsertAllRequest implements Serializable {\n      * Sets whether to accept rows that contain values that do not match the schema. The unknown\n      * values are ignored. If not set, rows with unknown values are considered to be invalid.\n      */\n+\n     public Builder setIgnoreUnknownValues(boolean ignoreUnknownValues) {\n       this.ignoreUnknownValues = ignoreUnknownValues;\n       return this;\n@@ -267,6 +275,7 @@ public final class InsertAllRequest implements Serializable {\n      *     href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables\">\n      *     Template Tables</a>\n      */\n+\n     public Builder setTemplateSuffix(String templateSuffix) {\n       this.templateSuffix = templateSuffix;\n       return this;\n@@ -275,6 +284,7 @@ public final class InsertAllRequest implements Serializable {\n     /**\n      * Creates an {@code InsertAllRequest} object.\n      */\n+\n     public InsertAllRequest build() {\n       return new InsertAllRequest(this);\n     }\n@@ -292,6 +302,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns the destination table for rows insert request.\n    */\n+\n   public TableId getTable() {\n     return table;\n   }\n@@ -300,6 +311,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns the rows to be inserted.\n    */\n+\n   public List<RowToInsert> getRows() {\n     return rows;\n   }\n@@ -308,6 +320,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns whether to accept rows that contain values that do not match the schema. The unknown\n    * values are ignored. If not set, rows with unknown values are considered to be invalid.\n    */\n+\n   public Boolean ignoreUnknownValues() {\n     return ignoreUnknownValues;\n   }\n@@ -316,6 +329,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns whether to insert all valid rows of a request, even if invalid rows exist. If not set\n    * the entire insert request will fail if it contains an invalid row.\n    */\n+\n   public Boolean skipInvalidRows() {\n     return skipInvalidRows;\n   }\n@@ -339,6 +353,7 @@ public final class InsertAllRequest implements Serializable {\n    *     href=\"https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables\">\n    *     Template Tables</a>\n    */\n+\n   public String getTemplateSuffix() {\n     return templateSuffix;\n   }\n@@ -347,6 +362,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table.\n    */\n+\n   public static Builder newBuilder(TableId table) {\n     return new Builder().setTable(table);\n   }\n@@ -356,6 +372,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table and the\n    * rows to insert.\n    */\n+\n   public static Builder newBuilder(TableId table, Iterable<RowToInsert> rows) {\n     return newBuilder(table).setRows(rows);\n   }\n@@ -365,6 +382,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table and the\n    * rows to insert.\n    */\n+\n   public static Builder newBuilder(TableId table, RowToInsert... rows) {\n     return newBuilder(table, ImmutableList.copyOf(rows));\n   }\n@@ -373,6 +391,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table.\n    */\n+\n   public static Builder newBuilder(String datasetId, String tableId) {\n     return new Builder().setTable(TableId.of(datasetId, tableId));\n   }\n@@ -382,6 +401,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table and the\n    * rows to insert.\n    */\n+\n   public static Builder newBuilder(String datasetId, String tableId, Iterable<RowToInsert> rows) {\n     return newBuilder(TableId.of(datasetId, tableId), rows);\n   }\n@@ -391,6 +411,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table and the\n    * rows to insert.\n    */\n+\n   public static Builder newBuilder(String datasetId, String tableId, RowToInsert... rows) {\n     return newBuilder(TableId.of(datasetId, tableId), rows);\n   }\n@@ -400,6 +421,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table and the\n    * rows to insert.\n    */\n+\n   public static Builder newBuilder(TableInfo tableInfo, Iterable<RowToInsert> rows) {\n     return newBuilder(tableInfo.getTableId(), rows);\n   }\n@@ -409,6 +431,7 @@ public final class InsertAllRequest implements Serializable {\n    * Returns a builder for an {@code InsertAllRequest} object given the destination table and the\n    * rows to insert.\n    */\n+\n   public static Builder newBuilder(TableInfo tableInfo, RowToInsert... rows) {\n     return newBuilder(tableInfo.getTableId(), rows);\n   }\n@@ -416,6 +439,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a {@code InsertAllRequest} object given the destination table and the rows to insert.\n    */\n+\n   public static InsertAllRequest of(TableId tableId, Iterable<RowToInsert> rows) {\n     return newBuilder(tableId, rows).build();\n   }\n@@ -423,6 +447,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a {@code InsertAllRequest} object given the destination table and the rows to insert.\n    */\n+\n   public static InsertAllRequest of(TableId tableId, RowToInsert... rows) {\n     return newBuilder(tableId, rows).build();\n   }\n@@ -430,6 +455,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a {@code InsertAllRequest} object given the destination table and the rows to insert.\n    */\n+\n   public static InsertAllRequest of(String datasetId, String tableId, Iterable<RowToInsert> rows) {\n     return newBuilder(datasetId, tableId, rows).build();\n   }\n@@ -437,6 +463,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a {@code InsertAllRequest} object given the destination table and the rows to insert.\n    */\n+\n   public static InsertAllRequest of(String datasetId, String tableId, RowToInsert... rows) {\n     return newBuilder(datasetId, tableId, rows).build();\n   }\n@@ -444,6 +471,7 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a {@code InsertAllRequest} object given the destination table and the rows to insert.\n    */\n+\n   public static InsertAllRequest of(TableInfo tableInfo, Iterable<RowToInsert> rows) {\n     return newBuilder(tableInfo.getTableId(), rows).build();\n   }\n@@ -451,19 +479,14 @@ public final class InsertAllRequest implements Serializable {\n   /**\n    * Returns a {@code InsertAllRequest} object given the destination table and the rows to insert.\n    */\n+\n   public static InsertAllRequest of(TableInfo tableInfo, RowToInsert... rows) {\n     return newBuilder(tableInfo.getTableId(), rows).build();\n   }\n \n   @Override\n   public String toString() {\n-    return MoreObjects.toStringHelper(this)\n-        .add(\"table\", table)\n-        .add(\"rows\", rows)\n-        .add(\"ignoreUnknownValues\", ignoreUnknownValues)\n-        .add(\"skipInvalidRows\", skipInvalidRows)\n-        .add(\"templateSuffix\", templateSuffix)\n-        .toString();\n+    return MoreObjects.toStringHelper(this).add(\"table\", table).add(\"rows\", rows).add(\"ignoreUnknownValues\", ignoreUnknownValues).add(\"skipInvalidRows\", skipInvalidRows).add(\"templateSuffix\", templateSuffix).toString();\n   }\n \n   @Override\n@@ -481,9 +504,9 @@ public final class InsertAllRequest implements Serializable {\n     }\n     InsertAllRequest other = (InsertAllRequest) obj;\n     return Objects.equals(table, other.table)\n-        && Objects.equals(rows, other.rows)\n-        && Objects.equals(ignoreUnknownValues, other.ignoreUnknownValues)\n-        && Objects.equals(skipInvalidRows, other.skipInvalidRows)\n-        && Objects.equals(templateSuffix, other.templateSuffix);\n+      && Objects.equals(rows, other.rows)\n+      && Objects.equals(ignoreUnknownValues, other.ignoreUnknownValues)\n+      && Objects.equals(skipInvalidRows, other.skipInvalidRows)\n+      && Objects.equals(templateSuffix, other.templateSuffix);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}