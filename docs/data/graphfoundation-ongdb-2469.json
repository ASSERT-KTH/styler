{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2469",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "227",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "300",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "432",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "561",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "566",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2469/VersionedHashMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2469/VersionedHashMap.java\nindex 9759e57b9b5..9dbddea9369 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2469/VersionedHashMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2469/VersionedHashMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.util.AbstractCollection;\n@@ -31,594 +32,590 @@ import static java.lang.Integer.bitCount;\n /**\n  * A single-threaded map with approximate 1-1 performance mapping to {@link java.util.HashMap}. Memory characteristics\n  * are in the same order, but this uses 6 bytes more memory per entry stored.\n- *\n+ * <p>\n  * In return, it gives some special characteristics for iterating over and manipulating its contents simultaneously.\n  *\n  * <h2>Behavior for adding entries while iterating</h2>\n- *\n+ * <p>\n  * If you add entries while iterating over this map, those added entries will not be returned by any\n  * iterator created before the addition. This allows iterating over the map and adding entries without creating an\n  * infinite loop.\n  *\n  * <h2>Behavior for removing entries while iterating</h2>\n- *\n+ * <p>\n  * Removing entries does not behave the same way. Assuming you always call next() immediately after calling hasNext(),\n  * removing entries in the map while you iterate will have those changes made visible in your current iterator. In\n  * other words, if you remove entries while iterating, those entries will not be returned by your iterator either.\n- *\n+ * <p>\n  * If you call hasNext() and then remove entries from the map before calling next(), behavior is undefined. In reality,\n  * you may see the removed entry, if that removed entry was the one set to be returned next.\n- *\n+ * <p>\n  * Therefore, avoid modifying the map between calls to hasNext() and next(). Outside of that boundary, behavior will be\n  * well defined.\n  *\n  * <h2>How it works</h2>\n- *\n+ * <p>\n  * Internally, this data structures uses MVCC to track added records and exclude them in iterators that were created\n  * before the new record. Removed records are marked as removed, and usually garbage collected right away unless an\n  * iterator holds a reference to a removed record.\n  *\n  * <h2>Memory considerations</h2>\n- *\n+ * <p>\n  * Iterators created before a very large number of inserts will pay a penalty which may be substantial in the\n  * right conditions. If your use case implies returning an iterator and then handling very large numbers of inserts\n  * before that iterator is used, you may want to consider an alternative data structure.\n- *\n+ * <p>\n  * Similarily, iterators created before a very large number of inserts will incur a penalty on the whole data structure,\n  * as it requires copy-on-write behavior for some records (specifically records that have \"next\" records).\n  */\n public class VersionedHashMap<K, V> implements Map<K, V>\n {\n-    private static final int MAX_BUCKETS = 1 << 30;\n-\n-    /**\n-     * Contains \"buckets\" of hash chains. Each entry in this array points to a linked-list type data structure that\n-     * make up chains of values with hashes for the relevant bucket.\n-     *\n-     * See http://en.wikipedia.org/wiki/Hash_table\n-     */\n-    private Record<K, V>[] buckets;\n-\n-    private int size;\n-    private int version;\n-\n-    /**\n-     * Number of current non-exhausted iterators. When we know there are iterators pending we need to take special\n-     * precautions during resizing so as to not screw up those iterators state. Specifically, those special precautions\n-     * mean that we copy records that are in a chain, rather than move them, so as to not upset the iterator positions.\n-     *\n-     * Ideally, this copying will be very rare, as most records will not be in chains, so this should not incur huge\n-     * overhead.\n-     */\n-    private short liveIterators;\n-\n-    private int bitwiseModByBuckets;\n-\n-    private int resizeThreshold;\n-    private float resizeAtCapacity;\n-\n-    private final EntrySet entrySet = new EntrySet();\n-    private final KeySet keys = new KeySet();\n-    private final ValueCollection values = new ValueCollection();\n-\n-    public VersionedHashMap()\n+  private static final int MAX_BUCKETS = 1 << 30;\n+\n+  /**\n+   * Contains \"buckets\" of hash chains. Each entry in this array points to a linked-list type data structure that\n+   * make up chains of values with hashes for the relevant bucket.\n+   * <p>\n+   * See http://en.wikipedia.org/wiki/Hash_table\n+   */\n+  private Record<K, V>[] buckets;\n+\n+  private int size;\n+  private int version;\n+\n+  /**\n+   * Number of current non-exhausted iterators. When we know there are iterators pending we need to take special\n+   * precautions during resizing so as to not screw up those iterators state. Specifically, those special precautions\n+   * mean that we copy records that are in a chain, rather than move them, so as to not upset the iterator positions.\n+   * <p>\n+   * Ideally, this copying will be very rare, as most records will not be in chains, so this should not incur huge\n+   * overhead.\n+   */\n+  private short liveIterators;\n+\n+  private int bitwiseModByBuckets;\n+\n+  private int resizeThreshold;\n+  private float resizeAtCapacity;\n+\n+  private final EntrySet entrySet = new EntrySet();\n+  private final KeySet keys = new KeySet();\n+  private final ValueCollection values = new ValueCollection();\n+\n+  public VersionedHashMap()\n+  {\n+    this(16, 0.85f);\n+  }\n+\n+  public VersionedHashMap(int numBuckets, float resizeAtCapacity)\n+  {\n+    if (bitCount(numBuckets) != 1)\n     {\n-        this( 16, 0.85f );\n+      throw new UnsupportedOperationException(\"Number of buckets must be a power-of-2 number, 2,4,8,16 etc.\");\n     }\n-\n-    public VersionedHashMap( int numBuckets, float resizeAtCapacity )\n+    this.resizeAtCapacity = resizeAtCapacity;\n+    this.buckets = new Record[numBuckets];\n+    this.bitwiseModByBuckets = numBuckets - 1;\n+    this.resizeThreshold = (int) (numBuckets * resizeAtCapacity);\n+  }\n+\n+  @Override\n+  public int size()\n+  {\n+    return size;\n+  }\n+\n+  @Override\n+  public boolean isEmpty()\n+  {\n+    return size == 0;\n+  }\n+\n+  @Override\n+  public boolean containsKey(Object key)\n+  {\n+    return getRecord(key) != null;\n+  }\n+\n+  @Override\n+  public boolean containsValue(Object value)\n+  {\n+    for (Record<K, V> bucket : buckets)\n     {\n-        if ( bitCount( numBuckets ) != 1 )\n+      while (bucket != null)\n+      {\n+        if (bucket.value == value || bucket.value.equals(value))\n         {\n-            throw new UnsupportedOperationException( \"Number of buckets must be a power-of-2 number, 2,4,8,16 etc.\" );\n+          return true;\n         }\n-        this.resizeAtCapacity = resizeAtCapacity;\n-        this.buckets = new Record[numBuckets];\n-        this.bitwiseModByBuckets = numBuckets - 1;\n-        this.resizeThreshold = (int) (numBuckets * resizeAtCapacity);\n+        bucket = bucket.next;\n+      }\n     }\n \n-    @Override\n-    public int size()\n+    return false;\n+  }\n+\n+  @Override\n+  public V get(Object key)\n+  {\n+    Record<K, V> record = getRecord(key);\n+    if (record != null)\n     {\n-        return size;\n+      return record.value;\n     }\n+    return null;\n+  }\n \n-    @Override\n-    public boolean isEmpty()\n+  @Override\n+  public V put(K key, V value)\n+  {\n+    final int hash = hash(key.hashCode());\n+    final int bucket = hash & bitwiseModByBuckets;\n+\n+    for (Record<K, V> record = buckets[bucket]; record != null; record = record.next)\n     {\n-        return size == 0;\n+      if (record.hashCode == hash && ((record.key == key) || record.key.equals(key)))\n+      {\n+        V old = record.value;\n+        record.value = value;\n+        return old;\n+      }\n     }\n \n-    @Override\n-    public boolean containsKey( Object key )\n+    // No pre-existing entry, create a new one\n+    Record<K, V> record = new Record<>(hash, key, value, buckets[bucket], version);\n+    buckets[bucket] = record;\n+\n+    if (size++ > resizeThreshold)\n     {\n-        return getRecord( key ) != null;\n+      resize(buckets.length << 1);\n     }\n \n-    @Override\n-    public boolean containsValue( Object value )\n-    {\n-        for ( Record<K,V> bucket : buckets )\n-        {\n-            while ( bucket != null )\n-            {\n-                if ( bucket.value == value || bucket.value.equals( value ) )\n-                {\n-                    return true;\n-                }\n-                bucket = bucket.next;\n-            }\n-        }\n+    return null;\n+  }\n \n-        return false;\n-    }\n+  @Override\n+  public V remove(Object key)\n+  {\n+    final int hash = hash(key.hashCode());\n+    final int bucket = hash & bitwiseModByBuckets;\n \n-    @Override\n-    public V get( Object key )\n+    Record<K, V> prev = null;\n+    for (Record<K, V> record = buckets[bucket]; record != null; record = record.next)\n     {\n-        Record<K, V> record = getRecord( key );\n-        if ( record != null )\n+      if (record.hashCode == hash && ((record.key == key) || record.key.equals(key)))\n+      {\n+        V old = record.value;\n+        if (prev == null)\n+        {\n+          buckets[bucket] = record.next;\n+        } else\n         {\n-            return record.value;\n+          prev.next = record.next;\n         }\n-        return null;\n+        record.remove();\n+        size--;\n+        return old;\n+      }\n+      prev = record;\n     }\n \n-    @Override\n-    public V put( K key, V value )\n-    {\n-        final int hash = hash( key.hashCode() );\n-        final int bucket = hash & bitwiseModByBuckets;\n+    return null;\n+  }\n \n-        for ( Record<K,V> record = buckets[bucket]; record != null; record = record.next )\n-        {\n-            if ( record.hashCode == hash && ((record.key == key) || record.key.equals( key )) )\n-            {\n-                V old = record.value;\n-                record.value = value;\n-                return old;\n-            }\n-        }\n+  @Override\n+  public void putAll(Map<? extends K, ? extends V> m)\n+  {\n+    throw new UnsupportedOperationException(\"Not yet implemented.\");\n+  }\n \n-        // No pre-existing entry, create a new one\n-        Record<K,V> record = new Record<>( hash, key, value, buckets[bucket], version );\n-        buckets[bucket] = record;\n+  @Override\n+  public void clear()\n+  {\n+    size = 0;\n+    for (int i = 0; i < buckets.length; i++)\n+    {\n+      buckets[i] = null;\n+    }\n+  }\n+\n+  @Override\n+  public Set<K> keySet()\n+  {\n+    return keys;\n+  }\n+\n+  @Override\n+  public Collection<V> values()\n+  {\n+    return values;\n+  }\n+\n+  @Override\n+  public Set<Map.Entry<K, V>> entrySet()\n+  {\n+    return entrySet;\n+  }\n+\n+  private Record<K, V> getRecord(Object key)\n+  {\n+    final int hash = hash(key.hashCode());\n+    final int bucket = hash & bitwiseModByBuckets;\n+\n+    for (Record<K, V> record = buckets[bucket]; record != null; record = record.next)\n+    {\n+      if (record.key.equals(key))\n+      {\n+        return record;\n+      }\n+    }\n \n-        if ( size++ > resizeThreshold )\n-        {\n-            resize( buckets.length << 1 );\n-        }\n+    return null;\n+  }\n \n-        return null;\n+  private void resize(int numBuckets)\n+  {\n+    if (numBuckets >= MAX_BUCKETS)\n+    {\n+      // Avoid getting this call again, we can't make it any bigger.\n+      resizeThreshold = Integer.MAX_VALUE;\n+      return;\n     }\n \n-    @Override\n-    public V remove( Object key )\n+    Record<K, V>[] oldBuckets = buckets;\n+\n+    buckets = new Record[numBuckets];\n+    bitwiseModByBuckets = numBuckets - 1;\n+    resizeThreshold = (int) (numBuckets * resizeAtCapacity);\n+\n+    for (Record<K, V> record : oldBuckets)\n     {\n-        final int hash = hash( key.hashCode() );\n-        final int bucket = hash & bitwiseModByBuckets;\n+      while (record != null)\n+      {\n+        Record<K, V> next = record.next;\n \n-        Record<K,V> prev = null;\n-        for ( Record<K,V> record = buckets[bucket]; record != null; record = record.next )\n+        if (next != null && liveIterators > 0)\n+        {\n+          record = record.copy();\n+        } else if (liveIterators == 0 && record instanceof CopiedRecord)\n         {\n-            if ( record.hashCode == hash && ((record.key == key) || record.key.equals( key )) )\n-            {\n-                V old = record.value;\n-                if ( prev == null )\n-                {\n-                    buckets[bucket] = record.next;\n-                }\n-                else\n-                {\n-                    prev.next = record.next;\n-                }\n-                record.remove();\n-                size--;\n-                return old;\n-            }\n-            prev = record;\n+          // If there are no iterators, take this opportunity to get rid of copied records and use the\n+          // originals.\n+          record = ((CopiedRecord) record).original;\n         }\n \n-        return null;\n+        int bucket = record.hashCode & bitwiseModByBuckets;\n+        record.next = buckets[bucket];\n+        buckets[bucket] = record;\n+        record = next;\n+      }\n     }\n \n+  }\n+\n+  private static int hash(int h)\n+  {\n+    // See: http://stackoverflow.com/questions/9335169/understanding-strange-java-hash-function\n+    h ^= (h >>> 20) ^ (h >>> 12);\n+    return h ^ (h >>> 7) ^ (h >>> 4);\n+  }\n+\n+  private class EntrySet extends AbstractSet<Entry<K, V>>\n+  {\n     @Override\n-    public void putAll( Map<? extends K, ? extends V> m )\n+    public Iterator<Entry<K, V>> iterator()\n     {\n-        throw new UnsupportedOperationException( \"Not yet implemented.\" );\n+      return new EntryIterator();\n     }\n \n     @Override\n-    public void clear()\n+    public boolean add(Entry<K, V> kvEntry)\n     {\n-        size = 0;\n-        for ( int i = 0; i < buckets.length; i++ )\n-        {\n-            buckets[i] = null;\n-        }\n+      return put(kvEntry.getKey(), kvEntry.getValue()) != null;\n     }\n \n     @Override\n-    public Set<K> keySet()\n+    public int size()\n     {\n-        return keys;\n+      return size;\n     }\n+  }\n \n+  private class KeySet extends AbstractSet<K>\n+  {\n     @Override\n-    public Collection<V> values()\n+    public Iterator<K> iterator()\n     {\n-        return values;\n+      return new KeyIterator(entrySet.iterator());\n     }\n \n     @Override\n-    public Set<Map.Entry<K, V>> entrySet()\n+    public int size()\n     {\n-        return entrySet;\n+      return size;\n     }\n+  }\n \n-    private Record<K,V> getRecord( Object key )\n+  private class ValueCollection extends AbstractCollection<V>\n+  {\n+    @Override\n+    public Iterator<V> iterator()\n     {\n-        final int hash = hash( key.hashCode() );\n-        final int bucket = hash & bitwiseModByBuckets;\n-\n-        for ( Record<K,V> record = buckets[bucket]; record != null; record = record.next )\n-        {\n-            if ( record.key.equals( key ) )\n-            {\n-                return record;\n-            }\n-        }\n-\n-        return null;\n+      return new ValueIterator(entrySet.iterator());\n     }\n \n-    private void resize( int numBuckets )\n+    @Override\n+    public int size()\n     {\n-        if ( numBuckets >= MAX_BUCKETS )\n-        {\n-            // Avoid getting this call again, we can't make it any bigger.\n-            resizeThreshold = Integer.MAX_VALUE;\n-            return;\n-        }\n-\n-        Record<K,V>[] oldBuckets = buckets;\n+      return size;\n+    }\n+  }\n \n-        buckets = new Record[numBuckets];\n-        bitwiseModByBuckets = numBuckets - 1;\n-        resizeThreshold = (int) (numBuckets * resizeAtCapacity);\n+  private class EntryIterator implements Iterator<Entry<K, V>>\n+  {\n+    private int viewVersion;\n+    private int currentBucket;\n+    private Record<K, V> next;\n+    private Record<K, V> current;\n \n-        for ( Record<K,V> record : oldBuckets )\n-        {\n-            while ( record != null )\n-            {\n-                Record<K,V> next = record.next;\n-\n-                if ( next != null && liveIterators > 0 )\n-                {\n-                    record = record.copy();\n-                }\n-                else if ( liveIterators == 0 && record instanceof CopiedRecord )\n-                {\n-                    // If there are no iterators, take this opportunity to get rid of copied records and use the\n-                    // originals.\n-                    record = ((CopiedRecord) record).original;\n-                }\n-\n-                int bucket = record.hashCode & bitwiseModByBuckets;\n-                record.next = buckets[bucket];\n-                buckets[bucket] = record;\n-                record = next;\n-            }\n-        }\n+    // In case the map is resized, we need to retain a fixed view of the buckets, so keep a reference to the current\n+    // bucket array.\n+    private Record<K, V>[] bucketsView = buckets;\n+    private boolean exhausted;\n \n+    private EntryIterator()\n+    {\n+      viewVersion = version;\n+      version++;\n+      liveIterators++;\n+\n+      // Find first entry\n+      for (; next == null && currentBucket < bucketsView.length; currentBucket++)\n+      {\n+        next = bucketsView[currentBucket];\n+      }\n     }\n \n-    private static int hash( int h )\n+    @Override\n+    public boolean hasNext()\n     {\n-        // See: http://stackoverflow.com/questions/9335169/understanding-strange-java-hash-function\n-        h ^= (h >>> 20) ^ (h >>> 12);\n-        return h ^ (h >>> 7) ^ (h >>> 4);\n+      if (exhausted)\n+      {\n+        return false;\n+      }\n+\n+      // Take into account the fact that we may have pre-fetched a record that has then been removed\n+      if (next != null && next.removed)\n+      {\n+        next();\n+      }\n+\n+      if (next != null)\n+      {\n+        return true;\n+      } else\n+      {\n+        exhausted = true;\n+        liveIterators--;\n+        return false;\n+      }\n     }\n \n-    private class EntrySet extends AbstractSet<Entry<K,V>>\n+    @Override\n+    public Record<K, V> next()\n     {\n-        @Override\n-        public Iterator<Entry<K,V>> iterator()\n-        {\n-            return new EntryIterator();\n-        }\n+      current = next;\n \n-        @Override\n-        public boolean add( Entry<K, V> kvEntry )\n+      // This is rather complex, but the gist is this: Iterate over each bucket, and within each iterate over\n+      // the chain of records. If we find a record that we are allowed to see\n+      // (eg. as an addedInVersion <= viewVersion && !removed), stop and set next to that record.\n+      if ((next = next.next) == null || next.addedInVersion > viewVersion || next.removed)\n+      {\n+        for (; (next == null || next.addedInVersion > viewVersion || next.removed) &&\n+            currentBucket < bucketsView.length; currentBucket++)\n         {\n-            return put( kvEntry.getKey(), kvEntry.getValue() ) != null;\n+          next = bucketsView[currentBucket];\n+          while (next != null && (next.addedInVersion > viewVersion || next.removed))\n+          {\n+            next = next.next;\n+          }\n         }\n+      }\n \n-        @Override\n-        public int size()\n-        {\n-            return size;\n-        }\n+      return current;\n     }\n \n-    private class KeySet extends AbstractSet<K>\n+    @Override\n+    public void remove()\n     {\n-        @Override\n-        public Iterator<K> iterator()\n-        {\n-            return new KeyIterator( entrySet.iterator() );\n-        }\n-\n-        @Override\n-        public int size()\n-        {\n-            return size;\n-        }\n+      if (current == null)\n+      {\n+        throw new IllegalStateException(\"Not currently on a record. Did you call next()?\");\n+      }\n+      VersionedHashMap.this.remove(current.key);\n     }\n+  }\n \n-    private class ValueCollection extends AbstractCollection<V>\n-    {\n-        @Override\n-        public Iterator<V> iterator()\n-        {\n-            return new ValueIterator( entrySet.iterator() );\n-        }\n+  private class KeyIterator implements Iterator<K>\n+  {\n+    private final Iterator<Entry<K, V>> entryIterator;\n \n-        @Override\n-        public int size()\n-        {\n-            return size;\n-        }\n+    private KeyIterator(Iterator<Entry<K, V>> entryIterator)\n+    {\n+      this.entryIterator = entryIterator;\n     }\n \n-    private class EntryIterator implements Iterator<Entry<K,V>>\n+    @Override\n+    public boolean hasNext()\n     {\n-        private int viewVersion;\n-        private int currentBucket;\n-        private Record<K,V> next;\n-        private Record<K,V> current;\n-\n-        // In case the map is resized, we need to retain a fixed view of the buckets, so keep a reference to the current\n-        // bucket array.\n-        private Record<K,V>[] bucketsView = buckets;\n-        private boolean exhausted;\n-\n-        private EntryIterator()\n-        {\n-            viewVersion = version;\n-            version++;\n-            liveIterators++;\n-\n-            // Find first entry\n-            for ( ; next == null && currentBucket < bucketsView.length; currentBucket++ )\n-            {\n-                next = bucketsView[currentBucket];\n-            }\n-        }\n-\n-        @Override\n-        public boolean hasNext()\n-        {\n-            if ( exhausted )\n-            {\n-                return false;\n-            }\n-\n-            // Take into account the fact that we may have pre-fetched a record that has then been removed\n-            if ( next != null && next.removed )\n-            {\n-                next();\n-            }\n-\n-            if ( next != null )\n-            {\n-                return true;\n-            }\n-            else\n-            {\n-                exhausted = true;\n-                liveIterators--;\n-                return false;\n-            }\n-        }\n-\n-        @Override\n-        public Record<K, V> next()\n-        {\n-            current = next;\n-\n-            // This is rather complex, but the gist is this: Iterate over each bucket, and within each iterate over\n-            // the chain of records. If we find a record that we are allowed to see\n-            // (eg. as an addedInVersion <= viewVersion && !removed), stop and set next to that record.\n-            if ( (next = next.next) == null || next.addedInVersion > viewVersion || next.removed )\n-            {\n-                for ( ; (next == null || next.addedInVersion > viewVersion || next.removed) &&\n-                        currentBucket < bucketsView.length; currentBucket++ )\n-                {\n-                    next = bucketsView[currentBucket];\n-                    while ( next != null && (next.addedInVersion > viewVersion || next.removed) )\n-                    {\n-                        next = next.next;\n-                    }\n-                }\n-            }\n-\n-            return current;\n-        }\n-\n-        @Override\n-        public void remove()\n-        {\n-            if ( current == null )\n-            {\n-                throw new IllegalStateException( \"Not currently on a record. Did you call next()?\" );\n-            }\n-            VersionedHashMap.this.remove( current.key );\n-        }\n+      return entryIterator.hasNext();\n     }\n \n-    private class KeyIterator implements Iterator<K>\n+    @Override\n+    public K next()\n     {\n-        private final Iterator<Entry<K,V>> entryIterator;\n-\n-        private KeyIterator( Iterator<Entry<K,V>> entryIterator )\n-        {\n-            this.entryIterator = entryIterator;\n-        }\n-\n-        @Override\n-        public boolean hasNext()\n-        {\n-            return entryIterator.hasNext();\n-        }\n-\n-        @Override\n-        public K next()\n-        {\n-            return entryIterator.next().getKey();\n-        }\n-\n-        @Override\n-        public void remove()\n-        {\n-            entryIterator.remove();\n-        }\n+      return entryIterator.next().getKey();\n     }\n \n-    private class ValueIterator implements Iterator<V>\n+    @Override\n+    public void remove()\n     {\n-        private final Iterator<Entry<K,V>> entryIterator;\n-\n-        private ValueIterator( Iterator<Entry<K,V>> entryIterator )\n-        {\n-            this.entryIterator = entryIterator;\n-        }\n+      entryIterator.remove();\n+    }\n+  }\n \n-        @Override\n-        public boolean hasNext()\n-        {\n-            return entryIterator.hasNext();\n-        }\n+  private class ValueIterator implements Iterator<V>\n+  {\n+    private final Iterator<Entry<K, V>> entryIterator;\n \n-        @Override\n-        public V next()\n-        {\n-            return entryIterator.next().getValue();\n-        }\n+    private ValueIterator(Iterator<Entry<K, V>> entryIterator)\n+    {\n+      this.entryIterator = entryIterator;\n+    }\n \n-        @Override\n-        public void remove()\n-        {\n-            entryIterator.remove();\n-        }\n+    @Override\n+    public boolean hasNext()\n+    {\n+      return entryIterator.hasNext();\n     }\n \n-    private static class Record<K, V> implements Entry<K,V>\n+    @Override\n+    public V next()\n     {\n-        protected int hashCode;\n-        protected K key;\n-        protected V value;\n-        protected Record<K, V> next;\n+      return entryIterator.next().getValue();\n+    }\n \n-        protected int addedInVersion;\n-        protected boolean removed;\n+    @Override\n+    public void remove()\n+    {\n+      entryIterator.remove();\n+    }\n+  }\n \n-        Record( int hashCode, K key, V value, Record<K,V> next, int addedInVersion )\n-        {\n-            this.hashCode = hashCode;\n-            this.key = key;\n-            this.value = value;\n-            this.next = next;\n-            this.addedInVersion = addedInVersion;\n-        }\n+  private static class Record<K, V> implements Entry<K, V>\n+  {\n+    protected int hashCode;\n+    protected K key;\n+    protected V value;\n+    protected Record<K, V> next;\n \n-        @Override\n-        public K getKey()\n-        {\n-            return key;\n-        }\n+    protected int addedInVersion;\n+    protected boolean removed;\n \n-        @Override\n-        public V getValue()\n-        {\n-            return value;\n-        }\n+    Record(int hashCode, K key, V value, Record<K, V> next, int addedInVersion)\n+    {\n+      this.hashCode = hashCode;\n+      this.key = key;\n+      this.value = value;\n+      this.next = next;\n+      this.addedInVersion = addedInVersion;\n+    }\n \n-        @Override\n-        public V setValue( V value )\n-        {\n-            V old = this.value;\n-            this.value = value;\n-            return old;\n-        }\n+    @Override\n+    public K getKey()\n+    {\n+      return key;\n+    }\n \n-        public void remove()\n-        {\n-            removed = true;\n-        }\n+    @Override\n+    public V getValue()\n+    {\n+      return value;\n+    }\n \n-        public Record<K,V> copy()\n-        {\n-            if ( !removed )\n-            {\n-                return new CopiedRecord<>( this, hashCode, key, value, next, addedInVersion );\n-            }\n-            else\n-            {\n-                return new Record<>( hashCode, key, value, next, addedInVersion );\n-            }\n-        }\n+    @Override\n+    public V setValue(V value)\n+    {\n+      V old = this.value;\n+      this.value = value;\n+      return old;\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"Record{\" +\n-                    \"hashCode=\" + hashCode +\n-                    \", key=\" + key +\n-                    \", value=\" + value +\n-                    \", next=\" + (next == null ? \"null + \" : next.key) +\n-                    \", addedInVersion=\" + addedInVersion +\n-                    \", removed=\" + removed +\n-                    '}';\n-        }\n+    public void remove()\n+    {\n+      removed = true;\n     }\n \n-    /**\n-     * This is used when resizing, and we need to copy records that are part of chains, so that existing iterators are\n-     * not messed up. In order for this to work, the copies (which become part of the \"real\" chain) need to refer back\n-     * to their originals, so that they can be removed and those removals be visible to iterators. Without this,\n-     * iterators would still show removed records if they were removed after a resize.\n-     */\n-    private static class CopiedRecord<K,V> extends Record<K,V>\n+    public Record<K, V> copy()\n     {\n-        private Record<K,V> original;\n+      if (!removed)\n+      {\n+        return new CopiedRecord<>(this, hashCode, key, value, next, addedInVersion);\n+      } else\n+      {\n+        return new Record<>(hashCode, key, value, next, addedInVersion);\n+      }\n+    }\n \n-        CopiedRecord( Record<K,V> original, int hashCode, K key, V value, Record<K,V> next, int addedInVersion )\n-        {\n-            super( hashCode, key, value, next, addedInVersion );\n-            this.original = original;\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return \"Record{\" +\n+          \"hashCode=\" + hashCode +\n+          \", key=\" + key +\n+          \", value=\" + value +\n+          \", next=\" + (next == null ? \"null + \" : next.key) +\n+          \", addedInVersion=\" + addedInVersion +\n+          \", removed=\" + removed +\n+          '}';\n+    }\n+  }\n+\n+  /**\n+   * This is used when resizing, and we need to copy records that are part of chains, so that existing iterators are\n+   * not messed up. In order for this to work, the copies (which become part of the \"real\" chain) need to refer back\n+   * to their originals, so that they can be removed and those removals be visible to iterators. Without this,\n+   * iterators would still show removed records if they were removed after a resize.\n+   */\n+  private static class CopiedRecord<K, V> extends Record<K, V>\n+  {\n+    private Record<K, V> original;\n+\n+    CopiedRecord(Record<K, V> original, int hashCode, K key, V value, Record<K, V> next, int addedInVersion)\n+    {\n+      super(hashCode, key, value, next, addedInVersion);\n+      this.original = original;\n+    }\n \n-        @Override\n-        public void remove()\n-        {\n-            removed = true;\n-            original.remove();\n-        }\n+    @Override\n+    public void remove()\n+    {\n+      removed = true;\n+      original.remove();\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"CopiedRecord{\" +\n-                    \"hashCode=\" + hashCode +\n-                    \", key=\" + key +\n-                    \", value=\" + value +\n-                    \", next=\" + (next == null ? \"null + \" : next.key) +\n-                    \", addedInVersion=\" + addedInVersion +\n-                    \", removed=\" + removed +\n-                    \", original=\" + original +\n-                    '}';\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return \"CopiedRecord{\" +\n+          \"hashCode=\" + hashCode +\n+          \", key=\" + key +\n+          \", value=\" + value +\n+          \", next=\" + (next == null ? \"null + \" : next.key) +\n+          \", addedInVersion=\" + addedInVersion +\n+          \", removed=\" + removed +\n+          \", original=\" + original +\n+          '}';\n     }\n+  }\n }\n",
            "diff_size": 683
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "118",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "45",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "431",
                    "column": "67",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "433",
                    "column": "62",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "437",
                    "column": "65",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "573",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "603",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2469/VersionedHashMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2469/VersionedHashMap.java\nindex 9759e57b9b5..bace3f8dbc3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2469/VersionedHashMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2469/VersionedHashMap.java\n@@ -67,7 +67,7 @@ import static java.lang.Integer.bitCount;\n  * Similarily, iterators created before a very large number of inserts will incur a penalty on the whole data structure,\n  * as it requires copy-on-write behavior for some records (specifically records that have \"next\" records).\n  */\n-public class VersionedHashMap<K, V> implements Map<K, V>\n+public class VersionedHashMap<K,V> implements Map<K, V>\n {\n     private static final int MAX_BUCKETS = 1 << 30;\n \n@@ -115,7 +115,7 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n         this.resizeAtCapacity = resizeAtCapacity;\n         this.buckets = new Record[numBuckets];\n         this.bitwiseModByBuckets = numBuckets - 1;\n-        this.resizeThreshold = (int) (numBuckets * resizeAtCapacity);\n+        this.resizeThreshold = ( int) ( numBuckets * resizeAtCapacity);\n     }\n \n     @Override\n@@ -147,7 +147,8 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n                 {\n                     return true;\n                 }\n-                bucket = bucket.next;\n+\n+bucket = bucket.next;\n             }\n         }\n \n@@ -157,7 +158,7 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n     @Override\n     public V get( Object key )\n     {\n-        Record<K, V> record = getRecord( key );\n+        Record<K,V> record = getRecord( key );\n         if ( record != null )\n         {\n             return record.value;\n@@ -170,8 +171,7 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n     {\n         final int hash = hash( key.hashCode() );\n         final int bucket = hash & bitwiseModByBuckets;\n-\n-        for ( Record<K,V> record = buckets[bucket]; record != null; record = record.next )\n+for ( Record<K,V> record = buckets[bucket]; record != null; record = record.next )\n         {\n             if ( record.hashCode == hash && ((record.key == key) || record.key.equals( key )) )\n             {\n@@ -217,7 +217,8 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n                 size--;\n                 return old;\n             }\n-            prev = record;\n+\n+prev = record;\n         }\n \n         return null;\n@@ -261,8 +262,7 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n     {\n         final int hash = hash( key.hashCode() );\n         final int bucket = hash & bitwiseModByBuckets;\n-\n-        for ( Record<K,V> record = buckets[bucket]; record != null; record = record.next )\n+for ( Record<K,V> record = buckets[bucket]; record != null; record = record.next )\n         {\n             if ( record.key.equals( key ) )\n             {\n@@ -286,9 +286,8 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n \n         buckets = new Record[numBuckets];\n         bitwiseModByBuckets = numBuckets - 1;\n-        resizeThreshold = (int) (numBuckets * resizeAtCapacity);\n-\n-        for ( Record<K,V> record : oldBuckets )\n+        resizeThreshold = ( int) ( numBuckets * resizeAtCapacity);\n+for ( Record<K,V> record : oldBuckets )\n         {\n             while ( record != null )\n             {\n@@ -311,14 +310,13 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n                 record = next;\n             }\n         }\n-\n     }\n \n     private static int hash( int h )\n     {\n         // See: http://stackoverflow.com/questions/9335169/understanding-strange-java-hash-function\n-        h ^= (h >>> 20) ^ (h >>> 12);\n-        return h ^ (h >>> 7) ^ (h >>> 4);\n+        h ^= ( h >>> 20) ^ ( h >>> 12 );\n+        return h ^ ( h >>> 7) ^ ( h >>> 4 );\n     }\n \n     private class EntrySet extends AbstractSet<Entry<K,V>>\n@@ -330,7 +328,7 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n         }\n \n         @Override\n-        public boolean add( Entry<K, V> kvEntry )\n+        public boolean add( Entry<K,V> kvEntry )\n         {\n             return put( kvEntry.getKey(), kvEntry.getValue() ) != null;\n         }\n@@ -386,8 +384,7 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n \n         private EntryIterator()\n         {\n-            viewVersion = version;\n-            version++;\n+            viewVersion = version; version++;\n             liveIterators++;\n \n             // Find first entry\n@@ -424,20 +421,20 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n         }\n \n         @Override\n-        public Record<K, V> next()\n+        public Record<K,V> next()\n         {\n             current = next;\n \n             // This is rather complex, but the gist is this: Iterate over each bucket, and within each iterate over\n             // the chain of records. If we find a record that we are allowed to see\n             // (eg. as an addedInVersion <= viewVersion && !removed), stop and set next to that record.\n-            if ( (next = next.next) == null || next.addedInVersion > viewVersion || next.removed )\n+            if ( (next = next.next) == null || next.addedInVersion> viewVersion || next.removed )\n             {\n-                for ( ; (next == null || next.addedInVersion > viewVersion || next.removed) &&\n+                for ( ; ( next == null || next.addedInVersion> viewVersion || next.removed) &&\n                         currentBucket < bucketsView.length; currentBucket++ )\n-                {\n+{\n                     next = bucketsView[currentBucket];\n-                    while ( next != null && (next.addedInVersion > viewVersion || next.removed) )\n+                    while ( next != null && (next.addedInVersion> viewVersion || next.removed) )\n                     {\n                         next = next.next;\n                     }\n@@ -514,12 +511,12 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n         }\n     }\n \n-    private static class Record<K, V> implements Entry<K,V>\n+    private static class Record<K,V> implements Entry<K,V>\n     {\n         protected int hashCode;\n         protected K key;\n         protected V value;\n-        protected Record<K, V> next;\n+        protected Record<K,V> next;\n \n         protected int addedInVersion;\n         protected boolean removed;\n@@ -573,15 +570,8 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n         @Override\n         public String toString()\n         {\n-            return \"Record{\" +\n-                    \"hashCode=\" + hashCode +\n-                    \", key=\" + key +\n-                    \", value=\" + value +\n-                    \", next=\" + (next == null ? \"null + \" : next.key) +\n-                    \", addedInVersion=\" + addedInVersion +\n-                    \", removed=\" + removed +\n-                    '}';\n-        }\n+            return \"Record{\" + \"hashCode=\" + hashCode + \", key=\" + key + \", value=\" + value + \", next=\" + ( next == null ? \"null + \" : next.key) + \", addedInVersion=\" + addedInVersion + \", removed=\" + removed + '}';\n+    }\n     }\n \n     /**\n@@ -610,15 +600,7 @@ public class VersionedHashMap<K, V> implements Map<K, V>\n         @Override\n         public String toString()\n         {\n-            return \"CopiedRecord{\" +\n-                    \"hashCode=\" + hashCode +\n-                    \", key=\" + key +\n-                    \", value=\" + value +\n-                    \", next=\" + (next == null ? \"null + \" : next.key) +\n-                    \", addedInVersion=\" + addedInVersion +\n-                    \", removed=\" + removed +\n-                    \", original=\" + original +\n-                    '}';\n-        }\n+            return \"CopiedRecord{\" + \"hashCode=\" + hashCode + \", key=\" + key + \", value=\" + value + \", next=\" + ( next == null ? \"null + \" : next.key) + \", addedInVersion=\" + addedInVersion + \", removed=\" + removed + \", original=\" + original + '}';\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}