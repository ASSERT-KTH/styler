{
    "project_name": "vostok-hercules",
    "error_id": "85",
    "information": {
        "errors": [
            {
                "line": "103",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 221).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                int retryCount = retryLimit;\n                do {\n                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n                    readyToSend.values().forEach(wrapper -> writeEventToStream(dataStream, wrapper));\n                    ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/85/ElasticSender.java\nindex 1eba79616b9..ba6d125df11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/85/ElasticSender.java\n@@ -29,186 +29,187 @@ import static ru.kontur.vostok.hercules.util.throwable.ThrowableUtil.toUnchecked\n  * @author Gregory Koshelev\n  */\n public class ElasticSender extends Sender {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n \n-    private static final int EXPECTED_EVENT_SIZE_BYTES = 2_048;\n+  private static final int EXPECTED_EVENT_SIZE_BYTES = 2_048;\n \n-    private final boolean mergePropertiesTagToRoot;\n+  private final boolean mergePropertiesTagToRoot;\n \n-    private final IndexPolicy indexPolicy;\n-    private final IndexResolver indexResolver;\n+  private final IndexPolicy indexPolicy;\n+  private final IndexResolver indexResolver;\n \n-    private final ElasticClient client;\n+  private final ElasticClient client;\n \n-    private final int retryLimit;\n-    private final boolean retryOnUnknownErrors;\n+  private final int retryLimit;\n+  private final boolean retryOnUnknownErrors;\n \n-    private final boolean leproseryEnable;\n-    private final LeproserySender leproserySender;\n+  private final boolean leproseryEnable;\n+  private final LeproserySender leproserySender;\n \n-    private final Meter elasticsearchDroppedNonRetryableErrorsMeter;\n+  private final Meter elasticsearchDroppedNonRetryableErrorsMeter;\n \n-    public ElasticSender(Properties properties, MetricsCollector metricsCollector) {\n-        super(properties, metricsCollector);\n+  public ElasticSender(Properties properties, MetricsCollector metricsCollector) {\n+    super(properties, metricsCollector);\n \n-        this.mergePropertiesTagToRoot = PropertiesUtil.get(Props.MERGE_PROPERTIES_TAG_TO_ROOT, properties).get();\n+    this.mergePropertiesTagToRoot = PropertiesUtil.get(Props.MERGE_PROPERTIES_TAG_TO_ROOT, properties).get();\n \n-        this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties).get();\n-        this.indexResolver = IndexResolver.forPolicy(indexPolicy);\n+    this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties).get();\n+    this.indexResolver = IndexResolver.forPolicy(indexPolicy);\n \n-        this.client = new ElasticClient(PropertiesUtil.ofScope(properties, \"elastic.client\"), indexPolicy, metricsCollector);\n+    this.client = new ElasticClient(PropertiesUtil.ofScope(properties, \"elastic.client\"), indexPolicy, metricsCollector);\n \n-        this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties).get();\n-        this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties).get();\n+    this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties).get();\n+    this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties).get();\n \n-        this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties).get();\n-        this.leproserySender = leproseryEnable\n-                ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY),\n-                metricsCollector,\n-                mergePropertiesTagToRoot)\n-                : null;\n+    this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties).get();\n+    this.leproserySender = leproseryEnable\n+      ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY),\n+      metricsCollector,\n+      mergePropertiesTagToRoot)\n+      : null;\n \n-        this.elasticsearchDroppedNonRetryableErrorsMeter = metricsCollector.meter(\"elasticsearchDroppedNonRetryableErrors\");\n-    }\n-\n-    @Override\n-    public ProcessorStatus ping() {\n-        return client.ping() ? ProcessorStatus.AVAILABLE : ProcessorStatus.UNAVAILABLE;\n-    }\n+    this.elasticsearchDroppedNonRetryableErrorsMeter = metricsCollector.meter(\"elasticsearchDroppedNonRetryableErrors\");\n+  }\n \n-    @Override\n-    protected int send(List<Event> events) throws BackendServiceFailedException {\n-        if (events.size() == 0) {\n-            return 0;\n-        }\n+  @Override\n+  public ProcessorStatus ping() {\n+    return client.ping() ? ProcessorStatus.AVAILABLE : ProcessorStatus.UNAVAILABLE;\n+  }\n \n-        int droppedCount;\n-        Map<EventWrapper, ValidationResult> nonRetryableErrorsMap = new HashMap<>(events.size());\n-        //event-id -> event-wrapper\n-        Map<String, EventWrapper> readyToSend = new HashMap<>(events.size());\n-        for (Event event : events) {\n-            Optional<String> index = indexResolver.resolve(event);\n-            EventWrapper wrapper = new EventWrapper(event, index.orElse(null));\n-            if (index.isPresent()) {\n-                readyToSend.put(wrapper.getId(), wrapper);\n-            } else {\n-                nonRetryableErrorsMap.put(wrapper, ValidationResult.error(\"Event index is null\"));\n-            }\n-        }\n-\n-        try {\n-            if (!readyToSend.isEmpty()) {\n-                int retryCount = retryLimit;\n-                do {\n-                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n-                    readyToSend.values().forEach(wrapper -> writeEventToStream(dataStream, wrapper));\n-                    ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n-\n-                    if (result.getTotalErrors() != 0) {\n-                        resultProcess(result).forEach((eventId, validationResult) ->\n-                                nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n-                    } else {\n-                        readyToSend.clear();\n-                    }\n-                } while (!readyToSend.isEmpty() && 0 < retryCount--);\n-\n-                if (!readyToSend.isEmpty()) {\n-                    throw new Exception(\"Have retryable errors in elasticsearch response\");\n-                }\n-            }\n-\n-            droppedCount = errorsProcess(nonRetryableErrorsMap);\n-        } catch (Exception e) {\n-            throw new BackendServiceFailedException(e);\n-        }\n-\n-        return events.size() - droppedCount;\n+  @Override\n+  protected int send(List<Event> events) throws BackendServiceFailedException {\n+    if (events.size() == 0) {\n+      return 0;\n     }\n \n-    private Map<String, ValidationResult> resultProcess(ElasticResponseHandler.Result result) {\n-        LOGGER.info(\n-                \"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\",\n-                result.getRetryableErrorCount(),\n-                result.getNonRetryableErrorCount(),\n-                result.getUnknownErrorCount(),\n-                result.getTotalErrors()\n-        );\n-\n-        Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors().size());\n-        for (Map.Entry<String, ErrorInfo> entry : result.getErrors().entrySet()) {\n-            String eventId = entry.getKey();\n-            ErrorInfo errorInfo = entry.getValue();\n-            ErrorType type = errorInfo.getType();\n-            if (type.equals(ErrorType.NON_RETRYABLE) || (type.equals(ErrorType.UNKNOWN) && !retryOnUnknownErrors)) {\n-                errorsMap.put(eventId, ValidationResult.error(errorInfo.getError()));\n-            }\n-        }\n-        return errorsMap;\n+    int droppedCount;\n+    Map<EventWrapper, ValidationResult> nonRetryableErrorsMap = new HashMap<>(events.size());\n+    //event-id -> event-wrapper\n+    Map<String, EventWrapper> readyToSend = new HashMap<>(events.size());\n+    for (Event event : events) {\n+      Optional<String> index = indexResolver.resolve(event);\n+      EventWrapper wrapper = new EventWrapper(event, index.orElse(null));\n+      if (index.isPresent()) {\n+        readyToSend.put(wrapper.getId(), wrapper);\n+      } else {\n+        nonRetryableErrorsMap.put(wrapper, ValidationResult.error(\"Event index is null\"));\n+      }\n     }\n \n-    /**\n-     * @return count of dropped events\n-     */\n-    private int errorsProcess(Map<EventWrapper, ValidationResult> nonRetryableErrorsInfo) {\n-        if (nonRetryableErrorsInfo.isEmpty()) {\n-            return 0;\n-        }\n-        if (leproseryEnable) {\n-            try {\n-                leproserySender.convertAndSend(nonRetryableErrorsInfo);\n-                return 0;\n-            } catch (Exception e) {\n-                elasticsearchDroppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n-                return nonRetryableErrorsInfo.size();\n-            }\n-        } else {\n-            nonRetryableErrorsInfo.forEach((wrapper, validationResult) -> {\n-                LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n-                        wrapper.getId(),\n-                        wrapper.getIndex(),\n-                        validationResult.error());\n-                Event event = wrapper.getEvent();\n-            });\n-            elasticsearchDroppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n-            return nonRetryableErrorsInfo.size();\n+    try {\n+      if (!readyToSend.isEmpty()) {\n+        int retryCount = retryLimit;\n+        do {\n+          ByteArrayOutputStream dataStream = new ByteArrayOutputStream(\n+            readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n+          readyToSend.values().forEach(wrapper -> writeEventToStream(dataStream, wrapper));\n+          ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n+\n+          if (result.getTotalErrors() != 0) {\n+            resultProcess(result).forEach((eventId, validationResult) ->\n+              nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n+          } else {\n+            readyToSend.clear();\n+          }\n+        } while (!readyToSend.isEmpty() && 0 < retryCount--);\n+\n+        if (!readyToSend.isEmpty()) {\n+          throw new Exception(\"Have retryable errors in elasticsearch response\");\n         }\n-    }\n+      }\n \n-    private void writeEventToStream(ByteArrayOutputStream stream, EventWrapper wrapper) {\n-        toUnchecked(() -> {\n-            IndexToElasticJsonWriter.writeIndex(stream, wrapper.getIndex(), wrapper.getId());\n-            stream.write('\\n');\n-            EventToElasticJsonWriter.writeEvent(stream, wrapper.getEvent(), mergePropertiesTagToRoot);\n-            stream.write('\\n');\n-        });\n+      droppedCount = errorsProcess(nonRetryableErrorsMap);\n+    } catch (Exception e) {\n+      throw new BackendServiceFailedException(e);\n     }\n \n-    private static class Props {\n-        static final Parameter<Boolean> MERGE_PROPERTIES_TAG_TO_ROOT = Parameter\n-                .booleanParameter(\"elastic.mergePropertiesTagToRoot\")\n-                .withDefault(Boolean.FALSE)\n-                .build();\n-\n-        static final Parameter<IndexPolicy> INDEX_POLICY =\n-                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n-                        withDefault(IndexPolicy.DAILY).\n-                        build();\n-\n-        static final Parameter<Integer> RETRY_LIMIT = Parameter\n-                .integerParameter(\"retryLimit\")\n-                .withDefault(3)\n-                .withValidator(IntegerValidators.nonNegative())\n-                .build();\n-\n-        static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter\n-                .booleanParameter(\"retryOnUnknownErrors\")\n-                .withDefault(Boolean.FALSE)\n-                .build();\n-\n-        static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter\n-                .booleanParameter(\"leprosery.enable\")\n-                .withDefault(false)\n-                .build();\n+    return events.size() - droppedCount;\n+  }\n+\n+  private Map<String, ValidationResult> resultProcess(ElasticResponseHandler.Result result) {\n+    LOGGER.info(\n+      \"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\",\n+      result.getRetryableErrorCount(),\n+      result.getNonRetryableErrorCount(),\n+      result.getUnknownErrorCount(),\n+      result.getTotalErrors()\n+    );\n+\n+    Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors().size());\n+    for (Map.Entry<String, ErrorInfo> entry : result.getErrors().entrySet()) {\n+      String eventId = entry.getKey();\n+      ErrorInfo errorInfo = entry.getValue();\n+      ErrorType type = errorInfo.getType();\n+      if (type.equals(ErrorType.NON_RETRYABLE) || (type.equals(ErrorType.UNKNOWN) && !retryOnUnknownErrors)) {\n+        errorsMap.put(eventId, ValidationResult.error(errorInfo.getError()));\n+      }\n+    }\n+    return errorsMap;\n+  }\n+\n+  /**\n+   * @return count of dropped events\n+   */\n+  private int errorsProcess(Map<EventWrapper, ValidationResult> nonRetryableErrorsInfo) {\n+    if (nonRetryableErrorsInfo.isEmpty()) {\n+      return 0;\n+    }\n+    if (leproseryEnable) {\n+      try {\n+        leproserySender.convertAndSend(nonRetryableErrorsInfo);\n+        return 0;\n+      } catch (Exception e) {\n+        elasticsearchDroppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n+        return nonRetryableErrorsInfo.size();\n+      }\n+    } else {\n+      nonRetryableErrorsInfo.forEach((wrapper, validationResult) -> {\n+        LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n+          wrapper.getId(),\n+          wrapper.getIndex(),\n+          validationResult.error());\n+        Event event = wrapper.getEvent();\n+      });\n+      elasticsearchDroppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n+      return nonRetryableErrorsInfo.size();\n     }\n+  }\n+\n+  private void writeEventToStream(ByteArrayOutputStream stream, EventWrapper wrapper) {\n+    toUnchecked(() -> {\n+      IndexToElasticJsonWriter.writeIndex(stream, wrapper.getIndex(), wrapper.getId());\n+      stream.write('\\n');\n+      EventToElasticJsonWriter.writeEvent(stream, wrapper.getEvent(), mergePropertiesTagToRoot);\n+      stream.write('\\n');\n+    });\n+  }\n+\n+  private static class Props {\n+    static final Parameter<Boolean> MERGE_PROPERTIES_TAG_TO_ROOT = Parameter\n+      .booleanParameter(\"elastic.mergePropertiesTagToRoot\")\n+      .withDefault(Boolean.FALSE)\n+      .build();\n+\n+    static final Parameter<IndexPolicy> INDEX_POLICY =\n+      Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n+        withDefault(IndexPolicy.DAILY).\n+        build();\n+\n+    static final Parameter<Integer> RETRY_LIMIT = Parameter\n+      .integerParameter(\"retryLimit\")\n+      .withDefault(3)\n+      .withValidator(IntegerValidators.nonNegative())\n+      .build();\n+\n+    static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter\n+      .booleanParameter(\"retryOnUnknownErrors\")\n+      .withDefault(Boolean.FALSE)\n+      .build();\n+\n+    static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter\n+      .booleanParameter(\"leprosery.enable\")\n+      .withDefault(false)\n+      .build();\n+  }\n \n }\n",
            "diff_size": 217
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/85/ElasticSender.java\nindex 1eba79616b9..264247ee2e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/85/ElasticSender.java\n@@ -32,8 +32,7 @@ public class ElasticSender extends Sender {\n     private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n \n     private static final int EXPECTED_EVENT_SIZE_BYTES = 2_048;\n-\n-    private final boolean mergePropertiesTagToRoot;\n+private final boolean mergePropertiesTagToRoot;\n \n     private final IndexPolicy indexPolicy;\n     private final IndexResolver indexResolver;\n@@ -67,8 +66,7 @@ public class ElasticSender extends Sender {\n                 metricsCollector,\n                 mergePropertiesTagToRoot)\n                 : null;\n-\n-        this.elasticsearchDroppedNonRetryableErrorsMeter = metricsCollector.meter(\"elasticsearchDroppedNonRetryableErrors\");\n+this.elasticsearchDroppedNonRetryableErrorsMeter = metricsCollector.meter(\"elasticsearchDroppedNonRetryableErrors\");\n     }\n \n     @Override\n@@ -105,8 +103,7 @@ public class ElasticSender extends Sender {\n                     ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n \n                     if (result.getTotalErrors() != 0) {\n-                        resultProcess(result).forEach((eventId, validationResult) ->\n-                                nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n+                        resultProcess(result).forEach((eventId, validationResult) -> nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n                     } else {\n                         readyToSend.clear();\n                     }\n@@ -190,9 +187,7 @@ public class ElasticSender extends Sender {\n                 .build();\n \n         static final Parameter<IndexPolicy> INDEX_POLICY =\n-                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n-                        withDefault(IndexPolicy.DAILY).\n-                        build();\n+                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).withDefault(IndexPolicy.DAILY).build();\n \n         static final Parameter<Integer> RETRY_LIMIT = Parameter\n                 .integerParameter(\"retryLimit\")\n@@ -210,5 +205,4 @@ public class ElasticSender extends Sender {\n                 .withDefault(false)\n                 .build();\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/85/ElasticSender.java\nindex 1eba79616b9..6936e0d5498 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/85/ElasticSender.java\n@@ -15,7 +15,6 @@ import ru.kontur.vostok.hercules.util.parameter.Parameter;\n import ru.kontur.vostok.hercules.util.properties.PropertiesUtil;\n import ru.kontur.vostok.hercules.util.validation.IntegerValidators;\n import ru.kontur.vostok.hercules.util.validation.ValidationResult;\n-\n import java.io.ByteArrayOutputStream;\n import java.util.HashMap;\n import java.util.List;\n@@ -28,46 +27,44 @@ import static ru.kontur.vostok.hercules.util.throwable.ThrowableUtil.toUnchecked\n /**\n  * @author Gregory Koshelev\n  */\n+\n public class ElasticSender extends Sender {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(ElasticSender.class);\n     private static final int EXPECTED_EVENT_SIZE_BYTES = 2_048;\n-\n     private final boolean mergePropertiesTagToRoot;\n-\n     private final IndexPolicy indexPolicy;\n     private final IndexResolver indexResolver;\n-\n     private final ElasticClient client;\n-\n     private final int retryLimit;\n     private final boolean retryOnUnknownErrors;\n-\n     private final boolean leproseryEnable;\n     private final LeproserySender leproserySender;\n-\n     private final Meter elasticsearchDroppedNonRetryableErrorsMeter;\n \n     public ElasticSender(Properties properties, MetricsCollector metricsCollector) {\n         super(properties, metricsCollector);\n-\n-        this.mergePropertiesTagToRoot = PropertiesUtil.get(Props.MERGE_PROPERTIES_TAG_TO_ROOT, properties).get();\n-\n-        this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties).get();\n+        this.mergePropertiesTagToRoot = PropertiesUtil.get(Props.MERGE_PROPERTIES_TAG_TO_ROOT, properties)\n+        .get();\n+        this.indexPolicy = PropertiesUtil.get(Props.INDEX_POLICY, properties)\n+        .get();\n         this.indexResolver = IndexResolver.forPolicy(indexPolicy);\n-\n-        this.client = new ElasticClient(PropertiesUtil.ofScope(properties, \"elastic.client\"), indexPolicy, metricsCollector);\n-\n-        this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties).get();\n-        this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties).get();\n-\n-        this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties).get();\n-        this.leproserySender = leproseryEnable\n-                ? new LeproserySender(PropertiesUtil.ofScope(properties, Scopes.LEPROSERY),\n-                metricsCollector,\n-                mergePropertiesTagToRoot)\n-                : null;\n-\n+        this.client = new ElasticClient(\n+            PropertiesUtil.ofScope(properties, \"elastic.client\"),\n+            indexPolicy,\n+            metricsCollector\n+        );\n+        this.retryLimit = PropertiesUtil.get(Props.RETRY_LIMIT, properties)\n+        .get();\n+        this.retryOnUnknownErrors = PropertiesUtil.get(Props.RETRY_ON_UNKNOWN_ERRORS, properties)\n+        .get();\n+        this.leproseryEnable = PropertiesUtil.get(Props.LEPROSERY_ENABLE, properties)\n+        .get();\n+        this.leproserySender = leproseryEnable ? new LeproserySender(\n+            PropertiesUtil.ofScope(properties, Scopes.LEPROSERY),\n+            metricsCollector,\n+            mergePropertiesTagToRoot\n+                               ) : null;\n         this.elasticsearchDroppedNonRetryableErrorsMeter = metricsCollector.meter(\"elasticsearchDroppedNonRetryableErrors\");\n     }\n \n@@ -102,16 +99,14 @@ public class ElasticSender extends Sender {\n                 do {\n                     ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n                     readyToSend.values().forEach(wrapper -> writeEventToStream(dataStream, wrapper));\n-                    ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n \n+                    ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n                     if (result.getTotalErrors() != 0) {\n-                        resultProcess(result).forEach((eventId, validationResult) ->\n-                                nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n+                        resultProcess(result).forEach((eventId, validationResult) -> nonRetryableErrorsMap.put(readyToSend.remove(eventId), validationResult));\n                     } else {\n                         readyToSend.clear();\n                     }\n                 } while (!readyToSend.isEmpty() && 0 < retryCount--);\n-\n                 if (!readyToSend.isEmpty()) {\n                     throw new Exception(\"Have retryable errors in elasticsearch response\");\n                 }\n@@ -121,21 +116,16 @@ public class ElasticSender extends Sender {\n         } catch (Exception e) {\n             throw new BackendServiceFailedException(e);\n         }\n-\n         return events.size() - droppedCount;\n     }\n \n     private Map<String, ValidationResult> resultProcess(ElasticResponseHandler.Result result) {\n-        LOGGER.info(\n-                \"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\",\n-                result.getRetryableErrorCount(),\n-                result.getNonRetryableErrorCount(),\n-                result.getUnknownErrorCount(),\n-                result.getTotalErrors()\n-        );\n+        LOGGER.info(\"Error statistics (retryable/non retryable/unknown/total): {}/{}/{}/{}\", result.getRetryableErrorCount(), result.getNonRetryableErrorCount(), result.getUnknownErrorCount(), result.getTotalErrors());\n \n-        Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors().size());\n-        for (Map.Entry<String, ErrorInfo> entry : result.getErrors().entrySet()) {\n+        Map<String, ValidationResult> errorsMap = new HashMap<>(result.getErrors()\n+        .size());\n+        for (Map.Entry<String, ErrorInfo> entry : result.getErrors()\n+        .entrySet()) {\n             String eventId = entry.getKey();\n             ErrorInfo errorInfo = entry.getValue();\n             ErrorType type = errorInfo.getType();\n@@ -149,6 +139,7 @@ public class ElasticSender extends Sender {\n     /**\n      * @return count of dropped events\n      */\n+\n     private int errorsProcess(Map<EventWrapper, ValidationResult> nonRetryableErrorsInfo) {\n         if (nonRetryableErrorsInfo.isEmpty()) {\n             return 0;\n@@ -163,10 +154,8 @@ public class ElasticSender extends Sender {\n             }\n         } else {\n             nonRetryableErrorsInfo.forEach((wrapper, validationResult) -> {\n-                LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\",\n-                        wrapper.getId(),\n-                        wrapper.getIndex(),\n-                        validationResult.error());\n+                LOGGER.warn(\"Non retryable error info: id = {}, index = {}, reason = {}\", wrapper.getId(), wrapper.getIndex(), validationResult.error());\n+\n                 Event event = wrapper.getEvent();\n             });\n             elasticsearchDroppedNonRetryableErrorsMeter.mark(nonRetryableErrorsInfo.size());\n@@ -184,31 +173,25 @@ public class ElasticSender extends Sender {\n     }\n \n     private static class Props {\n-        static final Parameter<Boolean> MERGE_PROPERTIES_TAG_TO_ROOT = Parameter\n-                .booleanParameter(\"elastic.mergePropertiesTagToRoot\")\n-                .withDefault(Boolean.FALSE)\n-                .build();\n-\n-        static final Parameter<IndexPolicy> INDEX_POLICY =\n-                Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class).\n-                        withDefault(IndexPolicy.DAILY).\n-                        build();\n-\n-        static final Parameter<Integer> RETRY_LIMIT = Parameter\n-                .integerParameter(\"retryLimit\")\n-                .withDefault(3)\n-                .withValidator(IntegerValidators.nonNegative())\n-                .build();\n-\n-        static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter\n-                .booleanParameter(\"retryOnUnknownErrors\")\n-                .withDefault(Boolean.FALSE)\n-                .build();\n-\n-        static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter\n-                .booleanParameter(\"leprosery.enable\")\n-                .withDefault(false)\n-                .build();\n+        static final Parameter<Boolean> MERGE_PROPERTIES_TAG_TO_ROOT = Parameter.booleanParameter(\"elastic.mergePropertiesTagToRoot\")\n+        .withDefault(Boolean.FALSE)\n+        .build();\n+\n+        static final Parameter<IndexPolicy> INDEX_POLICY = Parameter.enumParameter(\"elastic.index.policy\", IndexPolicy.class)\n+        .withDefault(IndexPolicy.DAILY)\n+        .build();\n+\n+        static final Parameter<Integer> RETRY_LIMIT = Parameter.integerParameter(\"retryLimit\")\n+        .withDefault(3)\n+        .withValidator(IntegerValidators.nonNegative())\n+        .build();\n+\n+        static final Parameter<Boolean> RETRY_ON_UNKNOWN_ERRORS = Parameter.booleanParameter(\"retryOnUnknownErrors\")\n+        .withDefault(Boolean.FALSE)\n+        .build();\n+\n+        static final Parameter<Boolean> LEPROSERY_ENABLE = Parameter.booleanParameter(\"leprosery.enable\")\n+        .withDefault(false)\n+        .build();\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 79
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 302).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "column": "100",
                    "severity": "warning",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/85/ElasticSender.java\nindex 1eba79616b9..fdbc6c885e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/85/ElasticSender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_random/85/ElasticSender.java\n@@ -100,8 +100,8 @@ public class ElasticSender extends Sender {\n             if (!readyToSend.isEmpty()) {\n                 int retryCount = retryLimit;\n                 do {\n-                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size() * EXPECTED_EVENT_SIZE_BYTES);//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event size\n-                    readyToSend.values().forEach(wrapper -> writeEventToStream(dataStream, wrapper));\n+                    ByteArrayOutputStream dataStream = new ByteArrayOutputStream(readyToSend.size()* EXPECTED_EVENT_SIZE_BYTES );//TODO: Replace EXPECTED_EVENT_SIZE_BYTES with heuristic is depending on Hercules event sizereadyToSend.values().forEach(wrapper -> writeEventToStream(dataStream, wrapper));\n+                    ElasticResponseHandler.values().forEach(wrapper -> writeEventToStream(dataStream, wrapper));\n                     ElasticResponseHandler.Result result = client.index(dataStream.toByteArray());\n \n                     if (result.getTotalErrors() != 0) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}