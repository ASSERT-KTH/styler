{
    "project_name": "neo4j-neo4j",
    "error_id": "2781",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2781/LoggingMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2781/LoggingMonitor.java\nindex 885ac1fd4b2..73fc3823c84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2781/LoggingMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2781/LoggingMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.index;\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -33,63 +34,62 @@ public class LoggingMonitor implements IndexProvider.Monitor\n {\n     private final Log log;\n \n-    public LoggingMonitor( Log log )\n+    public LoggingMonitor(Log log)\n     {\n         this.log = log;\n     }\n \n     @Override\n-    public void failedToOpenIndex( IndexDescriptor descriptor, String action, Exception cause )\n+    public void failedToOpenIndex(IndexDescriptor descriptor, String action, Exception cause)\n     {\n-        if ( log.isDebugEnabled() )\n+        if (log.isDebugEnabled())\n         {\n-            log.warn( \"Failed to open index:\" + descriptor.getId() + \". \" + action, cause );\n-        }\n-        else\n+            log.warn(\"Failed to open index:\" + descriptor.getId() + \". \" + action, cause);\n+        } else\n         {\n-            log.warn( \"Failed to open index:\" + descriptor.getId() + \". \" + action + \" Cause: \" + cause.getMessage() );\n+            log.warn(\"Failed to open index:\" + descriptor.getId() + \". \" + action + \" Cause: \" + cause.getMessage());\n         }\n     }\n \n     @Override\n-    public void recoveryCleanupRegistered( Path indexFile, IndexDescriptor index )\n+    public void recoveryCleanupRegistered(Path indexFile, IndexDescriptor index)\n     {\n-        log.info( \"Schema index cleanup job registered: \" + indexDescription( indexFile, index ) );\n+        log.info(\"Schema index cleanup job registered: \" + indexDescription(indexFile, index));\n     }\n \n     @Override\n-    public void recoveryCleanupStarted( Path indexFile, IndexDescriptor index )\n+    public void recoveryCleanupStarted(Path indexFile, IndexDescriptor index)\n     {\n-        log.info( \"Schema index cleanup job started: \" + indexDescription( indexFile, index ) );\n+        log.info(\"Schema index cleanup job started: \" + indexDescription(indexFile, index));\n     }\n \n     @Override\n-    public void recoveryCleanupFinished( Path indexFile, IndexDescriptor index,\n-            long numberOfPagesVisited, long numberOfTreeNodes, long numberOfCleanedCrashPointers, long durationMillis )\n+    public void recoveryCleanupFinished(Path indexFile, IndexDescriptor index,\n+                                        long numberOfPagesVisited, long numberOfTreeNodes, long numberOfCleanedCrashPointers, long durationMillis)\n     {\n         StringJoiner joiner =\n-                new StringJoiner( \", \", \"Schema index cleanup job finished: \" + indexDescription( indexFile, index ) + \" \", \"\" );\n-        joiner.add( \"Number of pages visited: \" + numberOfPagesVisited );\n-        joiner.add( \"Number of tree nodes: \" + numberOfTreeNodes );\n-        joiner.add( \"Number of cleaned crashed pointers: \" + numberOfCleanedCrashPointers );\n-        joiner.add( \"Time spent: \" + duration( durationMillis ) );\n-        log.info( joiner.toString() );\n+          new StringJoiner(\", \", \"Schema index cleanup job finished: \" + indexDescription(indexFile, index) + \" \", \"\");\n+        joiner.add(\"Number of pages visited: \" + numberOfPagesVisited);\n+        joiner.add(\"Number of tree nodes: \" + numberOfTreeNodes);\n+        joiner.add(\"Number of cleaned crashed pointers: \" + numberOfCleanedCrashPointers);\n+        joiner.add(\"Time spent: \" + duration(durationMillis));\n+        log.info(joiner.toString());\n     }\n \n     @Override\n-    public void recoveryCleanupClosed( Path indexFile, IndexDescriptor index )\n+    public void recoveryCleanupClosed(Path indexFile, IndexDescriptor index)\n     {\n-        log.info( \"Schema index cleanup job closed: \" + indexDescription( indexFile, index ) );\n+        log.info(\"Schema index cleanup job closed: \" + indexDescription(indexFile, index));\n     }\n \n     @Override\n-    public void recoveryCleanupFailed( Path indexFile, IndexDescriptor index, Throwable throwable )\n+    public void recoveryCleanupFailed(Path indexFile, IndexDescriptor index, Throwable throwable)\n     {\n-        log.info( String.format( \"Schema index cleanup job failed: %s.%nCaused by: %s\",\n-                indexDescription( indexFile, index ), ExceptionUtils.getStackTrace( throwable ) ) );\n+        log.info(String.format(\"Schema index cleanup job failed: %s.%nCaused by: %s\",\n+          indexDescription(indexFile, index), ExceptionUtils.getStackTrace(throwable)));\n     }\n \n-    private static String indexDescription( Path indexFile, IndexDescriptor indexDescriptor )\n+    private static String indexDescription(Path indexFile, IndexDescriptor indexDescriptor)\n     {\n         return \"descriptor=\" + indexDescriptor + \", indexFile=\" + indexFile.toAbsolutePath();\n     }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}