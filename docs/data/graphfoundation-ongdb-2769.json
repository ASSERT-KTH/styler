{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2769",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2769/RelationshipRecordFormatV3_0_6.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2769/RelationshipRecordFormatV3_0_6.java\nindex 9e12e4c3d30..c274243b7cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2769/RelationshipRecordFormatV3_0_6.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2769/RelationshipRecordFormatV3_0_6.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.highlimit.v306;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -28,7 +29,7 @@ import static org.neo4j.kernel.impl.store.format.highlimit.Reference.toRelative;\n /**\n  * LEGEND:\n  * V: variable between 3B-8B\n- *\n+ * <p>\n  * Record format:\n  * 1B   header\n  * 2B   relationship type\n@@ -40,7 +41,7 @@ import static org.neo4j.kernel.impl.store.format.highlimit.Reference.toRelative;\n  * VB   end node chain previous relationship\n  * VB   end node chain next relationship\n  * => 24B-59B\n- *\n+ * <p>\n  * Fixed reference format:\n  * 1B   header\n  * 2B   relationship type\n@@ -55,270 +56,268 @@ import static org.neo4j.kernel.impl.store.format.highlimit.Reference.toRelative;\n  */\n class RelationshipRecordFormatV3_0_6 extends BaseHighLimitRecordFormatV3_0_6<RelationshipRecord>\n {\n-    static final int RECORD_SIZE = 32;\n-    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n-                                                Short.BYTES /* type */ +\n-                                                Byte.BYTES /* modifiers */ +\n-                                                Integer.BYTES /* start node */ +\n-                                                Integer.BYTES /* end node */ +\n-                                                Integer.BYTES /* first prev rel */ +\n-                                                Integer.BYTES /* first next rel */ +\n-                                                Integer.BYTES /* second prev rel */ +\n-                                                Integer.BYTES /* second next rel */ +\n-                                                Integer.BYTES /* next property */;\n-\n-    private static final int FIRST_IN_FIRST_CHAIN_BIT = 0b0000_1000;\n-    private static final int FIRST_IN_SECOND_CHAIN_BIT = 0b0001_0000;\n-    private static final int HAS_FIRST_CHAIN_NEXT_BIT = 0b0010_0000;\n-    private static final int HAS_SECOND_CHAIN_NEXT_BIT = 0b0100_0000;\n-    private static final int HAS_PROPERTY_BIT = 0b1000_0000;\n-\n-    private static final long FIRST_NODE_BIT = 0b0000_0001L;\n-    private static final long SECOND_NODE_BIT = 0b0000_0010L;\n-    private static final long FIRST_PREV_REL_BIT = 0b0000_0100L;\n-    private static final long FIRST_NEXT_REL_BIT = 0b0000_1000L;\n-    private static final long SECOND_RREV_REL_BIT = 0b0001_0000L;\n-    private static final long SECOND_NEXT_REL_BIT = 0b0010_0000L;\n-    private static final long NEXT_PROP_BIT = 0b1100_0000L;\n-\n-    private static final long ONE_BIT_OVERFLOW_BIT_MASK = 0xFFFF_FFFE_0000_0000L;\n-    private static final long THREE_BITS_OVERFLOW_BIT_MASK = 0xFFFF_FFFC_0000_0000L;\n-    private static final long HIGH_DWORD_LAST_BIT_MASK = 0x100000000L;\n-\n-    private static final long TWO_BIT_FIXED_REFERENCE_BIT_MASK = 0x300000000L;\n-\n-    RelationshipRecordFormatV3_0_6()\n-    {\n-        this( RECORD_SIZE );\n-    }\n-\n-    RelationshipRecordFormatV3_0_6( int recordSize )\n-    {\n-        super( fixedRecordSize( recordSize ), 0 );\n-    }\n-\n-    @Override\n-    public RelationshipRecord newRecord()\n-    {\n-        return new RelationshipRecord( -1 );\n-    }\n-\n-    @Override\n-    protected void doReadInternal(\n-            RelationshipRecord record, PageCursor cursor, int recordSize, long headerByte, boolean inUse )\n-    {\n-        int type = cursor.getShort() & 0xFFFF;\n-        if ( record.isUseFixedReferences() )\n-        {\n-            // read record in fixed reference format\n-            readFixedReferencesRecord( record, cursor, headerByte, inUse, type );\n-            record.setUseFixedReferences( true );\n-        }\n-        else\n-        {\n-            long recordId = record.getId();\n-            record.initialize( inUse,\n-                    decodeCompressedReference( cursor, headerByte, HAS_PROPERTY_BIT, NULL ),\n-                    decodeCompressedReference( cursor ),\n-                    decodeCompressedReference( cursor ),\n-                    type,\n-                    decodeAbsoluteOrRelative( cursor, headerByte, FIRST_IN_FIRST_CHAIN_BIT, recordId ),\n-                    decodeAbsoluteIfPresent( cursor, headerByte, HAS_FIRST_CHAIN_NEXT_BIT, recordId ),\n-                    decodeAbsoluteOrRelative( cursor, headerByte, FIRST_IN_SECOND_CHAIN_BIT, recordId ),\n-                    decodeAbsoluteIfPresent( cursor, headerByte, HAS_SECOND_CHAIN_NEXT_BIT, recordId ),\n-                    has( headerByte, FIRST_IN_FIRST_CHAIN_BIT ),\n-                    has( headerByte, FIRST_IN_SECOND_CHAIN_BIT ) );\n-        }\n-    }\n-\n-    @Override\n-    protected byte headerBits( RelationshipRecord record )\n-    {\n-        byte header = 0;\n-        header = set( header, FIRST_IN_FIRST_CHAIN_BIT, record.isFirstInFirstChain() );\n-        header = set( header, FIRST_IN_SECOND_CHAIN_BIT, record.isFirstInSecondChain() );\n-        header = set( header, HAS_PROPERTY_BIT, record.getNextProp(), NULL );\n-        header = set( header, HAS_FIRST_CHAIN_NEXT_BIT, record.getFirstNextRel(), NULL );\n-        header = set( header, HAS_SECOND_CHAIN_NEXT_BIT, record.getSecondNextRel(), NULL );\n-        return header;\n-    }\n-\n-    @Override\n-    protected int requiredDataLength( RelationshipRecord record )\n-    {\n-        long recordId = record.getId();\n-        return Short.BYTES + // type\n-               length( record.getNextProp(), NULL ) +\n-               length( record.getFirstNode() ) +\n-               length( record.getSecondNode() ) +\n-               length( getFirstPrevReference( record, recordId ) ) +\n-               getRelativeReferenceLength( record.getFirstNextRel(), recordId ) +\n-               length( getSecondPrevReference( record, recordId ) ) +\n-               getRelativeReferenceLength( record.getSecondNextRel(), recordId );\n-    }\n-\n-    @Override\n-    protected void doWriteInternal( RelationshipRecord record, PageCursor cursor )\n-    {\n-        cursor.putShort( (short) record.getType() );\n-        if ( record.isUseFixedReferences() )\n-        {\n-            // write record in fixed reference format\n-            writeFixedReferencesRecord( record, cursor );\n-        }\n-        else\n-        {\n-            long recordId = record.getId();\n-            encode( cursor, record.getNextProp(), NULL );\n-            encode( cursor, record.getFirstNode() );\n-            encode( cursor, record.getSecondNode() );\n-\n-            encode( cursor, getFirstPrevReference( record, recordId ) );\n-            if ( record.getFirstNextRel() != NULL )\n-            {\n-                encode( cursor, toRelative( record.getFirstNextRel(), recordId ) );\n-            }\n-            encode( cursor, getSecondPrevReference( record, recordId ) );\n-            if ( record.getSecondNextRel() != NULL )\n-            {\n-                encode( cursor, toRelative( record.getSecondNextRel(), recordId ) );\n-            }\n-        }\n-    }\n-\n-    @Override\n-    protected boolean canUseFixedReferences( RelationshipRecord record, int recordSize )\n-    {\n-        return (isRecordBigEnoughForFixedReferences( recordSize ) &&\n-                (record.getFirstNode() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n-               ((record.getSecondNode() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n-               ((record.getFirstPrevRel() == NULL) || ((record.getFirstPrevRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n-               ((record.getFirstNextRel() == NULL) || ((record.getFirstNextRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n-               ((record.getSecondPrevRel() == NULL) || ((record.getSecondPrevRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n-               ((record.getSecondNextRel() == NULL) || ((record.getSecondNextRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n-               ((record.getNextProp() == NULL) || ((record.getNextProp() & THREE_BITS_OVERFLOW_BIT_MASK) == 0));\n-    }\n-\n-    private boolean isRecordBigEnoughForFixedReferences( int recordSize )\n-    {\n-        return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n-    }\n-\n-    private long decodeAbsoluteOrRelative( PageCursor cursor, long headerByte, int firstInStartBit, long recordId )\n-    {\n-        return has( headerByte, firstInStartBit ) ?\n-               decodeCompressedReference( cursor ) :\n-               toAbsolute( decodeCompressedReference( cursor ), recordId );\n-    }\n-\n-    private long getSecondPrevReference( RelationshipRecord record, long recordId )\n+  static final int RECORD_SIZE = 32;\n+  static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n+      Short.BYTES /* type */ +\n+      Byte.BYTES /* modifiers */ +\n+      Integer.BYTES /* start node */ +\n+      Integer.BYTES /* end node */ +\n+      Integer.BYTES /* first prev rel */ +\n+      Integer.BYTES /* first next rel */ +\n+      Integer.BYTES /* second prev rel */ +\n+      Integer.BYTES /* second next rel */ +\n+      Integer.BYTES /* next property */;\n+\n+  private static final int FIRST_IN_FIRST_CHAIN_BIT = 0b0000_1000;\n+  private static final int FIRST_IN_SECOND_CHAIN_BIT = 0b0001_0000;\n+  private static final int HAS_FIRST_CHAIN_NEXT_BIT = 0b0010_0000;\n+  private static final int HAS_SECOND_CHAIN_NEXT_BIT = 0b0100_0000;\n+  private static final int HAS_PROPERTY_BIT = 0b1000_0000;\n+\n+  private static final long FIRST_NODE_BIT = 0b0000_0001L;\n+  private static final long SECOND_NODE_BIT = 0b0000_0010L;\n+  private static final long FIRST_PREV_REL_BIT = 0b0000_0100L;\n+  private static final long FIRST_NEXT_REL_BIT = 0b0000_1000L;\n+  private static final long SECOND_RREV_REL_BIT = 0b0001_0000L;\n+  private static final long SECOND_NEXT_REL_BIT = 0b0010_0000L;\n+  private static final long NEXT_PROP_BIT = 0b1100_0000L;\n+\n+  private static final long ONE_BIT_OVERFLOW_BIT_MASK = 0xFFFF_FFFE_0000_0000L;\n+  private static final long THREE_BITS_OVERFLOW_BIT_MASK = 0xFFFF_FFFC_0000_0000L;\n+  private static final long HIGH_DWORD_LAST_BIT_MASK = 0x100000000L;\n+\n+  private static final long TWO_BIT_FIXED_REFERENCE_BIT_MASK = 0x300000000L;\n+\n+  RelationshipRecordFormatV3_0_6()\n+  {\n+    this(RECORD_SIZE);\n+  }\n+\n+  RelationshipRecordFormatV3_0_6(int recordSize)\n+  {\n+    super(fixedRecordSize(recordSize), 0);\n+  }\n+\n+  @Override\n+  public RelationshipRecord newRecord()\n+  {\n+    return new RelationshipRecord(-1);\n+  }\n+\n+  @Override\n+  protected void doReadInternal(\n+      RelationshipRecord record, PageCursor cursor, int recordSize, long headerByte, boolean inUse)\n+  {\n+    int type = cursor.getShort() & 0xFFFF;\n+    if (record.isUseFixedReferences())\n     {\n-        return record.isFirstInSecondChain() ? record.getSecondPrevRel() :\n-               toRelative( record.getSecondPrevRel(), recordId );\n-    }\n-\n-    private long getFirstPrevReference( RelationshipRecord record, long recordId )\n-    {\n-        return record.isFirstInFirstChain() ? record.getFirstPrevRel()\n-                                            : toRelative( record.getFirstPrevRel(), recordId );\n-    }\n-\n-    private int getRelativeReferenceLength( long absoluteReference, long recordId )\n+      // read record in fixed reference format\n+      readFixedReferencesRecord(record, cursor, headerByte, inUse, type);\n+      record.setUseFixedReferences(true);\n+    } else\n     {\n-        return absoluteReference != NULL ? length( toRelative( absoluteReference, recordId ) ) : 0;\n+      long recordId = record.getId();\n+      record.initialize(inUse,\n+          decodeCompressedReference(cursor, headerByte, HAS_PROPERTY_BIT, NULL),\n+          decodeCompressedReference(cursor),\n+          decodeCompressedReference(cursor),\n+          type,\n+          decodeAbsoluteOrRelative(cursor, headerByte, FIRST_IN_FIRST_CHAIN_BIT, recordId),\n+          decodeAbsoluteIfPresent(cursor, headerByte, HAS_FIRST_CHAIN_NEXT_BIT, recordId),\n+          decodeAbsoluteOrRelative(cursor, headerByte, FIRST_IN_SECOND_CHAIN_BIT, recordId),\n+          decodeAbsoluteIfPresent(cursor, headerByte, HAS_SECOND_CHAIN_NEXT_BIT, recordId),\n+          has(headerByte, FIRST_IN_FIRST_CHAIN_BIT),\n+          has(headerByte, FIRST_IN_SECOND_CHAIN_BIT));\n     }\n-\n-    private long decodeAbsoluteIfPresent( PageCursor cursor, long headerByte, int conditionBit, long recordId )\n+  }\n+\n+  @Override\n+  protected byte headerBits(RelationshipRecord record)\n+  {\n+    byte header = 0;\n+    header = set(header, FIRST_IN_FIRST_CHAIN_BIT, record.isFirstInFirstChain());\n+    header = set(header, FIRST_IN_SECOND_CHAIN_BIT, record.isFirstInSecondChain());\n+    header = set(header, HAS_PROPERTY_BIT, record.getNextProp(), NULL);\n+    header = set(header, HAS_FIRST_CHAIN_NEXT_BIT, record.getFirstNextRel(), NULL);\n+    header = set(header, HAS_SECOND_CHAIN_NEXT_BIT, record.getSecondNextRel(), NULL);\n+    return header;\n+  }\n+\n+  @Override\n+  protected int requiredDataLength(RelationshipRecord record)\n+  {\n+    long recordId = record.getId();\n+    return Short.BYTES + // type\n+        length(record.getNextProp(), NULL) +\n+        length(record.getFirstNode()) +\n+        length(record.getSecondNode()) +\n+        length(getFirstPrevReference(record, recordId)) +\n+        getRelativeReferenceLength(record.getFirstNextRel(), recordId) +\n+        length(getSecondPrevReference(record, recordId)) +\n+        getRelativeReferenceLength(record.getSecondNextRel(), recordId);\n+  }\n+\n+  @Override\n+  protected void doWriteInternal(RelationshipRecord record, PageCursor cursor)\n+  {\n+    cursor.putShort((short) record.getType());\n+    if (record.isUseFixedReferences())\n     {\n-        return has( headerByte, conditionBit ) ? toAbsolute( decodeCompressedReference( cursor ), recordId ) : NULL;\n-    }\n-\n-    private void readFixedReferencesRecord( RelationshipRecord record, PageCursor cursor, long headerByte,\n-            boolean inUse, int type )\n-    {\n-        // [    ,   x] first node higher order bits\n-        // [    ,  x ] second node high order bits\n-        // [    , x  ] first prev high order bits\n-        // [    ,x   ] first next high order bits\n-        // [   x,    ] second prev high order bits\n-        // [  x ,    ] second next high order bits\n-        // [xx  ,    ] next prop high order bits\n-        long modifiers = cursor.getByte();\n-\n-        long firstNode = cursor.getInt() & 0xFFFFFFFFL;\n-        long firstNodeMod = (modifiers & FIRST_NODE_BIT) << 32;\n-\n-        long secondNode = cursor.getInt() & 0xFFFFFFFFL;\n-        long secondNodeMod = (modifiers & SECOND_NODE_BIT) << 31;\n-\n-        long firstPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n-        long firstPrevRelMod = (modifiers & FIRST_PREV_REL_BIT) << 30;\n-\n-        long firstNextRel = cursor.getInt() & 0xFFFFFFFFL;\n-        long firstNextRelMod = (modifiers & FIRST_NEXT_REL_BIT) << 29;\n-\n-        long secondPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n-        long secondPrevRelMod = (modifiers & SECOND_RREV_REL_BIT) << 28;\n-\n-        long secondNextRel = cursor.getInt() & 0xFFFFFFFFL;\n-        long secondNextRelMod = (modifiers & SECOND_NEXT_REL_BIT) << 27;\n-\n-        long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n-        long nextPropMod = (modifiers & NEXT_PROP_BIT) << 26;\n-\n-        record.initialize( inUse,\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( nextProp, nextPropMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( firstNode, firstNodeMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( secondNode, secondNodeMod ),\n-                type,\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( firstPrevRel, firstPrevRelMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( firstNextRel, firstNextRelMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( secondPrevRel, secondPrevRelMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( secondNextRel, secondNextRelMod ),\n-                has( headerByte, FIRST_IN_FIRST_CHAIN_BIT ),\n-                has( headerByte, FIRST_IN_SECOND_CHAIN_BIT ) );\n-    }\n-\n-    private void writeFixedReferencesRecord( RelationshipRecord record, PageCursor cursor )\n+      // write record in fixed reference format\n+      writeFixedReferencesRecord(record, cursor);\n+    } else\n     {\n-        long firstNode = record.getFirstNode();\n-        short firstNodeMod = (short)((firstNode & HIGH_DWORD_LAST_BIT_MASK) >> 32);\n-\n-        long secondNode = record.getSecondNode();\n-        long secondNodeMod = (secondNode & HIGH_DWORD_LAST_BIT_MASK) >> 31;\n-\n-        long firstPrevRel = record.getFirstPrevRel();\n-        long firstPrevRelMod = firstPrevRel == NULL ? 0 : (firstPrevRel & HIGH_DWORD_LAST_BIT_MASK) >> 30;\n-\n-        long firstNextRel = record.getFirstNextRel();\n-        long firstNextRelMod = firstNextRel == NULL ? 0 : (firstNextRel & HIGH_DWORD_LAST_BIT_MASK) >> 29;\n-\n-        long secondPrevRel = record.getSecondPrevRel();\n-        long secondPrevRelMod = secondPrevRel == NULL ? 0 : (secondPrevRel & HIGH_DWORD_LAST_BIT_MASK) >> 28;\n-\n-        long secondNextRel = record.getSecondNextRel();\n-        long secondNextRelMod = secondNextRel == NULL ? 0 : (secondNextRel & HIGH_DWORD_LAST_BIT_MASK) >> 27;\n-\n-        long nextProp = record.getNextProp();\n-        long nextPropMod = nextProp == NULL ? 0 : (nextProp & TWO_BIT_FIXED_REFERENCE_BIT_MASK) >> 26;\n-\n-        // [    ,   x] first node higher order bits\n-        // [    ,  x ] second node high order bits\n-        // [    , x  ] first prev high order bits\n-        // [    ,x   ] first next high order bits\n-        // [   x,    ] second prev high order bits\n-        // [  x ,    ] second next high order bits\n-        // [xx  ,    ] next prop high order bits\n-        short modifiers = (short) (firstNodeMod | secondNodeMod | firstPrevRelMod | firstNextRelMod |\n-                                   secondPrevRelMod | secondNextRelMod | nextPropMod);\n-\n-        cursor.putByte( (byte) modifiers );\n-        cursor.putInt( (int) firstNode );\n-        cursor.putInt( (int) secondNode );\n-        cursor.putInt( (int) firstPrevRel );\n-        cursor.putInt( (int) firstNextRel );\n-        cursor.putInt( (int) secondPrevRel );\n-        cursor.putInt( (int) secondNextRel );\n-        cursor.putInt( (int) nextProp );\n+      long recordId = record.getId();\n+      encode(cursor, record.getNextProp(), NULL);\n+      encode(cursor, record.getFirstNode());\n+      encode(cursor, record.getSecondNode());\n+\n+      encode(cursor, getFirstPrevReference(record, recordId));\n+      if (record.getFirstNextRel() != NULL)\n+      {\n+        encode(cursor, toRelative(record.getFirstNextRel(), recordId));\n+      }\n+      encode(cursor, getSecondPrevReference(record, recordId));\n+      if (record.getSecondNextRel() != NULL)\n+      {\n+        encode(cursor, toRelative(record.getSecondNextRel(), recordId));\n+      }\n     }\n+  }\n+\n+  @Override\n+  protected boolean canUseFixedReferences(RelationshipRecord record, int recordSize)\n+  {\n+    return (isRecordBigEnoughForFixedReferences(recordSize) &&\n+        (record.getFirstNode() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n+        ((record.getSecondNode() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n+        ((record.getFirstPrevRel() == NULL) || ((record.getFirstPrevRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n+        ((record.getFirstNextRel() == NULL) || ((record.getFirstNextRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n+        ((record.getSecondPrevRel() == NULL) || ((record.getSecondPrevRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n+        ((record.getSecondNextRel() == NULL) || ((record.getSecondNextRel() & ONE_BIT_OVERFLOW_BIT_MASK) == 0)) &&\n+        ((record.getNextProp() == NULL) || ((record.getNextProp() & THREE_BITS_OVERFLOW_BIT_MASK) == 0));\n+  }\n+\n+  private boolean isRecordBigEnoughForFixedReferences(int recordSize)\n+  {\n+    return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n+  }\n+\n+  private long decodeAbsoluteOrRelative(PageCursor cursor, long headerByte, int firstInStartBit, long recordId)\n+  {\n+    return has(headerByte, firstInStartBit) ?\n+        decodeCompressedReference(cursor) :\n+        toAbsolute(decodeCompressedReference(cursor), recordId);\n+  }\n+\n+  private long getSecondPrevReference(RelationshipRecord record, long recordId)\n+  {\n+    return record.isFirstInSecondChain() ? record.getSecondPrevRel() :\n+        toRelative(record.getSecondPrevRel(), recordId);\n+  }\n+\n+  private long getFirstPrevReference(RelationshipRecord record, long recordId)\n+  {\n+    return record.isFirstInFirstChain() ? record.getFirstPrevRel()\n+        : toRelative(record.getFirstPrevRel(), recordId);\n+  }\n+\n+  private int getRelativeReferenceLength(long absoluteReference, long recordId)\n+  {\n+    return absoluteReference != NULL ? length(toRelative(absoluteReference, recordId)) : 0;\n+  }\n+\n+  private long decodeAbsoluteIfPresent(PageCursor cursor, long headerByte, int conditionBit, long recordId)\n+  {\n+    return has(headerByte, conditionBit) ? toAbsolute(decodeCompressedReference(cursor), recordId) : NULL;\n+  }\n+\n+  private void readFixedReferencesRecord(RelationshipRecord record, PageCursor cursor, long headerByte,\n+                                         boolean inUse, int type)\n+  {\n+    // [    ,   x] first node higher order bits\n+    // [    ,  x ] second node high order bits\n+    // [    , x  ] first prev high order bits\n+    // [    ,x   ] first next high order bits\n+    // [   x,    ] second prev high order bits\n+    // [  x ,    ] second next high order bits\n+    // [xx  ,    ] next prop high order bits\n+    long modifiers = cursor.getByte();\n+\n+    long firstNode = cursor.getInt() & 0xFFFFFFFFL;\n+    long firstNodeMod = (modifiers & FIRST_NODE_BIT) << 32;\n+\n+    long secondNode = cursor.getInt() & 0xFFFFFFFFL;\n+    long secondNodeMod = (modifiers & SECOND_NODE_BIT) << 31;\n+\n+    long firstPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n+    long firstPrevRelMod = (modifiers & FIRST_PREV_REL_BIT) << 30;\n+\n+    long firstNextRel = cursor.getInt() & 0xFFFFFFFFL;\n+    long firstNextRelMod = (modifiers & FIRST_NEXT_REL_BIT) << 29;\n+\n+    long secondPrevRel = cursor.getInt() & 0xFFFFFFFFL;\n+    long secondPrevRelMod = (modifiers & SECOND_RREV_REL_BIT) << 28;\n+\n+    long secondNextRel = cursor.getInt() & 0xFFFFFFFFL;\n+    long secondNextRelMod = (modifiers & SECOND_NEXT_REL_BIT) << 27;\n+\n+    long nextProp = cursor.getInt() & 0xFFFFFFFFL;\n+    long nextPropMod = (modifiers & NEXT_PROP_BIT) << 26;\n+\n+    record.initialize(inUse,\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(nextProp, nextPropMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstNode, firstNodeMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(secondNode, secondNodeMod),\n+        type,\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstPrevRel, firstPrevRelMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstNextRel, firstNextRelMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(secondPrevRel, secondPrevRelMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(secondNextRel, secondNextRelMod),\n+        has(headerByte, FIRST_IN_FIRST_CHAIN_BIT),\n+        has(headerByte, FIRST_IN_SECOND_CHAIN_BIT));\n+  }\n+\n+  private void writeFixedReferencesRecord(RelationshipRecord record, PageCursor cursor)\n+  {\n+    long firstNode = record.getFirstNode();\n+    short firstNodeMod = (short) ((firstNode & HIGH_DWORD_LAST_BIT_MASK) >> 32);\n+\n+    long secondNode = record.getSecondNode();\n+    long secondNodeMod = (secondNode & HIGH_DWORD_LAST_BIT_MASK) >> 31;\n+\n+    long firstPrevRel = record.getFirstPrevRel();\n+    long firstPrevRelMod = firstPrevRel == NULL ? 0 : (firstPrevRel & HIGH_DWORD_LAST_BIT_MASK) >> 30;\n+\n+    long firstNextRel = record.getFirstNextRel();\n+    long firstNextRelMod = firstNextRel == NULL ? 0 : (firstNextRel & HIGH_DWORD_LAST_BIT_MASK) >> 29;\n+\n+    long secondPrevRel = record.getSecondPrevRel();\n+    long secondPrevRelMod = secondPrevRel == NULL ? 0 : (secondPrevRel & HIGH_DWORD_LAST_BIT_MASK) >> 28;\n+\n+    long secondNextRel = record.getSecondNextRel();\n+    long secondNextRelMod = secondNextRel == NULL ? 0 : (secondNextRel & HIGH_DWORD_LAST_BIT_MASK) >> 27;\n+\n+    long nextProp = record.getNextProp();\n+    long nextPropMod = nextProp == NULL ? 0 : (nextProp & TWO_BIT_FIXED_REFERENCE_BIT_MASK) >> 26;\n+\n+    // [    ,   x] first node higher order bits\n+    // [    ,  x ] second node high order bits\n+    // [    , x  ] first prev high order bits\n+    // [    ,x   ] first next high order bits\n+    // [   x,    ] second prev high order bits\n+    // [  x ,    ] second next high order bits\n+    // [xx  ,    ] next prop high order bits\n+    short modifiers = (short) (firstNodeMod | secondNodeMod | firstPrevRelMod | firstNextRelMod |\n+        secondPrevRelMod | secondNextRelMod | nextPropMod);\n+\n+    cursor.putByte((byte) modifiers);\n+    cursor.putInt((int) firstNode);\n+    cursor.putInt((int) secondNode);\n+    cursor.putInt((int) firstPrevRel);\n+    cursor.putInt((int) firstNextRel);\n+    cursor.putInt((int) secondPrevRel);\n+    cursor.putInt((int) secondNextRel);\n+    cursor.putInt((int) nextProp);\n+  }\n }\n",
            "diff_size": 442
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}