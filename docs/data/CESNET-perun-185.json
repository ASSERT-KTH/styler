{
    "project_name": "CESNET-perun",
    "error_id": "185",
    "information": {
        "errors": [
            {
                "line": "607",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\t}\n\t}\n\t\n\t/**\n\t * Gets the vosManagerImpl.\n\t *",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/185/VosManagerBlImpl.java\nindex 97d79ac9133..0a0ce9e4f3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/185/VosManagerBlImpl.java\n@@ -604,7 +604,7 @@ public class VosManagerBlImpl implements VosManagerBl {\n \t\t\tmembersManagerBl.removeSponsor(sess, sponsoredMember, user);\n \t\t}\n \t}\n-\t\n+\n \t/**\n \t * Gets the vosManagerImpl.\n \t *\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/185/VosManagerBlImpl.java\nindex 97d79ac9133..0d40e32fa44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/185/VosManagerBlImpl.java\n@@ -23,614 +23,637 @@ import java.util.*;\n @SuppressWarnings(\"deprecation\")\n public class VosManagerBlImpl implements VosManagerBl {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(VosManagerBlImpl.class);\n-\n-\tprivate final VosManagerImplApi vosManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tpublic VosManagerBlImpl(VosManagerImplApi vosManagerImpl) {\n-\t\tthis.vosManagerImpl = vosManagerImpl;\n-\t}\n-\n-\tpublic List<Vo> getVos(PerunSession sess) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getVos(sess);\n-\t}\n-\n-\tpublic void deleteVo(PerunSession sess, Vo vo, boolean forceDelete) throws InternalErrorException, RelationExistsException {\n-\t\tlog.debug(\"Deleting vo {}\", vo);\n-\n-\t\ttry {\n-\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\n-\t\t\tlog.debug(\"Deleting vo {} members\", vo);\n-\t\t\t// Check if there are some members left\n-\t\t\tif (members != null && members.size() > 0) {\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tgetPerunBl().getMembersManagerBl().deleteAllMembers(sess, vo);\n-\t\t\t\t} else throw new RelationExistsException(\"Vo vo=\" + vo + \" contains members\");\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Removing vo {} resources and theirs atributes\", vo);\n-\t\t\t// Delete resources\n-\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\tif ((resources.size() == 0) || forceDelete) {\n-\t\t\t\tfor (Resource resource : resources) {\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource);\n-\t\t\t\t\t// Remove binding between service and resource\n-\t\t\t\t\tList<Service> services = getPerunBl().getResourcesManagerBl().getAssignedServices(sess, resource);\n-\t\t\t\t\tfor (Service service : services) {\n-\t\t\t\t\t\tgetPerunBl().getResourcesManagerBl().removeService(sess, resource, service);\n-\t\t\t\t\t}\n-\t\t\t\t\tgetPerunBl().getResourcesManagerBl().deleteResource(sess, resource);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RelationExistsException(\"Vo vo=\" + vo + \" contains resources\");\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Removing vo {} groups\", vo);\n-\t\t\t// Delete all groups\n-\n-\t\t\tList<Group> groups = getPerunBl().getGroupsManagerBl().getGroups(sess, vo);\n-\t\t\tif (groups.size() != 1) {\n-\t\t\t\tif (groups.size() < 1) throw new ConsistencyErrorException(\"'members' group is missing\");\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tgetPerunBl().getGroupsManagerBl().deleteAllGroups(sess, vo);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RelationExistsException(\"Vo vo=\" + vo + \" contains groups\");\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// Finally delete binding between Vo and external source\n-\t\t\tList<ExtSource> ess = getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo);\n-\t\t\tlog.debug(\"Deleting {} external sources binded to the vo {}\", ess.size(), vo);\n-\t\t\tfor (ExtSource es : ess) {\n-\t\t\t\tgetPerunBl().getExtSourcesManagerBl().removeExtSource(sess, vo, es);\n-\t\t\t}\n-\n-\t\t\t// Delete members group\n-\t\t\tlog.debug(\"Removing an administrators' group from the vo {}\", vo);\n-\t\t\tgetPerunBl().getGroupsManagerBl().deleteMembersGroup(sess, vo);\n-\n-\t\t\t// delete all VO reserved logins from KDC\n-\t\t\tList<Integer> list = getVosManagerImpl().getVoApplicationIds(sess, vo);\n-\t\t\tfor (Integer appId : list) {\n-\t\t\t\t// for each application\n-\t\t\t\tfor (Pair<String, String> login : getVosManagerImpl().getApplicationReservedLogins(appId)) {\n-\t\t\t\t\t// for all reserved logins - delete them in ext. system (e.g. KDC)\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t// !!! left = namespace / right = login !!!\n-\t\t\t\t\t\tgetPerunBl().getUsersManagerBl().deletePassword(sess, login.getRight(), login.getLeft());\n-\t\t\t\t\t} catch (LoginNotExistsException ex) {\n-\t\t\t\t\t\tlog.error(\"Login: {} not exists in namespace {} while deleting passwords\", login.getRight(), login.getLeft());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// delete all VO reserved logins from DB\n-\t\t\tgetVosManagerImpl().deleteVoReservedLogins(sess, vo);\n-\n-\t\t\t// VO applications, submitted data and app_form are deleted on cascade with \"deleteVo()\"\n-\n-\t\t\t// Delete VO attributes\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, vo);\n-\n-\t\t\t// Delete all Vo tags (for resources in Vo)\n-\t\t\tgetPerunBl().getResourcesManagerBl().deleteAllResourcesTagsForVo(sess, vo);\n-\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\t// Finally delete the VO\n-\t\tgetVosManagerImpl().deleteVo(sess, vo);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} deleted.\", vo);\n-\t}\n-\n-\tpublic void deleteVo(PerunSession sess, Vo vo) throws InternalErrorException, RelationExistsException {\n-\t\t// delete VO only if it is completely empty\n-\t\tthis.deleteVo(sess, vo, false);\n-\t}\n-\n-\tpublic Vo createVo(PerunSession sess, Vo vo) throws VoExistsException, InternalErrorException {\n-\t\t// Create entries in the DB and Grouper\n-\t\tvo = getVosManagerImpl().createVo(sess, vo);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", vo);\n-\n-\t\ttry {\n-\t\t\t// Create group containing VO members\n-\t\t\tGroup members = new Group(VosManager.MEMBERS_GROUP, VosManager.MEMBERS_GROUP_DESCRIPTION + \" for VO \" + vo.getName());\n-\t\t\tgetPerunBl().getGroupsManagerBl().createGroup(sess, vo, members);\n-\t\t\tlog.debug(\"Members group created, vo '{}'\", vo);\n-\t\t} catch (GroupExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Group already exists\", e);\n-\t\t}\n-\n-\t\t// create empty application form\n-\t\tgetVosManagerImpl().createApplicationForm(sess, vo);\n-\n-\t\t//set creator as VO manager\n-\t\tif (sess.getPerunPrincipal().getUser() != null) {\n-\t\t\ttry {\n-\t\t\t\taddAdmin(sess, vo, sess.getPerunPrincipal().getUser());\n-\t\t\t} catch (AlreadyAdminException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Add manager to newly created VO failed because there is a particular manager already assigned\", ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tlog.error(\"Can't set VO manager during creating of the VO. User from perunSession is null. {} {}\", vo, sess);\n-\t\t}\n-\n-\t\tlog.debug(\"Vo {} created\", vo);\n-\n-\t\treturn vo;\n-\t}\n-\n-\tpublic Vo updateVo(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} updated.\", vo);\n-\t\treturn getVosManagerImpl().updateVo(sess, vo);\n-\t}\n-\n-\tpublic Vo getVoByShortName(PerunSession sess, String shortName) throws InternalErrorException, VoNotExistsException {\n-\t\treturn getVosManagerImpl().getVoByShortName(sess, shortName);\n-\t}\n-\n-\tpublic Vo getVoById(PerunSession sess, int id) throws InternalErrorException, VoNotExistsException {\n-\t\treturn getVosManagerImpl().getVoById(sess, id);\n-\t}\n-\n-\tpublic List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString, int maxNumOfResults) throws InternalErrorException {\n-\t\tList<Candidate> candidates = new ArrayList<>();\n-\t\tint numOfResults = 0;\n-\n-\t\ttry {\n-\t\t\t// Iterate through all registered extSources\n-\t\t\tfor (ExtSource source : getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo)) {\n-\t\t\t\t// Info if this is only simple ext source, change behavior if not\n-\t\t\t\tboolean simpleExtSource = true;\n-\n-\t\t\t\t// Get potential subjects from the extSource\n-\t\t\t\tList<Map<String, String>> subjects;\n-\t\t\t\ttry {\n-\t\t\t\t\tif (source instanceof ExtSourceApi) {\n-\t\t\t\t\t\t// find subjects with all their properties\n-\t\t\t\t\t\tsubjects = ((ExtSourceApi) source).findSubjects(searchString, maxNumOfResults);\n-\t\t\t\t\t\tsimpleExtSource = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// find subjects only with logins - they then must be retrieved by login\n-\t\t\t\t\t\tsubjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString, maxNumOfResults);\n-\t\t\t\t\t}\n-\t\t\t\t} catch (ExtSourceUnsupportedOperationException e1) {\n-\t\t\t\t\tlog.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\tlog.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} finally {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t((ExtSourceSimpleApi) source).close();\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\t// ExtSource doesn't support that functionality, so silently skip it.\n-\t\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\t\tlog.error(\"Can't close extSource connection. Cause: {}\", e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tSet<String> uniqueLogins = new HashSet<>();\n-\t\t\t\tfor (Map<String, String> s : subjects) {\n-\t\t\t\t\t// Check if the user has unique identifier within extSource\n-\t\t\t\t\tif ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n-\t\t\t\t\t\tlog.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n-\t\t\t\t\t\t// Skip to another user\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tString extLogin = s.get(\"login\");\n-\n-\t\t\t\t\t// check uniqueness of every login in extSource\n-\t\t\t\t\tif (uniqueLogins.contains(extLogin)) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tuniqueLogins.add(extLogin);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Get Candidate\n-\t\t\t\t\tCandidate candidate;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tif (simpleExtSource) {\n-\t\t\t\t\t\t\t// retrieve data about subjects from ext source based on ext. login\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// retrieve data about subjects from subjects we already have locally\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n-\t\t\t\t\t} catch (CandidateNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n-\t\t\t\t\t\t// Candidate is already a member of the VO, so do not add him to the list of candidates\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t\t\t// This is OK\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Add candidate to the list of candidates\n-\t\t\t\t\tlog.debug(\"findCandidates: returning candidate: {}\", candidate);\n-\t\t\t\t\tcandidates.add(candidate);\n-\n-\t\t\t\t\tnumOfResults++;\n-\t\t\t\t\t// Stop getting new members if the number of already retrieved members exceeded the maxNumOfResults\n-\t\t\t\t\tif (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\t// Stop walking through next sources if the number of already retrieved members exceeded the maxNumOfResults\n-\t\t\t\tif (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Returning {} potential members for vo {}\", candidates.size(), vo);\n-\t\t\treturn candidates;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\t\treturn this.findCandidates(sess, vo, searchString, 0);\n-\t}\n-\n-\tpublic List<Candidate> findCandidates(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n-\t\tList<Candidate> candidates = new ArrayList<>();\n-\n-\t\ttry {\n-\t\t\t// Iterate through all registered extSources in the group\n-\t\t\tfor (ExtSource source : getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group)) {\n-\t\t\t\t// Info if this is only simple ext source, change behavior if not\n-\t\t\t\tboolean simpleExtSource = true;\n-\n-\t\t\t\t// Get potential subjects from the extSource\n-\t\t\t\tList<Map<String, String>> subjects;\n-\t\t\t\ttry {\n-\t\t\t\t\tif (source instanceof ExtSourceApi) {\n-\t\t\t\t\t\t// find subjects with all their properties\n-\t\t\t\t\t\tsubjects = ((ExtSourceApi) source).findSubjects(searchString);\n-\t\t\t\t\t\tsimpleExtSource = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// find subjects only with logins - they then must be retrieved by login\n-\t\t\t\t\t\tsubjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString);\n-\t\t\t\t\t}\n-\t\t\t\t} catch (ExtSourceUnsupportedOperationException e1) {\n-\t\t\t\t\tlog.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\tlog.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} finally {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t((ExtSourceSimpleApi) source).close();\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\t// ExtSource doesn't support that functionality, so silently skip it.\n-\t\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\t\tlog.error(\"Can't close extSource connection. Cause: {}\", e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tSet<String> uniqueLogins = new HashSet<>();\n-\t\t\t\tfor (Map<String, String> s : subjects) {\n-\t\t\t\t\t// Check if the user has unique identifier within extSource\n-\t\t\t\t\tif ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n-\t\t\t\t\t\tlog.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n-\t\t\t\t\t\t// Skip to another user\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tString extLogin = s.get(\"login\");\n-\n-\t\t\t\t\t// check uniqueness of every login in extSource\n-\t\t\t\t\tif (uniqueLogins.contains(extLogin)) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tuniqueLogins.add(extLogin);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Get Candidate\n-\t\t\t\t\tCandidate candidate;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tif (simpleExtSource) {\n-\t\t\t\t\t\t\t// retrieve data about subjects from ext source based on ext. login\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// retrieve data about subjects from subjects we already have locally\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n-\t\t\t\t\t} catch (CandidateNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tVo vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n-\t\t\t\t\t\t// Candidate is already a member of the VO, so do not add him to the list of candidates\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t} catch (VoNotExistsException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t\t\t// This is OK\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Add candidate to the list of candidates\n-\t\t\t\t\tlog.debug(\"findCandidates: returning candidate: {}\", candidate);\n-\t\t\t\t\tcandidates.add(candidate);\n-\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Returning {} potential members for group {}\", candidates.size(), group);\n-\t\t\treturn candidates;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\tList<User> adminsOfVo = this.getAdmins(sess, vo);\n-\t\tif (adminsOfVo.contains(user)) throw new AlreadyAdminException(user, vo);\n-\t\tAuthzResolverBlImpl.setRole(sess, user, vo, Role.VOADMIN);\n-\t\tlog.debug(\"User [{}] added like administrator to VO [{}]\", user, vo);\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\tList<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n-\t\tif (adminsOfVo.contains(group)) throw new AlreadyAdminException(group, vo);\n-\t\tAuthzResolverBlImpl.setRole(sess, group, vo, Role.VOADMIN);\n-\t\tlog.debug(\"Group [{}] added like administrator to VO [{}]\", group, vo);\n-\t}\n-\n-\tpublic void removeAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n-\t\tList<User> adminsOfVo = this.getAdmins(sess, vo);\n-\t\tif (!adminsOfVo.contains(user)) throw new UserNotAdminException(user);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, user, vo, Role.VOADMIN);\n-\t\tlog.debug(\"User [{}] deleted like administrator from VO [{}]\", user, vo);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\tList<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n-\t\tif (!adminsOfVo.contains(group)) throw new GroupNotAdminException(group);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, group, vo, Role.VOADMIN);\n-\t\tlog.debug(\"Group [{}] deleted like administrator from VO [{}]\", group, vo);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getAdmins(PerunSession perunSession, Vo vo, Role role, boolean onlyDirectAdmins) throws InternalErrorException {\n-\t\tif (onlyDirectAdmins) {\n-\t\t\treturn getVosManagerImpl().getDirectAdmins(perunSession, vo, role);\n-\t\t} else {\n-\t\t\treturn getVosManagerImpl().getAdmins(perunSession, vo, role);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo, Role role, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getAdmins(perunSession, vo, role, onlyDirectAdmins);\n-\t\tList<RichUser> richUsers;\n-\n-\t\tif (allUserAttributes) {\n-\t\t\trichUsers = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n-\t\t} else {\n-\t\t\ttry {\n-\t\t\t\trichUsers = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n-\t\t\t}\n-\t\t}\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getAdminGroups(PerunSession perunSession, Vo vo, Role role) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getAdminGroups(perunSession, vo, role);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<User> getAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getAdmins(sess, vo);\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<User> getDirectAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getDirectAdmins(sess, vo);\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<RichUser> getDirectRichAdmins(PerunSession sess, Vo vo) throws InternalErrorException, UserNotExistsException {\n-\t\treturn perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, getVosManagerImpl().getDirectAdmins(sess, vo));\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<Group> getAdminGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getAdminGroups(sess, vo);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getAdmins(perunSession, vo);\n-\t\treturn perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getAdmins(perunSession, vo);\n-\t\treturn perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n-\t\t}\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getDirectRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n-\t\t}\n-\t}\n-\n-\tpublic void checkVoExists(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException {\n-\t\tgetVosManagerImpl().checkVoExists(sess, vo);\n-\t}\n-\n-\tpublic List<Vo> getVosByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException, VoNotExistsException {\n-\t\tList<Vo> vos = new ArrayList<>();\n-\n-\t\t//All possible useful objects\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\n-\t\tif (perunBean != null) {\n-\t\t\tif (perunBean instanceof Vo) vo = (Vo) perunBean;\n-\t\t\telse if (perunBean instanceof Facility) facility = (Facility) perunBean;\n-\t\t\telse if (perunBean instanceof Group) group = (Group) perunBean;\n-\t\t\telse if (perunBean instanceof Member) member = (Member) perunBean;\n-\t\t\telse if (perunBean instanceof User) user = (User) perunBean;\n-\t\t\telse if (perunBean instanceof Host) host = (Host) perunBean;\n-\t\t\telse if (perunBean instanceof Resource) resource = (Resource) perunBean;\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n-\t\t}\n-\n-\t\t//Important For Groups not work with Subgroups! Invalid members are executed too.\n-\n-\t\tif (group != null) {\n-\t\t\tvos.add(getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId()));\n-\t\t} else if (member != null) {\n-\t\t\tvos.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, member));\n-\t\t} else if (resource != null) {\n-\t\t\tvos.add(getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId()));\n-\t\t} else if (user != null) {\n-\t\t\tvos.addAll(getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user));\n-\t\t} else if (host != null) {\n-\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\tvos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n-\t\t} else if (facility != null) {\n-\t\t\tvos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n-\t\t} else {\n-\t\t\tvos.add(vo);\n-\t\t}\n-\n-\t\tvos = new ArrayList<>(new HashSet<>(vos));\n-\t\treturn vos;\n-\t}\n-\n-\tpublic int getVosCount(PerunSession sess) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getVosCount(sess);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo, boolean checkGroups) throws InternalErrorException {\n-\t\tif (AuthzResolverBlImpl.isUserInRoleForVo(session, user, role, vo)) return true;\n-\t\tif (checkGroups) {\n-\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(session, user);\n-\t\t\tList<Group> allGroups = new ArrayList<>();\n-\t\t\tfor (Member member : members) {\n-\t\t\t\tallGroups.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(session, member));\n-\t\t\t}\n-\t\t\tfor (Group group : allGroups) {\n-\t\t\t\tif (AuthzResolverBlImpl.isGroupInRoleForVo(session, group, role, vo)) return true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void handleUserLostVoRole(PerunSession sess, User user, Vo vo, Role role) throws InternalErrorException {\n-\t\tlog.debug(\"handleUserLostVoRole(user={},vo={},role={})\",user.getLastName(),vo.getShortName(),role);\n-\t\tswitch (role) {\n-\t\t\tcase SPONSOR:\n-\t\t\t\tremoveSponsorFromSponsoredMembers(sess, vo, user);\n-\t\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void handleGroupLostVoRole(PerunSession sess, Group group, Vo vo, Role role) throws InternalErrorException {\n-\t\tswitch (role) {\n-\t\t\tcase SPONSOR:\n-\t\t\t\t//remove all group members as sponsors\n-\t\t\t\tUsersManagerBl um = getPerunBl().getUsersManagerBl();\n-\t\t\t\tfor (Member groupMember : getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group)) {\n-\t\t\t\t\tremoveSponsorFromSponsoredMembers(sess, vo, um.getUserByMember(sess, groupMember));\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\tprivate void removeSponsorFromSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n-\t\tlog.debug(\"removeSponsorFromSponsoredMembers(vo={},user={})\",vo.getShortName(),user.getLastName());\n-\t\tMembersManagerBl membersManagerBl = getPerunBl().getMembersManagerBl();\n-\t\tfor (Member sponsoredMember : membersManagerBl.getSponsoredMembers(sess, vo, user)) {\n-\t\t\tlog.debug(\"removing sponsor from sponsored member {}\",sponsoredMember.getId());\n-\t\t\tmembersManagerBl.removeSponsor(sess, sponsoredMember, user);\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Gets the vosManagerImpl.\n-\t *\n-\t * @return The vosManagerImpl.\n-\t */\n-\tprivate VosManagerImplApi getVosManagerImpl() {\n-\t\treturn this.vosManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Sets the perunBl for this instance.\n-\t *\n-\t * @param perunBl The perunBl.\n-\t */\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n+    private final static Logger log = LoggerFactory.getLogger(VosManagerBlImpl.class);\n+\n+    private final VosManagerImplApi vosManagerImpl;\n+    private PerunBl perunBl;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public VosManagerBlImpl(VosManagerImplApi vosManagerImpl) {\n+        this.vosManagerImpl = vosManagerImpl;\n+    }\n+\n+    public List<Vo> getVos(PerunSession sess) throws InternalErrorException {\n+        return getVosManagerImpl().getVos(sess);\n+    }\n+\n+    public void deleteVo(PerunSession sess, Vo vo, boolean forceDelete) throws InternalErrorException, RelationExistsException {\n+        log.debug(\"Deleting vo {}\", vo);\n+\n+        try {\n+            List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+\n+            log.debug(\"Deleting vo {} members\", vo);\n+            // Check if there are some members left\n+            if (members != null && members.size() > 0) {\n+                if (forceDelete) {\n+                    getPerunBl().getMembersManagerBl().deleteAllMembers(sess, vo);\n+                } else {\n+                    throw new RelationExistsException(\"Vo vo=\" + vo + \" contains members\");\n+                }\n+            }\n+\n+            log.debug(\"Removing vo {} resources and theirs atributes\", vo);\n+            // Delete resources\n+            List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+            if ((resources.size() == 0) || forceDelete) {\n+                for (Resource resource : resources) {\n+                    getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource);\n+                    // Remove binding between service and resource\n+                    List<Service> services = getPerunBl().getResourcesManagerBl().getAssignedServices(sess, resource);\n+                    for (Service service : services) {\n+                        getPerunBl().getResourcesManagerBl().removeService(sess, resource, service);\n+                    }\n+                    getPerunBl().getResourcesManagerBl().deleteResource(sess, resource);\n+                }\n+            } else {\n+                throw new RelationExistsException(\"Vo vo=\" + vo + \" contains resources\");\n+            }\n+\n+            log.debug(\"Removing vo {} groups\", vo);\n+            // Delete all groups\n+\n+            List<Group> groups = getPerunBl().getGroupsManagerBl().getGroups(sess, vo);\n+            if (groups.size() != 1) {\n+                if (groups.size() < 1) {\n+                    throw new ConsistencyErrorException(\"'members' group is missing\");\n+                }\n+                if (forceDelete) {\n+                    getPerunBl().getGroupsManagerBl().deleteAllGroups(sess, vo);\n+                } else {\n+                    throw new RelationExistsException(\"Vo vo=\" + vo + \" contains groups\");\n+                }\n+            }\n+\n+            // Finally delete binding between Vo and external source\n+            List<ExtSource> ess = getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo);\n+            log.debug(\"Deleting {} external sources binded to the vo {}\", ess.size(), vo);\n+            for (ExtSource es : ess) {\n+                getPerunBl().getExtSourcesManagerBl().removeExtSource(sess, vo, es);\n+            }\n+\n+            // Delete members group\n+            log.debug(\"Removing an administrators' group from the vo {}\", vo);\n+            getPerunBl().getGroupsManagerBl().deleteMembersGroup(sess, vo);\n+\n+            // delete all VO reserved logins from KDC\n+            List<Integer> list = getVosManagerImpl().getVoApplicationIds(sess, vo);\n+            for (Integer appId : list) {\n+                // for each application\n+                for (Pair<String, String> login : getVosManagerImpl().getApplicationReservedLogins(appId)) {\n+                    // for all reserved logins - delete them in ext. system (e.g. KDC)\n+                    try {\n+                        // !!! left = namespace / right = login !!!\n+                        getPerunBl().getUsersManagerBl().deletePassword(sess, login.getRight(), login.getLeft());\n+                    } catch (LoginNotExistsException ex) {\n+                        log.error(\"Login: {} not exists in namespace {} while deleting passwords\", login.getRight(), login.getLeft());\n+                    }\n+                }\n+            }\n+            // delete all VO reserved logins from DB\n+            getVosManagerImpl().deleteVoReservedLogins(sess, vo);\n+\n+            // VO applications, submitted data and app_form are deleted on cascade with \"deleteVo()\"\n+\n+            // Delete VO attributes\n+            getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, vo);\n+\n+            // Delete all Vo tags (for resources in Vo)\n+            getPerunBl().getResourcesManagerBl().deleteAllResourcesTagsForVo(sess, vo);\n+\n+        } catch (Exception ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        // Finally delete the VO\n+        getVosManagerImpl().deleteVo(sess, vo);\n+        getPerunBl().getAuditer().log(sess, \"{} deleted.\", vo);\n+    }\n+\n+    public void deleteVo(PerunSession sess, Vo vo) throws InternalErrorException, RelationExistsException {\n+        // delete VO only if it is completely empty\n+        this.deleteVo(sess, vo, false);\n+    }\n+\n+    public Vo createVo(PerunSession sess, Vo vo) throws VoExistsException, InternalErrorException {\n+        // Create entries in the DB and Grouper\n+        vo = getVosManagerImpl().createVo(sess, vo);\n+        getPerunBl().getAuditer().log(sess, \"{} created.\", vo);\n+\n+        try {\n+            // Create group containing VO members\n+            Group members = new Group(VosManager.MEMBERS_GROUP, VosManager.MEMBERS_GROUP_DESCRIPTION + \" for VO \" + vo.getName());\n+            getPerunBl().getGroupsManagerBl().createGroup(sess, vo, members);\n+            log.debug(\"Members group created, vo '{}'\", vo);\n+        } catch (GroupExistsException e) {\n+            throw new ConsistencyErrorException(\"Group already exists\", e);\n+        }\n+\n+        // create empty application form\n+        getVosManagerImpl().createApplicationForm(sess, vo);\n+\n+        //set creator as VO manager\n+        if (sess.getPerunPrincipal().getUser() != null) {\n+            try {\n+                addAdmin(sess, vo, sess.getPerunPrincipal().getUser());\n+            } catch (AlreadyAdminException ex) {\n+                throw new ConsistencyErrorException(\"Add manager to newly created VO failed because there is a particular manager already assigned\", ex);\n+            }\n+        } else {\n+            log.error(\"Can't set VO manager during creating of the VO. User from perunSession is null. {} {}\", vo, sess);\n+        }\n+\n+        log.debug(\"Vo {} created\", vo);\n+\n+        return vo;\n+    }\n+\n+    public Vo updateVo(PerunSession sess, Vo vo) throws InternalErrorException {\n+        getPerunBl().getAuditer().log(sess, \"{} updated.\", vo);\n+        return getVosManagerImpl().updateVo(sess, vo);\n+    }\n+\n+    public Vo getVoByShortName(PerunSession sess, String shortName) throws InternalErrorException, VoNotExistsException {\n+        return getVosManagerImpl().getVoByShortName(sess, shortName);\n+    }\n+\n+    public Vo getVoById(PerunSession sess, int id) throws InternalErrorException, VoNotExistsException {\n+        return getVosManagerImpl().getVoById(sess, id);\n+    }\n+\n+    public List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString, int maxNumOfResults) throws InternalErrorException {\n+        List<Candidate> candidates = new ArrayList<>();\n+        int numOfResults = 0;\n+\n+        try {\n+            // Iterate through all registered extSources\n+            for (ExtSource source : getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo)) {\n+                // Info if this is only simple ext source, change behavior if not\n+                boolean simpleExtSource = true;\n+\n+                // Get potential subjects from the extSource\n+                List<Map<String, String>> subjects;\n+                try {\n+                    if (source instanceof ExtSourceApi) {\n+                        // find subjects with all their properties\n+                        subjects = ((ExtSourceApi) source).findSubjects(searchString, maxNumOfResults);\n+                        simpleExtSource = false;\n+                    } else {\n+                        // find subjects only with logins - they then must be retrieved by login\n+                        subjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString, maxNumOfResults);\n+                    }\n+                } catch (ExtSourceUnsupportedOperationException e1) {\n+                    log.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n+                    continue;\n+                } catch (InternalErrorException e) {\n+                    log.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n+                    continue;\n+                } finally {\n+                    try {\n+                        ((ExtSourceSimpleApi) source).close();\n+                    } catch (ExtSourceUnsupportedOperationException e) {\n+                        // ExtSource doesn't support that functionality, so silently skip it.\n+                    } catch (InternalErrorException e) {\n+                        log.error(\"Can't close extSource connection. Cause: {}\", e);\n+                    }\n+                }\n+\n+                Set<String> uniqueLogins = new HashSet<>();\n+                for (Map<String, String> s : subjects) {\n+                    // Check if the user has unique identifier within extSource\n+                    if ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n+                        log.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n+                        // Skip to another user\n+                        continue;\n+                    }\n+\n+                    String extLogin = s.get(\"login\");\n+\n+                    // check uniqueness of every login in extSource\n+                    if (uniqueLogins.contains(extLogin)) {\n+                        throw new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n+                    } else {\n+                        uniqueLogins.add(extLogin);\n+                    }\n+\n+                    // Get Candidate\n+                    Candidate candidate;\n+                    try {\n+                        if (simpleExtSource) {\n+                            // retrieve data about subjects from ext source based on ext. login\n+                            candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n+                        } else {\n+                            // retrieve data about subjects from subjects we already have locally\n+                            candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n+                        }\n+                    } catch (ExtSourceNotExistsException e) {\n+                        throw new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n+                    } catch (CandidateNotExistsException e) {\n+                        throw new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n+                    } catch (ExtSourceUnsupportedOperationException e) {\n+                        throw new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n+                    }\n+\n+                    try {\n+                        getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n+                        // Candidate is already a member of the VO, so do not add him to the list of candidates\n+                        continue;\n+                    } catch (MemberNotExistsException e) {\n+                        // This is OK\n+                    }\n+\n+                    // Add candidate to the list of candidates\n+                    log.debug(\"findCandidates: returning candidate: {}\", candidate);\n+                    candidates.add(candidate);\n+\n+                    numOfResults++;\n+                    // Stop getting new members if the number of already retrieved members exceeded the maxNumOfResults\n+                    if (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n+                        break;\n+                    }\n+                }\n+\n+                // Stop walking through next sources if the number of already retrieved members exceeded the maxNumOfResults\n+                if (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n+                    break;\n+                }\n+            }\n+\n+            log.debug(\"Returning {} potential members for vo {}\", candidates.size(), vo);\n+            return candidates;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+        return this.findCandidates(sess, vo, searchString, 0);\n+    }\n+\n+    public List<Candidate> findCandidates(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n+        List<Candidate> candidates = new ArrayList<>();\n+\n+        try {\n+            // Iterate through all registered extSources in the group\n+            for (ExtSource source : getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group)) {\n+                // Info if this is only simple ext source, change behavior if not\n+                boolean simpleExtSource = true;\n+\n+                // Get potential subjects from the extSource\n+                List<Map<String, String>> subjects;\n+                try {\n+                    if (source instanceof ExtSourceApi) {\n+                        // find subjects with all their properties\n+                        subjects = ((ExtSourceApi) source).findSubjects(searchString);\n+                        simpleExtSource = false;\n+                    } else {\n+                        // find subjects only with logins - they then must be retrieved by login\n+                        subjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString);\n+                    }\n+                } catch (ExtSourceUnsupportedOperationException e1) {\n+                    log.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n+                    continue;\n+                } catch (InternalErrorException e) {\n+                    log.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n+                    continue;\n+                } finally {\n+                    try {\n+                        ((ExtSourceSimpleApi) source).close();\n+                    } catch (ExtSourceUnsupportedOperationException e) {\n+                        // ExtSource doesn't support that functionality, so silently skip it.\n+                    } catch (InternalErrorException e) {\n+                        log.error(\"Can't close extSource connection. Cause: {}\", e);\n+                    }\n+                }\n+\n+                Set<String> uniqueLogins = new HashSet<>();\n+                for (Map<String, String> s : subjects) {\n+                    // Check if the user has unique identifier within extSource\n+                    if ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n+                        log.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n+                        // Skip to another user\n+                        continue;\n+                    }\n+\n+                    String extLogin = s.get(\"login\");\n+\n+                    // check uniqueness of every login in extSource\n+                    if (uniqueLogins.contains(extLogin)) {\n+                        throw new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n+                    } else {\n+                        uniqueLogins.add(extLogin);\n+                    }\n+\n+                    // Get Candidate\n+                    Candidate candidate;\n+                    try {\n+                        if (simpleExtSource) {\n+                            // retrieve data about subjects from ext source based on ext. login\n+                            candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n+                        } else {\n+                            // retrieve data about subjects from subjects we already have locally\n+                            candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n+                        }\n+                    } catch (ExtSourceNotExistsException e) {\n+                        throw new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n+                    } catch (CandidateNotExistsException e) {\n+                        throw new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n+                    } catch (ExtSourceUnsupportedOperationException e) {\n+                        throw new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n+                    }\n+\n+                    try {\n+                        Vo vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+                        getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n+                        // Candidate is already a member of the VO, so do not add him to the list of candidates\n+                        continue;\n+                    } catch (VoNotExistsException e) {\n+                        throw new InternalErrorException(e);\n+                    } catch (MemberNotExistsException e) {\n+                        // This is OK\n+                    }\n+\n+                    // Add candidate to the list of candidates\n+                    log.debug(\"findCandidates: returning candidate: {}\", candidate);\n+                    candidates.add(candidate);\n+\n+                }\n+            }\n+\n+            log.debug(\"Returning {} potential members for group {}\", candidates.size(), group);\n+            return candidates;\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    public void addAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n+        List<User> adminsOfVo = this.getAdmins(sess, vo);\n+        if (adminsOfVo.contains(user)) {\n+            throw new AlreadyAdminException(user, vo);\n+        }\n+        AuthzResolverBlImpl.setRole(sess, user, vo, Role.VOADMIN);\n+        log.debug(\"User [{}] added like administrator to VO [{}]\", user, vo);\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n+        List<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n+        if (adminsOfVo.contains(group)) {\n+            throw new AlreadyAdminException(group, vo);\n+        }\n+        AuthzResolverBlImpl.setRole(sess, group, vo, Role.VOADMIN);\n+        log.debug(\"Group [{}] added like administrator to VO [{}]\", group, vo);\n+    }\n+\n+    public void removeAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n+        List<User> adminsOfVo = this.getAdmins(sess, vo);\n+        if (!adminsOfVo.contains(user)) {\n+            throw new UserNotAdminException(user);\n+        }\n+        AuthzResolverBlImpl.unsetRole(sess, user, vo, Role.VOADMIN);\n+        log.debug(\"User [{}] deleted like administrator from VO [{}]\", user, vo);\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n+        List<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n+        if (!adminsOfVo.contains(group)) {\n+            throw new GroupNotAdminException(group);\n+        }\n+        AuthzResolverBlImpl.unsetRole(sess, group, vo, Role.VOADMIN);\n+        log.debug(\"Group [{}] deleted like administrator from VO [{}]\", group, vo);\n+    }\n+\n+    @Override\n+    public List<User> getAdmins(PerunSession perunSession, Vo vo, Role role, boolean onlyDirectAdmins) throws InternalErrorException {\n+        if (onlyDirectAdmins) {\n+            return getVosManagerImpl().getDirectAdmins(perunSession, vo, role);\n+        } else {\n+            return getVosManagerImpl().getAdmins(perunSession, vo, role);\n+        }\n+    }\n+\n+    @Override\n+    public List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo, Role role, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = this.getAdmins(perunSession, vo, role, onlyDirectAdmins);\n+        List<RichUser> richUsers;\n+\n+        if (allUserAttributes) {\n+            richUsers = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n+        } else {\n+            try {\n+                richUsers = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n+            } catch (AttributeNotExistsException ex) {\n+                throw new InternalErrorException(\"One of Attribute not exist.\", ex);\n+            }\n+        }\n+        return richUsers;\n+    }\n+\n+    @Override\n+    public List<Group> getAdminGroups(PerunSession perunSession, Vo vo, Role role) throws InternalErrorException {\n+        return getVosManagerImpl().getAdminGroups(perunSession, vo, role);\n+    }\n+\n+    @Deprecated\n+    public List<User> getAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n+        return getVosManagerImpl().getAdmins(sess, vo);\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public List<User> getDirectAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n+        return getVosManagerImpl().getDirectAdmins(sess, vo);\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public List<RichUser> getDirectRichAdmins(PerunSession sess, Vo vo) throws InternalErrorException, UserNotExistsException {\n+        return perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, getVosManagerImpl().getDirectAdmins(sess, vo));\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public List<Group> getAdminGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n+        return getVosManagerImpl().getAdminGroups(sess, vo);\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = this.getAdmins(perunSession, vo);\n+        return perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users);\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = this.getAdmins(perunSession, vo);\n+        return perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n+        try {\n+            return getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n+        } catch (AttributeNotExistsException ex) {\n+            throw new InternalErrorException(\"One of Attribute not exist.\", ex);\n+        }\n+    }\n+\n+    @Deprecated\n+    public List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n+        try {\n+            return getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getDirectRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n+        } catch (AttributeNotExistsException ex) {\n+            throw new InternalErrorException(\"One of Attribute not exist.\", ex);\n+        }\n+    }\n+\n+    public void checkVoExists(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException {\n+        getVosManagerImpl().checkVoExists(sess, vo);\n+    }\n+\n+    public List<Vo> getVosByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException, VoNotExistsException {\n+        List<Vo> vos = new ArrayList<>();\n+\n+        //All possible useful objects\n+        Vo vo = null;\n+        Facility facility = null;\n+        Group group = null;\n+        Member member = null;\n+        User user = null;\n+        Host host = null;\n+        Resource resource = null;\n+\n+        if (perunBean != null) {\n+            if (perunBean instanceof Vo) {\n+                vo = (Vo) perunBean;\n+            } else if (perunBean instanceof Facility) {\n+                facility = (Facility) perunBean;\n+            } else if (perunBean instanceof Group) {\n+                group = (Group) perunBean;\n+            } else if (perunBean instanceof Member) {\n+                member = (Member) perunBean;\n+            } else if (perunBean instanceof User) {\n+                user = (User) perunBean;\n+            } else if (perunBean instanceof Host) {\n+                host = (Host) perunBean;\n+            } else if (perunBean instanceof Resource) {\n+                resource = (Resource) perunBean;\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n+            }\n+        } else {\n+            throw new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n+        }\n+\n+        //Important For Groups not work with Subgroups! Invalid members are executed too.\n+\n+        if (group != null) {\n+            vos.add(getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId()));\n+        } else if (member != null) {\n+            vos.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, member));\n+        } else if (resource != null) {\n+            vos.add(getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId()));\n+        } else if (user != null) {\n+            vos.addAll(getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user));\n+        } else if (host != null) {\n+            facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+            vos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n+        } else if (facility != null) {\n+            vos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n+        } else {\n+            vos.add(vo);\n+        }\n+\n+        vos = new ArrayList<>(new HashSet<>(vos));\n+        return vos;\n+    }\n+\n+    public int getVosCount(PerunSession sess) throws InternalErrorException {\n+        return getVosManagerImpl().getVosCount(sess);\n+    }\n+\n+    @Override\n+    public boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo, boolean checkGroups) throws InternalErrorException {\n+        if (AuthzResolverBlImpl.isUserInRoleForVo(session, user, role, vo)) {\n+            return true;\n+        }\n+        if (checkGroups) {\n+            List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(session, user);\n+            List<Group> allGroups = new ArrayList<>();\n+            for (Member member : members) {\n+                allGroups.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(session, member));\n+            }\n+            for (Group group : allGroups) {\n+                if (AuthzResolverBlImpl.isGroupInRoleForVo(session, group, role, vo)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void handleUserLostVoRole(PerunSession sess, User user, Vo vo, Role role) throws InternalErrorException {\n+        log.debug(\"handleUserLostVoRole(user={},vo={},role={})\", user.getLastName(), vo.getShortName(), role);\n+        switch (role) {\n+            case SPONSOR:\n+                removeSponsorFromSponsoredMembers(sess, vo, user);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void handleGroupLostVoRole(PerunSession sess, Group group, Vo vo, Role role) throws InternalErrorException {\n+        switch (role) {\n+            case SPONSOR:\n+                //remove all group members as sponsors\n+                UsersManagerBl um = getPerunBl().getUsersManagerBl();\n+                for (Member groupMember : getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group)) {\n+                    removeSponsorFromSponsoredMembers(sess, vo, um.getUserByMember(sess, groupMember));\n+                }\n+                break;\n+        }\n+    }\n+\n+    private void removeSponsorFromSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n+        log.debug(\"removeSponsorFromSponsoredMembers(vo={},user={})\", vo.getShortName(), user.getLastName());\n+        MembersManagerBl membersManagerBl = getPerunBl().getMembersManagerBl();\n+        for (Member sponsoredMember : membersManagerBl.getSponsoredMembers(sess, vo, user)) {\n+            log.debug(\"removing sponsor from sponsored member {}\", sponsoredMember.getId());\n+            membersManagerBl.removeSponsor(sess, sponsoredMember, user);\n+        }\n+    }\n+\n+    /**\n+     * Gets the vosManagerImpl.\n+     *\n+     * @return The vosManagerImpl.\n+     */\n+    private VosManagerImplApi getVosManagerImpl() {\n+        return this.vosManagerImpl;\n+    }\n+\n+    /**\n+     * Sets the perunBl for this instance.\n+     *\n+     * @param perunBl The perunBl.\n+     */\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n+\n+    /**\n+     * Gets the perunBl.\n+     *\n+     * @return The perunBl.\n+     */\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n \n \n }\n",
            "diff_size": 631
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "605",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/185/VosManagerBlImpl.java\nindex 97d79ac9133..f30d45131e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/185/VosManagerBlImpl.java\n@@ -11,7 +11,6 @@ import cz.metacentrum.perun.core.implApi.ExtSourceSimpleApi;\n import cz.metacentrum.perun.core.implApi.VosManagerImplApi;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.*;\n \n /**\n@@ -20,617 +19,619 @@ import java.util.*;\n  * @author Michal Prochazka michalp@ics.muni.cz\n  * @author Slavek Licehammer glory@ics.muni.cz\n  */\n+\n+\n @SuppressWarnings(\"deprecation\")\n public class VosManagerBlImpl implements VosManagerBl {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(VosManagerBlImpl.class);\n-\n-\tprivate final VosManagerImplApi vosManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tpublic VosManagerBlImpl(VosManagerImplApi vosManagerImpl) {\n-\t\tthis.vosManagerImpl = vosManagerImpl;\n-\t}\n-\n-\tpublic List<Vo> getVos(PerunSession sess) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getVos(sess);\n-\t}\n-\n-\tpublic void deleteVo(PerunSession sess, Vo vo, boolean forceDelete) throws InternalErrorException, RelationExistsException {\n-\t\tlog.debug(\"Deleting vo {}\", vo);\n-\n-\t\ttry {\n-\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\n-\t\t\tlog.debug(\"Deleting vo {} members\", vo);\n-\t\t\t// Check if there are some members left\n-\t\t\tif (members != null && members.size() > 0) {\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tgetPerunBl().getMembersManagerBl().deleteAllMembers(sess, vo);\n-\t\t\t\t} else throw new RelationExistsException(\"Vo vo=\" + vo + \" contains members\");\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Removing vo {} resources and theirs atributes\", vo);\n-\t\t\t// Delete resources\n-\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\tif ((resources.size() == 0) || forceDelete) {\n-\t\t\t\tfor (Resource resource : resources) {\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource);\n-\t\t\t\t\t// Remove binding between service and resource\n-\t\t\t\t\tList<Service> services = getPerunBl().getResourcesManagerBl().getAssignedServices(sess, resource);\n-\t\t\t\t\tfor (Service service : services) {\n-\t\t\t\t\t\tgetPerunBl().getResourcesManagerBl().removeService(sess, resource, service);\n-\t\t\t\t\t}\n-\t\t\t\t\tgetPerunBl().getResourcesManagerBl().deleteResource(sess, resource);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RelationExistsException(\"Vo vo=\" + vo + \" contains resources\");\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Removing vo {} groups\", vo);\n-\t\t\t// Delete all groups\n-\n-\t\t\tList<Group> groups = getPerunBl().getGroupsManagerBl().getGroups(sess, vo);\n-\t\t\tif (groups.size() != 1) {\n-\t\t\t\tif (groups.size() < 1) throw new ConsistencyErrorException(\"'members' group is missing\");\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tgetPerunBl().getGroupsManagerBl().deleteAllGroups(sess, vo);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RelationExistsException(\"Vo vo=\" + vo + \" contains groups\");\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// Finally delete binding between Vo and external source\n-\t\t\tList<ExtSource> ess = getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo);\n-\t\t\tlog.debug(\"Deleting {} external sources binded to the vo {}\", ess.size(), vo);\n-\t\t\tfor (ExtSource es : ess) {\n-\t\t\t\tgetPerunBl().getExtSourcesManagerBl().removeExtSource(sess, vo, es);\n-\t\t\t}\n-\n-\t\t\t// Delete members group\n-\t\t\tlog.debug(\"Removing an administrators' group from the vo {}\", vo);\n-\t\t\tgetPerunBl().getGroupsManagerBl().deleteMembersGroup(sess, vo);\n-\n-\t\t\t// delete all VO reserved logins from KDC\n-\t\t\tList<Integer> list = getVosManagerImpl().getVoApplicationIds(sess, vo);\n-\t\t\tfor (Integer appId : list) {\n-\t\t\t\t// for each application\n-\t\t\t\tfor (Pair<String, String> login : getVosManagerImpl().getApplicationReservedLogins(appId)) {\n-\t\t\t\t\t// for all reserved logins - delete them in ext. system (e.g. KDC)\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t// !!! left = namespace / right = login !!!\n-\t\t\t\t\t\tgetPerunBl().getUsersManagerBl().deletePassword(sess, login.getRight(), login.getLeft());\n-\t\t\t\t\t} catch (LoginNotExistsException ex) {\n-\t\t\t\t\t\tlog.error(\"Login: {} not exists in namespace {} while deleting passwords\", login.getRight(), login.getLeft());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t// delete all VO reserved logins from DB\n-\t\t\tgetVosManagerImpl().deleteVoReservedLogins(sess, vo);\n-\n-\t\t\t// VO applications, submitted data and app_form are deleted on cascade with \"deleteVo()\"\n-\n-\t\t\t// Delete VO attributes\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, vo);\n-\n-\t\t\t// Delete all Vo tags (for resources in Vo)\n-\t\t\tgetPerunBl().getResourcesManagerBl().deleteAllResourcesTagsForVo(sess, vo);\n-\n-\t\t} catch (Exception ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\t// Finally delete the VO\n-\t\tgetVosManagerImpl().deleteVo(sess, vo);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} deleted.\", vo);\n-\t}\n-\n-\tpublic void deleteVo(PerunSession sess, Vo vo) throws InternalErrorException, RelationExistsException {\n-\t\t// delete VO only if it is completely empty\n-\t\tthis.deleteVo(sess, vo, false);\n-\t}\n-\n-\tpublic Vo createVo(PerunSession sess, Vo vo) throws VoExistsException, InternalErrorException {\n-\t\t// Create entries in the DB and Grouper\n-\t\tvo = getVosManagerImpl().createVo(sess, vo);\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", vo);\n-\n-\t\ttry {\n-\t\t\t// Create group containing VO members\n-\t\t\tGroup members = new Group(VosManager.MEMBERS_GROUP, VosManager.MEMBERS_GROUP_DESCRIPTION + \" for VO \" + vo.getName());\n-\t\t\tgetPerunBl().getGroupsManagerBl().createGroup(sess, vo, members);\n-\t\t\tlog.debug(\"Members group created, vo '{}'\", vo);\n-\t\t} catch (GroupExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Group already exists\", e);\n-\t\t}\n-\n-\t\t// create empty application form\n-\t\tgetVosManagerImpl().createApplicationForm(sess, vo);\n-\n-\t\t//set creator as VO manager\n-\t\tif (sess.getPerunPrincipal().getUser() != null) {\n-\t\t\ttry {\n-\t\t\t\taddAdmin(sess, vo, sess.getPerunPrincipal().getUser());\n-\t\t\t} catch (AlreadyAdminException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Add manager to newly created VO failed because there is a particular manager already assigned\", ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tlog.error(\"Can't set VO manager during creating of the VO. User from perunSession is null. {} {}\", vo, sess);\n-\t\t}\n-\n-\t\tlog.debug(\"Vo {} created\", vo);\n-\n-\t\treturn vo;\n-\t}\n-\n-\tpublic Vo updateVo(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} updated.\", vo);\n-\t\treturn getVosManagerImpl().updateVo(sess, vo);\n-\t}\n-\n-\tpublic Vo getVoByShortName(PerunSession sess, String shortName) throws InternalErrorException, VoNotExistsException {\n-\t\treturn getVosManagerImpl().getVoByShortName(sess, shortName);\n-\t}\n-\n-\tpublic Vo getVoById(PerunSession sess, int id) throws InternalErrorException, VoNotExistsException {\n-\t\treturn getVosManagerImpl().getVoById(sess, id);\n-\t}\n-\n-\tpublic List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString, int maxNumOfResults) throws InternalErrorException {\n-\t\tList<Candidate> candidates = new ArrayList<>();\n-\t\tint numOfResults = 0;\n-\n-\t\ttry {\n-\t\t\t// Iterate through all registered extSources\n-\t\t\tfor (ExtSource source : getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo)) {\n-\t\t\t\t// Info if this is only simple ext source, change behavior if not\n-\t\t\t\tboolean simpleExtSource = true;\n-\n-\t\t\t\t// Get potential subjects from the extSource\n-\t\t\t\tList<Map<String, String>> subjects;\n-\t\t\t\ttry {\n-\t\t\t\t\tif (source instanceof ExtSourceApi) {\n-\t\t\t\t\t\t// find subjects with all their properties\n-\t\t\t\t\t\tsubjects = ((ExtSourceApi) source).findSubjects(searchString, maxNumOfResults);\n-\t\t\t\t\t\tsimpleExtSource = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// find subjects only with logins - they then must be retrieved by login\n-\t\t\t\t\t\tsubjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString, maxNumOfResults);\n-\t\t\t\t\t}\n-\t\t\t\t} catch (ExtSourceUnsupportedOperationException e1) {\n-\t\t\t\t\tlog.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\tlog.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} finally {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t((ExtSourceSimpleApi) source).close();\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\t// ExtSource doesn't support that functionality, so silently skip it.\n-\t\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\t\tlog.error(\"Can't close extSource connection. Cause: {}\", e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tSet<String> uniqueLogins = new HashSet<>();\n-\t\t\t\tfor (Map<String, String> s : subjects) {\n-\t\t\t\t\t// Check if the user has unique identifier within extSource\n-\t\t\t\t\tif ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n-\t\t\t\t\t\tlog.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n-\t\t\t\t\t\t// Skip to another user\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tString extLogin = s.get(\"login\");\n-\n-\t\t\t\t\t// check uniqueness of every login in extSource\n-\t\t\t\t\tif (uniqueLogins.contains(extLogin)) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tuniqueLogins.add(extLogin);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Get Candidate\n-\t\t\t\t\tCandidate candidate;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tif (simpleExtSource) {\n-\t\t\t\t\t\t\t// retrieve data about subjects from ext source based on ext. login\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// retrieve data about subjects from subjects we already have locally\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n-\t\t\t\t\t} catch (CandidateNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n-\t\t\t\t\t\t// Candidate is already a member of the VO, so do not add him to the list of candidates\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t\t\t// This is OK\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Add candidate to the list of candidates\n-\t\t\t\t\tlog.debug(\"findCandidates: returning candidate: {}\", candidate);\n-\t\t\t\t\tcandidates.add(candidate);\n-\n-\t\t\t\t\tnumOfResults++;\n-\t\t\t\t\t// Stop getting new members if the number of already retrieved members exceeded the maxNumOfResults\n-\t\t\t\t\tif (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\t// Stop walking through next sources if the number of already retrieved members exceeded the maxNumOfResults\n-\t\t\t\tif (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Returning {} potential members for vo {}\", candidates.size(), vo);\n-\t\t\treturn candidates;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\t\treturn this.findCandidates(sess, vo, searchString, 0);\n-\t}\n-\n-\tpublic List<Candidate> findCandidates(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n-\t\tList<Candidate> candidates = new ArrayList<>();\n-\n-\t\ttry {\n-\t\t\t// Iterate through all registered extSources in the group\n-\t\t\tfor (ExtSource source : getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group)) {\n-\t\t\t\t// Info if this is only simple ext source, change behavior if not\n-\t\t\t\tboolean simpleExtSource = true;\n-\n-\t\t\t\t// Get potential subjects from the extSource\n-\t\t\t\tList<Map<String, String>> subjects;\n-\t\t\t\ttry {\n-\t\t\t\t\tif (source instanceof ExtSourceApi) {\n-\t\t\t\t\t\t// find subjects with all their properties\n-\t\t\t\t\t\tsubjects = ((ExtSourceApi) source).findSubjects(searchString);\n-\t\t\t\t\t\tsimpleExtSource = false;\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\t// find subjects only with logins - they then must be retrieved by login\n-\t\t\t\t\t\tsubjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString);\n-\t\t\t\t\t}\n-\t\t\t\t} catch (ExtSourceUnsupportedOperationException e1) {\n-\t\t\t\t\tlog.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\tlog.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n-\t\t\t\t\tcontinue;\n-\t\t\t\t} finally {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\t((ExtSourceSimpleApi) source).close();\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\t// ExtSource doesn't support that functionality, so silently skip it.\n-\t\t\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\t\t\tlog.error(\"Can't close extSource connection. Cause: {}\", e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t\tSet<String> uniqueLogins = new HashSet<>();\n-\t\t\t\tfor (Map<String, String> s : subjects) {\n-\t\t\t\t\t// Check if the user has unique identifier within extSource\n-\t\t\t\t\tif ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n-\t\t\t\t\t\tlog.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n-\t\t\t\t\t\t// Skip to another user\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tString extLogin = s.get(\"login\");\n-\n-\t\t\t\t\t// check uniqueness of every login in extSource\n-\t\t\t\t\tif (uniqueLogins.contains(extLogin)) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tuniqueLogins.add(extLogin);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Get Candidate\n-\t\t\t\t\tCandidate candidate;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tif (simpleExtSource) {\n-\t\t\t\t\t\t\t// retrieve data about subjects from ext source based on ext. login\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t// retrieve data about subjects from subjects we already have locally\n-\t\t\t\t\t\t\tcandidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n-\t\t\t\t\t} catch (CandidateNotExistsException e) {\n-\t\t\t\t\t\tthrow new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n-\t\t\t\t\t} catch (ExtSourceUnsupportedOperationException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tVo vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\t\t\tgetPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n-\t\t\t\t\t\t// Candidate is already a member of the VO, so do not add him to the list of candidates\n-\t\t\t\t\t\tcontinue;\n-\t\t\t\t\t} catch (VoNotExistsException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t\t} catch (MemberNotExistsException e) {\n-\t\t\t\t\t\t// This is OK\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t// Add candidate to the list of candidates\n-\t\t\t\t\tlog.debug(\"findCandidates: returning candidate: {}\", candidate);\n-\t\t\t\t\tcandidates.add(candidate);\n-\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Returning {} potential members for group {}\", candidates.size(), group);\n-\t\t\treturn candidates;\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void addAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n-\t\tList<User> adminsOfVo = this.getAdmins(sess, vo);\n-\t\tif (adminsOfVo.contains(user)) throw new AlreadyAdminException(user, vo);\n-\t\tAuthzResolverBlImpl.setRole(sess, user, vo, Role.VOADMIN);\n-\t\tlog.debug(\"User [{}] added like administrator to VO [{}]\", user, vo);\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n-\t\tList<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n-\t\tif (adminsOfVo.contains(group)) throw new AlreadyAdminException(group, vo);\n-\t\tAuthzResolverBlImpl.setRole(sess, group, vo, Role.VOADMIN);\n-\t\tlog.debug(\"Group [{}] added like administrator to VO [{}]\", group, vo);\n-\t}\n-\n-\tpublic void removeAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n-\t\tList<User> adminsOfVo = this.getAdmins(sess, vo);\n-\t\tif (!adminsOfVo.contains(user)) throw new UserNotAdminException(user);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, user, vo, Role.VOADMIN);\n-\t\tlog.debug(\"User [{}] deleted like administrator from VO [{}]\", user, vo);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n-\t\tList<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n-\t\tif (!adminsOfVo.contains(group)) throw new GroupNotAdminException(group);\n-\t\tAuthzResolverBlImpl.unsetRole(sess, group, vo, Role.VOADMIN);\n-\t\tlog.debug(\"Group [{}] deleted like administrator from VO [{}]\", group, vo);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getAdmins(PerunSession perunSession, Vo vo, Role role, boolean onlyDirectAdmins) throws InternalErrorException {\n-\t\tif (onlyDirectAdmins) {\n-\t\t\treturn getVosManagerImpl().getDirectAdmins(perunSession, vo, role);\n-\t\t} else {\n-\t\t\treturn getVosManagerImpl().getAdmins(perunSession, vo, role);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo, Role role, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getAdmins(perunSession, vo, role, onlyDirectAdmins);\n-\t\tList<RichUser> richUsers;\n-\n-\t\tif (allUserAttributes) {\n-\t\t\trichUsers = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n-\t\t} else {\n-\t\t\ttry {\n-\t\t\t\trichUsers = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n-\t\t\t}\n-\t\t}\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getAdminGroups(PerunSession perunSession, Vo vo, Role role) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getAdminGroups(perunSession, vo, role);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<User> getAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getAdmins(sess, vo);\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<User> getDirectAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getDirectAdmins(sess, vo);\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<RichUser> getDirectRichAdmins(PerunSession sess, Vo vo) throws InternalErrorException, UserNotExistsException {\n-\t\treturn perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, getVosManagerImpl().getDirectAdmins(sess, vo));\n-\t}\n-\n-\t@Deprecated\n-\t@Override\n-\tpublic List<Group> getAdminGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getAdminGroups(sess, vo);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getAdmins(perunSession, vo);\n-\t\treturn perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getAdmins(perunSession, vo);\n-\t\treturn perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n-\t\t}\n-\t}\n-\n-\t@Deprecated\n-\tpublic List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n-\t\ttry {\n-\t\t\treturn getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getDirectRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(\"One of Attribute not exist.\", ex);\n-\t\t}\n-\t}\n-\n-\tpublic void checkVoExists(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException {\n-\t\tgetVosManagerImpl().checkVoExists(sess, vo);\n-\t}\n-\n-\tpublic List<Vo> getVosByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException, VoNotExistsException {\n-\t\tList<Vo> vos = new ArrayList<>();\n-\n-\t\t//All possible useful objects\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\n-\t\tif (perunBean != null) {\n-\t\t\tif (perunBean instanceof Vo) vo = (Vo) perunBean;\n-\t\t\telse if (perunBean instanceof Facility) facility = (Facility) perunBean;\n-\t\t\telse if (perunBean instanceof Group) group = (Group) perunBean;\n-\t\t\telse if (perunBean instanceof Member) member = (Member) perunBean;\n-\t\t\telse if (perunBean instanceof User) user = (User) perunBean;\n-\t\t\telse if (perunBean instanceof Host) host = (Host) perunBean;\n-\t\t\telse if (perunBean instanceof Resource) resource = (Resource) perunBean;\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n-\t\t}\n-\n-\t\t//Important For Groups not work with Subgroups! Invalid members are executed too.\n-\n-\t\tif (group != null) {\n-\t\t\tvos.add(getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId()));\n-\t\t} else if (member != null) {\n-\t\t\tvos.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, member));\n-\t\t} else if (resource != null) {\n-\t\t\tvos.add(getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId()));\n-\t\t} else if (user != null) {\n-\t\t\tvos.addAll(getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user));\n-\t\t} else if (host != null) {\n-\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\tvos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n-\t\t} else if (facility != null) {\n-\t\t\tvos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n-\t\t} else {\n-\t\t\tvos.add(vo);\n-\t\t}\n-\n-\t\tvos = new ArrayList<>(new HashSet<>(vos));\n-\t\treturn vos;\n-\t}\n-\n-\tpublic int getVosCount(PerunSession sess) throws InternalErrorException {\n-\t\treturn getVosManagerImpl().getVosCount(sess);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo, boolean checkGroups) throws InternalErrorException {\n-\t\tif (AuthzResolverBlImpl.isUserInRoleForVo(session, user, role, vo)) return true;\n-\t\tif (checkGroups) {\n-\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(session, user);\n-\t\t\tList<Group> allGroups = new ArrayList<>();\n-\t\t\tfor (Member member : members) {\n-\t\t\t\tallGroups.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(session, member));\n-\t\t\t}\n-\t\t\tfor (Group group : allGroups) {\n-\t\t\t\tif (AuthzResolverBlImpl.isGroupInRoleForVo(session, group, role, vo)) return true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void handleUserLostVoRole(PerunSession sess, User user, Vo vo, Role role) throws InternalErrorException {\n-\t\tlog.debug(\"handleUserLostVoRole(user={},vo={},role={})\",user.getLastName(),vo.getShortName(),role);\n-\t\tswitch (role) {\n-\t\t\tcase SPONSOR:\n-\t\t\t\tremoveSponsorFromSponsoredMembers(sess, vo, user);\n-\t\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void handleGroupLostVoRole(PerunSession sess, Group group, Vo vo, Role role) throws InternalErrorException {\n-\t\tswitch (role) {\n-\t\t\tcase SPONSOR:\n-\t\t\t\t//remove all group members as sponsors\n-\t\t\t\tUsersManagerBl um = getPerunBl().getUsersManagerBl();\n-\t\t\t\tfor (Member groupMember : getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group)) {\n-\t\t\t\t\tremoveSponsorFromSponsoredMembers(sess, vo, um.getUserByMember(sess, groupMember));\n-\t\t\t\t}\n-\t\t\t\tbreak;\n-\t\t}\n-\t}\n-\n-\tprivate void removeSponsorFromSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n-\t\tlog.debug(\"removeSponsorFromSponsoredMembers(vo={},user={})\",vo.getShortName(),user.getLastName());\n-\t\tMembersManagerBl membersManagerBl = getPerunBl().getMembersManagerBl();\n-\t\tfor (Member sponsoredMember : membersManagerBl.getSponsoredMembers(sess, vo, user)) {\n-\t\t\tlog.debug(\"removing sponsor from sponsored member {}\",sponsoredMember.getId());\n-\t\t\tmembersManagerBl.removeSponsor(sess, sponsoredMember, user);\n-\t\t}\n-\t}\n-\t\n-\t/**\n-\t * Gets the vosManagerImpl.\n-\t *\n-\t * @return The vosManagerImpl.\n-\t */\n-\tprivate VosManagerImplApi getVosManagerImpl() {\n-\t\treturn this.vosManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Sets the perunBl for this instance.\n-\t *\n-\t * @param perunBl The perunBl.\n-\t */\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\n-}\n+\n+ private final static Logger log = LoggerFactory.getLogger(VosManagerBlImpl.class);\n+ private final VosManagerImplApi vosManagerImpl;\n+ private PerunBl perunBl;\n+\n+ /**\n+  * Constructor.\n+  */\n+\n+\n+ public VosManagerBlImpl(VosManagerImplApi vosManagerImpl) {\n+  this.vosManagerImpl = vosManagerImpl;\n+ }\n+\n+ public List<Vo> getVos(PerunSession sess) throws InternalErrorException {\n+  return getVosManagerImpl().getVos(sess);\n+ }\n+\n+ public void deleteVo(PerunSession sess, Vo vo, boolean forceDelete) throws InternalErrorException, RelationExistsException {\n+  log.debug(\"Deleting vo {}\", vo);\n+\n+  try {\n+   List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+   log.debug(\"Deleting vo {} members\", vo);\n+   // Check if there are some members left\n+   if (members != null && members.size() > 0) {\n+    if (forceDelete) {\n+     getPerunBl().getMembersManagerBl().deleteAllMembers(sess, vo);\n+    } else throw new RelationExistsException(\"Vo vo=\" + vo + \" contains members\");\n+   }\n+   log.debug(\"Removing vo {} resources and theirs atributes\", vo);\n+   // Delete resources\n+   List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+   if ((resources.size() == 0) || forceDelete) {\n+\n+    for (Resource resource : resources) {\n+     getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource);\n+     // Remove binding between service and resource\n+     List<Service> services = getPerunBl().getResourcesManagerBl().getAssignedServices(sess, resource);\n+     for (Service service : services) {\n+      getPerunBl().getResourcesManagerBl().removeService(sess, resource, service);\n+     }\n+     getPerunBl().getResourcesManagerBl().deleteResource(sess, resource);\n+    }\n+   } else {\n+    throw new RelationExistsException(\"Vo vo=\" + vo + \" contains resources\");\n+   }\n+   log.debug(\"Removing vo {} groups\", vo);\n+   // Delete all groups\n+   List<Group> groups = getPerunBl().getGroupsManagerBl().getGroups(sess, vo);\n+   if (groups.size() != 1) {\n+    if (groups.size() < 1) throw new ConsistencyErrorException(\"'members' group is missing\");\n+    if (forceDelete) {\n+     getPerunBl().getGroupsManagerBl().deleteAllGroups(sess, vo);\n+    } else {\n+     throw new RelationExistsException(\"Vo vo=\" + vo + \" contains groups\");\n+    }\n+   }\n+\n+   // Finally delete binding between Vo and external source\n+   List<ExtSource> ess = getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo);\n+   log.debug(\"Deleting {} external sources binded to the vo {}\", ess.size(), vo);\n+   for (ExtSource es : ess) {\n+    getPerunBl().getExtSourcesManagerBl().removeExtSource(sess, vo, es);\n+   }\n+\n+   // Delete members group\n+   log.debug(\"Removing an administrators' group from the vo {}\", vo);\n+   getPerunBl().getGroupsManagerBl().deleteMembersGroup(sess, vo);\n+\n+   // delete all VO reserved logins from KDC\n+   List<Integer> list = getVosManagerImpl().getVoApplicationIds(sess, vo);\n+   for (Integer appId : list) {\n+    // for each application\n+\n+    for (Pair<String, String> login : getVosManagerImpl().getApplicationReservedLogins(appId)) {\n+     // for all reserved logins - delete them in ext. system (e.g. KDC)\n+     try {\n+      // !!! left = namespace / right = login !!!\n+      getPerunBl().getUsersManagerBl().deletePassword(sess, login.getRight(), login.getLeft());\n+     } catch (LoginNotExistsException ex) {\n+      log.error(\"Login: {} not exists in namespace {} while deleting passwords\", login.getRight(), login.getLeft());\n+     }\n+    }\n+   }\n+   // delete all VO reserved logins from DB\n+   getVosManagerImpl().deleteVoReservedLogins(sess, vo);\n+\n+   // VO applications, submitted data and app_form are deleted on cascade with \"deleteVo()\"\n+\n+   // Delete VO attributes\n+   getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, vo);\n+\n+   // Delete all Vo tags (for resources in Vo)\n+   getPerunBl().getResourcesManagerBl().deleteAllResourcesTagsForVo(sess, vo);\n+  } catch (Exception ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+\n+  // Finally delete the VO\n+  getVosManagerImpl().deleteVo(sess, vo);\n+  getPerunBl().getAuditer().log(sess, \"{} deleted.\", vo);\n+ }\n+\n+ public void deleteVo(PerunSession sess, Vo vo) throws InternalErrorException, RelationExistsException {\n+  // delete VO only if it is completely empty\n+  this.deleteVo(sess, vo, false);\n+ }\n+\n+ public Vo createVo(PerunSession sess, Vo vo) throws VoExistsException, InternalErrorException {\n+  // Create entries in the DB and Grouper\n+  vo = getVosManagerImpl().createVo(sess, vo);\n+  getPerunBl().getAuditer().log(sess, \"{} created.\", vo);\n+\n+  try {\n+   // Create group containing VO members\n+   Group members = new Group(VosManager.MEMBERS_GROUP, VosManager.MEMBERS_GROUP_DESCRIPTION + \" for VO \" + vo.getName());\n+   getPerunBl().getGroupsManagerBl().createGroup(sess, vo, members);\n+   log.debug(\"Members group created, vo '{}'\", vo);\n+  } catch (GroupExistsException e) {\n+   throw new ConsistencyErrorException(\"Group already exists\", e);\n+  }\n+\n+  // create empty application form\n+  getVosManagerImpl().createApplicationForm(sess, vo);\n+\n+  //set creator as VO manager\n+  if (sess.getPerunPrincipal().getUser() != null) {\n+   try {\n+    addAdmin(sess, vo, sess.getPerunPrincipal().getUser());\n+   } catch (AlreadyAdminException ex) {\n+    throw new ConsistencyErrorException(\"Add manager to newly created VO failed because there is a particular manager already assigned\", ex);\n+   }\n+  } else {\n+   log.error(\"Can't set VO manager during creating of the VO. User from perunSession is null. {} {}\", vo, sess);\n+  }\n+  log.debug(\"Vo {} created\", vo);\n+  return vo;\n+ }\n+\n+ public Vo updateVo(PerunSession sess, Vo vo) throws InternalErrorException {\n+  getPerunBl().getAuditer().log(sess, \"{} updated.\", vo);\n+  return getVosManagerImpl().updateVo(sess, vo);\n+ }\n+\n+ public Vo getVoByShortName(PerunSession sess, String shortName) throws InternalErrorException, VoNotExistsException {\n+  return getVosManagerImpl().getVoByShortName(sess, shortName);\n+ }\n+\n+ public Vo getVoById(PerunSession sess, int id) throws InternalErrorException, VoNotExistsException {\n+  return getVosManagerImpl().getVoById(sess, id);\n+ }\n+\n+ public List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString, int maxNumOfResults) throws InternalErrorException {\n+  List<Candidate> candidates = new ArrayList<>();\n+  int numOfResults = 0;\n+  try {\n+   // Iterate through all registered extSources\n+\n+   for (ExtSource source : getPerunBl().getExtSourcesManagerBl().getVoExtSources(sess, vo)) {\n+    // Info if this is only simple ext source, change behavior if not\n+\n+    boolean simpleExtSource = true;\n+\n+    // Get potential subjects from the extSource\n+    List<Map<String, String>> subjects;\n+    try {\n+     if (source instanceof ExtSourceApi) {\n+      // find subjects with all their properties\n+      subjects = ((ExtSourceApi) source).findSubjects(searchString, maxNumOfResults);\n+      simpleExtSource = false;\n+     } else {\n+      // find subjects only with logins - they then must be retrieved by login\n+      subjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString, maxNumOfResults);\n+     }\n+    } catch (ExtSourceUnsupportedOperationException e1) {\n+     log.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n+     continue;\n+    } catch (InternalErrorException e) {\n+     log.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n+     continue;\n+    } finally {\n+     try {\n+      ((ExtSourceSimpleApi) source).close();\n+     } catch (ExtSourceUnsupportedOperationException e) {\n+      // ExtSource doesn't support that functionality, so silently skip it.\n+\n+     } catch (InternalErrorException e) {\n+      log.error(\"Can't close extSource connection. Cause: {}\", e);\n+     }\n+    }\n+    Set<String> uniqueLogins = new HashSet<>();\n+    for (Map<String, String> s : subjects) {\n+     // Check if the user has unique identifier within extSource\n+     if ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n+      log.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n+      // Skip to another user\n+      continue;\n+     }\n+     String extLogin = s.get(\"login\");\n+\n+     // check uniqueness of every login in extSource\n+     if (uniqueLogins.contains(extLogin)) {\n+      throw new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n+     } else {\n+      uniqueLogins.add(extLogin);\n+     }\n+\n+     // Get Candidate\n+     Candidate candidate;\n+     try {\n+      if (simpleExtSource) {\n+       // retrieve data about subjects from ext source based on ext. login\n+       candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n+      } else {\n+       // retrieve data about subjects from subjects we already have locally\n+       candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n+      }\n+     } catch (ExtSourceNotExistsException e) {\n+      throw new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n+     } catch (CandidateNotExistsException e) {\n+      throw new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n+     } catch (ExtSourceUnsupportedOperationException e) {\n+      throw new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n+     }\n+\n+     try {\n+      getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n+      // Candidate is already a member of the VO, so do not add him to the list of candidates\n+      continue;\n+     } catch (MemberNotExistsException e) {\n+      // This is OK\n+\n+     }\n+\n+     // Add candidate to the list of candidates\n+     log.debug(\"findCandidates: returning candidate: {}\", candidate);\n+     candidates.add(candidate);\n+     numOfResults++;\n+     // Stop getting new members if the number of already retrieved members exceeded the maxNumOfResults\n+     if (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n+      break;\n+     }\n+    }\n+\n+    // Stop walking through next sources if the number of already retrieved members exceeded the maxNumOfResults\n+    if (maxNumOfResults > 0 && numOfResults >= maxNumOfResults) {\n+     break;\n+    }\n+   }\n+   log.debug(\"Returning {} potential members for vo {}\", candidates.size(), vo);\n+   return candidates;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public List<Candidate> findCandidates(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+  return this.findCandidates(sess, vo, searchString, 0);\n+ }\n+\n+ public List<Candidate> findCandidates(PerunSession sess, Group group, String searchString) throws InternalErrorException {\n+  List<Candidate> candidates = new ArrayList<>();\n+  try {\n+   // Iterate through all registered extSources in the group\n+\n+   for (ExtSource source : getPerunBl().getExtSourcesManagerBl().getGroupExtSources(sess, group)) {\n+    // Info if this is only simple ext source, change behavior if not\n+\n+    boolean simpleExtSource = true;\n+\n+    // Get potential subjects from the extSource\n+    List<Map<String, String>> subjects;\n+    try {\n+     if (source instanceof ExtSourceApi) {\n+      // find subjects with all their properties\n+      subjects = ((ExtSourceApi) source).findSubjects(searchString);\n+      simpleExtSource = false;\n+     } else {\n+      // find subjects only with logins - they then must be retrieved by login\n+      subjects = ((ExtSourceSimpleApi) source).findSubjectsLogins(searchString);\n+     }\n+    } catch (ExtSourceUnsupportedOperationException e1) {\n+     log.warn(\"ExtSource {} doesn't support findSubjects\", source.getName());\n+     continue;\n+    } catch (InternalErrorException e) {\n+     log.error(\"Error occurred on ExtSource {},  Exception {}.\", source.getName(), e);\n+     continue;\n+    } finally {\n+     try {\n+      ((ExtSourceSimpleApi) source).close();\n+     } catch (ExtSourceUnsupportedOperationException e) {\n+      // ExtSource doesn't support that functionality, so silently skip it.\n+\n+     } catch (InternalErrorException e) {\n+      log.error(\"Can't close extSource connection. Cause: {}\", e);\n+     }\n+    }\n+    Set<String> uniqueLogins = new HashSet<>();\n+    for (Map<String, String> s : subjects) {\n+     // Check if the user has unique identifier within extSource\n+     if ((s.get(\"login\") == null) || (s.get(\"login\") != null && s.get(\"login\").isEmpty())) {\n+      log.error(\"User '{}' cannot be added, because he/she doesn't have a unique identifier (login)\", s);\n+      // Skip to another user\n+      continue;\n+     }\n+     String extLogin = s.get(\"login\");\n+\n+     // check uniqueness of every login in extSource\n+     if (uniqueLogins.contains(extLogin)) {\n+      throw new InternalErrorException(\"There are more than 1 login '\" + extLogin + \"' getting from extSource '\" + source + \"'\");\n+     } else {\n+      uniqueLogins.add(extLogin);\n+     }\n+\n+     // Get Candidate\n+     Candidate candidate;\n+     try {\n+      if (simpleExtSource) {\n+       // retrieve data about subjects from ext source based on ext. login\n+       candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, source, extLogin);\n+      } else {\n+       // retrieve data about subjects from subjects we already have locally\n+       candidate = getPerunBl().getExtSourcesManagerBl().getCandidate(sess, s, source, extLogin);\n+      }\n+     } catch (ExtSourceNotExistsException e) {\n+      throw new ConsistencyErrorException(\"Getting candidate from non-existing extSource \" + source, e);\n+     } catch (CandidateNotExistsException e) {\n+      throw new ConsistencyErrorException(\"findSubjects returned that candidate, but getCandidate cannot find him using login \" + extLogin, e);\n+     } catch (ExtSourceUnsupportedOperationException e) {\n+      throw new InternalErrorException(\"extSource supports findSubjects but not getCandidate???\", e);\n+     }\n+\n+     try {\n+      Vo vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+      getPerunBl().getMembersManagerBl().getMemberByUserExtSources(sess, vo, candidate.getUserExtSources());\n+      // Candidate is already a member of the VO, so do not add him to the list of candidates\n+      continue;\n+     } catch (VoNotExistsException e) {\n+      throw new InternalErrorException(e);\n+     } catch (MemberNotExistsException e) {\n+      // This is OK\n+\n+     }\n+\n+     // Add candidate to the list of candidates\n+     log.debug(\"findCandidates: returning candidate: {}\", candidate);\n+     candidates.add(candidate);\n+    }\n+   }\n+   log.debug(\"Returning {} potential members for group {}\", candidates.size(), group);\n+   return candidates;\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void addAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, AlreadyAdminException {\n+  List<User> adminsOfVo = this.getAdmins(sess, vo);\n+  if (adminsOfVo.contains(user)) throw new AlreadyAdminException(user, vo);\n+  AuthzResolverBlImpl.setRole(sess, user, vo, Role.VOADMIN);\n+  log.debug(\"User [{}] added like administrator to VO [{}]\", user, vo);\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, AlreadyAdminException {\n+  List<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n+  if (adminsOfVo.contains(group)) throw new AlreadyAdminException(group, vo);\n+  AuthzResolverBlImpl.setRole(sess, group, vo, Role.VOADMIN);\n+  log.debug(\"Group [{}] added like administrator to VO [{}]\", group, vo);\n+ }\n+\n+ public void removeAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException, UserNotAdminException {\n+  List<User> adminsOfVo = this.getAdmins(sess, vo);\n+  if (!adminsOfVo.contains(user)) throw new UserNotAdminException(user);\n+  AuthzResolverBlImpl.unsetRole(sess, user, vo, Role.VOADMIN);\n+  log.debug(\"User [{}] deleted like administrator from VO [{}]\", user, vo);\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Vo vo, Group group) throws InternalErrorException, GroupNotAdminException {\n+  List<Group> adminsOfVo = this.getAdminGroups(sess, vo);\n+  if (!adminsOfVo.contains(group)) throw new GroupNotAdminException(group);\n+  AuthzResolverBlImpl.unsetRole(sess, group, vo, Role.VOADMIN);\n+  log.debug(\"Group [{}] deleted like administrator from VO [{}]\", group, vo);\n+ }\n+\n+ @Override\n+ public List<User> getAdmins(PerunSession perunSession, Vo vo, Role role, boolean onlyDirectAdmins) throws InternalErrorException {\n+  if (onlyDirectAdmins) {\n+   return getVosManagerImpl().getDirectAdmins(perunSession, vo, role);\n+  } else {\n+   return getVosManagerImpl().getAdmins(perunSession, vo, role);\n+  }\n+ }\n+\n+ @Override\n+ public List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo, Role role, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = this.getAdmins(perunSession, vo, role, onlyDirectAdmins);\n+  List<RichUser> richUsers;\n+  if (allUserAttributes) {\n+   richUsers = perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n+  } else {\n+   try {\n+    richUsers = getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n+   } catch (AttributeNotExistsException ex) {\n+    throw new InternalErrorException(\"One of Attribute not exist.\", ex);\n+   }\n+  }\n+\n+  return richUsers;\n+ }\n+\n+ @Override\n+ public List<Group> getAdminGroups(PerunSession perunSession, Vo vo, Role role) throws InternalErrorException {\n+  return getVosManagerImpl().getAdminGroups(perunSession, vo, role);\n+ }\n+\n+ @Deprecated\n+ public List<User> getAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n+  return getVosManagerImpl().getAdmins(sess, vo);\n+ }\n+\n+ @Deprecated\n+ @Override\n+ public List<User> getDirectAdmins(PerunSession sess, Vo vo) throws InternalErrorException {\n+  return getVosManagerImpl().getDirectAdmins(sess, vo);\n+ }\n+\n+ @Deprecated\n+ @Override\n+ public List<RichUser> getDirectRichAdmins(PerunSession sess, Vo vo) throws InternalErrorException, UserNotExistsException {\n+  return perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(sess, getVosManagerImpl().getDirectAdmins(sess, vo));\n+ }\n+\n+ @Deprecated\n+ @Override\n+ public List<Group> getAdminGroups(PerunSession sess, Vo vo) throws InternalErrorException {\n+  return getVosManagerImpl().getAdminGroups(sess, vo);\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getRichAdmins(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = this.getAdmins(perunSession, vo);\n+  return perunBl.getUsersManagerBl().getRichUsersFromListOfUsers(perunSession, users);\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getRichAdminsWithAttributes(PerunSession perunSession, Vo vo) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = this.getAdmins(perunSession, vo);\n+  return perunBl.getUsersManagerBl().getRichUsersWithAttributesFromListOfUsers(perunSession, users);\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n+  try {\n+   return getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n+  } catch (AttributeNotExistsException ex) {\n+   throw new InternalErrorException(\"One of Attribute not exist.\", ex);\n+  }\n+ }\n+\n+ @Deprecated\n+ public List<RichUser> getDirectRichAdminsWithSpecificAttributes(PerunSession perunSession, Vo vo, List<String> specificAttributes) throws InternalErrorException, UserNotExistsException {\n+  try {\n+   return getPerunBl().getUsersManagerBl().convertUsersToRichUsersWithAttributes(perunSession, this.getDirectRichAdmins(perunSession, vo), getPerunBl().getAttributesManagerBl().getAttributesDefinition(perunSession, specificAttributes));\n+  } catch (AttributeNotExistsException ex) {\n+   throw new InternalErrorException(\"One of Attribute not exist.\", ex);\n+  }\n+ }\n+\n+ public void checkVoExists(PerunSession sess, Vo vo) throws InternalErrorException, VoNotExistsException {\n+  getVosManagerImpl().checkVoExists(sess, vo);\n+ }\n+\n+ public List<Vo> getVosByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException, VoNotExistsException {\n+  List<Vo> vos = new ArrayList<>();\n+\n+  //All possible useful objects\n+  Vo vo = null;\n+  Facility facility = null;\n+  Group group = null;\n+  Member member = null;\n+  User user = null;\n+  Host host = null;\n+  Resource resource = null;\n+  if (perunBean != null) {\n+   if (perunBean instanceof Vo) vo = (Vo) perunBean;\n+   else if (perunBean instanceof Facility) facility = (Facility) perunBean;\n+   else if (perunBean instanceof Group) group = (Group) perunBean;\n+   else if (perunBean instanceof Member) member = (Member) perunBean;\n+   else if (perunBean instanceof User) user = (User) perunBean;\n+   else if (perunBean instanceof Host) host = (Host) perunBean;\n+   else if (perunBean instanceof Resource) resource = (Resource) perunBean;\n+   else {\n+         throw new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n+        }\n+  } else {\n+   throw new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n+  }\n+\n+  //Important For Groups not work with Subgroups! Invalid members are executed too.\n+  if (group != null) {\n+   vos.add(getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId()));\n+  } else if (member != null) {\n+   vos.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, member));\n+  } else if (resource != null) {\n+          vos.add(getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId()));\n+         } else if (user != null) {\n+          vos.addAll(getPerunBl().getUsersManagerBl().getVosWhereUserIsMember(sess, user));\n+         } else if (host != null) {\n+                 facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                 vos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n+                } else if (facility != null) {\n+                 vos.addAll(getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility));\n+                } else {\n+                 vos.add(vo);\n+                }\n+  vos = new ArrayList<>(new HashSet<>(vos));\n+  return vos;\n+ }\n+\n+ public int getVosCount(PerunSession sess) throws InternalErrorException {\n+  return getVosManagerImpl().getVosCount(sess);\n+ }\n+\n+ @Override\n+ public boolean isUserInRoleForVo(PerunSession session, User user, Role role, Vo vo, boolean checkGroups) throws InternalErrorException {\n+  if (AuthzResolverBlImpl.isUserInRoleForVo(session, user, role, vo))\n+   return true;\n+  if (checkGroups) {\n+   List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(session, user);\n+   List<Group> allGroups = new ArrayList<>();\n+   for (Member member : members) {\n+    allGroups.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(session, member));\n+   }\n+\n+   for (Group group : allGroups) {\n+    if (AuthzResolverBlImpl.isGroupInRoleForVo(session, group, role, vo))\n+     return true;\n+   }\n+  }\n+\n+  return false;\n+ }\n+\n+ @Override\n+ public void handleUserLostVoRole(PerunSession sess, User user, Vo vo, Role role) throws InternalErrorException {\n+  log.debug(\"handleUserLostVoRole(user={},vo={},role={})\", user.getLastName(), vo.getShortName(), role);\n+  switch (role) {\n+   case SPONSOR:\n+    removeSponsorFromSponsoredMembers(sess, vo, user);\n+    break;\n+  }\n+ }\n+\n+ @Override\n+ public void handleGroupLostVoRole(PerunSession sess, Group group, Vo vo, Role role) throws InternalErrorException {\n+  switch (role) {\n+   case SPONSOR:\n+    //remove all group members as sponsors\n+    UsersManagerBl um = getPerunBl().getUsersManagerBl();\n+    for (Member groupMember : getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group)) {\n+     removeSponsorFromSponsoredMembers(sess, vo, um.getUserByMember(sess, groupMember));\n+    }\n+    break;\n+  }\n+ }\n+\n+\n+ private void removeSponsorFromSponsoredMembers(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n+  log.debug(\"removeSponsorFromSponsoredMembers(vo={},user={})\", vo.getShortName(), user.getLastName());\n+  MembersManagerBl membersManagerBl = getPerunBl().getMembersManagerBl();\n+  for (Member sponsoredMember : membersManagerBl.getSponsoredMembers(sess, vo, user)) {\n+   log.debug(\"removing sponsor from sponsored member {}\", sponsoredMember.getId());\n+   membersManagerBl.removeSponsor(sess, sponsoredMember, user);\n+  }\n+ }\n+ \n+ /**\n+  * Gets the vosManagerImpl.\n+  *\n+  * @return The vosManagerImpl.\n+  */\n+\n+\n+ private VosManagerImplApi getVosManagerImpl() {\n+  return this.vosManagerImpl;\n+ }\n+\n+ /**\n+  * Sets the perunBl for this instance.\n+  *\n+  * @param perunBl The perunBl.\n+  */\n+\n+ public void setPerunBl(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+ }\n+\n+ /**\n+  * Gets the perunBl.\n+  *\n+  * @return The perunBl.\n+  */\n+\n+ public PerunBl getPerunBl() {\n+  return this.perunBl;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 614
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/185/VosManagerBlImpl.java\nindex 97d79ac9133..0a0ce9e4f3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/185/VosManagerBlImpl.java\n@@ -604,7 +604,7 @@ public class VosManagerBlImpl implements VosManagerBl {\n \t\t\tmembersManagerBl.removeSponsor(sess, sponsoredMember, user);\n \t\t}\n \t}\n-\t\n+\n \t/**\n \t * Gets the vosManagerImpl.\n \t *\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/185/VosManagerBlImpl.java\nindex 97d79ac9133..180983249a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/185/VosManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/185/VosManagerBlImpl.java\n@@ -603,9 +603,7 @@ public class VosManagerBlImpl implements VosManagerBl {\n \t\t\tlog.debug(\"removing sponsor from sponsored member {}\",sponsoredMember.getId());\n \t\t\tmembersManagerBl.removeSponsor(sess, sponsoredMember, user);\n \t\t}\n-\t}\n-\t\n-\t/**\n+\t\t\t}/**\n \t * Gets the vosManagerImpl.\n \t *\n \t * @return The vosManagerImpl.\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}