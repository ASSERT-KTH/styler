{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "126",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n/*\n *  Froked from https://github.com/vert-x3/vertx-web/blob/master/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/BodyHandlerImpl.java\n *\n */\npackage org.apache.servicecomb.transport.rest.vertx;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/126/RestBodyHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/126/RestBodyHandler.java\nindex a02dffc30a9..6b424327d42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/126/RestBodyHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/126/RestBodyHandler.java\n@@ -19,6 +19,7 @@\n  *  Froked from https://github.com/vert-x3/vertx-web/blob/master/vertx-web/src/main/java/io/vertx/ext/web/handler/impl/BodyHandlerImpl.java\n  *\n  */\n+\n package org.apache.servicecomb.transport.rest.vertx;\n \n import java.io.File;\n@@ -50,7 +51,7 @@ import io.vertx.ext.web.impl.FileUploadImpl;\n /**\n  * copy from io.vertx.ext.web.handler.impl.BodyHandlerImpl\n  * and modified.\n- *\n+ * <p>\n  * allowed to disable fileupload by setUploadsDirectory(null)\n  */\n public class RestBodyHandler implements BodyHandler {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/126/RestBodyHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/126/RestBodyHandler.java\nindex a02dffc30a9..ee7ae0be17c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/126/RestBodyHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/126/RestBodyHandler.java\n@@ -268,4 +268,4 @@ public class RestBodyHandler implements BodyHandler {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/126/RestBodyHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/126/RestBodyHandler.java\nindex a02dffc30a9..65a5a11e26b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/126/RestBodyHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/126/RestBodyHandler.java\n@@ -25,13 +25,10 @@ import java.io.File;\n import java.util.Set;\n import java.util.UUID;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n import javax.ws.rs.core.Response.Status;\n-\n import org.apache.servicecomb.swagger.invocation.exception.CommonExceptionData;\n import org.apache.servicecomb.swagger.invocation.exception.ExceptionFactory;\n import org.apache.servicecomb.swagger.invocation.exception.InvocationException;\n-\n import io.netty.handler.codec.http.HttpHeaderValues;\n import io.netty.handler.codec.http.multipart.HttpPostRequestDecoder.ErrorDataDecoderException;\n import io.vertx.core.Handler;\n@@ -53,8 +50,8 @@ import io.vertx.ext.web.impl.FileUploadImpl;\n  *\n  * allowed to disable fileupload by setUploadsDirectory(null)\n  */\n-public class RestBodyHandler implements BodyHandler {\n \n+public class RestBodyHandler implements BodyHandler {\n   private static final Logger LOGGER = LoggerFactory.getLogger(BodyHandlerImpl.class);\n \n   private static final String BODY_HANDLED = \"__body-handled\";\n@@ -120,7 +117,6 @@ public class RestBodyHandler implements BodyHandler {\n   }\n \n   private class BHandler implements Handler<Buffer> {\n-\n     private RoutingContext context;\n \n     private Buffer body = Buffer.buffer();\n@@ -139,8 +135,8 @@ public class RestBodyHandler implements BodyHandler {\n \n     BHandler(RoutingContext context) {\n       this.context = context;\n-      Set<FileUpload> fileUploads = context.fileUploads();\n \n+      Set<FileUpload> fileUploads = context.fileUploads();\n       final String contentType = context.request().getHeader(HttpHeaders.CONTENT_TYPE);\n       if (contentType == null) {\n         isMultipart = false;\n@@ -158,21 +154,26 @@ public class RestBodyHandler implements BodyHandler {\n           // *** cse begin ***\n           if (uploadsDir == null) {\n             failed = true;\n+\n             CommonExceptionData data = new CommonExceptionData(\"not support file upload.\");\n             throw new ErrorDataDecoderException(ExceptionFactory.createConsumerException(data));\n           }\n           // *** cse end ***\n \n           // we actually upload to a file with a generated filename\n+\n           uploadCount.incrementAndGet();\n+\n           String uploadedFileName = new File(uploadsDir, UUID.randomUUID().toString()).getPath();\n           upload.streamToFileSystem(uploadedFileName);\n+\n           FileUploadImpl fileUpload = new FileUploadImpl(uploadedFileName, upload);\n           fileUploads.add(fileUpload);\n           upload.exceptionHandler(context::fail);\n           upload.endHandler(v -> uploadEnded());\n         });\n       }\n+\n       context.request().exceptionHandler(context::fail);\n     }\n \n@@ -193,11 +194,12 @@ public class RestBodyHandler implements BodyHandler {\n       if (failed) {\n         return;\n       }\n+\n       uploadSize += buff.length();\n       if (bodyLimit != -1 && uploadSize > bodyLimit) {\n         failed = true;\n         context.fail(new InvocationException(Status.REQUEST_ENTITY_TOO_LARGE,\n-            Status.REQUEST_ENTITY_TOO_LARGE.getReasonPhrase()));\n+          Status.REQUEST_ENTITY_TOO_LARGE.getReasonPhrase()));\n       } else {\n         // multipart requests will not end up in the request body\n         // url encoded should also not, however jQuery by default\n@@ -244,6 +246,7 @@ public class RestBodyHandler implements BodyHandler {\n       if (mergeFormAttributes && req.isExpectMultipart()) {\n         req.params().addAll(req.formAttributes());\n       }\n+\n       context.setBody(body);\n       context.next();\n     }\n@@ -255,12 +258,11 @@ public class RestBodyHandler implements BodyHandler {\n         fileSystem.exists(uploadedFileName, existResult -> {\n           if (existResult.failed()) {\n             LOGGER.warn(\"Could not detect if uploaded file exists, not deleting: \" + uploadedFileName,\n-                existResult.cause());\n+existResult.cause());\n           } else if (existResult.result()) {\n             fileSystem.delete(uploadedFileName, deleteResult -> {\n               if (deleteResult.failed()) {\n-                LOGGER.warn(\"Delete of uploaded file failed: \" + uploadedFileName,\n-                    deleteResult.cause());\n+                LOGGER.warn(\"Delete of uploaded file failed: \" + uploadedFileName, deleteResult.cause());\n               }\n             });\n           }\n@@ -268,4 +270,4 @@ public class RestBodyHandler implements BodyHandler {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}