{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3026",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "101",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "129",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "179",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3026/CheckPointerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3026/CheckPointerImpl.java\nindex bdc6b501ead..5aa982b4352 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3026/CheckPointerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3026/CheckPointerImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.io.IOException;\n@@ -40,158 +41,154 @@ import static org.neo4j.helpers.Format.duration;\n \n public class CheckPointerImpl extends LifecycleAdapter implements CheckPointer\n {\n-    private final TransactionAppender appender;\n-    private final TransactionIdStore transactionIdStore;\n-    private final CheckPointThreshold threshold;\n-    private final StorageEngine storageEngine;\n-    private final LogPruning logPruning;\n-    private final DatabaseHealth databaseHealth;\n-    private final IOLimiter ioLimiter;\n-    private final Log msgLog;\n-    private final CheckPointTracer tracer;\n-    private final StoreCopyCheckPointMutex mutex;\n+  private final TransactionAppender appender;\n+  private final TransactionIdStore transactionIdStore;\n+  private final CheckPointThreshold threshold;\n+  private final StorageEngine storageEngine;\n+  private final LogPruning logPruning;\n+  private final DatabaseHealth databaseHealth;\n+  private final IOLimiter ioLimiter;\n+  private final Log msgLog;\n+  private final CheckPointTracer tracer;\n+  private final StoreCopyCheckPointMutex mutex;\n \n-    private long lastCheckPointedTx;\n+  private long lastCheckPointedTx;\n \n-    public CheckPointerImpl(\n-            TransactionIdStore transactionIdStore,\n-            CheckPointThreshold threshold,\n-            StorageEngine storageEngine,\n-            LogPruning logPruning,\n-            TransactionAppender appender,\n-            DatabaseHealth databaseHealth,\n-            LogProvider logProvider,\n-            CheckPointTracer tracer,\n-            IOLimiter ioLimiter,\n-            StoreCopyCheckPointMutex mutex )\n-    {\n-        this.appender = appender;\n-        this.transactionIdStore = transactionIdStore;\n-        this.threshold = threshold;\n-        this.storageEngine = storageEngine;\n-        this.logPruning = logPruning;\n-        this.databaseHealth = databaseHealth;\n-        this.ioLimiter = ioLimiter;\n-        this.msgLog = logProvider.getLog( CheckPointerImpl.class );\n-        this.tracer = tracer;\n-        this.mutex = mutex;\n-    }\n+  public CheckPointerImpl(\n+      TransactionIdStore transactionIdStore,\n+      CheckPointThreshold threshold,\n+      StorageEngine storageEngine,\n+      LogPruning logPruning,\n+      TransactionAppender appender,\n+      DatabaseHealth databaseHealth,\n+      LogProvider logProvider,\n+      CheckPointTracer tracer,\n+      IOLimiter ioLimiter,\n+      StoreCopyCheckPointMutex mutex)\n+  {\n+    this.appender = appender;\n+    this.transactionIdStore = transactionIdStore;\n+    this.threshold = threshold;\n+    this.storageEngine = storageEngine;\n+    this.logPruning = logPruning;\n+    this.databaseHealth = databaseHealth;\n+    this.ioLimiter = ioLimiter;\n+    this.msgLog = logProvider.getLog(CheckPointerImpl.class);\n+    this.tracer = tracer;\n+    this.mutex = mutex;\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        threshold.initialize( transactionIdStore.getLastClosedTransactionId() );\n-    }\n+  @Override\n+  public void start()\n+  {\n+    threshold.initialize(transactionIdStore.getLastClosedTransactionId());\n+  }\n \n-    @Override\n-    public long forceCheckPoint( TriggerInfo info ) throws IOException\n+  @Override\n+  public long forceCheckPoint(TriggerInfo info) throws IOException\n+  {\n+    ioLimiter.disableLimit();\n+    try (Resource lock = mutex.checkPoint())\n     {\n-        ioLimiter.disableLimit();\n-        try ( Resource lock = mutex.checkPoint() )\n-        {\n-            return doCheckPoint( info, LogCheckPointEvent.NULL );\n-        }\n-        finally\n-        {\n-            ioLimiter.enableLimit();\n-        }\n+      return doCheckPoint(info, LogCheckPointEvent.NULL);\n+    } finally\n+    {\n+      ioLimiter.enableLimit();\n     }\n+  }\n \n-    @Override\n-    public long tryCheckPoint( TriggerInfo info ) throws IOException\n+  @Override\n+  public long tryCheckPoint(TriggerInfo info) throws IOException\n+  {\n+    ioLimiter.disableLimit();\n+    try\n     {\n-        ioLimiter.disableLimit();\n-        try\n+      Resource lockAttempt = mutex.tryCheckPoint();\n+      if (lockAttempt != null)\n+      {\n+        try (Resource lock = lockAttempt)\n         {\n-            Resource lockAttempt = mutex.tryCheckPoint();\n-            if ( lockAttempt != null )\n-            {\n-                try ( Resource lock = lockAttempt )\n-                {\n-                    return doCheckPoint( info, LogCheckPointEvent.NULL );\n-                }\n-            }\n-            else\n-            {\n-                try ( Resource lock = mutex.checkPoint() )\n-                {\n-                    msgLog.info( info.describe( lastCheckPointedTx ) +\n-                                 \" Check pointing was already running, completed now\" );\n-                    return lastCheckPointedTx;\n-                }\n-            }\n+          return doCheckPoint(info, LogCheckPointEvent.NULL);\n         }\n-        finally\n+      } else\n+      {\n+        try (Resource lock = mutex.checkPoint())\n         {\n-            ioLimiter.enableLimit();\n+          msgLog.info(info.describe(lastCheckPointedTx) +\n+              \" Check pointing was already running, completed now\");\n+          return lastCheckPointedTx;\n         }\n-    }\n-\n-    @Override\n-    public long checkPointIfNeeded( TriggerInfo info ) throws IOException\n+      }\n+    } finally\n     {\n-        if ( threshold.isCheckPointingNeeded( transactionIdStore.getLastClosedTransactionId(), info ) )\n-        {\n-            try ( LogCheckPointEvent event = tracer.beginCheckPoint();\n-                    Resource lock = mutex.checkPoint() )\n-            {\n-                return doCheckPoint( info, event );\n-            }\n-        }\n-        return -1;\n+      ioLimiter.enableLimit();\n     }\n+  }\n \n-    private long doCheckPoint( TriggerInfo triggerInfo, LogCheckPointEvent logCheckPointEvent ) throws IOException\n+  @Override\n+  public long checkPointIfNeeded(TriggerInfo info) throws IOException\n+  {\n+    if (threshold.isCheckPointingNeeded(transactionIdStore.getLastClosedTransactionId(), info))\n     {\n-        try\n-        {\n-            long[] lastClosedTransaction = transactionIdStore.getLastClosedTransaction();\n-            long lastClosedTransactionId = lastClosedTransaction[0];\n-            LogPosition logPosition = new LogPosition( lastClosedTransaction[1], lastClosedTransaction[2] );\n-            String prefix = triggerInfo.describe( lastClosedTransactionId );\n-            /*\n-             * Check kernel health before going into waiting for transactions to be closed, to avoid\n-             * getting into a scenario where we would await a condition that would potentially never\n-             * happen.\n-             */\n-            databaseHealth.assertHealthy( IOException.class );\n-            /*\n-             * First we flush the store. If we fail now or during the flush, on recovery we'll find the\n-             * earlier check point and replay from there all the log entries. Everything will be ok.\n-             */\n-            msgLog.info( prefix + \" checkpoint started...\" );\n-            long startTime = currentTimeMillis();\n-            storageEngine.flushAndForce( ioLimiter );\n-            /*\n-             * Check kernel health before going to write the next check point.  In case of a panic this check point\n-             * will be aborted, which is the safest alternative so that the next recovery will have a chance to\n-             * repair the damages.\n-             */\n-            databaseHealth.assertHealthy( IOException.class );\n-            appender.checkPoint( logPosition, logCheckPointEvent );\n-            threshold.checkPointHappened( lastClosedTransactionId );\n-            msgLog.info( prefix + \" checkpoint completed in \" + duration( currentTimeMillis() - startTime ) );\n-            /*\n-             * Prune up to the version pointed from the latest check point,\n-             * since it might be an earlier version than the current log version.\n-             */\n-            logPruning.pruneLogs( logPosition.getLogVersion() );\n-            lastCheckPointedTx = lastClosedTransactionId;\n-            return lastClosedTransactionId;\n-        }\n-        catch ( Throwable t )\n-        {\n-            // Why only log failure here? It's because check point can potentially be made from various\n-            // points of execution e.g. background thread triggering check point if needed and during\n-            // shutdown where it's better to have more control over failure handling.\n-            msgLog.error( \"Checkpoint failed\", t );\n-            throw t;\n-        }\n+      try (LogCheckPointEvent event = tracer.beginCheckPoint();\n+           Resource lock = mutex.checkPoint())\n+      {\n+        return doCheckPoint(info, event);\n+      }\n     }\n+    return -1;\n+  }\n \n-    @Override\n-    public long lastCheckPointedTransactionId()\n+  private long doCheckPoint(TriggerInfo triggerInfo, LogCheckPointEvent logCheckPointEvent) throws IOException\n+  {\n+    try\n     {\n-        return lastCheckPointedTx;\n+      long[] lastClosedTransaction = transactionIdStore.getLastClosedTransaction();\n+      long lastClosedTransactionId = lastClosedTransaction[0];\n+      LogPosition logPosition = new LogPosition(lastClosedTransaction[1], lastClosedTransaction[2]);\n+      String prefix = triggerInfo.describe(lastClosedTransactionId);\n+      /*\n+       * Check kernel health before going into waiting for transactions to be closed, to avoid\n+       * getting into a scenario where we would await a condition that would potentially never\n+       * happen.\n+       */\n+      databaseHealth.assertHealthy(IOException.class);\n+      /*\n+       * First we flush the store. If we fail now or during the flush, on recovery we'll find the\n+       * earlier check point and replay from there all the log entries. Everything will be ok.\n+       */\n+      msgLog.info(prefix + \" checkpoint started...\");\n+      long startTime = currentTimeMillis();\n+      storageEngine.flushAndForce(ioLimiter);\n+      /*\n+       * Check kernel health before going to write the next check point.  In case of a panic this check point\n+       * will be aborted, which is the safest alternative so that the next recovery will have a chance to\n+       * repair the damages.\n+       */\n+      databaseHealth.assertHealthy(IOException.class);\n+      appender.checkPoint(logPosition, logCheckPointEvent);\n+      threshold.checkPointHappened(lastClosedTransactionId);\n+      msgLog.info(prefix + \" checkpoint completed in \" + duration(currentTimeMillis() - startTime));\n+      /*\n+       * Prune up to the version pointed from the latest check point,\n+       * since it might be an earlier version than the current log version.\n+       */\n+      logPruning.pruneLogs(logPosition.getLogVersion());\n+      lastCheckPointedTx = lastClosedTransactionId;\n+      return lastClosedTransactionId;\n+    } catch (Throwable t)\n+    {\n+      // Why only log failure here? It's because check point can potentially be made from various\n+      // points of execution e.g. background thread triggering check point if needed and during\n+      // shutdown where it's better to have more control over failure handling.\n+      msgLog.error(\"Checkpoint failed\", t);\n+      throw t;\n     }\n+  }\n+\n+  @Override\n+  public long lastCheckPointedTransactionId()\n+  {\n+    return lastCheckPointedTx;\n+  }\n }\n",
            "diff_size": 201
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3026/CheckPointerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3026/CheckPointerImpl.java\nindex bdc6b501ead..c699db499c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3026/CheckPointerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3026/CheckPointerImpl.java\n@@ -53,8 +53,7 @@ public class CheckPointerImpl extends LifecycleAdapter implements CheckPointer\n \n     private long lastCheckPointedTx;\n \n-    public CheckPointerImpl(\n-            TransactionIdStore transactionIdStore,\n+    public CheckPointerImpl( TransactionIdStore transactionIdStore,\n             CheckPointThreshold threshold,\n             StorageEngine storageEngine,\n             LogPruning logPruning,\n@@ -115,9 +114,8 @@ public class CheckPointerImpl extends LifecycleAdapter implements CheckPointer\n             {\n                 try ( Resource lock = mutex.checkPoint() )\n                 {\n-                    msgLog.info( info.describe( lastCheckPointedTx ) +\n-                                 \" Check pointing was already running, completed now\" );\n-                    return lastCheckPointedTx;\n+                    msgLog.info( info.describe( lastCheckPointedTx ) + \" Check pointing was already running, completed now\" );\n+return lastCheckPointedTx;\n                 }\n             }\n         }\n@@ -133,8 +131,8 @@ public class CheckPointerImpl extends LifecycleAdapter implements CheckPointer\n         if ( threshold.isCheckPointingNeeded( transactionIdStore.getLastClosedTransactionId(), info ) )\n         {\n             try ( LogCheckPointEvent event = tracer.beginCheckPoint();\n-                    Resource lock = mutex.checkPoint() )\n-            {\n+Resource lock = mutex.checkPoint() )\n+{\n                 return doCheckPoint( info, event );\n             }\n         }\n@@ -194,4 +192,4 @@ public class CheckPointerImpl extends LifecycleAdapter implements CheckPointer\n     {\n         return lastCheckPointedTx;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}