{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "208",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage com.google.cloud.bigtable.data.v2.stub;\n\nimport com.google.api.core.ApiFunction;\nimport com.google.api.core.ApiFuture;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/208/ReadModifyWriteRowCallable.java\nindex 7ee1704bbd4..a926d797b69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/208/ReadModifyWriteRowCallable.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub;\n \n import com.google.api.core.ApiFunction;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/208/ReadModifyWriteRowCallable.java\nindex 7ee1704bbd4..7ea5a6829f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/208/ReadModifyWriteRowCallable.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub;\n \n import com.google.api.core.ApiFunction;\n@@ -31,7 +32,9 @@ import com.google.cloud.bigtable.data.v2.models.Row;\n import com.google.cloud.bigtable.data.v2.models.RowCell;\n import com.google.common.collect.ImmutableList;\n \n-/** Simple wrapper for ReadModifyWriteRow to wrap the request and response protobufs. */\n+/**\n+ * Simple wrapper for ReadModifyWriteRow to wrap the request and response protobufs.\n+ */\n class ReadModifyWriteRowCallable extends UnaryCallable<ReadModifyWriteRow, Row> {\n   private final UnaryCallable<ReadModifyWriteRowRequest, ReadModifyWriteRowResponse> inner;\n   private final RequestContext requestContext;\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 10, expected level should be one of the following: 2, 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 12, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 10, expected level should be one of the following: 2, 4, 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 8, expected level should be one of the following: 0, 2, 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/208/ReadModifyWriteRowCallable.java\nindex 7ee1704bbd4..4783d0fe0d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/208/ReadModifyWriteRowCallable.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub;\n \n import com.google.api.core.ApiFunction;\n@@ -33,12 +34,12 @@ import com.google.common.collect.ImmutableList;\n \n /** Simple wrapper for ReadModifyWriteRow to wrap the request and response protobufs. */\n class ReadModifyWriteRowCallable extends UnaryCallable<ReadModifyWriteRow, Row> {\n+\n   private final UnaryCallable<ReadModifyWriteRowRequest, ReadModifyWriteRowResponse> inner;\n   private final RequestContext requestContext;\n \n   ReadModifyWriteRowCallable(\n-      UnaryCallable<ReadModifyWriteRowRequest, ReadModifyWriteRowResponse> inner,\n-      RequestContext requestContext) {\n+      UnaryCallable<ReadModifyWriteRowRequest, ReadModifyWriteRowResponse> inner, RequestContext requestContext) {\n     this.inner = inner;\n     this.requestContext = requestContext;\n   }\n@@ -47,10 +48,7 @@ class ReadModifyWriteRowCallable extends UnaryCallable<ReadModifyWriteRow, Row>\n   public ApiFuture<Row> futureCall(ReadModifyWriteRow request, ApiCallContext context) {\n     ApiFuture<ReadModifyWriteRowResponse> rawResponse =\n         inner.futureCall(request.toProto(requestContext), context);\n-\n-    return ApiFutures.transform(\n-        rawResponse,\n-        new ApiFunction<ReadModifyWriteRowResponse, Row>() {\n+return ApiFutures.transform(rawResponse, new ApiFunction<ReadModifyWriteRowResponse, Row>() {\n           @Override\n           public Row apply(ReadModifyWriteRowResponse readModifyWriteRowResponse) {\n             return convertResponse(readModifyWriteRowResponse);\n@@ -60,8 +58,7 @@ class ReadModifyWriteRowCallable extends UnaryCallable<ReadModifyWriteRow, Row>\n \n   private Row convertResponse(ReadModifyWriteRowResponse response) {\n     ImmutableList.Builder<RowCell> cells = ImmutableList.builder();\n-\n-    for (Family family : response.getRow().getFamiliesList()) {\n+for (Family family : response.getRow().getFamiliesList()) {\n       for (Column column : family.getColumnsList()) {\n         for (Cell cell : column.getCellsList()) {\n           cells.add(\n@@ -71,9 +68,9 @@ class ReadModifyWriteRowCallable extends UnaryCallable<ReadModifyWriteRow, Row>\n                   cell.getTimestampMicros(),\n                   cell.getLabelsList(),\n                   cell.getValue()));\n-        }\n+  }\n       }\n     }\n     return Row.create(response.getRow().getKey(), cells.build());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'column' has incorrect indentation level 12, expected level should be 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/208/ReadModifyWriteRowCallable.java\nindex 7ee1704bbd4..2f34643a3d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/208/ReadModifyWriteRowCallable.java\n@@ -32,48 +32,42 @@ import com.google.cloud.bigtable.data.v2.models.RowCell;\n import com.google.common.collect.ImmutableList;\n \n /** Simple wrapper for ReadModifyWriteRow to wrap the request and response protobufs. */\n+\n+\n class ReadModifyWriteRowCallable extends UnaryCallable<ReadModifyWriteRow, Row> {\n+\n   private final UnaryCallable<ReadModifyWriteRowRequest, ReadModifyWriteRowResponse> inner;\n   private final RequestContext requestContext;\n \n-  ReadModifyWriteRowCallable(\n-      UnaryCallable<ReadModifyWriteRowRequest, ReadModifyWriteRowResponse> inner,\n-      RequestContext requestContext) {\n+  ReadModifyWriteRowCallable(UnaryCallable<ReadModifyWriteRowRequest, ReadModifyWriteRowResponse> inner, RequestContext requestContext) {\n     this.inner = inner;\n     this.requestContext = requestContext;\n   }\n \n   @Override\n   public ApiFuture<Row> futureCall(ReadModifyWriteRow request, ApiCallContext context) {\n-    ApiFuture<ReadModifyWriteRowResponse> rawResponse =\n-        inner.futureCall(request.toProto(requestContext), context);\n-\n-    return ApiFutures.transform(\n-        rawResponse,\n-        new ApiFunction<ReadModifyWriteRowResponse, Row>() {\n-          @Override\n-          public Row apply(ReadModifyWriteRowResponse readModifyWriteRowResponse) {\n-            return convertResponse(readModifyWriteRowResponse);\n-          }\n-        });\n+    ApiFuture<ReadModifyWriteRowResponse> rawResponse = inner.futureCall(request.toProto(requestContext), context);\n+    return ApiFutures.transform(rawResponse, new ApiFunction<ReadModifyWriteRowResponse, Row>() {\n+      @Override\n+      public Row apply(ReadModifyWriteRowResponse readModifyWriteRowResponse) {\n+        return convertResponse(readModifyWriteRowResponse);\n+      }\n+    });\n   }\n \n   private Row convertResponse(ReadModifyWriteRowResponse response) {\n     ImmutableList.Builder<RowCell> cells = ImmutableList.builder();\n-\n     for (Family family : response.getRow().getFamiliesList()) {\n       for (Column column : family.getColumnsList()) {\n         for (Cell cell : column.getCellsList()) {\n-          cells.add(\n-              RowCell.create(\n-                  family.getName(),\n-                  column.getQualifier(),\n-                  cell.getTimestampMicros(),\n-                  cell.getLabelsList(),\n+          cells.add(RowCell.create(family.getName(),\n+            column.getQualifier(),\n+              cell.getTimestampMicros(),\n+                cell.getLabelsList(),\n                   cell.getValue()));\n         }\n       }\n     }\n     return Row.create(response.getRow().getKey(), cells.build());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/208/ReadModifyWriteRowCallable.java\nindex 7ee1704bbd4..a926d797b69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/208/ReadModifyWriteRowCallable.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub;\n \n import com.google.api.core.ApiFunction;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/208/ReadModifyWriteRowCallable.java\nindex 7ee1704bbd4..a926d797b69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/208/ReadModifyWriteRowCallable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/208/ReadModifyWriteRowCallable.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.google.cloud.bigtable.data.v2.stub;\n \n import com.google.api.core.ApiFunction;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}