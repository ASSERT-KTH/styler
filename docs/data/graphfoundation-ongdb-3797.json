{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3797",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3797/PathShellApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3797/PathShellApp.java\nindex 0e3c59c222c..c296df4fc62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3797/PathShellApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3797/PathShellApp.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.apps.extra;\n \n import java.lang.reflect.Method;\n@@ -39,78 +40,77 @@ import org.neo4j.shell.kernel.apps.NonTransactionProvidingApp;\n \n public class PathShellApp extends NonTransactionProvidingApp\n {\n-    {\n-        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.MUST, \"Which algorithm to use\" ) );\n-        addOptionDefinition( \"m\", new OptionDefinition( OptionValueType.MUST, \"Maximum depth to traverse\" ) );\n-        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST,\n-                \"Relationship types and directions, f.ex: {KNOWS:out,LOVES:both}\" ) );\n-        addOptionDefinition( \"from\",\n-                new OptionDefinition( OptionValueType.MUST, \"Use some other star point than the current node\" ) );\n-        addOptionDefinition( \"q\",\n-                new OptionDefinition( OptionValueType.NONE, \"More quiet, print less verbose paths\" ) );\n-        addOptionDefinition( \"s\", new OptionDefinition( OptionValueType.NONE, \"Find max one path\" ) );\n-    }\n-\n-    @Override\n-    public String getDescription()\n-    {\n-        return \"Displays paths from current (or any node) to another node using supplied algorithm. Usage:\\n\" +\n-                \"\\n# Find shortest paths from current to node 241 at max depth 10\" +\n-                \"\\npaths -m 10 -a shortestPath -f KNOWS:out,LOVES:in 241\";\n-    }\n+  {\n+    addOptionDefinition(\"a\", new OptionDefinition(OptionValueType.MUST, \"Which algorithm to use\"));\n+    addOptionDefinition(\"m\", new OptionDefinition(OptionValueType.MUST, \"Maximum depth to traverse\"));\n+    addOptionDefinition(\"f\", new OptionDefinition(OptionValueType.MUST,\n+        \"Relationship types and directions, f.ex: {KNOWS:out,LOVES:both}\"));\n+    addOptionDefinition(\"from\",\n+        new OptionDefinition(OptionValueType.MUST, \"Use some other star point than the current node\"));\n+    addOptionDefinition(\"q\",\n+        new OptionDefinition(OptionValueType.NONE, \"More quiet, print less verbose paths\"));\n+    addOptionDefinition(\"s\", new OptionDefinition(OptionValueType.NONE, \"Find max one path\"));\n+  }\n \n-    @Override\n-    public String getName()\n-    {\n-        return \"paths\";\n-    }\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Displays paths from current (or any node) to another node using supplied algorithm. Usage:\\n\" +\n+        \"\\n# Find shortest paths from current to node 241 at max depth 10\" +\n+        \"\\npaths -m 10 -a shortestPath -f KNOWS:out,LOVES:in 241\";\n+  }\n \n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws Exception\n-    {\n-        String fromString = parser.options().get( \"from\" );\n-        String toString = parser.argument( 0, \"Must supply a 'to' node as first argument\" );\n-        String algo = parser.options().get( \"a\" );\n-        String maxDepthString = parser.options().get( \"m\" );\n-        boolean quietPrint = parser.options().containsKey( \"q\" );\n-        boolean caseInsensitiveFilters = parser.options().containsKey( \"i\" );\n-        boolean looseFilters = parser.options().containsKey( \"l\" );\n+  @Override\n+  public String getName()\n+  {\n+    return \"paths\";\n+  }\n \n-        int maxDepth = maxDepthString != null ? Integer.parseInt( maxDepthString ) : Integer.MAX_VALUE;\n-        fromString = fromString != null ? fromString : String.valueOf( this.getCurrent( session ).getId() );\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session, Output out) throws Exception\n+  {\n+    String fromString = parser.options().get(\"from\");\n+    String toString = parser.argument(0, \"Must supply a 'to' node as first argument\");\n+    String algo = parser.options().get(\"a\");\n+    String maxDepthString = parser.options().get(\"m\");\n+    boolean quietPrint = parser.options().containsKey(\"q\");\n+    boolean caseInsensitiveFilters = parser.options().containsKey(\"i\");\n+    boolean looseFilters = parser.options().containsKey(\"l\");\n \n-        Map<String, Object> filter = parseFilter( parser.options().get( \"f\" ), out );\n-        PathExpander expander = toExpander( getServer().getDb(), Direction.BOTH, filter,\n-                caseInsensitiveFilters, looseFilters );\n-        PathFinder<Path> finder = expander != null ? getPathFinder( algo, expander, maxDepth, out ) : null;\n-        if ( finder != null )\n-        {\n-            Node fromNode = getNodeById( Long.parseLong( fromString ) );\n-            Node toNode = getNodeById( Long.parseLong( toString ) );\n-            boolean single = parser.options().containsKey( \"s\" );\n-            Iterable<Path> paths = single ? Arrays.asList( finder.findSinglePath( fromNode, toNode ) ) :\n-                    finder.findAllPaths( fromNode, toNode );\n-            for ( Path path : paths )\n-            {\n-                printPath( path, quietPrint, session, out );\n-            }\n-        }\n+    int maxDepth = maxDepthString != null ? Integer.parseInt(maxDepthString) : Integer.MAX_VALUE;\n+    fromString = fromString != null ? fromString : String.valueOf(this.getCurrent(session).getId());\n \n-        return Continuation.INPUT_COMPLETE;\n+    Map<String, Object> filter = parseFilter(parser.options().get(\"f\"), out);\n+    PathExpander expander = toExpander(getServer().getDb(), Direction.BOTH, filter,\n+        caseInsensitiveFilters, looseFilters);\n+    PathFinder<Path> finder = expander != null ? getPathFinder(algo, expander, maxDepth, out) : null;\n+    if (finder != null)\n+    {\n+      Node fromNode = getNodeById(Long.parseLong(fromString));\n+      Node toNode = getNodeById(Long.parseLong(toString));\n+      boolean single = parser.options().containsKey(\"s\");\n+      Iterable<Path> paths = single ? Arrays.asList(finder.findSinglePath(fromNode, toNode)) :\n+          finder.findAllPaths(fromNode, toNode);\n+      for (Path path : paths)\n+      {\n+        printPath(path, quietPrint, session, out);\n+      }\n     }\n \n-    private PathFinder<Path> getPathFinder( String algo, PathExpander expander, int maxDepth, Output out ) throws Exception\n+    return Continuation.INPUT_COMPLETE;\n+  }\n+\n+  private PathFinder<Path> getPathFinder(String algo, PathExpander expander, int maxDepth, Output out) throws Exception\n+  {\n+    Method method;\n+    try\n+    {\n+      method = GraphAlgoFactory.class.getDeclaredMethod(algo, PathExpander.class, Integer.TYPE);\n+    } catch (Exception e)\n     {\n-        Method method;\n-        try\n-        {\n-            method = GraphAlgoFactory.class.getDeclaredMethod( algo, PathExpander.class, Integer.TYPE );\n-        }\n-        catch ( Exception e )\n-        {\n-            out.println( \"Couldn't find algorithm '\" + algo + \"'\" );\n-            return null;\n-        }\n-        return (PathFinder) method.invoke( null, expander, maxDepth );\n+      out.println(\"Couldn't find algorithm '\" + algo + \"'\");\n+      return null;\n     }\n+    return (PathFinder) method.invoke(null, expander, maxDepth);\n+  }\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 239).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3797/PathShellApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3797/PathShellApp.java\nindex 0e3c59c222c..bd1159ad10b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3797/PathShellApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3797/PathShellApp.java\n@@ -42,21 +42,16 @@ public class PathShellApp extends NonTransactionProvidingApp\n     {\n         addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.MUST, \"Which algorithm to use\" ) );\n         addOptionDefinition( \"m\", new OptionDefinition( OptionValueType.MUST, \"Maximum depth to traverse\" ) );\n-        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST,\n-                \"Relationship types and directions, f.ex: {KNOWS:out,LOVES:both}\" ) );\n-        addOptionDefinition( \"from\",\n-                new OptionDefinition( OptionValueType.MUST, \"Use some other star point than the current node\" ) );\n-        addOptionDefinition( \"q\",\n-                new OptionDefinition( OptionValueType.NONE, \"More quiet, print less verbose paths\" ) );\n-        addOptionDefinition( \"s\", new OptionDefinition( OptionValueType.NONE, \"Find max one path\" ) );\n+        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST, \"Relationship types and directions, f.ex: {KNOWS:out,LOVES:both}\" ) );\n+addOptionDefinition( \"from\", new OptionDefinition( OptionValueType.MUST, \"Use some other star point than the current node\" ) );\n+addOptionDefinition( \"q\", new OptionDefinition( OptionValueType.NONE, \"More quiet, print less verbose paths\" ) );\n+addOptionDefinition( \"s\", new OptionDefinition( OptionValueType.NONE, \"Find max one path\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Displays paths from current (or any node) to another node using supplied algorithm. Usage:\\n\" +\n-                \"\\n# Find shortest paths from current to node 241 at max depth 10\" +\n-                \"\\npaths -m 10 -a shortestPath -f KNOWS:out,LOVES:in 241\";\n+        return \"Displays paths from current (or any node) to another node using supplied algorithm. Usage:\\n\" + \"\\n# Find shortest paths from current to node 241 at max depth 10\" + \"\\npaths -m 10 -a shortestPath -f KNOWS:out,LOVES:in 241\";\n     }\n \n     @Override\n@@ -79,18 +74,17 @@ public class PathShellApp extends NonTransactionProvidingApp\n         int maxDepth = maxDepthString != null ? Integer.parseInt( maxDepthString ) : Integer.MAX_VALUE;\n         fromString = fromString != null ? fromString : String.valueOf( this.getCurrent( session ).getId() );\n \n-        Map<String, Object> filter = parseFilter( parser.options().get( \"f\" ), out );\n+        Map<String,Object> filter = parseFilter( parser.options().get( \"f\" ), out );\n         PathExpander expander = toExpander( getServer().getDb(), Direction.BOTH, filter,\n                 caseInsensitiveFilters, looseFilters );\n-        PathFinder<Path> finder = expander != null ? getPathFinder( algo, expander, maxDepth, out ) : null;\n+PathFinder<Path> finder = expander != null ? getPathFinder( algo, expander, maxDepth, out ) : null;\n         if ( finder != null )\n         {\n             Node fromNode = getNodeById( Long.parseLong( fromString ) );\n             Node toNode = getNodeById( Long.parseLong( toString ) );\n             boolean single = parser.options().containsKey( \"s\" );\n-            Iterable<Path> paths = single ? Arrays.asList( finder.findSinglePath( fromNode, toNode ) ) :\n-                    finder.findAllPaths( fromNode, toNode );\n-            for ( Path path : paths )\n+            Iterable<Path> paths = single ? Arrays.asList( finder.findSinglePath( fromNode, toNode ) ) : finder.findAllPaths( fromNode, toNode );\n+for ( Path path : paths )\n             {\n                 printPath( path, quietPrint, session, out );\n             }\n@@ -113,4 +107,4 @@ public class PathShellApp extends NonTransactionProvidingApp\n         }\n         return (PathFinder) method.invoke( null, expander, maxDepth );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}