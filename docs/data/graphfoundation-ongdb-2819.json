{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2819",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "311",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2819/CountsRecordState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2819/CountsRecordState.java\nindex 5fe9f03aef0..3bf7cf26114 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2819/CountsRecordState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2819/CountsRecordState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.ArrayList;\n@@ -42,287 +43,287 @@ import static org.neo4j.kernel.impl.store.counts.keys.CountsKeyFactory.relations\n \n public class CountsRecordState implements CountsAccessor, RecordState, CountsAccessor.Updater, CountsAccessor.IndexStatsUpdater\n {\n-    private static final long DEFAULT_FIRST_VALUE = 0;\n-    private static final long DEFAULT_SECOND_VALUE = 0;\n-    private final Map<CountsKey, DoubleLongRegister> counts = new HashMap<>();\n-\n-    @Override\n-    public DoubleLongRegister nodeCount( int labelId, DoubleLongRegister target )\n+  private static final long DEFAULT_FIRST_VALUE = 0;\n+  private static final long DEFAULT_SECOND_VALUE = 0;\n+  private final Map<CountsKey, DoubleLongRegister> counts = new HashMap<>();\n+\n+  @Override\n+  public DoubleLongRegister nodeCount(int labelId, DoubleLongRegister target)\n+  {\n+    counts(nodeKey(labelId)).copyTo(target);\n+    return target;\n+  }\n+\n+  @Override\n+  public void incrementNodeCount(int labelId, long delta)\n+  {\n+    counts(nodeKey(labelId)).increment(0L, delta);\n+  }\n+\n+  @Override\n+  public DoubleLongRegister relationshipCount(int startLabelId, int typeId, int endLabelId,\n+                                              DoubleLongRegister target)\n+  {\n+    counts(relationshipKey(startLabelId, typeId, endLabelId)).copyTo(target);\n+    return target;\n+  }\n+\n+  @Override\n+  public DoubleLongRegister indexSample(long indexId, DoubleLongRegister target)\n+  {\n+    counts(indexSampleKey(indexId)).copyTo(target);\n+    return target;\n+  }\n+\n+  @Override\n+  public void incrementRelationshipCount(int startLabelId, int typeId, int endLabelId, long delta)\n+  {\n+    if (delta != 0)\n     {\n-        counts( nodeKey( labelId ) ).copyTo( target );\n-        return target;\n+      counts(relationshipKey(startLabelId, typeId, endLabelId)).increment(0L, delta);\n     }\n-\n-    @Override\n-    public void incrementNodeCount( int labelId, long delta )\n+  }\n+\n+  @Override\n+  public DoubleLongRegister indexUpdatesAndSize(long indexId, DoubleLongRegister target)\n+  {\n+    counts(indexStatisticsKey(indexId)).copyTo(target);\n+    return target;\n+  }\n+\n+  @Override\n+  public void replaceIndexUpdateAndSize(long indexId, long updates, long size)\n+  {\n+    counts(indexStatisticsKey(indexId)).write(updates, size);\n+  }\n+\n+  @Override\n+  public void incrementIndexUpdates(long indexId, long delta)\n+  {\n+    counts(indexStatisticsKey(indexId)).increment(delta, 0L);\n+  }\n+\n+  @Override\n+  public void replaceIndexSample(long indexId, long unique, long size)\n+  {\n+    counts(indexSampleKey(indexId)).write(unique, size);\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    // this is close() of CountsAccessor.Updater - do nothing.\n+  }\n+\n+  @Override\n+  public void accept(CountsVisitor visitor)\n+  {\n+    for (Map.Entry<CountsKey, DoubleLongRegister> entry : counts.entrySet())\n     {\n-        counts( nodeKey( labelId ) ).increment( 0L, delta );\n+      DoubleLongRegister register = entry.getValue();\n+      entry.getKey().accept(visitor, register.readFirst(), register.readSecond());\n     }\n-\n-    @Override\n-    public DoubleLongRegister relationshipCount( int startLabelId, int typeId, int endLabelId,\n-                                                 DoubleLongRegister target )\n+  }\n+\n+  @Override\n+  public void extractCommands(Collection<StorageCommand> target)\n+  {\n+    accept(new CommandCollector(target));\n+  }\n+\n+  public List<Difference> verify(CountsVisitor.Visitable visitable)\n+  {\n+    Verifier verifier = new Verifier(counts);\n+    visitable.accept(verifier);\n+    return verifier.differences();\n+  }\n+\n+  @Override\n+  public boolean hasChanges()\n+  {\n+    return !counts.isEmpty();\n+  }\n+\n+  public static final class Difference\n+  {\n+    private final CountsKey key;\n+    private final long expectedFirst;\n+    private final long expectedSecond;\n+    private final long actualFirst;\n+    private final long actualSecond;\n+\n+    public Difference(CountsKey key, long expectedFirst, long expectedSecond, long actualFirst, long actualSecond)\n     {\n-        counts( relationshipKey( startLabelId, typeId, endLabelId ) ).copyTo( target );\n-        return target;\n+      this.expectedFirst = expectedFirst;\n+      this.expectedSecond = expectedSecond;\n+      this.actualFirst = actualFirst;\n+      this.actualSecond = actualSecond;\n+      this.key = requireNonNull(key, \"key\");\n     }\n \n     @Override\n-    public DoubleLongRegister indexSample( long indexId, DoubleLongRegister target )\n+    public String toString()\n     {\n-        counts( indexSampleKey( indexId ) ).copyTo( target );\n-        return target;\n+      return String.format(\"%s[%s expected=%d:%d, actual=%d:%d]\", getClass().getSimpleName(), key, expectedFirst,\n+          expectedSecond, actualFirst, actualSecond);\n     }\n \n-    @Override\n-    public void incrementRelationshipCount( int startLabelId, int typeId, int endLabelId, long delta )\n+    public CountsKey key()\n     {\n-        if ( delta != 0 )\n-        {\n-            counts( relationshipKey( startLabelId, typeId, endLabelId ) ).increment( 0L, delta );\n-        }\n+      return key;\n     }\n \n     @Override\n-    public DoubleLongRegister indexUpdatesAndSize( long indexId, DoubleLongRegister target )\n+    public boolean equals(Object obj)\n     {\n-        counts( indexStatisticsKey( indexId ) ).copyTo( target );\n-        return target;\n+      if (this == obj)\n+      {\n+        return true;\n+      }\n+      if (obj instanceof Difference)\n+      {\n+        Difference that = (Difference) obj;\n+        return actualFirst == that.actualFirst && expectedFirst == that.expectedFirst\n+            && actualSecond == that.actualSecond && expectedSecond == that.expectedSecond\n+            && key.equals(that.key);\n+      }\n+      return false;\n     }\n \n     @Override\n-    public void replaceIndexUpdateAndSize( long indexId, long updates, long size )\n+    public int hashCode()\n     {\n-        counts( indexStatisticsKey( indexId ) ).write( updates, size );\n+      int result = key.hashCode();\n+      result = 31 * result + (int) (expectedFirst ^ (expectedFirst >>> 32));\n+      result = 31 * result + (int) (expectedSecond ^ (expectedSecond >>> 32));\n+      result = 31 * result + (int) (actualFirst ^ (actualFirst >>> 32));\n+      result = 31 * result + (int) (actualSecond ^ (actualSecond >>> 32));\n+      return result;\n     }\n+  }\n \n-    @Override\n-    public void incrementIndexUpdates( long indexId, long delta )\n+  public void addNode(long[] labels)\n+  {\n+    incrementNodeCount(ANY_LABEL, 1);\n+    for (long label : labels)\n     {\n-        counts( indexStatisticsKey( indexId ) ).increment( delta, 0L );\n+      incrementNodeCount((int) label, 1);\n     }\n+  }\n \n-    @Override\n-    public void replaceIndexSample( long indexId, long unique, long size )\n+  public void addRelationship(long[] startLabels, int type, long[] endLabels)\n+  {\n+    incrementRelationshipCount(ANY_LABEL, ANY_RELATIONSHIP_TYPE, ANY_LABEL, 1);\n+    incrementRelationshipCount(ANY_LABEL, type, ANY_LABEL, 1);\n+    for (long startLabelId : startLabels)\n     {\n-        counts( indexSampleKey( indexId ) ).write( unique, size );\n+      incrementRelationshipCount((int) startLabelId, ANY_RELATIONSHIP_TYPE, ANY_LABEL, 1);\n+      incrementRelationshipCount((int) startLabelId, type, ANY_LABEL, 1);\n     }\n-\n-    @Override\n-    public void close()\n+    for (long endLabelId : endLabels)\n     {\n-        // this is close() of CountsAccessor.Updater - do nothing.\n+      incrementRelationshipCount(ANY_LABEL, ANY_RELATIONSHIP_TYPE, (int) endLabelId, 1);\n+      incrementRelationshipCount(ANY_LABEL, type, (int) endLabelId, 1);\n     }\n+  }\n \n-    @Override\n-    public void accept( CountsVisitor visitor )\n+  private DoubleLongRegister counts(CountsKey key)\n+  {\n+    return counts.computeIfAbsent(key,\n+        k -> Registers.newDoubleLongRegister(DEFAULT_FIRST_VALUE, DEFAULT_SECOND_VALUE));\n+  }\n+\n+  private static class CommandCollector extends CountsVisitor.Adapter\n+  {\n+    private final Collection<StorageCommand> commands;\n+\n+    CommandCollector(Collection<StorageCommand> commands)\n     {\n-        for ( Map.Entry<CountsKey, DoubleLongRegister> entry : counts.entrySet() )\n-        {\n-            DoubleLongRegister register = entry.getValue();\n-            entry.getKey().accept( visitor, register.readFirst(), register.readSecond() );\n-        }\n+      this.commands = commands;\n     }\n \n     @Override\n-    public void extractCommands( Collection<StorageCommand> target )\n+    public void visitNodeCount(int labelId, long count)\n     {\n-        accept( new CommandCollector( target ) );\n+      if (count != 0)\n+      {   // Only add commands for counts that actually change\n+        commands.add(new Command.NodeCountsCommand(labelId, count));\n+      }\n     }\n \n-    public List<Difference> verify( CountsVisitor.Visitable visitable )\n+    @Override\n+    public void visitRelationshipCount(int startLabelId, int typeId, int endLabelId, long count)\n     {\n-        Verifier verifier = new Verifier( counts );\n-        visitable.accept( verifier );\n-        return verifier.differences();\n+      if (count != 0)\n+      {   // Only add commands for counts that actually change\n+        commands.add(new Command.RelationshipCountsCommand(startLabelId, typeId, endLabelId, count));\n+      }\n     }\n+  }\n \n-    @Override\n-    public boolean hasChanges()\n+  private static class Verifier implements CountsVisitor\n+  {\n+    private final Map<CountsKey, DoubleLongRegister> counts;\n+    private final List<Difference> differences = new ArrayList<>();\n+\n+    Verifier(Map<CountsKey, DoubleLongRegister> counts)\n     {\n-        return !counts.isEmpty();\n+      this.counts = new HashMap<>(counts);\n     }\n \n-    public static final class Difference\n+    @Override\n+    public void visitNodeCount(int labelId, long count)\n     {\n-        private final CountsKey key;\n-        private final long expectedFirst;\n-        private final long expectedSecond;\n-        private final long actualFirst;\n-        private final long actualSecond;\n-\n-        public Difference( CountsKey key, long expectedFirst, long expectedSecond, long actualFirst, long actualSecond )\n-        {\n-            this.expectedFirst = expectedFirst;\n-            this.expectedSecond = expectedSecond;\n-            this.actualFirst = actualFirst;\n-            this.actualSecond = actualSecond;\n-            this.key = requireNonNull( key, \"key\" );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return String.format( \"%s[%s expected=%d:%d, actual=%d:%d]\", getClass().getSimpleName(), key, expectedFirst,\n-                    expectedSecond, actualFirst, actualSecond );\n-        }\n-\n-        public CountsKey key()\n-        {\n-            return key;\n-        }\n-\n-        @Override\n-        public boolean equals( Object obj )\n-        {\n-            if ( this == obj )\n-            {\n-                return true;\n-            }\n-            if ( obj instanceof Difference )\n-            {\n-                Difference that = (Difference) obj;\n-                return actualFirst == that.actualFirst && expectedFirst == that.expectedFirst\n-                       && actualSecond == that.actualSecond && expectedSecond == that.expectedSecond\n-                       && key.equals( that.key );\n-            }\n-            return false;\n-        }\n-\n-        @Override\n-        public int hashCode()\n-        {\n-            int result = key.hashCode();\n-            result = 31 * result + (int) (expectedFirst ^ (expectedFirst >>> 32));\n-            result = 31 * result + (int) (expectedSecond ^ (expectedSecond >>> 32));\n-            result = 31 * result + (int) (actualFirst ^ (actualFirst >>> 32));\n-            result = 31 * result + (int) (actualSecond ^ (actualSecond >>> 32));\n-            return result;\n-        }\n+      verify(nodeKey(labelId), 0, count);\n     }\n \n-    public void addNode( long[] labels )\n+    @Override\n+    public void visitRelationshipCount(int startLabelId, int typeId, int endLabelId, long count)\n     {\n-        incrementNodeCount( ANY_LABEL, 1 );\n-        for ( long label : labels )\n-        {\n-            incrementNodeCount( (int) label, 1 );\n-        }\n+      verify(relationshipKey(startLabelId, typeId, endLabelId), 0, count);\n     }\n \n-    public void addRelationship( long[] startLabels, int type, long[] endLabels )\n+    @Override\n+    public void visitIndexStatistics(long indexId, long updates, long size)\n     {\n-        incrementRelationshipCount( ANY_LABEL, ANY_RELATIONSHIP_TYPE, ANY_LABEL, 1 );\n-        incrementRelationshipCount( ANY_LABEL, type, ANY_LABEL, 1 );\n-        for ( long startLabelId : startLabels )\n-        {\n-            incrementRelationshipCount( (int) startLabelId, ANY_RELATIONSHIP_TYPE, ANY_LABEL, 1 );\n-            incrementRelationshipCount( (int) startLabelId, type, ANY_LABEL, 1 );\n-        }\n-        for ( long endLabelId : endLabels )\n-        {\n-            incrementRelationshipCount( ANY_LABEL, ANY_RELATIONSHIP_TYPE, (int) endLabelId, 1 );\n-            incrementRelationshipCount( ANY_LABEL, type, (int) endLabelId, 1 );\n-        }\n+      verify(indexStatisticsKey(indexId), updates, size);\n     }\n \n-    private DoubleLongRegister counts( CountsKey key )\n+    @Override\n+    public void visitIndexSample(long indexId, long unique, long size)\n     {\n-        return counts.computeIfAbsent( key,\n-                k -> Registers.newDoubleLongRegister( DEFAULT_FIRST_VALUE, DEFAULT_SECOND_VALUE ) );\n+      verify(indexSampleKey(indexId), unique, size);\n     }\n \n-    private static class CommandCollector extends CountsVisitor.Adapter\n+    private void verify(CountsKey key, long actualFirst, long actualSecond)\n     {\n-        private final Collection<StorageCommand> commands;\n-\n-        CommandCollector( Collection<StorageCommand> commands )\n+      DoubleLongRegister expected = counts.remove(key);\n+      if (expected == null)\n+      {\n+        if (actualFirst != 0 || actualSecond != 0)\n         {\n-            this.commands = commands;\n+          differences.add(new Difference(key, 0, 0, actualFirst, actualSecond));\n         }\n-\n-        @Override\n-        public void visitNodeCount( int labelId, long count )\n+      } else\n+      {\n+        long expectedFirst = expected.readFirst();\n+        long expectedSecond = expected.readSecond();\n+        if (expectedFirst != actualFirst || expectedSecond != actualSecond)\n         {\n-            if ( count != 0 )\n-            {   // Only add commands for counts that actually change\n-                commands.add( new Command.NodeCountsCommand( labelId, count ) );\n-            }\n-        }\n-\n-        @Override\n-        public void visitRelationshipCount( int startLabelId, int typeId, int endLabelId, long count )\n-        {\n-            if ( count != 0 )\n-            {   // Only add commands for counts that actually change\n-                commands.add( new Command.RelationshipCountsCommand( startLabelId, typeId, endLabelId, count ) );\n-            }\n+          differences.add(new Difference(key, expectedFirst, expectedSecond, actualFirst, actualSecond));\n         }\n+      }\n     }\n \n-    private static class Verifier implements CountsVisitor\n+    public List<Difference> differences()\n     {\n-        private final Map<CountsKey, DoubleLongRegister> counts;\n-        private final List<Difference> differences = new ArrayList<>();\n-\n-        Verifier( Map<CountsKey, DoubleLongRegister> counts )\n-        {\n-            this.counts = new HashMap<>( counts );\n-        }\n-\n-        @Override\n-        public void visitNodeCount( int labelId, long count )\n-        {\n-            verify( nodeKey( labelId ), 0, count );\n-        }\n-\n-        @Override\n-        public void visitRelationshipCount( int startLabelId, int typeId, int endLabelId, long count )\n-        {\n-            verify( relationshipKey( startLabelId, typeId, endLabelId ), 0, count );\n-        }\n-        @Override\n-        public void visitIndexStatistics( long indexId, long updates, long size )\n-        {\n-            verify( indexStatisticsKey( indexId ), updates, size );\n-        }\n-\n-        @Override\n-        public void visitIndexSample( long indexId, long unique, long size )\n-        {\n-            verify( indexSampleKey( indexId ), unique, size );\n-        }\n-\n-        private void verify( CountsKey key, long actualFirst, long actualSecond )\n-        {\n-            DoubleLongRegister expected = counts.remove( key );\n-            if ( expected == null )\n-            {\n-                if ( actualFirst != 0 || actualSecond != 0 )\n-                {\n-                    differences.add( new Difference( key, 0, 0, actualFirst, actualSecond ) );\n-                }\n-            }\n-            else\n-            {\n-                long expectedFirst = expected.readFirst();\n-                long expectedSecond = expected.readSecond();\n-                if ( expectedFirst != actualFirst || expectedSecond != actualSecond )\n-                {\n-                    differences.add( new Difference( key, expectedFirst, expectedSecond, actualFirst, actualSecond ) );\n-                }\n-            }\n-        }\n-\n-        public List<Difference> differences()\n-        {\n-            for ( Map.Entry<CountsKey, DoubleLongRegister> entry : counts.entrySet() )\n-            {\n-                DoubleLongRegister value = entry.getValue();\n-                differences.add( new Difference( entry.getKey(), value.readFirst(), value.readSecond(), 0, 0 ) );\n-            }\n-            counts.clear();\n-            return differences;\n-        }\n+      for (Map.Entry<CountsKey, DoubleLongRegister> entry : counts.entrySet())\n+      {\n+        DoubleLongRegister value = entry.getValue();\n+        differences.add(new Difference(entry.getKey(), value.readFirst(), value.readSecond(), 0, 0));\n+      }\n+      counts.clear();\n+      return differences;\n     }\n+  }\n }\n",
            "diff_size": 367
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "column": "94",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2819/CountsRecordState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2819/CountsRecordState.java\nindex 5fe9f03aef0..9b8542c1922 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2819/CountsRecordState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2819/CountsRecordState.java\n@@ -44,7 +44,7 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n {\n     private static final long DEFAULT_FIRST_VALUE = 0;\n     private static final long DEFAULT_SECOND_VALUE = 0;\n-    private final Map<CountsKey, DoubleLongRegister> counts = new HashMap<>();\n+    private final Map<CountsKey,DoubleLongRegister> counts = new HashMap<>();\n \n     @Override\n     public DoubleLongRegister nodeCount( int labelId, DoubleLongRegister target )\n@@ -60,9 +60,8 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n     }\n \n     @Override\n-    public DoubleLongRegister relationshipCount( int startLabelId, int typeId, int endLabelId,\n-                                                 DoubleLongRegister target )\n-    {\n+    public DoubleLongRegister relationshipCount( int startLabelId, int typeId, int endLabelId, DoubleLongRegister target )\n+{\n         counts( relationshipKey( startLabelId, typeId, endLabelId ) ).copyTo( target );\n         return target;\n     }\n@@ -117,7 +116,7 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n     @Override\n     public void accept( CountsVisitor visitor )\n     {\n-        for ( Map.Entry<CountsKey, DoubleLongRegister> entry : counts.entrySet() )\n+        for ( Map.Entry<CountsKey,DoubleLongRegister> entry : counts.entrySet() )\n         {\n             DoubleLongRegister register = entry.getValue();\n             entry.getKey().accept( visitor, register.readFirst(), register.readSecond() );\n@@ -179,13 +178,13 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n             {\n                 return true;\n             }\n-            if ( obj instanceof Difference )\n+\n+if ( obj instanceof Difference )\n             {\n                 Difference that = (Difference) obj;\n-                return actualFirst == that.actualFirst && expectedFirst == that.expectedFirst\n-                       && actualSecond == that.actualSecond && expectedSecond == that.expectedSecond\n+                return actualFirst == that.actualFirst && expectedFirst == that.expectedFirst&& actualSecond == that.actualSecond && expectedSecond == that.expectedSecond\n                        && key.equals( that.key );\n-            }\n+    }\n             return false;\n         }\n \n@@ -193,10 +192,10 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n         public int hashCode()\n         {\n             int result = key.hashCode();\n-            result = 31 * result + (int) (expectedFirst ^ (expectedFirst >>> 32));\n-            result = 31 * result + (int) (expectedSecond ^ (expectedSecond >>> 32));\n-            result = 31 * result + (int) (actualFirst ^ (actualFirst >>> 32));\n-            result = 31 * result + (int) (actualSecond ^ (actualSecond >>> 32));\n+            result = 31 * result + ( int) ( expectedFirst ^ ( expectedFirst >>> 32 ));\n+            result = 31 * result + ( int) ( expectedSecond ^ ( expectedSecond >>> 32 ));\n+            result = 31 * result + ( int) ( actualFirst ^ ( actualFirst >>> 32 ));\n+            result = 31 * result + ( int) ( actualSecond ^ ( actualSecond >>> 32 ));\n             return result;\n         }\n     }\n@@ -206,7 +205,7 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n         incrementNodeCount( ANY_LABEL, 1 );\n         for ( long label : labels )\n         {\n-            incrementNodeCount( (int) label, 1 );\n+            incrementNodeCount( ( int) label, 1 );\n         }\n     }\n \n@@ -216,13 +215,13 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n         incrementRelationshipCount( ANY_LABEL, type, ANY_LABEL, 1 );\n         for ( long startLabelId : startLabels )\n         {\n-            incrementRelationshipCount( (int) startLabelId, ANY_RELATIONSHIP_TYPE, ANY_LABEL, 1 );\n-            incrementRelationshipCount( (int) startLabelId, type, ANY_LABEL, 1 );\n+            incrementRelationshipCount( ( int) startLabelId, ANY_RELATIONSHIP_TYPE, ANY_LABEL, 1 );\n+            incrementRelationshipCount( ( int) startLabelId, type, ANY_LABEL, 1 );\n         }\n         for ( long endLabelId : endLabels )\n         {\n-            incrementRelationshipCount( ANY_LABEL, ANY_RELATIONSHIP_TYPE, (int) endLabelId, 1 );\n-            incrementRelationshipCount( ANY_LABEL, type, (int) endLabelId, 1 );\n+            incrementRelationshipCount( ANY_LABEL, ANY_RELATIONSHIP_TYPE, ( int) endLabelId, 1 );\n+            incrementRelationshipCount( ANY_LABEL, type, ( int) endLabelId, 1 );\n         }\n     }\n \n@@ -245,7 +244,8 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n         public void visitNodeCount( int labelId, long count )\n         {\n             if ( count != 0 )\n-            {   // Only add commands for counts that actually change\n+            {\n+    // Only add commands for counts that actually change\n                 commands.add( new Command.NodeCountsCommand( labelId, count ) );\n             }\n         }\n@@ -254,7 +254,8 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n         public void visitRelationshipCount( int startLabelId, int typeId, int endLabelId, long count )\n         {\n             if ( count != 0 )\n-            {   // Only add commands for counts that actually change\n+            {\n+    // Only add commands for counts that actually change\n                 commands.add( new Command.RelationshipCountsCommand( startLabelId, typeId, endLabelId, count ) );\n             }\n         }\n@@ -262,10 +263,10 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n \n     private static class Verifier implements CountsVisitor\n     {\n-        private final Map<CountsKey, DoubleLongRegister> counts;\n+        private final Map<CountsKey,DoubleLongRegister> counts;\n         private final List<Difference> differences = new ArrayList<>();\n \n-        Verifier( Map<CountsKey, DoubleLongRegister> counts )\n+        Verifier( Map<CountsKey,DoubleLongRegister> counts )\n         {\n             this.counts = new HashMap<>( counts );\n         }\n@@ -281,7 +282,8 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n         {\n             verify( relationshipKey( startLabelId, typeId, endLabelId ), 0, count );\n         }\n-        @Override\n+\n+@Override\n         public void visitIndexStatistics( long indexId, long updates, long size )\n         {\n             verify( indexStatisticsKey( indexId ), updates, size );\n@@ -316,7 +318,7 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n \n         public List<Difference> differences()\n         {\n-            for ( Map.Entry<CountsKey, DoubleLongRegister> entry : counts.entrySet() )\n+            for ( Map.Entry<CountsKey,DoubleLongRegister> entry : counts.entrySet() )\n             {\n                 DoubleLongRegister value = entry.getValue();\n                 differences.add( new Difference( entry.getKey(), value.readFirst(), value.readSecond(), 0, 0 ) );\n@@ -325,4 +327,4 @@ public class CountsRecordState implements CountsAccessor, RecordState, CountsAcc\n             return differences;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}