{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "840",
    "information": {
        "errors": [
            {
                "line": "161",
                "severity": "warning",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "  private static final Compute.OperationListOption OPERATION_LIST_OPTION =\n      Compute.OperationListOption.filter(OPERATION_FILTER);\n  @Test\n  public void testServiceOptions() throws Exception {\n    ComputeOptions options = ComputeOptions.builder()\n        .projectId(\"p1\")",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/840/SerializationTest.java\nindex a73cf860810..d59d1a8c14a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/840/SerializationTest.java\n@@ -158,6 +158,7 @@ public class SerializationTest {\n       Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n   private static final Compute.OperationListOption OPERATION_LIST_OPTION =\n       Compute.OperationListOption.filter(OPERATION_FILTER);\n+\n   @Test\n   public void testServiceOptions() throws Exception {\n     ComputeOptions options = ComputeOptions.builder()\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/840/SerializationTest.java\nindex a73cf860810..d59d1a8c14a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/840/SerializationTest.java\n@@ -158,6 +158,7 @@ public class SerializationTest {\n       Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n   private static final Compute.OperationListOption OPERATION_LIST_OPTION =\n       Compute.OperationListOption.filter(OPERATION_FILTER);\n+\n   @Test\n   public void testServiceOptions() throws Exception {\n     ComputeOptions options = ComputeOptions.builder()\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "205",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/840/SerializationTest.java\nindex a73cf860810..416a9b746fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/840/SerializationTest.java\n@@ -111,7 +111,7 @@ public class SerializationTest {\n   private static final DeprecationStatus<MachineTypeId> DEPRECATION_STATUS =\n       new DeprecationStatus<>(DELETED, DEPRECATED, OBSOLETE, MACHINE_TYPE_ID,\n           DeprecationStatus.Status.DELETED);\n-  private static final LicenseId LICENSE_ID = LicenseId.of(\"project\", \"license\");\n+    private static final LicenseId LICENSE_ID = LicenseId.of(\"project\", \"license\");\n   private static final Boolean CHARGES_USE_FEE = true;\n   private static final License LICENSE = new License(LICENSE_ID, CHARGES_USE_FEE);\n   private static final GlobalOperationId GLOBAL_OPERATION_ID =\n@@ -202,9 +202,8 @@ public class SerializationTest {\n     try (ObjectOutputStream output = new ObjectOutputStream(bytes)) {\n       output.writeObject(obj);\n     }\n-    try (ObjectInputStream input =\n-             new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n-      return (T) input.readObject();\n+    try (ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+  return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 364).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 641).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/840/SerializationTest.java\nindex a73cf860810..20b00e1585f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/840/SerializationTest.java\n@@ -23,9 +23,7 @@ import com.google.common.collect.ImmutableList;\n import com.google.gcloud.AuthCredentials;\n import com.google.gcloud.RetryParams;\n import com.google.gcloud.compute.Zone.MaintenanceWindow;\n-\n import org.junit.Test;\n-\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -34,6 +32,7 @@ import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.util.List;\n \n+\n public class SerializationTest {\n \n   private static final Compute COMPUTE = ComputeOptions.builder().projectId(\"p\").build().service();\n@@ -43,149 +42,76 @@ public class SerializationTest {\n   private static final String VALID_DISK_SIZE = \"10GB-10TB\";\n   private static final Long DEFAULT_DISK_SIZE_GB = 10L;\n   private static final DiskTypeId DISK_TYPE_ID = DiskTypeId.of(\"project\", \"zone\", \"diskType\");\n-  private static final DiskType DISK_TYPE = DiskType.builder()\n-      .id(ID)\n-      .diskTypeId(DISK_TYPE_ID)\n-      .creationTimestamp(CREATION_TIMESTAMP)\n-      .description(DESCRIPTION)\n-      .validDiskSize(VALID_DISK_SIZE)\n-      .defaultDiskSizeGb(DEFAULT_DISK_SIZE_GB)\n-      .build();\n+  private static final DiskType DISK_TYPE = DiskType.builder().id(ID).diskTypeId(DISK_TYPE_ID).creationTimestamp(CREATION_TIMESTAMP).description(DESCRIPTION).validDiskSize(VALID_DISK_SIZE).defaultDiskSizeGb(DEFAULT_DISK_SIZE_GB).build();\n   private static final MachineTypeId MACHINE_TYPE_ID = MachineTypeId.of(\"project\", \"zone\", \"type\");\n   private static final Integer GUEST_CPUS = 1;\n   private static final Integer MEMORY_MB = 2;\n   private static final List<Integer> SCRATCH_DISKS = ImmutableList.of(3);\n   private static final Integer MAXIMUM_PERSISTENT_DISKS = 4;\n   private static final Long MAXIMUM_PERSISTENT_DISKS_SIZE_GB = 5L;\n-  private static final MachineType MACHINE_TYPE = MachineType.builder()\n-      .id(ID)\n-      .machineTypeId(MACHINE_TYPE_ID)\n-      .creationTimestamp(CREATION_TIMESTAMP)\n-      .description(DESCRIPTION)\n-      .cpus(GUEST_CPUS)\n-      .memoryMb(MEMORY_MB)\n-      .scratchDisksSizeGb(SCRATCH_DISKS)\n-      .maximumPersistentDisks(MAXIMUM_PERSISTENT_DISKS)\n-      .maximumPersistentDisksSizeGb(MAXIMUM_PERSISTENT_DISKS_SIZE_GB)\n-      .build();\n+  private static final MachineType MACHINE_TYPE = MachineType.builder().id(ID).machineTypeId(MACHINE_TYPE_ID).creationTimestamp(CREATION_TIMESTAMP).description(DESCRIPTION).cpus(GUEST_CPUS).memoryMb(MEMORY_MB).scratchDisksSizeGb(SCRATCH_DISKS).maximumPersistentDisks(MAXIMUM_PERSISTENT_DISKS).maximumPersistentDisksSizeGb(MAXIMUM_PERSISTENT_DISKS_SIZE_GB).build();\n   private static final RegionId REGION_ID = RegionId.of(\"project\", \"region\");\n   private static final Region.Status REGION_STATUS = Region.Status.DOWN;\n   private static final ZoneId ZONE_ID1 = ZoneId.of(\"project\", \"zone1\");\n   private static final ZoneId ZONE_ID2 = ZoneId.of(\"project\", \"zone2\");\n   private static final List<ZoneId> ZONES = ImmutableList.of(ZONE_ID1, ZONE_ID2);\n-  private static final Region.Quota QUOTA1 =\n-      new Region.Quota(\"METRIC1\", 2, 1);\n-  private static final Region.Quota QUOTA2 =\n-      new Region.Quota(\"METRIC2\", 4, 3);\n+  private static final Region.Quota QUOTA1 = new Region.Quota(\"METRIC1\", 2, 1);\n+  private static final Region.Quota QUOTA2 = new Region.Quota(\"METRIC2\", 4, 3);\n   private static final List<Region.Quota> QUOTAS = ImmutableList.of(QUOTA1, QUOTA2);\n-  private static final Region REGION = Region.builder()\n-      .regionId(REGION_ID)\n-      .id(ID)\n-      .creationTimestamp(CREATION_TIMESTAMP)\n-      .description(DESCRIPTION)\n-      .status(REGION_STATUS)\n-      .zones(ZONES)\n-      .quotas(QUOTAS)\n-      .build();\n+  private static final Region REGION = Region.builder().regionId(REGION_ID).id(ID).creationTimestamp(CREATION_TIMESTAMP).description(DESCRIPTION).status(REGION_STATUS).zones(ZONES).quotas(QUOTAS).build();\n   private static final ZoneId ZONE_ID = ZoneId.of(\"project\", \"zone\");\n   private static final Zone.Status ZONE_STATUS = Zone.Status.DOWN;\n   private static final Long BEGIN_TIME = 1453293420000L;\n   private static final Long END_TIME = 1453293480000L;\n-  private static final MaintenanceWindow WINDOW1 = new MaintenanceWindow(\"NAME1\", \"DESCRIPTION1\",\n-      BEGIN_TIME, END_TIME);\n-  private static final MaintenanceWindow WINDOW2 = new MaintenanceWindow(\"NAME2\", \"DESCRIPTION2\",\n-      BEGIN_TIME, END_TIME);\n+  private static final MaintenanceWindow WINDOW1 = new MaintenanceWindow(\"NAME1\", \"DESCRIPTION1\", BEGIN_TIME, END_TIME);\n+  private static final MaintenanceWindow WINDOW2 = new MaintenanceWindow(\"NAME2\", \"DESCRIPTION2\", BEGIN_TIME, END_TIME);\n   private static final List<MaintenanceWindow> WINDOWS = ImmutableList.of(WINDOW1, WINDOW2);\n-  private static final Zone ZONE = Zone.builder()\n-      .zoneId(ZONE_ID)\n-      .id(ID)\n-      .creationTimestamp(CREATION_TIMESTAMP)\n-      .description(DESCRIPTION)\n-      .status(ZONE_STATUS)\n-      .maintenanceWindows(WINDOWS)\n-      .region(REGION_ID)\n-      .build();\n+  private static final Zone ZONE = Zone.builder().zoneId(ZONE_ID).id(ID).creationTimestamp(CREATION_TIMESTAMP).description(DESCRIPTION).status(ZONE_STATUS).maintenanceWindows(WINDOWS).region(REGION_ID).build();\n   private static final Long DELETED = 1453293540000L;\n   private static final Long DEPRECATED = 1453293420000L;\n   private static final Long OBSOLETE = 1453293480000L;\n-  private static final DeprecationStatus<MachineTypeId> DEPRECATION_STATUS =\n-      new DeprecationStatus<>(DELETED, DEPRECATED, OBSOLETE, MACHINE_TYPE_ID,\n-          DeprecationStatus.Status.DELETED);\n+  private static final DeprecationStatus<MachineTypeId> DEPRECATION_STATUS = new DeprecationStatus<>(DELETED, DEPRECATED, OBSOLETE, MACHINE_TYPE_ID, DeprecationStatus.Status.DELETED);\n   private static final LicenseId LICENSE_ID = LicenseId.of(\"project\", \"license\");\n   private static final Boolean CHARGES_USE_FEE = true;\n   private static final License LICENSE = new License(LICENSE_ID, CHARGES_USE_FEE);\n-  private static final GlobalOperationId GLOBAL_OPERATION_ID =\n-      GlobalOperationId.of(\"project\", \"op\");\n-  private static final ZoneOperationId ZONE_OPERATION_ID =\n-      ZoneOperationId.of(\"project\", \"zone\", \"op\");\n-  private static final RegionOperationId REGION_OPERATION_ID =\n-      RegionOperationId.of(\"project\", \"region\", \"op\");\n-  private static final Operation GLOBAL_OPERATION =\n-      new Operation.Builder(COMPUTE).operationId(GLOBAL_OPERATION_ID).build();\n-  private static final Operation ZONE_OPERATION =\n-      new Operation.Builder(COMPUTE).operationId(ZONE_OPERATION_ID).build();\n-  private static final Operation REGION_OPERATION =\n-      new Operation.Builder(COMPUTE).operationId(REGION_OPERATION_ID).build();\n-  private static final Compute.DiskTypeOption DISK_TYPE_OPTION =\n-      Compute.DiskTypeOption.fields();\n-  private static final Compute.DiskTypeFilter DISK_TYPE_FILTER =\n-      Compute.DiskTypeFilter.equals(Compute.DiskTypeField.SELF_LINK, \"selfLink\");\n-  private static final Compute.DiskTypeListOption DISK_TYPE_LIST_OPTION =\n-      Compute.DiskTypeListOption.filter(DISK_TYPE_FILTER);\n-  private static final Compute.DiskTypeAggregatedListOption DISK_TYPE_AGGREGATED_LIST_OPTION =\n-      Compute.DiskTypeAggregatedListOption.filter(DISK_TYPE_FILTER);\n-  private static final Compute.MachineTypeOption MACHINE_TYPE_OPTION =\n-      Compute.MachineTypeOption.fields();\n-  private static final Compute.MachineTypeFilter MACHINE_TYPE_FILTER =\n-      Compute.MachineTypeFilter.equals(Compute.MachineTypeField.SELF_LINK, \"selfLink\");\n-  private static final Compute.MachineTypeListOption MACHINE_TYPE_LIST_OPTION =\n-      Compute.MachineTypeListOption.filter(MACHINE_TYPE_FILTER);\n-  private static final Compute.MachineTypeAggregatedListOption MACHINE_TYPE_AGGREGATED_LIST_OPTION =\n-      Compute.MachineTypeAggregatedListOption.filter(MACHINE_TYPE_FILTER);\n+  private static final GlobalOperationId GLOBAL_OPERATION_ID = GlobalOperationId.of(\"project\", \"op\");\n+  private static final ZoneOperationId ZONE_OPERATION_ID = ZoneOperationId.of(\"project\", \"zone\", \"op\");\n+  private static final RegionOperationId REGION_OPERATION_ID = RegionOperationId.of(\"project\", \"region\", \"op\");\n+  private static final Operation GLOBAL_OPERATION = new Operation.Builder(COMPUTE).operationId(GLOBAL_OPERATION_ID).build();\n+  private static final Operation ZONE_OPERATION = new Operation.Builder(COMPUTE).operationId(ZONE_OPERATION_ID).build();\n+  private static final Operation REGION_OPERATION = new Operation.Builder(COMPUTE).operationId(REGION_OPERATION_ID).build();\n+  private static final Compute.DiskTypeOption DISK_TYPE_OPTION = Compute.DiskTypeOption.fields();\n+  private static final Compute.DiskTypeFilter DISK_TYPE_FILTER = Compute.DiskTypeFilter.equals(Compute.DiskTypeField.SELF_LINK, \"selfLink\");\n+  private static final Compute.DiskTypeListOption DISK_TYPE_LIST_OPTION = Compute.DiskTypeListOption.filter(DISK_TYPE_FILTER);\n+  private static final Compute.DiskTypeAggregatedListOption DISK_TYPE_AGGREGATED_LIST_OPTION = Compute.DiskTypeAggregatedListOption.filter(DISK_TYPE_FILTER);\n+  private static final Compute.MachineTypeOption MACHINE_TYPE_OPTION = Compute.MachineTypeOption.fields();\n+  private static final Compute.MachineTypeFilter MACHINE_TYPE_FILTER = Compute.MachineTypeFilter.equals(Compute.MachineTypeField.SELF_LINK, \"selfLink\");\n+  private static final Compute.MachineTypeListOption MACHINE_TYPE_LIST_OPTION = Compute.MachineTypeListOption.filter(MACHINE_TYPE_FILTER);\n+  private static final Compute.MachineTypeAggregatedListOption MACHINE_TYPE_AGGREGATED_LIST_OPTION = Compute.MachineTypeAggregatedListOption.filter(MACHINE_TYPE_FILTER);\n   private static final Compute.RegionOption REGION_OPTION = Compute.RegionOption.fields();\n-  private static final Compute.RegionFilter REGION_FILTER =\n-      Compute.RegionFilter.equals(Compute.RegionField.SELF_LINK, \"selfLink\");\n-  private static final Compute.RegionListOption REGION_LIST_OPTION =\n-      Compute.RegionListOption.filter(REGION_FILTER);\n+  private static final Compute.RegionFilter REGION_FILTER = Compute.RegionFilter.equals(Compute.RegionField.SELF_LINK, \"selfLink\");\n+  private static final Compute.RegionListOption REGION_LIST_OPTION = Compute.RegionListOption.filter(REGION_FILTER);\n   private static final Compute.ZoneOption ZONE_OPTION = Compute.ZoneOption.fields();\n-  private static final Compute.ZoneFilter ZONE_FILTER =\n-      Compute.ZoneFilter.equals(Compute.ZoneField.SELF_LINK, \"selfLink\");\n-  private static final Compute.ZoneListOption ZONE_LIST_OPTION =\n-      Compute.ZoneListOption.filter(ZONE_FILTER);\n+  private static final Compute.ZoneFilter ZONE_FILTER = Compute.ZoneFilter.equals(Compute.ZoneField.SELF_LINK, \"selfLink\");\n+  private static final Compute.ZoneListOption ZONE_LIST_OPTION = Compute.ZoneListOption.filter(ZONE_FILTER);\n   private static final Compute.LicenseOption LICENSE_OPTION = Compute.LicenseOption.fields();\n   private static final Compute.OperationOption OPERATION_OPTION = Compute.OperationOption.fields();\n-  private static final Compute.OperationFilter OPERATION_FILTER =\n-      Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n-  private static final Compute.OperationListOption OPERATION_LIST_OPTION =\n-      Compute.OperationListOption.filter(OPERATION_FILTER);\n+  private static final Compute.OperationFilter OPERATION_FILTER = Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n+  private static final Compute.OperationListOption OPERATION_LIST_OPTION = Compute.OperationListOption.filter(OPERATION_FILTER);\n+\n   @Test\n   public void testServiceOptions() throws Exception {\n-    ComputeOptions options = ComputeOptions.builder()\n-        .projectId(\"p1\")\n-        .authCredentials(AuthCredentials.createForAppEngine())\n-        .build();\n+    ComputeOptions options = ComputeOptions.builder().projectId(\"p1\").authCredentials(AuthCredentials.createForAppEngine()).build();\n     ComputeOptions serializedCopy = serializeAndDeserialize(options);\n     assertEquals(options, serializedCopy);\n-\n-    options = options.toBuilder()\n-        .projectId(\"p2\")\n-        .retryParams(RetryParams.defaultInstance())\n-        .authCredentials(null)\n-        .build();\n+    options = options.toBuilder().projectId(\"p2\").retryParams(RetryParams.defaultInstance()).authCredentials(null).build();\n     serializedCopy = serializeAndDeserialize(options);\n     assertEquals(options, serializedCopy);\n   }\n \n   @Test\n   public void testModelAndRequests() throws Exception {\n-    Serializable[] objects = {DISK_TYPE_ID, DISK_TYPE, MACHINE_TYPE_ID, MACHINE_TYPE, REGION_ID,\n-        REGION, ZONE_ID, ZONE, LICENSE_ID, LICENSE, DEPRECATION_STATUS, GLOBAL_OPERATION_ID,\n-        REGION_OPERATION_ID, ZONE_OPERATION_ID, GLOBAL_OPERATION, REGION_OPERATION, ZONE_OPERATION,\n-        DISK_TYPE_OPTION, DISK_TYPE_FILTER, DISK_TYPE_LIST_OPTION, DISK_TYPE_AGGREGATED_LIST_OPTION,\n-        MACHINE_TYPE_OPTION, MACHINE_TYPE_FILTER, MACHINE_TYPE_LIST_OPTION,\n-        MACHINE_TYPE_AGGREGATED_LIST_OPTION, REGION_OPTION, REGION_FILTER, REGION_LIST_OPTION,\n-        ZONE_OPTION, ZONE_FILTER, ZONE_LIST_OPTION, LICENSE_OPTION, OPERATION_OPTION,\n-        OPERATION_FILTER, OPERATION_LIST_OPTION};\n+    Serializable[] objects = {DISK_TYPE_ID, DISK_TYPE, MACHINE_TYPE_ID, MACHINE_TYPE, REGION_ID, REGION, ZONE_ID, ZONE, LICENSE_ID, LICENSE, DEPRECATION_STATUS, GLOBAL_OPERATION_ID, REGION_OPERATION_ID, ZONE_OPERATION_ID, GLOBAL_OPERATION, REGION_OPERATION, ZONE_OPERATION, DISK_TYPE_OPTION, DISK_TYPE_FILTER, DISK_TYPE_LIST_OPTION, DISK_TYPE_AGGREGATED_LIST_OPTION, MACHINE_TYPE_OPTION, MACHINE_TYPE_FILTER, MACHINE_TYPE_LIST_OPTION, MACHINE_TYPE_AGGREGATED_LIST_OPTION, REGION_OPTION, REGION_FILTER, REGION_LIST_OPTION, ZONE_OPTION, ZONE_FILTER, ZONE_LIST_OPTION, LICENSE_OPTION, OPERATION_OPTION, OPERATION_FILTER, OPERATION_LIST_OPTION};\n     for (Serializable obj : objects) {\n       Object copy = serializeAndDeserialize(obj);\n       assertEquals(obj, obj);\n@@ -196,15 +122,15 @@ public class SerializationTest {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private <T> T serializeAndDeserialize(T obj)\n-      throws IOException, ClassNotFoundException {\n+  private <T> T serializeAndDeserialize(T obj) throws IOException, ClassNotFoundException {\n     ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-    try (ObjectOutputStream output = new ObjectOutputStream(bytes)) {\n+    try (ObjectOutputStream output =\n+      new ObjectOutputStream(bytes)) {\n       output.writeObject(obj);\n     }\n     try (ObjectInputStream input =\n-             new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+      new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n       return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 115
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/840/SerializationTest.java\nindex a73cf860810..d59d1a8c14a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/840/SerializationTest.java\n@@ -158,6 +158,7 @@ public class SerializationTest {\n       Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n   private static final Compute.OperationListOption OPERATION_LIST_OPTION =\n       Compute.OperationListOption.filter(OPERATION_FILTER);\n+\n   @Test\n   public void testServiceOptions() throws Exception {\n     ComputeOptions options = ComputeOptions.builder()\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/840/SerializationTest.java\nindex a73cf860810..d59d1a8c14a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/840/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/840/SerializationTest.java\n@@ -158,6 +158,7 @@ public class SerializationTest {\n       Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n   private static final Compute.OperationListOption OPERATION_LIST_OPTION =\n       Compute.OperationListOption.filter(OPERATION_FILTER);\n+\n   @Test\n   public void testServiceOptions() throws Exception {\n     ComputeOptions options = ComputeOptions.builder()\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}