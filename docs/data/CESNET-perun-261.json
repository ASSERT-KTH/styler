{
    "project_name": "CESNET-perun",
    "error_id": "261",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\t\t\", users.first_name, users.last_name \",\n\t\t\t\" LEFT JOIN users on members.user_id = users.id \",\n\t\t\tquery -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" +\n\t                 \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n\t),\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/261/MembersOrderColumn.java\nindex 6dcd2aa856e..2edbc3ae498 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/261/MembersOrderColumn.java\n@@ -15,7 +15,7 @@ public enum MembersOrderColumn {\n \t\t\t\", users.first_name, users.last_name \",\n \t\t\t\" LEFT JOIN users on members.user_id = users.id \",\n \t\t\tquery -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" +\n-\t                 \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n+\t\t\t\t\"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n \t),\n \n \tID(\"\", \"\", query -> \"members.id \" + query.getOrder().getSqlValue());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/261/MembersOrderColumn.java\nindex 6dcd2aa856e..704b30b2e50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/261/MembersOrderColumn.java\n@@ -4,54 +4,54 @@ import java.util.function.Function;\n \n /**\n  * Class representing columns, that can be used to sort paginated members.\n- *\n+ * <p>\n  * For each such column, this instances also contain sql parts that are specific for them.\n  * This class can be extended, in the future, if for example, we would like to sort by some attributes.\n  *\n  * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n  */\n public enum MembersOrderColumn {\n-\tNAME(\n-\t\t\t\", users.first_name, users.last_name \",\n-\t\t\t\" LEFT JOIN users on members.user_id = users.id \",\n-\t\t\tquery -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" +\n-\t                 \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n-\t),\n-\n-\tID(\"\", \"\", query -> \"members.id \" + query.getOrder().getSqlValue());\n-\n-\tprivate final Function<MembersPageQuery, String> orderBySqlFunction;\n-\tprivate final String selectSql;\n-\tprivate final String joinSql;\n-\n-\tMembersOrderColumn(String selectSql, String joinSql, Function<MembersPageQuery, String> sqlFunction) {\n-\t\tthis.selectSql = selectSql;\n-\t\tthis.joinSql = joinSql;\n-\t\tthis.orderBySqlFunction = sqlFunction;\n-\t}\n-\n-\tpublic String getSqlOrderBy(MembersPageQuery query) {\n-\t\treturn this.orderBySqlFunction.apply(query);\n-\t}\n-\n-\tpublic String getSqlSelect() {\n-\t\treturn this.selectSql;\n-\t}\n-\n-\tpublic String getSqlJoin() {\n-\t\treturn this.joinSql;\n-\t}\n-\n-\tprivate static String getLangSql(MembersPageQuery query) {\n-\t\treturn \"\";\n-\t\t// TODO add support for other languages\n-\t\t// to make this work, Czech collation has to be created in DB - create COLLATION cs_CZ (locale=\"cs_CZ.UTF-8\");\n-\t\t// However, this COLLATION can be only created, if the OS has this language installed. Therefore, we must install\n-\t\t// this language in the test container and also, we need to make sure in is available at the production.\n-\n-\t\t// We also need to figure out, when to use the Czech collation. Maybe we can create a Vo attribute, that could\n-\t\t// be set for this purposes, or we can create a new property in the Perun configuration.\n-\t\t//\n-\t\t// \" collate \\\"cs_CZ\\\" \"\n-\t}\n+    NAME(\n+            \", users.first_name, users.last_name \",\n+            \" LEFT JOIN users on members.user_id = users.id \",\n+            query -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" +\n+                    \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n+    ),\n+\n+    ID(\"\", \"\", query -> \"members.id \" + query.getOrder().getSqlValue());\n+\n+    private final Function<MembersPageQuery, String> orderBySqlFunction;\n+    private final String selectSql;\n+    private final String joinSql;\n+\n+    MembersOrderColumn(String selectSql, String joinSql, Function<MembersPageQuery, String> sqlFunction) {\n+        this.selectSql = selectSql;\n+        this.joinSql = joinSql;\n+        this.orderBySqlFunction = sqlFunction;\n+    }\n+\n+    public String getSqlOrderBy(MembersPageQuery query) {\n+        return this.orderBySqlFunction.apply(query);\n+    }\n+\n+    public String getSqlSelect() {\n+        return this.selectSql;\n+    }\n+\n+    public String getSqlJoin() {\n+        return this.joinSql;\n+    }\n+\n+    private static String getLangSql(MembersPageQuery query) {\n+        return \"\";\n+        // TODO add support for other languages\n+        // to make this work, Czech collation has to be created in DB - create COLLATION cs_CZ (locale=\"cs_CZ.UTF-8\");\n+        // However, this COLLATION can be only created, if the OS has this language installed. Therefore, we must install\n+        // this language in the test container and also, we need to make sure in is available at the production.\n+\n+        // We also need to figure out, when to use the Czech collation. Maybe we can create a Vo attribute, that could\n+        // be set for this purposes, or we can create a new property in the Perun configuration.\n+        //\n+        // \" collate \\\"cs_CZ\\\" \"\n+    }\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/261/MembersOrderColumn.java\nindex 6dcd2aa856e..eb02cedff00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/261/MembersOrderColumn.java\n@@ -10,48 +10,49 @@ import java.util.function.Function;\n  *\n  * @author Vojtech Sassmann <vojtech.sassmann@gmail.com>\n  */\n+\n+\n public enum MembersOrderColumn {\n-\tNAME(\n-\t\t\t\", users.first_name, users.last_name \",\n-\t\t\t\" LEFT JOIN users on members.user_id = users.id \",\n-\t\t\tquery -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" +\n-\t                 \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n-\t),\n-\n-\tID(\"\", \"\", query -> \"members.id \" + query.getOrder().getSqlValue());\n-\n-\tprivate final Function<MembersPageQuery, String> orderBySqlFunction;\n-\tprivate final String selectSql;\n-\tprivate final String joinSql;\n-\n-\tMembersOrderColumn(String selectSql, String joinSql, Function<MembersPageQuery, String> sqlFunction) {\n-\t\tthis.selectSql = selectSql;\n-\t\tthis.joinSql = joinSql;\n-\t\tthis.orderBySqlFunction = sqlFunction;\n-\t}\n-\n-\tpublic String getSqlOrderBy(MembersPageQuery query) {\n-\t\treturn this.orderBySqlFunction.apply(query);\n-\t}\n-\n-\tpublic String getSqlSelect() {\n-\t\treturn this.selectSql;\n-\t}\n-\n-\tpublic String getSqlJoin() {\n-\t\treturn this.joinSql;\n-\t}\n-\n-\tprivate static String getLangSql(MembersPageQuery query) {\n-\t\treturn \"\";\n-\t\t// TODO add support for other languages\n-\t\t// to make this work, Czech collation has to be created in DB - create COLLATION cs_CZ (locale=\"cs_CZ.UTF-8\");\n-\t\t// However, this COLLATION can be only created, if the OS has this language installed. Therefore, we must install\n-\t\t// this language in the test container and also, we need to make sure in is available at the production.\n-\n-\t\t// We also need to figure out, when to use the Czech collation. Maybe we can create a Vo attribute, that could\n-\t\t// be set for this purposes, or we can create a new property in the Perun configuration.\n-\t\t//\n-\t\t// \" collate \\\"cs_CZ\\\" \"\n-\t}\n-}\n+\n+\n+ NAME(\", users.first_name, users.last_name \", \" LEFT JOIN users on members.user_id = users.id \", query->\"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" + \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()),\n+\n+\n+ ID(\"\", \"\", query->\"members.id \" + query.getOrder().getSqlValue());\n+\n+ private final Function<MembersPageQuery, String> orderBySqlFunction;\n+ private final String selectSql;\n+ private final String joinSql;\n+\n+ MembersOrderColumn(String selectSql, String joinSql, Function<MembersPageQuery, String> sqlFunction) {\n+  this.selectSql = selectSql;\n+  this.joinSql = joinSql;\n+  this.orderBySqlFunction = sqlFunction;\n+ }\n+\n+ public String getSqlOrderBy(MembersPageQuery query) {\n+  return this.orderBySqlFunction.apply(query);\n+ }\n+\n+ public String getSqlSelect() {\n+  return this.selectSql;\n+ }\n+\n+ public String getSqlJoin() {\n+  return this.joinSql;\n+ }\n+\n+\n+ private static String getLangSql(MembersPageQuery query) {\n+  return \"\";\n+  // TODO add support for other languages\n+  // to make this work, Czech collation has to be created in DB - create COLLATION cs_CZ (locale=\"cs_CZ.UTF-8\");\n+  // However, this COLLATION can be only created, if the OS has this language installed. Therefore, we must install\n+  // this language in the test container and also, we need to make sure in is available at the production.\n+\n+  // We also need to figure out, when to use the Czech collation. Maybe we can create a Vo attribute, that could\n+  // be set for this purposes, or we can create a new property in the Perun configuration.\n+  //\n+  // \" collate \\\"cs_CZ\\\" \"\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/261/MembersOrderColumn.java\nindex 6dcd2aa856e..66ac7177ae8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/261/MembersOrderColumn.java\n@@ -14,8 +14,7 @@ public enum MembersOrderColumn {\n \tNAME(\n \t\t\t\", users.first_name, users.last_name \",\n \t\t\t\" LEFT JOIN users on members.user_id = users.id \",\n-\t\t\tquery -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" +\n-\t                 \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n+\t\t\tquery -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" + \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n \t),\n \n \tID(\"\", \"\", query -> \"members.id \" + query.getOrder().getSqlValue());\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/261/MembersOrderColumn.java\nindex 6dcd2aa856e..2edbc3ae498 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/261/MembersOrderColumn.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/261/MembersOrderColumn.java\n@@ -15,7 +15,7 @@ public enum MembersOrderColumn {\n \t\t\t\", users.first_name, users.last_name \",\n \t\t\t\" LEFT JOIN users on members.user_id = users.id \",\n \t\t\tquery -> \"users.last_name \" + getLangSql(query) + query.getOrder().getSqlValue() + \", \" +\n-\t                 \"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n+\t\t\t\t\"users.first_name \" + getLangSql(query) + query.getOrder().getSqlValue()\n \t),\n \n \tID(\"\", \"\", query -> \"members.id \" + query.getOrder().getSqlValue());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}