{
    "project_name": "neo4j-neo4j",
    "error_id": "424",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/424/SchemaRuleException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/424/SchemaRuleException.java\nindex 06069cecbef..1cc04c3cd98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/424/SchemaRuleException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/424/SchemaRuleException.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.exceptions.schema;\n \n import org.neo4j.common.TokenNameLookup;\n@@ -39,64 +40,62 @@ public class SchemaRuleException extends SchemaKernelException\n \n     /**\n      * @param messageTemplate Template for {@code String.format}. Must match two strings representing the schema kind and the descriptor.\n-     * @param schemaThing schema element relevant to this exception.\n+     * @param schemaThing     schema element relevant to this exception.\n      * @param tokenNameLookup how to look up tokens for describing the given {@code schemaThing}.\n      */\n-    SchemaRuleException( Status status, String messageTemplate, SchemaDescriptorSupplier schemaThing, TokenNameLookup tokenNameLookup )\n+    SchemaRuleException(Status status, String messageTemplate, SchemaDescriptorSupplier schemaThing, TokenNameLookup tokenNameLookup)\n     {\n-        super( status, format( messageTemplate, describe( schemaThing ),\n-                schemaThing.schema().userDescription( tokenNameLookup ) ) );\n+        super(status, format(messageTemplate, describe(schemaThing),\n+          schemaThing.schema().userDescription(tokenNameLookup)));\n         this.schemaThing = schemaThing;\n         this.messageTemplate = messageTemplate;\n     }\n \n     @Override\n-    public String getUserMessage( TokenNameLookup tokenNameLookup )\n+    public String getUserMessage(TokenNameLookup tokenNameLookup)\n     {\n-        return format( messageTemplate, describe( schemaThing ), schemaThing.schema().userDescription( tokenNameLookup ) );\n+        return format(messageTemplate, describe(schemaThing), schemaThing.schema().userDescription(tokenNameLookup));\n     }\n \n-    public static String describe( SchemaDescriptorSupplier schemaThing )\n+    public static String describe(SchemaDescriptorSupplier schemaThing)\n     {\n         SchemaDescriptor schema = schemaThing.schema();\n         String tagType;\n-        switch ( schema.entityType() )\n+        switch (schema.entityType())\n         {\n-        case NODE:\n-            tagType = \"label\";\n-            break;\n-        case RELATIONSHIP:\n-            tagType = \"relationship type\";\n-            break;\n-        default:\n-            throw new AssertionError( \"Unknown entity type: \" + schema.entityType() );\n+            case NODE:\n+                tagType = \"label\";\n+                break;\n+            case RELATIONSHIP:\n+                tagType = \"relationship type\";\n+                break;\n+            default:\n+                throw new AssertionError(\"Unknown entity type: \" + schema.entityType());\n         }\n \n-        if ( schemaThing instanceof ConstraintDescriptor )\n+        if (schemaThing instanceof ConstraintDescriptor)\n         {\n             ConstraintDescriptor constraint = (ConstraintDescriptor) schemaThing;\n-            switch ( constraint.type() )\n+            switch (constraint.type())\n             {\n-            case UNIQUE:\n-                return tagType + \" uniqueness constraint\";\n-            case EXISTS:\n-                return tagType + \" property existence constraint\";\n-            case UNIQUE_EXISTS:\n-                return schema.entityType().name().toLowerCase() + \" key constraint\";\n-            default:\n-                throw new AssertionError( \"Unknown constraint type: \" + constraint.type() );\n+                case UNIQUE:\n+                    return tagType + \" uniqueness constraint\";\n+                case EXISTS:\n+                    return tagType + \" property existence constraint\";\n+                case UNIQUE_EXISTS:\n+                    return schema.entityType().name().toLowerCase() + \" key constraint\";\n+                default:\n+                    throw new AssertionError(\"Unknown constraint type: \" + constraint.type());\n             }\n-        }\n-        else\n+        } else\n         {\n             IndexDescriptor index = (IndexDescriptor) schemaThing;\n             IndexType indexType = index.getIndexType();\n-            if ( indexType != IndexType.BTREE )\n+            if (indexType != IndexType.BTREE)\n             {\n                 String indexTypeName = indexType.name().toLowerCase();\n                 return indexTypeName + \" \" + tagType + \" index\";\n-            }\n-            else\n+            } else\n             {\n                 return tagType + \" index\";\n             }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}