{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2415",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "63",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "69",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2415/DatabaseHealth.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2415/DatabaseHealth.java\nindex 04d359391ab..7d7552bb141 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2415/DatabaseHealth.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2415/DatabaseHealth.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal;\n \n import org.neo4j.graphdb.event.ErrorState;\n@@ -26,106 +27,102 @@ import org.neo4j.logging.Log;\n \n public class DatabaseHealth\n {\n-    private static final String panicMessage = \"The database has encountered a critical error, \" +\n-            \"and needs to be restarted. Please see database logs for more details.\";\n-    private static final Class<?>[] CRITICAL_EXCEPTIONS = new Class[]{OutOfMemoryError.class};\n+  private static final String panicMessage = \"The database has encountered a critical error, \" +\n+      \"and needs to be restarted. Please see database logs for more details.\";\n+  private static final Class<?>[] CRITICAL_EXCEPTIONS = new Class[] {OutOfMemoryError.class};\n \n-    private volatile boolean healthy = true;\n-    private final DatabasePanicEventGenerator dbpe;\n-    private final Log log;\n-    private Throwable causeOfPanic;\n+  private volatile boolean healthy = true;\n+  private final DatabasePanicEventGenerator dbpe;\n+  private final Log log;\n+  private Throwable causeOfPanic;\n \n-    public DatabaseHealth( DatabasePanicEventGenerator dbpe, Log log )\n-    {\n-        this.dbpe = dbpe;\n-        this.log = log;\n-    }\n-\n-    /**\n-     * Asserts that the database is in good health. If that is not the case then the cause of the\n-     * unhealthy state is wrapped in an exception of the given type, i.e. the panic disguise.\n-     *\n-     * @param panicDisguise the cause of the unhealthy state wrapped in an exception of this type.\n-     * @throws EXCEPTION exception type to wrap cause in.\n-     */\n-    public <EXCEPTION extends Throwable> void assertHealthy( Class<EXCEPTION> panicDisguise ) throws EXCEPTION\n-    {\n-        if ( !healthy )\n-        {\n-            EXCEPTION exception;\n-            try\n-            {\n-                try\n-                {\n-                    exception = panicDisguise.getConstructor( String.class, Throwable.class )\n-                            .newInstance( panicMessage, causeOfPanic );\n-                }\n-                catch ( NoSuchMethodException e )\n-                {\n-                    exception = panicDisguise.getConstructor( String.class ).newInstance( panicMessage );\n-                    try\n-                    {\n-                        exception.initCause( causeOfPanic );\n-                    }\n-                    catch ( IllegalStateException ignored )\n-                    {\n-                    }\n-                }\n-            }\n-            catch ( Exception e )\n-            {\n-                throw new Error( panicMessage + \". An exception of type \" + panicDisguise.getName() +\n-                        \" was requested to be thrown but that proved impossible\", e );\n-            }\n-            throw exception;\n-        }\n-    }\n+  public DatabaseHealth(DatabasePanicEventGenerator dbpe, Log log)\n+  {\n+    this.dbpe = dbpe;\n+    this.log = log;\n+  }\n \n-    public void panic( Throwable cause )\n+  /**\n+   * Asserts that the database is in good health. If that is not the case then the cause of the\n+   * unhealthy state is wrapped in an exception of the given type, i.e. the panic disguise.\n+   *\n+   * @param panicDisguise the cause of the unhealthy state wrapped in an exception of this type.\n+   * @throws EXCEPTION exception type to wrap cause in.\n+   */\n+  public <EXCEPTION extends Throwable> void assertHealthy(Class<EXCEPTION> panicDisguise) throws EXCEPTION\n+  {\n+    if (!healthy)\n     {\n-        if ( !healthy )\n+      EXCEPTION exception;\n+      try\n+      {\n+        try\n         {\n-            return;\n-        }\n-\n-        if ( cause == null )\n+          exception = panicDisguise.getConstructor(String.class, Throwable.class)\n+              .newInstance(panicMessage, causeOfPanic);\n+        } catch (NoSuchMethodException e)\n         {\n-            throw new IllegalArgumentException( \"Must provide a cause for the database panic\" );\n+          exception = panicDisguise.getConstructor(String.class).newInstance(panicMessage);\n+          try\n+          {\n+            exception.initCause(causeOfPanic);\n+          } catch (IllegalStateException ignored)\n+          {\n+          }\n         }\n-        this.causeOfPanic = cause;\n-        this.healthy = false;\n-        log.error( \"Database panic: \" + panicMessage, cause );\n-        dbpe.generateEvent( ErrorState.TX_MANAGER_NOT_OK, causeOfPanic );\n+      } catch (Exception e)\n+      {\n+        throw new Error(panicMessage + \". An exception of type \" + panicDisguise.getName() +\n+            \" was requested to be thrown but that proved impossible\", e);\n+      }\n+      throw exception;\n     }\n+  }\n \n-    public boolean isHealthy()\n+  public void panic(Throwable cause)\n+  {\n+    if (!healthy)\n     {\n-        return healthy;\n+      return;\n     }\n \n-    public boolean healed()\n+    if (cause == null)\n     {\n-        if ( hasCriticalFailure() )\n-        {\n-            log.error( \"Database encountered a critical error and can't be healed. Restart required.\" );\n-            return false;\n-        }\n-        else\n-        {\n-            healthy = true;\n-            causeOfPanic = null;\n-            log.info( \"Database health set to OK\" );\n-            return true;\n-        }\n+      throw new IllegalArgumentException(\"Must provide a cause for the database panic\");\n     }\n+    this.causeOfPanic = cause;\n+    this.healthy = false;\n+    log.error(\"Database panic: \" + panicMessage, cause);\n+    dbpe.generateEvent(ErrorState.TX_MANAGER_NOT_OK, causeOfPanic);\n+  }\n \n-    private boolean hasCriticalFailure()\n-    {\n-        return !isHealthy() && Exceptions.contains( causeOfPanic, CRITICAL_EXCEPTIONS );\n-    }\n+  public boolean isHealthy()\n+  {\n+    return healthy;\n+  }\n \n-    public Throwable cause()\n+  public boolean healed()\n+  {\n+    if (hasCriticalFailure())\n+    {\n+      log.error(\"Database encountered a critical error and can't be healed. Restart required.\");\n+      return false;\n+    } else\n     {\n-        return causeOfPanic;\n+      healthy = true;\n+      causeOfPanic = null;\n+      log.info(\"Database health set to OK\");\n+      return true;\n     }\n+  }\n+\n+  private boolean hasCriticalFailure()\n+  {\n+    return !isHealthy() && Exceptions.contains(causeOfPanic, CRITICAL_EXCEPTIONS);\n+  }\n+\n+  public Throwable cause()\n+  {\n+    return causeOfPanic;\n+  }\n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2415/DatabaseHealth.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2415/DatabaseHealth.java\nindex 04d359391ab..fa746229fb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2415/DatabaseHealth.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2415/DatabaseHealth.java\n@@ -26,9 +26,9 @@ import org.neo4j.logging.Log;\n \n public class DatabaseHealth\n {\n-    private static final String panicMessage = \"The database has encountered a critical error, \" +\n-            \"and needs to be restarted. Please see database logs for more details.\";\n-    private static final Class<?>[] CRITICAL_EXCEPTIONS = new Class[]{OutOfMemoryError.class};\n+    private static final String panicMessage = \"The database has encountered a critical error, \" + \"and needs to be restarted. Please see database logs for more details.\";\n+private static final Class<?>[] CRITICAL_EXCEPTIONS = new Class[]{OutOfMemoryError.class\n+    };\n \n     private volatile boolean healthy = true;\n     private final DatabasePanicEventGenerator dbpe;\n@@ -57,9 +57,8 @@ public class DatabaseHealth\n             {\n                 try\n                 {\n-                    exception = panicDisguise.getConstructor( String.class, Throwable.class )\n-                            .newInstance( panicMessage, causeOfPanic );\n-                }\n+                    exception = panicDisguise.getConstructor( String.class, Throwable.class ).newInstance( panicMessage, causeOfPanic );\n+    }\n                 catch ( NoSuchMethodException e )\n                 {\n                     exception = panicDisguise.getConstructor( String.class ).newInstance( panicMessage );\n@@ -74,8 +73,7 @@ public class DatabaseHealth\n             }\n             catch ( Exception e )\n             {\n-                throw new Error( panicMessage + \". An exception of type \" + panicDisguise.getName() +\n-                        \" was requested to be thrown but that proved impossible\", e );\n+                throw new Error( panicMessage + \". An exception of type \" + panicDisguise.getName() + \" was requested to be thrown but that proved impossible\", e );\n             }\n             throw exception;\n         }\n@@ -128,4 +126,4 @@ public class DatabaseHealth\n     {\n         return causeOfPanic;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}