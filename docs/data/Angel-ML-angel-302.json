{
    "project_name": "Angel-ML-angel",
    "error_id": "302",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/302/AsyncOptimFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/302/AsyncOptimFunc.java\nindex 53619daef63..02cbf95a216 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/302/AsyncOptimFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/302/AsyncOptimFunc.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.spark.ml.psf.optim;\n \n import com.tencent.angel.ml.math2.vector.Vector;\n@@ -43,10 +44,10 @@ public abstract class AsyncOptimFunc extends IncrementRows {\n     int offset = ints[0];\n     int slots = ints[1];\n     Vector[] vectors = new Vector[slots];\n-    for (RowUpdateSplit update: updates) {\n+    for (RowUpdateSplit update : updates) {\n       for (int i = 0; i < slots; i++) {\n         vectors[i] = getVector(param.getMatrixId(), update.getRowId() + offset * i,\n-          param.getPartKey());\n+            param.getPartKey());\n       }\n \n       update(vectors, update.getVector(), doubles, ints);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/302/AsyncOptimFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/302/AsyncOptimFunc.java\nindex 53619daef63..f3565759d58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/302/AsyncOptimFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/302/AsyncOptimFunc.java\n@@ -54,4 +54,4 @@ public abstract class AsyncOptimFunc extends IncrementRows {\n   }\n \n   public abstract void update(Vector[] vectors, Vector grad, double[] doubles, int[] ints);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/302/AsyncOptimFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/302/AsyncOptimFunc.java\nindex 53619daef63..c2871d7c785 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/302/AsyncOptimFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/302/AsyncOptimFunc.java\n@@ -21,7 +21,6 @@ import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;\n import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;\n import com.tencent.angel.ml.matrix.psf.update.update.IncrementRows;\n import com.tencent.angel.psagent.matrix.oplog.cache.RowUpdateSplit;\n-\n import java.util.List;\n \n public abstract class AsyncOptimFunc extends IncrementRows {\n@@ -43,15 +42,15 @@ public abstract class AsyncOptimFunc extends IncrementRows {\n     int offset = ints[0];\n     int slots = ints[1];\n     Vector[] vectors = new Vector[slots];\n-    for (RowUpdateSplit update: updates) {\n+    for (RowUpdateSplit update : updates) {\n       for (int i = 0; i < slots; i++) {\n-        vectors[i] = getVector(param.getMatrixId(), update.getRowId() + offset * i,\n-          param.getPartKey());\n+        vectors[i] = getVector(param.getMatrixId(), update.getRowId() + offset * i, param.getPartKey());\n       }\n-\n       update(vectors, update.getVector(), doubles, ints);\n     }\n   }\n \n-  public abstract void update(Vector[] vectors, Vector grad, double[] doubles, int[] ints);\n-}\n+  public abstract void update(\n+    Vector[] vectors, Vector grad, double[] doubles, int[] ints);\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}