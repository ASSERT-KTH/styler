{
    "project_name": "neo4j-neo4j",
    "error_id": "3117",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3117/ThirdPartyJAXRSModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3117/ThirdPartyJAXRSModule.java\nindex 9e820048681..4d7f154a21d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3117/ThirdPartyJAXRSModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3117/ThirdPartyJAXRSModule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.modules;\n \n import java.util.Collections;\n@@ -37,41 +38,41 @@ public class ThirdPartyJAXRSModule implements ServerModule\n     private List<ThirdPartyJaxRsPackage> packages;\n     private final Log log;\n \n-    public ThirdPartyJAXRSModule( WebServer webServer, Config config, LogProvider logProvider )\n+    public ThirdPartyJAXRSModule(WebServer webServer, Config config, LogProvider logProvider)\n     {\n         this.webServer = webServer;\n         this.config = config;\n-        this.log = logProvider.getLog( getClass() );\n+        this.log = logProvider.getLog(getClass());\n     }\n \n     @Override\n     public void start()\n     {\n-        this.packages = config.get( ServerSettings.third_party_packages );\n-        for ( ThirdPartyJaxRsPackage tpp : packages )\n+        this.packages = config.get(ServerSettings.third_party_packages);\n+        for (ThirdPartyJaxRsPackage tpp : packages)\n         {\n-            List<String> packageNames = packagesFor( tpp );\n-            webServer.addJAXRSPackages( packageNames, tpp.getMountPoint(), null );\n-            log.info( \"Mounted unmanaged extension [%s] at [%s]\", tpp.getPackageName(), tpp.getMountPoint() );\n+            List<String> packageNames = packagesFor(tpp);\n+            webServer.addJAXRSPackages(packageNames, tpp.getMountPoint(), null);\n+            log.info(\"Mounted unmanaged extension [%s] at [%s]\", tpp.getPackageName(), tpp.getMountPoint());\n         }\n     }\n \n-    private List<String> packagesFor( ThirdPartyJaxRsPackage tpp )\n+    private List<String> packagesFor(ThirdPartyJaxRsPackage tpp)\n     {\n-        return Collections.singletonList( tpp.getPackageName() );\n+        return Collections.singletonList(tpp.getPackageName());\n     }\n \n     @Override\n     public void stop()\n     {\n-        if ( packages == null )\n+        if (packages == null)\n         {\n             return;\n         }\n \n-        for ( ThirdPartyJaxRsPackage tpp : packages )\n+        for (ThirdPartyJaxRsPackage tpp : packages)\n         {\n-            webServer.removeJAXRSPackages( packagesFor( tpp ), tpp.getMountPoint() );\n+            webServer.removeJAXRSPackages(packagesFor(tpp), tpp.getMountPoint());\n         }\n     }\n }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}