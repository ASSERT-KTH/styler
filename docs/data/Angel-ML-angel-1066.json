{
    "project_name": "Angel-ML-angel",
    "error_id": "1066",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1066/FeatureInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1066/FeatureInfo.java\nindex 6ed1cf550c8..96cb6dd57b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1066/FeatureInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1066/FeatureInfo.java\n@@ -136,8 +136,9 @@ public class FeatureInfo {\n         if (index == null) {\n           throw new InvalidParameterException(\"feature \" + simpleFeatureList.get(i).featureName\n               + \" can not found in match list\");\n-        }\n-        simpleFeatureIndexes[i] = index;\n+  }\n+\n+simpleFeatureIndexes[i] = index;\n       }\n     }\n \n@@ -155,8 +156,9 @@ public class FeatureInfo {\n           if (index == null) {\n             throw new InvalidParameterException(\"feature \"\n                 + combineFeatures.get(i).dependFeatures[j] + \" can not found in match list\");\n-          }\n-          combineFeatureIndexes[i][j] = index;\n+  }\n+\n+combineFeatureIndexes[i][j] = index;\n         }\n       }\n     }\n@@ -174,4 +176,4 @@ public class FeatureInfo {\n         + Arrays.toString(combineFeatureIndexes) + \"]\";\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 407).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1066/FeatureInfo.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1066/FeatureInfo.java\nindex 6ed1cf550c8..3e2bd3f5ebc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1066/FeatureInfo.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1066/FeatureInfo.java\n@@ -17,12 +17,12 @@\n package com.tencent.angel.ml.feature;\n \n import com.tencent.angel.exception.InvalidParameterException;\n-\n import java.util.*;\n \n public class FeatureInfo {\n \n   public class Match {\n+\n     public Match(String fieldName, int index) {\n       super();\n       this.fieldName = fieldName;\n@@ -30,19 +30,24 @@ public class FeatureInfo {\n     }\n \n     public String fieldName;\n+\n     public int index;\n+\n   }\n \n   public class SimpleFeature {\n+\n     public SimpleFeature(String featureName) {\n       super();\n       this.featureName = featureName;\n     }\n \n     public String featureName;\n+\n   }\n \n   public class CombineFeature {\n+\n     public CombineFeature(String featureName, String[] dependFeatures) {\n       super();\n       this.featureName = featureName;\n@@ -50,20 +55,27 @@ public class FeatureInfo {\n     }\n \n     public String featureName;\n+\n     public String[] dependFeatures;\n \n     public int dependFeatureSize() {\n       return dependFeatures.length;\n     }\n+\n   }\n \n   public final Map<String, Integer> matchMap;\n+\n   public final List<SimpleFeature> simpleFeatureList;\n+\n   public final List<CombineFeature> combineFeatures;\n \n   public String[] simpleFeatureNames;\n+\n   public int[] simpleFeatureIndexes;\n+\n   public String[][] combineFeatureNames;\n+\n   public int[][] combineFeatureIndexes;\n \n   public FeatureInfo() {\n@@ -112,7 +124,6 @@ public class FeatureInfo {\n         combineFeatureNames[i] = combineFeatures.get(i).dependFeatures;\n       }\n     }\n-\n     return combineFeatureNames;\n   }\n \n@@ -123,55 +134,43 @@ public class FeatureInfo {\n         simpleFeatureNames[i] = simpleFeatureList.get(i).featureName;\n       }\n     }\n-\n     return simpleFeatureNames;\n   }\n \n   public int[] getSimpleFeatureIndexes() throws InvalidParameterException {\n     if (simpleFeatureIndexes == null) {\n       simpleFeatureIndexes = new int[simpleFeatureList.size()];\n-\n       for (int i = 0; i < simpleFeatureIndexes.length; i++) {\n         Integer index = matchMap.get(simpleFeatureList.get(i).featureName);\n         if (index == null) {\n-          throw new InvalidParameterException(\"feature \" + simpleFeatureList.get(i).featureName\n-              + \" can not found in match list\");\n+          throw new InvalidParameterException(\"feature \" + simpleFeatureList.get(i).featureName + \" can not found in match list\");\n         }\n         simpleFeatureIndexes[i] = index;\n       }\n     }\n-\n     return simpleFeatureIndexes;\n   }\n \n   public int[][] getCombineFeatureIndexes() throws InvalidParameterException {\n     if (combineFeatureIndexes == null) {\n       combineFeatureIndexes = new int[combineFeatures.size()][];\n-\n       for (int i = 0; i < combineFeatureIndexes.length; i++) {\n         combineFeatureIndexes[i] = new int[combineFeatures.get(i).dependFeatures.length];\n         for (int j = 0; j < combineFeatureIndexes[i].length; j++) {\n           Integer index = matchMap.get(combineFeatures.get(i).dependFeatures[j]);\n           if (index == null) {\n-            throw new InvalidParameterException(\"feature \"\n-                + combineFeatures.get(i).dependFeatures[j] + \" can not found in match list\");\n+            throw new InvalidParameterException(\"feature \" + combineFeatures.get(i).dependFeatures[j] + \" can not found in match list\");\n           }\n           combineFeatureIndexes[i][j] = index;\n         }\n       }\n     }\n-\n     return combineFeatureIndexes;\n   }\n \n   @Override\n   public String toString() {\n-    return \"FeatureInfo [matchMap=\" + matchMap + \", simpleFeatureList=\" + simpleFeatureList\n-        + \", combineFeatures=\" + combineFeatures + \", simpleFeatureNames=\"\n-        + Arrays.toString(simpleFeatureNames) + \", simpleFeatureIndexes=\"\n-        + Arrays.toString(simpleFeatureIndexes) + \", combineFeatureNames=\"\n-        + Arrays.toString(combineFeatureNames) + \", combineFeatureIndexes=\"\n-        + Arrays.toString(combineFeatureIndexes) + \"]\";\n+    return \"FeatureInfo [matchMap=\" + matchMap + \", simpleFeatureList=\" + simpleFeatureList + \", combineFeatures=\" + combineFeatures + \", simpleFeatureNames=\" + Arrays.toString(simpleFeatureNames) + \", simpleFeatureIndexes=\" + Arrays.toString(simpleFeatureIndexes) + \", combineFeatureNames=\" + Arrays.toString(combineFeatureNames) + \", combineFeatureIndexes=\" + Arrays.toString(combineFeatureIndexes) + \"]\";\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}