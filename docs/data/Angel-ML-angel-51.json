{
    "project_name": "Angel-ML-angel",
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Override\n  public int getColNum() {\n    throw new UnsupportedOperationException(\"Unsupportted operation, please use getColumnNum instead\");\n  }\n\n  public long getColumnNum(){",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/51/LongKeyDoubleMatrix.java\nindex 17c344878d3..6875bf928e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/51/LongKeyDoubleMatrix.java\n@@ -6,11 +6,14 @@ import com.tencent.angel.ml.math.vector.LongKeyDoubleVector;\n  * Base class of double matrix with long key row vector.\n  */\n public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n-  /** Dimension of row vector */\n+  /**\n+   * Dimension of row vector\n+   */\n   protected final long columnNum;\n \n   /**\n    * Create a LongKeyDoubleMatrix\n+   *\n    * @param row row number\n    * @param col row vector dimension\n    */\n@@ -21,10 +24,11 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n \n   @Override\n   public int getColNum() {\n-    throw new UnsupportedOperationException(\"Unsupportted operation, please use getColumnNum instead\");\n+    throw new UnsupportedOperationException(\n+        \"Unsupportted operation, please use getColumnNum instead\");\n   }\n \n-  public long getColumnNum(){\n+  public long getColumnNum() {\n     return columnNum;\n   }\n \n@@ -33,14 +37,14 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    *\n    * @param rowIndex the row index\n    * @param colIndex the column index\n-   * @param value the value update value\n+   * @param value    the value update value\n    * @return this\n    */\n-  public LongKeyDoubleMatrix plusBy(int rowIndex, long colIndex, double value){\n+  public LongKeyDoubleMatrix plusBy(int rowIndex, long colIndex, double value) {\n     if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n-    ((LongKeyDoubleVector)vectors[rowIndex]).plusBy(colIndex, value);\n+    ((LongKeyDoubleVector) vectors[rowIndex]).plusBy(colIndex, value);\n     return this;\n   }\n \n@@ -49,16 +53,16 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    *\n    * @param rowIndexes the row ids\n    * @param colIndexes the col ids\n-   * @param values the values\n+   * @param values     the values\n    * @return this\n    */\n   public LongKeyDoubleMatrix plusBy(int[] rowIndexes, long[] colIndexes, double[] values) {\n     assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n-      if(vectors[rowIndexes[i]] == null) {\n+    for (int i = 0; i < rowIndexes.length; i++) {\n+      if (vectors[rowIndexes[i]] == null) {\n         vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n       }\n-      ((LongKeyDoubleVector)vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n+      ((LongKeyDoubleVector) vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n   }\n@@ -66,19 +70,19 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n   /**\n    * Increases specified row by values.\n    *\n-   * @param rowIndex the row id\n+   * @param rowIndex   the row id\n    * @param colIndexes the col ids\n-   * @param values the values\n+   * @param values     the values\n    * @return this\n    */\n   public LongKeyDoubleMatrix plusBy(int rowIndex, long[] colIndexes, double[] values) {\n     assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n+    if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n-      ((LongKeyDoubleVector)vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n+    for (int i = 0; i < colIndexes.length; i++) {\n+      ((LongKeyDoubleVector) vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n   }\n@@ -91,9 +95,9 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @return the value\n    */\n   public double get(int rowIndex, long colIndex) {\n-    if(vectors[rowIndex] == null) {\n+    if (vectors[rowIndex] == null) {\n       return 0.0;\n     }\n-    return ((LongKeyDoubleVector)vectors[rowIndex]).get(colIndex);\n+    return ((LongKeyDoubleVector) vectors[rowIndex]).get(colIndex);\n   }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/51/LongKeyDoubleMatrix.java\nindex 17c344878d3..cdaff75e050 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/51/LongKeyDoubleMatrix.java\n@@ -24,7 +24,7 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n     throw new UnsupportedOperationException(\"Unsupportted operation, please use getColumnNum instead\");\n   }\n \n-  public long getColumnNum(){\n+  public long getColumnNum() {\n     return columnNum;\n   }\n \n@@ -36,7 +36,7 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @param value the value update value\n    * @return this\n    */\n-  public LongKeyDoubleMatrix plusBy(int rowIndex, long colIndex, double value){\n+  public LongKeyDoubleMatrix plusBy(int rowIndex, long colIndex, double value) {\n     if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n@@ -53,8 +53,8 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @return this\n    */\n   public LongKeyDoubleMatrix plusBy(int[] rowIndexes, long[] colIndexes, double[] values) {\n-    assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n+    assert((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n+    for (int i = 0; i < rowIndexes.length; i++) {\n       if(vectors[rowIndexes[i]] == null) {\n         vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n       }\n@@ -72,12 +72,12 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @return this\n    */\n   public LongKeyDoubleMatrix plusBy(int rowIndex, long[] colIndexes, double[] values) {\n-    assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n+    assert(colIndexes.length == values.length);\n+    if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n+    for (int i = 0; i < colIndexes.length; i++) {\n       ((LongKeyDoubleVector)vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n@@ -96,4 +96,4 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n     }\n     return ((LongKeyDoubleVector)vectors[rowIndex]).get(colIndex);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/51/LongKeyDoubleMatrix.java\nindex 17c344878d3..2a62d75f423 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/51/LongKeyDoubleMatrix.java\n@@ -5,8 +5,10 @@ import com.tencent.angel.ml.math.vector.LongKeyDoubleVector;\n /**\n  * Base class of double matrix with long key row vector.\n  */\n+\n public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n   /** Dimension of row vector */\n+\n   protected final long columnNum;\n \n   /**\n@@ -14,6 +16,7 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @param row row number\n    * @param col row vector dimension\n    */\n+\n   public LongKeyDoubleMatrix(int row, long col) {\n     super(row, -1);\n     this.columnNum = col;\n@@ -24,7 +27,7 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n     throw new UnsupportedOperationException(\"Unsupportted operation, please use getColumnNum instead\");\n   }\n \n-  public long getColumnNum(){\n+  public long getColumnNum() {\n     return columnNum;\n   }\n \n@@ -36,11 +39,12 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @param value the value update value\n    * @return this\n    */\n-  public LongKeyDoubleMatrix plusBy(int rowIndex, long colIndex, double value){\n+\n+  public LongKeyDoubleMatrix plusBy(int rowIndex, long colIndex, double value) {\n     if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n-    ((LongKeyDoubleVector)vectors[rowIndex]).plusBy(colIndex, value);\n+    ((LongKeyDoubleVector) vectors[rowIndex]).plusBy(colIndex, value);\n     return this;\n   }\n \n@@ -52,13 +56,14 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @param values the values\n    * @return this\n    */\n+\n   public LongKeyDoubleMatrix plusBy(int[] rowIndexes, long[] colIndexes, double[] values) {\n     assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n-      if(vectors[rowIndexes[i]] == null) {\n+    for (int i = 0; i < rowIndexes.length; i++) {\n+      if (vectors[rowIndexes[i]] == null) {\n         vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n       }\n-      ((LongKeyDoubleVector)vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n+      ((LongKeyDoubleVector) vectors[rowIndexes[i]]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n   }\n@@ -71,14 +76,15 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @param values the values\n    * @return this\n    */\n+\n   public LongKeyDoubleMatrix plusBy(int rowIndex, long[] colIndexes, double[] values) {\n     assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n+    if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n-      ((LongKeyDoubleVector)vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n+    for (int i = 0; i < colIndexes.length; i++) {\n+      ((LongKeyDoubleVector) vectors[rowIndex]).plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n   }\n@@ -90,10 +96,11 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n    * @param colIndex the column index\n    * @return the value\n    */\n+\n   public double get(int rowIndex, long colIndex) {\n-    if(vectors[rowIndex] == null) {\n+    if (vectors[rowIndex] == null) {\n       return 0.0;\n     }\n-    return ((LongKeyDoubleVector)vectors[rowIndex]).get(colIndex);\n+    return ((LongKeyDoubleVector) vectors[rowIndex]).get(colIndex);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "24",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/51/LongKeyDoubleMatrix.java\nindex 17c344878d3..4cead763d35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/51/LongKeyDoubleMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/51/LongKeyDoubleMatrix.java\n@@ -21,10 +21,7 @@ public abstract class LongKeyDoubleMatrix extends RowbaseMatrix {\n \n   @Override\n   public int getColNum() {\n-    throw new UnsupportedOperationException(\"Unsupportted operation, please use getColumnNum instead\");\n-  }\n-\n-  public long getColumnNum(){\n+    throw newUnsupportedOperationException ( \"Unsupportted operation, please use getColumnNum instead\") ; }public public long getColumnNum(){\n     return columnNum;\n   }\n \n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}