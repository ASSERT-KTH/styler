{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1922",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1922/UserScriptClassWhiteList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1922/UserScriptClassWhiteList.java\nindex d9fe68d6ffb..8d55c07a18c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1922/UserScriptClassWhiteList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1922/UserScriptClassWhiteList.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.scripting;\n \n import java.util.HashSet;\n@@ -35,14 +36,14 @@ import org.neo4j.graphdb.traversal.Evaluation;\n /**\n  * A set of classes that we trust unknown entities to work with. These will be accessible to users that have remote access\n  * to a Neo4j database.\n- *\n+ * <p>\n  * Please make sure that, when you add a class to this whitelist, it does not allow any sort of side effects that could\n  * be dangerous, such as accessing the file system or starting remote connections or threads, unless we clearly know\n  * the effect of it.\n- *\n+ * <p>\n  * Assume that people using these classes will be using a Neo4j database that runs in a co-located environment, and that\n  * the world will burn if someone is able to access a database they are not supposed to have access to.\n- *\n+ * <p>\n  * This White List should not be end-user configurable. If we let end-users set up their own whitelists, then each database\n  * would have it's own \"language\" for extension, which will lead to massive complications in the longer term. Better\n  * to have an authoritative white list that is the same for all databases.\n@@ -50,52 +51,52 @@ import org.neo4j.graphdb.traversal.Evaluation;\n public class UserScriptClassWhiteList\n {\n \n-    private UserScriptClassWhiteList()\n-    {\n-    }\n-\n-    public static Set<String> getWhiteList()\n-    {\n-        HashSet<String> safe = new HashSet<>();\n-\n-        // Core API concepts\n-\n-        safe.add( Path.class.getName() );\n-        safe.add( Node.class.getName() );\n-        safe.add( Relationship.class.getName() );\n-        safe.add( RelationshipType.class.getName() );\n-        // can't list anonymous inner classes, using instance to get name of its class\n-        safe.add( RelationshipType.withName( \"classSource\" ).getClass().getName() );\n-        safe.add( DynamicRelationshipType.class.getName() );\n-        safe.add( Lock.class.getName() );\n-\n-        safe.add( NotFoundException.class.getName() );\n-\n-        // Traversal concepts\n-\n-        safe.add( Direction.class.getName() );\n-        safe.add( Evaluation.class.getName() );\n-\n-        // Java Core API\n-\n-        safe.add( Object.class.getName() );\n-        safe.add( String.class.getName() );\n-        safe.add( Integer.class.getName() );\n-        safe.add( Long.class.getName() );\n-        safe.add( Float.class.getName() );\n-        safe.add( Double.class.getName() );\n-        safe.add( Boolean.class.getName() );\n-\n-        // This is a work-around, since these are not supposed to be publicly available.\n-        // The reason we need to add it here is, most likely, that some methods in the API\n-        // returns these rather than the corresponding interfaces, which means our white list\n-        // checker doesn't know which interface to cast to (since there could be several). Instead\n-        // we allow users direct access to these classes for now.\n-        safe.add( \"org.neo4j.kernel.impl.traversal.StartNodeTraversalBranch\" );\n-        safe.add( \"org.neo4j.kernel.impl.traversal.TraversalBranchImpl\" );\n-        safe.add( \"org.neo4j.kernel.impl.core.NodeProxy\" );\n-\n-        return safe;\n-    }\n+  private UserScriptClassWhiteList()\n+  {\n+  }\n+\n+  public static Set<String> getWhiteList()\n+  {\n+    HashSet<String> safe = new HashSet<>();\n+\n+    // Core API concepts\n+\n+    safe.add(Path.class.getName());\n+    safe.add(Node.class.getName());\n+    safe.add(Relationship.class.getName());\n+    safe.add(RelationshipType.class.getName());\n+    // can't list anonymous inner classes, using instance to get name of its class\n+    safe.add(RelationshipType.withName(\"classSource\").getClass().getName());\n+    safe.add(DynamicRelationshipType.class.getName());\n+    safe.add(Lock.class.getName());\n+\n+    safe.add(NotFoundException.class.getName());\n+\n+    // Traversal concepts\n+\n+    safe.add(Direction.class.getName());\n+    safe.add(Evaluation.class.getName());\n+\n+    // Java Core API\n+\n+    safe.add(Object.class.getName());\n+    safe.add(String.class.getName());\n+    safe.add(Integer.class.getName());\n+    safe.add(Long.class.getName());\n+    safe.add(Float.class.getName());\n+    safe.add(Double.class.getName());\n+    safe.add(Boolean.class.getName());\n+\n+    // This is a work-around, since these are not supposed to be publicly available.\n+    // The reason we need to add it here is, most likely, that some methods in the API\n+    // returns these rather than the corresponding interfaces, which means our white list\n+    // checker doesn't know which interface to cast to (since there could be several). Instead\n+    // we allow users direct access to these classes for now.\n+    safe.add(\"org.neo4j.kernel.impl.traversal.StartNodeTraversalBranch\");\n+    safe.add(\"org.neo4j.kernel.impl.traversal.TraversalBranchImpl\");\n+    safe.add(\"org.neo4j.kernel.impl.core.NodeProxy\");\n+\n+    return safe;\n+  }\n \n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1922/UserScriptClassWhiteList.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1922/UserScriptClassWhiteList.java\nindex d9fe68d6ffb..017abaf1a2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1922/UserScriptClassWhiteList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1922/UserScriptClassWhiteList.java\n@@ -49,7 +49,6 @@ import org.neo4j.graphdb.traversal.Evaluation;\n  */\n public class UserScriptClassWhiteList\n {\n-\n     private UserScriptClassWhiteList()\n     {\n     }\n@@ -68,8 +67,7 @@ public class UserScriptClassWhiteList\n         safe.add( RelationshipType.withName( \"classSource\" ).getClass().getName() );\n         safe.add( DynamicRelationshipType.class.getName() );\n         safe.add( Lock.class.getName() );\n-\n-        safe.add( NotFoundException.class.getName() );\n+safe.add( NotFoundException.class.getName() );\n \n         // Traversal concepts\n \n@@ -94,8 +92,6 @@ public class UserScriptClassWhiteList\n         safe.add( \"org.neo4j.kernel.impl.traversal.StartNodeTraversalBranch\" );\n         safe.add( \"org.neo4j.kernel.impl.traversal.TraversalBranchImpl\" );\n         safe.add( \"org.neo4j.kernel.impl.core.NodeProxy\" );\n-\n-        return safe;\n+return safe;\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}