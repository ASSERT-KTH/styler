{
    "project_name": "wso2-attic-commons",
    "error_id": "523",
    "information": {
        "errors": [
            {
                "line": "47",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n        return predicateBuilder.buildVariableExpression(\"*\");\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/523/InConditionExecutor.java\nindex bc3522ec2b8..7f8e5ebb9f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/523/InConditionExecutor.java\n@@ -44,8 +44,9 @@ public class InConditionExecutor implements ConditionExecutor {\n     }\n \n     @Override\n-    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n-        return predicateBuilder.buildVariableExpression(\"*\");\n+    public PredicateTreeNode constructPredicate(AtomicEvent newEvent,\n+                                       TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n+         return predicateBuilder.buildVariableExpression(\"*\");\n     }\n \n }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/523/InConditionExecutor.java\nindex bc3522ec2b8..0de243b104b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/523/InConditionExecutor.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.executor.conditon;\n \n import org.wso2.siddhi.core.event.AtomicEvent;\n@@ -25,27 +26,28 @@ import org.wso2.siddhi.query.api.definition.TableDefinition;\n \n public class InConditionExecutor implements ConditionExecutor {\n \n-    public ConditionExecutor conditionExecutor;\n-    private EventTable eventTable;\n-\n-    public InConditionExecutor(EventTable eventTable,\n-                               ConditionExecutor conditionExecutor) {\n-        this.eventTable = eventTable;\n-        this.conditionExecutor = conditionExecutor;\n-    }\n-\n-    public boolean execute(AtomicEvent event) {\n-        return eventTable.contains(event, conditionExecutor);\n-    }\n-\n-    @Override\n-    public String constructFilterQuery(AtomicEvent newEvent, int level) {\n-        return \"*\";\n-    }\n-\n-    @Override\n-    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n-        return predicateBuilder.buildVariableExpression(\"*\");\n-    }\n+  public ConditionExecutor conditionExecutor;\n+  private EventTable eventTable;\n+\n+  public InConditionExecutor(EventTable eventTable,\n+                             ConditionExecutor conditionExecutor) {\n+    this.eventTable = eventTable;\n+    this.conditionExecutor = conditionExecutor;\n+  }\n+\n+  public boolean execute(AtomicEvent event) {\n+    return eventTable.contains(event, conditionExecutor);\n+  }\n+\n+  @Override\n+  public String constructFilterQuery(AtomicEvent newEvent, int level) {\n+    return \"*\";\n+  }\n+\n+  @Override\n+  public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition,\n+                                              PredicateBuilder predicateBuilder) {\n+    return predicateBuilder.buildVariableExpression(\"*\");\n+  }\n \n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/523/InConditionExecutor.java\nindex bc3522ec2b8..4bfea8ab7c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/523/InConditionExecutor.java\n@@ -28,9 +28,8 @@ public class InConditionExecutor implements ConditionExecutor {\n     public ConditionExecutor conditionExecutor;\n     private EventTable eventTable;\n \n-    public InConditionExecutor(EventTable eventTable,\n-                               ConditionExecutor conditionExecutor) {\n-        this.eventTable = eventTable;\n+    public InConditionExecutor(EventTable eventTable, ConditionExecutor conditionExecutor) {\n+    this.eventTable = eventTable;\n         this.conditionExecutor = conditionExecutor;\n     }\n \n@@ -48,4 +47,4 @@ public class InConditionExecutor implements ConditionExecutor {\n         return predicateBuilder.buildVariableExpression(\"*\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/523/InConditionExecutor.java\nindex bc3522ec2b8..7f8e5ebb9f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/523/InConditionExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/523/InConditionExecutor.java\n@@ -44,8 +44,9 @@ public class InConditionExecutor implements ConditionExecutor {\n     }\n \n     @Override\n-    public PredicateTreeNode constructPredicate(AtomicEvent newEvent, TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n-        return predicateBuilder.buildVariableExpression(\"*\");\n+    public PredicateTreeNode constructPredicate(AtomicEvent newEvent,\n+                                       TableDefinition tableDefinition, PredicateBuilder predicateBuilder) {\n+         return predicateBuilder.buildVariableExpression(\"*\");\n     }\n \n }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}