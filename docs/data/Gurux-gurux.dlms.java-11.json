{
    "project_name": "Gurux-gurux.dlms.java",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "489",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 81).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        if (getUseLogicalNameReferencing() && list.size() != 1) {\n            throw new IllegalArgumentException(\n                    \"Only one object can send with Event Notification request.\");\n        }\n\n        GXByteBuffer buff = new GXByteBuffer();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "489",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "273",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "306",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "327",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "451",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "457",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/11/GXDLMSNotify.java\nindex b5f8096fb97..abd30a3b0f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/11/GXDLMSNotify.java\n@@ -54,7 +54,7 @@ import gurux.dlms.objects.GXDLMSPushSetup;\n \n /**\n  * This class is used to send data notify and push messages to the clients.\n- * \n+ *\n  * @author Gurux Ltd.\n  */\n public class GXDLMSNotify {\n@@ -66,19 +66,15 @@ public class GXDLMSNotify {\n \n     /**\n      * Constructor.\n-     * \n-     * @param useLogicalNameReferencing\n-     *            Is Logical Name referencing used.\n-     * @param clientAddress\n-     *            Server address.\n-     * @param serverAddress\n-     *            Client address.\n-     * @param interfaceType\n-     *            Object type.\n+     *\n+     * @param useLogicalNameReferencing Is Logical Name referencing used.\n+     * @param clientAddress             Server address.\n+     * @param serverAddress             Client address.\n+     * @param interfaceType             Object type.\n      */\n     public GXDLMSNotify(final boolean useLogicalNameReferencing,\n-            final int clientAddress, final int serverAddress,\n-            final InterfaceType interfaceType) {\n+                        final int clientAddress, final int serverAddress,\n+                        final InterfaceType interfaceType) {\n         setUseLogicalNameReferencing(useLogicalNameReferencing);\n         settings.setClientAddress(clientAddress);\n         settings.setServerAddress(serverAddress);\n@@ -87,7 +83,7 @@ public class GXDLMSNotify {\n \n     /**\n      * What kind of services are used.\n-     * \n+     *\n      * @return Functionality.\n      */\n     public final java.util.Set<Conformance> getConformance() {\n@@ -95,16 +91,14 @@ public class GXDLMSNotify {\n     }\n \n     /**\n-     * @param value\n-     *            What kind of services are used.\n+     * @param value What kind of services are used.\n      */\n     public final void setConformance(final java.util.Set<Conformance> value) {\n         settings.setNegotiatedConformance(value);\n     }\n \n     /**\n-     * @param value\n-     *            Cipher interface that is used to cipher PDU.\n+     * @param value Cipher interface that is used to cipher PDU.\n      */\n     protected final void setCipher(final GXICipher value) {\n         settings.setCipher(value);\n@@ -128,19 +122,18 @@ public class GXDLMSNotify {\n      * Retrieves the maximum size of received PDU. PDU size tells maximum size\n      * of PDU packet. Value can be from 0 to 0xFFFF. By default the value is\n      * 0xFFFF.\n-     * \n+     *\n+     * @return Maximum size of received PDU.\n      * @see GXDLMSClient#getClientAddress\n      * @see GXDLMSClient#getServerAddress\n      * @see GXDLMSClient#getUseLogicalNameReferencing\n-     * @return Maximum size of received PDU.\n      */\n     public final int getMaxReceivePDUSize() {\n         return settings.getMaxPduSize();\n     }\n \n     /**\n-     * @param value\n-     *            Maximum size of received PDU.\n+     * @param value Maximum size of received PDU.\n      */\n     public final void setMaxReceivePDUSize(final int value) {\n         settings.setMaxPduSize(value);\n@@ -152,7 +145,7 @@ public class GXDLMSNotify {\n      * supports only either Logical or Short name referencing. The referencing\n      * is defined by the device manufacturer. If the referencing is wrong, the\n      * SNMR message will fail.\n-     * \n+     *\n      * @return Is Logical Name referencing used.\n      */\n     public final boolean getUseLogicalNameReferencing() {\n@@ -160,8 +153,7 @@ public class GXDLMSNotify {\n     }\n \n     /**\n-     * @param value\n-     *            Is Logical Name referencing used.\n+     * @param value Is Logical Name referencing used.\n      */\n     public final void setUseLogicalNameReferencing(final boolean value) {\n         settings.setUseLogicalNameReferencing(value);\n@@ -175,8 +167,7 @@ public class GXDLMSNotify {\n     }\n \n     /**\n-     * @param value\n-     *            Used Priority.\n+     * @param value Used Priority.\n      */\n     public final void setPriority(final Priority value) {\n         settings.setPriority(value);\n@@ -190,8 +181,7 @@ public class GXDLMSNotify {\n     }\n \n     /**\n-     * @param value\n-     *            Used service class.\n+     * @param value Used service class.\n      */\n     public final void setServiceClass(final ServiceClass value) {\n         settings.setServiceClass(value);\n@@ -205,8 +195,7 @@ public class GXDLMSNotify {\n     }\n \n     /**\n-     * @param value\n-     *            Invoke ID.\n+     * @param value Invoke ID.\n      */\n     public final void setInvokeID(final byte value) {\n         settings.setInvokeID(value);\n@@ -214,15 +203,13 @@ public class GXDLMSNotify {\n \n     /**\n      * Removes the HDLC frame from the packet, and returns COSEM data only.\n-     * \n-     * @param reply\n-     *            The received data from the device.\n-     * @param data\n-     *            Information from the received data.\n+     *\n+     * @param reply The received data from the device.\n+     * @param data  Information from the received data.\n      * @return Is frame complete.\n      */\n     public final boolean getData(final GXByteBuffer reply,\n-            final GXReplyData data) {\n+                                 final GXReplyData data) {\n         return GXDLMS.getData(settings, reply, data);\n     }\n \n@@ -231,16 +218,13 @@ public class GXDLMSNotify {\n      * GetDataNotificationMessage -method. DLMS specification do not specify the\n      * structure of Data-Notification body. So each manufacture can sent\n      * different data.\n-     * \n-     * @param obj\n-     *            COSEM object.\n-     * @param index\n-     *            Attribute index.\n-     * @param buff\n-     *            Byte buffer.\n+     *\n+     * @param obj   COSEM object.\n+     * @param index Attribute index.\n+     * @param buff  Byte buffer.\n      */\n     public final void addData(final GXDLMSObject obj, final int index,\n-            final GXByteBuffer buff) {\n+                              final GXByteBuffer buff) {\n         DataType dt;\n         ValueEventArgs e = new ValueEventArgs(settings, obj, index, 0, null);\n         Object value = obj.getValue(settings, e);\n@@ -256,44 +240,37 @@ public class GXDLMSNotify {\n      * GetDataNotificationMessage -method. DLMS specification do not specify the\n      * structure of Data-Notification body. So each manufacture can sent\n      * different data.\n-     * \n-     * @param value\n-     *            Added value.\n-     * @param type\n-     *            Value data type.\n-     * @param buff\n-     *            Byte buffer.\n+     *\n+     * @param value Added value.\n+     * @param type  Value data type.\n+     * @param buff  Byte buffer.\n      */\n     public final void addData(final Object value, final DataType type,\n-            final GXByteBuffer buff) {\n+                              final GXByteBuffer buff) {\n         GXCommon.setData(buff, type, value);\n     }\n \n     /**\n      * Generates data notification message.\n-     * \n-     * @param time\n-     *            Date time. Set to null or Date(0) if not used\n-     * @param data\n-     *            Notification body.\n+     *\n+     * @param time Date time. Set to null or Date(0) if not used\n+     * @param data Notification body.\n      * @return Generated data notification message(s).\n      */\n     public final byte[][] generateDataNotificationMessages(final Date time,\n-            final byte[] data) {\n+                                                           final byte[] data) {\n         return generateDataNotificationMessages(time, new GXByteBuffer(data));\n     }\n \n     /**\n      * Generates data notification message.\n-     * \n-     * @param time\n-     *            Date time. Set Date(0) if not added.\n-     * @param data\n-     *            Notification body.\n+     *\n+     * @param time Date time. Set Date(0) if not added.\n+     * @param data Notification body.\n      * @return Generated data notification message(s).\n      */\n     public final byte[][] generateDataNotificationMessages(final Date time,\n-            final GXByteBuffer data) {\n+                                                           final GXByteBuffer data) {\n         List<byte[]> reply;\n         if (getUseLogicalNameReferencing()) {\n             GXDLMSLNParameters p = new GXDLMSLNParameters(settings, 0,\n@@ -320,15 +297,13 @@ public class GXDLMSNotify {\n \n     /**\n      * Generates data notification message.\n-     * \n-     * @param date\n-     *            Date time. Set To null if not added.\n-     * @param objects\n-     *            List of objects and attribute indexes to notify.\n+     *\n+     * @param date    Date time. Set To null if not added.\n+     * @param objects List of objects and attribute indexes to notify.\n      * @return Generated data notification message(s).\n      */\n     public final byte[][] generateDataNotificationMessages(final Date date,\n-            final List<Entry<GXDLMSObject, Integer>> objects) {\n+                                                           final List<Entry<GXDLMSObject, Integer>> objects) {\n         if (objects == null) {\n             throw new IllegalArgumentException(\"objects\");\n         }\n@@ -343,15 +318,13 @@ public class GXDLMSNotify {\n \n     /**\n      * Generates push setup message.\n-     * \n-     * @param date\n-     *            Date time. Set to null or Date(0) if not used.\n-     * @param push\n-     *            Target Push object.\n+     *\n+     * @param date Date time. Set to null or Date(0) if not used.\n+     * @param push Target Push object.\n      * @return Generated data notification message(s).\n      */\n     public final byte[][] generatePushSetupMessages(final Date date,\n-            final GXDLMSPushSetup push) {\n+                                                    final GXDLMSPushSetup push) {\n         if (push == null) {\n             throw new IllegalArgumentException(\"push\");\n         }\n@@ -368,13 +341,12 @@ public class GXDLMSNotify {\n     /**\n      * Returns collection of push objects. If this method is used Push object\n      * must be set for first object on push object list.\n-     * \n-     * @param data\n-     *            Received value.\n+     *\n+     * @param data Received value.\n      * @return Array of objects and called indexes.\n      */\n     public final List<Entry<GXDLMSObject, Integer>>\n-            parsePush(final Object[] data) {\n+    parsePush(final Object[] data) {\n         GXDLMSObject obj;\n         int index;\n         DataType dt;\n@@ -433,11 +405,9 @@ public class GXDLMSNotify {\n \n     /**\n      * Returns collection of push objects.\n-     * \n-     * @param objects\n-     *            Array of objects and called indexes.\n-     * @param data\n-     *            Received data.\n+     *\n+     * @param objects Array of objects and called indexes.\n+     * @param data    Received data.\n      */\n     public final void parsePush(\n             final List<Entry<GXDLMSObject, Integer>> objects,\n@@ -472,15 +442,13 @@ public class GXDLMSNotify {\n \n     /**\n      * Sends Event Notification or Information Report Request.\n-     * \n-     * @param time\n-     *            Send time.\n-     * @param list\n-     *            List of COSEM object and attribute index to report.\n+     *\n+     * @param time Send time.\n+     * @param list List of COSEM object and attribute index to report.\n      * @return Report request as byte array.\n      */\n     public byte[][] generateReport(final GXDateTime time,\n-            final List<Entry<GXDLMSObject, Integer>> list) {\n+                                   final List<Entry<GXDLMSObject, Integer>> list) {\n         if (list == null || list.size() == 0) {\n             throw new IllegalArgumentException(\"list\");\n         }\n",
            "diff_size": 92
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "489",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/naturalize/11/GXDLMSNotify.java\nindex b5f8096fb97..853577b0282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/naturalize/11/GXDLMSNotify.java\n@@ -521,4 +521,4 @@ public class GXDLMSNotify {\n         }\n         return reply.toArray(new byte[0][0]);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "275",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "316",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "331",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "349",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "368",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "393",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "401",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "403",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "419",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "424",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "432",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "434",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 90).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "439",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "441",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "455",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "459",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "477",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "500",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "518",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "533",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "543",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/11/GXDLMSNotify.java\nindex b5f8096fb97..f45a167d7f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/11/GXDLMSNotify.java\n@@ -38,7 +38,6 @@ import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n import java.util.Map.Entry;\n-\n import gurux.dlms.enums.Command;\n import gurux.dlms.enums.Conformance;\n import gurux.dlms.enums.DataType;\n@@ -57,6 +56,7 @@ import gurux.dlms.objects.GXDLMSPushSetup;\n  * \n  * @author Gurux Ltd.\n  */\n+\n public class GXDLMSNotify {\n \n     /**\n@@ -76,9 +76,9 @@ public class GXDLMSNotify {\n      * @param interfaceType\n      *            Object type.\n      */\n-    public GXDLMSNotify(final boolean useLogicalNameReferencing,\n-            final int clientAddress, final int serverAddress,\n-            final InterfaceType interfaceType) {\n+\n+\n+    public GXDLMSNotify(final boolean useLogicalNameReferencing, final int clientAddress, final int serverAddress, final InterfaceType interfaceType) {\n         setUseLogicalNameReferencing(useLogicalNameReferencing);\n         settings.setClientAddress(clientAddress);\n         settings.setServerAddress(serverAddress);\n@@ -90,6 +90,8 @@ public class GXDLMSNotify {\n      * \n      * @return Functionality.\n      */\n+\n+\n     public final java.util.Set<Conformance> getConformance() {\n         return settings.getNegotiatedConformance();\n     }\n@@ -98,6 +100,8 @@ public class GXDLMSNotify {\n      * @param value\n      *            What kind of services are used.\n      */\n+\n+\n     public final void setConformance(final java.util.Set<Conformance> value) {\n         settings.setNegotiatedConformance(value);\n     }\n@@ -106,6 +110,8 @@ public class GXDLMSNotify {\n      * @param value\n      *            Cipher interface that is used to cipher PDU.\n      */\n+\n+\n     protected final void setCipher(final GXICipher value) {\n         settings.setCipher(value);\n     }\n@@ -113,6 +119,8 @@ public class GXDLMSNotify {\n     /**\n      * @return Get list of meter's objects.\n      */\n+\n+\n     public final GXDLMSObjectCollection getObjects() {\n         return settings.getObjects();\n     }\n@@ -120,6 +128,8 @@ public class GXDLMSNotify {\n     /**\n      * @return Information from the connection size that server can handle.\n      */\n+\n+\n     public final GXDLMSLimits getLimits() {\n         return settings.getLimits();\n     }\n@@ -134,6 +144,8 @@ public class GXDLMSNotify {\n      * @see GXDLMSClient#getUseLogicalNameReferencing\n      * @return Maximum size of received PDU.\n      */\n+\n+\n     public final int getMaxReceivePDUSize() {\n         return settings.getMaxPduSize();\n     }\n@@ -142,6 +154,8 @@ public class GXDLMSNotify {\n      * @param value\n      *            Maximum size of received PDU.\n      */\n+\n+\n     public final void setMaxReceivePDUSize(final int value) {\n         settings.setMaxPduSize(value);\n     }\n@@ -155,6 +169,8 @@ public class GXDLMSNotify {\n      * \n      * @return Is Logical Name referencing used.\n      */\n+\n+\n     public final boolean getUseLogicalNameReferencing() {\n         return settings.getUseLogicalNameReferencing();\n     }\n@@ -163,6 +179,8 @@ public class GXDLMSNotify {\n      * @param value\n      *            Is Logical Name referencing used.\n      */\n+\n+\n     public final void setUseLogicalNameReferencing(final boolean value) {\n         settings.setUseLogicalNameReferencing(value);\n     }\n@@ -170,6 +188,8 @@ public class GXDLMSNotify {\n     /**\n      * @return Used Priority.\n      */\n+\n+\n     public final Priority getPriority() {\n         return settings.getPriority();\n     }\n@@ -178,6 +198,8 @@ public class GXDLMSNotify {\n      * @param value\n      *            Used Priority.\n      */\n+\n+\n     public final void setPriority(final Priority value) {\n         settings.setPriority(value);\n     }\n@@ -185,6 +207,8 @@ public class GXDLMSNotify {\n     /**\n      * @return Used service class.\n      */\n+\n+\n     public final ServiceClass getServiceClass() {\n         return settings.getServiceClass();\n     }\n@@ -193,6 +217,8 @@ public class GXDLMSNotify {\n      * @param value\n      *            Used service class.\n      */\n+\n+\n     public final void setServiceClass(final ServiceClass value) {\n         settings.setServiceClass(value);\n     }\n@@ -200,6 +226,8 @@ public class GXDLMSNotify {\n     /**\n      * @return Invoke ID.\n      */\n+\n+\n     public final int getInvokeID() {\n         return settings.getInvokeID();\n     }\n@@ -208,6 +236,8 @@ public class GXDLMSNotify {\n      * @param value\n      *            Invoke ID.\n      */\n+\n+\n     public final void setInvokeID(final byte value) {\n         settings.setInvokeID(value);\n     }\n@@ -221,8 +251,9 @@ public class GXDLMSNotify {\n      *            Information from the received data.\n      * @return Is frame complete.\n      */\n-    public final boolean getData(final GXByteBuffer reply,\n-            final GXReplyData data) {\n+\n+\n+    public final boolean getData(final GXByteBuffer reply, final GXReplyData data) {\n         return GXDLMS.getData(settings, reply, data);\n     }\n \n@@ -239,8 +270,9 @@ public class GXDLMSNotify {\n      * @param buff\n      *            Byte buffer.\n      */\n-    public final void addData(final GXDLMSObject obj, final int index,\n-            final GXByteBuffer buff) {\n+\n+\n+    public final void addData(final GXDLMSObject obj, final int index, final GXByteBuffer buff) {\n         DataType dt;\n         ValueEventArgs e = new ValueEventArgs(settings, obj, index, 0, null);\n         Object value = obj.getValue(settings, e);\n@@ -264,8 +296,9 @@ public class GXDLMSNotify {\n      * @param buff\n      *            Byte buffer.\n      */\n-    public final void addData(final Object value, final DataType type,\n-            final GXByteBuffer buff) {\n+\n+\n+    public final void addData(final Object value, final DataType type, final GXByteBuffer buff) {\n         GXCommon.setData(buff, type, value);\n     }\n \n@@ -278,8 +311,9 @@ public class GXDLMSNotify {\n      *            Notification body.\n      * @return Generated data notification message(s).\n      */\n-    public final byte[][] generateDataNotificationMessages(final Date time,\n-            final byte[] data) {\n+\n+\n+    public final byte[][] generateDataNotificationMessages(final Date time, final byte[] data) {\n         return generateDataNotificationMessages(time, new GXByteBuffer(data));\n     }\n \n@@ -292,12 +326,14 @@ public class GXDLMSNotify {\n      *            Notification body.\n      * @return Generated data notification message(s).\n      */\n-    public final byte[][] generateDataNotificationMessages(final Date time,\n-            final GXByteBuffer data) {\n+\n+\n+    public final byte[][] generateDataNotificationMessages(final Date time, final GXByteBuffer data) {\n         List<byte[]> reply;\n         if (getUseLogicalNameReferencing()) {\n             GXDLMSLNParameters p = new GXDLMSLNParameters(settings, 0,\n-                    Command.DATA_NOTIFICATION, 0, null, data, 0xff);\n+Command.DATA_NOTIFICATION, 0, null,\n+data, 0xff);\n             if (time == null) {\n                 p.setTime(null);\n             } else {\n@@ -306,14 +342,14 @@ public class GXDLMSNotify {\n             reply = GXDLMS.getLnMessages(p);\n         } else {\n             GXDLMSSNParameters p = new GXDLMSSNParameters(settings,\n-                    Command.DATA_NOTIFICATION, 1, 0, data, null);\n+Command.DATA_NOTIFICATION, 1, 0,\n+data, null);\n             reply = GXDLMS.getSnMessages(p);\n         }\n-        if (!settings.getNegotiatedConformance()\n-                .contains(Conformance.GENERAL_BLOCK_TRANSFER)\n+        if (!settings.getNegotiatedConformance().contains(Conformance.GENERAL_BLOCK_TRANSFER)\n                 && reply.size() != 1) {\n             throw new IllegalArgumentException(\n-                    \"Data is not fit to one PDU. Use general block transfer.\");\n+                \"Data is not fit to one PDU. Use general block transfer.\");\n         }\n         return reply.toArray(new byte[0][0]);\n     }\n@@ -327,10 +363,12 @@ public class GXDLMSNotify {\n      *            List of objects and attribute indexes to notify.\n      * @return Generated data notification message(s).\n      */\n-    public final byte[][] generateDataNotificationMessages(final Date date,\n-            final List<Entry<GXDLMSObject, Integer>> objects) {\n+\n+\n+    public final byte[][] generateDataNotificationMessages(final Date date, final List<Entry<GXDLMSObject, Integer>> objects) {\n         if (objects == null) {\n-            throw new IllegalArgumentException(\"objects\");\n+            throw new IllegalArgumentException(\n+                \"objects\");\n         }\n         GXByteBuffer buff = new GXByteBuffer();\n         buff.setUInt8((byte) DataType.STRUCTURE.getValue());\n@@ -350,17 +388,20 @@ public class GXDLMSNotify {\n      *            Target Push object.\n      * @return Generated data notification message(s).\n      */\n-    public final byte[][] generatePushSetupMessages(final Date date,\n-            final GXDLMSPushSetup push) {\n+\n+\n+    public final byte[][] generatePushSetupMessages(final Date date, final GXDLMSPushSetup push) {\n         if (push == null) {\n-            throw new IllegalArgumentException(\"push\");\n+            throw new IllegalArgumentException(\n+                \"push\");\n         }\n         GXByteBuffer buff = new GXByteBuffer();\n         buff.setUInt8((byte) DataType.STRUCTURE.getValue());\n         GXCommon.setObjectCount(push.getPushObjectList().size(), buff);\n-        for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : push\n-                .getPushObjectList()) {\n-            addData(it.getKey(), it.getValue().getAttributeIndex(), buff);\n+        for (Entry<GXDLMSObject, GXDLMSCaptureObject> it : push.getPushObjectList()) {\n+            addData(it.getKey(),\n+                                                      it.getValue().getAttributeIndex(),\n+                                                      buff);\n         }\n         return generateDataNotificationMessages(date, buff);\n     }\n@@ -373,14 +414,14 @@ public class GXDLMSNotify {\n      *            Received value.\n      * @return Array of objects and called indexes.\n      */\n-    public final List<Entry<GXDLMSObject, Integer>>\n-            parsePush(final Object[] data) {\n+\n+\n+    public final List<Entry<GXDLMSObject, Integer>> parsePush(final Object[] data) {\n         GXDLMSObject obj;\n         int index;\n         DataType dt;\n         Object value;\n-        List<Entry<GXDLMSObject, Integer>> items =\n-                new ArrayList<Entry<GXDLMSObject, Integer>>();\n+        List<Entry<GXDLMSObject, Integer>> items = new ArrayList<Entry<GXDLMSObject, Integer>>();\n         if (data != null) {\n             GXDLMSConverter c = new GXDLMSConverter();\n             for (Object it : (Object[]) data[0]) {\n@@ -388,21 +429,16 @@ public class GXDLMSNotify {\n                 int classID = ((Number) (tmp[0])).intValue() & 0xFFFF;\n                 if (classID > 0) {\n                     GXDLMSObject comp;\n-                    comp = getObjects().findByLN(ObjectType.forValue(classID),\n-                            GXCommon.toLogicalName((byte[]) tmp[1]));\n+                    comp = getObjects().findByLN(ObjectType.forValue(classID), GXCommon.toLogicalName((byte[]) tmp[1]));\n                     if (comp == null) {\n-                        comp = GXDLMSClient.createDLMSObject(classID, 0, 0,\n-                                tmp[1], null);\n+                        comp = GXDLMSClient.createDLMSObject(classID, 0, 0, tmp[1], null);\n                         settings.getObjects().add(comp);\n                         c.updateOBISCodeInformation(comp);\n                     }\n                     if (comp.getClass() != GXDLMSObject.class) {\n-                        items.add(new GXSimpleEntry<GXDLMSObject, Integer>(comp,\n-                                ((Number) tmp[2]).intValue()));\n+                        items.add(new GXSimpleEntry<GXDLMSObject, Integer>(comp, ((Number) tmp[2]).intValue()));\n                     } else {\n-                        System.out.println(\"Unknown object: \"\n-                                + String.valueOf(classID) + \" \"\n-                                + GXCommon.toLogicalName((byte[]) tmp[1]));\n+                        System.out.println(\"Unknown object: \" + String.valueOf(classID) + \" \" + GXCommon.toLogicalName((byte[]) tmp[1]));\n                     }\n                 }\n             }\n@@ -416,14 +452,11 @@ public class GXDLMSNotify {\n                         value = GXDLMSClient.changeType((byte[]) value, dt);\n                     }\n                 }\n-                ValueEventArgs e =\n-                        new ValueEventArgs(settings, obj, index, 0, null);\n+                ValueEventArgs e = new ValueEventArgs(settings, obj, index, 0, null);\n                 e.setValue(value);\n                 obj.setValue(settings, e);\n                 e.setValue(value);\n-\n-                e = new ValueEventArgs(settings, items.get(pos).getKey(),\n-                        items.get(pos).getValue(), 0, null);\n+                e = new ValueEventArgs(settings, items.get(pos).getKey(), items.get(pos).getValue(), 0, null);\n                 e.setValue(data[pos]);\n                 items.get(pos).getKey().setValue(settings, e);\n             }\n@@ -439,18 +472,20 @@ public class GXDLMSNotify {\n      * @param data\n      *            Received data.\n      */\n-    public final void parsePush(\n-            final List<Entry<GXDLMSObject, Integer>> objects,\n-            final Object[] data) {\n+\n+\n+    public final void parsePush(final List<Entry<GXDLMSObject, Integer>> objects, final Object[] data) {\n         GXDLMSObject obj;\n         int index;\n         DataType dt;\n         Object value;\n         if (data == null) {\n-            throw new IllegalArgumentException(\"Invalid push message.\");\n+            throw new IllegalArgumentException(\n+                \"Invalid push message.\");\n         }\n         if (data.length != objects.size()) {\n-            throw new IllegalArgumentException(\"Push arguments do not match.\");\n+            throw new IllegalArgumentException(\n+                \"Push arguments do not match.\");\n         }\n         for (int pos = 0; pos < data.length; ++pos) {\n             obj = (GXDLMSObject) objects.get(pos).getKey();\n@@ -462,8 +497,7 @@ public class GXDLMSNotify {\n                     value = GXDLMSClient.changeType((byte[]) value, dt);\n                 }\n             }\n-            ValueEventArgs e =\n-                    new ValueEventArgs(settings, obj, index, 0, null);\n+            ValueEventArgs e = new ValueEventArgs(settings, obj, index, 0, null);\n             e.setValue(value);\n             obj.setValue(settings, e);\n             e.setValue(value);\n@@ -479,33 +513,34 @@ public class GXDLMSNotify {\n      *            List of COSEM object and attribute index to report.\n      * @return Report request as byte array.\n      */\n-    public byte[][] generateReport(final GXDateTime time,\n-            final List<Entry<GXDLMSObject, Integer>> list) {\n+\n+\n+    public byte[][] generateReport(final GXDateTime time, final List<Entry<GXDLMSObject, Integer>> list) {\n         if (list == null || list.size() == 0) {\n-            throw new IllegalArgumentException(\"list\");\n+            throw new IllegalArgumentException(\n+                \"list\");\n         }\n-        if (getUseLogicalNameReferencing() && list.size() != 1) {\n+        if (getUseLogicalNameReferencing()\n+                && list.size() != 1) {\n             throw new IllegalArgumentException(\n-                    \"Only one object can send with Event Notification request.\");\n+                \"Only one object can send with Event Notification request.\");\n         }\n-\n         GXByteBuffer buff = new GXByteBuffer();\n         List<byte[]> reply;\n         if (getUseLogicalNameReferencing()) {\n             for (Entry<GXDLMSObject, Integer> it : list) {\n                 buff.setUInt16(it.getKey().getObjectType().getValue());\n-                buff.set(GXCommon\n-                        .logicalNameToBytes(it.getKey().getLogicalName()));\n+                buff.set(GXCommon.logicalNameToBytes(it.getKey().getLogicalName()));\n                 buff.setUInt8(it.getValue());\n                 addData(it.getKey(), it.getValue(), buff);\n             }\n             GXDLMSLNParameters p = new GXDLMSLNParameters(settings, 0,\n-                    Command.EVENT_NOTIFICATION, 0, null, buff, 0xff);\n+Command.EVENT_NOTIFICATION, 0, null,\n+buff, 0xff);\n             p.setTime(time);\n             reply = GXDLMS.getLnMessages(p);\n         } else {\n-            GXDLMSSNParameters p = new GXDLMSSNParameters(settings,\n-                    Command.INFORMATION_REPORT, list.size(), 0xFF, null, buff);\n+            GXDLMSSNParameters p = new GXDLMSSNParameters(settings, Command.INFORMATION_REPORT, list.size(), 0xFF, null, buff);\n             for (Entry<GXDLMSObject, Integer> it : list) {\n                 // Add variable type.\n                 buff.setUInt8(VariableAccessSpecification.VARIABLE_NAME);\n@@ -521,4 +556,4 @@ public class GXDLMSNotify {\n         }\n         return reply.toArray(new byte[0][0]);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 115
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "489",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "489",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_three_grams/11/GXDLMSNotify.java\nindex b5f8096fb97..c50412ad944 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/11/GXDLMSNotify.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/styler_three_grams/11/GXDLMSNotify.java\n@@ -487,7 +487,7 @@ public class GXDLMSNotify {\n         if (getUseLogicalNameReferencing() && list.size() != 1) {\n             throw new IllegalArgumentException(\n                     \"Only one object can send with Event Notification request.\");\n-        }\n+                }\n \n         GXByteBuffer buff = new GXByteBuffer();\n         List<byte[]> reply;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}