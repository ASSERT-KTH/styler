{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2896",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2896/Visitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2896/Visitor.java\nindex b8a0d7f4264..51937df8390 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2896/Visitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2896/Visitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers.collection;\n \n import java.lang.reflect.ParameterizedType;\n@@ -25,72 +26,72 @@ import java.lang.reflect.Type;\n /**\n  * A visitor to internalize iteration.\n  *\n- * @param <E> the element type the visitor accepts.\n+ * @param <E>       the element type the visitor accepts.\n  * @param <FAILURE> the type of exception the visitor might throw\n  */\n @FunctionalInterface\n public interface Visitor<E, FAILURE extends Exception>\n {\n+  /**\n+   * Invoked for each element in a collection. Return <code>true</code> to\n+   * terminate the iteration, <code>false</code> to continue.\n+   *\n+   * @param element an element from the collection.\n+   * @return <code>true</code> to terminate the iteration, <code>false</code>\n+   * to continue.\n+   * @throws FAILURE exception thrown by the visitor\n+   */\n+  boolean visit(E element) throws FAILURE;\n+\n+  final class SafeGenerics\n+  {\n     /**\n-     * Invoked for each element in a collection. Return <code>true</code> to\n-     * terminate the iteration, <code>false</code> to continue.\n+     * Useful for determining \"is this an object that can visit the things I can provide?\"\n+     * <p>\n+     * Checks if the passed in object is a {@link Visitor} and if the objects it can\n+     * {@link Visitor#visit(Object) visit} is compatible (super type of) with the provided type. Returns the\n+     * visitor cast to compatible type parameters. If the passed in object is not an instance of {@link Visitor},\n+     * or if it is a {@link Visitor} but one that {@link Visitor#visit(Object) visits} another type of object, this\n+     * method returns {@code null}.\n      *\n-     * @param element an element from the collection.\n-     * @return <code>true</code> to terminate the iteration, <code>false</code>\n-     *         to continue.\n-     * @throws FAILURE exception thrown by the visitor\n+     * @param eType   element type of the visitor\n+     * @param fType   failure type of the visitor\n+     * @param visitor the visitor\n+     * @param <T>     type of the elements\n+     * @param <F>     type of the exception\n+     * @return the visitor cast to compatible type parameters or {@code null}\n      */\n-    boolean visit( E element ) throws FAILURE;\n-\n-    final class SafeGenerics\n+    @SuppressWarnings(\"unchecked\"/*checked through reflection*/)\n+    public static <T, F extends Exception>\n+    Visitor<? super T, ? extends F> castOrNull(Class<T> eType, Class<F> fType, Object visitor)\n     {\n-        /**\n-         * Useful for determining \"is this an object that can visit the things I can provide?\"\n-         *\n-         * Checks if the passed in object is a {@link Visitor} and if the objects it can\n-         * {@link Visitor#visit(Object) visit} is compatible (super type of) with the provided type. Returns the\n-         * visitor cast to compatible type parameters. If the passed in object is not an instance of {@link Visitor},\n-         * or if it is a {@link Visitor} but one that {@link Visitor#visit(Object) visits} another type of object, this\n-         * method returns {@code null}.\n-         *\n-         * @param eType element type of the visitor\n-         * @param fType failure type of the visitor\n-         * @param visitor the visitor\n-         * @param <T> type of the elements\n-         * @param <F> type of the exception\n-         * @return the visitor cast to compatible type parameters or {@code null}\n-         */\n-        @SuppressWarnings( \"unchecked\"/*checked through reflection*/ )\n-        public static <T, F extends Exception>\n-        Visitor<? super T, ? extends F> castOrNull( Class<T> eType, Class<F> fType, Object visitor )\n+      if (visitor instanceof Visitor<?, ?>)\n+      {\n+        for (Type iface : visitor.getClass().getGenericInterfaces())\n         {\n-            if ( visitor instanceof Visitor<?, ?> )\n+          if (iface instanceof ParameterizedType)\n+          {\n+            ParameterizedType paramType = (ParameterizedType) iface;\n+            if (paramType.getRawType() == Visitor.class)\n             {\n-                for ( Type iface : visitor.getClass().getGenericInterfaces() )\n-                {\n-                    if ( iface instanceof ParameterizedType )\n-                    {\n-                        ParameterizedType paramType = (ParameterizedType) iface;\n-                        if ( paramType.getRawType() == Visitor.class )\n-                        {\n-                            Type arg = paramType.getActualTypeArguments()[0];\n-                            if ( arg instanceof ParameterizedType )\n-                            {\n-                                arg = ((ParameterizedType) arg).getRawType();\n-                            }\n-                            if ( (arg instanceof Class<?>) && ((Class<?>) arg).isAssignableFrom( eType ) )\n-                            {\n-                                return (Visitor<? super T, ? extends F>) visitor;\n-                            }\n-                        }\n-                    }\n-                }\n+              Type arg = paramType.getActualTypeArguments()[0];\n+              if (arg instanceof ParameterizedType)\n+              {\n+                arg = ((ParameterizedType) arg).getRawType();\n+              }\n+              if ((arg instanceof Class<?>) && ((Class<?>) arg).isAssignableFrom(eType))\n+              {\n+                return (Visitor<? super T, ? extends F>) visitor;\n+              }\n             }\n-            return null;\n+          }\n         }\n+      }\n+      return null;\n+    }\n \n-        private SafeGenerics()\n-        {\n-        }\n+    private SafeGenerics()\n+    {\n     }\n+  }\n }\n",
            "diff_size": 81
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2896/Visitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2896/Visitor.java\nindex b8a0d7f4264..c4902a582b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2896/Visitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2896/Visitor.java\n@@ -61,8 +61,7 @@ public interface Visitor<E, FAILURE extends Exception>\n          * @return the visitor cast to compatible type parameters or {@code null}\n          */\n         @SuppressWarnings( \"unchecked\"/*checked through reflection*/ )\n-        public static <T, F extends Exception>\n-        Visitor<? super T, ? extends F> castOrNull( Class<T> eType, Class<F> fType, Object visitor )\n+        public static <T, F extends Exception> Visitor<? super T, ? extends F> castOrNull( Class<T> eType, Class<F> fType, Object visitor )\n         {\n             if ( visitor instanceof Visitor<?, ?> )\n             {\n@@ -78,7 +77,8 @@ public interface Visitor<E, FAILURE extends Exception>\n                             {\n                                 arg = ((ParameterizedType) arg).getRawType();\n                             }\n-                            if ( (arg instanceof Class<?>) && ((Class<?>) arg).isAssignableFrom( eType ) )\n+\n+if ( ( arg instanceof Class<?>) && ((Class<?>) arg).isAssignableFrom( eType ) )\n                             {\n                                 return (Visitor<? super T, ? extends F>) visitor;\n                             }\n@@ -93,4 +93,4 @@ public interface Visitor<E, FAILURE extends Exception>\n         {\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}