{
    "project_name": "matsim-org-matsim-episim-libs",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "51",
                "column": "42",
                "severity": "error",
                "message": "Use a single space to separate non-whitespace characters.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
            }
        ]
    },
    "source_code": "\t\tif (remainingFraction != null && (Double.isNaN(remainingFraction) || remainingFraction < 0 || remainingFraction > 1))\n\t\t\tthrow new IllegalArgumentException(\"remainingFraction must be between 0 and 1 but is=\" + remainingFraction);\n\t\tif (exposure != null &&  (Double.isNaN(exposure) || exposure < 0))\n\t\t\tthrow new IllegalArgumentException(\"exposure must be larger than 0 but is=\" + exposure);\n\n\t\tthis.remainingFraction = remainingFraction;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "51",
                    "column": "42",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "243",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "252",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/28/Restriction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/28/Restriction.java\nindex 935e09ba97f..045b561e91b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/28/Restriction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/28/Restriction.java\n@@ -14,230 +14,243 @@ import java.util.Map;\n  */\n public final class Restriction {\n \n-\tprivate static final Logger log = LogManager.getLogger(Restriction.class);\n-\n-\t/**\n-\t * Percentage of activities still performed.\n-\t */\n-\t@Nullable\n-\tprivate Double remainingFraction;\n-\n-\t/**\n-\t * Exposure during this activity.\n-\t */\n-\t@Nullable\n-\tprivate Double exposure;\n-\n-\t/**\n-\t * Persons are required to wear a mask with this or more effective type.\n-\t */\n-\t@Nullable\n-\tprivate FaceMask requireMask;\n-\n-\t/**\n-\t * Compliance rate for masks. Overwrites global parameter if set.\n-\t */\n-\t@Nullable\n-\tprivate Double complianceRate;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tprivate Restriction(@Nullable Double remainingFraction, @Nullable Double exposure,\n-\t\t\t\t\t\t@Nullable FaceMask requireMask, @Nullable Double complianceRate) {\n-\n-\t\tif (remainingFraction != null && (Double.isNaN(remainingFraction) || remainingFraction < 0 || remainingFraction > 1))\n-\t\t\tthrow new IllegalArgumentException(\"remainingFraction must be between 0 and 1 but is=\" + remainingFraction);\n-\t\tif (exposure != null &&  (Double.isNaN(exposure) || exposure < 0))\n-\t\t\tthrow new IllegalArgumentException(\"exposure must be larger than 0 but is=\" + exposure);\n-\n-\t\tthis.remainingFraction = remainingFraction;\n-\t\tthis.exposure = exposure;\n-\t\tthis.requireMask = requireMask;\n-\t\tthis.complianceRate = complianceRate;\n-\t}\n-\n-\t/**\n-\t * Restriction that allows everything.\n-\t */\n-\tpublic static Restriction none() {\n-\t\treturn new Restriction(1d, 1d, FaceMask.NONE, null);\n-\t}\n-\n-\t/**\n-\t * Restriction only reducing the {@link #remainingFraction}.\n-\t */\n-\tpublic static Restriction of(double remainingFraction) {\n-\t\treturn new Restriction(remainingFraction, null, null, null);\n-\t}\n-\n-\t/**\n-\t * See {@link #of(Double, Double, FaceMask)}.\n-\t */\n-\tpublic static Restriction of(double remainingFraction, FaceMask mask) {\n-\t\treturn new Restriction(remainingFraction, null, mask, null);\n-\t}\n-\n-\t/**\n-\t * Instantiate a restriction.\n-\t */\n-\tpublic static Restriction of(Double remainingFraction, Double exposure, FaceMask mask) {\n-\t\treturn new Restriction(remainingFraction, exposure, mask, null);\n-\t}\n-\n-\t/**\n-\t * Creates a restriction with required mask.\n-\t */\n-\tpublic static Restriction ofMask(FaceMask mask) {\n-\t\treturn new Restriction(null, null, mask, null);\n-\t}\n-\n-\t/**\n-\t * Creates a restriction with required mask and compliance rate.\n-\t */\n-\tpublic static Restriction ofMask(FaceMask mask, double complianceRate) {\n-\t\treturn new Restriction(null, null, mask, complianceRate);\n-\t}\n-\n-\t/**\n-\t * Creates a restriction with only exposure set.\n-\t */\n-\tpublic static Restriction ofExposure(double exposure) {\n-\t\treturn new Restriction(null, exposure, null, null);\n-\t}\n-\n-\n-\t/**\n-\t * Creates a restriction from a config entry.\n-\t */\n-\tpublic static Restriction fromConfig(Config config) {\n-\t\treturn new Restriction(\n-\t\t\t\tconfig.getIsNull(\"fraction\") ? null : config.getDouble(\"fraction\"),\n-\t\t\t\tconfig.getIsNull(\"exposure\") ? null : config.getDouble(\"exposure\"),\n-\t\t\t\tconfig.getIsNull(\"mask\") ? null : config.getEnum(FaceMask.class, \"mask\"),\n-\t\t\t\tconfig.getIsNull(\"compliance\") ? null : config.getDouble(\"compliance\")\n-\t\t);\n-\t}\n-\n-\t/**\n-\t * Creates a copy of a restriction.\n-\t */\n-\tstatic Restriction clone(Restriction restriction) {\n-\t\treturn new Restriction(restriction.remainingFraction, restriction.exposure, restriction.requireMask, restriction.complianceRate);\n-\t}\n-\n-\n-\t/**\n-\t * This method is also used to write the restriction to csv.\n-\t */\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn String.format(\"%.2f_%.2f_%s\", remainingFraction, exposure, requireMask);\n-\t}\n-\n-\t/**\n-\t * Set restriction values from other restriction update.\n-\t */\n-\tvoid update(Restriction r) {\n-\t\t// All values may be optional and are only set if present\n-\t\tif (r.getRemainingFraction() != null)\n-\t\t\tsetRemainingFraction(r.getRemainingFraction());\n-\n-\t\tif (r.getExposure() != null)\n-\t\t\tsetExposure(r.getExposure());\n-\n-\t\tif (r.getRequireMask() != null)\n-\t\t\tsetRequireMask(r.getRequireMask());\n-\n-\t\tif (r.getComplianceRate() != null)\n-\t\t\tsetComplianceRate(r.getComplianceRate());\n-\n-\t}\n-\n-\t/**\n-\t * Merges another restrictions into this one. Will fail if any attribute would be overwritten.\n-\t *\n-\t * @see #asMap()\n-\t */\n-\tRestriction merge(Map<String, Object> r) {\n-\n-\t\tDouble otherRf = (Double) r.get(\"fraction\");\n-\t\tDouble otherE = (Double) r.get(\"exposure\");\n-\t\tDouble otherComp = (Double) r.get(\"compliance\");\n-\t\tFaceMask otherMask = r.get(\"mask\") == null ? null : FaceMask.valueOf((String) r.get(\"mask\"));\n-\n-\t\tif (remainingFraction != null && otherRf != null && !remainingFraction.equals(otherRf))\n-\t\t\tlog.warn(\"Duplicated remainingFraction \" + remainingFraction + \" and \" + otherRf);\n-\t\telse if (remainingFraction == null)\n-\t\t\tremainingFraction = otherRf;\n-\n-\t\tif (exposure != null && otherE != null && !exposure.equals(otherE))\n-\t\t\tlog.warn(\"Duplicated exposure \" + exposure + \" and \" + otherE);\n-\t\telse if (exposure == null)\n-\t\t\texposure = otherE;\n-\n-\t\tif (requireMask != null && otherMask != null && requireMask != otherMask)\n-\t\t\tlog.warn(\"Duplicated mask \" + requireMask + \" and \" + otherMask);\n-\t\telse if (requireMask == null)\n-\t\t\trequireMask = otherMask;\n-\n-\t\tif (complianceRate != null && otherComp != null && !complianceRate.equals(otherComp))\n-\t\t\tlog.warn(\"Duplicated complianceRate \" + complianceRate + \" and \" + otherComp);\n-\t\telse if (complianceRate == null)\n-\t\t\tcomplianceRate = otherComp;\n-\n-\t\treturn this;\n-\t}\n-\n-\tpublic Double getRemainingFraction() {\n-\t\treturn remainingFraction;\n-\t}\n-\n-\tvoid setRemainingFraction(double remainingFraction) {\n-\t\tthis.remainingFraction = remainingFraction;\n-\t}\n-\n-\tpublic Double getExposure() {\n-\t\treturn exposure;\n-\t}\n-\n-\tpublic void setExposure(double exposure) {\n-\t\tthis.exposure = exposure;\n-\t}\n-\n-\tpublic FaceMask getRequireMask() {\n-\t\treturn requireMask;\n-\t}\n-\n-\tpublic void setRequireMask(FaceMask requireMask) {\n-\t\tthis.requireMask = requireMask;\n-\t}\n-\n-\t@Nullable\n-\tpublic Double getComplianceRate() {\n-\t\treturn complianceRate;\n-\t}\n-\n-\tvoid setComplianceRate(double complianceRate) {\n-\t\tthis.complianceRate = complianceRate;\n-\t}\n-\n-\tvoid fullShutdown() {\n-\t\tremainingFraction = 0d;\n-\t}\n-\n-\tvoid open() {\n-\t\tremainingFraction = 1d;\n-\t\trequireMask = FaceMask.NONE;\n-\t}\n-\n-\tMap<String, Object> asMap() {\n-\t\tMap<String, Object> map = new HashMap<>();\n-\t\tmap.put(\"fraction\", remainingFraction);\n-\t\tmap.put(\"exposure\", exposure);\n-\t\tmap.put(\"mask\", requireMask != null ? requireMask.name() : null);\n-\t\tmap.put(\"compliance\", complianceRate);\n-\t\treturn map;\n-\t}\n+  private static final Logger log = LogManager.getLogger(Restriction.class);\n+\n+  /**\n+   * Percentage of activities still performed.\n+   */\n+  @Nullable\n+  private Double remainingFraction;\n+\n+  /**\n+   * Exposure during this activity.\n+   */\n+  @Nullable\n+  private Double exposure;\n+\n+  /**\n+   * Persons are required to wear a mask with this or more effective type.\n+   */\n+  @Nullable\n+  private FaceMask requireMask;\n+\n+  /**\n+   * Compliance rate for masks. Overwrites global parameter if set.\n+   */\n+  @Nullable\n+  private Double complianceRate;\n+\n+  /**\n+   * Constructor.\n+   */\n+  private Restriction(@Nullable Double remainingFraction, @Nullable Double exposure,\n+                      @Nullable FaceMask requireMask, @Nullable Double complianceRate) {\n+\n+    if (remainingFraction != null &&\n+        (Double.isNaN(remainingFraction) || remainingFraction < 0 || remainingFraction > 1)) {\n+      throw new IllegalArgumentException(\n+          \"remainingFraction must be between 0 and 1 but is=\" + remainingFraction);\n+    }\n+    if (exposure != null && (Double.isNaN(exposure) || exposure < 0)) {\n+      throw new IllegalArgumentException(\"exposure must be larger than 0 but is=\" + exposure);\n+    }\n+\n+    this.remainingFraction = remainingFraction;\n+    this.exposure = exposure;\n+    this.requireMask = requireMask;\n+    this.complianceRate = complianceRate;\n+  }\n+\n+  /**\n+   * Restriction that allows everything.\n+   */\n+  public static Restriction none() {\n+    return new Restriction(1d, 1d, FaceMask.NONE, null);\n+  }\n+\n+  /**\n+   * Restriction only reducing the {@link #remainingFraction}.\n+   */\n+  public static Restriction of(double remainingFraction) {\n+    return new Restriction(remainingFraction, null, null, null);\n+  }\n+\n+  /**\n+   * See {@link #of(Double, Double, FaceMask)}.\n+   */\n+  public static Restriction of(double remainingFraction, FaceMask mask) {\n+    return new Restriction(remainingFraction, null, mask, null);\n+  }\n+\n+  /**\n+   * Instantiate a restriction.\n+   */\n+  public static Restriction of(Double remainingFraction, Double exposure, FaceMask mask) {\n+    return new Restriction(remainingFraction, exposure, mask, null);\n+  }\n+\n+  /**\n+   * Creates a restriction with required mask.\n+   */\n+  public static Restriction ofMask(FaceMask mask) {\n+    return new Restriction(null, null, mask, null);\n+  }\n+\n+  /**\n+   * Creates a restriction with required mask and compliance rate.\n+   */\n+  public static Restriction ofMask(FaceMask mask, double complianceRate) {\n+    return new Restriction(null, null, mask, complianceRate);\n+  }\n+\n+  /**\n+   * Creates a restriction with only exposure set.\n+   */\n+  public static Restriction ofExposure(double exposure) {\n+    return new Restriction(null, exposure, null, null);\n+  }\n+\n+\n+  /**\n+   * Creates a restriction from a config entry.\n+   */\n+  public static Restriction fromConfig(Config config) {\n+    return new Restriction(\n+        config.getIsNull(\"fraction\") ? null : config.getDouble(\"fraction\"),\n+        config.getIsNull(\"exposure\") ? null : config.getDouble(\"exposure\"),\n+        config.getIsNull(\"mask\") ? null : config.getEnum(FaceMask.class, \"mask\"),\n+        config.getIsNull(\"compliance\") ? null : config.getDouble(\"compliance\")\n+    );\n+  }\n+\n+  /**\n+   * Creates a copy of a restriction.\n+   */\n+  static Restriction clone(Restriction restriction) {\n+    return new Restriction(restriction.remainingFraction, restriction.exposure,\n+        restriction.requireMask, restriction.complianceRate);\n+  }\n+\n+\n+  /**\n+   * This method is also used to write the restriction to csv.\n+   */\n+  @Override\n+  public String toString() {\n+    return String.format(\"%.2f_%.2f_%s\", remainingFraction, exposure, requireMask);\n+  }\n+\n+  /**\n+   * Set restriction values from other restriction update.\n+   */\n+  void update(Restriction r) {\n+    // All values may be optional and are only set if present\n+    if (r.getRemainingFraction() != null) {\n+      setRemainingFraction(r.getRemainingFraction());\n+    }\n+\n+    if (r.getExposure() != null) {\n+      setExposure(r.getExposure());\n+    }\n+\n+    if (r.getRequireMask() != null) {\n+      setRequireMask(r.getRequireMask());\n+    }\n+\n+    if (r.getComplianceRate() != null) {\n+      setComplianceRate(r.getComplianceRate());\n+    }\n+\n+  }\n+\n+  /**\n+   * Merges another restrictions into this one. Will fail if any attribute would be overwritten.\n+   *\n+   * @see #asMap()\n+   */\n+  Restriction merge(Map<String, Object> r) {\n+\n+    Double otherRf = (Double) r.get(\"fraction\");\n+    Double otherE = (Double) r.get(\"exposure\");\n+    Double otherComp = (Double) r.get(\"compliance\");\n+    FaceMask otherMask = r.get(\"mask\") == null ? null : FaceMask.valueOf((String) r.get(\"mask\"));\n+\n+    if (remainingFraction != null && otherRf != null && !remainingFraction.equals(otherRf)) {\n+      log.warn(\"Duplicated remainingFraction \" + remainingFraction + \" and \" + otherRf);\n+    } else if (remainingFraction == null) {\n+      remainingFraction = otherRf;\n+    }\n+\n+    if (exposure != null && otherE != null && !exposure.equals(otherE)) {\n+      log.warn(\"Duplicated exposure \" + exposure + \" and \" + otherE);\n+    } else if (exposure == null) {\n+      exposure = otherE;\n+    }\n+\n+    if (requireMask != null && otherMask != null && requireMask != otherMask) {\n+      log.warn(\"Duplicated mask \" + requireMask + \" and \" + otherMask);\n+    } else if (requireMask == null) {\n+      requireMask = otherMask;\n+    }\n+\n+    if (complianceRate != null && otherComp != null && !complianceRate.equals(otherComp)) {\n+      log.warn(\"Duplicated complianceRate \" + complianceRate + \" and \" + otherComp);\n+    } else if (complianceRate == null) {\n+      complianceRate = otherComp;\n+    }\n+\n+    return this;\n+  }\n+\n+  public Double getRemainingFraction() {\n+    return remainingFraction;\n+  }\n+\n+  void setRemainingFraction(double remainingFraction) {\n+    this.remainingFraction = remainingFraction;\n+  }\n+\n+  public Double getExposure() {\n+    return exposure;\n+  }\n+\n+  public void setExposure(double exposure) {\n+    this.exposure = exposure;\n+  }\n+\n+  public FaceMask getRequireMask() {\n+    return requireMask;\n+  }\n+\n+  public void setRequireMask(FaceMask requireMask) {\n+    this.requireMask = requireMask;\n+  }\n+\n+  @Nullable\n+  public Double getComplianceRate() {\n+    return complianceRate;\n+  }\n+\n+  void setComplianceRate(double complianceRate) {\n+    this.complianceRate = complianceRate;\n+  }\n+\n+  void fullShutdown() {\n+    remainingFraction = 0d;\n+  }\n+\n+  void open() {\n+    remainingFraction = 1d;\n+    requireMask = FaceMask.NONE;\n+  }\n+\n+  Map<String, Object> asMap() {\n+    Map<String, Object> map = new HashMap<>();\n+    map.put(\"fraction\", remainingFraction);\n+    map.put(\"exposure\", exposure);\n+    map.put(\"mask\", requireMask != null ? requireMask.name() : null);\n+    map.put(\"compliance\", complianceRate);\n+    return map;\n+  }\n \n }\n",
            "diff_size": 238
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/28/Restriction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/28/Restriction.java\nindex 935e09ba97f..8a3b522ea5d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/28/Restriction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/28/Restriction.java\n@@ -43,12 +43,10 @@ public final class Restriction {\n \t/**\n \t * Constructor.\n \t */\n-\tprivate Restriction(@Nullable Double remainingFraction, @Nullable Double exposure,\n-\t\t\t\t\t\t@Nullable FaceMask requireMask, @Nullable Double complianceRate) {\n-\n-\t\tif (remainingFraction != null && (Double.isNaN(remainingFraction) || remainingFraction < 0 || remainingFraction > 1))\n+\tprivate Restriction(@Nullable Double remainingFraction, @Nullable Double exposure, @Nullable FaceMask requireMask, @Nullable Double complianceRate) {\n+\tif (remainingFraction != null && (Double.isNaN(remainingFraction) || remainingFraction < 0 || remainingFraction > 1))\n \t\t\tthrow new IllegalArgumentException(\"remainingFraction must be between 0 and 1 but is=\" + remainingFraction);\n-\t\tif (exposure != null &&  (Double.isNaN(exposure) || exposure < 0))\n+\t\tif (exposure != null && (Double.isNaN(exposure) || exposure < 0))\n \t\t\tthrow new IllegalArgumentException(\"exposure must be larger than 0 but is=\" + exposure);\n \n \t\tthis.remainingFraction = remainingFraction;\n@@ -151,7 +149,6 @@ public final class Restriction {\n \n \t\tif (r.getComplianceRate() != null)\n \t\t\tsetComplianceRate(r.getComplianceRate());\n-\n \t}\n \n \t/**\n@@ -240,4 +237,4 @@ public final class Restriction {\n \t\treturn map;\n \t}\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/28/Restriction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/28/Restriction.java\nindex 935e09ba97f..d2ad586fe23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/28/Restriction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/28/Restriction.java\n@@ -4,7 +4,6 @@ import com.typesafe.config.Config;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.matsim.episim.model.FaceMask;\n-\n import javax.annotation.Nullable;\n import java.util.HashMap;\n import java.util.Map;\n@@ -12,232 +11,240 @@ import java.util.Map;\n /**\n  * Represent the current restrictions on an activity type.\n  */\n+\n+\n public final class Restriction {\n \n-\tprivate static final Logger log = LogManager.getLogger(Restriction.class);\n-\n-\t/**\n-\t * Percentage of activities still performed.\n-\t */\n-\t@Nullable\n-\tprivate Double remainingFraction;\n-\n-\t/**\n-\t * Exposure during this activity.\n-\t */\n-\t@Nullable\n-\tprivate Double exposure;\n-\n-\t/**\n-\t * Persons are required to wear a mask with this or more effective type.\n-\t */\n-\t@Nullable\n-\tprivate FaceMask requireMask;\n-\n-\t/**\n-\t * Compliance rate for masks. Overwrites global parameter if set.\n-\t */\n-\t@Nullable\n-\tprivate Double complianceRate;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tprivate Restriction(@Nullable Double remainingFraction, @Nullable Double exposure,\n-\t\t\t\t\t\t@Nullable FaceMask requireMask, @Nullable Double complianceRate) {\n-\n-\t\tif (remainingFraction != null && (Double.isNaN(remainingFraction) || remainingFraction < 0 || remainingFraction > 1))\n-\t\t\tthrow new IllegalArgumentException(\"remainingFraction must be between 0 and 1 but is=\" + remainingFraction);\n-\t\tif (exposure != null &&  (Double.isNaN(exposure) || exposure < 0))\n-\t\t\tthrow new IllegalArgumentException(\"exposure must be larger than 0 but is=\" + exposure);\n-\n-\t\tthis.remainingFraction = remainingFraction;\n-\t\tthis.exposure = exposure;\n-\t\tthis.requireMask = requireMask;\n-\t\tthis.complianceRate = complianceRate;\n-\t}\n-\n-\t/**\n-\t * Restriction that allows everything.\n-\t */\n-\tpublic static Restriction none() {\n-\t\treturn new Restriction(1d, 1d, FaceMask.NONE, null);\n-\t}\n-\n-\t/**\n-\t * Restriction only reducing the {@link #remainingFraction}.\n-\t */\n-\tpublic static Restriction of(double remainingFraction) {\n-\t\treturn new Restriction(remainingFraction, null, null, null);\n-\t}\n-\n-\t/**\n-\t * See {@link #of(Double, Double, FaceMask)}.\n-\t */\n-\tpublic static Restriction of(double remainingFraction, FaceMask mask) {\n-\t\treturn new Restriction(remainingFraction, null, mask, null);\n-\t}\n-\n-\t/**\n-\t * Instantiate a restriction.\n-\t */\n-\tpublic static Restriction of(Double remainingFraction, Double exposure, FaceMask mask) {\n-\t\treturn new Restriction(remainingFraction, exposure, mask, null);\n-\t}\n-\n-\t/**\n-\t * Creates a restriction with required mask.\n-\t */\n-\tpublic static Restriction ofMask(FaceMask mask) {\n-\t\treturn new Restriction(null, null, mask, null);\n-\t}\n-\n-\t/**\n-\t * Creates a restriction with required mask and compliance rate.\n-\t */\n-\tpublic static Restriction ofMask(FaceMask mask, double complianceRate) {\n-\t\treturn new Restriction(null, null, mask, complianceRate);\n-\t}\n-\n-\t/**\n-\t * Creates a restriction with only exposure set.\n-\t */\n-\tpublic static Restriction ofExposure(double exposure) {\n-\t\treturn new Restriction(null, exposure, null, null);\n-\t}\n-\n-\n-\t/**\n-\t * Creates a restriction from a config entry.\n-\t */\n-\tpublic static Restriction fromConfig(Config config) {\n-\t\treturn new Restriction(\n-\t\t\t\tconfig.getIsNull(\"fraction\") ? null : config.getDouble(\"fraction\"),\n-\t\t\t\tconfig.getIsNull(\"exposure\") ? null : config.getDouble(\"exposure\"),\n-\t\t\t\tconfig.getIsNull(\"mask\") ? null : config.getEnum(FaceMask.class, \"mask\"),\n-\t\t\t\tconfig.getIsNull(\"compliance\") ? null : config.getDouble(\"compliance\")\n-\t\t);\n-\t}\n-\n-\t/**\n-\t * Creates a copy of a restriction.\n-\t */\n-\tstatic Restriction clone(Restriction restriction) {\n-\t\treturn new Restriction(restriction.remainingFraction, restriction.exposure, restriction.requireMask, restriction.complianceRate);\n-\t}\n-\n-\n-\t/**\n-\t * This method is also used to write the restriction to csv.\n-\t */\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn String.format(\"%.2f_%.2f_%s\", remainingFraction, exposure, requireMask);\n-\t}\n-\n-\t/**\n-\t * Set restriction values from other restriction update.\n-\t */\n-\tvoid update(Restriction r) {\n-\t\t// All values may be optional and are only set if present\n-\t\tif (r.getRemainingFraction() != null)\n-\t\t\tsetRemainingFraction(r.getRemainingFraction());\n-\n-\t\tif (r.getExposure() != null)\n-\t\t\tsetExposure(r.getExposure());\n-\n-\t\tif (r.getRequireMask() != null)\n-\t\t\tsetRequireMask(r.getRequireMask());\n-\n-\t\tif (r.getComplianceRate() != null)\n-\t\t\tsetComplianceRate(r.getComplianceRate());\n-\n-\t}\n-\n-\t/**\n-\t * Merges another restrictions into this one. Will fail if any attribute would be overwritten.\n-\t *\n-\t * @see #asMap()\n-\t */\n-\tRestriction merge(Map<String, Object> r) {\n-\n-\t\tDouble otherRf = (Double) r.get(\"fraction\");\n-\t\tDouble otherE = (Double) r.get(\"exposure\");\n-\t\tDouble otherComp = (Double) r.get(\"compliance\");\n-\t\tFaceMask otherMask = r.get(\"mask\") == null ? null : FaceMask.valueOf((String) r.get(\"mask\"));\n-\n-\t\tif (remainingFraction != null && otherRf != null && !remainingFraction.equals(otherRf))\n-\t\t\tlog.warn(\"Duplicated remainingFraction \" + remainingFraction + \" and \" + otherRf);\n-\t\telse if (remainingFraction == null)\n-\t\t\tremainingFraction = otherRf;\n-\n-\t\tif (exposure != null && otherE != null && !exposure.equals(otherE))\n-\t\t\tlog.warn(\"Duplicated exposure \" + exposure + \" and \" + otherE);\n-\t\telse if (exposure == null)\n-\t\t\texposure = otherE;\n-\n-\t\tif (requireMask != null && otherMask != null && requireMask != otherMask)\n-\t\t\tlog.warn(\"Duplicated mask \" + requireMask + \" and \" + otherMask);\n-\t\telse if (requireMask == null)\n-\t\t\trequireMask = otherMask;\n-\n-\t\tif (complianceRate != null && otherComp != null && !complianceRate.equals(otherComp))\n-\t\t\tlog.warn(\"Duplicated complianceRate \" + complianceRate + \" and \" + otherComp);\n-\t\telse if (complianceRate == null)\n-\t\t\tcomplianceRate = otherComp;\n-\n-\t\treturn this;\n-\t}\n-\n-\tpublic Double getRemainingFraction() {\n-\t\treturn remainingFraction;\n-\t}\n-\n-\tvoid setRemainingFraction(double remainingFraction) {\n-\t\tthis.remainingFraction = remainingFraction;\n-\t}\n-\n-\tpublic Double getExposure() {\n-\t\treturn exposure;\n-\t}\n-\n-\tpublic void setExposure(double exposure) {\n-\t\tthis.exposure = exposure;\n-\t}\n-\n-\tpublic FaceMask getRequireMask() {\n-\t\treturn requireMask;\n-\t}\n-\n-\tpublic void setRequireMask(FaceMask requireMask) {\n-\t\tthis.requireMask = requireMask;\n-\t}\n-\n-\t@Nullable\n-\tpublic Double getComplianceRate() {\n-\t\treturn complianceRate;\n-\t}\n-\n-\tvoid setComplianceRate(double complianceRate) {\n-\t\tthis.complianceRate = complianceRate;\n-\t}\n-\n-\tvoid fullShutdown() {\n-\t\tremainingFraction = 0d;\n-\t}\n-\n-\tvoid open() {\n-\t\tremainingFraction = 1d;\n-\t\trequireMask = FaceMask.NONE;\n-\t}\n-\n-\tMap<String, Object> asMap() {\n-\t\tMap<String, Object> map = new HashMap<>();\n-\t\tmap.put(\"fraction\", remainingFraction);\n-\t\tmap.put(\"exposure\", exposure);\n-\t\tmap.put(\"mask\", requireMask != null ? requireMask.name() : null);\n-\t\tmap.put(\"compliance\", complianceRate);\n-\t\treturn map;\n-\t}\n-\n-}\n+ private static final Logger log = LogManager.getLogger(Restriction.class);\n+\n+ /**\n+  * Percentage of activities still performed.\n+  */\n+\n+ @Nullable\n+ private Double remainingFraction;\n+\n+ /**\n+  * Exposure during this activity.\n+  */\n+\n+ @Nullable\n+ private Double exposure;\n+\n+ /**\n+  * Persons are required to wear a mask with this or more effective type.\n+  */\n+\n+ @Nullable\n+ private FaceMask requireMask;\n+\n+ /**\n+  * Compliance rate for masks. Overwrites global parameter if set.\n+  */\n+\n+ @Nullable\n+ private Double complianceRate;\n+\n+ /**\n+  * Constructor.\n+  */\n+\n+ private Restriction(@Nullable Double remainingFraction, @Nullable Double exposure, @Nullable FaceMask requireMask, @Nullable Double complianceRate) {\n+  if (remainingFraction != null && (Double.isNaN(remainingFraction) || remainingFraction < 0 || remainingFraction > 1)) throw new IllegalArgumentException(\"remainingFraction must be between 0 and 1 but is=\" + remainingFraction);\n+  if (exposure != null && (Double.isNaN(exposure) || exposure < 0)) throw new IllegalArgumentException(\"exposure must be larger than 0 but is=\" + exposure);\n+  this.remainingFraction = remainingFraction;\n+  this.exposure = exposure;\n+  this.requireMask = requireMask;\n+  this.complianceRate = complianceRate;\n+ }\n+\n+ /**\n+  * Restriction that allows everything.\n+  */\n+\n+\n+ public static Restriction none() {\n+  return new Restriction(1d, 1d, FaceMask.NONE, null);\n+ }\n+\n+ /**\n+  * Restriction only reducing the {@link #remainingFraction}.\n+  */\n+\n+\n+ public static Restriction of(double remainingFraction) {\n+  return new Restriction(remainingFraction, null, null, null);\n+ }\n+\n+ /**\n+  * See {@link #of(Double, Double, FaceMask)}.\n+  */\n+\n+\n+ public static Restriction of(double remainingFraction, FaceMask mask) {\n+  return new Restriction(remainingFraction, null, mask, null);\n+ }\n+\n+ /**\n+  * Instantiate a restriction.\n+  */\n+\n+\n+ public static Restriction of(Double remainingFraction, Double exposure, FaceMask mask) {\n+  return new Restriction(remainingFraction, exposure, mask, null);\n+ }\n+\n+ /**\n+  * Creates a restriction with required mask.\n+  */\n+\n+\n+ public static Restriction ofMask(FaceMask mask) {\n+  return new Restriction(null, null, mask, null);\n+ }\n+\n+ /**\n+  * Creates a restriction with required mask and compliance rate.\n+  */\n+\n+\n+ public static Restriction ofMask(FaceMask mask, double complianceRate) {\n+  return new Restriction(null, null, mask, complianceRate);\n+ }\n+\n+ /**\n+  * Creates a restriction with only exposure set.\n+  */\n+\n+\n+ public static Restriction ofExposure(double exposure) {\n+  return new Restriction(null, exposure, null, null);\n+ }\n+\n+\n+ /**\n+  * Creates a restriction from a config entry.\n+  */\n+\n+\n+ public static Restriction fromConfig(Config config) {\n+  return new Restriction(config.getIsNull(\"fraction\") ? null : config.getDouble(\"fraction\"), config.getIsNull(\"exposure\") ? null : config.getDouble(\"exposure\"), config.getIsNull(\"mask\") ? null : config.getEnum(FaceMask.class, \"mask\"), config.getIsNull(\"compliance\") ? null : config.getDouble(\"compliance\"));\n+ }\n+\n+ /**\n+  * Creates a copy of a restriction.\n+  */\n+\n+ static Restriction clone(Restriction restriction) {\n+  return new Restriction(restriction.remainingFraction, restriction.exposure, restriction.requireMask, restriction.complianceRate);\n+ }\n+\n+\n+ /**\n+  * This method is also used to write the restriction to csv.\n+  */\n+\n+ @Override\n+ public String toString() {\n+  return String.format(\"%.2f_%.2f_%s\", remainingFraction, exposure, requireMask);\n+ }\n+\n+ /**\n+  * Set restriction values from other restriction update.\n+  */\n+\n+ void update(Restriction r) {\n+  // All values may be optional and are only set if present\n+\n+  if (r.getRemainingFraction() != null)\n+   setRemainingFraction(r.getRemainingFraction());\n+  if (r.getExposure() != null)\n+   setExposure(r.getExposure());\n+  if (r.getRequireMask() != null)\n+   setRequireMask(r.getRequireMask());\n+  if (r.getComplianceRate() != null)\n+   setComplianceRate(r.getComplianceRate());\n+ }\n+\n+ /**\n+  * Merges another restrictions into this one. Will fail if any attribute would be overwritten.\n+  *\n+  * @see #asMap()\n+  */\n+\n+ Restriction merge(Map<String, Object> r) {\n+  Double otherRf = (Double) r.get(\"fraction\");\n+  Double otherE = (Double) r.get(\"exposure\");\n+  Double otherComp = (Double) r.get(\"compliance\");\n+  FaceMask otherMask = r.get(\"mask\") == null ? null : FaceMask.valueOf((String) r.get(\"mask\"));\n+  if (remainingFraction != null && otherRf != null && !remainingFraction.equals(otherRf)) log.warn(\"Duplicated remainingFraction \" + remainingFraction + \" and \" + otherRf);\n+  else if (remainingFraction == null)\n+   remainingFraction = otherRf;\n+  if (exposure != null && otherE != null && !exposure.equals(otherE)) log.warn(\"Duplicated exposure \" + exposure + \" and \" + otherE);\n+  else if (exposure == null)\n+   exposure = otherE;\n+  if (requireMask != null && otherMask != null && requireMask != otherMask) log.warn(\"Duplicated mask \" + requireMask + \" and \" + otherMask);\n+  else if (requireMask == null)\n+   requireMask = otherMask;\n+  if (complianceRate != null && otherComp != null && !complianceRate.equals(otherComp)) log.warn(\"Duplicated complianceRate \" + complianceRate + \" and \" + otherComp);\n+  else if (complianceRate == null)\n+   complianceRate = otherComp;\n+  return this;\n+ }\n+\n+\n+ public Double getRemainingFraction() {\n+  return remainingFraction;\n+ }\n+\n+ void setRemainingFraction(double remainingFraction) {\n+  this.remainingFraction = remainingFraction;\n+ }\n+\n+\n+ public Double getExposure() {\n+  return exposure;\n+ }\n+\n+\n+ public void setExposure(double exposure) {\n+  this.exposure = exposure;\n+ }\n+\n+\n+ public FaceMask getRequireMask() {\n+  return requireMask;\n+ }\n+\n+\n+ public void setRequireMask(FaceMask requireMask) {\n+  this.requireMask = requireMask;\n+ }\n+\n+ @Nullable\n+ public Double getComplianceRate() {\n+  return complianceRate;\n+ }\n+\n+ void setComplianceRate(double complianceRate) {\n+  this.complianceRate = complianceRate;\n+ }\n+\n+ void fullShutdown() {\n+  remainingFraction = 0d;\n+ }\n+\n+ void open() {\n+  remainingFraction = 1d;\n+  requireMask = FaceMask.NONE;\n+ }\n+\n+ Map<String, Object> asMap() {\n+  Map<String, Object> map = new HashMap<>();\n+  map.put(\"fraction\", remainingFraction);\n+  map.put(\"exposure\", exposure);\n+  map.put(\"mask\", requireMask != null ? requireMask.name() : null);\n+  map.put(\"compliance\", complianceRate);\n+  return map;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 236
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "51",
                    "column": "42",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "51",
                    "column": "42",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ]
}