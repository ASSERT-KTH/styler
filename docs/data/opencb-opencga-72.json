{
    "project_name": "opencb-opencga",
    "error_id": "72",
    "information": {
        "errors": [
            {
                "line": "219",
                "column": "47",
                "severity": "error",
                "message": "'(' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private DataResponse<User> changePassword () throws ClientException, IOException {\n        return openCGAClient.getUserClient().changePassword(usersCommandOptions.changePasswordCommandOptions.password,\n                usersCommandOptions.changePasswordCommandOptions.npassword, new ObjectMap());\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/72/UserCommandExecutor.java\nindex 5c7a13f7c37..9dca4a6c31a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/72/UserCommandExecutor.java\n@@ -216,7 +216,7 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, null, params);\n     }\n \n-    private DataResponse<User> changePassword () throws ClientException, IOException {\n+    private DataResponse<User> changePassword() throws ClientException, IOException {\n         return openCGAClient.getUserClient().changePassword(usersCommandOptions.changePasswordCommandOptions.password,\n                 usersCommandOptions.changePasswordCommandOptions.npassword, new ObjectMap());\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/72/UserCommandExecutor.java\nindex 5c7a13f7c37..f3f92a7efde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/72/UserCommandExecutor.java\n@@ -39,186 +39,184 @@ import java.util.stream.Stream;\n  * Created by imedina on 02/03/15.\n  */\n public class UserCommandExecutor extends OpencgaCommandExecutor {\n-    // TODO: Add include/exclude/skip/... (queryOptions) to the client calls !!!!\n+  // TODO: Add include/exclude/skip/... (queryOptions) to the client calls !!!!\n \n-    private UserCommandOptions usersCommandOptions;\n-\n-    public UserCommandExecutor(UserCommandOptions usersCommandOptions) {\n-\n-        super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n-        this.usersCommandOptions = usersCommandOptions;\n-    }\n+  private UserCommandOptions usersCommandOptions;\n \n+  public UserCommandExecutor(UserCommandOptions usersCommandOptions) {\n \n+    super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n+    this.usersCommandOptions = usersCommandOptions;\n+  }\n \n-    @Override\n-    public void execute() throws Exception {\n \n+  @Override\n+  public void execute() throws Exception {\n \n \n-        logger.debug(\"Executing users command line\");\n+    logger.debug(\"Executing users command line\");\n //        openCGAClient = new OpenCGAClient(clientConfiguration);\n \n-        String subCommandString = getParsedSubCommand(usersCommandOptions.getjCommander());\n+    String subCommandString = getParsedSubCommand(usersCommandOptions.getjCommander());\n //        if (!subCommandString.equals(\"login\") && !subCommandString.equals(\"logout\")) {\n //            checkSessionValid();\n //        }\n-        DataResponse queryResponse = null;\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"delete\":\n-                delete();\n-                break;\n-            case \"update\":\n-                queryResponse = update();\n-                break;\n-            case \"password\":\n-                queryResponse = changePassword();\n-                break;\n-            case \"projects\":\n-                queryResponse = projects();\n-                break;\n-            case \"login\":\n-                login();\n-                break;\n-            case \"logout\":\n-                logout();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-        createOutput(queryResponse);\n+    DataResponse queryResponse = null;\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"delete\":\n+        delete();\n+        break;\n+      case \"update\":\n+        queryResponse = update();\n+        break;\n+      case \"password\":\n+        queryResponse = changePassword();\n+        break;\n+      case \"projects\":\n+        queryResponse = projects();\n+        break;\n+      case \"login\":\n+        login();\n+        break;\n+      case \"logout\":\n+        logout();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n-    private void login() throws ClientException, IOException {\n-        logger.debug(\"Login\");\n-\n-        String user = usersCommandOptions.loginCommandOptions.user;\n-        String password = usersCommandOptions.loginCommandOptions.password;\n-\n-        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n-            String sessionId = openCGAClient.login(user, password);\n-            if (StringUtils.isNotEmpty(sessionId)) {\n-                List<String> studies = new ArrayList<>();\n-\n-                DataResponse<Project> projects = openCGAClient.getProjectClient().search(\n-                        new Query(ProjectDBAdaptor.QueryParams.OWNER.key(), user), QueryOptions.empty());\n-\n-                if (projects.getResponses().get(0).getNumResults() == 0) {\n-                    // We try to fetch shared projects and studies instead when the user does not owe any project or study\n-                    projects = openCGAClient.getProjectClient().search(new Query(), QueryOptions.empty());\n-                }\n-                for (Project project : projects.getResponses().get(0).getResults()) {\n-                    for (Study study : project.getStudies()) {\n-                        studies.add(study.getFqn());\n-                    }\n-                }\n-                // write CLI session file\n-                saveCliSessionFile(user, sessionId, studies);\n-                System.out.println(\"You have been logged in correctly. This is your new token \" + sessionId);\n-            }\n-        } else {\n-            String sessionId = usersCommandOptions.commonCommandOptions.token;\n-            String errorMsg = \"Missing password. \";\n-            if (StringUtils.isNotEmpty(sessionId)) {\n-                errorMsg += \"Active token detected \" + sessionId;\n-            }\n-            System.err.println(errorMsg);\n-        }\n-    }\n-\n-    private void logout() throws IOException {\n-        logger.debug(\"Logout\");\n-        openCGAClient.logout();\n-        logoutCliSessionFile();\n-    }\n+    createOutput(queryResponse);\n+  }\n \n-    private DataResponse<User> create() throws CatalogException, IOException {\n-        logger.debug(\"Creating user...\");\n+  private void login() throws ClientException, IOException {\n+    logger.debug(\"Login\");\n \n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(UserDBAdaptor.QueryParams.ID.key(), usersCommandOptions.createCommandOptions.user);\n-        params.putIfNotEmpty(UserDBAdaptor.QueryParams.NAME.key(), usersCommandOptions.createCommandOptions.name);\n-        params.putIfNotEmpty(UserDBAdaptor.QueryParams.EMAIL.key(), usersCommandOptions.createCommandOptions.email);\n-        params.putIfNotEmpty(UserDBAdaptor.QueryParams.PASSWORD.key(), usersCommandOptions.createCommandOptions.password);\n-        params.putIfNotEmpty(UserDBAdaptor.QueryParams.ORGANIZATION.key(), usersCommandOptions.createCommandOptions.organization);\n+    String user = usersCommandOptions.loginCommandOptions.user;\n+    String password = usersCommandOptions.loginCommandOptions.password;\n \n-        return openCGAClient.getUserClient().create(usersCommandOptions.createCommandOptions.user,\n-                usersCommandOptions.createCommandOptions.password, params);\n-    }\n+    if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+      String sessionId = openCGAClient.login(user, password);\n+      if (StringUtils.isNotEmpty(sessionId)) {\n+        List<String> studies = new ArrayList<>();\n \n-    private DataResponse<User> info() throws ClientException, IOException {\n-        logger.debug(\"User info\");\n+        DataResponse<Project> projects = openCGAClient.getProjectClient().search(\n+            new Query(ProjectDBAdaptor.QueryParams.OWNER.key(), user), QueryOptions.empty());\n \n-        QueryOptions queryOptions = new QueryOptions();\n-        if (StringUtils.isNotEmpty(usersCommandOptions.infoCommandOptions.userParam.user)) {\n-            queryOptions.putIfNotEmpty(\"userId\", usersCommandOptions.infoCommandOptions.userParam.user);\n-        } else if (cliSession != null && StringUtils.isNotEmpty(cliSession.getUser())) {\n-            queryOptions.putIfNotEmpty(\"userId\", cliSession.getUser());\n+        if (projects.getResponses().get(0).getNumResults() == 0) {\n+          // We try to fetch shared projects and studies instead when the user does not owe any project or study\n+          projects = openCGAClient.getProjectClient().search(new Query(), QueryOptions.empty());\n         }\n-\n-        queryOptions.putIfNotEmpty(UserDBAdaptor.QueryParams.LAST_MODIFIED.key(), usersCommandOptions.infoCommandOptions.lastModified);\n-        queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, usersCommandOptions.infoCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, usersCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n-\n-        DataResponse<User> userQueryResponse = openCGAClient.getUserClient().get(queryOptions);\n-        if (userQueryResponse.getResponses().size() == 1 && userQueryResponse.getResponses().get(0).getNumResults() == 1) {\n-            queryOptions.put(\"shared\", true);\n-            DataResponse<Project> sharedProjects = openCGAClient.getUserClient().getProjects(queryOptions);\n-            if (sharedProjects.getResponses().size() > 0 && sharedProjects.getResponses().get(0).getNumResults() > 0) {\n-                DataResult<User> userQueryResult = userQueryResponse.getResponses().get(0);\n-                List<Project> newProjectList = Stream\n-                        .concat(userQueryResult.first().getProjects().stream(), sharedProjects.first().getResults().stream())\n-                        .collect(Collectors.toList());\n-                userQueryResult.first().setProjects(newProjectList);\n-            }\n+        for (Project project : projects.getResponses().get(0).getResults()) {\n+          for (Study study : project.getStudies()) {\n+            studies.add(study.getFqn());\n+          }\n         }\n+        // write CLI session file\n+        saveCliSessionFile(user, sessionId, studies);\n+        System.out.println(\"You have been logged in correctly. This is your new token \" + sessionId);\n+      }\n+    } else {\n+      String sessionId = usersCommandOptions.commonCommandOptions.token;\n+      String errorMsg = \"Missing password. \";\n+      if (StringUtils.isNotEmpty(sessionId)) {\n+        errorMsg += \"Active token detected \" + sessionId;\n+      }\n+      System.err.println(errorMsg);\n+    }\n+  }\n+\n+  private void logout() throws IOException {\n+    logger.debug(\"Logout\");\n+    openCGAClient.logout();\n+    logoutCliSessionFile();\n+  }\n+\n+  private DataResponse<User> create() throws CatalogException, IOException {\n+    logger.debug(\"Creating user...\");\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(UserDBAdaptor.QueryParams.ID.key(), usersCommandOptions.createCommandOptions.user);\n+    params.putIfNotEmpty(UserDBAdaptor.QueryParams.NAME.key(), usersCommandOptions.createCommandOptions.name);\n+    params.putIfNotEmpty(UserDBAdaptor.QueryParams.EMAIL.key(), usersCommandOptions.createCommandOptions.email);\n+    params.putIfNotEmpty(UserDBAdaptor.QueryParams.PASSWORD.key(), usersCommandOptions.createCommandOptions.password);\n+    params.putIfNotEmpty(UserDBAdaptor.QueryParams.ORGANIZATION.key(), usersCommandOptions.createCommandOptions.organization);\n+\n+    return openCGAClient.getUserClient().create(usersCommandOptions.createCommandOptions.user,\n+        usersCommandOptions.createCommandOptions.password, params);\n+  }\n+\n+  private DataResponse<User> info() throws ClientException, IOException {\n+    logger.debug(\"User info\");\n+\n+    QueryOptions queryOptions = new QueryOptions();\n+    if (StringUtils.isNotEmpty(usersCommandOptions.infoCommandOptions.userParam.user)) {\n+      queryOptions.putIfNotEmpty(\"userId\", usersCommandOptions.infoCommandOptions.userParam.user);\n+    } else if (cliSession != null && StringUtils.isNotEmpty(cliSession.getUser())) {\n+      queryOptions.putIfNotEmpty(\"userId\", cliSession.getUser());\n+    }\n \n-        return userQueryResponse;\n+    queryOptions.putIfNotEmpty(UserDBAdaptor.QueryParams.LAST_MODIFIED.key(), usersCommandOptions.infoCommandOptions.lastModified);\n+    queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, usersCommandOptions.infoCommandOptions.dataModelOptions.include);\n+    queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, usersCommandOptions.infoCommandOptions.dataModelOptions.exclude);\n+\n+    DataResponse<User> userQueryResponse = openCGAClient.getUserClient().get(queryOptions);\n+    if (userQueryResponse.getResponses().size() == 1 && userQueryResponse.getResponses().get(0).getNumResults() == 1) {\n+      queryOptions.put(\"shared\", true);\n+      DataResponse<Project> sharedProjects = openCGAClient.getUserClient().getProjects(queryOptions);\n+      if (sharedProjects.getResponses().size() > 0 && sharedProjects.getResponses().get(0).getNumResults() > 0) {\n+        DataResult<User> userQueryResult = userQueryResponse.getResponses().get(0);\n+        List<Project> newProjectList = Stream\n+            .concat(userQueryResult.first().getProjects().stream(), sharedProjects.first().getResults().stream())\n+            .collect(Collectors.toList());\n+        userQueryResult.first().setProjects(newProjectList);\n+      }\n     }\n \n-    private DataResponse<Project> projects() throws ClientException, IOException {\n-        logger.debug(\"List all projects and studies of user\");\n+    return userQueryResponse;\n+  }\n \n-        QueryOptions queryOptions = new QueryOptions();\n-        queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, usersCommandOptions.projectsCommandOptions.dataModelOptions.include);\n-        queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, usersCommandOptions.projectsCommandOptions.dataModelOptions.exclude);\n-        queryOptions.put(QueryOptions.LIMIT, usersCommandOptions.projectsCommandOptions.numericOptions.limit);\n-        queryOptions.put(QueryOptions.SKIP, usersCommandOptions.projectsCommandOptions.numericOptions.skip);\n+  private DataResponse<Project> projects() throws ClientException, IOException {\n+    logger.debug(\"List all projects and studies of user\");\n \n-        if (StringUtils.isNotEmpty(usersCommandOptions.projectsCommandOptions.userParam.user)) {\n-            queryOptions.putIfNotEmpty(\"userId\", usersCommandOptions.projectsCommandOptions.userParam.user);\n-        } else if (cliSession != null) {\n-            queryOptions.putIfNotEmpty(\"userId\", cliSession.getUser());\n-        }\n+    QueryOptions queryOptions = new QueryOptions();\n+    queryOptions.putIfNotEmpty(QueryOptions.INCLUDE, usersCommandOptions.projectsCommandOptions.dataModelOptions.include);\n+    queryOptions.putIfNotEmpty(QueryOptions.EXCLUDE, usersCommandOptions.projectsCommandOptions.dataModelOptions.exclude);\n+    queryOptions.put(QueryOptions.LIMIT, usersCommandOptions.projectsCommandOptions.numericOptions.limit);\n+    queryOptions.put(QueryOptions.SKIP, usersCommandOptions.projectsCommandOptions.numericOptions.skip);\n \n-        return openCGAClient.getUserClient().getProjects(queryOptions);\n+    if (StringUtils.isNotEmpty(usersCommandOptions.projectsCommandOptions.userParam.user)) {\n+      queryOptions.putIfNotEmpty(\"userId\", usersCommandOptions.projectsCommandOptions.userParam.user);\n+    } else if (cliSession != null) {\n+      queryOptions.putIfNotEmpty(\"userId\", cliSession.getUser());\n     }\n \n-    private void delete() throws CatalogException, IOException {\n-        System.out.println(\"Pending functionality\");\n-        logger.debug(\"Deleting user\");\n+    return openCGAClient.getUserClient().getProjects(queryOptions);\n+  }\n+\n+  private void delete() throws CatalogException, IOException {\n+    System.out.println(\"Pending functionality\");\n+    logger.debug(\"Deleting user\");\n \n //        openCGAClient.getUserClient().delete(usersCommandOptions.deleteCommandOptions.user, new ObjectMap());\n-    }\n+  }\n \n-    private DataResponse<User> update() throws IOException, CatalogException {\n-        logger.debug(\"Updating user\");\n+  private DataResponse<User> update() throws IOException, CatalogException {\n+    logger.debug(\"Updating user\");\n \n-        ObjectMap params = loadFile(usersCommandOptions.updateCommandOptions.json);\n-        return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, null, params);\n-    }\n+    ObjectMap params = loadFile(usersCommandOptions.updateCommandOptions.json);\n+    return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, null, params);\n+  }\n \n-    private DataResponse<User> changePassword () throws ClientException, IOException {\n-        return openCGAClient.getUserClient().changePassword(usersCommandOptions.changePasswordCommandOptions.password,\n-                usersCommandOptions.changePasswordCommandOptions.npassword, new ObjectMap());\n-    }\n+  private DataResponse<User> changePassword() throws ClientException, IOException {\n+    return openCGAClient.getUserClient().changePassword(usersCommandOptions.changePasswordCommandOptions.password,\n+        usersCommandOptions.changePasswordCommandOptions.npassword, new ObjectMap());\n+  }\n \n }\n",
            "diff_size": 217
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/72/UserCommandExecutor.java\nindex 5c7a13f7c37..2603394f55d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/72/UserCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.main.executors.catalog;\n-\n-\n import org.apache.commons.lang3.StringUtils;\n import org.opencb.commons.datastore.core.*;\n import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;\n@@ -44,19 +42,13 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n     private UserCommandOptions usersCommandOptions;\n \n     public UserCommandExecutor(UserCommandOptions usersCommandOptions) {\n-\n-        super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n+    super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n         this.usersCommandOptions = usersCommandOptions;\n     }\n \n-\n-\n-    @Override\n+@Override\n     public void execute() throws Exception {\n-\n-\n-\n-        logger.debug(\"Executing users command line\");\n+    logger.debug(\"Executing users command line\");\n //        openCGAClient = new OpenCGAClient(clientConfiguration);\n \n         String subCommandString = getParsedSubCommand(usersCommandOptions.getjCommander());\n@@ -216,9 +208,9 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, null, params);\n     }\n \n-    private DataResponse<User> changePassword () throws ClientException, IOException {\n+    private DataResponse<User> changePassword() throws ClientException, IOException {\n         return openCGAClient.getUserClient().changePassword(usersCommandOptions.changePasswordCommandOptions.password,\n                 usersCommandOptions.changePasswordCommandOptions.npassword, new ObjectMap());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/72/UserCommandExecutor.java\nindex 5c7a13f7c37..9dca4a6c31a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/72/UserCommandExecutor.java\n@@ -216,7 +216,7 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, null, params);\n     }\n \n-    private DataResponse<User> changePassword () throws ClientException, IOException {\n+    private DataResponse<User> changePassword() throws ClientException, IOException {\n         return openCGAClient.getUserClient().changePassword(usersCommandOptions.changePasswordCommandOptions.password,\n                 usersCommandOptions.changePasswordCommandOptions.npassword, new ObjectMap());\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/72/UserCommandExecutor.java\nindex 5c7a13f7c37..9dca4a6c31a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/72/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/72/UserCommandExecutor.java\n@@ -216,7 +216,7 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, null, params);\n     }\n \n-    private DataResponse<User> changePassword () throws ClientException, IOException {\n+    private DataResponse<User> changePassword() throws ClientException, IOException {\n         return openCGAClient.getUserClient().changePassword(usersCommandOptions.changePasswordCommandOptions.password,\n                 usersCommandOptions.changePasswordCommandOptions.npassword, new ObjectMap());\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}