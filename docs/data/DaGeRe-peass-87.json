{
    "project_name": "DaGeRe-peass",
    "error_id": "87",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "198",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": " *\n */\n@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \n      \" control system can operate locally).\", name = \"downloadDependencies\")\npublic class VersionRunStarter extends VersionProcessor {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/87/VersionRunStarter.java\nindex 9442c83f6cf..ce2e26ce672 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/87/VersionRunStarter.java\n@@ -23,8 +23,8 @@ import picocli.CommandLine.Command;\n  * @author reichelt\n  *\n  */\n-@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \n-      \" control system can operate locally).\", name = \"downloadDependencies\")\n+@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\"\n+\t\t+ \" control system can operate locally).\", name = \"downloadDependencies\")\n public class VersionRunStarter extends VersionProcessor {\n \n    public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "25",
                    "column": "198",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/87/VersionRunStarter.java\nindex 9442c83f6cf..104723b5695 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/87/VersionRunStarter.java\n@@ -19,35 +19,34 @@ import picocli.CommandLine.Command;\n /**\n  * Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\n  * control system can operate locally).\n- * \n- * @author reichelt\n  *\n+ * @author reichelt\n  */\n-@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \n-      \" control system can operate locally).\", name = \"downloadDependencies\")\n+@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" +\n+    \" control system can operate locally).\", name = \"downloadDependencies\")\n public class VersionRunStarter extends VersionProcessor {\n \n-   public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n-      super();\n-   }\n-\n-   @Override\n-   protected void processVersion(final String version, final Version versioninfo) {\n-      GitUtils.goToTag(version, folders.getProjectFolder());\n-      try {\n-         final Process p = Runtime.getRuntime().exec(\"mvn clean package -DskipTests=true\", null, folders.getProjectFolder());\n-         StreamGobbler.showFullProcess(p);\n-      } catch (final IOException e) {\n-         // TODO Auto-generated catch block\n-         e.printStackTrace();\n-      }\n-\n-   }\n-\n-   public static void main(final String[] args) throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n-      VersionRunStarter command = new VersionRunStarter();\n-      CommandLine commandLine = new CommandLine(command);\n-      commandLine.execute(args);\n-      command.processCommandline();\n-   }\n+  public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n+    super();\n+  }\n+\n+  @Override\n+  protected void processVersion(final String version, final Version versioninfo) {\n+    GitUtils.goToTag(version, folders.getProjectFolder());\n+    try {\n+      final Process p = Runtime.getRuntime().exec(\"mvn clean package -DskipTests=true\", null, folders.getProjectFolder());\n+      StreamGobbler.showFullProcess(p);\n+    } catch (final IOException e) {\n+      // TODO Auto-generated catch block\n+      e.printStackTrace();\n+    }\n+\n+  }\n+\n+  public static void main(final String[] args) throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n+    VersionRunStarter command = new VersionRunStarter();\n+    CommandLine commandLine = new CommandLine(command);\n+    commandLine.execute(args);\n+    command.processCommandline();\n+  }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 327).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/87/VersionRunStarter.java\nindex 9442c83f6cf..3b8c88d873e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/naturalize/87/VersionRunStarter.java\n@@ -23,31 +23,28 @@ import picocli.CommandLine.Command;\n  * @author reichelt\n  *\n  */\n-@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \n-      \" control system can operate locally).\", name = \"downloadDependencies\")\n-public class VersionRunStarter extends VersionProcessor {\n+@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \" control system can operate locally).\", name = \"downloadDependencies\")public class VersionRunStarter extends VersionProcessor {\n \n-   public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n-      super();\n-   }\n+\tpublic VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n+\tsuper();\n+\t}\n \n    @Override\n    protected void processVersion(final String version, final Version versioninfo) {\n-      GitUtils.goToTag(version, folders.getProjectFolder());\n+\tGitUtils.goToTag(version, folders.getProjectFolder());\n       try {\n-         final Process p = Runtime.getRuntime().exec(\"mvn clean package -DskipTests=true\", null, folders.getProjectFolder());\n+\tfinal Process p = Runtime.getRuntime().exec(\"mvn clean package -DskipTests=true\", null, folders.getProjectFolder());\n          StreamGobbler.showFullProcess(p);\n-      } catch (final IOException e) {\n-         // TODO Auto-generated catch block\n+\t} catch (final IOException e) {\n+\t// TODO Auto-generated catch block\n          e.printStackTrace();\n-      }\n-\n-   }\n+\t}\n+\t}\n \n    public static void main(final String[] args) throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n-      VersionRunStarter command = new VersionRunStarter();\n+\tVersionRunStarter command = new VersionRunStarter();\n       CommandLine commandLine = new CommandLine(command);\n       commandLine.execute(args);\n       command.processCommandline();\n-   }\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 328).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/87/VersionRunStarter.java\nindex 9442c83f6cf..c21b65a49d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/87/VersionRunStarter.java\n@@ -1,14 +1,10 @@\n package de.dagere.peass;\n \n import java.io.IOException;\n-\n import javax.xml.bind.JAXBException;\n-\n import org.apache.commons.cli.ParseException;\n-\n import com.fasterxml.jackson.core.JsonParseException;\n import com.fasterxml.jackson.databind.JsonMappingException;\n-\n import de.dagere.peass.dependency.persistence.Version;\n import de.dagere.peass.dependencyprocessors.VersionProcessor;\n import de.dagere.peass.utils.StreamGobbler;\n@@ -23,31 +19,30 @@ import picocli.CommandLine.Command;\n  * @author reichelt\n  *\n  */\n-@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \n-      \" control system can operate locally).\", name = \"downloadDependencies\")\n-public class VersionRunStarter extends VersionProcessor {\n \n-   public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n-      super();\n-   }\n \n-   @Override\n-   protected void processVersion(final String version, final Version versioninfo) {\n-      GitUtils.goToTag(version, folders.getProjectFolder());\n-      try {\n-         final Process p = Runtime.getRuntime().exec(\"mvn clean package -DskipTests=true\", null, folders.getProjectFolder());\n-         StreamGobbler.showFullProcess(p);\n-      } catch (final IOException e) {\n-         // TODO Auto-generated catch block\n-         e.printStackTrace();\n-      }\n+@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \" control system can operate locally).\", name = \"downloadDependencies\") public class VersionRunStarter extends VersionProcessor {\n \n-   }\n+ public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n+  super();\n+ }\n \n-   public static void main(final String[] args) throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n-      VersionRunStarter command = new VersionRunStarter();\n-      CommandLine commandLine = new CommandLine(command);\n-      commandLine.execute(args);\n-      command.processCommandline();\n-   }\n-}\n+ @Override\n+ protected void processVersion(final String version, final Version versioninfo) {\n+  GitUtils.goToTag(version, folders.getProjectFolder());\n+  try {\n+   final Process p = Runtime.getRuntime().exec(\"mvn clean package -DskipTests=true\", null, folders.getProjectFolder());\n+   StreamGobbler.showFullProcess(p);\n+  } catch (final IOException e) {\n+         // TODO Auto-generated catch block\n+   e.printStackTrace();\n+  }\n+ }\n+\n+ public static void main(final String[] args) throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n+  VersionRunStarter command = new VersionRunStarter();\n+  CommandLine commandLine = new CommandLine(command);\n+  commandLine.execute(args);\n+  command.processCommandline();\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 270).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/87/VersionRunStarter.java\nindex 9442c83f6cf..a487e05d0a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/87/VersionRunStarter.java\n@@ -23,8 +23,7 @@ import picocli.CommandLine.Command;\n  * @author reichelt\n  *\n  */\n-@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \n-      \" control system can operate locally).\", name = \"downloadDependencies\")\n+@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \" control system can operate locally).\", name = \"downloadDependencies\")\n public class VersionRunStarter extends VersionProcessor {\n \n    public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/87/VersionRunStarter.java\nindex 9442c83f6cf..ce2e26ce672 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/87/VersionRunStarter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/87/VersionRunStarter.java\n@@ -23,8 +23,8 @@ import picocli.CommandLine.Command;\n  * @author reichelt\n  *\n  */\n-@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\" + \n-      \" control system can operate locally).\", name = \"downloadDependencies\")\n+@Command(description = \"Starts running every version just for downloading the dependencies. After all dependencies have been downloaded, most operations can be run locally (as long as the version\"\n+\t\t+ \" control system can operate locally).\", name = \"downloadDependencies\")\n public class VersionRunStarter extends VersionProcessor {\n \n    public VersionRunStarter() throws ParseException, JAXBException, JsonParseException, JsonMappingException, IOException {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}