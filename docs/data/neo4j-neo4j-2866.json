{
    "project_name": "neo4j-neo4j",
    "error_id": "2866",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2866/TimeUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2866/TimeUtil.java\nindex 744eb30124f..e756a1ea8e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2866/TimeUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2866/TimeUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.helpers;\n \n import java.util.concurrent.TimeUnit;\n@@ -36,131 +37,131 @@ public final class TimeUtil\n \n     public static final String VALID_TIME_DESCRIPTION = \"Valid units are: 'ns', '\u03bcs', 'ms', 's', 'm', 'h' and 'd'; default unit is 's'\";\n \n-    public static final Function<String,Long> parseTimeMillis = timeWithOrWithoutUnit ->\n+    public static final Function<String, Long> parseTimeMillis = timeWithOrWithoutUnit ->\n     {\n         int unitIndex = -1;\n-        for ( int i = 0; i < timeWithOrWithoutUnit.length(); i++ )\n+        for (int i = 0; i < timeWithOrWithoutUnit.length(); i++)\n         {\n-            char ch = timeWithOrWithoutUnit.charAt( i );\n-            if ( !Character.isDigit( ch ) )\n+            char ch = timeWithOrWithoutUnit.charAt(i);\n+            if (!Character.isDigit(ch))\n             {\n                 unitIndex = i;\n                 break;\n             }\n         }\n-        if ( unitIndex == -1 )\n+        if (unitIndex == -1)\n         {\n-            return DEFAULT_TIME_UNIT.toMillis( Integer.parseInt( timeWithOrWithoutUnit ) );\n+            return DEFAULT_TIME_UNIT.toMillis(Integer.parseInt(timeWithOrWithoutUnit));\n         }\n \n-        if ( unitIndex == 0 )\n+        if (unitIndex == 0)\n         {\n-            throw new IllegalArgumentException( \"Missing numeric value\" );\n+            throw new IllegalArgumentException(\"Missing numeric value\");\n         }\n \n         // We have digits\n         int unitIndexEnd = 0;\n         long timeInNanos = 0L;\n-        while ( unitIndexEnd < timeWithOrWithoutUnit.length() )\n+        while (unitIndexEnd < timeWithOrWithoutUnit.length())\n         {\n             int amountIndex = unitIndexEnd;\n             unitIndexEnd = timeWithOrWithoutUnit.length();\n-            for ( int i = unitIndex; i < timeWithOrWithoutUnit.length(); i++ )\n+            for (int i = unitIndex; i < timeWithOrWithoutUnit.length(); i++)\n             {\n-                char ch = timeWithOrWithoutUnit.charAt( i );\n-                if ( Character.isDigit( ch ) )\n+                char ch = timeWithOrWithoutUnit.charAt(i);\n+                if (Character.isDigit(ch))\n                 {\n                     unitIndexEnd = i;\n                     break;\n                 }\n             }\n \n-            String unit = timeWithOrWithoutUnit.substring( unitIndex, unitIndexEnd ).toLowerCase();\n-            int amount = Integer.parseInt( timeWithOrWithoutUnit.substring( amountIndex, unitIndex ) );\n-            timeInNanos += toNanos( unit, amount );\n+            String unit = timeWithOrWithoutUnit.substring(unitIndex, unitIndexEnd).toLowerCase();\n+            int amount = Integer.parseInt(timeWithOrWithoutUnit.substring(amountIndex, unitIndex));\n+            timeInNanos += toNanos(unit, amount);\n \n-            for ( int i = unitIndexEnd; i < timeWithOrWithoutUnit.length(); i++ )\n+            for (int i = unitIndexEnd; i < timeWithOrWithoutUnit.length(); i++)\n             {\n-                char ch = timeWithOrWithoutUnit.charAt( i );\n-                if ( !Character.isDigit( ch ) )\n+                char ch = timeWithOrWithoutUnit.charAt(i);\n+                if (!Character.isDigit(ch))\n                 {\n                     unitIndex = i;\n                     break;\n                 }\n             }\n         }\n-        return NANOSECONDS.toMillis( timeInNanos );\n+        return NANOSECONDS.toMillis(timeInNanos);\n     };\n \n-    private static long toNanos( String unit, int amount )\n+    private static long toNanos(String unit, int amount)\n     {\n-        switch ( unit )\n+        switch (unit)\n         {\n-        case \"ns\":\n-            return NANOSECONDS.toNanos( amount );\n-        case \"us\":\n-        case \"\u03bcs\":\n-            return MICROSECONDS.toNanos( amount );\n-        case \"ms\":\n-            return MILLISECONDS.toNanos( amount );\n-        case \"s\":\n-            return SECONDS.toNanos( amount );\n-        case \"m\":\n-            return MINUTES.toNanos( amount );\n-        case \"h\":\n-            return HOURS.toNanos( amount );\n-        case \"d\":\n-            return DAYS.toNanos( amount );\n-        default:\n-            throw new IllegalArgumentException( \"Unrecognized unit '\" + unit + \"'. \" + VALID_TIME_DESCRIPTION );\n+            case \"ns\":\n+                return NANOSECONDS.toNanos(amount);\n+            case \"us\":\n+            case \"\u03bcs\":\n+                return MICROSECONDS.toNanos(amount);\n+            case \"ms\":\n+                return MILLISECONDS.toNanos(amount);\n+            case \"s\":\n+                return SECONDS.toNanos(amount);\n+            case \"m\":\n+                return MINUTES.toNanos(amount);\n+            case \"h\":\n+                return HOURS.toNanos(amount);\n+            case \"d\":\n+                return DAYS.toNanos(amount);\n+            default:\n+                throw new IllegalArgumentException(\"Unrecognized unit '\" + unit + \"'. \" + VALID_TIME_DESCRIPTION);\n         }\n     }\n \n-    public static String nanosToString( long nanos )\n+    public static String nanosToString(long nanos)\n     {\n         assert nanos >= 0;\n         long nanoSeconds = nanos;\n         StringBuilder timeString = new StringBuilder();\n \n-        long days = DAYS.convert( nanoSeconds, NANOSECONDS );\n-        if ( days > 0 )\n+        long days = DAYS.convert(nanoSeconds, NANOSECONDS);\n+        if (days > 0)\n         {\n-            nanoSeconds -= DAYS.toNanos( days );\n-            timeString.append( days ).append( 'd' );\n+            nanoSeconds -= DAYS.toNanos(days);\n+            timeString.append(days).append('d');\n         }\n-        long hours = HOURS.convert( nanoSeconds, NANOSECONDS );\n-        if ( hours > 0 )\n+        long hours = HOURS.convert(nanoSeconds, NANOSECONDS);\n+        if (hours > 0)\n         {\n-            nanoSeconds -= HOURS.toNanos( hours );\n-            timeString.append( hours ).append( 'h' );\n+            nanoSeconds -= HOURS.toNanos(hours);\n+            timeString.append(hours).append('h');\n         }\n-        long minutes = MINUTES.convert( nanoSeconds, NANOSECONDS );\n-        if ( minutes > 0 )\n+        long minutes = MINUTES.convert(nanoSeconds, NANOSECONDS);\n+        if (minutes > 0)\n         {\n-            nanoSeconds -= MINUTES.toNanos( minutes );\n-            timeString.append( minutes ).append( 'm' );\n+            nanoSeconds -= MINUTES.toNanos(minutes);\n+            timeString.append(minutes).append('m');\n         }\n-        long seconds = SECONDS.convert( nanoSeconds, NANOSECONDS );\n-        if ( seconds > 0 )\n+        long seconds = SECONDS.convert(nanoSeconds, NANOSECONDS);\n+        if (seconds > 0)\n         {\n-            nanoSeconds -= SECONDS.toNanos( seconds );\n-            timeString.append( seconds ).append( 's' );\n+            nanoSeconds -= SECONDS.toNanos(seconds);\n+            timeString.append(seconds).append('s');\n         }\n-        long milliseconds = MILLISECONDS.convert( nanoSeconds, NANOSECONDS );\n-        if ( milliseconds > 0 )\n+        long milliseconds = MILLISECONDS.convert(nanoSeconds, NANOSECONDS);\n+        if (milliseconds > 0)\n         {\n-            nanoSeconds -= MILLISECONDS.toNanos( milliseconds );\n-            timeString.append( milliseconds ).append( \"ms\" );\n+            nanoSeconds -= MILLISECONDS.toNanos(milliseconds);\n+            timeString.append(milliseconds).append(\"ms\");\n         }\n-        long microseconds = MICROSECONDS.convert( nanoSeconds, NANOSECONDS );\n-        if ( microseconds > 0 )\n+        long microseconds = MICROSECONDS.convert(nanoSeconds, NANOSECONDS);\n+        if (microseconds > 0)\n         {\n-            nanoSeconds -= MICROSECONDS.toNanos( microseconds );\n-            timeString.append( microseconds ).append( \"\u03bcs\" );\n+            nanoSeconds -= MICROSECONDS.toNanos(microseconds);\n+            timeString.append(microseconds).append(\"\u03bcs\");\n         }\n-        if ( nanoSeconds > 0 || timeString.length() == 0 )\n+        if (nanoSeconds > 0 || timeString.length() == 0)\n         {\n-            timeString.append( nanoSeconds ).append( \"ns\" );\n+            timeString.append(nanoSeconds).append(\"ns\");\n         }\n         return timeString.toString();\n     }\n",
            "diff_size": 66
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}