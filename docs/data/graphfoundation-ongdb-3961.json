{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3961",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "28",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "28",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3961/IndexKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3961/IndexKey.java\nindex 58cc7ca5e33..bf7a88f17f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3961/IndexKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3961/IndexKey.java\n@@ -17,63 +17,64 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.counts.keys;\n \n abstract class IndexKey implements CountsKey\n {\n-    private final long indexId;\n-    private final CountsKeyType type;\n+  private final long indexId;\n+  private final CountsKeyType type;\n \n-    IndexKey( long indexId, CountsKeyType type )\n-    {\n-        this.indexId = indexId;\n-        this.type = type;\n-    }\n+  IndexKey(long indexId, CountsKeyType type)\n+  {\n+    this.indexId = indexId;\n+    this.type = type;\n+  }\n \n-    public long indexId()\n-    {\n-        return indexId;\n-    }\n+  public long indexId()\n+  {\n+    return indexId;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return String.format( \"IndexKey[%s:%d]\", type.name(), indexId );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return String.format(\"IndexKey[%s:%d]\", type.name(), indexId);\n+  }\n \n-    @Override\n-    public CountsKeyType recordType()\n-    {\n-        return type;\n-    }\n+  @Override\n+  public CountsKeyType recordType()\n+  {\n+    return type;\n+  }\n \n-    @Override\n-    public int hashCode()\n+  @Override\n+  public int hashCode()\n+  {\n+    return 31 * (int) indexId + type.hashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object other)\n+  {\n+    if (this == other)\n     {\n-        return 31 * (int) indexId + type.hashCode();\n+      return true;\n     }\n-\n-    @Override\n-    public boolean equals( Object other )\n+    if (other == null || getClass() != other.getClass())\n     {\n-        if ( this == other )\n-        {\n-            return true;\n-        }\n-        if ( other == null || getClass() != other.getClass() )\n-        {\n-            return false;\n-        }\n-        return ((IndexKey) other).indexId() == indexId;\n+      return false;\n     }\n+    return ((IndexKey) other).indexId() == indexId;\n+  }\n \n-    @Override\n-    public int compareTo( CountsKey other )\n+  @Override\n+  public int compareTo(CountsKey other)\n+  {\n+    if (other instanceof IndexKey)\n     {\n-        if ( other instanceof IndexKey )\n-        {\n-            return Long.compare( indexId, ((IndexKey) other).indexId() );\n-        }\n-        return recordType().ordinal() - other.recordType().ordinal();\n+      return Long.compare(indexId, ((IndexKey) other).indexId());\n     }\n+    return recordType().ordinal() - other.recordType().ordinal();\n+  }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3961/IndexKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3961/IndexKey.java\nindex 58cc7ca5e33..524b8d68aa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3961/IndexKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3961/IndexKey.java\n@@ -50,7 +50,7 @@ abstract class IndexKey implements CountsKey\n     @Override\n     public int hashCode()\n     {\n-        return 31 * (int) indexId + type.hashCode();\n+        return 31 * ( int) indexId + type.hashCode();\n     }\n \n     @Override\n@@ -60,7 +60,8 @@ abstract class IndexKey implements CountsKey\n         {\n             return true;\n         }\n-        if ( other == null || getClass() != other.getClass() )\n+\n+if ( other == null || getClass() != other.getClass() )\n         {\n             return false;\n         }\n@@ -74,6 +75,7 @@ abstract class IndexKey implements CountsKey\n         {\n             return Long.compare( indexId, ((IndexKey) other).indexId() );\n         }\n-        return recordType().ordinal() - other.recordType().ordinal();\n+\n+return recordType().ordinal() - other.recordType().ordinal();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}