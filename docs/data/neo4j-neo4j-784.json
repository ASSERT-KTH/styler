{
    "project_name": "neo4j-neo4j",
    "error_id": "784",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/784/TransactionLogWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/784/TransactionLogWriter.java\nindex 176e597ea41..bb7b9b4e3a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/784/TransactionLogWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/784/TransactionLogWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.IOException;\n@@ -31,7 +32,7 @@ public class TransactionLogWriter\n     private final FlushablePositionAwareChecksumChannel channel;\n     private final LogEntryWriterFactory logEntryWriterFactory;\n \n-    public TransactionLogWriter( FlushablePositionAwareChecksumChannel channel, LogEntryWriterFactory logEntryWriterFactory )\n+    public TransactionLogWriter(FlushablePositionAwareChecksumChannel channel, LogEntryWriterFactory logEntryWriterFactory)\n     {\n         this.channel = channel;\n         this.logEntryWriterFactory = logEntryWriterFactory;\n@@ -39,25 +40,26 @@ public class TransactionLogWriter\n \n     /**\n      * Append a transaction to the transaction log file\n+     *\n      * @return checksum of the transaction\n      */\n-    public int append( TransactionRepresentation transaction, long transactionId, int previousChecksum ) throws IOException\n+    public int append(TransactionRepresentation transaction, long transactionId, int previousChecksum) throws IOException\n     {\n-        LogEntryWriter<FlushablePositionAwareChecksumChannel> writer = logEntryWriterFactory.createEntryWriter( channel );\n-        writer.writeStartEntry( transaction.getTimeStarted(), transaction.getLatestCommittedTxWhenStarted(), previousChecksum, transaction.additionalHeader() );\n+        LogEntryWriter<FlushablePositionAwareChecksumChannel> writer = logEntryWriterFactory.createEntryWriter(channel);\n+        writer.writeStartEntry(transaction.getTimeStarted(), transaction.getLatestCommittedTxWhenStarted(), previousChecksum, transaction.additionalHeader());\n \n         // Write all the commands to the log channel\n-        writer.serialize( transaction );\n+        writer.serialize(transaction);\n \n         // Write commit record\n-        return writer.writeCommitEntry( transactionId, transaction.getTimeCommitted() );\n+        return writer.writeCommitEntry(transactionId, transaction.getTimeCommitted());\n     }\n \n     @VisibleForTesting\n-    public void legacyCheckPoint( LogPosition logPosition ) throws IOException\n+    public void legacyCheckPoint(LogPosition logPosition) throws IOException\n     {\n-        LogEntryWriter<FlushablePositionAwareChecksumChannel> writer = logEntryWriterFactory.createEntryWriter( channel );\n-        writer.writeLegacyCheckPointEntry( logPosition );\n+        LogEntryWriter<FlushablePositionAwareChecksumChannel> writer = logEntryWriterFactory.createEntryWriter(channel);\n+        writer.writeLegacyCheckPointEntry(logPosition);\n     }\n \n     public LogPosition getCurrentPosition() throws IOException\n@@ -65,9 +67,9 @@ public class TransactionLogWriter\n         return channel.getCurrentPosition();\n     }\n \n-    public LogPositionMarker getCurrentPosition( LogPositionMarker logPositionMarker ) throws IOException\n+    public LogPositionMarker getCurrentPosition(LogPositionMarker logPositionMarker) throws IOException\n     {\n-        return channel.getCurrentPosition( logPositionMarker );\n+        return channel.getCurrentPosition(logPositionMarker);\n     }\n \n     @VisibleForTesting\n@@ -79,6 +81,6 @@ public class TransactionLogWriter\n     @VisibleForTesting\n     public LogEntryWriter<FlushablePositionAwareChecksumChannel> getWriter()\n     {\n-        return logEntryWriterFactory.createEntryWriter( channel );\n+        return logEntryWriterFactory.createEntryWriter(channel);\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/784/TransactionLogWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/784/TransactionLogWriter.java\nindex 176e597ea41..8b199966196 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/784/TransactionLogWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/784/TransactionLogWriter.java\n@@ -81,4 +81,4 @@ public class TransactionLogWriter\n     {\n         return logEntryWriterFactory.createEntryWriter( channel );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}