{
    "project_name": "open-eid-digidoc4j",
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "195",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 141).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n      if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n        fileNameErrors.add(error);\n      }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/71/AsicEContainerValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/71/AsicEContainerValidator.java\nindex 2e08bd45dfd..04caf46c113 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/71/AsicEContainerValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/71/AsicEContainerValidator.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.asice;\n \n@@ -192,7 +192,8 @@ public class AsicEContainerValidator implements Serializable {\n     List<DigiDoc4JException> fileNameErrors = new ArrayList<>();\n     for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n       if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n-        DuplicateSignatureFilesException error = new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n+        DuplicateSignatureFilesException error =\n+            new DuplicateSignatureFilesException(\"Duplicate signature files: \" + signatureDocumentName);\n         fileNameErrors.add(error);\n       }\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/71/AsicEContainerValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/71/AsicEContainerValidator.java\nindex 2e08bd45dfd..af4bb283ef6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/71/AsicEContainerValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/71/AsicEContainerValidator.java\n@@ -78,9 +78,8 @@ public class AsicEContainerValidator implements Serializable {\n    * @param configuration        configuration context\n    * @param validateManifest     validate manifest\n    */\n-  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration,\n-                                 boolean validateManifest) {\n-    this.containerParseResult = containerParseResult;\n+  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration, boolean validateManifest) {\n+  this.containerParseResult = containerParseResult;\n     this.threadPoolManager = new ThreadPoolManager(configuration);\n     this.validateManifest = validateManifest;\n   }\n@@ -198,4 +197,4 @@ public class AsicEContainerValidator implements Serializable {\n     }\n     return fileNameErrors;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/71/AsicEContainerValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/71/AsicEContainerValidator.java\nindex 2e08bd45dfd..cb19eab74b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/71/AsicEContainerValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/71/AsicEContainerValidator.java\n@@ -33,7 +33,6 @@ import org.digidoc4j.impl.asic.xades.validation.SignatureValidationTask;\n import org.digidoc4j.impl.asic.xades.validation.ThreadPoolManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -44,13 +43,15 @@ import java.util.concurrent.Future;\n /**\n  * ASIC-E container validator\n  */\n+\n+\n public class AsicEContainerValidator implements Serializable {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicEContainerValidator.class);\n \n   protected List<DigiDoc4JException> errors = new ArrayList<>();\n-  protected List<DigiDoc4JException> warnings = new ArrayList<>();\n \n+  protected List<DigiDoc4JException> warnings = new ArrayList<>();\n   private AsicParseResult containerParseResult;\n   private boolean validateManifest;\n   private List<SignatureValidationData> signatureValidationData = new ArrayList<>();\n@@ -60,6 +61,7 @@ public class AsicEContainerValidator implements Serializable {\n   /**\n    * @param configuration configuration\n    */\n+\n   public AsicEContainerValidator(Configuration configuration) {\n     threadPoolManager = new ThreadPoolManager(configuration);\n     validateManifest = false;\n@@ -69,6 +71,8 @@ public class AsicEContainerValidator implements Serializable {\n    * @param containerParseResult parse result\n    * @param configuration        configuration\n    */\n+\n+\n   public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration) {\n     this(containerParseResult, configuration, true);\n   }\n@@ -78,8 +82,9 @@ public class AsicEContainerValidator implements Serializable {\n    * @param configuration        configuration context\n    * @param validateManifest     validate manifest\n    */\n-  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration,\n-                                 boolean validateManifest) {\n+\n+\n+  public AsicEContainerValidator(AsicParseResult containerParseResult, Configuration configuration, boolean validateManifest) {\n     this.containerParseResult = containerParseResult;\n     this.threadPoolManager = new ThreadPoolManager(configuration);\n     this.validateManifest = validateManifest;\n@@ -89,6 +94,8 @@ public class AsicEContainerValidator implements Serializable {\n    * @param signatures list of signatures\n    * @return validation result\n    */\n+\n+\n   public ContainerValidationResult validate(List<Signature> signatures) {\n     logger.debug(\"Validating container\");\n     validateSignatures(signatures);\n@@ -129,6 +136,7 @@ public class AsicEContainerValidator implements Serializable {\n   /**\n    * @param validateManifest validate manifest flag\n    */\n+\n   public void setValidateManifest(boolean validateManifest) {\n     this.validateManifest = validateManifest;\n   }\n@@ -148,8 +156,7 @@ public class AsicEContainerValidator implements Serializable {\n   }\n \n   protected AsicContainerValidationResult createValidationResult() {\n-    AsicValidationReportBuilder reportBuilder = new AsicValidationReportBuilder(signatureValidationData,\n-        manifestErrors);\n+    AsicValidationReportBuilder reportBuilder = new AsicValidationReportBuilder(signatureValidationData, manifestErrors);\n     AsicContainerValidationResult result = new AsicContainerValidationResult();\n     result.setErrors(errors);\n     result.setWarnings(warnings);\n@@ -162,7 +169,6 @@ public class AsicEContainerValidator implements Serializable {\n     if (!validateManifest || containerParseResult == null) {\n       return Collections.emptyList();\n     }\n-\n     List<DigiDoc4JException> manifestExceptions = new ArrayList<>();\n     ManifestParser manifestParser = containerParseResult.getManifestParser();\n     if (manifestParser == null || !manifestParser.containsManifestFile()) {\n@@ -170,13 +176,11 @@ public class AsicEContainerValidator implements Serializable {\n       manifestExceptions.add(new UnsupportedFormatException(\"Container does not contain a manifest file\"));\n       return manifestExceptions;\n     }\n-\n     List<DSSDocument> detachedContents = containerParseResult.getDetachedContents();\n-    List<ManifestErrorMessage> manifestErrorMessageList = new ManifestValidator(manifestParser, detachedContents,\n-        signatures).validateDocument();\n+    List<ManifestErrorMessage> manifestErrorMessageList = new ManifestValidator(manifestParser, detachedContents, signatures).validateDocument();\n     for (ManifestErrorMessage manifestErrorMessage : manifestErrorMessageList) {\n-      manifestExceptions.add(\n-          new DigiDoc4JException(manifestErrorMessage.getErrorMessage(), manifestErrorMessage.getSignatureId()));\n+      manifestExceptions.add(new DigiDoc4JException(manifestErrorMessage.getErrorMessage(),\n+        manifestErrorMessage.getSignatureId()));\n     }\n     manifestExceptions.addAll(assertNoDuplicateSignatures(signatures));\n     return manifestExceptions;\n@@ -188,7 +192,6 @@ public class AsicEContainerValidator implements Serializable {\n       DSSDocument signatureDocument = ((AsicSignature) signature).getSignatureDocument();\n       signatureDocumentNames.put(signatureDocument.getName(), signatureDocument);\n     }\n-\n     List<DigiDoc4JException> fileNameErrors = new ArrayList<>();\n     for (String signatureDocumentName : signatureDocumentNames.keySet()) {\n       if (signatureDocumentNames.get(signatureDocumentName).size() > 1) {\n@@ -198,4 +201,4 @@ public class AsicEContainerValidator implements Serializable {\n     }\n     return fileNameErrors;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}