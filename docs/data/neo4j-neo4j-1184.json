{
    "project_name": "neo4j-neo4j",
    "error_id": "1184",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "156",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1184/SchemaUserDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1184/SchemaUserDescription.java\nindex cc4de8edced..d8cbfb90352 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1184/SchemaUserDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1184/SchemaUserDescription.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.schema;\n \n import java.util.StringJoiner;\n@@ -35,94 +36,98 @@ public final class SchemaUserDescription\n     {\n     }\n \n-    static String forSchema( TokenNameLookup tokenNameLookup, EntityType entityType, int[] entityTokens, int[] propertyKeyIds )\n+    static String forSchema(TokenNameLookup tokenNameLookup, EntityType entityType, int[] entityTokens, int[] propertyKeyIds)\n     {\n         String prefix = entityType == RELATIONSHIP ? \"-[\" : \"(\";\n         String suffix = entityType == RELATIONSHIP ? \"]-\" : \")\";\n         IntFunction<String> lookup = entityType == NODE ? tokenNameLookup::labelGetName : tokenNameLookup::relationshipTypeGetName;\n-        return prefix + TokenIdPrettyPrinter.niceEntityLabels( lookup, entityTokens ) + \" \" +\n-                TokenIdPrettyPrinter.niceProperties( tokenNameLookup, propertyKeyIds, '{', '}' ) + suffix;\n+        return prefix + TokenIdPrettyPrinter.niceEntityLabels(lookup, entityTokens) + \" \" +\n+          TokenIdPrettyPrinter.niceProperties(tokenNameLookup, propertyKeyIds, '{', '}') + suffix;\n     }\n \n-    static String forPrototype( TokenNameLookup tokenNameLookup, String name, boolean isUnique, IndexType indexType,\n-            SchemaDescriptor schema, IndexProviderDescriptor indexProvider )\n+    static String forPrototype(TokenNameLookup tokenNameLookup, String name, boolean isUnique, IndexType indexType,\n+                               SchemaDescriptor schema, IndexProviderDescriptor indexProvider)\n     {\n-        StringJoiner joiner = new StringJoiner( \", \", \"Index( \", \" )\" );\n-        addPrototypeParams( tokenNameLookup, name, isUnique, indexType, schema, indexProvider, joiner );\n+        StringJoiner joiner = new StringJoiner(\", \", \"Index( \", \" )\");\n+        addPrototypeParams(tokenNameLookup, name, isUnique, indexType, schema, indexProvider, joiner);\n         return joiner.toString();\n     }\n \n-    static String forIndex( TokenNameLookup tokenNameLookup, long id, String name, boolean isUnique, IndexType indexType,\n-            SchemaDescriptor schema, IndexProviderDescriptor indexProvider )\n+    static String forIndex(TokenNameLookup tokenNameLookup, long id, String name, boolean isUnique, IndexType indexType,\n+                           SchemaDescriptor schema, IndexProviderDescriptor indexProvider)\n     {\n-        StringJoiner joiner = new StringJoiner( \", \", \"Index( \", \" )\" );\n-        joiner.add( \"id=\" + id );\n-        addPrototypeParams( tokenNameLookup, name, isUnique, indexType, schema, indexProvider, joiner );\n+        StringJoiner joiner = new StringJoiner(\", \", \"Index( \", \" )\");\n+        joiner.add(\"id=\" + id);\n+        addPrototypeParams(tokenNameLookup, name, isUnique, indexType, schema, indexProvider, joiner);\n         return joiner.toString();\n     }\n \n-    public static String forConstraint( TokenNameLookup tokenNameLookup, long id, String name, ConstraintType type, SchemaDescriptor schema, Long ownedIndex )\n+    public static String forConstraint(TokenNameLookup tokenNameLookup, long id, String name, ConstraintType type, SchemaDescriptor schema, Long ownedIndex)\n     {\n-        StringJoiner joiner = new StringJoiner( \", \", \"Constraint( \", \" )\" );\n-        maybeAddId( id, joiner );\n-        maybeAddName( name, joiner );\n-        addType( constraintType( type, schema.entityType() ), joiner );\n-        addSchema( tokenNameLookup, schema, joiner );\n-        if ( ownedIndex != null )\n+        StringJoiner joiner = new StringJoiner(\", \", \"Constraint( \", \" )\");\n+        maybeAddId(id, joiner);\n+        maybeAddName(name, joiner);\n+        addType(constraintType(type, schema.entityType()), joiner);\n+        addSchema(tokenNameLookup, schema, joiner);\n+        if (ownedIndex != null)\n         {\n-            joiner.add( \"ownedIndex=\" + ownedIndex );\n+            joiner.add(\"ownedIndex=\" + ownedIndex);\n         }\n         return joiner.toString();\n     }\n \n-    private static String constraintType( ConstraintType type, EntityType entityType )\n+    private static String constraintType(ConstraintType type, EntityType entityType)\n     {\n-        switch ( type )\n+        switch (type)\n         {\n-        case EXISTS: return entityType.name() + \" PROPERTY EXISTENCE\";\n-        case UNIQUE: return \"UNIQUENESS\";\n-        case UNIQUE_EXISTS: return \"NODE KEY\";\n-        default: return type.name();\n+            case EXISTS:\n+                return entityType.name() + \" PROPERTY EXISTENCE\";\n+            case UNIQUE:\n+                return \"UNIQUENESS\";\n+            case UNIQUE_EXISTS:\n+                return \"NODE KEY\";\n+            default:\n+                return type.name();\n         }\n     }\n \n-    private static void maybeAddId( long id, StringJoiner joiner )\n+    private static void maybeAddId(long id, StringJoiner joiner)\n     {\n-        if ( id != ConstraintDescriptor.NO_ID )\n+        if (id != ConstraintDescriptor.NO_ID)\n         {\n-            joiner.add( \"id=\" + id );\n+            joiner.add(\"id=\" + id);\n         }\n     }\n \n-    private static void maybeAddName( String name, StringJoiner joiner )\n+    private static void maybeAddName(String name, StringJoiner joiner)\n     {\n-        if ( name != null )\n+        if (name != null)\n         {\n-            joiner.add( \"name='\" + name + \"'\" );\n+            joiner.add(\"name='\" + name + \"'\");\n         }\n     }\n \n-    private static void addPrototypeParams( TokenNameLookup tokenNameLookup, String name, boolean isUnique, IndexType indexType, SchemaDescriptor schema,\n-            IndexProviderDescriptor indexProvider, StringJoiner joiner )\n+    private static void addPrototypeParams(TokenNameLookup tokenNameLookup, String name, boolean isUnique, IndexType indexType, SchemaDescriptor schema,\n+                                           IndexProviderDescriptor indexProvider, StringJoiner joiner)\n     {\n-        maybeAddName( name, joiner );\n-        addType( indexType( isUnique, indexType ), joiner );\n-        addSchema( tokenNameLookup, schema, joiner );\n-        joiner.add( \"indexProvider='\" + indexProvider.name() + \"'\" );\n+        maybeAddName(name, joiner);\n+        addType(indexType(isUnique, indexType), joiner);\n+        addSchema(tokenNameLookup, schema, joiner);\n+        joiner.add(\"indexProvider='\" + indexProvider.name() + \"'\");\n     }\n \n-    private static String indexType( boolean isUnique, IndexType indexType )\n+    private static String indexType(boolean isUnique, IndexType indexType)\n     {\n         return (isUnique ? \"UNIQUE\" : \"GENERAL\") + \" \" + indexType;\n     }\n \n-    private static void addType( String type, StringJoiner joiner )\n+    private static void addType(String type, StringJoiner joiner)\n     {\n-        joiner.add( \"type='\" + type + \"'\" );\n+        joiner.add(\"type='\" + type + \"'\");\n     }\n \n-    private static void addSchema( TokenNameLookup tokenNameLookup, SchemaDescriptor schema, StringJoiner joiner )\n+    private static void addSchema(TokenNameLookup tokenNameLookup, SchemaDescriptor schema, StringJoiner joiner)\n     {\n-        joiner.add( \"schema=\" + schema.userDescription( tokenNameLookup ) );\n+        joiner.add(\"schema=\" + schema.userDescription(tokenNameLookup));\n     }\n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1184/SchemaUserDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1184/SchemaUserDescription.java\nindex cc4de8edced..1d3c2642723 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1184/SchemaUserDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1184/SchemaUserDescription.java\n@@ -125,4 +125,4 @@ public final class SchemaUserDescription\n     {\n         joiner.add( \"schema=\" + schema.userDescription( tokenNameLookup ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}