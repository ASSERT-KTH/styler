{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4450",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4450/RecordAccess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4450/RecordAccess.java\nindex f085f77fd28..4c775b4da82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4450/RecordAccess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4450/RecordAccess.java\n@@ -17,87 +17,88 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n /**\n  * Provides access to records, both for reading and for writing.\n  */\n-public interface RecordAccess<RECORD,ADDITIONAL>\n+public interface RecordAccess<RECORD, ADDITIONAL>\n {\n-    /**\n-     * Gets an already loaded record, or loads it as part of this call if it wasn't. The {@link RecordProxy}\n-     * returned has means of communicating when to get access to the actual record for reading or writing.\n-     * With that information any additional loading or storing can be inferred for the specific\n-     * use case (implementation).\n-     *\n-     * @param key the record key.\n-     * @param additionalData additional data to put in the record after loaded.\n-     * @return a {@link RecordProxy} for the record for {@code key}.\n-     */\n-    RecordProxy<RECORD, ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData );\n+  /**\n+   * Gets an already loaded record, or loads it as part of this call if it wasn't. The {@link RecordProxy}\n+   * returned has means of communicating when to get access to the actual record for reading or writing.\n+   * With that information any additional loading or storing can be inferred for the specific\n+   * use case (implementation).\n+   *\n+   * @param key            the record key.\n+   * @param additionalData additional data to put in the record after loaded.\n+   * @return a {@link RecordProxy} for the record for {@code key}.\n+   */\n+  RecordProxy<RECORD, ADDITIONAL> getOrLoad(long key, ADDITIONAL additionalData);\n \n-    RecordProxy<RECORD, ADDITIONAL> getIfLoaded( long key );\n+  RecordProxy<RECORD, ADDITIONAL> getIfLoaded(long key);\n \n-    @Deprecated\n-    void setTo( long key, RECORD newRecord, ADDITIONAL additionalData );\n+  @Deprecated\n+  void setTo(long key, RECORD newRecord, ADDITIONAL additionalData);\n \n-    RecordProxy<RECORD,ADDITIONAL> setRecord( long key, RECORD record, ADDITIONAL additionalData );\n+  RecordProxy<RECORD, ADDITIONAL> setRecord(long key, RECORD record, ADDITIONAL additionalData);\n \n-    /**\n-     * Creates a new record with the given {@code key}. Any {@code additionalData} is set in the\n-     * record before returning.\n-     *\n-     * @param key the record key.\n-     * @param additionalData additional data to put in the record after loaded.\n-     * @return a {@link RecordProxy} for the record for {@code key}.\n-     */\n-    RecordProxy<RECORD, ADDITIONAL> create( long key, ADDITIONAL additionalData );\n+  /**\n+   * Creates a new record with the given {@code key}. Any {@code additionalData} is set in the\n+   * record before returning.\n+   *\n+   * @param key            the record key.\n+   * @param additionalData additional data to put in the record after loaded.\n+   * @return a {@link RecordProxy} for the record for {@code key}.\n+   */\n+  RecordProxy<RECORD, ADDITIONAL> create(long key, ADDITIONAL additionalData);\n \n-    /**\n-     * Closes the record access.\n-     */\n-    void close();\n+  /**\n+   * Closes the record access.\n+   */\n+  void close();\n \n-    int changeSize();\n+  int changeSize();\n \n-    Iterable<RecordProxy<RECORD,ADDITIONAL>> changes();\n+  Iterable<RecordProxy<RECORD, ADDITIONAL>> changes();\n \n-    /**\n-     * A proxy for a record that encapsulates load/store actions to take, knowing when the underlying record is\n-     * requested for reading or for writing.\n-     */\n-    interface RecordProxy<RECORD, ADDITIONAL>\n-    {\n-        long getKey();\n+  /**\n+   * A proxy for a record that encapsulates load/store actions to take, knowing when the underlying record is\n+   * requested for reading or for writing.\n+   */\n+  interface RecordProxy<RECORD, ADDITIONAL>\n+  {\n+    long getKey();\n \n-        RECORD forChangingLinkage();\n+    RECORD forChangingLinkage();\n \n-        RECORD forChangingData();\n+    RECORD forChangingData();\n \n-        RECORD forReadingLinkage();\n+    RECORD forReadingLinkage();\n \n-        RECORD forReadingData();\n+    RECORD forReadingData();\n \n-        ADDITIONAL getAdditionalData();\n+    ADDITIONAL getAdditionalData();\n \n-        RECORD getBefore();\n+    RECORD getBefore();\n \n-        boolean isChanged();\n+    boolean isChanged();\n \n-        boolean isCreated();\n-    }\n+    boolean isCreated();\n+  }\n \n-    /**\n-     * Hook for loading and creating records.\n-     */\n-    interface Loader<RECORD,ADDITIONAL>\n-    {\n-        RECORD newUnused( long key, ADDITIONAL additionalData );\n+  /**\n+   * Hook for loading and creating records.\n+   */\n+  interface Loader<RECORD, ADDITIONAL>\n+  {\n+    RECORD newUnused(long key, ADDITIONAL additionalData);\n \n-        RECORD load( long key, ADDITIONAL additionalData );\n+    RECORD load(long key, ADDITIONAL additionalData);\n \n-        void ensureHeavy( RECORD record );\n+    void ensureHeavy(RECORD record);\n \n-        RECORD clone( RECORD record );\n-    }\n+    RECORD clone(RECORD record);\n+  }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4450/RecordAccess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4450/RecordAccess.java\nindex f085f77fd28..2c0daf3e3ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4450/RecordAccess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4450/RecordAccess.java\n@@ -34,9 +34,9 @@ public interface RecordAccess<RECORD,ADDITIONAL>\n      * @param additionalData additional data to put in the record after loaded.\n      * @return a {@link RecordProxy} for the record for {@code key}.\n      */\n-    RecordProxy<RECORD, ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData );\n+    RecordProxy<RECORD,ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData );\n \n-    RecordProxy<RECORD, ADDITIONAL> getIfLoaded( long key );\n+    RecordProxy<RECORD,ADDITIONAL> getIfLoaded( long key );\n \n     @Deprecated\n     void setTo( long key, RECORD newRecord, ADDITIONAL additionalData );\n@@ -51,7 +51,7 @@ public interface RecordAccess<RECORD,ADDITIONAL>\n      * @param additionalData additional data to put in the record after loaded.\n      * @return a {@link RecordProxy} for the record for {@code key}.\n      */\n-    RecordProxy<RECORD, ADDITIONAL> create( long key, ADDITIONAL additionalData );\n+    RecordProxy<RECORD,ADDITIONAL> create( long key, ADDITIONAL additionalData );\n \n     /**\n      * Closes the record access.\n@@ -93,11 +93,9 @@ public interface RecordAccess<RECORD,ADDITIONAL>\n     interface Loader<RECORD,ADDITIONAL>\n     {\n         RECORD newUnused( long key, ADDITIONAL additionalData );\n-\n-        RECORD load( long key, ADDITIONAL additionalData );\n+RECORD load( long key, ADDITIONAL additionalData );\n \n         void ensureHeavy( RECORD record );\n-\n-        RECORD clone( RECORD record );\n+RECORD clone( RECORD record );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "26",
                    "column": "30",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "40",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Annotation 'Deprecated' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "44",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 345).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 397).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "67",
                    "column": "30",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "column": "185",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "column": "187",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "column": "189",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "column": "191",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "column": "193",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "column": "195",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "197",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "column": "199",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "82",
                    "column": "25",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 266).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 320).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 317).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 302).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "column": "268",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 300).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "column": "270",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 272).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "column": "272",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 266).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4450/RecordAccess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4450/RecordAccess.java\nindex f085f77fd28..2b5c532f719 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4450/RecordAccess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4450/RecordAccess.java\n@@ -22,7 +22,8 @@ package org.neo4j.kernel.impl.transaction.state;\n /**\n  * Provides access to records, both for reading and for writing.\n  */\n-public interface RecordAccess<RECORD,ADDITIONAL>\n+\n+public interface RecordAccess< RECORD, ADDITIONAL>\n {\n     /**\n      * Gets an already loaded record, or loads it as part of this call if it wasn't. The {@link RecordProxy}\n@@ -34,14 +35,13 @@ public interface RecordAccess<RECORD,ADDITIONAL>\n      * @param additionalData additional data to put in the record after loaded.\n      * @return a {@link RecordProxy} for the record for {@code key}.\n      */\n-    RecordProxy<RECORD, ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData );\n-\n-    RecordProxy<RECORD, ADDITIONAL> getIfLoaded( long key );\n-\n-    @Deprecated\n-    void setTo( long key, RECORD newRecord, ADDITIONAL additionalData );\n+    RecordProxy<RECORD,ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData )\n+    ; RecordProxy<RECORD,ADDITIONAL> getIfLoaded( long key )\n+      ;\n \n-    RecordProxy<RECORD,ADDITIONAL> setRecord( long key, RECORD record, ADDITIONAL additionalData );\n+    @Deprecated void setTo( long key, RECORD newRecord, ADDITIONAL additionalData )\n+    ; RecordProxy<RECORD,ADDITIONAL> setRecord( long key, RECORD record, ADDITIONAL additionalData )\n+      ;\n \n     /**\n      * Creates a new record with the given {@code key}. Any {@code additionalData} is set in the\n@@ -50,54 +50,42 @@ public interface RecordAccess<RECORD,ADDITIONAL>\n      * @param key the record key.\n      * @param additionalData additional data to put in the record after loaded.\n      * @return a {@link RecordProxy} for the record for {@code key}.\n-     */\n-    RecordProxy<RECORD, ADDITIONAL> create( long key, ADDITIONAL additionalData );\n+     */ RecordProxy<RECORD,ADDITIONAL> create( long key, ADDITIONAL additionalData )\n+                                                                                                                                                                                                                                                                                                                                                        ;\n \n     /**\n      * Closes the record access.\n-     */\n-    void close();\n-\n-    int changeSize();\n-\n-    Iterable<RecordProxy<RECORD,ADDITIONAL>> changes();\n+     */ void close()\n+                                                                                                                                                                                                                                                                                                                                                                                                            ;\n+    int changeSize()\n+    ; Iterable<RecordProxy<RECORD,ADDITIONAL>> changes()\n+      ;\n \n     /**\n      * A proxy for a record that encapsulates load/store actions to take, knowing when the underlying record is\n      * requested for reading or for writing.\n-     */\n-    interface RecordProxy<RECORD, ADDITIONAL>\n-    {\n-        long getKey();\n-\n-        RECORD forChangingLinkage();\n-\n-        RECORD forChangingData();\n-\n-        RECORD forReadingLinkage();\n-\n-        RECORD forReadingData();\n-\n-        ADDITIONAL getAdditionalData();\n-\n-        RECORD getBefore();\n-\n-        boolean isChanged();\n-\n-        boolean isCreated();\n-    }\n+     */ interface RecordProxy< RECORD, ADDITIONAL>\n+                                                                                                                                                                                      {\n+                                                                                                                                                                                      long getKey()\n+                                                                                                                                                                                      ; RECORD forChangingLinkage()\n+                                                                                                                                                                                        ; RECORD forChangingData()\n+                                                                                                                                                                                          ; RECORD forReadingLinkage()\n+                                                                                                                                                                                            ; RECORD forReadingData()\n+                                                                                                                                                                                              ; ADDITIONAL getAdditionalData()\n+                                                                                                                                                                                                ; RECORD getBefore()\n+                                                                                                                                                                                                  ; boolean isChanged()\n+                                                                                                                                                                                                    ; boolean isCreated()\n+                                                                                                                                                                                                      ; }\n \n     /**\n      * Hook for loading and creating records.\n-     */\n-    interface Loader<RECORD,ADDITIONAL>\n-    {\n-        RECORD newUnused( long key, ADDITIONAL additionalData );\n-\n-        RECORD load( long key, ADDITIONAL additionalData );\n-\n-        void ensureHeavy( RECORD record );\n-\n-        RECORD clone( RECORD record );\n-    }\n-}\n+     */ interface Loader< RECORD, ADDITIONAL>\n+                                                                                                                                                                                                                                                                         {\n+                                                                                                                                                                                                                                                                         RECORD newUnused( long key, ADDITIONAL additionalData )\n+                                                                                                                                                                                                                                                                         ; RECORD load( long key, ADDITIONAL additionalData )\n+                                                                                                                                                                                                                                                                           ; void ensureHeavy( RECORD record )\n+                                                                                                                                                                                                                                                                             ; RECORD clone( RECORD record )\n+                                                                                                                                                                                                                                                                               ;\n+                                                                                                                                                                                                                                                                         }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}