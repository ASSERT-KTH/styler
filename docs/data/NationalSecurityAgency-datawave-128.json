{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "128",
    "information": {
        "errors": [
            {
                "line": "26",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.client.admin.DelegationTokenConfig;\nimport org.apache.accumulo.core.client.admin.SecurityOperations;\nimport org.apache.accumulo.core.clientImpl.thrift.SecurityErrorCode;\nimport org.apache.accumulo.core.client.security.tokens.AuthenticationToken;\nimport org.apache.accumulo.core.client.security.tokens.DelegationToken;\nimport org.apache.accumulo.core.client.security.tokens.PasswordToken;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/128/InMemorySecurityOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/128/InMemorySecurityOperations.java\nindex 3460fdf8f41..2e334882ba4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/128/InMemorySecurityOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/128/InMemorySecurityOperations.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package datawave.accumulo.inmemory;\n \n import java.util.EnumSet;\n@@ -33,172 +34,209 @@ import org.apache.accumulo.core.security.SystemPermission;\n import org.apache.accumulo.core.security.TablePermission;\n \n class InMemorySecurityOperations implements SecurityOperations {\n-    \n-    final private InMemoryAccumulo acu;\n-    \n-    InMemorySecurityOperations(InMemoryAccumulo acu) {\n-        this.acu = acu;\n-    }\n-    \n-    @Override\n-    public void createLocalUser(String principal, PasswordToken password) throws AccumuloException, AccumuloSecurityException {\n-        this.acu.users.put(principal, new InMemoryUser(principal, password, new Authorizations()));\n-    }\n-    \n-    @Override\n-    public void dropLocalUser(String principal) throws AccumuloException, AccumuloSecurityException {\n-        this.acu.users.remove(principal);\n-    }\n-    \n-    @Override\n-    public boolean authenticateUser(String principal, AuthenticationToken token) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryUser user = acu.users.get(principal);\n-        if (user == null)\n-            return false;\n-        return user.token.equals(token);\n-    }\n-    \n-    @Override\n-    public void changeLocalUserPassword(String principal, PasswordToken token) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryUser user = acu.users.get(principal);\n-        if (user != null)\n-            user.token = token.clone();\n-        else\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-    }\n-    \n-    @Override\n-    public void changeUserAuthorizations(String principal, Authorizations authorizations) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryUser user = acu.users.get(principal);\n-        if (user != null)\n-            user.authorizations = authorizations;\n-        else\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-    }\n-    \n-    @Override\n-    public Authorizations getUserAuthorizations(String principal) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryUser user = acu.users.get(principal);\n-        if (user != null)\n-            return user.authorizations;\n-        else\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-    }\n-    \n-    @Override\n-    public boolean hasSystemPermission(String principal, SystemPermission perm) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryUser user = acu.users.get(principal);\n-        if (user != null)\n-            return user.permissions.contains(perm);\n-        else\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-    }\n-    \n-    @Override\n-    public boolean hasTablePermission(String principal, String tableName, TablePermission perm) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryTable table = acu.tables.get(tableName);\n-        if (table == null)\n-            throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n-        EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n-        if (perms == null)\n-            return false;\n-        return perms.contains(perm);\n-    }\n-    \n-    @Override\n-    public boolean hasNamespacePermission(String principal, String namespace, NamespacePermission permission) throws AccumuloException,\n-                    AccumuloSecurityException {\n-        InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n-        if (mockNamespace == null)\n-            throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n-        EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n-        if (perms == null)\n-            return false;\n-        return perms.contains(permission);\n-    }\n-    \n-    @Override\n-    public void grantSystemPermission(String principal, SystemPermission permission) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryUser user = acu.users.get(principal);\n-        if (user != null)\n-            user.permissions.add(permission);\n-        else\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-    }\n-    \n-    @Override\n-    public void grantTablePermission(String principal, String tableName, TablePermission permission) throws AccumuloException, AccumuloSecurityException {\n-        if (acu.users.get(principal) == null)\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-        InMemoryTable table = acu.tables.get(tableName);\n-        if (table == null)\n-            throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n-        EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n-        if (perms == null)\n-            table.userPermissions.put(principal, EnumSet.of(permission));\n-        else\n-            perms.add(permission);\n-    }\n-    \n-    @Override\n-    public void grantNamespacePermission(String principal, String namespace, NamespacePermission permission) throws AccumuloException,\n-                    AccumuloSecurityException {\n-        if (acu.users.get(principal) == null)\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-        InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n-        if (mockNamespace == null)\n-            throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n-        EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n-        if (perms == null)\n-            mockNamespace.userPermissions.put(principal, EnumSet.of(permission));\n-        else\n-            perms.add(permission);\n-    }\n-    \n-    @Override\n-    public void revokeSystemPermission(String principal, SystemPermission permission) throws AccumuloException, AccumuloSecurityException {\n-        InMemoryUser user = acu.users.get(principal);\n-        if (user != null)\n-            user.permissions.remove(permission);\n-        else\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-    }\n-    \n-    @Override\n-    public void revokeTablePermission(String principal, String tableName, TablePermission permission) throws AccumuloException, AccumuloSecurityException {\n-        if (acu.users.get(principal) == null)\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-        InMemoryTable table = acu.tables.get(tableName);\n-        if (table == null)\n-            throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n-        EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n-        if (perms != null)\n-            perms.remove(permission);\n-        \n-    }\n-    \n-    @Override\n-    public void revokeNamespacePermission(String principal, String namespace, NamespacePermission permission) throws AccumuloException,\n-                    AccumuloSecurityException {\n-        if (acu.users.get(principal) == null)\n-            throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n-        InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n-        if (mockNamespace == null)\n-            throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n-        EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n-        if (perms != null)\n-            perms.remove(permission);\n-        \n-    }\n-    \n-    @Override\n-    public Set<String> listLocalUsers() throws AccumuloException, AccumuloSecurityException {\n-        return acu.users.keySet();\n-    }\n-    \n-    @Override\n-    public DelegationToken getDelegationToken(DelegationTokenConfig cfg) throws AccumuloException, AccumuloSecurityException {\n-        return null;\n-    }\n-    \n+\n+  final private InMemoryAccumulo acu;\n+\n+  InMemorySecurityOperations(InMemoryAccumulo acu) {\n+    this.acu = acu;\n+  }\n+\n+  @Override\n+  public void createLocalUser(String principal, PasswordToken password)\n+      throws AccumuloException, AccumuloSecurityException {\n+    this.acu.users.put(principal, new InMemoryUser(principal, password, new Authorizations()));\n+  }\n+\n+  @Override\n+  public void dropLocalUser(String principal) throws AccumuloException, AccumuloSecurityException {\n+    this.acu.users.remove(principal);\n+  }\n+\n+  @Override\n+  public boolean authenticateUser(String principal, AuthenticationToken token)\n+      throws AccumuloException, AccumuloSecurityException {\n+    InMemoryUser user = acu.users.get(principal);\n+    if (user == null) {\n+      return false;\n+    }\n+    return user.token.equals(token);\n+  }\n+\n+  @Override\n+  public void changeLocalUserPassword(String principal, PasswordToken token)\n+      throws AccumuloException, AccumuloSecurityException {\n+    InMemoryUser user = acu.users.get(principal);\n+    if (user != null) {\n+      user.token = token.clone();\n+    } else {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+  }\n+\n+  @Override\n+  public void changeUserAuthorizations(String principal, Authorizations authorizations)\n+      throws AccumuloException, AccumuloSecurityException {\n+    InMemoryUser user = acu.users.get(principal);\n+    if (user != null) {\n+      user.authorizations = authorizations;\n+    } else {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+  }\n+\n+  @Override\n+  public Authorizations getUserAuthorizations(String principal) throws AccumuloException, AccumuloSecurityException {\n+    InMemoryUser user = acu.users.get(principal);\n+    if (user != null) {\n+      return user.authorizations;\n+    } else {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasSystemPermission(String principal, SystemPermission perm)\n+      throws AccumuloException, AccumuloSecurityException {\n+    InMemoryUser user = acu.users.get(principal);\n+    if (user != null) {\n+      return user.permissions.contains(perm);\n+    } else {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+  }\n+\n+  @Override\n+  public boolean hasTablePermission(String principal, String tableName, TablePermission perm)\n+      throws AccumuloException, AccumuloSecurityException {\n+    InMemoryTable table = acu.tables.get(tableName);\n+    if (table == null) {\n+      throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n+    }\n+    EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n+    if (perms == null) {\n+      return false;\n+    }\n+    return perms.contains(perm);\n+  }\n+\n+  @Override\n+  public boolean hasNamespacePermission(String principal, String namespace, NamespacePermission permission)\n+      throws AccumuloException,\n+      AccumuloSecurityException {\n+    InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n+    if (mockNamespace == null) {\n+      throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n+    }\n+    EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n+    if (perms == null) {\n+      return false;\n+    }\n+    return perms.contains(permission);\n+  }\n+\n+  @Override\n+  public void grantSystemPermission(String principal, SystemPermission permission)\n+      throws AccumuloException, AccumuloSecurityException {\n+    InMemoryUser user = acu.users.get(principal);\n+    if (user != null) {\n+      user.permissions.add(permission);\n+    } else {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+  }\n+\n+  @Override\n+  public void grantTablePermission(String principal, String tableName, TablePermission permission)\n+      throws AccumuloException, AccumuloSecurityException {\n+    if (acu.users.get(principal) == null) {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+    InMemoryTable table = acu.tables.get(tableName);\n+    if (table == null) {\n+      throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n+    }\n+    EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n+    if (perms == null) {\n+      table.userPermissions.put(principal, EnumSet.of(permission));\n+    } else {\n+      perms.add(permission);\n+    }\n+  }\n+\n+  @Override\n+  public void grantNamespacePermission(String principal, String namespace, NamespacePermission permission)\n+      throws AccumuloException,\n+      AccumuloSecurityException {\n+    if (acu.users.get(principal) == null) {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+    InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n+    if (mockNamespace == null) {\n+      throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n+    }\n+    EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n+    if (perms == null) {\n+      mockNamespace.userPermissions.put(principal, EnumSet.of(permission));\n+    } else {\n+      perms.add(permission);\n+    }\n+  }\n+\n+  @Override\n+  public void revokeSystemPermission(String principal, SystemPermission permission)\n+      throws AccumuloException, AccumuloSecurityException {\n+    InMemoryUser user = acu.users.get(principal);\n+    if (user != null) {\n+      user.permissions.remove(permission);\n+    } else {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+  }\n+\n+  @Override\n+  public void revokeTablePermission(String principal, String tableName, TablePermission permission)\n+      throws AccumuloException, AccumuloSecurityException {\n+    if (acu.users.get(principal) == null) {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+    InMemoryTable table = acu.tables.get(tableName);\n+    if (table == null) {\n+      throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n+    }\n+    EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n+    if (perms != null) {\n+      perms.remove(permission);\n+    }\n+\n+  }\n+\n+  @Override\n+  public void revokeNamespacePermission(String principal, String namespace, NamespacePermission permission)\n+      throws AccumuloException,\n+      AccumuloSecurityException {\n+    if (acu.users.get(principal) == null) {\n+      throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+    }\n+    InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n+    if (mockNamespace == null) {\n+      throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n+    }\n+    EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n+    if (perms != null) {\n+      perms.remove(permission);\n+    }\n+\n+  }\n+\n+  @Override\n+  public Set<String> listLocalUsers() throws AccumuloException, AccumuloSecurityException {\n+    return acu.users.keySet();\n+  }\n+\n+  @Override\n+  public DelegationToken getDelegationToken(DelegationTokenConfig cfg)\n+      throws AccumuloException, AccumuloSecurityException {\n+    return null;\n+  }\n+\n }\n",
            "diff_size": 206
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/128/InMemorySecurityOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/128/InMemorySecurityOperations.java\nindex 3460fdf8f41..b330dacd87d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/128/InMemorySecurityOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/128/InMemorySecurityOperations.java\n@@ -201,4 +201,4 @@ class InMemorySecurityOperations implements SecurityOperations {\n         return null;\n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/128/InMemorySecurityOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/128/InMemorySecurityOperations.java\nindex 3460fdf8f41..dabd5e9f780 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/128/InMemorySecurityOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/128/InMemorySecurityOperations.java\n@@ -18,7 +18,6 @@ package datawave.accumulo.inmemory;\n \n import java.util.EnumSet;\n import java.util.Set;\n-\n import org.apache.accumulo.core.client.AccumuloException;\n import org.apache.accumulo.core.client.AccumuloSecurityException;\n import org.apache.accumulo.core.client.admin.DelegationTokenConfig;\n@@ -33,172 +32,192 @@ import org.apache.accumulo.core.security.SystemPermission;\n import org.apache.accumulo.core.security.TablePermission;\n \n class InMemorySecurityOperations implements SecurityOperations {\n-    \n     final private InMemoryAccumulo acu;\n-    \n+\n     InMemorySecurityOperations(InMemoryAccumulo acu) {\n         this.acu = acu;\n     }\n-    \n+\n     @Override\n-    public void createLocalUser(String principal, PasswordToken password) throws AccumuloException, AccumuloSecurityException {\n+    public void createLocalUser(String principal, PasswordToken password) throws AccumuloException,\n+        AccumuloSecurityException {\n         this.acu.users.put(principal, new InMemoryUser(principal, password, new Authorizations()));\n     }\n-    \n+\n     @Override\n-    public void dropLocalUser(String principal) throws AccumuloException, AccumuloSecurityException {\n+    public void dropLocalUser(String principal) throws AccumuloException,\n+        AccumuloSecurityException {\n         this.acu.users.remove(principal);\n     }\n-    \n+\n     @Override\n-    public boolean authenticateUser(String principal, AuthenticationToken token) throws AccumuloException, AccumuloSecurityException {\n+    public boolean authenticateUser(String principal, AuthenticationToken token) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryUser user = acu.users.get(principal);\n         if (user == null)\n             return false;\n         return user.token.equals(token);\n     }\n-    \n+\n     @Override\n-    public void changeLocalUserPassword(String principal, PasswordToken token) throws AccumuloException, AccumuloSecurityException {\n+    public void changeLocalUserPassword(String principal, PasswordToken token) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryUser user = acu.users.get(principal);\n         if (user != null)\n             user.token = token.clone();\n         else\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n     }\n-    \n+\n     @Override\n-    public void changeUserAuthorizations(String principal, Authorizations authorizations) throws AccumuloException, AccumuloSecurityException {\n+    public void changeUserAuthorizations(String principal, Authorizations authorizations) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryUser user = acu.users.get(principal);\n         if (user != null)\n             user.authorizations = authorizations;\n         else\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n     }\n-    \n+\n     @Override\n-    public Authorizations getUserAuthorizations(String principal) throws AccumuloException, AccumuloSecurityException {\n+    public Authorizations getUserAuthorizations(String principal) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryUser user = acu.users.get(principal);\n         if (user != null)\n             return user.authorizations;\n         else\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n     }\n-    \n+\n     @Override\n-    public boolean hasSystemPermission(String principal, SystemPermission perm) throws AccumuloException, AccumuloSecurityException {\n+    public boolean hasSystemPermission(String principal, SystemPermission perm) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryUser user = acu.users.get(principal);\n         if (user != null)\n             return user.permissions.contains(perm);\n         else\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n     }\n-    \n+\n     @Override\n-    public boolean hasTablePermission(String principal, String tableName, TablePermission perm) throws AccumuloException, AccumuloSecurityException {\n+    public boolean hasTablePermission(String principal, String tableName, TablePermission perm) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryTable table = acu.tables.get(tableName);\n         if (table == null)\n             throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n+\n         EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n         if (perms == null)\n             return false;\n         return perms.contains(perm);\n     }\n-    \n+\n     @Override\n     public boolean hasNamespacePermission(String principal, String namespace, NamespacePermission permission) throws AccumuloException,\n-                    AccumuloSecurityException {\n+        AccumuloSecurityException {\n         InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n         if (mockNamespace == null)\n             throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n+\n         EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n         if (perms == null)\n             return false;\n         return perms.contains(permission);\n     }\n-    \n+\n     @Override\n-    public void grantSystemPermission(String principal, SystemPermission permission) throws AccumuloException, AccumuloSecurityException {\n+    public void grantSystemPermission(String principal, SystemPermission permission) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryUser user = acu.users.get(principal);\n         if (user != null)\n             user.permissions.add(permission);\n         else\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n     }\n-    \n+\n     @Override\n-    public void grantTablePermission(String principal, String tableName, TablePermission permission) throws AccumuloException, AccumuloSecurityException {\n+    public void grantTablePermission(String principal, String tableName, TablePermission permission) throws AccumuloException,\n+        AccumuloSecurityException {\n         if (acu.users.get(principal) == null)\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+\n         InMemoryTable table = acu.tables.get(tableName);\n         if (table == null)\n             throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n+\n         EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n         if (perms == null)\n             table.userPermissions.put(principal, EnumSet.of(permission));\n         else\n             perms.add(permission);\n     }\n-    \n+\n     @Override\n     public void grantNamespacePermission(String principal, String namespace, NamespacePermission permission) throws AccumuloException,\n-                    AccumuloSecurityException {\n+        AccumuloSecurityException {\n         if (acu.users.get(principal) == null)\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+\n         InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n         if (mockNamespace == null)\n             throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n+\n         EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n         if (perms == null)\n             mockNamespace.userPermissions.put(principal, EnumSet.of(permission));\n         else\n             perms.add(permission);\n     }\n-    \n+\n     @Override\n-    public void revokeSystemPermission(String principal, SystemPermission permission) throws AccumuloException, AccumuloSecurityException {\n+    public void revokeSystemPermission(String principal, SystemPermission permission) throws AccumuloException,\n+        AccumuloSecurityException {\n         InMemoryUser user = acu.users.get(principal);\n         if (user != null)\n             user.permissions.remove(permission);\n         else\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n     }\n-    \n+\n     @Override\n-    public void revokeTablePermission(String principal, String tableName, TablePermission permission) throws AccumuloException, AccumuloSecurityException {\n+    public void revokeTablePermission(String principal, String tableName, TablePermission permission) throws AccumuloException,\n+        AccumuloSecurityException {\n         if (acu.users.get(principal) == null)\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+\n         InMemoryTable table = acu.tables.get(tableName);\n         if (table == null)\n             throw new AccumuloSecurityException(tableName, SecurityErrorCode.TABLE_DOESNT_EXIST);\n+\n         EnumSet<TablePermission> perms = table.userPermissions.get(principal);\n         if (perms != null)\n             perms.remove(permission);\n-        \n     }\n-    \n+\n     @Override\n     public void revokeNamespacePermission(String principal, String namespace, NamespacePermission permission) throws AccumuloException,\n-                    AccumuloSecurityException {\n+        AccumuloSecurityException {\n         if (acu.users.get(principal) == null)\n             throw new AccumuloSecurityException(principal, SecurityErrorCode.USER_DOESNT_EXIST);\n+\n         InMemoryNamespace mockNamespace = acu.namespaces.get(namespace);\n         if (mockNamespace == null)\n             throw new AccumuloSecurityException(namespace, SecurityErrorCode.NAMESPACE_DOESNT_EXIST);\n+\n         EnumSet<NamespacePermission> perms = mockNamespace.userPermissions.get(principal);\n         if (perms != null)\n             perms.remove(permission);\n-        \n     }\n-    \n+\n     @Override\n-    public Set<String> listLocalUsers() throws AccumuloException, AccumuloSecurityException {\n+    public Set<String> listLocalUsers() throws AccumuloException,\n+        AccumuloSecurityException {\n         return acu.users.keySet();\n     }\n-    \n+\n     @Override\n-    public DelegationToken getDelegationToken(DelegationTokenConfig cfg) throws AccumuloException, AccumuloSecurityException {\n+    public DelegationToken getDelegationToken(DelegationTokenConfig cfg) throws AccumuloException,\n+        AccumuloSecurityException {\n         return null;\n     }\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}