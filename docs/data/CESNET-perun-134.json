{
    "project_name": "CESNET-perun",
    "error_id": "134",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t/**\n\t * Returns all tasks associated with given service\n\t * \n\t * @param serviceId\n\t * @return tasks for service\n\t */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/134/TasksManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/134/TasksManagerImplApi.java\nindex 8b99acdbf19..08775ebcc5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/134/TasksManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/134/TasksManagerImplApi.java\n@@ -14,133 +14,133 @@ import java.util.List;\n  */\n public interface TasksManagerImplApi {\n \n-\tint insertTask(Task task);\n-\n-\tList<Task> listAllTasks();\n-\n-\t/**\n-\t * Returns all tasks associated with selected facility\n-\t *\n-\t * @param facilityId\n-\t * @return tasks for facility\n-\t */\n-\tList<Task> listAllTasksForFacility(int facilityId);\n-\n-\t/**\n-\t * Returns all tasks associated with given service\n-\t * \n-\t * @param serviceId\n-\t * @return tasks for service\n-\t */\n-\tList<Task> listAllTasksForService(int serviceId);\n-\n-\tList<Task> listAllTasksInState(Task.TaskStatus state);\n-\n-\tList<Task> listAllTasksNotInState(TaskStatus state);\n-\n-\tvoid updateTask(Task task);\n-\n-\tvoid removeTask(int id);\n-\n-\tint countTasks();\n-\n-\tTask getTask(int serviceId, int facilityId);\n-\n-\tTask getTask(Service service, Facility facility);\n-\n-\tTask getTaskById(int id);\n-\n-\tboolean isThereSuchTask(Service service, Facility facility);\n-\n-\tvoid removeTask(Service service, Facility facility);\n-\n-\t/**\n-\t * List TaskResults\n-\t *\n-\t * @return all TaskResults\n-\t */\n-\tList<TaskResult> getTaskResults();\n-\n-\t/**\n-\t * List newest TaskResults tied to a certain task\n-\t *\n-\t * @param taskId\n-\t * @return\n-\t */\n-\tList<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId);\n-\n-\t/**\n-\t * List TaskResults tied to a certain task\n-\t *\n-\t * @param taskId\n-\t * @return\n-\t */\n-\tList<TaskResult> getTaskResultsByTask(int taskId);\n-\n-\t/**\n-\t * List newest TaskResults tied to a certain task and destination\n-\t *\n-\t * @param taskId\n-\t * @return\n-\t */\n-\tList<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId);\n-\n-\t/**\n-\t * Get TaskResult by its ID\n-\t *\n-\t * @param taskResultId\n-\t * @return\n-\t */\n-\tTaskResult getTaskResultById(int taskResultId);\n-\n-\t/**\n-\t * Delete TaskResult by its ID\n-\t *\n-\t * @param taskResultId ID of TaskResult to delete\n-\t */\n-\tvoid deleteTaskResultById(int taskResultId);\n-\n-\t/**\n-\t * Delete all TaskResults for the particular Task\n-\t *\n-\t * @param taskId ID of Task to delete TaskResults\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteTaskResults(int taskId);\n-\n-\t/**\n-\t * Delete all TaskResults for the particular Task and Destination.\n-\t *\n-\t * @param taskId ID of Task to delete TaskResults\n-\t * @param destinationId ID of Destination to delete TaskResults\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteTaskResults(int taskId, int destinationId);\n-\n-\t/**\n-\t * Delete all TaskResults older than specified number of days\n-\t *\n-\t * @param numDays Number of days to keep\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteOldTaskResults(int numDays);\n-\n-\t/**\n-\t * Delete all TaskResults\n-\t *\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteAllTaskResults();\n-\n-\tint insertNewTaskResult(TaskResult taskResult);\n-\n-\t/**\n-\t * Returns list of tasks results for defined destinations (string representation).\n-\t *\n-\t * @param destinationsNames\n-\t * @return list of tasks results\n-\t * @throws InternalErrorException\n-\t */\n-\tList<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames);\n+    int insertTask(Task task);\n+\n+    List<Task> listAllTasks();\n+\n+    /**\n+     * Returns all tasks associated with selected facility\n+     *\n+     * @param facilityId\n+     * @return tasks for facility\n+     */\n+    List<Task> listAllTasksForFacility(int facilityId);\n+\n+    /**\n+     * Returns all tasks associated with given service\n+     *\n+     * @param serviceId\n+     * @return tasks for service\n+     */\n+    List<Task> listAllTasksForService(int serviceId);\n+\n+    List<Task> listAllTasksInState(Task.TaskStatus state);\n+\n+    List<Task> listAllTasksNotInState(TaskStatus state);\n+\n+    void updateTask(Task task);\n+\n+    void removeTask(int id);\n+\n+    int countTasks();\n+\n+    Task getTask(int serviceId, int facilityId);\n+\n+    Task getTask(Service service, Facility facility);\n+\n+    Task getTaskById(int id);\n+\n+    boolean isThereSuchTask(Service service, Facility facility);\n+\n+    void removeTask(Service service, Facility facility);\n+\n+    /**\n+     * List TaskResults\n+     *\n+     * @return all TaskResults\n+     */\n+    List<TaskResult> getTaskResults();\n+\n+    /**\n+     * List newest TaskResults tied to a certain task\n+     *\n+     * @param taskId\n+     * @return\n+     */\n+    List<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId);\n+\n+    /**\n+     * List TaskResults tied to a certain task\n+     *\n+     * @param taskId\n+     * @return\n+     */\n+    List<TaskResult> getTaskResultsByTask(int taskId);\n+\n+    /**\n+     * List newest TaskResults tied to a certain task and destination\n+     *\n+     * @param taskId\n+     * @return\n+     */\n+    List<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId);\n+\n+    /**\n+     * Get TaskResult by its ID\n+     *\n+     * @param taskResultId\n+     * @return\n+     */\n+    TaskResult getTaskResultById(int taskResultId);\n+\n+    /**\n+     * Delete TaskResult by its ID\n+     *\n+     * @param taskResultId ID of TaskResult to delete\n+     */\n+    void deleteTaskResultById(int taskResultId);\n+\n+    /**\n+     * Delete all TaskResults for the particular Task\n+     *\n+     * @param taskId ID of Task to delete TaskResults\n+     * @return number of deleted TaskResults\n+     */\n+    int deleteTaskResults(int taskId);\n+\n+    /**\n+     * Delete all TaskResults for the particular Task and Destination.\n+     *\n+     * @param taskId        ID of Task to delete TaskResults\n+     * @param destinationId ID of Destination to delete TaskResults\n+     * @return number of deleted TaskResults\n+     */\n+    int deleteTaskResults(int taskId, int destinationId);\n+\n+    /**\n+     * Delete all TaskResults older than specified number of days\n+     *\n+     * @param numDays Number of days to keep\n+     * @return number of deleted TaskResults\n+     */\n+    int deleteOldTaskResults(int numDays);\n+\n+    /**\n+     * Delete all TaskResults\n+     *\n+     * @return number of deleted TaskResults\n+     */\n+    int deleteAllTaskResults();\n+\n+    int insertNewTaskResult(TaskResult taskResult);\n+\n+    /**\n+     * Returns list of tasks results for defined destinations (string representation).\n+     *\n+     * @param destinationsNames\n+     * @return list of tasks results\n+     * @throws InternalErrorException\n+     */\n+    List<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames);\n \n }\n",
            "diff_size": 128
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/134/TasksManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/134/TasksManagerImplApi.java\nindex 8b99acdbf19..ed2a41453d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/134/TasksManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/134/TasksManagerImplApi.java\n@@ -6,141 +6,181 @@ import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.taskslib.model.Task;\n import cz.metacentrum.perun.taskslib.model.Task.TaskStatus;\n import cz.metacentrum.perun.taskslib.model.TaskResult;\n-\n import java.util.List;\n \n /**\n  * TasksManagerImplApi\n  */\n+\n+\n public interface TasksManagerImplApi {\n \n-\tint insertTask(Task task);\n-\n-\tList<Task> listAllTasks();\n-\n-\t/**\n-\t * Returns all tasks associated with selected facility\n-\t *\n-\t * @param facilityId\n-\t * @return tasks for facility\n-\t */\n-\tList<Task> listAllTasksForFacility(int facilityId);\n-\n-\t/**\n-\t * Returns all tasks associated with given service\n-\t * \n-\t * @param serviceId\n-\t * @return tasks for service\n-\t */\n-\tList<Task> listAllTasksForService(int serviceId);\n-\n-\tList<Task> listAllTasksInState(Task.TaskStatus state);\n-\n-\tList<Task> listAllTasksNotInState(TaskStatus state);\n-\n-\tvoid updateTask(Task task);\n-\n-\tvoid removeTask(int id);\n-\n-\tint countTasks();\n-\n-\tTask getTask(int serviceId, int facilityId);\n-\n-\tTask getTask(Service service, Facility facility);\n-\n-\tTask getTaskById(int id);\n-\n-\tboolean isThereSuchTask(Service service, Facility facility);\n-\n-\tvoid removeTask(Service service, Facility facility);\n-\n-\t/**\n-\t * List TaskResults\n-\t *\n-\t * @return all TaskResults\n-\t */\n-\tList<TaskResult> getTaskResults();\n-\n-\t/**\n-\t * List newest TaskResults tied to a certain task\n-\t *\n-\t * @param taskId\n-\t * @return\n-\t */\n-\tList<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId);\n-\n-\t/**\n-\t * List TaskResults tied to a certain task\n-\t *\n-\t * @param taskId\n-\t * @return\n-\t */\n-\tList<TaskResult> getTaskResultsByTask(int taskId);\n-\n-\t/**\n-\t * List newest TaskResults tied to a certain task and destination\n-\t *\n-\t * @param taskId\n-\t * @return\n-\t */\n-\tList<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId);\n-\n-\t/**\n-\t * Get TaskResult by its ID\n-\t *\n-\t * @param taskResultId\n-\t * @return\n-\t */\n-\tTaskResult getTaskResultById(int taskResultId);\n-\n-\t/**\n-\t * Delete TaskResult by its ID\n-\t *\n-\t * @param taskResultId ID of TaskResult to delete\n-\t */\n-\tvoid deleteTaskResultById(int taskResultId);\n-\n-\t/**\n-\t * Delete all TaskResults for the particular Task\n-\t *\n-\t * @param taskId ID of Task to delete TaskResults\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteTaskResults(int taskId);\n-\n-\t/**\n-\t * Delete all TaskResults for the particular Task and Destination.\n-\t *\n-\t * @param taskId ID of Task to delete TaskResults\n-\t * @param destinationId ID of Destination to delete TaskResults\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteTaskResults(int taskId, int destinationId);\n-\n-\t/**\n-\t * Delete all TaskResults older than specified number of days\n-\t *\n-\t * @param numDays Number of days to keep\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteOldTaskResults(int numDays);\n-\n-\t/**\n-\t * Delete all TaskResults\n-\t *\n-\t * @return number of deleted TaskResults\n-\t */\n-\tint deleteAllTaskResults();\n-\n-\tint insertNewTaskResult(TaskResult taskResult);\n-\n-\t/**\n-\t * Returns list of tasks results for defined destinations (string representation).\n-\t *\n-\t * @param destinationsNames\n-\t * @return list of tasks results\n-\t * @throws InternalErrorException\n-\t */\n-\tList<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames);\n-\n-}\n+\n+ int insertTask(Task task);\n+\n+\n+ List<Task> listAllTasks();\n+\n+ /**\n+  * Returns all tasks associated with selected facility\n+  *\n+  * @param facilityId\n+  * @return tasks for facility\n+  */\n+\n+\n+ List<Task> listAllTasksForFacility(int facilityId);\n+\n+ /**\n+  * Returns all tasks associated with given service\n+  * \n+  * @param serviceId\n+  * @return tasks for service\n+  */\n+\n+\n+ List<Task> listAllTasksForService(int serviceId);\n+\n+\n+ List<Task> listAllTasksInState(Task.TaskStatus state);\n+\n+\n+ List<Task> listAllTasksNotInState(TaskStatus state);\n+\n+\n+ void updateTask(Task task);\n+\n+\n+ void removeTask(int id);\n+\n+\n+ int countTasks();\n+\n+\n+ Task getTask(int serviceId, int facilityId);\n+\n+\n+ Task getTask(Service service, Facility facility);\n+\n+\n+ Task getTaskById(int id);\n+\n+\n+ boolean isThereSuchTask(Service service, Facility facility);\n+\n+\n+ void removeTask(Service service, Facility facility);\n+\n+ /**\n+  * List TaskResults\n+  *\n+  * @return all TaskResults\n+  */\n+\n+\n+ List<TaskResult> getTaskResults();\n+\n+ /**\n+  * List newest TaskResults tied to a certain task\n+  *\n+  * @param taskId\n+  * @return\n+  */\n+\n+\n+ List<TaskResult> getTaskResultsByTaskOnlyNewest(int taskId);\n+\n+ /**\n+  * List TaskResults tied to a certain task\n+  *\n+  * @param taskId\n+  * @return\n+  */\n+\n+\n+ List<TaskResult> getTaskResultsByTask(int taskId);\n+\n+ /**\n+  * List newest TaskResults tied to a certain task and destination\n+  *\n+  * @param taskId\n+  * @return\n+  */\n+\n+\n+ List<TaskResult> getTaskResultsByTaskAndDestination(int taskId, int destinationId);\n+\n+ /**\n+  * Get TaskResult by its ID\n+  *\n+  * @param taskResultId\n+  * @return\n+  */\n+\n+\n+ TaskResult getTaskResultById(int taskResultId);\n+\n+ /**\n+  * Delete TaskResult by its ID\n+  *\n+  * @param taskResultId ID of TaskResult to delete\n+  */\n+\n+\n+ void deleteTaskResultById(int taskResultId);\n+\n+ /**\n+  * Delete all TaskResults for the particular Task\n+  *\n+  * @param taskId ID of Task to delete TaskResults\n+  * @return number of deleted TaskResults\n+  */\n+\n+\n+ int deleteTaskResults(int taskId);\n+\n+ /**\n+  * Delete all TaskResults for the particular Task and Destination.\n+  *\n+  * @param taskId ID of Task to delete TaskResults\n+  * @param destinationId ID of Destination to delete TaskResults\n+  * @return number of deleted TaskResults\n+  */\n+\n+\n+ int deleteTaskResults(int taskId, int destinationId);\n+\n+ /**\n+  * Delete all TaskResults older than specified number of days\n+  *\n+  * @param numDays Number of days to keep\n+  * @return number of deleted TaskResults\n+  */\n+\n+\n+ int deleteOldTaskResults(int numDays);\n+\n+ /**\n+  * Delete all TaskResults\n+  *\n+  * @return number of deleted TaskResults\n+  */\n+\n+\n+ int deleteAllTaskResults();\n+\n+\n+ int insertNewTaskResult(TaskResult taskResult);\n+\n+ /**\n+  * Returns list of tasks results for defined destinations (string representation).\n+  *\n+  * @param destinationsNames\n+  * @return list of tasks results\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<TaskResult> getTaskResultsForDestinations(List<String> destinationsNames);\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 172
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}