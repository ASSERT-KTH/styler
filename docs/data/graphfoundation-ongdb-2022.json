{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2022",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "90",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "171",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "208",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "216",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2022/ReconnectingChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2022/ReconnectingChannel.java\nindex 4db9385f7b7..6ac6ed55a78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2022/ReconnectingChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2022/ReconnectingChannel.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.messaging;\n \n import io.netty.bootstrap.Bootstrap;\n@@ -43,202 +44,194 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public class ReconnectingChannel implements Channel\n {\n-    public static final AttributeKey<ProtocolStack> PROTOCOL_STACK_KEY = AttributeKey.valueOf( \"PROTOCOL_STACK\" );\n-\n-    private final Log log;\n-    private final Bootstrap bootstrap;\n-    private final EventLoop eventLoop;\n-    private final SocketAddress destination;\n-    private final TimeoutStrategy connectionBackoffStrategy;\n-\n-    private volatile io.netty.channel.Channel channel;\n-    private volatile ChannelFuture fChannel;\n-\n-    private volatile boolean disposed;\n-\n-    private TimeoutStrategy.Timeout connectionBackoff;\n-    private CappedLogger cappedLogger;\n-\n-    ReconnectingChannel( Bootstrap bootstrap, EventLoop eventLoop, SocketAddress destination, final Log log )\n+  public static final AttributeKey<ProtocolStack> PROTOCOL_STACK_KEY = AttributeKey.valueOf(\"PROTOCOL_STACK\");\n+\n+  private final Log log;\n+  private final Bootstrap bootstrap;\n+  private final EventLoop eventLoop;\n+  private final SocketAddress destination;\n+  private final TimeoutStrategy connectionBackoffStrategy;\n+\n+  private volatile io.netty.channel.Channel channel;\n+  private volatile ChannelFuture fChannel;\n+\n+  private volatile boolean disposed;\n+\n+  private TimeoutStrategy.Timeout connectionBackoff;\n+  private CappedLogger cappedLogger;\n+\n+  ReconnectingChannel(Bootstrap bootstrap, EventLoop eventLoop, SocketAddress destination, final Log log)\n+  {\n+    this(bootstrap, eventLoop, destination, log, new ExponentialBackoffStrategy(100, 1600, MILLISECONDS));\n+  }\n+\n+  private ReconnectingChannel(Bootstrap bootstrap, EventLoop eventLoop, SocketAddress destination, final Log log,\n+                              TimeoutStrategy connectionBackoffStrategy)\n+  {\n+    this.bootstrap = bootstrap;\n+    this.eventLoop = eventLoop;\n+    this.destination = destination;\n+    this.log = log;\n+    this.cappedLogger = new CappedLogger(log).setTimeLimit(20, TimeUnit.SECONDS, Clock.systemUTC());\n+    this.connectionBackoffStrategy = connectionBackoffStrategy;\n+    this.connectionBackoff = connectionBackoffStrategy.newTimeout();\n+  }\n+\n+  void start()\n+  {\n+    tryConnect();\n+  }\n+\n+  private synchronized void tryConnect()\n+  {\n+    if (disposed)\n     {\n-        this( bootstrap, eventLoop, destination, log, new ExponentialBackoffStrategy( 100, 1600, MILLISECONDS ) );\n-    }\n-\n-    private ReconnectingChannel( Bootstrap bootstrap, EventLoop eventLoop, SocketAddress destination, final Log log,\n-            TimeoutStrategy connectionBackoffStrategy )\n+      return;\n+    } else if (fChannel != null && !fChannel.isDone())\n     {\n-        this.bootstrap = bootstrap;\n-        this.eventLoop = eventLoop;\n-        this.destination = destination;\n-        this.log = log;\n-        this.cappedLogger = new CappedLogger( log ).setTimeLimit( 20, TimeUnit.SECONDS, Clock.systemUTC() );\n-        this.connectionBackoffStrategy = connectionBackoffStrategy;\n-        this.connectionBackoff = connectionBackoffStrategy.newTimeout();\n+      return;\n     }\n \n-    void start()\n-    {\n-        tryConnect();\n-    }\n+    fChannel = bootstrap.connect(destination.socketAddress());\n+    channel = fChannel.channel();\n \n-    private synchronized void tryConnect()\n+    fChannel.addListener((ChannelFuture f) ->\n     {\n-        if ( disposed )\n-        {\n-            return;\n-        }\n-        else if ( fChannel != null && !fChannel.isDone() )\n+      if (!f.isSuccess())\n+      {\n+        long millis = connectionBackoff.getMillis();\n+        cappedLogger.warn(\"Failed to connect to: \" + destination.socketAddress() + \". Retrying in \" + millis + \" ms\");\n+        f.channel().eventLoop().schedule(this::tryConnect, millis, MILLISECONDS);\n+        connectionBackoff.increment();\n+      } else\n+      {\n+        log.info(\"Connected: \" + f.channel());\n+        f.channel().closeFuture().addListener(closed ->\n         {\n-            return;\n-        }\n-\n-        fChannel = bootstrap.connect( destination.socketAddress() );\n-        channel = fChannel.channel();\n-\n-        fChannel.addListener( ( ChannelFuture f ) ->\n-        {\n-            if ( !f.isSuccess() )\n-            {\n-                long millis = connectionBackoff.getMillis();\n-                cappedLogger.warn( \"Failed to connect to: \" + destination.socketAddress() + \". Retrying in \" + millis + \" ms\" );\n-                f.channel().eventLoop().schedule( this::tryConnect, millis, MILLISECONDS );\n-                connectionBackoff.increment();\n-            }\n-            else\n-            {\n-                log.info( \"Connected: \" + f.channel() );\n-                f.channel().closeFuture().addListener( closed ->\n-                {\n-                    log.warn( String.format( \"Lost connection to: %s (%s)\", destination, channel.remoteAddress() ) );\n-                    connectionBackoff = connectionBackoffStrategy.newTimeout();\n-                    f.channel().eventLoop().schedule( this::tryConnect, 0, MILLISECONDS );\n-                } );\n-            }\n-        } );\n-    }\n-\n-    @Override\n-    public synchronized void dispose()\n+          log.warn(String.format(\"Lost connection to: %s (%s)\", destination, channel.remoteAddress()));\n+          connectionBackoff = connectionBackoffStrategy.newTimeout();\n+          f.channel().eventLoop().schedule(this::tryConnect, 0, MILLISECONDS);\n+        });\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public synchronized void dispose()\n+  {\n+    disposed = true;\n+    channel.close();\n+  }\n+\n+  @Override\n+  public boolean isDisposed()\n+  {\n+    return disposed;\n+  }\n+\n+  @Override\n+  public boolean isOpen()\n+  {\n+    return channel.isOpen();\n+  }\n+\n+  @Override\n+  public Future<Void> write(Object msg)\n+  {\n+    return write(msg, false);\n+  }\n+\n+  @Override\n+  public Future<Void> writeAndFlush(Object msg)\n+  {\n+    return write(msg, true);\n+  }\n+\n+  private Future<Void> write(Object msg, boolean flush)\n+  {\n+    if (disposed)\n     {\n-        disposed = true;\n-        channel.close();\n+      throw new IllegalStateException(\"sending on disposed channel\");\n     }\n \n-    @Override\n-    public boolean isDisposed()\n+    if (channel.isActive())\n     {\n-        return disposed;\n-    }\n-\n-    @Override\n-    public boolean isOpen()\n+      if (flush)\n+      {\n+        return channel.writeAndFlush(msg);\n+      } else\n+      {\n+        return channel.write(msg);\n+      }\n+    } else\n     {\n-        return channel.isOpen();\n+      Promise<Void> promise = eventLoop.newPromise();\n+      BiConsumer<io.netty.channel.Channel, Object> writer;\n+\n+      if (flush)\n+      {\n+        writer = (channel, message) -> chain(channel.writeAndFlush(msg), promise);\n+      } else\n+      {\n+        writer = (channel, mmessage) -> chain(channel.write(msg), promise);\n+      }\n+\n+      deferredWrite(msg, fChannel, promise, true, writer);\n+      return promise;\n     }\n-\n-    @Override\n-    public Future<Void> write( Object msg )\n-    {\n-        return write( msg, false );\n-    }\n-\n-    @Override\n-    public Future<Void> writeAndFlush( Object msg )\n+  }\n+\n+  /**\n+   * Chains a channel future to a promise. Used when the returned promise\n+   * was not allocated through the channel and cannot be used as the\n+   * first-hand promise for the I/O operation.\n+   */\n+  private static void chain(ChannelFuture when, Promise<Void> then)\n+  {\n+    when.addListener(f -> {\n+      if (f.isSuccess())\n+      {\n+        then.setSuccess(when.get());\n+      } else\n+      {\n+        then.setFailure(when.cause());\n+      }\n+    });\n+  }\n+\n+  /**\n+   * Will try to reconnect once before giving up on a send. The reconnection *must* happen\n+   * after write was scheduled. This is necessary to provide proper ordering when a message\n+   * is sent right after the non-blocking channel was setup and before the server is ready\n+   * to accept a connection. This happens frequently in tests.\n+   */\n+  private void deferredWrite(Object msg, ChannelFuture channelFuture, Promise<Void> promise, boolean firstAttempt,\n+                             BiConsumer<io.netty.channel.Channel, Object> writer)\n+  {\n+    channelFuture.addListener((ChannelFutureListener) f ->\n     {\n-        return write( msg, true );\n-    }\n-\n-    private Future<Void> write( Object msg, boolean flush )\n-    {\n-        if ( disposed )\n-        {\n-            throw new IllegalStateException( \"sending on disposed channel\" );\n-        }\n-\n-        if ( channel.isActive() )\n-        {\n-            if ( flush )\n-            {\n-                return channel.writeAndFlush( msg );\n-            }\n-            else\n-            {\n-                return channel.write( msg );\n-            }\n-        }\n-        else\n-        {\n-            Promise<Void> promise = eventLoop.newPromise();\n-            BiConsumer<io.netty.channel.Channel,Object> writer;\n-\n-            if ( flush )\n-            {\n-                writer = ( channel, message ) -> chain( channel.writeAndFlush( msg ), promise );\n-            }\n-            else\n-            {\n-                writer = ( channel, mmessage ) -> chain( channel.write( msg ), promise );\n-            }\n-\n-            deferredWrite( msg, fChannel, promise, true, writer );\n-            return promise;\n-        }\n-    }\n-\n-    /**\n-     * Chains a channel future to a promise. Used when the returned promise\n-     * was not allocated through the channel and cannot be used as the\n-     * first-hand promise for the I/O operation.\n-     */\n-    private static void chain( ChannelFuture when, Promise<Void> then )\n-    {\n-        when.addListener( f -> {\n-            if ( f.isSuccess() )\n-            {\n-                then.setSuccess( when.get() );\n-            }\n-            else\n-            {\n-                then.setFailure( when.cause() );\n-            }\n-        } );\n-    }\n-\n-    /**\n-     * Will try to reconnect once before giving up on a send. The reconnection *must* happen\n-     * after write was scheduled. This is necessary to provide proper ordering when a message\n-     * is sent right after the non-blocking channel was setup and before the server is ready\n-     * to accept a connection. This happens frequently in tests.\n-     */\n-    private void deferredWrite( Object msg, ChannelFuture channelFuture, Promise<Void> promise, boolean firstAttempt,\n-            BiConsumer<io.netty.channel.Channel,Object> writer )\n-    {\n-        channelFuture.addListener( (ChannelFutureListener) f ->\n-        {\n-            if ( f.isSuccess() )\n-            {\n-                writer.accept( f.channel(), msg );\n-            }\n-            else if ( firstAttempt )\n-            {\n-                tryConnect();\n-                deferredWrite( msg, fChannel, promise, false, writer );\n-            }\n-            else\n-            {\n-                promise.setFailure( f.cause() );\n-            }\n-        } );\n-    }\n-\n-    public Optional<ProtocolStack> installedProtocolStack()\n-    {\n-        return Optional.ofNullable( channel.attr( PROTOCOL_STACK_KEY ).get() );\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"ReconnectingChannel{\" + \"channel=\" + channel + \", disposed=\" + disposed + '}';\n-    }\n+      if (f.isSuccess())\n+      {\n+        writer.accept(f.channel(), msg);\n+      } else if (firstAttempt)\n+      {\n+        tryConnect();\n+        deferredWrite(msg, fChannel, promise, false, writer);\n+      } else\n+      {\n+        promise.setFailure(f.cause());\n+      }\n+    });\n+  }\n+\n+  public Optional<ProtocolStack> installedProtocolStack()\n+  {\n+    return Optional.ofNullable(channel.attr(PROTOCOL_STACK_KEY).get());\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"ReconnectingChannel{\" + \"channel=\" + channel + \", disposed=\" + disposed + '}';\n+  }\n }\n",
            "diff_size": 262
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2022/ReconnectingChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2022/ReconnectingChannel.java\nindex 4db9385f7b7..858c4557574 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2022/ReconnectingChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2022/ReconnectingChannel.java\n@@ -94,8 +94,7 @@ public class ReconnectingChannel implements Channel\n \n         fChannel = bootstrap.connect( destination.socketAddress() );\n         channel = fChannel.channel();\n-\n-        fChannel.addListener( ( ChannelFuture f ) ->\n+fChannel.addListener( ( ChannelFuture f ) ->\n         {\n             if ( !f.isSuccess() )\n             {\n@@ -192,7 +191,8 @@ public class ReconnectingChannel implements Channel\n      */\n     private static void chain( ChannelFuture when, Promise<Void> then )\n     {\n-        when.addListener( f -> {\n+        when.addListener( f ->\n+{\n             if ( f.isSuccess() )\n             {\n                 then.setSuccess( when.get() );\n@@ -210,8 +210,7 @@ public class ReconnectingChannel implements Channel\n      * is sent right after the non-blocking channel was setup and before the server is ready\n      * to accept a connection. This happens frequently in tests.\n      */\n-    private void deferredWrite( Object msg, ChannelFuture channelFuture, Promise<Void> promise, boolean firstAttempt,\n-            BiConsumer<io.netty.channel.Channel,Object> writer )\n+    private void deferredWrite( Object msg, ChannelFuture channelFuture, Promise<Void> promise, boolean firstAttempt, BiConsumer<io.netty.channel.Channel,Object> writer )\n     {\n         channelFuture.addListener( (ChannelFutureListener) f ->\n         {\n@@ -241,4 +240,4 @@ public class ReconnectingChannel implements Channel\n     {\n         return \"ReconnectingChannel{\" + \"channel=\" + channel + \", disposed=\" + disposed + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "30",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "90",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "209",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "61",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2022/ReconnectingChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2022/ReconnectingChannel.java\nindex 4db9385f7b7..4ce234a6e3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2022/ReconnectingChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2022/ReconnectingChannel.java\n@@ -25,37 +25,30 @@ import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.EventLoop;\n import io.netty.util.AttributeKey;\n import io.netty.util.concurrent.Promise;\n-\n import java.time.Clock;\n import java.util.Optional;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.function.BiConsumer;\n-\n import org.neo4j.causalclustering.helper.ExponentialBackoffStrategy;\n import org.neo4j.causalclustering.helper.TimeoutStrategy;\n import org.neo4j.causalclustering.protocol.handshake.ProtocolStack;\n import org.neo4j.helpers.SocketAddress;\n import org.neo4j.kernel.impl.util.CappedLogger;\n import org.neo4j.logging.Log;\n-\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public class ReconnectingChannel implements Channel\n {\n     public static final AttributeKey<ProtocolStack> PROTOCOL_STACK_KEY = AttributeKey.valueOf( \"PROTOCOL_STACK\" );\n-\n     private final Log log;\n     private final Bootstrap bootstrap;\n     private final EventLoop eventLoop;\n     private final SocketAddress destination;\n     private final TimeoutStrategy connectionBackoffStrategy;\n-\n     private volatile io.netty.channel.Channel channel;\n     private volatile ChannelFuture fChannel;\n-\n     private volatile boolean disposed;\n-\n     private TimeoutStrategy.Timeout connectionBackoff;\n     private CappedLogger cappedLogger;\n \n@@ -64,8 +57,7 @@ public class ReconnectingChannel implements Channel\n         this( bootstrap, eventLoop, destination, log, new ExponentialBackoffStrategy( 100, 1600, MILLISECONDS ) );\n     }\n \n-    private ReconnectingChannel( Bootstrap bootstrap, EventLoop eventLoop, SocketAddress destination, final Log log,\n-            TimeoutStrategy connectionBackoffStrategy )\n+    private ReconnectingChannel( Bootstrap bootstrap, EventLoop eventLoop, SocketAddress destination, final Log log, TimeoutStrategy connectionBackoffStrategy )\n     {\n         this.bootstrap = bootstrap;\n         this.eventLoop = eventLoop;\n@@ -87,34 +79,34 @@ public class ReconnectingChannel implements Channel\n         {\n             return;\n         }\n-        else if ( fChannel != null && !fChannel.isDone() )\n+        else\n+        if ( fChannel != null&& ! fChannel.isDone() )\n         {\n             return;\n         }\n \n         fChannel = bootstrap.connect( destination.socketAddress() );\n         channel = fChannel.channel();\n-\n-        fChannel.addListener( ( ChannelFuture f ) ->\n-        {\n-            if ( !f.isSuccess() )\n-            {\n-                long millis = connectionBackoff.getMillis();\n-                cappedLogger.warn( \"Failed to connect to: \" + destination.socketAddress() + \". Retrying in \" + millis + \" ms\" );\n-                f.channel().eventLoop().schedule( this::tryConnect, millis, MILLISECONDS );\n-                connectionBackoff.increment();\n-            }\n-            else\n-            {\n-                log.info( \"Connected: \" + f.channel() );\n-                f.channel().closeFuture().addListener( closed ->\n-                {\n-                    log.warn( String.format( \"Lost connection to: %s (%s)\", destination, channel.remoteAddress() ) );\n-                    connectionBackoff = connectionBackoffStrategy.newTimeout();\n-                    f.channel().eventLoop().schedule( this::tryConnect, 0, MILLISECONDS );\n-                } );\n-            }\n-        } );\n+        fChannel.addListener( ( ChannelFuture f) ->\n+                              {\n+                                  if ( ! f.isSuccess() )\n+                                  {\n+                                      long millis = connectionBackoff.getMillis();\n+                                      cappedLogger.warn( \"Failed to connect to: \" + destination.socketAddress() + \". Retrying in \" + millis + \" ms\" );\n+                                      f.channel().eventLoop().schedule( this:: tryConnect, millis, MILLISECONDS );\n+                                      connectionBackoff.increment();\n+                                  }\n+                                  else\n+                                  {\n+                                      log.info( \"Connected: \" + f.channel() );\n+                                      f.channel().closeFuture().addListener( closed ->\n+                                                                             {\n+                                                                                 log.warn( String.format( \"Lost connection to: %s (%s)\", destination, channel.remoteAddress() ) );\n+                                                                                 connectionBackoff = connectionBackoffStrategy.newTimeout();\n+                                                                                 f.channel().eventLoop().schedule( this:: tryConnect, 0, MILLISECONDS );\n+                                                                             } );\n+                                  }\n+                              } );\n     }\n \n     @Override\n@@ -170,7 +162,6 @@ public class ReconnectingChannel implements Channel\n         {\n             Promise<Void> promise = eventLoop.newPromise();\n             BiConsumer<io.netty.channel.Channel,Object> writer;\n-\n             if ( flush )\n             {\n                 writer = ( channel, message ) -> chain( channel.writeAndFlush( msg ), promise );\n@@ -190,18 +181,20 @@ public class ReconnectingChannel implements Channel\n      * was not allocated through the channel and cannot be used as the\n      * first-hand promise for the I/O operation.\n      */\n+\n     private static void chain( ChannelFuture when, Promise<Void> then )\n     {\n-        when.addListener( f -> {\n-            if ( f.isSuccess() )\n-            {\n-                then.setSuccess( when.get() );\n-            }\n-            else\n-            {\n-                then.setFailure( when.cause() );\n-            }\n-        } );\n+        when.addListener( f ->\n+                          {\n+                              if ( f.isSuccess() )\n+                              {\n+                                  then.setSuccess( when.get() );\n+                              }\n+                              else\n+                              {\n+                                  then.setFailure( when.cause() );\n+                              }\n+                          } );\n     }\n \n     /**\n@@ -210,25 +203,26 @@ public class ReconnectingChannel implements Channel\n      * is sent right after the non-blocking channel was setup and before the server is ready\n      * to accept a connection. This happens frequently in tests.\n      */\n-    private void deferredWrite( Object msg, ChannelFuture channelFuture, Promise<Void> promise, boolean firstAttempt,\n-            BiConsumer<io.netty.channel.Channel,Object> writer )\n+\n+    private void deferredWrite( Object msg, ChannelFuture channelFuture, Promise<Void> promise, boolean firstAttempt, BiConsumer<io.netty.channel.Channel,Object> writer )\n     {\n-        channelFuture.addListener( (ChannelFutureListener) f ->\n-        {\n-            if ( f.isSuccess() )\n-            {\n-                writer.accept( f.channel(), msg );\n-            }\n-            else if ( firstAttempt )\n-            {\n-                tryConnect();\n-                deferredWrite( msg, fChannel, promise, false, writer );\n-            }\n-            else\n-            {\n-                promise.setFailure( f.cause() );\n-            }\n-        } );\n+        channelFuture.addListener( ( ChannelFutureListener) f ->\n+                                                            {\n+                                                                if ( f.isSuccess() )\n+                                                                {\n+                                                                    writer.accept( f.channel(), msg );\n+                                                                }\n+                                                                else\n+                                                                if ( firstAttempt )\n+                                                                {\n+                                                                    tryConnect();\n+                                                                    deferredWrite( msg, fChannel, promise, false, writer );\n+                                                                }\n+                                                                else\n+                                                                {\n+                                                                    promise.setFailure( f.cause() );\n+                                                                }\n+                                                            } );\n     }\n \n     public Optional<ProtocolStack> installedProtocolStack()\n@@ -239,6 +233,6 @@ public class ReconnectingChannel implements Channel\n     @Override\n     public String toString()\n     {\n-        return \"ReconnectingChannel{\" + \"channel=\" + channel + \", disposed=\" + disposed + '}';\n+        return \"ReconnectingChannel{\" + \"channel=\" + channel+ \", disposed=\" + disposed + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}