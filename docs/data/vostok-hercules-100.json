{
    "project_name": "vostok-hercules",
    "error_id": "100",
    "information": {
        "errors": [
            {
                "line": "57",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 179).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    private boolean create(StreamTask task) {\n        CreateTopicResult result = kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n        if (result == CreateTopicResult.FAILED) {\n            //Topic creation failed. Task will be deleted, since it difficult to determine cause of failure.\n            return true;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/100/StreamTaskExecutor.java\nindex bb1b6fcba4f..303f8f6edc4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler/100/StreamTaskExecutor.java\n@@ -54,7 +54,7 @@ public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n     }\n \n     private boolean create(StreamTask task) {\n-        CreateTopicResult result = kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n+    CreateTopicResult result = kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n         if (result == CreateTopicResult.FAILED) {\n             //Topic creation failed. Task will be deleted, since it difficult to determine cause of failure.\n             return true;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/100/StreamTaskExecutor.java\nindex bb1b6fcba4f..37fe69513c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/intellij/100/StreamTaskExecutor.java\n@@ -17,112 +17,113 @@ import java.util.Map;\n  * @author Gregory Koshelev\n  */\n public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(StreamTaskExecutor.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(StreamTaskExecutor.class);\n \n-    private final KafkaManager kafkaManager;\n-    private final StreamRepository streamRepository;\n-    private final Meter createdStreamCount;\n-    private final Meter deletedStreamCount;\n-    private final Meter updatedStreamCount;\n+  private final KafkaManager kafkaManager;\n+  private final StreamRepository streamRepository;\n+  private final Meter createdStreamCount;\n+  private final Meter deletedStreamCount;\n+  private final Meter updatedStreamCount;\n \n-    private final Map<StreamTaskType, StreamTaskProcessor> processors;\n+  private final Map<StreamTaskType, StreamTaskProcessor> processors;\n \n-    protected StreamTaskExecutor(\n-            StreamTaskRepository streamTaskRepository,\n-            long pollingTimeoutMillis,\n-            KafkaManager kafkaManager,\n-            StreamRepository streamRepository,\n-            MetricsCollector metricsCollector) {\n-        super(streamTaskRepository, pollingTimeoutMillis);\n-        this.kafkaManager = kafkaManager;\n-        this.streamRepository = streamRepository;\n-        this.createdStreamCount = metricsCollector.meter(\"createdStreamCount\");\n-        this.deletedStreamCount = metricsCollector.meter(\"deletedStreamCount\");\n-        this.updatedStreamCount = metricsCollector.meter(\"updatedStreamCount\");\n+  protected StreamTaskExecutor(\n+    StreamTaskRepository streamTaskRepository,\n+    long pollingTimeoutMillis,\n+    KafkaManager kafkaManager,\n+    StreamRepository streamRepository,\n+    MetricsCollector metricsCollector) {\n+    super(streamTaskRepository, pollingTimeoutMillis);\n+    this.kafkaManager = kafkaManager;\n+    this.streamRepository = streamRepository;\n+    this.createdStreamCount = metricsCollector.meter(\"createdStreamCount\");\n+    this.deletedStreamCount = metricsCollector.meter(\"deletedStreamCount\");\n+    this.updatedStreamCount = metricsCollector.meter(\"updatedStreamCount\");\n \n-        Map<StreamTaskType, StreamTaskProcessor> processors = new EnumMap<>(StreamTaskType.class);\n-        processors.put(StreamTaskType.CREATE, this::create);\n-        processors.put(StreamTaskType.DELETE, this::delete);\n-        processors.put(StreamTaskType.INCREASE_PARTITIONS, this::increasePartitions);\n-        processors.put(StreamTaskType.CHANGE_TTL, this::changeTtl);\n-        this.processors = processors;\n-    }\n+    Map<StreamTaskType, StreamTaskProcessor> processors = new EnumMap<>(StreamTaskType.class);\n+    processors.put(StreamTaskType.CREATE, this::create);\n+    processors.put(StreamTaskType.DELETE, this::delete);\n+    processors.put(StreamTaskType.INCREASE_PARTITIONS, this::increasePartitions);\n+    processors.put(StreamTaskType.CHANGE_TTL, this::changeTtl);\n+    this.processors = processors;\n+  }\n \n-    @Override\n-    protected boolean execute(StreamTask task) {\n-        return processors.getOrDefault(task.getType(), this::unknown).process(task);\n-    }\n+  @Override\n+  protected boolean execute(StreamTask task) {\n+    return processors.getOrDefault(task.getType(), this::unknown).process(task);\n+  }\n \n-    private boolean create(StreamTask task) {\n-        CreateTopicResult result = kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n-        if (result == CreateTopicResult.FAILED) {\n-            //Topic creation failed. Task will be deleted, since it difficult to determine cause of failure.\n-            return true;\n-        }\n-        LOGGER.info(\"Created topic '{}'\", task.getStream().getName());\n-        try {\n-            streamRepository.create(task.getStream());\n-        } catch (Exception ex) {\n-            LOGGER.error(\"Stream creation failed with exception\", ex);\n-            return false;\n-        }\n-        createdStreamCount.mark();\n-        return true;\n+  private boolean create(StreamTask task) {\n+    CreateTopicResult result =\n+      kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n+    if (result == CreateTopicResult.FAILED) {\n+      //Topic creation failed. Task will be deleted, since it difficult to determine cause of failure.\n+      return true;\n     }\n-\n-    private boolean delete(StreamTask task) {\n-        try {\n-            streamRepository.delete(task.getStream().getName());\n-        } catch (Exception ex) {\n-            LOGGER.error(\"Stream deletion failed with exception\", ex);\n-            return false;\n-        }\n-        kafkaManager.deleteTopic(task.getStream().getName());//TODO: process deletion error\n-        LOGGER.info(\"Deleted topic '{}'\", task.getStream().getName());\n-        deletedStreamCount.mark();\n-        return true;\n+    LOGGER.info(\"Created topic '{}'\", task.getStream().getName());\n+    try {\n+      streamRepository.create(task.getStream());\n+    } catch (Exception ex) {\n+      LOGGER.error(\"Stream creation failed with exception\", ex);\n+      return false;\n     }\n+    createdStreamCount.mark();\n+    return true;\n+  }\n \n-    private boolean increasePartitions(StreamTask task) {\n-        kafkaManager.increasePartitions(task.getStream().getName(), task.getStream().getPartitions());//TODO: process error\n-        LOGGER.info(\"Increase partitions for topic '{}\", task.getStream().getName());\n-        try {\n-            streamRepository.update(task.getStream());\n-        } catch (Exception ex) {\n-            LOGGER.error(\"Stream update failed with exception\", ex);\n-            return false;\n-        }\n-        updatedStreamCount.mark();\n-        return true;\n-\n+  private boolean delete(StreamTask task) {\n+    try {\n+      streamRepository.delete(task.getStream().getName());\n+    } catch (Exception ex) {\n+      LOGGER.error(\"Stream deletion failed with exception\", ex);\n+      return false;\n     }\n+    kafkaManager.deleteTopic(task.getStream().getName());//TODO: process deletion error\n+    LOGGER.info(\"Deleted topic '{}'\", task.getStream().getName());\n+    deletedStreamCount.mark();\n+    return true;\n+  }\n \n-    private boolean changeTtl(StreamTask task) {\n-        kafkaManager.changeTtl(task.getStream().getName(), task.getStream().getTtl());\n-        LOGGER.info(\"Change ttl for topic '{}'\", task.getStream().getName());\n-        try {\n-            streamRepository.update(task.getStream());\n-        } catch (Exception ex) {\n-            LOGGER.error(\"Stream update failed with exception\", ex);\n-            return false;\n-        }\n-        updatedStreamCount.mark();\n-        return true;\n+  private boolean increasePartitions(StreamTask task) {\n+    kafkaManager.increasePartitions(task.getStream().getName(), task.getStream().getPartitions());//TODO: process error\n+    LOGGER.info(\"Increase partitions for topic '{}\", task.getStream().getName());\n+    try {\n+      streamRepository.update(task.getStream());\n+    } catch (Exception ex) {\n+      LOGGER.error(\"Stream update failed with exception\", ex);\n+      return false;\n     }\n+    updatedStreamCount.mark();\n+    return true;\n \n-    private boolean unknown(StreamTask task) {\n-        LOGGER.error(\"Unknown task type {}\", task.getType());\n-        return true;\n-    }\n+  }\n \n-    @FunctionalInterface\n-    private interface StreamTaskProcessor {\n-        /**\n-         * Process the task.\n-         *\n-         * @param task the task\n-         * @return {@code true} if task was processed. Return {@code false} if the task should be retried.\n-         */\n-        boolean process(StreamTask task);\n+  private boolean changeTtl(StreamTask task) {\n+    kafkaManager.changeTtl(task.getStream().getName(), task.getStream().getTtl());\n+    LOGGER.info(\"Change ttl for topic '{}'\", task.getStream().getName());\n+    try {\n+      streamRepository.update(task.getStream());\n+    } catch (Exception ex) {\n+      LOGGER.error(\"Stream update failed with exception\", ex);\n+      return false;\n     }\n+    updatedStreamCount.mark();\n+    return true;\n+  }\n+\n+  private boolean unknown(StreamTask task) {\n+    LOGGER.error(\"Unknown task type {}\", task.getType());\n+    return true;\n+  }\n+\n+  @FunctionalInterface\n+  private interface StreamTaskProcessor {\n+    /**\n+     * Process the task.\n+     *\n+     * @param task the task\n+     * @return {@code true} if task was processed. Return {@code false} if the task should be retried.\n+     */\n+    boolean process(StreamTask task);\n+  }\n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/100/StreamTaskExecutor.java\nindex bb1b6fcba4f..99473bf90d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/naturalize/100/StreamTaskExecutor.java\n@@ -33,7 +33,7 @@ public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n             KafkaManager kafkaManager,\n             StreamRepository streamRepository,\n             MetricsCollector metricsCollector) {\n-        super(streamTaskRepository, pollingTimeoutMillis);\n+    super(streamTaskRepository, pollingTimeoutMillis);\n         this.kafkaManager = kafkaManager;\n         this.streamRepository = streamRepository;\n         this.createdStreamCount = metricsCollector.meter(\"createdStreamCount\");\n@@ -94,7 +94,6 @@ public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n         }\n         updatedStreamCount.mark();\n         return true;\n-\n     }\n \n     private boolean changeTtl(StreamTask task) {\n@@ -125,4 +124,4 @@ public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n          */\n         boolean process(StreamTask task);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/100/StreamTaskExecutor.java\nindex bb1b6fcba4f..cdeab7b902c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/codebuff/100/StreamTaskExecutor.java\n@@ -9,30 +9,30 @@ import ru.kontur.vostok.hercules.meta.task.TaskExecutor;\n import ru.kontur.vostok.hercules.meta.task.stream.StreamTask;\n import ru.kontur.vostok.hercules.meta.task.stream.StreamTaskRepository;\n import ru.kontur.vostok.hercules.meta.task.stream.StreamTaskType;\n-\n import java.util.EnumMap;\n import java.util.Map;\n \n /**\n  * @author Gregory Koshelev\n  */\n+\n+\n public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(StreamTaskExecutor.class);\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(StreamTaskExecutor.class);\n     private final KafkaManager kafkaManager;\n     private final StreamRepository streamRepository;\n     private final Meter createdStreamCount;\n     private final Meter deletedStreamCount;\n     private final Meter updatedStreamCount;\n-\n     private final Map<StreamTaskType, StreamTaskProcessor> processors;\n \n     protected StreamTaskExecutor(\n-            StreamTaskRepository streamTaskRepository,\n-            long pollingTimeoutMillis,\n-            KafkaManager kafkaManager,\n-            StreamRepository streamRepository,\n-            MetricsCollector metricsCollector) {\n+        StreamTaskRepository streamTaskRepository,\n+        long pollingTimeoutMillis,\n+        KafkaManager kafkaManager,\n+        StreamRepository streamRepository, MetricsCollector metricsCollector\n+    ) {\n         super(streamTaskRepository, pollingTimeoutMillis);\n         this.kafkaManager = kafkaManager;\n         this.streamRepository = streamRepository;\n@@ -50,62 +50,87 @@ public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n \n     @Override\n     protected boolean execute(StreamTask task) {\n-        return processors.getOrDefault(task.getType(), this::unknown).process(task);\n+        return processors.getOrDefault(task.getType(), this::unknown)\n+        .process(task);\n     }\n \n     private boolean create(StreamTask task) {\n-        CreateTopicResult result = kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n+        CreateTopicResult result = kafkaManager.createTopic(\n+            task.getStream()\n+            .getName(),\n+            task.getStream()\n+            .getPartitions(),\n+            task.getStream()\n+            .getTtl()\n+);//TODO: process creation error\n         if (result == CreateTopicResult.FAILED) {\n             //Topic creation failed. Task will be deleted, since it difficult to determine cause of failure.\n             return true;\n         }\n-        LOGGER.info(\"Created topic '{}'\", task.getStream().getName());\n+\n+        LOGGER.info(\"Created topic '{}'\", task.getStream()\n+        .getName());\n+\n         try {\n             streamRepository.create(task.getStream());\n         } catch (Exception ex) {\n             LOGGER.error(\"Stream creation failed with exception\", ex);\n             return false;\n         }\n+\n         createdStreamCount.mark();\n         return true;\n     }\n \n     private boolean delete(StreamTask task) {\n         try {\n-            streamRepository.delete(task.getStream().getName());\n+            streamRepository.delete(task.getStream()\n+            .getName());\n         } catch (Exception ex) {\n             LOGGER.error(\"Stream deletion failed with exception\", ex);\n             return false;\n         }\n-        kafkaManager.deleteTopic(task.getStream().getName());//TODO: process deletion error\n-        LOGGER.info(\"Deleted topic '{}'\", task.getStream().getName());\n+\n+        kafkaManager.deleteTopic(task.getStream()\n+        .getName());//TODO: process deletion error\n+        LOGGER.info(\"Deleted topic '{}'\", task.getStream()\n+        .getName());\n         deletedStreamCount.mark();\n         return true;\n     }\n \n     private boolean increasePartitions(StreamTask task) {\n-        kafkaManager.increasePartitions(task.getStream().getName(), task.getStream().getPartitions());//TODO: process error\n-        LOGGER.info(\"Increase partitions for topic '{}\", task.getStream().getName());\n+        kafkaManager.increasePartitions(task.getStream()\n+        .getName(), task.getStream()\n+        .getPartitions());//TODO: process error\n+        LOGGER.info(\"Increase partitions for topic '{}\", task.getStream()\n+        .getName());\n+\n         try {\n             streamRepository.update(task.getStream());\n         } catch (Exception ex) {\n             LOGGER.error(\"Stream update failed with exception\", ex);\n             return false;\n         }\n+\n         updatedStreamCount.mark();\n         return true;\n-\n     }\n \n     private boolean changeTtl(StreamTask task) {\n-        kafkaManager.changeTtl(task.getStream().getName(), task.getStream().getTtl());\n-        LOGGER.info(\"Change ttl for topic '{}'\", task.getStream().getName());\n+        kafkaManager.changeTtl(task.getStream()\n+        .getName(), task.getStream()\n+        .getTtl());\n+        LOGGER.info(\"Change ttl for topic '{}'\", task.getStream()\n+        .getName());\n+\n         try {\n             streamRepository.update(task.getStream());\n         } catch (Exception ex) {\n             LOGGER.error(\"Stream update failed with exception\", ex);\n             return false;\n         }\n+\n         updatedStreamCount.mark();\n         return true;\n     }\n@@ -125,4 +150,4 @@ public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n          */\n         boolean process(StreamTask task);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/100/StreamTaskExecutor.java\nindex bb1b6fcba4f..303f8f6edc4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/errored/1/100/StreamTaskExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vostok-hercules/styler_three_grams/100/StreamTaskExecutor.java\n@@ -54,7 +54,7 @@ public class StreamTaskExecutor extends TaskExecutor<StreamTask> {\n     }\n \n     private boolean create(StreamTask task) {\n-        CreateTopicResult result = kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n+    CreateTopicResult result = kafkaManager.createTopic(task.getStream().getName(), task.getStream().getPartitions(), task.getStream().getTtl());//TODO: process creation error\n         if (result == CreateTopicResult.FAILED) {\n             //Topic creation failed. Task will be deleted, since it difficult to determine cause of failure.\n             return true;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}