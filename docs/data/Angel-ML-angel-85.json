{
    "project_name": "Angel-ML-angel",
    "error_id": "85",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/85/ServerIntFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/85/ServerIntFloatRow.java\nindex 4a1614398fd..03212c1f40b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/85/ServerIntFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/85/ServerIntFloatRow.java\n@@ -56,14 +56,14 @@ public class ServerIntFloatRow extends ServerFloatRow {\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntFloatVector innerRow) {\n+                           IntFloatVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n@@ -73,10 +73,10 @@ public class ServerIntFloatRow extends ServerFloatRow {\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n@@ -135,7 +135,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * Set a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements values\n+   * @param values  elements values\n    */\n   public void set(int[] indices, float[] values) {\n     assert indices.length == values.length;\n@@ -158,7 +158,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * Add a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements plus values\n+   * @param values  elements plus values\n    */\n   public void addTo(int[] indices, float[] values) {\n     assert indices.length == values.length;\n@@ -398,7 +398,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n \n   @Override\n   public ServerRow\n-adaptiveClone() {\n+  adaptiveClone() {\n     startRead();\n     try {\n       if (intFloatRow.isSparse()) {\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "394",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/85/ServerIntFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/85/ServerIntFloatRow.java\nindex 4a1614398fd..b790640b063 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/85/ServerIntFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/85/ServerIntFloatRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -186,8 +185,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n     return intFloatRow.getStorage().entryIterator();\n   }\n \n-\n-  @Override\n+@Override\n   public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n@@ -196,35 +194,28 @@ public class ServerIntFloatRow extends ServerFloatRow {\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -315,8 +306,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int size() {\n     return intFloatRow.size();\n   }\n@@ -391,22 +381,19 @@ public class ServerIntFloatRow extends ServerFloatRow {\n     try {\n       return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n           intFloatRow.clone());\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (intFloatRow.isSparse()) {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(),\n+        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(),\n                     intFloatRow.getStorage().getValues()));\n-      } else {\n+  } else {\n         return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n             intFloatRow);\n       }\n@@ -442,7 +429,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeFloat(initAndGet(in.readInt(), func));\n@@ -483,4 +470,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "394",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "405",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "407",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/85/ServerIntFloatRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/85/ServerIntFloatRow.java\nindex 4a1614398fd..2b6f692bba5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/85/ServerIntFloatRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/85/ServerIntFloatRow.java\n@@ -36,6 +36,7 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * The row with \"int\" index type and \"float\" value type in PS\n  */\n+\n public class ServerIntFloatRow extends ServerFloatRow {\n \n   private static final Log LOG = LogFactory.getLog(ServerIntFloatRow.class);\n@@ -62,8 +63,8 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntFloatVector innerRow) {\n+\n+  public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntFloatVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n@@ -79,6 +80,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n+\n   public ServerIntFloatRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n@@ -88,6 +90,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    *\n    * @param rowType row type\n    */\n+\n   public ServerIntFloatRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -103,6 +106,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public float get(int index) {\n     return intFloatRow.get(index - startColInt);\n   }\n@@ -113,6 +117,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(int index, float value) {\n     intFloatRow.set(index - startColInt, value);\n   }\n@@ -123,6 +128,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public float[] get(int[] indices) {\n     float[] values = new float[indices.length];\n     for (int i = 0; i < indices.length; i++) {\n@@ -137,6 +143,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(int[] indices, float[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -150,6 +157,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(int index, float value) {\n     set(index, get(index) + value);\n   }\n@@ -160,6 +168,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(int[] indices, float[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -172,6 +181,7 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    *\n    * @return all element values\n    */\n+\n   private float[] getValues() {\n     return intFloatRow.getStorage().getValues();\n   }\n@@ -182,13 +192,14 @@ public class ServerIntFloatRow extends ServerFloatRow {\n    *\n    * @return all element values\n    */\n+\n   public ObjectIterator<Int2FloatMap.Entry> getIter() {\n     return intFloatRow.getStorage().entryIterator();\n   }\n \n-\n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -196,38 +207,30 @@ public class ServerIntFloatRow extends ServerFloatRow {\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n         case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n         case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n-\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -315,7 +318,6 @@ public class ServerIntFloatRow extends ServerFloatRow {\n     }\n   }\n \n-\n   @Override\n   public int size() {\n     return intFloatRow.size();\n@@ -389,26 +391,20 @@ public class ServerIntFloatRow extends ServerFloatRow {\n   public ServerRow clone() {\n     startRead();\n     try {\n-      return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-          intFloatRow.clone());\n+      return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intFloatRow.clone());\n     } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       if (intFloatRow.isSparse()) {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(),\n-                    intFloatRow.getStorage().getValues()));\n+        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedFloatVector((endColInt - startColInt), intFloatRow.getStorage().getIndices(), intFloatRow.getStorage().getValues()));\n       } else {\n-        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intFloatRow);\n+        return new ServerIntFloatRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intFloatRow);\n       }\n     } finally {\n       endRead();\n@@ -421,6 +417,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(int index) {\n     if (intFloatRow.isSparse()) {\n       return intFloatRow.getStorage().hasKey(index - startColInt);\n@@ -440,8 +437,8 @@ adaptiveClone() {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -483,4 +480,5 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}