{
    "project_name": "griddynamics-jagger",
    "error_id": "97",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 165).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private Decision decisionWhenNoBaselineForMetric;\n\n    /** What decision should be taken when several limits match same metric (f.e. 'mon_cpu' & 'mon_cpu_user' will match 'mon_cpu_user|agent_007 [127.0.1.1]|-avg') */\n    private Decision decisionWhenSeveralLimitsMatchSingleMetric;\n\n    public Decision getDecisionWhenNoMetricForLimit() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/97/LimitSetConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/97/LimitSetConfig.java\nindex c447fe6783b..cc1154ebb5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/97/LimitSetConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/97/LimitSetConfig.java\n@@ -23,15 +23,23 @@ package com.griddynamics.jagger.engine.e1.collector.limits;\n import com.griddynamics.jagger.util.Decision;\n import org.springframework.beans.factory.annotation.Required;\n \n-/** Class is used to describe setup for @ref LimitSet */\n+/**\n+ * Class is used to describe setup for @ref LimitSet\n+ */\n public class LimitSetConfig {\n-    /** What decision should be taken when limit is specified, but no metric in the test matches metricName of this Limit */\n+    /**\n+     * What decision should be taken when limit is specified, but no metric in the test matches metricName of this Limit\n+     */\n     private Decision decisionWhenNoMetricForLimit;\n \n-    /** What decision should be taken when baseline value can't be fetched for some metric (f.e. test or metric doesn't exist in baseline session) */\n+    /**\n+     * What decision should be taken when baseline value can't be fetched for some metric (f.e. test or metric doesn't exist in baseline session)\n+     */\n     private Decision decisionWhenNoBaselineForMetric;\n \n-    /** What decision should be taken when several limits match same metric (f.e. 'mon_cpu' & 'mon_cpu_user' will match 'mon_cpu_user|agent_007 [127.0.1.1]|-avg') */\n+    /**\n+     * What decision should be taken when several limits match same metric (f.e. 'mon_cpu' & 'mon_cpu_user' will match 'mon_cpu_user|agent_007 [127.0.1.1]|-avg')\n+     */\n     private Decision decisionWhenSeveralLimitsMatchSingleMetric;\n \n     public Decision getDecisionWhenNoMetricForLimit() {\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/97/LimitSetConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/97/LimitSetConfig.java\nindex c447fe6783b..e7c58461b83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/97/LimitSetConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/97/LimitSetConfig.java\n@@ -61,5 +61,4 @@ public class LimitSetConfig {\n         this.decisionWhenSeveralLimitsMatchSingleMetric = decisionWhenSeveralLimitsMatchSingleMetric;\n     }\n \n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}