{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4075",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4075/LogEntryVersion.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4075/LogEntryVersion.java\nindex 11aecda4753..9ecb5c506bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4075/LogEntryVersion.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4075/LogEntryVersion.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.entry;\n \n import org.neo4j.kernel.impl.transaction.command.PhysicalLogCommandReaderV3_0_2;\n@@ -29,27 +30,27 @@ import static java.lang.String.format;\n  * Main entry point into log entry versions and parsers and all that. A {@link LogEntryVersion} can be retrieved\n  * by using {@link #byVersion(byte)} and from there get a hold of\n  * {@link LogEntryParser} using {@link #entryParser(byte)}.\n- *\n+ * <p>\n  * Here follows an explanation how log entry versioning in Neo4j works:\n- *\n+ * <p>\n  * In Neo4j transactions are written to a log. Each transaction consists of one or more log entries. Log entries\n  * can be of one or more types, such as denoting start of a transaction, commands and committing the transaction.\n  * Neo4j supports writing the latest/current log entry and reading log entries for all currently supported versions\n  * of Neo4j. The way versioning is done has changed over the years.\n- *   First there was a format header of the entire log and it was assumed that all log entries within that log\n+ * First there was a format header of the entire log and it was assumed that all log entries within that log\n  * was of the same format. This version actually specified command version, i.e. just versions of one of the\n  * log entry types. This was a bit clunky and forced format specification to be passed in from outside,\n  * based on the log that was read and so updated every time a new log was opened.\n- *   Starting with Neo4j version 2.1 a one-byte log version field was introduced with every single log entry.\n+ * Starting with Neo4j version 2.1 a one-byte log version field was introduced with every single log entry.\n  * This allowed for more flexible reading and simpler code. Versions started with negative number to be able to\n  * distinguish the new format from the non-versioned format. So observing the log entry type, which was the first\n  * byte in each log entry being negative being negative was a signal for the new format and that the type actually\n  * was the next byte. This to support rolling upgrades where two Neo4j versions in a cluster could be active\n  * simultaneously, yet talking in terms of log entries of different versions.\n- *\n+ * <p>\n  * At this point in time there was the log entry version which signaled how an entry was to be read, but there\n  * was still the log-global format version which didn't really do anything but make things complicated in the code.\n- *   As of 2.2.4 the log-global format version is gone, although still just a token value written to adhere to\n+ * As of 2.2.4 the log-global format version is gone, although still just a token value written to adhere to\n  * the 16 bytes header size of a log for backwards compatibility. The log entry version controls everything\n  * about versioning of log entries and commands, such that if either log entry format (such as log entry types,\n  * such as START, COMMIT and the likes, or data within them) change, or one or more command format change\n@@ -68,141 +69,142 @@ import static java.lang.String.format;\n  */\n public enum LogEntryVersion\n {\n-    V2_3( -5, LogEntryParsersV2_3.class ),\n-    V3_0( -6, LogEntryParsersV2_3.class ),\n-    // as of 2016-05-30: neo4j 2.3.5 explicit index IndexDefineCommand maps write size as short instead of byte\n-    // log entry layout hasn't changed since 2_3 so just use that one\n-    V2_3_5( -8, LogEntryParsersV2_3.class ),\n-    // as of 2016-05-30: neo4j 3.0.2 explicit index IndexDefineCommand maps write size as short instead of byte\n-    // log entry layout hasn't changed since 2_3 so just use that one\n-    V3_0_2( -9, LogEntryParsersV2_3.class ),\n-    // as of 2017-05-26: the records in command log entries include a bit that specifies if the command is serialised\n-    // using a fixed-width reference format, or not. This change is technically backwards compatible, so we bump the\n-    // log version to prevent mixed-version clusters from forming.\n-    V3_0_10( -10, LogEntryParsersV2_3.class );\n-    // Method moreRecentVersionExists() relies on the fact that we have negative numbers, thus next version to use is -11\n-\n-    public static final LogEntryVersion CURRENT = V3_0_10;\n-    private static final byte LOWEST_VERSION = (byte)-V2_3.byteCode();\n-    private static final LogEntryVersion[] ALL = values();\n-    private static final LogEntryVersion[] LOOKUP_BY_VERSION;\n-    static\n-    {\n-        LOOKUP_BY_VERSION = new LogEntryVersion[(-CURRENT.byteCode()) + 1]; // pessimistic size\n-        for ( LogEntryVersion version : ALL )\n-        {\n-            put( LOOKUP_BY_VERSION, -version.byteCode(), version );\n-        }\n-    }\n+  V2_3(-5, LogEntryParsersV2_3.class),\n+  V3_0(-6, LogEntryParsersV2_3.class),\n+  // as of 2016-05-30: neo4j 2.3.5 explicit index IndexDefineCommand maps write size as short instead of byte\n+  // log entry layout hasn't changed since 2_3 so just use that one\n+  V2_3_5(-8, LogEntryParsersV2_3.class),\n+  // as of 2016-05-30: neo4j 3.0.2 explicit index IndexDefineCommand maps write size as short instead of byte\n+  // log entry layout hasn't changed since 2_3 so just use that one\n+  V3_0_2(-9, LogEntryParsersV2_3.class),\n+  // as of 2017-05-26: the records in command log entries include a bit that specifies if the command is serialised\n+  // using a fixed-width reference format, or not. This change is technically backwards compatible, so we bump the\n+  // log version to prevent mixed-version clusters from forming.\n+  V3_0_10(-10, LogEntryParsersV2_3.class);\n+  // Method moreRecentVersionExists() relies on the fact that we have negative numbers, thus next version to use is -11\n \n-    private final byte version;\n-    private final LogEntryParser<LogEntry>[] entryTypes;\n+  public static final LogEntryVersion CURRENT = V3_0_10;\n+  private static final byte LOWEST_VERSION = (byte) -V2_3.byteCode();\n+  private static final LogEntryVersion[] ALL = values();\n+  private static final LogEntryVersion[] LOOKUP_BY_VERSION;\n \n-    LogEntryVersion( int version, Class<? extends Enum<? extends LogEntryParser<? extends LogEntry>>> cls )\n+  static\n+  {\n+    LOOKUP_BY_VERSION = new LogEntryVersion[(-CURRENT.byteCode()) + 1]; // pessimistic size\n+    for (LogEntryVersion version : ALL)\n     {\n-        this.entryTypes = new LogEntryParser[highestCode( cls ) + 1];\n-        for ( Enum<? extends LogEntryParser<? extends LogEntry>> parser : cls.getEnumConstants() )\n-        {\n-            LogEntryParser<LogEntry> candidate = (LogEntryParser<LogEntry>) parser;\n-            this.entryTypes[candidate.byteCode()] = candidate;\n-        }\n-        this.version = safeCastToByte( version );\n+      put(LOOKUP_BY_VERSION, -version.byteCode(), version);\n     }\n+  }\n \n-    /**\n-     * @return byte value representing this log entry version.\n-     */\n-    public byte byteCode()\n+  private final byte version;\n+  private final LogEntryParser<LogEntry>[] entryTypes;\n+\n+  LogEntryVersion(int version, Class<? extends Enum<? extends LogEntryParser<? extends LogEntry>>> cls)\n+  {\n+    this.entryTypes = new LogEntryParser[highestCode(cls) + 1];\n+    for (Enum<? extends LogEntryParser<? extends LogEntry>> parser : cls.getEnumConstants())\n     {\n-        return version;\n+      LogEntryParser<LogEntry> candidate = (LogEntryParser<LogEntry>) parser;\n+      this.entryTypes[candidate.byteCode()] = candidate;\n     }\n+    this.version = safeCastToByte(version);\n+  }\n+\n+  /**\n+   * @return byte value representing this log entry version.\n+   */\n+  public byte byteCode()\n+  {\n+    return version;\n+  }\n \n-    /**\n-     * @param type type of entry.\n-     * @return a {@link LogEntryParser} capable of reading a {@link LogEntry} of the given type for this\n-     * log entry version.\n-     */\n-    public LogEntryParser<LogEntry> entryParser( byte type )\n+  /**\n+   * @param type type of entry.\n+   * @return a {@link LogEntryParser} capable of reading a {@link LogEntry} of the given type for this\n+   * log entry version.\n+   */\n+  public LogEntryParser<LogEntry> entryParser(byte type)\n+  {\n+    LogEntryParser<LogEntry> candidate = (type >= 0 && type < entryTypes.length) ? entryTypes[type] : null;\n+    if (candidate == null)\n     {\n-        LogEntryParser<LogEntry> candidate = (type >= 0 && type < entryTypes.length) ? entryTypes[type] : null;\n-        if ( candidate == null )\n-        {\n-            throw new IllegalArgumentException( \"Unknown entry type \" + type + \" for version \" + version );\n-        }\n-        return candidate;\n+      throw new IllegalArgumentException(\"Unknown entry type \" + type + \" for version \" + version);\n     }\n+    return candidate;\n+  }\n+\n+  /**\n+   * Check if a more recent version of the log entry format exists and can be handled.\n+   *\n+   * @param version to compare against latest version\n+   * @return {@code true} if a more recent log entry version exists\n+   */\n+  public static boolean moreRecentVersionExists(LogEntryVersion version)\n+  {\n+    return version.version > CURRENT.version; // reverted do to negative version numbers\n+  }\n \n-    /**\n-     * Check if a more recent version of the log entry format exists and can be handled.\n-     *\n-     * @param version to compare against latest version\n-     * @return {@code true} if a more recent log entry version exists\n-     */\n-    public static boolean moreRecentVersionExists( LogEntryVersion version )\n+  /**\n+   * Return the correct {@link LogEntryVersion} for the given {@code version} code read from e.g. a log entry.\n+   * Lookup is fast and can be made inside critical paths, no need for externally caching the returned\n+   * {@link LogEntryVersion} instance per the input arguments.\n+   *\n+   * @param version log entry version\n+   */\n+  public static LogEntryVersion byVersion(byte version)\n+  {\n+    byte positiveVersion = (byte) -version;\n+\n+    if (positiveVersion >= LOWEST_VERSION && positiveVersion < LOOKUP_BY_VERSION.length)\n     {\n-        return version.version > CURRENT.version; // reverted do to negative version numbers\n+      return LOOKUP_BY_VERSION[positiveVersion];\n     }\n-\n-    /**\n-     * Return the correct {@link LogEntryVersion} for the given {@code version} code read from e.g. a log entry.\n-     * Lookup is fast and can be made inside critical paths, no need for externally caching the returned\n-     * {@link LogEntryVersion} instance per the input arguments.\n-     *\n-     * @param version log entry version\n-     */\n-    public static LogEntryVersion byVersion( byte version )\n+    byte positiveCurrentVersion = (byte) -CURRENT.byteCode();\n+    if (positiveVersion > positiveCurrentVersion)\n     {\n-        byte positiveVersion = (byte) -version;\n-\n-        if ( positiveVersion >= LOWEST_VERSION && positiveVersion < LOOKUP_BY_VERSION.length )\n-        {\n-            return LOOKUP_BY_VERSION[positiveVersion];\n-        }\n-        byte positiveCurrentVersion = (byte) -CURRENT.byteCode();\n-        if ( positiveVersion > positiveCurrentVersion )\n-        {\n-            throw new UnsupportedLogVersionException( String.format(\n-                    \"Transaction logs contains entries with prefix %d, and the highest supported prefix is %d. This \" +\n-                            \"indicates that the log files originates from a newer version of neo4j.\",\n-                    positiveVersion, positiveCurrentVersion ) );\n-        }\n-        throw new UnsupportedLogVersionException( String.format(\n-                \"Transaction logs contains entries with prefix %d, and the lowest supported prefix is %d. This \" +\n-                        \"indicates that the log files originates from an older version of neo4j, which we don't support \" +\n-                        \"migrations from.\",\n-                positiveVersion, LOWEST_VERSION ) );\n+      throw new UnsupportedLogVersionException(String.format(\n+          \"Transaction logs contains entries with prefix %d, and the highest supported prefix is %d. This \" +\n+              \"indicates that the log files originates from a newer version of neo4j.\",\n+          positiveVersion, positiveCurrentVersion));\n     }\n+    throw new UnsupportedLogVersionException(String.format(\n+        \"Transaction logs contains entries with prefix %d, and the lowest supported prefix is %d. This \" +\n+            \"indicates that the log files originates from an older version of neo4j, which we don't support \" +\n+            \"migrations from.\",\n+        positiveVersion, LOWEST_VERSION));\n+  }\n+\n+  private static void put(LogEntryVersion[] array, int index, LogEntryVersion version)\n+  {\n+    array[index] = version;\n+  }\n \n-    private static void put( LogEntryVersion[] array, int index, LogEntryVersion version )\n+  private static byte safeCastToByte(int value)\n+  {\n+    boolean reversed = false;\n+    if (value < 0)\n     {\n-        array[index] = version;\n+      value = ~value;\n+      reversed = true;\n     }\n \n-    private static byte safeCastToByte( int value )\n+    if ((value & ~0xFF) != 0)\n     {\n-        boolean reversed = false;\n-        if ( value < 0 )\n-        {\n-            value = ~value;\n-            reversed = true;\n-        }\n-\n-        if ( (value & ~0xFF) != 0 )\n-        {\n-            throw new Error( format( \"Bad version %d, must be contained within one byte\", value ) );\n-        }\n-        return (byte) (reversed ? ~value : value);\n+      throw new Error(format(\"Bad version %d, must be contained within one byte\", value));\n     }\n+    return (byte) (reversed ? ~value : value);\n+  }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private static int highestCode( Class<? extends Enum<? extends LogEntryParser<? extends LogEntry>>> cls )\n+  @SuppressWarnings(\"unchecked\")\n+  private static int highestCode(Class<? extends Enum<? extends LogEntryParser<? extends LogEntry>>> cls)\n+  {\n+    int highestCode = 0;\n+    for (Enum<? extends LogEntryParser<? extends LogEntry>> parser : cls.getEnumConstants())\n     {\n-        int highestCode = 0;\n-        for ( Enum<? extends LogEntryParser<? extends LogEntry>> parser : cls.getEnumConstants() )\n-        {\n-            LogEntryParser<LogEntry> candidate = (LogEntryParser<LogEntry>) parser;\n-            highestCode = Math.max( highestCode, candidate.byteCode() );\n-        }\n-        return highestCode;\n+      LogEntryParser<LogEntry> candidate = (LogEntryParser<LogEntry>) parser;\n+      highestCode = Math.max(highestCode, candidate.byteCode());\n     }\n+    return highestCode;\n+  }\n }\n",
            "diff_size": 183
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "143",
                    "column": "31",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "162",
                    "column": "29",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 287).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 320).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4075/LogEntryVersion.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4075/LogEntryVersion.java\nindex 11aecda4753..364116941e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4075/LogEntryVersion.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4075/LogEntryVersion.java\n@@ -68,8 +68,7 @@ import static java.lang.String.format;\n  */\n public enum LogEntryVersion\n {\n-    V2_3( -5, LogEntryParsersV2_3.class ),\n-    V3_0( -6, LogEntryParsersV2_3.class ),\n+    V2_3( -5, LogEntryParsersV2_3.class ), V3_0( -6, LogEntryParsersV2_3.class ),\n     // as of 2016-05-30: neo4j 2.3.5 explicit index IndexDefineCommand maps write size as short instead of byte\n     // log entry layout hasn't changed since 2_3 so just use that one\n     V2_3_5( -8, LogEntryParsersV2_3.class ),\n@@ -129,7 +128,8 @@ public enum LogEntryVersion\n         {\n             throw new IllegalArgumentException( \"Unknown entry type \" + type + \" for version \" + version );\n         }\n-        return candidate;\n+\n+return candidate;\n     }\n \n     /**\n@@ -140,7 +140,7 @@ public enum LogEntryVersion\n      */\n     public static boolean moreRecentVersionExists( LogEntryVersion version )\n     {\n-        return version.version > CURRENT.version; // reverted do to negative version numbers\n+        return version.version> CURRENT.version; // reverted do to negative version numbers\n     }\n \n     /**\n@@ -159,18 +159,11 @@ public enum LogEntryVersion\n             return LOOKUP_BY_VERSION[positiveVersion];\n         }\n         byte positiveCurrentVersion = (byte) -CURRENT.byteCode();\n-        if ( positiveVersion > positiveCurrentVersion )\n+        if ( positiveVersion> positiveCurrentVersion )\n         {\n-            throw new UnsupportedLogVersionException( String.format(\n-                    \"Transaction logs contains entries with prefix %d, and the highest supported prefix is %d. This \" +\n-                            \"indicates that the log files originates from a newer version of neo4j.\",\n-                    positiveVersion, positiveCurrentVersion ) );\n+            throw new UnsupportedLogVersionException( String.format( \"Transaction logs contains entries with prefix %d, and the highest supported prefix is %d. This \" + \"indicates that the log files originates from a newer version of neo4j.\", positiveVersion, positiveCurrentVersion ) );\n         }\n-        throw new UnsupportedLogVersionException( String.format(\n-                \"Transaction logs contains entries with prefix %d, and the lowest supported prefix is %d. This \" +\n-                        \"indicates that the log files originates from an older version of neo4j, which we don't support \" +\n-                        \"migrations from.\",\n-                positiveVersion, LOWEST_VERSION ) );\n+        throw new UnsupportedLogVersionException( String.format( \"Transaction logs contains entries with prefix %d, and the lowest supported prefix is %d. This \" + \"indicates that the log files originates from an older version of neo4j, which we don't support \" + \"migrations from.\", positiveVersion, LOWEST_VERSION ) );\n     }\n \n     private static void put( LogEntryVersion[] array, int index, LogEntryVersion version )\n@@ -187,11 +180,11 @@ public enum LogEntryVersion\n             reversed = true;\n         }\n \n-        if ( (value & ~0xFF) != 0 )\n+        if ( ( value & ~0xFF) != 0 )\n         {\n             throw new Error( format( \"Bad version %d, must be contained within one byte\", value ) );\n         }\n-        return (byte) (reversed ? ~value : value);\n+        return (byte) ( reversed ? ~value : value);\n     }\n \n     @SuppressWarnings( \"unchecked\" )\n@@ -203,6 +196,7 @@ public enum LogEntryVersion\n             LogEntryParser<LogEntry> candidate = (LogEntryParser<LogEntry>) parser;\n             highestCode = Math.max( highestCode, candidate.byteCode() );\n         }\n-        return highestCode;\n+\n+return highestCode;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}