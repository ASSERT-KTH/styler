{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1661",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "6",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "6",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "189",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "6",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "218",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "248",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "251",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "285",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "378",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "404",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1661/FulltextUpdateApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1661/FulltextUpdateApplier.java\nindex f725f93faeb..b4a6294f24c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1661/FulltextUpdateApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1661/FulltextUpdateApplier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.fulltext;\n \n import org.apache.lucene.document.Document;\n@@ -55,362 +56,355 @@ import static org.neo4j.kernel.api.impl.fulltext.LuceneFulltextDocumentStructure\n \n class FulltextUpdateApplier extends LifecycleAdapter\n {\n-    private static final FulltextIndexUpdate STOP_SIGNAL = new FulltextIndexUpdate( null, null );\n-    private static final int POPULATING_BATCH_SIZE = 10_000;\n-    private static final JobScheduler.Group UPDATE_APPLIER = new JobScheduler.Group( \"FulltextIndexUpdateApplier\" );\n-    private static final String APPLIER_THREAD_NAME = \"Fulltext Index Add-On Applier Thread\";\n-\n-    private final LinkedBlockingQueue<FulltextIndexUpdate> workQueue;\n-    private final Log log;\n-    private final AvailabilityGuard availabilityGuard;\n-    private final JobScheduler scheduler;\n-    private JobScheduler.JobHandle workerThread;\n-\n-    FulltextUpdateApplier( Log log, AvailabilityGuard availabilityGuard, JobScheduler scheduler )\n-    {\n-        this.log = log;\n-        this.availabilityGuard = availabilityGuard;\n-        this.scheduler = scheduler;\n-        workQueue = new LinkedBlockingQueue<>();\n-    }\n-\n-    <E extends Entity> AsyncFulltextIndexOperation updatePropertyData(\n-            PrimitiveLongObjectMap<Map<String,Object>> state, WritableFulltext index ) throws IOException\n+  private static final FulltextIndexUpdate STOP_SIGNAL = new FulltextIndexUpdate(null, null);\n+  private static final int POPULATING_BATCH_SIZE = 10_000;\n+  private static final JobScheduler.Group UPDATE_APPLIER = new JobScheduler.Group(\"FulltextIndexUpdateApplier\");\n+  private static final String APPLIER_THREAD_NAME = \"Fulltext Index Add-On Applier Thread\";\n+\n+  private final LinkedBlockingQueue<FulltextIndexUpdate> workQueue;\n+  private final Log log;\n+  private final AvailabilityGuard availabilityGuard;\n+  private final JobScheduler scheduler;\n+  private JobScheduler.JobHandle workerThread;\n+\n+  FulltextUpdateApplier(Log log, AvailabilityGuard availabilityGuard, JobScheduler scheduler)\n+  {\n+    this.log = log;\n+    this.availabilityGuard = availabilityGuard;\n+    this.scheduler = scheduler;\n+    workQueue = new LinkedBlockingQueue<>();\n+  }\n+\n+  <E extends Entity> AsyncFulltextIndexOperation updatePropertyData(\n+      PrimitiveLongObjectMap<Map<String, Object>> state, WritableFulltext index) throws IOException\n+  {\n+    FulltextIndexUpdate update = new FulltextIndexUpdate(index, () ->\n     {\n-        FulltextIndexUpdate update = new FulltextIndexUpdate( index, () ->\n+      PartitionedIndexWriter indexWriter = index.getIndexWriter();\n+      state.visitEntries((entityId, value) ->\n+      {\n+        Set<String> indexedProperties = index.getProperties();\n+        if (!Collections.disjoint(indexedProperties, value.keySet()))\n         {\n-            PartitionedIndexWriter indexWriter = index.getIndexWriter();\n-            state.visitEntries( ( entityId, value ) ->\n-            {\n-                Set<String> indexedProperties = index.getProperties();\n-                if ( !Collections.disjoint( indexedProperties, value.keySet() ) )\n-                {\n-                    Stream<Map.Entry<String,Object>> entryStream = value.entrySet().stream();\n-                    Predicate<Map.Entry<String,Object>> relevantForIndex =\n-                            entry -> indexedProperties.contains( entry.getKey() );\n-                    Map<String,Object> allProperties = entryStream.filter( relevantForIndex )\n-                            .collect( CollectorsUtil.entriesToMap() );\n-\n-                    if ( !allProperties.isEmpty() )\n-                    {\n-                        updateDocument( indexWriter, entityId, allProperties );\n-                    }\n-                }\n-                return false;\n-            } );\n-        } );\n-\n-        enqueueUpdate( update );\n-        return update;\n-    }\n-\n-    private static void updateDocument(\n-            PartitionedIndexWriter indexWriter, long entityId, Map<String,Object> properties ) throws IOException\n+          Stream<Map.Entry<String, Object>> entryStream = value.entrySet().stream();\n+          Predicate<Map.Entry<String, Object>> relevantForIndex =\n+              entry -> indexedProperties.contains(entry.getKey());\n+          Map<String, Object> allProperties = entryStream.filter(relevantForIndex)\n+              .collect(CollectorsUtil.entriesToMap());\n+\n+          if (!allProperties.isEmpty())\n+          {\n+            updateDocument(indexWriter, entityId, allProperties);\n+          }\n+        }\n+        return false;\n+      });\n+    });\n+\n+    enqueueUpdate(update);\n+    return update;\n+  }\n+\n+  private static void updateDocument(\n+      PartitionedIndexWriter indexWriter, long entityId, Map<String, Object> properties) throws IOException\n+  {\n+    Document document = documentRepresentingProperties(entityId, properties);\n+    indexWriter.updateDocument(newTermForChangeOrRemove(entityId), document);\n+  }\n+\n+  <E extends Entity> AsyncFulltextIndexOperation removePropertyData(\n+      Iterable<PropertyEntry<E>> propertyEntries, PrimitiveLongObjectMap<Map<String, Object>> state, WritableFulltext index)\n+      throws IOException\n+  {\n+    FulltextIndexUpdate update = new FulltextIndexUpdate(index, () ->\n     {\n-        Document document = documentRepresentingProperties( entityId, properties );\n-        indexWriter.updateDocument( newTermForChangeOrRemove( entityId ), document );\n-    }\n-\n-    <E extends Entity> AsyncFulltextIndexOperation removePropertyData(\n-            Iterable<PropertyEntry<E>> propertyEntries, PrimitiveLongObjectMap<Map<String,Object>> state, WritableFulltext index )\n-            throws IOException\n+      for (PropertyEntry<E> propertyEntry : propertyEntries)\n+      {\n+        if (index.getProperties().contains(propertyEntry.key()))\n+        {\n+          long entityId = propertyEntry.entity().getId();\n+          Map<String, Object> allProperties = state.get(entityId);\n+          if (allProperties == null || allProperties.isEmpty())\n+          {\n+            index.getIndexWriter().deleteDocuments(newTermForChangeOrRemove(entityId));\n+          }\n+        }\n+      }\n+    });\n+\n+    enqueueUpdate(update);\n+    return update;\n+  }\n+\n+  AsyncFulltextIndexOperation writeBarrier() throws IOException\n+  {\n+    FulltextIndexUpdate barrier = new FulltextIndexUpdate(null, ThrowingAction.noop());\n+    enqueueUpdate(barrier);\n+    return barrier;\n+  }\n+\n+  AsyncFulltextIndexOperation populateNodes(WritableFulltext index, GraphDatabaseService db) throws IOException\n+  {\n+    return enqueuePopulateIndex(index, db, db::getAllNodes);\n+  }\n+\n+  AsyncFulltextIndexOperation populateRelationships(WritableFulltext index, GraphDatabaseService db)\n+      throws IOException\n+  {\n+    return enqueuePopulateIndex(index, db, db::getAllRelationships);\n+  }\n+\n+  private AsyncFulltextIndexOperation enqueuePopulateIndex(\n+      WritableFulltext index, GraphDatabaseService db,\n+      Supplier<ResourceIterable<? extends Entity>> entitySupplier) throws IOException\n+  {\n+    FulltextIndexUpdate population = new FulltextIndexUpdate(index, () ->\n     {\n-        FulltextIndexUpdate update = new FulltextIndexUpdate( index, () ->\n+      try\n+      {\n+        PartitionedIndexWriter indexWriter = index.getIndexWriter();\n+        String[] indexedPropertyKeys = index.getProperties().toArray(new String[0]);\n+        ArrayList<Supplier<Document>> documents = new ArrayList<>();\n+        try (Transaction ignore = db.beginTx(1, TimeUnit.DAYS))\n         {\n-            for ( PropertyEntry<E> propertyEntry : propertyEntries )\n+          ResourceIterable<? extends Entity> entities = entitySupplier.get();\n+          for (Entity entity : entities)\n+          {\n+            long entityId = entity.getId();\n+            Map<String, Object> properties = entity.getProperties(indexedPropertyKeys);\n+            if (!properties.isEmpty())\n             {\n-                if ( index.getProperties().contains( propertyEntry.key() ) )\n-                {\n-                    long entityId = propertyEntry.entity().getId();\n-                    Map<String,Object> allProperties = state.get( entityId );\n-                    if ( allProperties == null || allProperties.isEmpty() )\n-                    {\n-                        index.getIndexWriter().deleteDocuments( newTermForChangeOrRemove( entityId ) );\n-                    }\n-                }\n+              documents.add(documentBuilder(entityId, properties));\n             }\n-        } );\n \n-        enqueueUpdate( update );\n-        return update;\n+            if (documents.size() > POPULATING_BATCH_SIZE)\n+            {\n+              indexWriter.addDocuments(documents.size(), reifyDocuments(documents));\n+              documents.clear();\n+            }\n+          }\n+        }\n+        indexWriter.addDocuments(documents.size(), reifyDocuments(documents));\n+        index.setPopulated();\n+      } catch (Throwable th)\n+      {\n+        if (index != null)\n+        {\n+          index.setFailed();\n+        }\n+        throw th;\n+      }\n+    });\n+\n+    enqueueUpdate(population);\n+    return population;\n+  }\n+\n+  private Supplier<Document> documentBuilder(long entityId, Map<String, Object> properties)\n+  {\n+    return () -> documentRepresentingProperties(entityId, properties);\n+  }\n+\n+  private Iterable<Document> reifyDocuments(ArrayList<Supplier<Document>> documents)\n+  {\n+    return () -> documents.stream().map(Supplier::get).iterator();\n+  }\n+\n+  private void enqueueUpdate(FulltextIndexUpdate update) throws IOException\n+  {\n+    try\n+    {\n+      workQueue.put(update);\n+    } catch (InterruptedException e)\n+    {\n+      throw new IOException(\"Fulltext index update failed.\", e);\n     }\n+  }\n \n-    AsyncFulltextIndexOperation writeBarrier() throws IOException\n+  @Override\n+  public void start()\n+  {\n+    if (workerThread != null)\n     {\n-        FulltextIndexUpdate barrier = new FulltextIndexUpdate( null, ThrowingAction.noop() );\n-        enqueueUpdate( barrier );\n-        return barrier;\n+      throw new IllegalStateException(APPLIER_THREAD_NAME + \" already started.\");\n     }\n-\n-    AsyncFulltextIndexOperation populateNodes( WritableFulltext index, GraphDatabaseService db ) throws IOException\n+    workerThread = scheduler.schedule(UPDATE_APPLIER, new ApplierWorker(workQueue, log, availabilityGuard));\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    boolean enqueued;\n+    do\n     {\n-        return enqueuePopulateIndex( index, db, db::getAllNodes );\n+      enqueued = workQueue.offer(STOP_SIGNAL);\n     }\n+    while (!enqueued);\n \n-    AsyncFulltextIndexOperation populateRelationships( WritableFulltext index, GraphDatabaseService db )\n-            throws IOException\n+    try\n+    {\n+      workerThread.waitTermination();\n+      workerThread = null;\n+    } catch (InterruptedException e)\n     {\n-        return enqueuePopulateIndex( index, db, db::getAllRelationships );\n+      log.error(\"Interrupted before \" + APPLIER_THREAD_NAME + \" could shut down.\", e);\n+    } catch (ExecutionException e)\n+    {\n+      log.error(\"Exception while waiting for \" + APPLIER_THREAD_NAME + \" to shut down.\", e);\n     }\n+  }\n \n-    private AsyncFulltextIndexOperation enqueuePopulateIndex(\n-            WritableFulltext index, GraphDatabaseService db,\n-            Supplier<ResourceIterable<? extends Entity>> entitySupplier ) throws IOException\n-    {\n-        FulltextIndexUpdate population = new FulltextIndexUpdate( index, () ->\n-        {\n-            try\n-            {\n-                PartitionedIndexWriter indexWriter = index.getIndexWriter();\n-                String[] indexedPropertyKeys = index.getProperties().toArray( new String[0] );\n-                ArrayList<Supplier<Document>> documents = new ArrayList<>();\n-                try ( Transaction ignore = db.beginTx( 1, TimeUnit.DAYS ) )\n-                {\n-                    ResourceIterable<? extends Entity> entities = entitySupplier.get();\n-                    for ( Entity entity : entities )\n-                    {\n-                        long entityId = entity.getId();\n-                        Map<String,Object> properties = entity.getProperties( indexedPropertyKeys );\n-                        if ( !properties.isEmpty() )\n-                        {\n-                            documents.add( documentBuilder( entityId, properties ) );\n-                        }\n-\n-                        if ( documents.size() > POPULATING_BATCH_SIZE )\n-                        {\n-                            indexWriter.addDocuments( documents.size(), reifyDocuments( documents ) );\n-                            documents.clear();\n-                        }\n-                    }\n-                }\n-                indexWriter.addDocuments( documents.size(), reifyDocuments( documents ) );\n-                index.setPopulated();\n-            }\n-            catch ( Throwable th )\n-            {\n-                if ( index != null )\n-                {\n-                    index.setFailed();\n-                }\n-                throw th;\n-            }\n-        } );\n+  private static class FulltextIndexUpdate extends BinaryLatch implements AsyncFulltextIndexOperation\n+  {\n+    private final WritableFulltext index;\n+    private final ThrowingAction<IOException> action;\n+    private volatile Throwable throwable;\n \n-        enqueueUpdate( population );\n-        return population;\n+    private FulltextIndexUpdate(WritableFulltext index, ThrowingAction<IOException> action)\n+    {\n+      this.index = index;\n+      this.action = action;\n     }\n \n-    private Supplier<Document> documentBuilder( long entityId, Map<String,Object> properties )\n+    @Override\n+    public void awaitCompletion() throws ExecutionException\n     {\n-        return () -> documentRepresentingProperties( entityId, properties );\n+      super.await();\n+      Throwable th = this.throwable;\n+      if (th != null)\n+      {\n+        throw new ExecutionException(th);\n+      }\n     }\n \n-    private Iterable<Document> reifyDocuments( ArrayList<Supplier<Document>> documents )\n+    void applyUpdate()\n     {\n-        return () -> documents.stream().map( Supplier::get ).iterator();\n+      try\n+      {\n+        action.apply();\n+      } catch (Throwable e)\n+      {\n+        throwable = e;\n+      }\n     }\n+  }\n+\n+  private static class ApplierWorker implements Runnable\n+  {\n+    private LinkedBlockingQueue<FulltextIndexUpdate> workQueue;\n+    private final Log log;\n+    private final AvailabilityGuard availabilityGuard;\n \n-    private void enqueueUpdate( FulltextIndexUpdate update ) throws IOException\n+    ApplierWorker(LinkedBlockingQueue<FulltextIndexUpdate> workQueue, Log log,\n+                  AvailabilityGuard availabilityGuard)\n     {\n-        try\n-        {\n-            workQueue.put( update );\n-        }\n-        catch ( InterruptedException e )\n-        {\n-            throw new IOException( \"Fulltext index update failed.\", e );\n-        }\n+      this.workQueue = workQueue;\n+      this.log = log;\n+      this.availabilityGuard = availabilityGuard;\n     }\n \n     @Override\n-    public void start()\n+    public void run()\n     {\n-        if ( workerThread != null )\n+      Thread.currentThread().setName(APPLIER_THREAD_NAME);\n+      waitForDatabaseToBeAvailable();\n+      Set<WritableFulltext> refreshableSet = new HashSet<>();\n+      List<BinaryLatch> latches = new ArrayList<>();\n+\n+      FulltextIndexUpdate update;\n+      while ((update = getNextUpdate()) != STOP_SIGNAL)\n+      {\n+        update = drainQueueAndApplyUpdates(update, refreshableSet, latches);\n+        refreshAndClearIndexes(refreshableSet);\n+        releaseAndClearLatches(latches);\n+\n+        if (update == STOP_SIGNAL)\n         {\n-            throw new IllegalStateException( APPLIER_THREAD_NAME + \" already started.\" );\n+          return;\n         }\n-        workerThread = scheduler.schedule( UPDATE_APPLIER, new ApplierWorker( workQueue, log, availabilityGuard ) );\n+      }\n     }\n \n-    @Override\n-    public void stop()\n+    private void waitForDatabaseToBeAvailable()\n     {\n-        boolean enqueued;\n-        do\n-        {\n-            enqueued = workQueue.offer( STOP_SIGNAL );\n-        }\n-        while ( !enqueued );\n-\n-        try\n-        {\n-            workerThread.waitTermination();\n-            workerThread = null;\n-        }\n-        catch ( InterruptedException e )\n-        {\n-            log.error( \"Interrupted before \" + APPLIER_THREAD_NAME + \" could shut down.\", e );\n-        }\n-        catch ( ExecutionException e )\n-        {\n-            log.error( \"Exception while waiting for \" + APPLIER_THREAD_NAME + \" to shut down.\", e );\n-        }\n+      boolean isAvailable;\n+      do\n+      {\n+        isAvailable = availabilityGuard.isAvailable(100);\n+      }\n+      while (!isAvailable && !availabilityGuard.isShutdown());\n     }\n \n-    private static class FulltextIndexUpdate extends BinaryLatch implements AsyncFulltextIndexOperation\n+    private FulltextIndexUpdate drainQueueAndApplyUpdates(\n+        FulltextIndexUpdate update,\n+        Set<WritableFulltext> refreshableSet,\n+        List<BinaryLatch> latches)\n     {\n-        private final WritableFulltext index;\n-        private final ThrowingAction<IOException> action;\n-        private volatile Throwable throwable;\n-\n-        private FulltextIndexUpdate( WritableFulltext index, ThrowingAction<IOException> action )\n-        {\n-            this.index = index;\n-            this.action = action;\n-        }\n-\n-        @Override\n-        public void awaitCompletion() throws ExecutionException\n-        {\n-            super.await();\n-            Throwable th = this.throwable;\n-            if ( th != null )\n-            {\n-                throw new ExecutionException( th );\n-            }\n-        }\n-\n-        void applyUpdate()\n-        {\n-            try\n-            {\n-                action.apply();\n-            }\n-            catch ( Throwable e )\n-            {\n-                throwable = e;\n-            }\n-        }\n+      do\n+      {\n+        applyUpdate(update, refreshableSet, latches);\n+        update = workQueue.poll();\n+      }\n+      while (update != null && update != STOP_SIGNAL);\n+      return update;\n     }\n \n-    private static class ApplierWorker implements Runnable\n+    private void refreshAndClearIndexes(Set<WritableFulltext> refreshableSet)\n     {\n-        private LinkedBlockingQueue<FulltextIndexUpdate> workQueue;\n-        private final Log log;\n-        private final AvailabilityGuard availabilityGuard;\n-\n-        ApplierWorker( LinkedBlockingQueue<FulltextIndexUpdate> workQueue, Log log,\n-                       AvailabilityGuard availabilityGuard )\n-        {\n-            this.workQueue = workQueue;\n-            this.log = log;\n-            this.availabilityGuard = availabilityGuard;\n-        }\n-\n-        @Override\n-        public void run()\n-        {\n-            Thread.currentThread().setName( APPLIER_THREAD_NAME );\n-            waitForDatabaseToBeAvailable();\n-            Set<WritableFulltext> refreshableSet = new HashSet<>();\n-            List<BinaryLatch> latches = new ArrayList<>();\n-\n-            FulltextIndexUpdate update;\n-            while ( (update = getNextUpdate()) != STOP_SIGNAL )\n-            {\n-                update = drainQueueAndApplyUpdates( update, refreshableSet, latches );\n-                refreshAndClearIndexes( refreshableSet );\n-                releaseAndClearLatches( latches );\n-\n-                if ( update == STOP_SIGNAL )\n-                {\n-                    return;\n-                }\n-            }\n-        }\n-\n-        private void waitForDatabaseToBeAvailable()\n-        {\n-            boolean isAvailable;\n-            do\n-            {\n-                isAvailable = availabilityGuard.isAvailable( 100 );\n-            }\n-            while ( !isAvailable && !availabilityGuard.isShutdown() );\n-        }\n-\n-        private FulltextIndexUpdate drainQueueAndApplyUpdates(\n-                FulltextIndexUpdate update,\n-                Set<WritableFulltext> refreshableSet,\n-                List<BinaryLatch> latches )\n-        {\n-            do\n-            {\n-                applyUpdate( update, refreshableSet, latches );\n-                update = workQueue.poll();\n-            }\n-            while ( update != null && update != STOP_SIGNAL );\n-            return update;\n-        }\n+      for (WritableFulltext index : refreshableSet)\n+      {\n+        refreshIndex(index);\n+      }\n+      refreshableSet.clear();\n+    }\n \n-        private void refreshAndClearIndexes( Set<WritableFulltext> refreshableSet )\n-        {\n-            for ( WritableFulltext index : refreshableSet )\n-            {\n-                refreshIndex( index );\n-            }\n-            refreshableSet.clear();\n-        }\n+    private void releaseAndClearLatches(List<BinaryLatch> latches)\n+    {\n+      for (BinaryLatch latch : latches)\n+      {\n+        latch.release();\n+      }\n+      latches.clear();\n+    }\n \n-        private void releaseAndClearLatches( List<BinaryLatch> latches )\n+    private FulltextIndexUpdate getNextUpdate()\n+    {\n+      FulltextIndexUpdate update = null;\n+      do\n+      {\n+        try\n         {\n-            for ( BinaryLatch latch : latches )\n-            {\n-                latch.release();\n-            }\n-            latches.clear();\n-        }\n-\n-        private FulltextIndexUpdate getNextUpdate()\n+          update = workQueue.take();\n+        } catch (InterruptedException e)\n         {\n-            FulltextIndexUpdate update = null;\n-            do\n-            {\n-                try\n-                {\n-                    update = workQueue.take();\n-                }\n-                catch ( InterruptedException e )\n-                {\n-                    log.debug( APPLIER_THREAD_NAME + \" decided to ignore an interrupt.\", e );\n-                }\n-            }\n-            while ( update == null );\n-            return update;\n+          log.debug(APPLIER_THREAD_NAME + \" decided to ignore an interrupt.\", e);\n         }\n+      }\n+      while (update == null);\n+      return update;\n+    }\n \n-        private void applyUpdate( FulltextIndexUpdate update,\n-                                  Set<WritableFulltext> refreshableSet,\n-                                  List<BinaryLatch> latches )\n-        {\n-            latches.add( update );\n-            update.applyUpdate();\n-            refreshableSet.add( update.index );\n-        }\n+    private void applyUpdate(FulltextIndexUpdate update,\n+                             Set<WritableFulltext> refreshableSet,\n+                             List<BinaryLatch> latches)\n+    {\n+      latches.add(update);\n+      update.applyUpdate();\n+      refreshableSet.add(update.index);\n+    }\n \n-        private void refreshIndex( WritableFulltext index )\n+    private void refreshIndex(WritableFulltext index)\n+    {\n+      try\n+      {\n+        if (index != null)\n         {\n-            try\n-            {\n-                if ( index != null )\n-                {\n-                    index.maybeRefreshBlocking();\n-                }\n-            }\n-            catch ( Throwable e )\n-            {\n-                log.error( \"Failed to refresh fulltext after updates.\", e );\n-            }\n+          index.maybeRefreshBlocking();\n         }\n+      } catch (Throwable e)\n+      {\n+        log.error(\"Failed to refresh fulltext after updates.\", e);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 472
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1661/FulltextUpdateApplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1661/FulltextUpdateApplier.java\nindex f725f93faeb..d1323eeee70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1661/FulltextUpdateApplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1661/FulltextUpdateApplier.java\n@@ -59,8 +59,7 @@ class FulltextUpdateApplier extends LifecycleAdapter\n     private static final int POPULATING_BATCH_SIZE = 10_000;\n     private static final JobScheduler.Group UPDATE_APPLIER = new JobScheduler.Group( \"FulltextIndexUpdateApplier\" );\n     private static final String APPLIER_THREAD_NAME = \"Fulltext Index Add-On Applier Thread\";\n-\n-    private final LinkedBlockingQueue<FulltextIndexUpdate> workQueue;\n+private final LinkedBlockingQueue<FulltextIndexUpdate> workQueue;\n     private final Log log;\n     private final AvailabilityGuard availabilityGuard;\n     private final JobScheduler scheduler;\n@@ -74,9 +73,8 @@ class FulltextUpdateApplier extends LifecycleAdapter\n         workQueue = new LinkedBlockingQueue<>();\n     }\n \n-    <E extends Entity> AsyncFulltextIndexOperation updatePropertyData(\n-            PrimitiveLongObjectMap<Map<String,Object>> state, WritableFulltext index ) throws IOException\n-    {\n+    <E extends Entity> AsyncFulltextIndexOperation updatePropertyData( PrimitiveLongObjectMap<Map<String,Object>> state, WritableFulltext index ) throws IOException\n+{\n         FulltextIndexUpdate update = new FulltextIndexUpdate( index, () ->\n         {\n             PartitionedIndexWriter indexWriter = index.getIndexWriter();\n@@ -88,10 +86,8 @@ class FulltextUpdateApplier extends LifecycleAdapter\n                     Stream<Map.Entry<String,Object>> entryStream = value.entrySet().stream();\n                     Predicate<Map.Entry<String,Object>> relevantForIndex =\n                             entry -> indexedProperties.contains( entry.getKey() );\n-                    Map<String,Object> allProperties = entryStream.filter( relevantForIndex )\n-                            .collect( CollectorsUtil.entriesToMap() );\n-\n-                    if ( !allProperties.isEmpty() )\n+Map<String,Object> allProperties = entryStream.filter( relevantForIndex ).collect( CollectorsUtil.entriesToMap() );\n+if ( !allProperties.isEmpty() )\n                     {\n                         updateDocument( indexWriter, entityId, allProperties );\n                     }\n@@ -104,17 +100,14 @@ class FulltextUpdateApplier extends LifecycleAdapter\n         return update;\n     }\n \n-    private static void updateDocument(\n-            PartitionedIndexWriter indexWriter, long entityId, Map<String,Object> properties ) throws IOException\n-    {\n+    private static void updateDocument( PartitionedIndexWriter indexWriter, long entityId, Map<String,Object> properties ) throws IOException\n+{\n         Document document = documentRepresentingProperties( entityId, properties );\n         indexWriter.updateDocument( newTermForChangeOrRemove( entityId ), document );\n     }\n \n-    <E extends Entity> AsyncFulltextIndexOperation removePropertyData(\n-            Iterable<PropertyEntry<E>> propertyEntries, PrimitiveLongObjectMap<Map<String,Object>> state, WritableFulltext index )\n-            throws IOException\n-    {\n+    <E extends Entity> AsyncFulltextIndexOperation removePropertyData( Iterable<PropertyEntry<E>> propertyEntries, PrimitiveLongObjectMap<Map<String,Object>> state, WritableFulltext index ) throws IOException\n+{\n         FulltextIndexUpdate update = new FulltextIndexUpdate( index, () ->\n         {\n             for ( PropertyEntry<E> propertyEntry : propertyEntries )\n@@ -147,16 +140,13 @@ class FulltextUpdateApplier extends LifecycleAdapter\n         return enqueuePopulateIndex( index, db, db::getAllNodes );\n     }\n \n-    AsyncFulltextIndexOperation populateRelationships( WritableFulltext index, GraphDatabaseService db )\n-            throws IOException\n-    {\n+    AsyncFulltextIndexOperation populateRelationships( WritableFulltext index, GraphDatabaseService db ) throws IOException\n+{\n         return enqueuePopulateIndex( index, db, db::getAllRelationships );\n     }\n \n-    private AsyncFulltextIndexOperation enqueuePopulateIndex(\n-            WritableFulltext index, GraphDatabaseService db,\n-            Supplier<ResourceIterable<? extends Entity>> entitySupplier ) throws IOException\n-    {\n+    private AsyncFulltextIndexOperation enqueuePopulateIndex( WritableFulltext index, GraphDatabaseService db, Supplier<ResourceIterable<? extends Entity>> entitySupplier ) throws IOException\n+{\n         FulltextIndexUpdate population = new FulltextIndexUpdate( index, () ->\n         {\n             try\n@@ -229,7 +219,8 @@ class FulltextUpdateApplier extends LifecycleAdapter\n         {\n             throw new IllegalStateException( APPLIER_THREAD_NAME + \" already started.\" );\n         }\n-        workerThread = scheduler.schedule( UPDATE_APPLIER, new ApplierWorker( workQueue, log, availabilityGuard ) );\n+\n+workerThread = scheduler.schedule( UPDATE_APPLIER, new ApplierWorker( workQueue, log, availabilityGuard ) );\n     }\n \n     @Override\n@@ -299,9 +290,8 @@ class FulltextUpdateApplier extends LifecycleAdapter\n         private final Log log;\n         private final AvailabilityGuard availabilityGuard;\n \n-        ApplierWorker( LinkedBlockingQueue<FulltextIndexUpdate> workQueue, Log log,\n-                       AvailabilityGuard availabilityGuard )\n-        {\n+        ApplierWorker( LinkedBlockingQueue<FulltextIndexUpdate> workQueue, Log log, AvailabilityGuard availabilityGuard )\n+{\n             this.workQueue = workQueue;\n             this.log = log;\n             this.availabilityGuard = availabilityGuard;\n@@ -321,8 +311,7 @@ class FulltextUpdateApplier extends LifecycleAdapter\n                 update = drainQueueAndApplyUpdates( update, refreshableSet, latches );\n                 refreshAndClearIndexes( refreshableSet );\n                 releaseAndClearLatches( latches );\n-\n-                if ( update == STOP_SIGNAL )\n+if ( update == STOP_SIGNAL )\n                 {\n                     return;\n                 }\n@@ -339,10 +328,7 @@ class FulltextUpdateApplier extends LifecycleAdapter\n             while ( !isAvailable && !availabilityGuard.isShutdown() );\n         }\n \n-        private FulltextIndexUpdate drainQueueAndApplyUpdates(\n-                FulltextIndexUpdate update,\n-                Set<WritableFulltext> refreshableSet,\n-                List<BinaryLatch> latches )\n+        private FulltextIndexUpdate drainQueueAndApplyUpdates( FulltextIndexUpdate update, Set<WritableFulltext> refreshableSet, List<BinaryLatch> latches )\n         {\n             do\n             {\n@@ -389,10 +375,8 @@ class FulltextUpdateApplier extends LifecycleAdapter\n             return update;\n         }\n \n-        private void applyUpdate( FulltextIndexUpdate update,\n-                                  Set<WritableFulltext> refreshableSet,\n-                                  List<BinaryLatch> latches )\n-        {\n+        private void applyUpdate( FulltextIndexUpdate update, Set<WritableFulltext> refreshableSet, List<BinaryLatch> latches )\n+{\n             latches.add( update );\n             update.applyUpdate();\n             refreshableSet.add( update.index );\n@@ -413,4 +397,4 @@ class FulltextUpdateApplier extends LifecycleAdapter\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}