{
    "project_name": "IQSS-dataverse",
    "error_id": "127",
    "information": {
        "errors": [
            {
                "line": "53",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "@Entity\n@Table(indexes = {@Index(columnList=\"owner_id\")\n\t\t, @Index(columnList=\"name\")\n\t\t, @Index(columnList=\"alias\")})\npublic class DataverseRole implements Serializable  {\n    ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "54",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/127/DataverseRole.java\nindex 12ddf817221..21031ed2d97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/127/DataverseRole.java\n@@ -50,7 +50,7 @@ import javax.validation.constraints.Size;\n })\n @Entity\n @Table(indexes = {@Index(columnList=\"owner_id\")\n-\t\t, @Index(columnList=\"name\")\n+            , @Index(columnList=\"name\")\n \t\t, @Index(columnList=\"alias\")})\n public class DataverseRole implements Serializable  {\n     \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/127/DataverseRole.java\nindex 12ddf817221..265f3f569be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/127/DataverseRole.java\n@@ -29,259 +29,265 @@ import javax.validation.constraints.Size;\n  * A role is an annotated set of permissions. A role belongs\n  * to a {@link Dataverse}. Users may assume roles from the current dataverse,\n  * or from its parent dataverses, up to the first permission root dataverse.\n- * \n+ *\n  * @author michael\n  */\n @NamedQueries({\n-    @NamedQuery(name = \"DataverseRole.findByOwnerId\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.owner.id=:ownerId ORDER BY r.name\"),\n-    @NamedQuery(name = \"DataverseRole.findBuiltinRoles\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.owner is null ORDER BY r.name\"),\n-    @NamedQuery(name = \"DataverseRole.findBuiltinRoleByAlias\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias AND r.owner is null\"),\n-    @NamedQuery(name = \"DataverseRole.findDataverseRoleByAlias\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias\"),\n-    @NamedQuery(name = \"DataverseRole.findCustomRoleByAliasAndOwner\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias and (r.owner is null or r.owner.id=:ownerId)\"),\n-    @NamedQuery(name = \"DataverseRole.listAll\",\n-            query = \"SELECT r FROM DataverseRole r\"),\n-    @NamedQuery(name = \"DataverseRole.deleteById\",\n-            query = \"DELETE FROM DataverseRole r WHERE r.id=:id\")\n+  @NamedQuery(name = \"DataverseRole.findByOwnerId\",\n+    query = \"SELECT r FROM DataverseRole r WHERE r.owner.id=:ownerId ORDER BY r.name\"),\n+  @NamedQuery(name = \"DataverseRole.findBuiltinRoles\",\n+    query = \"SELECT r FROM DataverseRole r WHERE r.owner is null ORDER BY r.name\"),\n+  @NamedQuery(name = \"DataverseRole.findBuiltinRoleByAlias\",\n+    query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias AND r.owner is null\"),\n+  @NamedQuery(name = \"DataverseRole.findDataverseRoleByAlias\",\n+    query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias\"),\n+  @NamedQuery(name = \"DataverseRole.findCustomRoleByAliasAndOwner\",\n+    query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias and (r.owner is null or r.owner.id=:ownerId)\"),\n+  @NamedQuery(name = \"DataverseRole.listAll\",\n+    query = \"SELECT r FROM DataverseRole r\"),\n+  @NamedQuery(name = \"DataverseRole.deleteById\",\n+    query = \"DELETE FROM DataverseRole r WHERE r.id=:id\")\n })\n @Entity\n-@Table(indexes = {@Index(columnList=\"owner_id\")\n-\t\t, @Index(columnList=\"name\")\n-\t\t, @Index(columnList=\"alias\")})\n-public class DataverseRole implements Serializable  {\n-    \n-    //constants for the built in roles references in the code\n-    public static final String ADMIN = \"admin\";\n-    public static final String FILE_DOWNLOADER = \"fileDownloader\";\n-    public static final String FULL_CONTRIBUTOR = \"fullContributor\";\n-    public static final String DV_CONTRIBUTOR = \"dvContributor\";\n-    public static final String DS_CONTRIBUTOR = \"dsContributor\";\n-    /**\n-     * Heads up that this says \"editor\" which comes from\n-     * scripts/api/data/role-editor.json but the name is \"Contributor\". The\n-     * *alias* is \"editor\". Don't be fooled!\n-     * #6644 change EDITOR string to contributor to coincide with the \"name\" value \n-     * - see above note SEK 2/13/2020\n-     */\n-    public static final String EDITOR = \"contributor\";\n-    public static final String MANAGER = \"manager\";\n-    public static final String CURATOR = \"curator\";\n-    public static final String MEMBER = \"member\";\n-    \n-    public static final String NONE = \"none\";\n-    \n-    \n-\tpublic static final Comparator<DataverseRole> CMP_BY_NAME = new Comparator<DataverseRole>(){\n-\n-\t\t@Override\n-\t\tpublic int compare(DataverseRole o1, DataverseRole o2) {\n-\t\t\tint cmp = o1.getName().compareTo(o2.getName());\n-\t\t\tif ( cmp != 0 ) return cmp;\n-                        \n-            Long o1OwnerId = o1.getOwner() == null ? 0l : o1.getOwner().getId();\n-            Long o2OwnerId = o2.getOwner() == null ? 0l : o2.getOwner().getId();\n-\n-\t\t\treturn o1OwnerId.compareTo( o2OwnerId );\n-\t\t}\n-\t};\n-\tpublic static Set<Permission> permissionSet( Iterable<DataverseRole> roles ) {\n-\t\tlong miniset = 0l;\n-\t\tfor ( DataverseRole role : roles ) {\n-\t\t\tminiset |= role.permissionBits;\n-\t\t}\n-\t\treturn new BitSet(miniset).asSetOf(Permission.class);\n-\t}\n-\t\n-\t@Id\n-    @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private Long id;\n-    \n-    @Pattern(regexp=\".+\", message=\"{role.name}\")\n-    @Column( nullable = false )\n-    private String name;\n-    \n-    @Size(max = 255, message = \"{desc.maxLength}\")\n-    private String description;\n-    \n-    @Size(max = 16, message = \"{alias.maxLength}\")\n-    @Pattern(regexp = \"[a-zA-Z0-9\\\\_\\\\-]+\", message = \"{alias.illegalCharacters}\")\n-    @Column(nullable = false, unique=true)\n-    private String alias;\n-\t\n-\t/** Stores the permissions in a bit set.  */\n-\tprivate long permissionBits;\n-\t\n-\t@ManyToOne\n-    @JoinColumn(nullable=true)     \n-    private DvObject owner;\n-\t\n-\tpublic Long getId() {\n-\t\treturn id;\n-\t}\n-\n-\tpublic void setId(Long id) {\n-\t\tthis.id = id;\n-\t}\n-\n-    public String getName() {\n-        if (alias != null) {\n-            try {\n-                String key = \"role.\" + alias.toLowerCase() + \".name\";\n-                String _name = BundleUtil.getStringFromPropertyFile(key, \"BuiltInRoles\");\n-                if (_name == null) {\n-                    return name;\n-                } else {\n-                    return _name;\n-                }\n-            } catch (MissingResourceException mre) {\n-                return name;\n-            }\n+@Table(indexes = {@Index(columnList = \"owner_id\")\n+  , @Index(columnList = \"name\")\n+  , @Index(columnList = \"alias\")})\n+public class DataverseRole implements Serializable {\n \n+  //constants for the built in roles references in the code\n+  public static final String ADMIN = \"admin\";\n+  public static final String FILE_DOWNLOADER = \"fileDownloader\";\n+  public static final String FULL_CONTRIBUTOR = \"fullContributor\";\n+  public static final String DV_CONTRIBUTOR = \"dvContributor\";\n+  public static final String DS_CONTRIBUTOR = \"dsContributor\";\n+  /**\n+   * Heads up that this says \"editor\" which comes from\n+   * scripts/api/data/role-editor.json but the name is \"Contributor\". The\n+   * *alias* is \"editor\". Don't be fooled!\n+   * #6644 change EDITOR string to contributor to coincide with the \"name\" value\n+   * - see above note SEK 2/13/2020\n+   */\n+  public static final String EDITOR = \"contributor\";\n+  public static final String MANAGER = \"manager\";\n+  public static final String CURATOR = \"curator\";\n+  public static final String MEMBER = \"member\";\n+\n+  public static final String NONE = \"none\";\n+\n+\n+  public static final Comparator<DataverseRole> CMP_BY_NAME = new Comparator<DataverseRole>() {\n+\n+    @Override\n+    public int compare(DataverseRole o1, DataverseRole o2) {\n+      int cmp = o1.getName().compareTo(o2.getName());\n+      if (cmp != 0) {\n+        return cmp;\n+      }\n+\n+      Long o1OwnerId = o1.getOwner() == null ? 0l : o1.getOwner().getId();\n+      Long o2OwnerId = o2.getOwner() == null ? 0l : o2.getOwner().getId();\n+\n+      return o1OwnerId.compareTo(o2OwnerId);\n+    }\n+  };\n+\n+  public static Set<Permission> permissionSet(Iterable<DataverseRole> roles) {\n+    long miniset = 0l;\n+    for (DataverseRole role : roles) {\n+      miniset |= role.permissionBits;\n+    }\n+    return new BitSet(miniset).asSetOf(Permission.class);\n+  }\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  private Long id;\n+\n+  @Pattern(regexp = \".+\", message = \"{role.name}\")\n+  @Column(nullable = false)\n+  private String name;\n+\n+  @Size(max = 255, message = \"{desc.maxLength}\")\n+  private String description;\n+\n+  @Size(max = 16, message = \"{alias.maxLength}\")\n+  @Pattern(regexp = \"[a-zA-Z0-9\\\\_\\\\-]+\", message = \"{alias.illegalCharacters}\")\n+  @Column(nullable = false, unique = true)\n+  private String alias;\n+\n+  /**\n+   * Stores the permissions in a bit set.\n+   */\n+  private long permissionBits;\n+\n+  @ManyToOne\n+  @JoinColumn(nullable = true)\n+  private DvObject owner;\n+\n+  public Long getId() {\n+    return id;\n+  }\n+\n+  public void setId(Long id) {\n+    this.id = id;\n+  }\n+\n+  public String getName() {\n+    if (alias != null) {\n+      try {\n+        String key = \"role.\" + alias.toLowerCase() + \".name\";\n+        String _name = BundleUtil.getStringFromPropertyFile(key, \"BuiltInRoles\");\n+        if (_name == null) {\n+          return name;\n         } else {\n-            return name;\n+          return _name;\n         }\n+      } catch (MissingResourceException mre) {\n+        return name;\n+      }\n+\n+    } else {\n+      return name;\n     }\n+  }\n \n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n-\n-    public String getDescription() {\n-        if (alias != null) {\n-            String key = \"role.\" + alias.toLowerCase() + \".description\";\n-            try {\n-                String _description = BundleUtil.getStringFromPropertyFile(key, \"BuiltInRoles\");\n-                if (_description == null) {\n-                    return description;\n-                } else {\n-                    return _description;\n-                }\n-\n-            } catch (MissingResourceException mre) {\n-                return description;\n-            }\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n \n+  public String getDescription() {\n+    if (alias != null) {\n+      String key = \"role.\" + alias.toLowerCase() + \".description\";\n+      try {\n+        String _description = BundleUtil.getStringFromPropertyFile(key, \"BuiltInRoles\");\n+        if (_description == null) {\n+          return description;\n         } else {\n-            return description;\n+          return _description;\n         }\n+\n+      } catch (MissingResourceException mre) {\n+        return description;\n+      }\n+\n+    } else {\n+      return description;\n+    }\n+  }\n+\n+  public void setDescription(String description) {\n+    this.description = description;\n+  }\n+\n+  public String getAlias() {\n+    return alias;\n+  }\n+\n+  public void setAlias(String alias) {\n+    this.alias = alias;\n+  }\n+\n+  public DvObject getOwner() {\n+    return owner;\n+  }\n+\n+  public void setOwner(DvObject owner) {\n+    this.owner = owner;\n+  }\n+\n+  public void addPermissions(Collection<Permission> ps) {\n+    for (Permission p : ps) {\n+      addPermission(p);\n+    }\n+  }\n+\n+  public void addPermission(Permission p) {\n+    permissionBits = new BitSet(permissionBits).set(p.ordinal()).getBits();\n+  }\n+\n+  public void clearPermissions() {\n+    permissionBits = 0l;\n+  }\n+\n+  public Set<Permission> permissions() {\n+    return new BitSet(permissionBits).asSetOf(Permission.class);\n+  }\n+\n+  public long getPermissionsBits() {\n+    return permissionBits;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"DataverseRole{\" + \"id=\" + id + \", alias=\" + alias + '}';\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int hash = 7;\n+    hash = 97 * hash + Objects.hashCode(this.id);\n+    return hash;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (getClass() != obj.getClass()) {\n+      return false;\n+    }\n+    final DataverseRole other = (DataverseRole) obj;\n+    if (!Objects.equals(this.id, other.id)) {\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Given a DvObject object, see if this role contains a Permission\n+   * applicable to that object\n+   *\n+   * @param dvObject\n+   * @return\n+   */\n+  public boolean doesDvObjectHavePermissionForObject(DvObject dvObject) {\n+\n+    if (dvObject == null) {\n+      return false;\n     }\n \n-\tpublic void setDescription(String description) {\n-\t\tthis.description = description;\n-\t}\n-\n-\tpublic String getAlias() {\n-\t\treturn alias;\n-\t}\n-\n-\tpublic void setAlias(String alias) {\n-\t\tthis.alias = alias;\n-\t}\n-\n-\tpublic DvObject getOwner() {\n-\t\treturn owner;\n-\t}\n-\n-\tpublic void setOwner(DvObject owner) {\n-\t\tthis.owner = owner;\n-\t}\n-\t\n-\tpublic void addPermissions( Collection<Permission> ps ) {\n-\t\tfor ( Permission p : ps ) addPermission(p);\n-\t}\n-\t\n-\tpublic void addPermission( Permission p ) {\n-\t\tpermissionBits = new BitSet(permissionBits).set(p.ordinal()).getBits();\n-\t}\n-\t\n-\tpublic void clearPermissions() {\n-\t\tpermissionBits = 0l;\n-\t}\n-\t\n-\tpublic Set<Permission> permissions() {\n-\t\treturn new BitSet(permissionBits).asSetOf(Permission.class);\n-\t}\n-\t\n-\tpublic long getPermissionsBits() {\n-\t\treturn permissionBits;\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"DataverseRole{\" + \"id=\" + id + \", alias=\" + alias + '}';\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\tint hash = 7;\n-\t\thash = 97 * hash + Objects.hashCode(this.id);\n-\t\treturn hash;\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object obj) {\n-\t\tif (obj == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (getClass() != obj.getClass()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfinal DataverseRole other = (DataverseRole) obj;\n-\t\tif (!Objects.equals(this.id, other.id)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn true;\n-\t}\n-        \n-        /**\n-         * Given a DvObject object, see if this role contains a Permission \n-         * applicable to that object\n-         * \n-         * @param dvObject\n-         * @return \n-         */\n-        public boolean doesDvObjectHavePermissionForObject(DvObject dvObject){\n-            \n-            if (dvObject == null){\n-                return false;\n-            }\n-            \n-            return this.doesDvObjectClassHavePermissionForObject(dvObject.getClass());\n-            \n-        } // doesDvObjectHavePermissionForObject   \n-        \n-        \n-         /**\n-         * Given a DvObject object class, see if this role contains a Permission \n-         * applicable to that object\n-         *          \n-         * Initial user is for MyData page and displaying role tags\n-         * \n-         * @param dvObjectClass\n-         * @return \n-         */\n-        public boolean doesDvObjectClassHavePermissionForObject(Class<? extends DvObject> dvObjectClass){\n-            \n-            if (dvObjectClass == null){\n-                return false;\n-            }\n-            \n-            // Iterate through permissions.  If one applies to this class, return true\n-            //\n-            for (Permission perm : this.permissions()) {\n-               if (perm.appliesTo(dvObjectClass)){\n-                   return true;\n-               }\n-            }\n-            \n-            return false;\n-            \n-        } // doesDvObjectClassHavePermissionForObject   \n-        \n-        \n-        \n+    return this.doesDvObjectClassHavePermissionForObject(dvObject.getClass());\n+\n+  } // doesDvObjectHavePermissionForObject\n+\n+\n+  /**\n+   * Given a DvObject object class, see if this role contains a Permission\n+   * applicable to that object\n+   * <p>\n+   * Initial user is for MyData page and displaying role tags\n+   *\n+   * @param dvObjectClass\n+   * @return\n+   */\n+  public boolean doesDvObjectClassHavePermissionForObject(Class<? extends DvObject> dvObjectClass) {\n+\n+    if (dvObjectClass == null) {\n+      return false;\n+    }\n+\n+    // Iterate through permissions.  If one applies to this class, return true\n+    //\n+    for (Permission perm : this.permissions()) {\n+      if (perm.appliesTo(dvObjectClass)) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+\n+  } // doesDvObjectClassHavePermissionForObject\n+\n+\n }\n",
            "diff_size": 429
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/127/DataverseRole.java\nindex 12ddf817221..761709be5a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/127/DataverseRole.java\n@@ -4,7 +4,6 @@ import edu.harvard.iq.dataverse.Dataverse;\n import edu.harvard.iq.dataverse.DvObject;\n import edu.harvard.iq.dataverse.util.BitSet;\n import edu.harvard.iq.dataverse.util.BundleUtil;\n-\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Comparator;\n@@ -32,33 +31,35 @@ import javax.validation.constraints.Size;\n  * \n  * @author michael\n  */\n+\n+\n @NamedQueries({\n     @NamedQuery(name = \"DataverseRole.findByOwnerId\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.owner.id=:ownerId ORDER BY r.name\"),\n+        query = \"SELECT r FROM DataverseRole r WHERE r.owner.id=:ownerId ORDER BY r.name\"),\n     @NamedQuery(name = \"DataverseRole.findBuiltinRoles\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.owner is null ORDER BY r.name\"),\n+        query = \"SELECT r FROM DataverseRole r WHERE r.owner is null ORDER BY r.name\"),\n     @NamedQuery(name = \"DataverseRole.findBuiltinRoleByAlias\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias AND r.owner is null\"),\n-    @NamedQuery(name = \"DataverseRole.findDataverseRoleByAlias\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias\"),\n+        query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias AND r.owner is null\"),\n+    @NamedQuery(name = \"DataverseRole.findDataverseRoleByAlias\", query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias\"),\n     @NamedQuery(name = \"DataverseRole.findCustomRoleByAliasAndOwner\",\n-            query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias and (r.owner is null or r.owner.id=:ownerId)\"),\n-    @NamedQuery(name = \"DataverseRole.listAll\",\n-            query = \"SELECT r FROM DataverseRole r\"),\n-    @NamedQuery(name = \"DataverseRole.deleteById\",\n-            query = \"DELETE FROM DataverseRole r WHERE r.id=:id\")\n+        query = \"SELECT r FROM DataverseRole r WHERE r.alias=:alias and (r.owner is null or r.owner.id=:ownerId)\"),\n+    @NamedQuery(name = \"DataverseRole.listAll\", query = \"SELECT r FROM DataverseRole r\"),\n+    @NamedQuery(name = \"DataverseRole.deleteById\", query = \"DELETE FROM DataverseRole r WHERE r.id=:id\")\n })\n @Entity\n-@Table(indexes = {@Index(columnList=\"owner_id\")\n-\t\t, @Index(columnList=\"name\")\n-\t\t, @Index(columnList=\"alias\")})\n-public class DataverseRole implements Serializable  {\n+@Table(indexes = {@Index(columnList = \"owner_id\"), @Index(columnList = \"name\"), @Index(columnList = \"alias\")})\n+public class DataverseRole implements Serializable {\n     \n     //constants for the built in roles references in the code\n+\n     public static final String ADMIN = \"admin\";\n+\n     public static final String FILE_DOWNLOADER = \"fileDownloader\";\n+\n     public static final String FULL_CONTRIBUTOR = \"fullContributor\";\n+\n     public static final String DV_CONTRIBUTOR = \"dvContributor\";\n+\n     public static final String DS_CONTRIBUTOR = \"dsContributor\";\n     /**\n      * Heads up that this says \"editor\" which comes from\n@@ -67,65 +68,67 @@ public class DataverseRole implements Serializable  {\n      * #6644 change EDITOR string to contributor to coincide with the \"name\" value \n      * - see above note SEK 2/13/2020\n      */\n+\n     public static final String EDITOR = \"contributor\";\n+\n     public static final String MANAGER = \"manager\";\n+\n     public static final String CURATOR = \"curator\";\n+\n     public static final String MEMBER = \"member\";\n-    \n+\n     public static final String NONE = \"none\";\n-    \n-    \n-\tpublic static final Comparator<DataverseRole> CMP_BY_NAME = new Comparator<DataverseRole>(){\n \n-\t\t@Override\n-\t\tpublic int compare(DataverseRole o1, DataverseRole o2) {\n-\t\t\tint cmp = o1.getName().compareTo(o2.getName());\n-\t\t\tif ( cmp != 0 ) return cmp;\n-                        \n+    public static final Comparator<DataverseRole> CMP_BY_NAME = new Comparator<DataverseRole>() {\n+\n+        @Override\n+        public int compare(DataverseRole o1, DataverseRole o2) {\n+            int cmp = o1.getName().compareTo(o2.getName());\n+            if (cmp != 0) return cmp;\n             Long o1OwnerId = o1.getOwner() == null ? 0l : o1.getOwner().getId();\n             Long o2OwnerId = o2.getOwner() == null ? 0l : o2.getOwner().getId();\n+            return o1OwnerId.compareTo(o2OwnerId);\n+        }\n+    };\n \n-\t\t\treturn o1OwnerId.compareTo( o2OwnerId );\n-\t\t}\n-\t};\n-\tpublic static Set<Permission> permissionSet( Iterable<DataverseRole> roles ) {\n-\t\tlong miniset = 0l;\n-\t\tfor ( DataverseRole role : roles ) {\n-\t\t\tminiset |= role.permissionBits;\n-\t\t}\n-\t\treturn new BitSet(miniset).asSetOf(Permission.class);\n-\t}\n-\t\n-\t@Id\n+    public static Set<Permission> permissionSet(Iterable<DataverseRole> roles) {\n+        long miniset = 0l;\n+        for (DataverseRole role : roles) {\n+            miniset |= role.permissionBits;\n+        }\n+        return new BitSet(miniset).asSetOf(Permission.class);\n+    }\n+\n+    @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Long id;\n-    \n-    @Pattern(regexp=\".+\", message=\"{role.name}\")\n-    @Column( nullable = false )\n+\n+    @Pattern(regexp = \".+\", message = \"{role.name}\")\n+    @Column(nullable = false)\n     private String name;\n-    \n+\n     @Size(max = 255, message = \"{desc.maxLength}\")\n     private String description;\n-    \n+\n     @Size(max = 16, message = \"{alias.maxLength}\")\n     @Pattern(regexp = \"[a-zA-Z0-9\\\\_\\\\-]+\", message = \"{alias.illegalCharacters}\")\n-    @Column(nullable = false, unique=true)\n+    @Column(nullable = false, unique = true)\n     private String alias;\n-\t\n-\t/** Stores the permissions in a bit set.  */\n-\tprivate long permissionBits;\n-\t\n-\t@ManyToOne\n-    @JoinColumn(nullable=true)     \n+    \n+    /** Stores the permissions in a bit set.  */\n+    private long permissionBits;\n+\n+    @ManyToOne\n+    @JoinColumn(nullable = true)\n     private DvObject owner;\n-\t\n-\tpublic Long getId() {\n-\t\treturn id;\n-\t}\n \n-\tpublic void setId(Long id) {\n-\t\tthis.id = id;\n-\t}\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n \n     public String getName() {\n         if (alias != null) {\n@@ -140,15 +143,14 @@ public class DataverseRole implements Serializable  {\n             } catch (MissingResourceException mre) {\n                 return name;\n             }\n-\n         } else {\n             return name;\n         }\n     }\n \n-\tpublic void setName(String name) {\n-\t\tthis.name = name;\n-\t}\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n \n     public String getDescription() {\n         if (alias != null) {\n@@ -160,82 +162,81 @@ public class DataverseRole implements Serializable  {\n                 } else {\n                     return _description;\n                 }\n-\n             } catch (MissingResourceException mre) {\n                 return description;\n             }\n-\n         } else {\n             return description;\n         }\n     }\n \n-\tpublic void setDescription(String description) {\n-\t\tthis.description = description;\n-\t}\n-\n-\tpublic String getAlias() {\n-\t\treturn alias;\n-\t}\n-\n-\tpublic void setAlias(String alias) {\n-\t\tthis.alias = alias;\n-\t}\n-\n-\tpublic DvObject getOwner() {\n-\t\treturn owner;\n-\t}\n-\n-\tpublic void setOwner(DvObject owner) {\n-\t\tthis.owner = owner;\n-\t}\n-\t\n-\tpublic void addPermissions( Collection<Permission> ps ) {\n-\t\tfor ( Permission p : ps ) addPermission(p);\n-\t}\n-\t\n-\tpublic void addPermission( Permission p ) {\n-\t\tpermissionBits = new BitSet(permissionBits).set(p.ordinal()).getBits();\n-\t}\n-\t\n-\tpublic void clearPermissions() {\n-\t\tpermissionBits = 0l;\n-\t}\n-\t\n-\tpublic Set<Permission> permissions() {\n-\t\treturn new BitSet(permissionBits).asSetOf(Permission.class);\n-\t}\n-\t\n-\tpublic long getPermissionsBits() {\n-\t\treturn permissionBits;\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"DataverseRole{\" + \"id=\" + id + \", alias=\" + alias + '}';\n-\t}\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\tint hash = 7;\n-\t\thash = 97 * hash + Objects.hashCode(this.id);\n-\t\treturn hash;\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object obj) {\n-\t\tif (obj == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (getClass() != obj.getClass()) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tfinal DataverseRole other = (DataverseRole) obj;\n-\t\tif (!Objects.equals(this.id, other.id)) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn true;\n-\t}\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public String getAlias() {\n+        return alias;\n+    }\n+\n+    public void setAlias(String alias) {\n+        this.alias = alias;\n+    }\n+\n+    public DvObject getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(DvObject owner) {\n+        this.owner = owner;\n+    }\n+\n+    public void addPermissions(Collection<Permission> ps) {\n+        for (Permission p : ps) addPermission(p);\n+    }\n+\n+    public void addPermission(Permission p) {\n+        permissionBits = new BitSet(permissionBits).set(p.ordinal()).getBits();\n+    }\n+\n+    public void clearPermissions() {\n+        permissionBits = 0l;\n+    }\n+\n+    public Set<Permission> permissions() {\n+        return new BitSet(permissionBits).asSetOf(Permission.class);\n+    }\n+\n+    public long getPermissionsBits() {\n+        return permissionBits;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"DataverseRole{\" + \"id=\" + id + \", alias=\" + alias + '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 97 * hash + Objects.hashCode(this.id);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final DataverseRole other = (DataverseRole) obj;\n+        if (!Objects.equals(this.id, other.id)) {\n+            return false;\n+        }\n+        return true;\n+    }\n         \n         /**\n          * Given a DvObject object, see if this role contains a Permission \n@@ -244,15 +245,13 @@ public class DataverseRole implements Serializable  {\n          * @param dvObject\n          * @return \n          */\n-        public boolean doesDvObjectHavePermissionForObject(DvObject dvObject){\n-            \n-            if (dvObject == null){\n-                return false;\n-            }\n-            \n-            return this.doesDvObjectClassHavePermissionForObject(dvObject.getClass());\n-            \n-        } // doesDvObjectHavePermissionForObject   \n+\n+    public boolean doesDvObjectHavePermissionForObject(DvObject dvObject) {\n+        if (dvObject == null) {\n+            return false;\n+        }\n+        return this.doesDvObjectClassHavePermissionForObject(dvObject.getClass());\n+    } // doesDvObjectHavePermissionForObject   \n         \n         \n          /**\n@@ -264,24 +263,21 @@ public class DataverseRole implements Serializable  {\n          * @param dvObjectClass\n          * @return \n          */\n-        public boolean doesDvObjectClassHavePermissionForObject(Class<? extends DvObject> dvObjectClass){\n-            \n-            if (dvObjectClass == null){\n-                return false;\n-            }\n+\n+    public boolean doesDvObjectClassHavePermissionForObject(Class<? extends DvObject> dvObjectClass) {\n+        if (dvObjectClass == null) {\n+            return false;\n+        }\n             \n             // Iterate through permissions.  If one applies to this class, return true\n             //\n-            for (Permission perm : this.permissions()) {\n-               if (perm.appliesTo(dvObjectClass)){\n-                   return true;\n-               }\n+\n+        for (Permission perm : this.permissions()) {\n+            if (perm.appliesTo(dvObjectClass)) {\n+                return true;\n             }\n-            \n-            return false;\n-            \n-        } // doesDvObjectClassHavePermissionForObject   \n-        \n-        \n-        \n-}\n+        }\n+        return false;\n+    } // doesDvObjectClassHavePermissionForObject   \n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 173
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "54",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/127/DataverseRole.java\nindex 12ddf817221..21031ed2d97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/127/DataverseRole.java\n@@ -50,7 +50,7 @@ import javax.validation.constraints.Size;\n })\n @Entity\n @Table(indexes = {@Index(columnList=\"owner_id\")\n-\t\t, @Index(columnList=\"name\")\n+            , @Index(columnList=\"name\")\n \t\t, @Index(columnList=\"alias\")})\n public class DataverseRole implements Serializable  {\n     \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "54",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/127/DataverseRole.java\nindex 12ddf817221..41d03e76035 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/127/DataverseRole.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/127/DataverseRole.java\n@@ -50,7 +50,7 @@ import javax.validation.constraints.Size;\n })\n @Entity\n @Table(indexes = {@Index(columnList=\"owner_id\")\n-\t\t, @Index(columnList=\"name\")\n+, @Index(columnList=\"name\")\n \t\t, @Index(columnList=\"alias\")})\n public class DataverseRole implements Serializable  {\n     \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}