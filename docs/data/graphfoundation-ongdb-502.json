{
    "project_name": "graphfoundation-ongdb",
    "error_id": "502",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "96",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "225",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "257",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "271",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "289",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "296",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "304",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "311",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "318",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "332",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "389",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "400",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "412",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "427",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/502/TransactionStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/502/TransactionStateMachine.java\nindex d9d9653c3d7..07b1f9f5a70 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/502/TransactionStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/502/TransactionStateMachine.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.runtime;\n \n import java.time.Clock;\n@@ -43,490 +44,482 @@ import static org.neo4j.function.ThrowingAction.noop;\n \n public class TransactionStateMachine implements StatementProcessor\n {\n-    private static final Pattern BEGIN = Pattern.compile(\"(?i)^\\\\s*BEGIN\\\\s*;?\\\\s*$\");\n-    private static final Pattern COMMIT = Pattern.compile(\"(?i)^\\\\s*COMMIT\\\\s*;?\\\\s*$\");\n-    private static final Pattern ROLLBACK = Pattern.compile(\"(?i)^\\\\s*ROLLBACK\\\\s*;?\\\\s*$\");\n-\n-    final SPI spi;\n-    final MutableTransactionState ctx;\n-    State state = State.AUTO_COMMIT;\n-\n-    TransactionStateMachine( SPI spi, AuthenticationResult authenticationResult, Clock clock )\n+  private static final Pattern BEGIN = Pattern.compile(\"(?i)^\\\\s*BEGIN\\\\s*;?\\\\s*$\");\n+  private static final Pattern COMMIT = Pattern.compile(\"(?i)^\\\\s*COMMIT\\\\s*;?\\\\s*$\");\n+  private static final Pattern ROLLBACK = Pattern.compile(\"(?i)^\\\\s*ROLLBACK\\\\s*;?\\\\s*$\");\n+\n+  final SPI spi;\n+  final MutableTransactionState ctx;\n+  State state = State.AUTO_COMMIT;\n+\n+  TransactionStateMachine(SPI spi, AuthenticationResult authenticationResult, Clock clock)\n+  {\n+    this.spi = spi;\n+    ctx = new MutableTransactionState(authenticationResult, clock);\n+  }\n+\n+  public State state()\n+  {\n+    return state;\n+  }\n+\n+  private void before()\n+  {\n+    if (ctx.currentTransaction != null)\n     {\n-        this.spi = spi;\n-        ctx = new MutableTransactionState( authenticationResult, clock );\n+      spi.bindTransactionToCurrentThread(ctx.currentTransaction);\n     }\n+  }\n \n-    public State state()\n+  @Override\n+  public StatementMetadata run(String statement, MapValue params) throws KernelException\n+  {\n+    before();\n+    try\n     {\n-        return state;\n-    }\n+      ensureNoPendingTerminationNotice();\n \n-    private void before()\n-    {\n-        if ( ctx.currentTransaction != null )\n-        {\n-            spi.bindTransactionToCurrentThread( ctx.currentTransaction );\n-        }\n-    }\n+      state = state.run(ctx, spi, statement, params);\n \n-    @Override\n-    public StatementMetadata run( String statement, MapValue params ) throws KernelException\n+      return ctx.currentStatementMetadata;\n+    } catch (TransactionFailureException ex)\n     {\n-        before();\n-        try\n-        {\n-            ensureNoPendingTerminationNotice();\n-\n-            state = state.run( ctx, spi, statement, params );\n-\n-            return ctx.currentStatementMetadata;\n-        }\n-        catch ( TransactionFailureException ex )\n-        {\n-            state = State.AUTO_COMMIT;\n-            throw ex;\n-        }\n-        finally\n-        {\n-            after();\n-        }\n-    }\n-\n-    @Override\n-    public void streamResult( ThrowingConsumer<BoltResult, Exception> resultConsumer ) throws Exception\n+      state = State.AUTO_COMMIT;\n+      throw ex;\n+    } finally\n     {\n-        before();\n-        try\n-        {\n-            ensureNoPendingTerminationNotice();\n-\n-            state.streamResult( ctx, resultConsumer );\n-        }\n-        finally\n-        {\n-            after();\n-        }\n+      after();\n     }\n+  }\n \n-    @Override\n-    public boolean hasOpenStatement()\n+  @Override\n+  public void streamResult(ThrowingConsumer<BoltResult, Exception> resultConsumer) throws Exception\n+  {\n+    before();\n+    try\n     {\n-        return ctx.currentResultHandle != null;\n-    }\n+      ensureNoPendingTerminationNotice();\n \n-    /**\n-     * Rollback and close transaction. Move back to {@link State#AUTO_COMMIT}.\n-     * <p>\n-     * <b>Warning:</b>This method should only be called by the bolt worker thread during it's regular message\n-     * processing. It is wrong to call it from a different thread because kernel transactions are not thread-safe.\n-     *\n-     * @throws TransactionFailureException when transaction fails to close.\n-     */\n-    @Override\n-    public void reset() throws TransactionFailureException\n+      state.streamResult(ctx, resultConsumer);\n+    } finally\n     {\n-        state.terminateQueryAndRollbackTransaction( ctx );\n-        state = State.AUTO_COMMIT;\n+      after();\n     }\n-\n-    private void after()\n+  }\n+\n+  @Override\n+  public boolean hasOpenStatement()\n+  {\n+    return ctx.currentResultHandle != null;\n+  }\n+\n+  /**\n+   * Rollback and close transaction. Move back to {@link State#AUTO_COMMIT}.\n+   * <p>\n+   * <b>Warning:</b>This method should only be called by the bolt worker thread during it's regular message\n+   * processing. It is wrong to call it from a different thread because kernel transactions are not thread-safe.\n+   *\n+   * @throws TransactionFailureException when transaction fails to close.\n+   */\n+  @Override\n+  public void reset() throws TransactionFailureException\n+  {\n+    state.terminateQueryAndRollbackTransaction(ctx);\n+    state = State.AUTO_COMMIT;\n+  }\n+\n+  private void after()\n+  {\n+    spi.unbindTransactionFromCurrentThread();\n+  }\n+\n+  @Override\n+  public void markCurrentTransactionForTermination()\n+  {\n+    KernelTransaction tx = ctx.currentTransaction;\n+    if (tx != null)\n     {\n-        spi.unbindTransactionFromCurrentThread();\n+      tx.markForTermination(Status.Transaction.Terminated);\n     }\n+  }\n \n-    @Override\n-    public void markCurrentTransactionForTermination()\n-    {\n-        KernelTransaction tx = ctx.currentTransaction;\n-        if ( tx != null )\n-        {\n-            tx.markForTermination( Status.Transaction.Terminated );\n-        }\n-    }\n+  @Override\n+  public void validateTransaction() throws KernelException\n+  {\n+    KernelTransaction tx = ctx.currentTransaction;\n \n-    @Override\n-    public void validateTransaction() throws KernelException\n+    if (tx != null)\n     {\n-        KernelTransaction tx = ctx.currentTransaction;\n+      Optional<Status> statusOpt = tx.getReasonIfTerminated();\n \n-        if ( tx != null )\n+      if (statusOpt.isPresent())\n+      {\n+        if (statusOpt.get().code().classification().rollbackTransaction())\n         {\n-            Optional<Status> statusOpt = tx.getReasonIfTerminated();\n-\n-            if ( statusOpt.isPresent() )\n-            {\n-                if ( statusOpt.get().code().classification().rollbackTransaction() )\n-                {\n-                    ctx.pendingTerminationNotice = statusOpt.get();\n+          ctx.pendingTerminationNotice = statusOpt.get();\n \n-                    reset();\n-                }\n-            }\n+          reset();\n         }\n+      }\n     }\n+  }\n \n-    private void ensureNoPendingTerminationNotice()\n+  private void ensureNoPendingTerminationNotice()\n+  {\n+    if (ctx.pendingTerminationNotice != null)\n     {\n-        if ( ctx.pendingTerminationNotice != null )\n-        {\n-            Status status = ctx.pendingTerminationNotice;\n+      Status status = ctx.pendingTerminationNotice;\n \n-            ctx.pendingTerminationNotice = null;\n+      ctx.pendingTerminationNotice = null;\n \n-            throw new TransactionTerminatedException( status );\n-        }\n+      throw new TransactionTerminatedException(status);\n     }\n+  }\n+\n+  @Override\n+  public boolean hasTransaction()\n+  {\n+    return state == State.EXPLICIT_TRANSACTION;\n+  }\n+\n+  @Override\n+  public void setQuerySource(BoltQuerySource querySource)\n+  {\n+    this.ctx.querySource = querySource;\n+  }\n+\n+  enum State\n+  {\n+    AUTO_COMMIT\n+        {\n+          @Override\n+          State run(MutableTransactionState ctx, SPI spi, String statement,\n+                    MapValue params) throws KernelException\n \n-    @Override\n-    public boolean hasTransaction()\n-    {\n-        return state == State.EXPLICIT_TRANSACTION;\n-    }\n+          {\n+            if (BEGIN.matcher(statement).matches())\n+            {\n+              ctx.currentTransaction = spi.beginTransaction(ctx.loginContext);\n+\n+              Bookmark bookmark = Bookmark.fromParamsOrNull(params);\n+              if (bookmark != null)\n+              {\n+                spi.awaitUpToDate(bookmark.txId());\n+                ctx.currentResult = new BookmarkResult(bookmark);\n+              } else\n+              {\n+                ctx.currentResult = BoltResult.EMPTY;\n+              }\n+\n+              return EXPLICIT_TRANSACTION;\n+            } else if (COMMIT.matcher(statement).matches())\n+            {\n+              throw new QueryExecutionKernelException(\n+                  new InvalidSemanticsException(\"No current transaction to commit.\"));\n+            } else if (ROLLBACK.matcher(statement).matches())\n+            {\n+              ctx.currentResult = BoltResult.EMPTY;\n+              return AUTO_COMMIT;\n+            } else\n+            {\n+              if (statement.isEmpty())\n+              {\n+                statement = ctx.lastStatement;\n+              } else\n+              {\n+                ctx.lastStatement = statement;\n+              }\n \n-    @Override\n-    public void setQuerySource( BoltQuerySource querySource )\n-    {\n-        this.ctx.querySource = querySource;\n-    }\n+              execute(ctx, spi, statement, params, spi.isPeriodicCommit(statement));\n \n-    enum State\n-    {\n-        AUTO_COMMIT\n-                {\n-                    @Override\n-                    State run( MutableTransactionState ctx, SPI spi, String statement,\n-                               MapValue params ) throws KernelException\n-\n-                    {\n-                        if ( BEGIN.matcher( statement ).matches() )\n-                        {\n-                            ctx.currentTransaction = spi.beginTransaction( ctx.loginContext );\n-\n-                            Bookmark bookmark = Bookmark.fromParamsOrNull( params );\n-                            if ( bookmark != null )\n-                            {\n-                                spi.awaitUpToDate( bookmark.txId() );\n-                                ctx.currentResult = new BookmarkResult( bookmark );\n-                            }\n-                            else\n-                            {\n-                                ctx.currentResult = BoltResult.EMPTY;\n-                            }\n-\n-                            return EXPLICIT_TRANSACTION;\n-                        }\n-                        else if ( COMMIT.matcher( statement ).matches() )\n-                        {\n-                            throw new QueryExecutionKernelException(\n-                                    new InvalidSemanticsException( \"No current transaction to commit.\" ) );\n-                        }\n-                        else if ( ROLLBACK.matcher( statement ).matches() )\n-                        {\n-                            ctx.currentResult = BoltResult.EMPTY;\n-                            return AUTO_COMMIT;\n-                        }\n-                        else\n-                        {\n-                            if ( statement.isEmpty() )\n-                            {\n-                                statement = ctx.lastStatement;\n-                            }\n-                            else\n-                            {\n-                                ctx.lastStatement = statement;\n-                            }\n-\n-                            execute( ctx, spi, statement, params, spi.isPeriodicCommit( statement ) );\n-\n-                            return AUTO_COMMIT;\n-                        }\n-                    }\n-\n-                    void execute( MutableTransactionState ctx, SPI spi, String statement, MapValue params, boolean isPeriodicCommit )\n-                            throws KernelException\n-                    {\n-                        // only acquire a new transaction when the statement does not contain periodic commit\n-                        if ( !isPeriodicCommit )\n-                        {\n-                            ctx.currentTransaction = spi.beginTransaction( ctx.loginContext );\n-                        }\n-\n-                        boolean failed = true;\n-                        try\n-                        {\n-                            BoltResultHandle resultHandle = spi.executeQuery( ctx.querySource, ctx.loginContext, statement, params );\n-                            startExecution( ctx, resultHandle );\n-                            failed = false;\n-                        }\n-                        finally\n-                        {\n-                            // if we acquired a transaction and a failure occurred, then simply close the transaction\n-                            if ( !isPeriodicCommit )\n-                            {\n-                                if ( failed )\n-                                {\n-                                    closeTransaction( ctx, false );\n-                                }\n-                            }\n-                            else\n-                            {\n-                                ctx.currentTransaction = spi.beginTransaction( ctx.loginContext );\n-                            }\n-                        }\n-                    }\n-\n-                    @Override\n-                    void streamResult( MutableTransactionState ctx,\n-                                       ThrowingConsumer<BoltResult, Exception> resultConsumer ) throws Exception\n-                    {\n-                        assert ctx.currentResult != null;\n-\n-                        boolean success = false;\n-                        try\n-                        {\n-                            success = consumeResult( ctx, resultConsumer );\n-                        }\n-                        finally\n-                        {\n-                            closeTransaction( ctx, success );\n-                        }\n-                    }\n-                },\n-        EXPLICIT_TRANSACTION\n-                {\n-                    @Override\n-                    State run( MutableTransactionState ctx, SPI spi, String statement, MapValue params )\n-                            throws KernelException\n-                    {\n-                        if ( BEGIN.matcher( statement ).matches() )\n-                        {\n-                            throw new QueryExecutionKernelException(\n-                                    new InvalidSemanticsException( \"Nested transactions are not supported.\" ) );\n-                        }\n-                        else if ( COMMIT.matcher( statement ).matches() )\n-                        {\n-                            closeTransaction( ctx, true );\n-                            long txId = spi.newestEncounteredTxId();\n-                            Bookmark bookmark = new Bookmark( txId );\n-                            ctx.currentResult = new BookmarkResult( bookmark );\n-\n-                            return AUTO_COMMIT;\n-                        }\n-                        else if ( ROLLBACK.matcher( statement ).matches() )\n-                        {\n-                            closeTransaction( ctx, false );\n-                            ctx.currentResult = BoltResult.EMPTY;\n-                            return AUTO_COMMIT;\n-                        }\n-                        else\n-                        {\n-                            if ( statement.isEmpty() )\n-                            {\n-                                statement = ctx.lastStatement;\n-                            }\n-                            else\n-                            {\n-                                ctx.lastStatement = statement;\n-                            }\n-                            if ( spi.isPeriodicCommit( statement ) )\n-                            {\n-                                throw new QueryExecutionKernelException( new InvalidSemanticsException(\n-                                        \"Executing queries that use periodic commit in an \" +\n-                                                \"open transaction is not possible.\" ) );\n-                            }\n-                            else\n-                            {\n-                                BoltResultHandle resultHandle = execute( ctx, spi, statement, params );\n-                                startExecution( ctx, resultHandle );\n-                                return EXPLICIT_TRANSACTION;\n-                            }\n-                        }\n-                    }\n-\n-                    private BoltResultHandle execute( MutableTransactionState ctx, SPI spi, String statement, MapValue params )\n-                    {\n-                        return executeQuery( ctx, spi, statement, params );\n-                    }\n-\n-                    @Override\n-                    void streamResult( MutableTransactionState ctx,\n-                            ThrowingConsumer<BoltResult,Exception> resultConsumer ) throws Exception\n-                    {\n-                        assert ctx.currentResult != null;\n-                        consumeResult( ctx, resultConsumer );\n-                    }\n-                };\n-\n-        abstract State run( MutableTransactionState ctx,\n-                            SPI spi,\n-                            String statement,\n-                            MapValue params ) throws KernelException;\n-\n-        abstract void streamResult( MutableTransactionState ctx,\n-                                    ThrowingConsumer<BoltResult, Exception> resultConsumer ) throws Exception;\n-\n-        void terminateQueryAndRollbackTransaction( MutableTransactionState ctx ) throws TransactionFailureException\n-        {\n-            if ( ctx.currentResultHandle != null )\n-            {\n-                ctx.currentResultHandle.terminate();\n-                ctx.currentResultHandle = null;\n+              return AUTO_COMMIT;\n             }\n-            if ( ctx.currentResult != null )\n+          }\n+\n+          void execute(MutableTransactionState ctx, SPI spi, String statement, MapValue params, boolean isPeriodicCommit)\n+              throws KernelException\n+          {\n+            // only acquire a new transaction when the statement does not contain periodic commit\n+            if (!isPeriodicCommit)\n             {\n-                ctx.currentResult.close();\n-                ctx.currentResult = null;\n+              ctx.currentTransaction = spi.beginTransaction(ctx.loginContext);\n             }\n \n-           closeTransaction( ctx, false);\n-        }\n-\n-        /*\n-         * This is overly careful about always closing and nulling the transaction since\n-         * reset can cause ctx.currentTransaction to be null we store in local variable.\n-         */\n-        void closeTransaction( MutableTransactionState ctx, boolean success ) throws TransactionFailureException\n-        {\n-            KernelTransaction tx = ctx.currentTransaction;\n-            ctx.currentTransaction = null;\n-            if ( tx != null )\n+            boolean failed = true;\n+            try\n             {\n-                try\n-                {\n-                    if ( success )\n-                    {\n-                        tx.success();\n-                    }\n-                    else\n-                    {\n-                        tx.failure();\n-                    }\n-                    if ( tx.isOpen() )\n-                    {\n-                        tx.close();\n-                    }\n-                }\n-                finally\n+              BoltResultHandle resultHandle = spi.executeQuery(ctx.querySource, ctx.loginContext, statement, params);\n+              startExecution(ctx, resultHandle);\n+              failed = false;\n+            } finally\n+            {\n+              // if we acquired a transaction and a failure occurred, then simply close the transaction\n+              if (!isPeriodicCommit)\n+              {\n+                if (failed)\n                 {\n-                    ctx.currentTransaction = null;\n+                  closeTransaction(ctx, false);\n                 }\n+              } else\n+              {\n+                ctx.currentTransaction = spi.beginTransaction(ctx.loginContext);\n+              }\n             }\n-        }\n+          }\n+\n+          @Override\n+          void streamResult(MutableTransactionState ctx,\n+                            ThrowingConsumer<BoltResult, Exception> resultConsumer) throws Exception\n+          {\n+            assert ctx.currentResult != null;\n \n-        boolean consumeResult( MutableTransactionState ctx, ThrowingConsumer<BoltResult,Exception> resultConsumer ) throws Exception\n-        {\n             boolean success = false;\n             try\n             {\n-                resultConsumer.accept( ctx.currentResult );\n-                success = true;\n-            }\n-            finally\n+              success = consumeResult(ctx, resultConsumer);\n+            } finally\n             {\n-                ctx.currentResult.close();\n-                ctx.currentResult = null;\n-\n-                if ( ctx.currentResultHandle != null )\n-                {\n-                    ctx.currentResultHandle.close( success );\n-                    ctx.currentResultHandle = null;\n-                }\n+              closeTransaction(ctx, success);\n             }\n-            return success;\n-        }\n-\n-        void startExecution( MutableTransactionState ctx, BoltResultHandle resultHandle ) throws KernelException\n+          }\n+        },\n+    EXPLICIT_TRANSACTION\n         {\n-            ctx.currentResultHandle = resultHandle;\n-            try\n+          @Override\n+          State run(MutableTransactionState ctx, SPI spi, String statement, MapValue params)\n+              throws KernelException\n+          {\n+            if (BEGIN.matcher(statement).matches())\n             {\n-                ctx.currentResult = resultHandle.start();\n-            }\n-            catch ( Throwable t )\n+              throw new QueryExecutionKernelException(\n+                  new InvalidSemanticsException(\"Nested transactions are not supported.\"));\n+            } else if (COMMIT.matcher(statement).matches())\n+            {\n+              closeTransaction(ctx, true);\n+              long txId = spi.newestEncounteredTxId();\n+              Bookmark bookmark = new Bookmark(txId);\n+              ctx.currentResult = new BookmarkResult(bookmark);\n+\n+              return AUTO_COMMIT;\n+            } else if (ROLLBACK.matcher(statement).matches())\n             {\n-                ctx.currentResultHandle.close( false );\n-                ctx.currentResultHandle = null;\n-                throw t;\n+              closeTransaction(ctx, false);\n+              ctx.currentResult = BoltResult.EMPTY;\n+              return AUTO_COMMIT;\n+            } else\n+            {\n+              if (statement.isEmpty())\n+              {\n+                statement = ctx.lastStatement;\n+              } else\n+              {\n+                ctx.lastStatement = statement;\n+              }\n+              if (spi.isPeriodicCommit(statement))\n+              {\n+                throw new QueryExecutionKernelException(new InvalidSemanticsException(\n+                    \"Executing queries that use periodic commit in an \" +\n+                        \"open transaction is not possible.\"));\n+              } else\n+              {\n+                BoltResultHandle resultHandle = execute(ctx, spi, statement, params);\n+                startExecution(ctx, resultHandle);\n+                return EXPLICIT_TRANSACTION;\n+              }\n             }\n-        }\n+          }\n+\n+          private BoltResultHandle execute(MutableTransactionState ctx, SPI spi, String statement, MapValue params)\n+          {\n+            return executeQuery(ctx, spi, statement, params);\n+          }\n+\n+          @Override\n+          void streamResult(MutableTransactionState ctx,\n+                            ThrowingConsumer<BoltResult, Exception> resultConsumer) throws Exception\n+          {\n+            assert ctx.currentResult != null;\n+            consumeResult(ctx, resultConsumer);\n+          }\n+        };\n \n-    }\n+    abstract State run(MutableTransactionState ctx,\n+                       SPI spi,\n+                       String statement,\n+                       MapValue params) throws KernelException;\n \n-    private static BoltResultHandle executeQuery( MutableTransactionState ctx, SPI spi, String statement,\n-                                                  MapValue params )\n+    abstract void streamResult(MutableTransactionState ctx,\n+                               ThrowingConsumer<BoltResult, Exception> resultConsumer) throws Exception;\n+\n+    void terminateQueryAndRollbackTransaction(MutableTransactionState ctx) throws TransactionFailureException\n     {\n-        return spi.executeQuery( ctx.querySource, ctx.loginContext, statement, params );\n+      if (ctx.currentResultHandle != null)\n+      {\n+        ctx.currentResultHandle.terminate();\n+        ctx.currentResultHandle = null;\n+      }\n+      if (ctx.currentResult != null)\n+      {\n+        ctx.currentResult.close();\n+        ctx.currentResult = null;\n+      }\n+\n+      closeTransaction(ctx, false);\n     }\n \n-    /**\n-     * This interface makes it possible to abort queries even before they have returned a Result object.\n-     * In some cases, creating the Result object will take as long as running the query takes. This way, we can\n-     * terminate the underlying transaction while the Result object is created.\n+    /*\n+     * This is overly careful about always closing and nulling the transaction since\n+     * reset can cause ctx.currentTransaction to be null we store in local variable.\n      */\n-    interface BoltResultHandle\n+    void closeTransaction(MutableTransactionState ctx, boolean success) throws TransactionFailureException\n     {\n-        BoltResult start() throws KernelException;\n-        void close( boolean success );\n-        void terminate();\n+      KernelTransaction tx = ctx.currentTransaction;\n+      ctx.currentTransaction = null;\n+      if (tx != null)\n+      {\n+        try\n+        {\n+          if (success)\n+          {\n+            tx.success();\n+          } else\n+          {\n+            tx.failure();\n+          }\n+          if (tx.isOpen())\n+          {\n+            tx.close();\n+          }\n+        } finally\n+        {\n+          ctx.currentTransaction = null;\n+        }\n+      }\n     }\n \n-    static class MutableTransactionState\n+    boolean consumeResult(MutableTransactionState ctx, ThrowingConsumer<BoltResult, Exception> resultConsumer) throws Exception\n     {\n-        /** The current session security context to be used for starting transactions */\n-        final LoginContext loginContext;\n+      boolean success = false;\n+      try\n+      {\n+        resultConsumer.accept(ctx.currentResult);\n+        success = true;\n+      } finally\n+      {\n+        ctx.currentResult.close();\n+        ctx.currentResult = null;\n+\n+        if (ctx.currentResultHandle != null)\n+        {\n+          ctx.currentResultHandle.close(success);\n+          ctx.currentResultHandle = null;\n+        }\n+      }\n+      return success;\n+    }\n \n-        /** The current transaction, if present */\n-        KernelTransaction currentTransaction;\n+    void startExecution(MutableTransactionState ctx, BoltResultHandle resultHandle) throws KernelException\n+    {\n+      ctx.currentResultHandle = resultHandle;\n+      try\n+      {\n+        ctx.currentResult = resultHandle.start();\n+      } catch (Throwable t)\n+      {\n+        ctx.currentResultHandle.close(false);\n+        ctx.currentResultHandle = null;\n+        throw t;\n+      }\n+    }\n \n-        Status pendingTerminationNotice;\n+  }\n \n-        /** Last Cypher statement executed */\n-        String lastStatement = \"\";\n+  private static BoltResultHandle executeQuery(MutableTransactionState ctx, SPI spi, String statement,\n+                                               MapValue params)\n+  {\n+    return spi.executeQuery(ctx.querySource, ctx.loginContext, statement, params);\n+  }\n \n-        /** The current pending result, if present */\n-        BoltResult currentResult;\n+  /**\n+   * This interface makes it possible to abort queries even before they have returned a Result object.\n+   * In some cases, creating the Result object will take as long as running the query takes. This way, we can\n+   * terminate the underlying transaction while the Result object is created.\n+   */\n+  interface BoltResultHandle\n+  {\n+    BoltResult start() throws KernelException;\n \n-        final Clock clock;\n+    void close(boolean success);\n \n-        /** A re-usable statement metadata instance that always represents the currently running statement */\n-        private final StatementMetadata currentStatementMetadata = new StatementMetadata()\n-        {\n-            @Override\n-            public String[] fieldNames()\n-            {\n-                return currentResult.fieldNames();\n-            }\n-        };\n+    void terminate();\n+  }\n \n-        BoltQuerySource querySource;\n-        BoltResultHandle currentResultHandle;\n+  static class MutableTransactionState\n+  {\n+    /**\n+     * The current session security context to be used for starting transactions\n+     */\n+    final LoginContext loginContext;\n \n-        private MutableTransactionState( AuthenticationResult authenticationResult, Clock clock )\n-        {\n-            this.clock = clock;\n-            this.loginContext = authenticationResult.getLoginContext();\n-        }\n-    }\n+    /**\n+     * The current transaction, if present\n+     */\n+    KernelTransaction currentTransaction;\n \n-    interface SPI\n-    {\n-        void awaitUpToDate( long oldestAcceptableTxId ) throws TransactionFailureException;\n+    Status pendingTerminationNotice;\n \n-        long newestEncounteredTxId();\n+    /**\n+     * Last Cypher statement executed\n+     */\n+    String lastStatement = \"\";\n \n-        KernelTransaction beginTransaction( LoginContext loginContext );\n+    /**\n+     * The current pending result, if present\n+     */\n+    BoltResult currentResult;\n \n-        void bindTransactionToCurrentThread( KernelTransaction tx );\n+    final Clock clock;\n \n-        void unbindTransactionFromCurrentThread();\n+    /**\n+     * A re-usable statement metadata instance that always represents the currently running statement\n+     */\n+    private final StatementMetadata currentStatementMetadata = new StatementMetadata()\n+    {\n+      @Override\n+      public String[] fieldNames()\n+      {\n+        return currentResult.fieldNames();\n+      }\n+    };\n \n-        /**\n-         * @return {@code true} if the query is a PERIODIC COMMIT query and not an EXPLAIN query\n-         */\n-        boolean isPeriodicCommit( String query );\n+    BoltQuerySource querySource;\n+    BoltResultHandle currentResultHandle;\n \n-        BoltResultHandle executeQuery( BoltQuerySource querySource,\n-                LoginContext loginContext, String statement, MapValue params );\n+    private MutableTransactionState(AuthenticationResult authenticationResult, Clock clock)\n+    {\n+      this.clock = clock;\n+      this.loginContext = authenticationResult.getLoginContext();\n     }\n+  }\n+\n+  interface SPI\n+  {\n+    void awaitUpToDate(long oldestAcceptableTxId) throws TransactionFailureException;\n+\n+    long newestEncounteredTxId();\n+\n+    KernelTransaction beginTransaction(LoginContext loginContext);\n+\n+    void bindTransactionToCurrentThread(KernelTransaction tx);\n+\n+    void unbindTransactionFromCurrentThread();\n+\n+    /**\n+     * @return {@code true} if the query is a PERIODIC COMMIT query and not an EXPLAIN query\n+     */\n+    boolean isPeriodicCommit(String query);\n+\n+    BoltResultHandle executeQuery(BoltQuerySource querySource,\n+                                  LoginContext loginContext, String statement, MapValue params);\n+  }\n }\n",
            "diff_size": 696
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "321",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "348",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/502/TransactionStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/502/TransactionStateMachine.java\nindex d9d9653c3d7..1c534ce4868 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/502/TransactionStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/502/TransactionStateMachine.java\n@@ -43,9 +43,9 @@ import static org.neo4j.function.ThrowingAction.noop;\n \n public class TransactionStateMachine implements StatementProcessor\n {\n-    private static final Pattern BEGIN = Pattern.compile(\"(?i)^\\\\s*BEGIN\\\\s*;?\\\\s*$\");\n-    private static final Pattern COMMIT = Pattern.compile(\"(?i)^\\\\s*COMMIT\\\\s*;?\\\\s*$\");\n-    private static final Pattern ROLLBACK = Pattern.compile(\"(?i)^\\\\s*ROLLBACK\\\\s*;?\\\\s*$\");\n+    private static final Pattern BEGIN = Pattern.compile( \"(?i)^\\\\s*BEGIN\\\\s*;?\\\\s*$\");\n+    private static final Pattern COMMIT = Pattern.compile( \"(?i)^\\\\s*COMMIT\\\\s*;?\\\\s*$\");\n+    private static final Pattern ROLLBACK = Pattern.compile( \"(?i)^\\\\s*ROLLBACK\\\\s*;?\\\\s*$\");\n \n     final SPI spi;\n     final MutableTransactionState ctx;\n@@ -79,8 +79,7 @@ public class TransactionStateMachine implements StatementProcessor\n             ensureNoPendingTerminationNotice();\n \n             state = state.run( ctx, spi, statement, params );\n-\n-            return ctx.currentStatementMetadata;\n+return ctx.currentStatementMetadata;\n         }\n         catch ( TransactionFailureException ex )\n         {\n@@ -94,14 +93,13 @@ public class TransactionStateMachine implements StatementProcessor\n     }\n \n     @Override\n-    public void streamResult( ThrowingConsumer<BoltResult, Exception> resultConsumer ) throws Exception\n+    public void streamResult( ThrowingConsumer<BoltResult,Exception> resultConsumer ) throws Exception\n     {\n         before();\n         try\n         {\n             ensureNoPendingTerminationNotice();\n-\n-            state.streamResult( ctx, resultConsumer );\n+state.streamResult( ctx, resultConsumer );\n         }\n         finally\n         {\n@@ -153,8 +151,7 @@ public class TransactionStateMachine implements StatementProcessor\n         if ( tx != null )\n         {\n             Optional<Status> statusOpt = tx.getReasonIfTerminated();\n-\n-            if ( statusOpt.isPresent() )\n+if ( statusOpt.isPresent() )\n             {\n                 if ( statusOpt.get().code().classification().rollbackTransaction() )\n                 {\n@@ -193,17 +190,14 @@ public class TransactionStateMachine implements StatementProcessor\n     enum State\n     {\n         AUTO_COMMIT\n-                {\n+{\n                     @Override\n-                    State run( MutableTransactionState ctx, SPI spi, String statement,\n-                               MapValue params ) throws KernelException\n-\n-                    {\n+                    State run( MutableTransactionState ctx, SPI spi, String statement, MapValue params ) throws KernelException\n+{\n                         if ( BEGIN.matcher( statement ).matches() )\n                         {\n                             ctx.currentTransaction = spi.beginTransaction( ctx.loginContext );\n-\n-                            Bookmark bookmark = Bookmark.fromParamsOrNull( params );\n+Bookmark bookmark = Bookmark.fromParamsOrNull( params );\n                             if ( bookmark != null )\n                             {\n                                 spi.awaitUpToDate( bookmark.txId() );\n@@ -218,8 +212,7 @@ public class TransactionStateMachine implements StatementProcessor\n                         }\n                         else if ( COMMIT.matcher( statement ).matches() )\n                         {\n-                            throw new QueryExecutionKernelException(\n-                                    new InvalidSemanticsException( \"No current transaction to commit.\" ) );\n+                            throw new QueryExecutionKernelException( new InvalidSemanticsException( \"No current transaction to commit.\" ) );\n                         }\n                         else if ( ROLLBACK.matcher( statement ).matches() )\n                         {\n@@ -238,14 +231,12 @@ public class TransactionStateMachine implements StatementProcessor\n                             }\n \n                             execute( ctx, spi, statement, params, spi.isPeriodicCommit( statement ) );\n-\n-                            return AUTO_COMMIT;\n+return AUTO_COMMIT;\n                         }\n                     }\n \n-                    void execute( MutableTransactionState ctx, SPI spi, String statement, MapValue params, boolean isPeriodicCommit )\n-                            throws KernelException\n-                    {\n+                    void execute( MutableTransactionState ctx, SPI spi, String statement, MapValue params, boolean isPeriodicCommit ) throws KernelException\n+{\n                         // only acquire a new transaction when the statement does not contain periodic commit\n                         if ( !isPeriodicCommit )\n                         {\n@@ -277,9 +268,8 @@ public class TransactionStateMachine implements StatementProcessor\n                     }\n \n                     @Override\n-                    void streamResult( MutableTransactionState ctx,\n-                                       ThrowingConsumer<BoltResult, Exception> resultConsumer ) throws Exception\n-                    {\n+                    void streamResult( MutableTransactionState ctx, ThrowingConsumer<BoltResult,Exception> resultConsumer ) throws Exception\n+{\n                         assert ctx.currentResult != null;\n \n                         boolean success = false;\n@@ -292,17 +282,14 @@ public class TransactionStateMachine implements StatementProcessor\n                             closeTransaction( ctx, success );\n                         }\n                     }\n-                },\n-        EXPLICIT_TRANSACTION\n-                {\n+                }, EXPLICIT_TRANSACTION\n+{\n                     @Override\n-                    State run( MutableTransactionState ctx, SPI spi, String statement, MapValue params )\n-                            throws KernelException\n-                    {\n+                    State run( MutableTransactionState ctx, SPI spi, String statement, MapValue params ) throws KernelException\n+{\n                         if ( BEGIN.matcher( statement ).matches() )\n                         {\n-                            throw new QueryExecutionKernelException(\n-                                    new InvalidSemanticsException( \"Nested transactions are not supported.\" ) );\n+                            throw new QueryExecutionKernelException( new InvalidSemanticsException( \"Nested transactions are not supported.\" ) );\n                         }\n                         else if ( COMMIT.matcher( statement ).matches() )\n                         {\n@@ -310,8 +297,7 @@ public class TransactionStateMachine implements StatementProcessor\n                             long txId = spi.newestEncounteredTxId();\n                             Bookmark bookmark = new Bookmark( txId );\n                             ctx.currentResult = new BookmarkResult( bookmark );\n-\n-                            return AUTO_COMMIT;\n+return AUTO_COMMIT;\n                         }\n                         else if ( ROLLBACK.matcher( statement ).matches() )\n                         {\n@@ -329,12 +315,11 @@ public class TransactionStateMachine implements StatementProcessor\n                             {\n                                 ctx.lastStatement = statement;\n                             }\n-                            if ( spi.isPeriodicCommit( statement ) )\n+\n+if ( spi.isPeriodicCommit( statement ) )\n                             {\n-                                throw new QueryExecutionKernelException( new InvalidSemanticsException(\n-                                        \"Executing queries that use periodic commit in an \" +\n-                                                \"open transaction is not possible.\" ) );\n-                            }\n+                                throw new QueryExecutionKernelException( new InvalidSemanticsException( \"Executing queries that use periodic commit in an \" + \"open transaction is not possible.\" ) );\n+    }\n                             else\n                             {\n                                 BoltResultHandle resultHandle = execute( ctx, spi, statement, params );\n@@ -350,37 +335,32 @@ public class TransactionStateMachine implements StatementProcessor\n                     }\n \n                     @Override\n-                    void streamResult( MutableTransactionState ctx,\n-                            ThrowingConsumer<BoltResult,Exception> resultConsumer ) throws Exception\n-                    {\n+                    void streamResult( MutableTransactionState ctx, ThrowingConsumer<BoltResult,Exception> resultConsumer ) throws Exception\n+{\n                         assert ctx.currentResult != null;\n                         consumeResult( ctx, resultConsumer );\n                     }\n                 };\n \n-        abstract State run( MutableTransactionState ctx,\n-                            SPI spi,\n+abstract State run( MutableTransactionState ctx, SPI spi,\n                             String statement,\n                             MapValue params ) throws KernelException;\n-\n-        abstract void streamResult( MutableTransactionState ctx,\n-                                    ThrowingConsumer<BoltResult, Exception> resultConsumer ) throws Exception;\n-\n-        void terminateQueryAndRollbackTransaction( MutableTransactionState ctx ) throws TransactionFailureException\n+    abstract void streamResult( MutableTransactionState ctx, ThrowingConsumer<BoltResult,Exception> resultConsumer ) throws Exception; void terminateQueryAndRollbackTransaction( MutableTransactionState ctx ) throws TransactionFailureException\n         {\n             if ( ctx.currentResultHandle != null )\n             {\n                 ctx.currentResultHandle.terminate();\n                 ctx.currentResultHandle = null;\n             }\n-            if ( ctx.currentResult != null )\n+\n+if ( ctx.currentResult != null )\n             {\n                 ctx.currentResult.close();\n                 ctx.currentResult = null;\n             }\n \n-           closeTransaction( ctx, false);\n-        }\n+closeTransaction( ctx, false);\n+    }\n \n         /*\n          * This is overly careful about always closing and nulling the transaction since\n@@ -402,7 +382,8 @@ public class TransactionStateMachine implements StatementProcessor\n                     {\n                         tx.failure();\n                     }\n-                    if ( tx.isOpen() )\n+\n+if ( tx.isOpen() )\n                     {\n                         tx.close();\n                     }\n@@ -450,12 +431,10 @@ public class TransactionStateMachine implements StatementProcessor\n                 throw t;\n             }\n         }\n-\n     }\n \n-    private static BoltResultHandle executeQuery( MutableTransactionState ctx, SPI spi, String statement,\n-                                                  MapValue params )\n-    {\n+    private static BoltResultHandle executeQuery( MutableTransactionState ctx, SPI spi, String statement, MapValue params )\n+{\n         return spi.executeQuery( ctx.querySource, ctx.loginContext, statement, params );\n     }\n \n@@ -525,8 +504,7 @@ public class TransactionStateMachine implements StatementProcessor\n          * @return {@code true} if the query is a PERIODIC COMMIT query and not an EXPLAIN query\n          */\n         boolean isPeriodicCommit( String query );\n-\n-        BoltResultHandle executeQuery( BoltQuerySource querySource,\n+BoltResultHandle executeQuery( BoltQuerySource querySource,\n                 LoginContext loginContext, String statement, MapValue params );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 66
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}