{
    "project_name": "neo4j-neo4j",
    "error_id": "3239",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3239/NodeStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3239/NodeStore.java\nindex fddeeab0f0d..c2d51d75e81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3239/NodeStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3239/NodeStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -45,54 +46,54 @@ import static org.neo4j.kernel.impl.store.NoStoreHeaderFormat.NO_STORE_HEADER_FO\n /**\n  * Implementation of the node store.\n  */\n-public class NodeStore extends CommonAbstractStore<NodeRecord,NoStoreHeader>\n+public class NodeStore extends CommonAbstractStore<NodeRecord, NoStoreHeader>\n {\n     public static final String TYPE_DESCRIPTOR = \"NodeStore\";\n     private final DynamicArrayStore dynamicLabelStore;\n \n-    public static Long readOwnerFromDynamicLabelsRecord( DynamicRecord record )\n+    public static Long readOwnerFromDynamicLabelsRecord(DynamicRecord record)\n     {\n         byte[] data = record.getData();\n-        byte[] header = PropertyType.ARRAY.readDynamicRecordHeader( data );\n-        byte[] array = Arrays.copyOfRange( data, header.length, data.length );\n+        byte[] header = PropertyType.ARRAY.readDynamicRecordHeader(data);\n+        byte[] array = Arrays.copyOfRange(data, header.length, data.length);\n \n         int requiredBits = header[2];\n-        if ( requiredBits == 0 )\n+        if (requiredBits == 0)\n         {\n             return null;\n         }\n-        Bits bits = Bits.bitsFromBytes( array );\n-        return bits.getLong( requiredBits );\n+        Bits bits = Bits.bitsFromBytes(array);\n+        return bits.getLong(requiredBits);\n     }\n \n     public NodeStore(\n-            Path path,\n-            Path idFile,\n-            Config config,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            DynamicArrayStore dynamicLabelStore,\n-            RecordFormats recordFormats,\n-            ImmutableSet<OpenOption> openOptions )\n+      Path path,\n+      Path idFile,\n+      Config config,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      DynamicArrayStore dynamicLabelStore,\n+      RecordFormats recordFormats,\n+      ImmutableSet<OpenOption> openOptions)\n     {\n-        super( path, idFile, config, IdType.NODE, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR, recordFormats.node(),\n-                NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions );\n+        super(path, idFile, config, IdType.NODE, idGeneratorFactory, pageCache, logProvider, TYPE_DESCRIPTOR, recordFormats.node(),\n+          NO_STORE_HEADER_FORMAT, recordFormats.storeVersion(), openOptions);\n         this.dynamicLabelStore = dynamicLabelStore;\n     }\n \n     @Override\n-    public void ensureHeavy( NodeRecord node, PageCursorTracer cursorTracer )\n+    public void ensureHeavy(NodeRecord node, PageCursorTracer cursorTracer)\n     {\n-        if ( NodeLabelsField.fieldPointsToDynamicRecordOfLabels( node.getLabelField() ) )\n+        if (NodeLabelsField.fieldPointsToDynamicRecordOfLabels(node.getLabelField()))\n         {\n-            ensureHeavy( node, NodeLabelsField.firstDynamicLabelRecordId( node.getLabelField() ), cursorTracer );\n+            ensureHeavy(node, NodeLabelsField.firstDynamicLabelRecordId(node.getLabelField()), cursorTracer);\n         }\n     }\n \n-    public void ensureHeavy( NodeRecord node, long firstDynamicLabelRecord, PageCursorTracer cursorTracer )\n+    public void ensureHeavy(NodeRecord node, long firstDynamicLabelRecord, PageCursorTracer cursorTracer)\n     {\n-        if ( !node.isLight() )\n+        if (!node.isLight())\n         {\n             return;\n         }\n@@ -100,19 +101,18 @@ public class NodeStore extends CommonAbstractStore<NodeRecord,NoStoreHeader>\n         // Load any dynamic labels and populate the node record\n         try\n         {\n-            node.setLabelField( node.getLabelField(), dynamicLabelStore.getRecords( firstDynamicLabelRecord, RecordLoad.NORMAL, false, cursorTracer ) );\n-        }\n-        catch ( InvalidRecordException e )\n+            node.setLabelField(node.getLabelField(), dynamicLabelStore.getRecords(firstDynamicLabelRecord, RecordLoad.NORMAL, false, cursorTracer));\n+        } catch (InvalidRecordException e)\n         {\n-            throw Exceptions.withMessage( e, format( \"Error loading dynamic label records for %s | %s\", node, e.getMessage() ) );\n+            throw Exceptions.withMessage(e, format(\"Error loading dynamic label records for %s | %s\", node, e.getMessage()));\n         }\n     }\n \n     @Override\n-    public void updateRecord( NodeRecord record, IdUpdateListener idUpdateListener, PageCursor cursor, PageCursorTracer cursorTracer )\n+    public void updateRecord(NodeRecord record, IdUpdateListener idUpdateListener, PageCursor cursor, PageCursorTracer cursorTracer)\n     {\n-        super.updateRecord( record, idUpdateListener, cursor, cursorTracer );\n-        updateDynamicLabelRecords( record.getDynamicLabelRecords(), idUpdateListener, cursorTracer );\n+        super.updateRecord(record, idUpdateListener, cursor, cursorTracer);\n+        updateDynamicLabelRecords(record.getDynamicLabelRecords(), idUpdateListener, cursorTracer);\n     }\n \n     public DynamicArrayStore getDynamicLabelStore()\n@@ -120,11 +120,11 @@ public class NodeStore extends CommonAbstractStore<NodeRecord,NoStoreHeader>\n         return dynamicLabelStore;\n     }\n \n-    public void updateDynamicLabelRecords( Iterable<DynamicRecord> dynamicLabelRecords, IdUpdateListener idUpdateListener, PageCursorTracer cursorTracer )\n+    public void updateDynamicLabelRecords(Iterable<DynamicRecord> dynamicLabelRecords, IdUpdateListener idUpdateListener, PageCursorTracer cursorTracer)\n     {\n-        for ( DynamicRecord record : dynamicLabelRecords )\n+        for (DynamicRecord record : dynamicLabelRecords)\n         {\n-            dynamicLabelStore.updateRecord( record, idUpdateListener, cursorTracer );\n+            dynamicLabelStore.updateRecord(record, idUpdateListener, cursorTracer);\n         }\n     }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}