{
    "project_name": "CESNET-perun",
    "error_id": "306",
    "information": {
        "errors": [
            {
                "line": "2225",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\tpublic String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n\n\t\tchar[] possibleCharacters =\n\t\t\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n\t\t\t\t.toCharArray();\n\t\tint count = 12;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/306/UsersManagerBlImpl.java\nindex 6c89dec0b85..982a0e0bbef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/306/UsersManagerBlImpl.java\n@@ -2223,8 +2223,7 @@ public class UsersManagerBlImpl implements UsersManagerBl {\n \tpublic String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n \n \t\tchar[] possibleCharacters =\n-\t\t\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n-\t\t\t\t.toCharArray();\n+\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\".toCharArray();\n \t\tint count = 12;\n \n \t\t// FIXME - We will replace following logic once each login-namespace will implement\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/306/UsersManagerBlImpl.java\nindex 6c89dec0b85..93e39bdbea2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/306/UsersManagerBlImpl.java\n@@ -48,2255 +48,2363 @@ import cz.metacentrum.perun.core.implApi.modules.attributes.UserVirtualAttribute\n  */\n public class UsersManagerBlImpl implements UsersManagerBl {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(UsersManagerBlImpl.class);\n-\n-\tprivate UsersManagerImplApi usersManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\tprivate static final String A_USER_DEF_ALT_PASSWORD_NAMESPACE = AttributesManager.NS_USER_ATTR_DEF + \":altPasswords:\";\n-\n-\tprivate static final String PASSWORD_VALIDATE = \"validate\";\n-\tprivate static final String PASSWORD_CREATE = \"create\";\n-\tprivate static final String PASSWORD_RESERVE = \"reserve\";\n-\tprivate static final String PASSWORD_RESERVE_RANDOM = \"reserve_random\";\n-\tprivate static final String PASSWORD_CHANGE = \"change\";\n-\tprivate static final String PASSWORD_CHECK = \"check\";\n-\tprivate static final String PASSWORD_DELETE = \"delete\";\n-\n-\n-\t/**\n-\t * Constructor.\n-\t *\n-\t * @param usersManagerImpl connection pool\n-\t */\n-\tpublic UsersManagerBlImpl(UsersManagerImplApi usersManagerImpl) {\n-\t\tthis.usersManagerImpl = usersManagerImpl;\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserByUserExtSource(sess, userExtSource);\n-\t}\n-\n-\t// FIXME do this in IMPL\n-\t@Override\n-\tpublic User getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException {\n-\t\tfor (UserExtSource ues: userExtSources) {\n-\t\t\ttry {\n-\t\t\t\treturn getUsersManagerImpl().getUserByUserExtSource(sess, ues);\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\t// Ignore\n-\t\t\t}\n-\t\t}\n-\t\tthrow new UserNotExistsException(\"User with userExtSources \" + userExtSources + \" doesn't exists.\");\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n-\t\tif ((extSourceType == null) || (login == null)) return new ArrayList<User>();\n-\n-\t\treturn getUsersManagerImpl().getUsersByExtSourceTypeAndLogin(perunSession, extSourceType, login);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getSpecificUsersByUser(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\treturn getUsersManagerImpl().getUsersBySpecificUser(sess, specificUser);\n-\t}\n-\n-\t@Override\n-\tpublic void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n-\t\tthis.removeSpecificUserOwner(sess, user, specificUser, false);\n-\t}\n-\n-\tpublic void removeSpecificUserOwner(PerunSession sess, User user, User specificUser, boolean forceDelete) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\tif (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n-\n-\t\tList<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n-\t\tif(!specificUserOwners.remove(user)) throw new RelationNotExistsException(\"User is not the active owner of the specificUser.\");\n-\n-\t\tif(!getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n-\t\t\tthrow new RelationNotExistsException(\"User has no relationship to specificUser.\");\n-\t\t}\n-\n-\t\ttry {\n-\t\t\t// refresh authz for sponsors\n-\t\t\tif(specificUser.isSponsoredUser()) AuthzResolverBlImpl.unsetRole(sess, user, specificUser, Role.SPONSOR);\n-\t\t\t// refresh authz for service user owners\n-\t\t\tif(specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n-\t\t\t\tif(user.getId() == sess.getPerunPrincipal().getUserId()) {\n-\t\t\t\t\tAuthzResolverBlImpl.refreshAuthz(sess);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (UserNotAdminException ex) {\n-\t\t\tthrow new InternalErrorException(\"Can't remove role of sponsor for user \" + user + \" and sponsored user \" + specificUser);\n-\t\t}\n-\n-\t\tif(forceDelete) {\n-\t\t\t//getPerunBl().getAuditer().log(sess, \"{} ownership was removed for specificUser {}.\", user, specificUser);\n-\t\t\tgetPerunBl().getAuditer().log(sess, new OwnershipRemovedForSpecificUser(user, specificUser));\n-\t\t\tgetUsersManagerImpl().removeSpecificUserOwner(sess, user, specificUser);\n-\t\t} else {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new OwnershipDisabledForSpecificUser(user, specificUser));\n-\t\t\tgetUsersManagerImpl().disableOwnership(sess, user, specificUser);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\tif (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n-\t\tList<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n-\t\tif(specificUserOwners.remove(user)) throw new RelationExistsException(\"User is already the active owner of specific user.\");\n-\n-\t\tif(getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n-\t\t\tgetUsersManagerImpl().enableOwnership(sess, user, specificUser);\n-\t\t\tgetPerunBl().getAuditer().log(sess, new OwnershipEnabledForSpecificUser(user, specificUser));\n-\t\t} else {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new UserAddedToOwnersOfSpecificUser(user, specificUser));\n-\t\t\tgetUsersManagerImpl().addSpecificUserOwner(sess, user, specificUser);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\t// refresh authz for sponsors\n-\t\t\tif(specificUser.isSponsoredUser()) AuthzResolverBlImpl.setRole(sess, user, specificUser, Role.SPONSOR);\n-\t\t\t// refresh authz for service user owners\n-\t\t\tif(specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n-\t\t\t\tif(user.getId() == sess.getPerunPrincipal().getUserId()) {\n-\t\t\t\t\tAuthzResolverBlImpl.refreshAuthz(sess);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (AlreadyAdminException ex) {\n-\t\t\tthrow new InternalErrorException(\"User \" + user + \" is already sponsor of sponsored user \" + specificUser);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\treturn getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getSpecificUsers(sess);\n-\t}\n-\n-\t@Override\n-\tpublic User setSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType, User owner) throws InternalErrorException, RelationExistsException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n-\t\t\tthrow new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\t}\n-\n-\t\tif(specificUser.getMajorSpecificType().equals(specificUserType)) {\n-\t\t\tthrow new InternalErrorException(\"Can't set \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he has already set this flag.\");\n-\t\t}\n-\n-\t\t//Set specific type for user\n-\t\tspecificUser = getUsersManagerImpl().setSpecificUserType(sess, specificUser, specificUserType);\n-\n-\t\t//add owner for this new specific user\n-\t\tthis.addSpecificUserOwner(sess, owner, specificUser);\n-\n-\t\treturn specificUser;\n-\t}\n-\n-\t@Override\n-\tpublic User unsetSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType) throws InternalErrorException {\n-\t\tif(!specificUser.getMajorSpecificType().equals(specificUserType)) {\n-\t\t\tthrow new InternalErrorException(\"Can't unset \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he hasn't this flag yet.\");\n-\t\t}\n-\n-\t\t//remove all owners for this new specific user\n-\t\tList<User> owners = getPerunBl().getUsersManagerBl().getUsersBySpecificUser(sess, specificUser);\n-\t\tfor(User owner: owners) {\n-\t\t\ttry {\n-\t\t\t\tthis.removeSpecificUserOwner(sess, owner, specificUser, true);\n-\t\t\t} catch(SpecificUserMustHaveOwnerException | RelationNotExistsException | SpecificUserOwnerAlreadyRemovedException ex) {\n-\t\t\t\tthrow new InternalErrorException(\"Can't remove ownership of user \" + specificUser, ex);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Unset specific type for user\n-\t\tspecificUser = getUsersManagerImpl().unsetSpecificUserType(sess, specificUser, specificUserType);\n-\n-\n-\t\treturn specificUser;\n-\t}\n-\n-\t@Override\n-\tpublic User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserById(sess, id);\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tif (member.getUserId() != 0) {\n-\t\t\ttry {\n-\t\t\t\t// TODO If the member object will contain also User object, here can be returned directly.\n-\t\t\t\treturn getUsersManagerImpl().getUserById(sess, member.getUserId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member \" + member + \"has non-existin user.\", e);\n-\t\t\t}\n-\t\t} else {\n-\t\t\treturn getUsersManagerImpl().getUserByMember(sess, member);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException {\n-\t\tExtSource extSource = perunBl.getExtSourcesManagerBl().getExtSourceByName(sess, extSourceName);\n-\t\tUserExtSource userExtSource = this.getUserExtSourceByExtLogin(sess, extSource, extLogin);\n-\n-\t\treturn this.getUserByUserExtSource(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsers(PerunSession sess) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUsers(sess);\n-\t}\n-\n-\t@Override\n-\tpublic RichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.add(user);\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\treturn richUsers.get(0);\n-\t}\n-\n-\t@Override\n-\tpublic RichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.add(user);\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\tList<RichUser> richUsersWithAttributes =  this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n-\t\treturn richUsersWithAttributes.get(0);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException {\n-\t\tList<RichUser> richUsers = new ArrayList<RichUser>();\n-\n-\t\tfor (User user: users) {\n-\t\t\tList<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n-\t\t\tRichUser richUser = new RichUser(user, userExtSources);\n-\t\t\trichUsers.add(richUser);\n-\t\t}\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers)  throws InternalErrorException, UserNotExistsException {\n-\t\tfor (RichUser richUser: richUsers) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserById(sess, richUser.getId());\n-\t\t\tList<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, user);\n-\n-\t\t\trichUser.setUserAttributes(userAttributes);\n-\t\t}\n-\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.addAll(this.getUsers(sess));\n-\t\tif(!includedSpecificUsers) users.removeAll(this.getSpecificUsers(sess));\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.addAll(this.getUsers(sess));\n-\t\tif(!includedSpecificUsers) users.removeAll(this.getSpecificUsers(sess));\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\tList<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n-\t\treturn richUsersWithAttributes;\n-\t}\n-\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\tList<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n-\t\treturn richUsersWithAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef)  throws InternalErrorException {\n-\t\tList<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n-\n-\t\tfor(AttributeDefinition attrd: attrsDef) {\n-\t\t\tif(attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) usersAttributesDef.add(attrd);\n-\t\t\t//If not, skip this attribute, it is not user Attribute\n-\t\t}\n-\n-\t\tfor (RichUser richUser: richUsers) {\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<String> userAttrNames = new ArrayList<String>();\n-\t\t\tfor(AttributeDefinition ad: usersAttributesDef) {\n-\t\t\t\tuserAttrNames.add(ad.getName());\n-\t\t\t}\n-\t\t\tuserAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richUser, userAttrNames));\n-\n-\t\t\trichUser.setUserAttributes(userAttributes);\n-\t\t}\n-\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic User createUser(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\t// trim input\n-\t\tif(user.getFirstName() != null) user.setFirstName(user.getFirstName().trim());\n-\t\tif(user.getLastName() != null) user.setLastName(user.getLastName().trim());\n-\t\tif(user.getMiddleName() != null) user.setMiddleName(user.getMiddleName().trim());\n-\t\tif(user.getTitleBefore() != null) user.setTitleBefore(user.getTitleBefore().trim());\n-\t\tif(user.getTitleAfter() != null) user.setTitleAfter(user.getTitleAfter().trim());\n-\n-\t\t//Convert empty strings to null\n-\t\tif(user.getFirstName() != null && user.getFirstName().isEmpty()) user.setFirstName(null);\n-\t\tif(user.getLastName() != null && user.getLastName().isEmpty()) user.setLastName(null);\n-\t\tif(user.getMiddleName() != null && user.getMiddleName().isEmpty()) user.setMiddleName(null);\n-\t\tif(user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) user.setTitleBefore(null);\n-\t\tif(user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) user.setTitleAfter(null);\n-\n-\t\tuser = getUsersManagerImpl().createUser(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserCreated(user));\n-\n-\t\t// Add default userExtSource\n-\t\tExtSource es;\n-\t\ttry {\n-\t\t\tes = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, ExtSourcesManager.EXTSOURCE_NAME_PERUN);\n-\t\t} catch (ExtSourceNotExistsException e1) {\n-\t\t\tthrow new ConsistencyErrorException(\"Default extSource PERUN must exists! It is created in ExtSourcesManagerImpl.init function.\",e1);\n-\t\t}\n-\t\tUserExtSource ues = new UserExtSource(es, 0, String.valueOf(user.getId()));\n-\t\ttry {\n-\t\t\tthis.addUserExtSource(sess, user, ues);\n-\t\t} catch (UserExtSourceExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t}\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUser(PerunSession sess, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n-\t\tthis.deleteUser(sess, user, false);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUser(PerunSession sess, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\n-\t\tif (members != null && (members.size() > 0)) {\n-\t\t\tif (forceDelete) {\n-\t\t\t\tfor (Member member: members) {\n-\t\t\t\t\tgetPerunBl().getMembersManagerBl().deleteMember(sess, member);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RelationExistsException(\"Members exist\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Remove all information about user on facilities (facilities contacts)\n-\t\tList<ContactGroup> userContactGroups = getPerunBl().getFacilitiesManagerBl().getFacilityContactGroups(sess, user);\n-\t\tif(!userContactGroups.isEmpty()) {\n-\t\t\tif(forceDelete) {\n-\t\t\t\tgetPerunBl().getFacilitiesManagerBl().removeAllUserContacts(sess, user);\n-\t\t\t} else {\n-\t\t\t\tthrow new RelationExistsException(\"User has still some facilities contacts: \" + userContactGroups);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && forceDelete) {\n-\t\t\tgetPerunBl().getSecurityTeamsManagerBl().removeUserFromAllBlacklists(sess, user);\n-\t\t} else if (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && !forceDelete) {\n-\t\t\tthrow new RelationExistsException(\"User is blacklisted by some security team. Deletion would cause loss of this information.\");\n-\t\t}\n-\n-\t\t// First delete all associated external sources to the user\n-\t\tremoveAllUserExtSources(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, new AllUserExtSourcesDeletedForUser(user));\n-\n-\t\t// delete all authorships of users publications\n-\t\tgetUsersManagerImpl().removeAllAuthorships(sess, user);\n-\n-\t\t// delete all mailchange request related to user\n-\t\tgetUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n-\n-\t\t// delete all pwdreset request related to user\n-\t\tgetUsersManagerImpl().removeAllPasswordResetRequests(sess, user);\n-\n-\t\t// get all reserved logins of user\n-\t\tList<Pair<String,String>> logins = getUsersManagerImpl().getUsersReservedLogins(user);\n-\n-\t\t// delete them from KDC\n-\t\tfor (Pair<String,String> login : logins) {\n-\t\t\ttry {\n-\t\t\t\t// !! left = namespace / right = login\n-\t\t\t\tthis.deletePassword(sess, login.getRight(), login.getLeft());\n-\t\t\t} catch (LoginNotExistsException e) {\n-\t\t\t\t// OK - User hasn't assigned any password with this login\n-\t\t\t} catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tlog.error(\"Error during deletion of an account at {} for user {} with login {}.\", new Object[]{login.getLeft(), user, login.getRight()});\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RelationExistsException(\"Error during deletion of an account at \" + login.getLeft() +\n-\t\t\t\t\t\t\t\" for user \" + user + \" with login \" + login.getRight() + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// delete them from DB\n-\t\tgetUsersManagerImpl().deleteUsersReservedLogins(user);\n-\n-\t\t// all users applications and submitted data are deleted on cascade when \"deleteUser()\"\n-\n-\t\t// Remove all possible passwords associated with logins (stored in attributes)\n-\t\tfor (Attribute loginAttribute: getPerunBl().getAttributesManagerBl().getLogins(sess, user)) {\n-\t\t\ttry {\n-\t\t\t\tthis.deletePassword(sess, (String) loginAttribute.getValue(), loginAttribute.getFriendlyNameParameter());\n-\t\t\t} catch (LoginNotExistsException e) {\n-\t\t\t\t// OK - User hasn't assigned any password with this login\n-\t\t\t} catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tlog.error(\"Error during deletion of the account at {} for user {} with login {}.\", new Object[]{loginAttribute.getFriendlyNameParameter(), user, (String) loginAttribute.getValue()});\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RelationExistsException(\"Error during deletion of the account at \" + loginAttribute.getFriendlyNameParameter() +\n-\t\t\t\t\t\t\t\" for user \" + user + \" with login \" + (String) loginAttribute.getValue() + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\n-\t\t// Delete assigned attributes\n-\t\t// Users one\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, user);\n-\t\t\t// User-Facilities one\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllUserFacilityAttributes(sess, user);\n-\t\t} catch(WrongAttributeValueException ex) {\n-\t\t\t//All members are deleted => there are no required attribute => all atributes can be removed\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t} catch(WrongReferenceAttributeValueException ex) {\n-\t\t\t//All members are deleted => there are no required attribute => all atributes can be removed\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\t//Remove user authz\n-\t\tAuthzResolverBlImpl.removeAllUserAuthz(sess, user);\n-\t\t//delete even inactive links\n-\t\tusersManagerImpl.deleteSponsorLinks(sess, user);\n-\n-\t\t//Remove all users bans\n-\t\tList<BanOnFacility> bansOnFacility = getPerunBl().getFacilitiesManagerBl().getBansForUser(sess, user.getId());\n-\t\tfor(BanOnFacility banOnFacility : bansOnFacility) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getFacilitiesManagerBl().removeBan(sess, banOnFacility.getId());\n-\t\t\t} catch (BanNotExistsException ex) {\n-\t\t\t\t//it is ok, we just want to remove it anyway\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Remove all sponsored user authz of his owners\n-\t\tif(user.isSponsoredUser()) AuthzResolverBlImpl.removeAllSponsoredUserAuthz(sess, user);\n-\t\t// Finally delete the user\n-\t\tgetUsersManagerImpl().deleteUser(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserDeleted(user));\n-\t}\n-\n-\t@Override\n-\tpublic User updateUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\t//Convert user to version with no empty strings in object attributes (null instead)\n-\t\tuser = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n-\n-\t\tUser beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n-\t\tUser afterUpdatingUser = getUsersManagerImpl().updateUser(sess, user);\n-\n-\t\t//Log only when something is changed\n-\t\tif(!beforeUpdatingUser.equals(afterUpdatingUser))\n-\t\t\tgetPerunBl().getAuditer().log(sess, new UserUpdated(user));\n-\t\treturn afterUpdatingUser;\n-\t}\n-\n-\t@Override\n-\tpublic User updateNameTitles(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\t//Convert user to version with no empty strings in object attributes (null instead)\n-\t\tuser = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n-\n-\t\tUser beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n-\t\tUser afterUpdatingUser = getUsersManagerImpl().updateNameTitles(sess, user);\n-\n-\t\t//Log only when something is changed\n-\t\t// must audit like update user since it changes same object\n-\t\tif(!beforeUpdatingUser.equals(afterUpdatingUser))\n-\t\t\tgetPerunBl().getAuditer().log(sess, new UserUpdated(user));\n-\t\treturn afterUpdatingUser;\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n-\t\tgetPerunBl().getAuditer().log(sess, new UserExtSourceUpdated(userExtSource));\n-\t\treturn getUsersManagerImpl().updateUserExtSource(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\tgetUsersManagerImpl().updateUserExtSourceLastAccess(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUserExtSources(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserExtSourceById(sess, id);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getAllUserExtSourcesByTypeAndLogin(sess, extType, extLogin);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getActiveUserExtSources(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n-\t\t// Check if the userExtSource already exists\n-\t\tif(usersManagerImpl.userExtSourceExists(sess,userExtSource)) {\n-\t\t\tthrow new UserExtSourceExistsException(\"UserExtSource \" + userExtSource + \" already exists.\");\n-\t\t}\n-\n-\t\t// Check if userExtsource is type of IDP (special testing behavior)\n-\t\tif (userExtSource.getExtSource().getType().equals(ExtSourcesManager.EXTSOURCE_IDP)) {\n-\t\t\t// If extSource of this userExtSource is type of IDP, test uniqueness of login in this extSource type for all users\n-\t\t\tString login = userExtSource.getLogin();\n-\t\t\tList<UserExtSource> userExtSources = getAllUserExtSourcesByTypeAndLogin(sess, ExtSourcesManager.EXTSOURCE_IDP, login);\n-\t\t\tif(userExtSources.size() == 1) throw new InternalErrorException(\"ExtLogin: \" + login + \" is already in used for extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n-\t\t\telse if(userExtSources.size() > 1) throw new ConsistencyErrorException(\"There are \" + userExtSources.size() + \"   extLogins: \" + login + \" for  extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n-\t\t}\n-\n-\t\tuserExtSource = getUsersManagerImpl().addUserExtSource(sess, user, userExtSource);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserExtSourceAddedToUser(userExtSource, user));\n-\t\treturn userExtSource;\n-\t}\n-\n-\t@Override\n-\tpublic void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n-\t\t//FIXME zkontrolovat zda na userExtSource neni navazan nejaky member\n-\t\t//First remove all user extSource attributes before removing userExtSource\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, userExtSource);\n-\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(\"Can't remove userExtSource because there is problem with removing all it's attributes.\", ex);\n-\t\t}\n-\t\tgetUsersManagerImpl().removeUserExtSource(sess, user, userExtSource);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserExtSourceRemovedFromUser(userExtSource, user));\n-\t}\n-\n-\t@Override\n-\tpublic void moveUserExtSource(PerunSession sess, User sourceUser, User targetUser, UserExtSource userExtSource) throws InternalErrorException {\n-\t\tList<Attribute> userExtSourceAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, userExtSource);\n-\t\tIterator<Attribute> iterator = userExtSourceAttributes.iterator();\n-\t\t//remove all virtual attributes (we don't need to take care about them)\n-\t\twhile(iterator.hasNext()) {\n-\t\t\tAttribute attribute = iterator.next();\n-\t\t\tif(getPerunBl().getAttributesManagerBl().isVirtAttribute(sess, attribute)) iterator.remove();\n-\t\t}\n-\n-\t\t//remove userExtSource\n-\t\ttry {\n-\t\t\tthis.removeUserExtSource(sess, sourceUser, userExtSource);\n-\t\t} catch (UserExtSourceAlreadyRemovedException ex) {\n-\t\t\t//this is little weird, will be better to report exception\n-\t\t\tthrow new InternalErrorException(\"UserExtSource was unexpectedly removed while moving \" + userExtSource +\n-\t\t\t\t\t\" from \" + sourceUser + \" to \" + targetUser);\n-\t\t}\n-\n-\t\t//change userId for userExtSource\n-\t\tuserExtSource.setUserId(targetUser.getId());\n-\t\t//add userExtSource to the targetUser\n-\t\ttry {\n-\t\t\tuserExtSource = this.addUserExtSource(sess, targetUser, userExtSource);\n-\t\t} catch (UserExtSourceExistsException ex) {\n-\t\t\t//someone moved this UserExtSource before us\n-\t\t\tthrow new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser +\n-\t\t\t\t\t\" failed because someone already moved this UserExtSource.\", ex);\n-\t\t}\n-\n-\t\t//set all attributes back to this UserExtSource when it is already assigned to the targetUser\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttributes(sess, userExtSource, userExtSourceAttributes);\n-\t\t} catch (WrongAttributeAssignmentException | WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser +\n-\t\t\t\t\t\" failed because of problem with setting removed attributes back to the UserExtSource.\", ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserExtSourceByExtLogin(sess, source, extLogin);\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getVosWhereUserIsAdmin(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, vo, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getVosWhereUserIsMember(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getUsersWithoutVoAssigned(sess);\n-\t\treturn this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException  {\n-\t\treturn usersManagerImpl.getUsersWithoutVoAssigned(sess);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\t\tList<User> allSearchingUsers = new ArrayList<User>();\n-\t\tList<User> allVoUsers = new ArrayList<User>();\n-\t\tallSearchingUsers = this.findUsers(sess, searchString);\n-\t\tallVoUsers = getUsersManagerImpl().getUsersByVo(sess, vo);\n-\t\tallSearchingUsers.removeAll(allVoUsers);\n-\t\treturn allSearchingUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getPerunBl().getResourcesManagerBl().getAllowedResources(sess, facility, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Resource> allowedResources = new ArrayList<Resource>();\n-\n-\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tfor(Resource resource : resources) {\n-\t\t\tif (getPerunBl().getResourcesManagerBl().isUserAssigned(sess, user, resource)) {\n-\t\t\t\tallowedResources.add(resource);\n-\t\t\t}\n-\t\t}\n-\t\treturn allowedResources;\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//TODO do this method in more efficient way\n-\t\tSet<Resource> resources = new HashSet<Resource>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor(Member member : members) {\n-\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member));\n-\t\t\t}\n-\t\t}\n-\t\treturn new ArrayList<Resource>(resources);\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException {\n-\t\tSet<Resource> resources = new HashSet<Resource>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\n-\t\tfor(Member member : members) {\n-\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member));\n-\t\t}\n-\t\treturn new ArrayList<Resource>(resources);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException {\n-\t\tSet<RichResource> resources = new HashSet<RichResource>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\n-\t\tfor(Member member : members) {\n-\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getAssignedRichResources(sess, member));\n-\t\t}\n-\t\treturn new ArrayList<RichResource>(resources);\n-\t}\n-\n-\tprivate List<User> getUsersByVirtualAttribute(PerunSession sess, AttributeDefinition attributeDef, String attributeValue) throws InternalErrorException {\n-\t\t// try to find method in attribute module\n-\t\tUserVirtualAttributesModuleImplApi attributeModule = perunBl.getAttributesManagerBl().getUserVirtualAttributeModule(sess, attributeDef);\n-\t\tList<User> listOfUsers = attributeModule.searchInAttributesValues((PerunSessionImpl) sess, attributeValue);\n-\n-\t\tif (listOfUsers != null) {\n-\t\t\treturn listOfUsers;\n-\t\t}\n-\n-\t\t// iterate over all users\n-\t\tList<User> matchedUsers = new ArrayList<User>();\n-\t\tfor (User user: perunBl.getUsersManagerBl().getUsers(sess)) {\n-\t\t\tAttribute userAttribute;\n-\t\t\ttry {\n-\t\t\t\tuserAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, user, attributeDef.getName());\n-\t\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t\tif (userAttribute.valueContains((String) attributeValue)) {\n-\t\t\t\tmatchedUsers.add(user);\n-\t\t\t}\n-\t\t}\n-\t\treturn matchedUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tAttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\n-\t\t\tif (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n-\t\t\t\treturn this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n-\t\t\t} else {\n-\t\t\t\treturn this.getUsersManagerImpl().getUsersByAttributeValue(sess, attributeDef, attributeValue);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute name:'\"  + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n-\t}\n-\n-\t/**\n-\t * Search attributes directly in the DB only if the attr is def or opt and value is type of String, otherwise load all users and search in a loop.\n-\t */\n-\t@Override\n-\tpublic List<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tAttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\n-\t\t\tif (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n-\t\t\t\treturn this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n-\t\t\t} else {\n-\t\t\t\tAttribute attribute = new Attribute(attributeDef);\n-\t\t\t\tattribute.setValue(attributeValue);\n-\n-\t\t\t\treturn this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute name:'\"  + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsers(sess, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getUsersManagerImpl().findUsers(sess, searchString);\n-\t\treturn this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n-\t\treturn this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsersByName(sess, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n-\t\t// Convert to lower case\n-\t\ttitleBefore = titleBefore.toLowerCase();\n-\t\tfirstName = firstName.toLowerCase();\n-\t\tmiddleName = middleName.toLowerCase();\n-\t\tlastName = lastName.toLowerCase();\n-\t\ttitleAfter = titleAfter.toLowerCase();\n-\n-\t\treturn this.getUsersManagerImpl().findUsersByName(sess, titleBefore, firstName, middleName, lastName, titleAfter);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsersByExactName(sess, searchString);\n-\t}\n-\n-\tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUsersByIds(sess, usersIds);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException {\n-\t\tif (loginNamespace == null || login == null) {\n-\t\t\tthrow new InternalErrorException(new NullPointerException(\"loginNamespace cannot be null, nor login\"));\n-\t\t}\n-\n-\t\t// Create Attribute\n-\t\ttry {\n-\t\t\tAttributeDefinition attributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\t\t\tAttribute attribute = new Attribute(attributeDefinition);\n-\n-\t\t\tattribute.setValue(login);\n-\n-\t\t\t// Create empty user\n-\t\t\tUser user = new User();\n-\n-\t\t\t// Check attribute value, if the login is already occupied, then WrongAttributeValueException exception is thrown\n-\t\t\tgetPerunBl().getAttributesManagerBl().checkAttributeValue(sess, user, attribute);\n-\n-\t\t\treturn true;\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeValueException e) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\t//TODO Check also reserved logins in Registrar\n-\t}\n-\t/**\n-\t * Gets the usersManagerImpl for this instance.\n-\t *\n-\t * @return The usersManagerImpl.\n-\t */\n-\tpublic UsersManagerImplApi getUsersManagerImpl() {\n-\t\treturn this.usersManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl for this instance.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl()\n-\t{\n-\t\treturn this.perunBl;\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tgetUsersManagerImpl().checkUserExists(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n-\t\tgetUsersManagerImpl().checkReservedLogins(sess, namespace, login);\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\tgetUsersManagerImpl().checkUserExtSourceExists(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\tgetUsersManagerImpl().checkUserExtSourceExistsById(sess, id);\n-\t}\n-\n-\t@Override\n-\tpublic boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().userExtSourceExists(sess, userExtSource);\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().isUserPerunAdmin(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic RichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException {\n-\t\tif(richUser == null) throw new InternalErrorException(\"RichUser can't be null.\");\n-\t\t//Filtering users attributes\n-\t\tif(richUser.getUserAttributes() != null) {\n-\t\t\tList<Attribute> userAttributes = richUser.getUserAttributes();\n-\t\t\tList<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute userAttr: userAttributes) {\n-\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richUser)) {\n-\t\t\t\t\tuserAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richUser));\n-\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\trichUser.setUserAttributes(allowedUserAttributes);\n-\t\t}\n-\t\treturn richUser;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException {\n-\t\tList<RichUser> filteredRichUsers = new ArrayList<RichUser>();\n-\t\tif(richUsers == null || richUsers.isEmpty()) return filteredRichUsers;\n-\n-\t\tfor(RichUser ru: richUsers) {\n-\t\t\tfilteredRichUsers.add(this.filterOnlyAllowedAttributes(sess, ru));\n-\t\t}\n-\n-\t\treturn filteredRichUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException {\n-\t\tList<User> users = new ArrayList<User>();\n-\n-\t\t//All possible useful objects\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\n-\t\t//Get object for primaryHolder of aidingAttr\n-\t\tif(perunBean != null) {\n-\t\t\tif(perunBean instanceof Vo) vo = (Vo) perunBean;\n-\t\t\telse if(perunBean instanceof Facility) facility = (Facility) perunBean;\n-\t\t\telse if(perunBean instanceof Group) group = (Group) perunBean;\n-\t\t\telse if(perunBean instanceof Member) member = (Member) perunBean;\n-\t\t\telse if(perunBean instanceof User) user = (User) perunBean;\n-\t\t\telse if(perunBean instanceof Host) host = (Host) perunBean;\n-\t\t\telse if(perunBean instanceof Resource) resource = (Resource) perunBean;\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n-\t\t}\n-\n-\t\tif(group != null) {\n-\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\tfor(Member memberElement: members) {\n-\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t} else if(member != null) {\n-\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tusers.add(user);\n-\t\t} else if(resource != null) {\n-\t\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\t\tusers.addAll(usersFromResource);\n-\t\t} else if(user != null) {\n-\t\t\tusers.add(user);\n-\t\t} else if(host != null) {\n-\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\tList<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\tfor(User userElement: usersFromHost) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t} else if(facility != null) {\n-\t\t\tList<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\tfor(User userElement: usersFromFacility) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t} else if(vo != null) {\n-\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\tList<User> usersFromVo = new ArrayList<User>();\n-\t\t\tfor(Member memberElement: members) {\n-\t\t\t\tusersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t\tfor(User userElement: usersFromVo) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn users;\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password reservation.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\n-\t\tlog.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_RESERVE_RANDOM, (String) attr.getValue(), loginNamespace, null);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password reservation.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\tpublic void reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\t\tlog.info(\"Reserving password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Reserve the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_RESERVE, (String) userLogin, loginNamespace, password);\n-\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password reservation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\tpublic void reservePassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\t\tlog.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_RESERVE, (String) attr.getValue(), loginNamespace, password);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password validation.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void validatePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException {\n-\t\tlog.info(\"Validating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Validate the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_VALIDATE, (String) userLogin, loginNamespace, null);\n-\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password validation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void validatePassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, LoginNotExistsException {\n-\t\tlog.info(\"Validating password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_VALIDATE, (String) attr.getValue(), loginNamespace, null);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password validation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t/*\n-\t\t * FIXME This method is very badly writen - it should be rewrited or refactored\n-\t\t */\n-\n-\t\ttry {\n-\t\t\tif (loginNamespace.equals(\"einfra\")) {\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\t// Set META and EINFRA userExtSources\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"META\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@META\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA\");\n-\t\t\t\tues = new UserExtSource(extSource, userLogin + \"@EINFRA\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://login.ics.muni.cz/idp/shibboleth\");\n-\t\t\t\tues = new UserExtSource(extSource, userLogin + \"@meta.cesnet.cz\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tboolean someChange = false;\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@EINFRA\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@EINFRA\");\n-\t\t\t\t\tsomeChange = true;\n-\t\t\t\t}\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@META\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@META\");\n-\t\t\t\t\tsomeChange = true;\n-\t\t\t\t}\n-\n-\t\t\t\tif (someChange) {\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"egi-ui\")) {\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EGI\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@EGI\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@EGI\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@EGI\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"sitola\")) {\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"SITOLA.FI.MUNI.CZ\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@SITOLA.FI.MUNI.CZ\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@SITOLA.FI.MUNI.CZ\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@SITOLA.FI.MUNI.CZ\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"ics-muni-cz\")) {\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ICS.MUNI.CZ\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@ICS.MUNI.CZ\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@ICS.MUNI.CZ\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@ICS.MUNI.CZ\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"mu\")) {\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://idp2.ics.muni.cz/idp/shibboleth\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@muni.cz\");\n-\t\t\t\tues.setLoa(2);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"vsup\")) {\n-\n-\t\t\t\t// Add UES in their ActiveDirectory to access Perun by it\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"AD\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin);\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\t\t\t} else if (loginNamespace.equals(\"elixir\")) {\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ELIXIR-EUROPE.ORG\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@ELIXIR-EUROPE.ORG\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@ELIXIR-EUROPE.ORG\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@ELIXIR-EUROPE.ORG\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"einfra-services\")) {\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA-SERVICES\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@EINFRA-SERVICES\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@EINFRA-SERVICES\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@EINFRA-SERVICES\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"dummy\")) {\n-\t\t\t\t//dummy namespace for testing, it has accompanying DummyPasswordModule that just generates random numbers\n-\t\t\t\tExtSource extSource;\n-\t\t\t\ttry {\n-\t\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://dummy\");\n-\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\textSource =  new ExtSource(\"https://dummy\",ExtSourcesManager.EXTSOURCE_IDP);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().createExtSource(sess, extSource, null);\n-\t\t\t\t\t} catch (ExtSourceExistsException e1) {\n-\t\t\t\t\t\tlog.warn(\"impossible or race condition\",e1);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@dummy\");\n-\t\t\t\tues.setLoa(2);\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tvalidatePassword(sess, user, loginNamespace);\n-\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password creation.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\t@Deprecated\n-\tpublic void createPassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException {\n-\t\tlog.info(\"Creating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Create the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_CREATE, (String) userLogin, loginNamespace, password);\n-\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password creation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\t@Deprecated\n-\tpublic void createPassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, LoginNotExistsException {\n-\t\tlog.info(\"Creating password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_CREATE, (String) attr.getValue(), loginNamespace, password);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password deletion.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void deletePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException, LoginNotExistsException,\n-\t\t\tPasswordDeletionFailedException, PasswordOperationTimeoutException {\n-\t\tlog.info(\"Deleting password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Delete the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_DELETE, (String) userLogin, loginNamespace, null);\n-\t\t} catch (PasswordDeletionFailedRuntimeException e) {\n-\t\t\tthrow new PasswordDeletionFailedException(e);\n-\t\t} catch (LoginNotExistsRuntimeException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t}  catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password change.\n-\t */\n-\t@Override\n-\tpublic void changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword)\n-\t\t\tthrows InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\t\tlog.info(\"Changing password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get User login in loginNamespace\n-\t\tAttribute userLogin;\n-\t\ttry {\n-\t\t\tuserLogin = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t// Check password if it was requested\n-\t\tif (checkOldPassword) {\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_CHECK, (String) userLogin.getValue(), loginNamespace, oldPassword);\n-\t\t\t} catch (PasswordDoesntMatchRuntimeException e) {\n-\t\t\t\tthrow new PasswordDoesntMatchException(e);\n-\t\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Change the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_CHANGE, (String) userLogin.getValue(), loginNamespace, newPassword);\n-\t\t} catch (PasswordChangeFailedRuntimeException e) {\n-\t\t\tthrow new PasswordChangeFailedException(e);\n-\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t}\n-\n-\t\t//validate and set user ext sources\n-\t\ttry {\n-\t\t\tthis.validatePasswordAndSetExtSources(sess, user, (String) userLogin.getValue(), loginNamespace);\n-\t\t} catch(PasswordCreationFailedException ex) {\n-\t\t\tthrow new PasswordChangeFailedException(ex);\n-\t\t} catch(ExtSourceNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch(AttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Calls external program which do the job with the password.\n-\t *\n-\t * Return codes of the external program\n-\t * If password check fails then return 1\n-\t * If there is no handler for loginNamespace return 2\n-\t * If setting of the new password failed return 3\n-\t *\n-\t * @param sess\n-\t * @param operation\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t */\n-\tprotected void managePassword(PerunSession sess, String operation, String userLogin, String loginNamespace, String password) throws InternalErrorException {\n-\n-\t\t// If new PWDMGR module exists, use-it\n-\t\tPasswordManagerModule module = null;\n-\n-\t\ttry {\n-\t\t\tmodule = getPasswordManagerModule(sess, loginNamespace);\n-\t\t} catch (Exception ex) {\n-\t\t\t// silently skip\n-\t\t}\n-\n-\t\tif (module != null) {\n-\n-\t\t\tif (operation.equals(PASSWORD_RESERVE)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.reservePassword(sess, userLogin, password);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_RESERVE_RANDOM)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.reserveRandomPassword(sess, userLogin);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_CHECK)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.checkPassword(sess, userLogin, password);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_VALIDATE)) {\n-\t\t\t\tmodule.validatePassword(sess, userLogin);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_CHANGE)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.changePassword(sess, userLogin, password);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_DELETE)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.deletePassword(sess, userLogin);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t// use good old way\n-\n-\t\t// Check validity of original password\n-\t\tProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getPasswordManagerProgram(),\n-\t\t\t\toperation, loginNamespace, userLogin);\n-\n-\t\tProcess process;\n-\t\ttry {\n-\t\t\tprocess = pb.start();\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tInputStream es = process.getErrorStream();\n-\n-\t\tif (operation.equals(PASSWORD_CHANGE) || operation.equals(PASSWORD_CHECK)  || operation.equals(PASSWORD_RESERVE)) {\n-\t\t\tOutputStream os = process.getOutputStream();\n-\t\t\tif (password == null || password.isEmpty()) {\n-\t\t\t\tthrow new EmptyPasswordRuntimeException(\"Password for \" + loginNamespace + \":\" + userLogin + \" cannot be empty.\");\n-\t\t\t}\n-\t\t\t// Write password to the stdin of the program\n-\t\t\tPrintWriter pw = new PrintWriter(os, true);\n-\t\t\tpw.write(password);\n-\t\t\tpw.close();\n-\t\t}\n-\n-\t\t// If non-zero exit code is returned, then try to read error output\n-\t\ttry {\n-\t\t\tif (process.waitFor() != 0) {\n-\t\t\t\tif (process.exitValue() == 1) {\n-\t\t\t\t\tthrow new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 3) {\n-\t\t\t\t\tthrow new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 4) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 5) {\n-\t\t\t\t\tthrow new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 6) {\n-\t\t\t\t\tthrow new LoginNotExistsRuntimeException(\"User login doesn't exists in underlying system for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 11) {\n-\t\t\t\t\tthrow new PasswordStrengthFailedRuntimeException(\"Password to set doesn't match expected restrictions for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 12) {\n-\t\t\t\t\tthrow new PasswordOperationTimeoutRuntimeException(\"Operation with password exceeded expected limit for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\t// Some other error occured\n-\t\t\t\t\tBufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n-\t\t\t\t\tStringBuffer errorMsg = new StringBuffer();\n-\t\t\t\t\tString line;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\twhile ((line = inReader.readLine()) != null) {\n-\t\t\t\t\t\t\terrorMsg.append(line);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tthrow new InternalErrorException(errorMsg.toString());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void createAlternativePassword(PerunSession sess, User user, String description, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException {\n-\t\ttry {\n-\t\t\tmanageAlternativePassword(sess, user, PASSWORD_CREATE, loginNamespace, null, description, password);\n-\t\t} catch(PasswordCreationFailedRuntimeException ex) {\n-\t\t\tthrow new PasswordCreationFailedException(ex);\n-\t\t} catch(LoginNotExistsRuntimeException ex) {\n-\t\t\tthrow new LoginNotExistsException(ex);\n-\t\t} catch(PasswordDeletionFailedException ex) {\n-\t\t\t//This probably never happend, if yes, its some error in code of manageAlternativePassword method\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException {\n-\t\ttry {\n-\t\t\tmanageAlternativePassword(sess, user, PASSWORD_DELETE, loginNamespace, passwordId, null, null);\n-\t\t} catch(PasswordDeletionFailedRuntimeException ex) {\n-\t\t\tthrow new PasswordDeletionFailedException(ex);\n-\t\t} catch(LoginNotExistsRuntimeException ex) {\n-\t\t\tthrow new LoginNotExistsException(ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Calls external program which do the job with the alternative passwords.\n-\t *\n-\t * Return codes of the external program\n-\t * If password check fails then return 1\n-\t * If there is no handler for loginNamespace return 2\n-\t * If setting of the new password failed return 3\n-\t *\n-\t * @param sess\n-\t * @param operation\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t */\n-\tprotected void manageAlternativePassword(PerunSession sess, User user, String operation, String loginNamespace, String passwordId, String description, String password) throws InternalErrorException, PasswordDeletionFailedException {\n-\t\t//if password id == null\n-\t\tif(passwordId == null) passwordId = Long.toString(System.currentTimeMillis());\n-\n-\t\t//Prepare process builder\n-\t\tProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getAlternativePasswordManagerProgram(), operation, loginNamespace, Integer.toString(user.getId()), passwordId);\n-\n-\t\t//Set password in Perun to attribute\n-\t\tif (operation.equals(PASSWORD_CREATE)) {\n-\t\t\ttry {\n-\t\t\t\tAttribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n-\t\t\t\tMap<String,String> altPassValue = new LinkedHashMap<>();\n-\t\t\t\t//Set not null value from altPassword attribute of this user\n-\t\t\t\tif (userAlternativePassword.getValue() != null) altPassValue = (LinkedHashMap<String,String>) userAlternativePassword.getValue();\n-\t\t\t\t//If password already exists, throw an exception\n-\t\t\t\tif (altPassValue.containsKey(description)) throw new ConsistencyErrorException(\"Password with this description already exists. Description: \" + description);\n-\t\t\t\t//set new value to attribute\n-\t\t\t\taltPassValue.put(description, passwordId);\n-\t\t\t\tuserAlternativePassword.setValue(altPassValue);\n-\t\t\t\t//set new attribute with value to perun\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n-\t\t\t} catch (WrongAttributeAssignmentException | WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t} else if (operation.equals(PASSWORD_DELETE)) {\n-\t\t\ttry {\n-\t\t\t\tAttribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n-\t\t\t\tMap<String,String> altPassValue = new LinkedHashMap<>();\n-\t\t\t\t//Set not null value from altPassword attribute of this user\n-\t\t\t\tif (userAlternativePassword.getValue() != null) altPassValue = (LinkedHashMap<String,String>) userAlternativePassword.getValue();\n-\t\t\t\t//If password already exists, throw an exception\n-\t\t\t\tif (!altPassValue.containsValue(passwordId)) throw new PasswordDeletionFailedException(\"Password not found by ID.\");\n-\t\t\t\t//remove key with this value from map\n-\t\t\t\tSet<String> keys = altPassValue.keySet();\n-\t\t\t\tdescription = null;\n-\t\t\t\tfor(String key: keys) {\n-\t\t\t\t\tString valueOfKey = altPassValue.get(key);\n-\t\t\t\t\tif(valueOfKey.equals(passwordId)) {\n-\t\t\t\t\t\tif(description != null) throw new ConsistencyErrorException(\"There is more than 1 password with same ID in value for user \" + user);\n-\t\t\t\t\t\tdescription = key;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif(description == null) throw new InternalErrorException(\"Password not found by ID.\");\n-\t\t\t\taltPassValue.remove(description);\n-\t\t\t\t//set new value for altPassword attribute for this user\n-\t\t\t\tuserAlternativePassword.setValue(altPassValue);\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Not supported operation \" + operation);\n-\t\t}\n-\n-\t\tProcess process;\n-\t\ttry {\n-\t\t\tprocess = pb.start();\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tInputStream es = process.getErrorStream();\n-\n-\t\t//Set pasword in remote system\n-\t\tif (operation.equals(PASSWORD_CREATE)) {\n-\t\t\tOutputStream os = process.getOutputStream();\n-\t\t\tif (password == null || password.isEmpty()) {\n-\t\t\t\tthrow new EmptyPasswordRuntimeException(\"Alternative password for \" + loginNamespace + \" cannot be empty.\");\n-\t\t\t}\n-\t\t\t// Write password to the stdin of the program\n-\t\t\tPrintWriter pw = new PrintWriter(os, true);\n-\t\t\tpw.write(password);\n-\t\t\tpw.close();\n-\t\t}\n-\n-\t\t// If non-zero exit code is returned, then try to read error output\n-\t\ttry {\n-\t\t\tif (process.waitFor() != 0) {\n-\t\t\t\tif (process.exitValue() == 1) {\n-\t\t\t\t\t//throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t\tthrow new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n-\t\t\t\t} else if (process.exitValue() == 3) {\n-\t\t\t\t\t//throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t\tthrow new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n-\t\t\t\t} else if (process.exitValue() == 4) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Alternative password creation failed for \" + user + \". Namespace: \" + loginNamespace + \", description: \" + description + \".\");\n-\t\t\t\t} else if (process.exitValue() == 5) {\n-\t\t\t\t\tthrow new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + user + \". Namespace: \" + loginNamespace + \", passwordId: \" + passwordId + \".\");\n-\t\t\t\t} else if (process.exitValue() == 6) {\n-\t\t\t\t\tthrow new LoginNotExistsRuntimeException(\"User doesn't exists in underlying system for namespace \" + loginNamespace + \", user: \" + user + \".\");\n-\t\t\t\t} else if (process.exitValue() == 7) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Problem with creating user entry in underlying system \" + loginNamespace + \", user: \" + user + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\t// Some other error occured\n-\t\t\t\t\tBufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n-\t\t\t\t\tStringBuffer errorMsg = new StringBuffer();\n-\t\t\t\t\tString line;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\twhile ((line = inReader.readLine()) != null) {\n-\t\t\t\t\t\t\terrorMsg.append(line);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tthrow new InternalErrorException(errorMsg.toString());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\n-\t@Override\n-\tpublic List<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException {\n-\n-\t\t// TODO - optimzization needed - at least there should be single select on RichUser object in impl !!\n-\t\tList<RichUser> result = new ArrayList<RichUser>();\n-\t\tAttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n-\t\tfor (User u : users) {\n-\t\t\tRichUser ru = new RichUser(u, getUserExtSources(sess, u));\n-\t\t\tru.setUserAttributes(attributesManagerBl.getAttributes(sess, u, attrNames));\n-\t\t\tresult.add(ru);\n-\t\t}\n-\t\treturn result;\n-\n-\t}\n-\n-\t@Override\n-\tpublic RichUser convertUserToRichUserWithAttributesByNames(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n-\t\tAttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n-\n-\t\tRichUser richUser = new RichUser(user, getUserExtSources(sess, user));\n-\t\trichUser.setUserAttributes(attributesManagerBl.getAttributes(sess, user, attrNames));\n-\n-\t\treturn richUser;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, findRichUsers(sess, searchString));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, findUsers(sess, searchString), attrsName);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, findRichUsersByExactMatch(sess, searchString));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, findUsersByExactMatch(sess, searchString), attrsName);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException{\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutSpecificVo(sess, vo, searchString)));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutSpecificVo(sess, vo, searchString), attrsName);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException{\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutVoAssigned(sess)));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutVoAssigned(sess), attrsName);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tList<User> users = getUsers(sess);\n-\t\t// optionally exclude specific users\n-\t\tif (!includedSpecificUsers) {\n-\t\t\tIterator<User> it = users.iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tUser u = it.next();\n-\t\t\t\tif (u.isSpecificUser()) {\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, users));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, users, attrsName);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException {\n-\n-\t\t// should always pass, since isLoginAvailable() in ENTRY does the same\n-\t\ttry {\n-\n-\t\t\tList<String> names = new ArrayList<String>();\n-\t\t\tnames.add(AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\n-\t\t\t// will always get attribute (empty, if not set)\n-\t\t\tList<Attribute> checked = getPerunBl().getAttributesManagerBl().getAttributes(sess, user, names);\n-\t\t\tif (checked.size() != 1) {\n-\t\t\t\tthrow new InternalErrorException(\"User should have only one login (attribute) in namespace\");\n-\t\t\t}\n-\t\t\t// if user already has login\n-\t\t\tif (checked.get(0).getValue() != null) {\n-\t\t\t\tthrow new InternalErrorException(\"Can't set new login. User already has login in namespace: \"+loginNamespace);\n-\t\t\t}\n-\n-\t\t\tchecked.get(0).setValue(login);\n-\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttributes(sess, user, checked);\n-\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tint changeId = getUsersManagerImpl().requestPreferredEmailChange(sess, user, email);\n-\t\tUtils.sendValidationEmail(user, url, email, changeId);\n-\n-\t}\n-\n-\t@Override\n-\tpublic String validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, AttributeNotExistsException {\n-\n-\t\tString email = getUsersManagerImpl().getPreferredEmailChangeRequest(sess, user, i, m);\n-\n-\t\tAttributeDefinition def = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\tAttribute a = new Attribute(def);\n-\t\ta.setValue(email);\n-\n-\t\t// store attribute\n-\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, a);\n-\n-\t\tgetUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n-\n-\t\treturn email;\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\n-\t\tList<String> list = getUsersManagerImpl().getPendingPreferredEmailChanges(sess, user);\n-\n-\t\tAttribute a = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\tif (a != null && a.getValue() != null) {\n-\t\t\tIterator<String> it = list.iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tString value = it.next();\n-\t\t\t\tif (value.equals(BeansUtils.attributeValueToString(a))) {\n-\t\t\t\t\t// remove pending change requests if they are already set in attribute\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn list;\n-\n-\t}\n-\n-\t@Override\n-\tpublic User convertUserEmptyStringsInObjectAttributesIntoNull(User user) {\n-\t\t//if user is null, return it back without change\n-\t\tif(user == null) return user;\n-\n-\t\t//convert all empty strings to null\n-\t\tif(user.getFirstName() != null && user.getFirstName().isEmpty()) user.setFirstName(null);\n-\t\tif(user.getMiddleName() != null && user.getMiddleName().isEmpty()) user.setMiddleName(null);\n-\t\tif(user.getLastName() != null && user.getLastName().isEmpty()) user.setLastName(null);\n-\n-\t\tif(user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) user.setTitleBefore(null);\n-\t\tif(user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) user.setTitleAfter(null);\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic void changeNonAuthzPassword(PerunSession sess, User user, String m, String password, String lang) throws InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\n-\t\tString requestId = Utils.cipherInput(m, true);\n-\t\tString namespace = getUsersManagerImpl().loadPasswordResetRequest(user, Integer.parseInt(requestId));\n-\n-\t\tif (namespace.isEmpty()) throw new InternalErrorException(\"Password reset request is not valid anymore or doesn't existed at all for User: \"+user);\n-\n-\t\tList<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n-\t\tboolean found = false;\n-\t\tfor (Attribute a : logins) {\n-\t\t\tif (a.getFriendlyNameParameter().equals(namespace)) found = true;\n-\t\t}\n-\t\tif (!found) throw new InternalErrorException(user.toString()+\" doesn't have login in namespace: \"+namespace);\n-\n-\t\t// reset password without checking old\n-\t\ttry {\n-\t\t\tchangePassword(sess, user, namespace, \"\", password, false);\n-\t\t} catch (PasswordDoesntMatchException ex) {\n-\t\t\t// shouldn't happen\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\t// was changed - send notification to all member's emails\n-\t\tSet<String> emails = new HashSet<String>();\n-\n-\t\ttry {\n-\t\t\tAttribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\t\tif (a != null && a.getValue() != null) {\n-\t\t\t\temails.add((String)a.getValue());\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member member : members) {\n-\n-\t\t\ttry {\n-\t\t\t\tAttribute a = perunBl.getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_DEF+\":mail\");\n-\t\t\t\tif (a != null && a.getValue() != null) {\n-\t\t\t\t\temails.add((String)a.getValue());\n-\t\t\t\t}\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t// get template\n-\n-\t\tString subject;\n-\t\ttry {\n-\t\t\tAttribute subjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang,\n-\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n-\t\t\tsubject = (String) subjectTemplateAttribute.getValue();\n-\t\t\tif (subject == null) {\n-\t\t\t\tsubjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\",\n-\t\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n-\t\t\t\tsubject = (String) subjectTemplateAttribute.getValue();\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tString message;\n-\t\ttry {\n-\t\t\tAttribute messageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang,\n-\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n-\t\t\tmessage = (String) messageTemplateAttribute.getValue();\n-\t\t\tif (message == null) {\n-\t\t\t\tmessageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\",\n-\t\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n-\t\t\t\tmessage = (String) messageTemplateAttribute.getValue();\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tfor (String email : emails) {\n-\t\t\tUtils.sendPasswordResetConfirmationEmail(user, email, namespace, subject, message);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic int getUsersCount(PerunSession sess) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUsersCount(sess);\n-\t}\n-\n-\t@Override\n-\tpublic Map<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().generateAccount(session, namespace, parameters);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n-\t\tif(!sponsoredMember.isSponsored()) {\n-\t\t\tthrow new IllegalArgumentException(\"member \"+sponsoredMember.getId()+\" is not marked as sponsored\");\n-\t\t}\n-\t\treturn getUsersManagerImpl().getSponsors(sess, sponsoredMember);\n-\t}\n-\n-\tprivate PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getPasswordManagerModule(session, namespace);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\tfor(UserExtSource userExtSource : getUserExtSources(sess, user)) {\n-\t\t\ttry {\n-\t\t\t\tremoveUserExtSource(sess, user, userExtSource);\n-\t\t\t} catch (UserExtSourceAlreadyRemovedException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws AttributeNotExistsException, InternalErrorException {\n-\t\tAttributeDefinition adef = sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\t\tif((!adef.getType().equals(\"java.lang.String\")) || (!adef.getNamespace().equals(AttributesManager.NS_UES_ATTR_DEF))) {\n-\t\t\tthrow new InternalErrorException(\"only ues attributes of type String can be used in findUsersWithExtSourceAttributeValueEnding()\");\n-\t\t}\n-\t\treturn usersManagerImpl.findUsersWithExtSourceAttributeValueEnding(sess,attributeName,valueEnd,excludeValueEnds);\n-\t}\n-\n-\t@Override\n-\tpublic String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n-\n-\t\tchar[] possibleCharacters =\n-\t\t\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n-\t\t\t\t.toCharArray();\n-\t\tint count = 12;\n-\n-\t\t// FIXME - We will replace following logic once each login-namespace will implement\n-\t\t// FIXME   pwd-manager module and have server side checks\n-\t\tif (Objects.equals(loginNamespace, \"vsup\")) {\n-\t\t\tcount = 14;\n-\t\t\t// removed O, l, specific only: +, -, *, /, .\n-\t\t\tpossibleCharacters = \"ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789+-*/.\".toCharArray();\n-\t\t}\n-\n-\t\tString newRandomPassword = RandomStringUtils.random(count, 0, possibleCharacters.length - 1, false,\n-\t\t\tfalse, possibleCharacters, new SecureRandom());\n-\n-\t\ttry {\n-\t\t\tchangePassword(session, user, loginNamespace, null, newRandomPassword, false);\n-\t\t} catch (PasswordDoesntMatchException | PasswordStrengthFailedException e) {\n-\t\t\t// should not happen when we are not using the old password\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tString template = getPasswordResetTemplate(session, loginNamespace);\n-\n-\t\tString userLogin;\n-\t\ttry {\n-\t\t\tAttribute userLoginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(session, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\t\t\tuserLogin = (String) userLoginAttribute.getValue();\n-\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n-\t\t\t// should not happen since the changePassword method passed\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\treturn template\n-\t\t\t.replace(\"{password}\", StringEscapeUtils.escapeHtml4(newRandomPassword))\n-\t\t\t.replace(\"{login}\", StringEscapeUtils.escapeHtml4(userLogin));\n-\t}\n-\n-\t/**\n-\t * Returns template for password reset.\n-\t * <p>\n-\t * It finds the template in entityless attribute randomPwdResetTemplate for given namespace.\n-\t * If that fails, it falls back to default template.\n-\t *\n-\t * @param session        session\n-\t * @param loginNamespace login namespace\n-\t * @return String representing HTML template for password reset\n-\t */\n-\tprivate String getPasswordResetTemplate(PerunSession session, String loginNamespace) {\n-\t\tString template =\n-\t\t\t\t\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\" +\n-\t\t\t\t\t\t\"<head>\\n\" +\n-\t\t\t\t\t\t\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\"></meta>\\n\" +\n-\t\t\t\t\t\t\"</head>\"+\n-\t\t\t\t\t\t\"<body><div style=\\\"padding: 25px;color: black;text-align: center;\\\">\" +\n-\t\t\t\t\t\t\"<h1>Password reset</h1>\" +\n-\t\t\t\t\t\t\"<p>Password for user {login} has been reset by the administrator.<br />\" +\n-\t\t\t\t\t\t\"The new password is <br />\" +\n-\t\t\t\t\t\t\"<h2><b>{password}</b></h2>\" +\n-\t\t\t\t\t\t\"</p></div>\" +\n-\t\t\t\t\t\t\"</body>\" +\n-\t\t\t\t\t\t\"</html>\";\n-\t\ttry {\n-\t\t\tAttribute templateAttribute = perunBl.getAttributesManagerBl().getAttribute(session, loginNamespace,\n-\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":randomPwdResetTemplate\");\n-\t\t\tif (templateAttribute.getValue() != null) {\n-\t\t\t\ttemplate = (String) templateAttribute.getValue();\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException | InternalErrorException e) {\n-\t\t\tlog.warn(\"Failed to get template attribute for password reset in namespace {}, using default. Exception \" +\n-\t\t\t\t\"class: {}, Exception message: {}\", loginNamespace, e.getClass().getName(), e.getMessage());\n-\t\t}\n-\n-\t\treturn template;\n-\t}\n+    private final static Logger log = LoggerFactory.getLogger(UsersManagerBlImpl.class);\n+\n+    private UsersManagerImplApi usersManagerImpl;\n+    private PerunBl perunBl;\n+\n+    private static final String A_USER_DEF_ALT_PASSWORD_NAMESPACE = AttributesManager.NS_USER_ATTR_DEF + \":altPasswords:\";\n+\n+    private static final String PASSWORD_VALIDATE = \"validate\";\n+    private static final String PASSWORD_CREATE = \"create\";\n+    private static final String PASSWORD_RESERVE = \"reserve\";\n+    private static final String PASSWORD_RESERVE_RANDOM = \"reserve_random\";\n+    private static final String PASSWORD_CHANGE = \"change\";\n+    private static final String PASSWORD_CHECK = \"check\";\n+    private static final String PASSWORD_DELETE = \"delete\";\n+\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param usersManagerImpl connection pool\n+     */\n+    public UsersManagerBlImpl(UsersManagerImplApi usersManagerImpl) {\n+        this.usersManagerImpl = usersManagerImpl;\n+    }\n+\n+    @Override\n+    public User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n+        return getUsersManagerImpl().getUserByUserExtSource(sess, userExtSource);\n+    }\n+\n+    // FIXME do this in IMPL\n+    @Override\n+    public User getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException {\n+        for (UserExtSource ues : userExtSources) {\n+            try {\n+                return getUsersManagerImpl().getUserByUserExtSource(sess, ues);\n+            } catch (UserNotExistsException e) {\n+                // Ignore\n+            }\n+        }\n+        throw new UserNotExistsException(\"User with userExtSources \" + userExtSources + \" doesn't exists.\");\n+    }\n+\n+    @Override\n+    public List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n+        if ((extSourceType == null) || (login == null)) {\n+            return new ArrayList<User>();\n+        }\n+\n+        return getUsersManagerImpl().getUsersByExtSourceTypeAndLogin(perunSession, extSourceType, login);\n+    }\n+\n+    @Override\n+    public List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().getSpecificUsersByUser(sess, user);\n+    }\n+\n+    @Override\n+    public List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n+        if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n+            throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+        }\n+        if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) {\n+            throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+        }\n+        return getUsersManagerImpl().getUsersBySpecificUser(sess, specificUser);\n+    }\n+\n+    @Override\n+    public void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n+        this.removeSpecificUserOwner(sess, user, specificUser, false);\n+    }\n+\n+    public void removeSpecificUserOwner(PerunSession sess, User user, User specificUser, boolean forceDelete) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n+        if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n+            throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+        }\n+        if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) {\n+            throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+        }\n+        if (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) {\n+            throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n+        }\n+\n+        List<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n+        if (!specificUserOwners.remove(user)) {\n+            throw new RelationNotExistsException(\"User is not the active owner of the specificUser.\");\n+        }\n+\n+        if (!getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n+            throw new RelationNotExistsException(\"User has no relationship to specificUser.\");\n+        }\n+\n+        try {\n+            // refresh authz for sponsors\n+            if (specificUser.isSponsoredUser()) {\n+                AuthzResolverBlImpl.unsetRole(sess, user, specificUser, Role.SPONSOR);\n+            }\n+            // refresh authz for service user owners\n+            if (specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n+                if (user.getId() == sess.getPerunPrincipal().getUserId()) {\n+                    AuthzResolverBlImpl.refreshAuthz(sess);\n+                }\n+            }\n+        } catch (UserNotAdminException ex) {\n+            throw new InternalErrorException(\"Can't remove role of sponsor for user \" + user + \" and sponsored user \" + specificUser);\n+        }\n+\n+        if (forceDelete) {\n+            //getPerunBl().getAuditer().log(sess, \"{} ownership was removed for specificUser {}.\", user, specificUser);\n+            getPerunBl().getAuditer().log(sess, new OwnershipRemovedForSpecificUser(user, specificUser));\n+            getUsersManagerImpl().removeSpecificUserOwner(sess, user, specificUser);\n+        } else {\n+            getPerunBl().getAuditer().log(sess, new OwnershipDisabledForSpecificUser(user, specificUser));\n+            getUsersManagerImpl().disableOwnership(sess, user, specificUser);\n+        }\n+    }\n+\n+    @Override\n+    public void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException {\n+        if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n+            throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+        }\n+        if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) {\n+            throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+        }\n+        if (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) {\n+            throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n+        }\n+        List<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n+        if (specificUserOwners.remove(user)) {\n+            throw new RelationExistsException(\"User is already the active owner of specific user.\");\n+        }\n+\n+        if (getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n+            getUsersManagerImpl().enableOwnership(sess, user, specificUser);\n+            getPerunBl().getAuditer().log(sess, new OwnershipEnabledForSpecificUser(user, specificUser));\n+        } else {\n+            getPerunBl().getAuditer().log(sess, new UserAddedToOwnersOfSpecificUser(user, specificUser));\n+            getUsersManagerImpl().addSpecificUserOwner(sess, user, specificUser);\n+        }\n+\n+        try {\n+            // refresh authz for sponsors\n+            if (specificUser.isSponsoredUser()) {\n+                AuthzResolverBlImpl.setRole(sess, user, specificUser, Role.SPONSOR);\n+            }\n+            // refresh authz for service user owners\n+            if (specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n+                if (user.getId() == sess.getPerunPrincipal().getUserId()) {\n+                    AuthzResolverBlImpl.refreshAuthz(sess);\n+                }\n+            }\n+        } catch (AlreadyAdminException ex) {\n+            throw new InternalErrorException(\"User \" + user + \" is already sponsor of sponsored user \" + specificUser);\n+        }\n+    }\n+\n+    @Override\n+    public boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+        if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n+            throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+        }\n+        if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) {\n+            throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+        }\n+        return getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser);\n+    }\n+\n+    @Override\n+    public List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n+        return getUsersManagerImpl().getSpecificUsers(sess);\n+    }\n+\n+    @Override\n+    public User setSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType, User owner) throws InternalErrorException, RelationExistsException {\n+        if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n+            throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+        }\n+\n+        if (specificUser.getMajorSpecificType().equals(specificUserType)) {\n+            throw new InternalErrorException(\"Can't set \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he has already set this flag.\");\n+        }\n+\n+        //Set specific type for user\n+        specificUser = getUsersManagerImpl().setSpecificUserType(sess, specificUser, specificUserType);\n+\n+        //add owner for this new specific user\n+        this.addSpecificUserOwner(sess, owner, specificUser);\n+\n+        return specificUser;\n+    }\n+\n+    @Override\n+    public User unsetSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType) throws InternalErrorException {\n+        if (!specificUser.getMajorSpecificType().equals(specificUserType)) {\n+            throw new InternalErrorException(\"Can't unset \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he hasn't this flag yet.\");\n+        }\n+\n+        //remove all owners for this new specific user\n+        List<User> owners = getPerunBl().getUsersManagerBl().getUsersBySpecificUser(sess, specificUser);\n+        for (User owner : owners) {\n+            try {\n+                this.removeSpecificUserOwner(sess, owner, specificUser, true);\n+            } catch (SpecificUserMustHaveOwnerException | RelationNotExistsException | SpecificUserOwnerAlreadyRemovedException ex) {\n+                throw new InternalErrorException(\"Can't remove ownership of user \" + specificUser, ex);\n+            }\n+        }\n+\n+        //Unset specific type for user\n+        specificUser = getUsersManagerImpl().unsetSpecificUserType(sess, specificUser, specificUserType);\n+\n+\n+        return specificUser;\n+    }\n+\n+    @Override\n+    public User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n+        return getUsersManagerImpl().getUserById(sess, id);\n+    }\n+\n+    @Override\n+    public User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n+        if (member.getUserId() != 0) {\n+            try {\n+                // TODO If the member object will contain also User object, here can be returned directly.\n+                return getUsersManagerImpl().getUserById(sess, member.getUserId());\n+            } catch (UserNotExistsException e) {\n+                throw new ConsistencyErrorException(\"Member \" + member + \"has non-existin user.\", e);\n+            }\n+        } else {\n+            return getUsersManagerImpl().getUserByMember(sess, member);\n+        }\n+    }\n+\n+    @Override\n+    public User getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException {\n+        ExtSource extSource = perunBl.getExtSourcesManagerBl().getExtSourceByName(sess, extSourceName);\n+        UserExtSource userExtSource = this.getUserExtSourceByExtLogin(sess, extSource, extLogin);\n+\n+        return this.getUserByUserExtSource(sess, userExtSource);\n+    }\n+\n+    @Override\n+    public List<User> getUsers(PerunSession sess) throws InternalErrorException {\n+        return getUsersManagerImpl().getUsers(sess);\n+    }\n+\n+    @Override\n+    public RichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = new ArrayList<User>();\n+        users.add(user);\n+        List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+        return richUsers.get(0);\n+    }\n+\n+    @Override\n+    public RichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = new ArrayList<User>();\n+        users.add(user);\n+        List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+        List<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n+        return richUsersWithAttributes.get(0);\n+    }\n+\n+    @Override\n+    public List<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException {\n+        List<RichUser> richUsers = new ArrayList<RichUser>();\n+\n+        for (User user : users) {\n+            List<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n+            RichUser richUser = new RichUser(user, userExtSources);\n+            richUsers.add(richUser);\n+        }\n+        return richUsers;\n+    }\n+\n+    @Override\n+    public List<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException, UserNotExistsException {\n+        for (RichUser richUser : richUsers) {\n+            User user = getPerunBl().getUsersManagerBl().getUserById(sess, richUser.getId());\n+            List<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, user);\n+\n+            richUser.setUserAttributes(userAttributes);\n+        }\n+\n+        return richUsers;\n+    }\n+\n+    @Override\n+    public List<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = new ArrayList<User>();\n+        users.addAll(this.getUsers(sess));\n+        if (!includedSpecificUsers) {\n+            users.removeAll(this.getSpecificUsers(sess));\n+        }\n+        List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+        return richUsers;\n+    }\n+\n+    @Override\n+    public List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = new ArrayList<User>();\n+        users.addAll(this.getUsers(sess));\n+        if (!includedSpecificUsers) {\n+            users.removeAll(this.getSpecificUsers(sess));\n+        }\n+        List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+        List<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n+        return richUsersWithAttributes;\n+    }\n+\n+\n+    @Override\n+    public List<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n+        List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+        return richUsers;\n+    }\n+\n+    @Override\n+    public List<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n+        List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+        List<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n+        return richUsersWithAttributes;\n+    }\n+\n+    @Override\n+    public List<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+        List<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n+\n+        for (AttributeDefinition attrd : attrsDef) {\n+            if (attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) {\n+                usersAttributesDef.add(attrd);\n+            }\n+            //If not, skip this attribute, it is not user Attribute\n+        }\n+\n+        for (RichUser richUser : richUsers) {\n+            List<Attribute> userAttributes = new ArrayList<Attribute>();\n+            List<String> userAttrNames = new ArrayList<String>();\n+            for (AttributeDefinition ad : usersAttributesDef) {\n+                userAttrNames.add(ad.getName());\n+            }\n+            userAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richUser, userAttrNames));\n+\n+            richUser.setUserAttributes(userAttributes);\n+        }\n+\n+        return richUsers;\n+    }\n+\n+    @Override\n+    public User createUser(PerunSession sess, User user) throws InternalErrorException {\n+\n+        // trim input\n+        if (user.getFirstName() != null) {\n+            user.setFirstName(user.getFirstName().trim());\n+        }\n+        if (user.getLastName() != null) {\n+            user.setLastName(user.getLastName().trim());\n+        }\n+        if (user.getMiddleName() != null) {\n+            user.setMiddleName(user.getMiddleName().trim());\n+        }\n+        if (user.getTitleBefore() != null) {\n+            user.setTitleBefore(user.getTitleBefore().trim());\n+        }\n+        if (user.getTitleAfter() != null) {\n+            user.setTitleAfter(user.getTitleAfter().trim());\n+        }\n+\n+        //Convert empty strings to null\n+        if (user.getFirstName() != null && user.getFirstName().isEmpty()) {\n+            user.setFirstName(null);\n+        }\n+        if (user.getLastName() != null && user.getLastName().isEmpty()) {\n+            user.setLastName(null);\n+        }\n+        if (user.getMiddleName() != null && user.getMiddleName().isEmpty()) {\n+            user.setMiddleName(null);\n+        }\n+        if (user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) {\n+            user.setTitleBefore(null);\n+        }\n+        if (user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) {\n+            user.setTitleAfter(null);\n+        }\n+\n+        user = getUsersManagerImpl().createUser(sess, user);\n+        getPerunBl().getAuditer().log(sess, new UserCreated(user));\n+\n+        // Add default userExtSource\n+        ExtSource es;\n+        try {\n+            es = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, ExtSourcesManager.EXTSOURCE_NAME_PERUN);\n+        } catch (ExtSourceNotExistsException e1) {\n+            throw new ConsistencyErrorException(\"Default extSource PERUN must exists! It is created in ExtSourcesManagerImpl.init function.\", e1);\n+        }\n+        UserExtSource ues = new UserExtSource(es, 0, String.valueOf(user.getId()));\n+        try {\n+            this.addUserExtSource(sess, user, ues);\n+        } catch (UserExtSourceExistsException e) {\n+            throw new ConsistencyErrorException(e);\n+        }\n+\n+        return user;\n+    }\n+\n+    @Override\n+    public void deleteUser(PerunSession sess, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n+        this.deleteUser(sess, user, false);\n+    }\n+\n+    @Override\n+    public void deleteUser(PerunSession sess, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+\n+        if (members != null && (members.size() > 0)) {\n+            if (forceDelete) {\n+                for (Member member : members) {\n+                    getPerunBl().getMembersManagerBl().deleteMember(sess, member);\n+                }\n+            } else {\n+                throw new RelationExistsException(\"Members exist\");\n+            }\n+        }\n+\n+        //Remove all information about user on facilities (facilities contacts)\n+        List<ContactGroup> userContactGroups = getPerunBl().getFacilitiesManagerBl().getFacilityContactGroups(sess, user);\n+        if (!userContactGroups.isEmpty()) {\n+            if (forceDelete) {\n+                getPerunBl().getFacilitiesManagerBl().removeAllUserContacts(sess, user);\n+            } else {\n+                throw new RelationExistsException(\"User has still some facilities contacts: \" + userContactGroups);\n+            }\n+        }\n+\n+        if (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && forceDelete) {\n+            getPerunBl().getSecurityTeamsManagerBl().removeUserFromAllBlacklists(sess, user);\n+        } else if (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && !forceDelete) {\n+            throw new RelationExistsException(\"User is blacklisted by some security team. Deletion would cause loss of this information.\");\n+        }\n+\n+        // First delete all associated external sources to the user\n+        removeAllUserExtSources(sess, user);\n+        getPerunBl().getAuditer().log(sess, new AllUserExtSourcesDeletedForUser(user));\n+\n+        // delete all authorships of users publications\n+        getUsersManagerImpl().removeAllAuthorships(sess, user);\n+\n+        // delete all mailchange request related to user\n+        getUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n+\n+        // delete all pwdreset request related to user\n+        getUsersManagerImpl().removeAllPasswordResetRequests(sess, user);\n+\n+        // get all reserved logins of user\n+        List<Pair<String, String>> logins = getUsersManagerImpl().getUsersReservedLogins(user);\n+\n+        // delete them from KDC\n+        for (Pair<String, String> login : logins) {\n+            try {\n+                // !! left = namespace / right = login\n+                this.deletePassword(sess, login.getRight(), login.getLeft());\n+            } catch (LoginNotExistsException e) {\n+                // OK - User hasn't assigned any password with this login\n+            } catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n+                if (forceDelete) {\n+                    log.error(\"Error during deletion of an account at {} for user {} with login {}.\", new Object[] {login.getLeft(), user, login.getRight()});\n+                } else {\n+                    throw new RelationExistsException(\"Error during deletion of an account at \" + login.getLeft() +\n+                            \" for user \" + user + \" with login \" + login.getRight() + \".\");\n+                }\n+            }\n+        }\n+\n+        // delete them from DB\n+        getUsersManagerImpl().deleteUsersReservedLogins(user);\n+\n+        // all users applications and submitted data are deleted on cascade when \"deleteUser()\"\n+\n+        // Remove all possible passwords associated with logins (stored in attributes)\n+        for (Attribute loginAttribute : getPerunBl().getAttributesManagerBl().getLogins(sess, user)) {\n+            try {\n+                this.deletePassword(sess, (String) loginAttribute.getValue(), loginAttribute.getFriendlyNameParameter());\n+            } catch (LoginNotExistsException e) {\n+                // OK - User hasn't assigned any password with this login\n+            } catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n+                if (forceDelete) {\n+                    log.error(\"Error during deletion of the account at {} for user {} with login {}.\", new Object[] {loginAttribute.getFriendlyNameParameter(), user, (String) loginAttribute.getValue()});\n+                } else {\n+                    throw new RelationExistsException(\"Error during deletion of the account at \" + loginAttribute.getFriendlyNameParameter() +\n+                            \" for user \" + user + \" with login \" + (String) loginAttribute.getValue() + \".\");\n+                }\n+            }\n+        }\n+\n+\n+        // Delete assigned attributes\n+        // Users one\n+        try {\n+            getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, user);\n+            // User-Facilities one\n+            getPerunBl().getAttributesManagerBl().removeAllUserFacilityAttributes(sess, user);\n+        } catch (WrongAttributeValueException ex) {\n+            //All members are deleted => there are no required attribute => all atributes can be removed\n+            throw new ConsistencyErrorException(ex);\n+        } catch (WrongReferenceAttributeValueException ex) {\n+            //All members are deleted => there are no required attribute => all atributes can be removed\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        //Remove user authz\n+        AuthzResolverBlImpl.removeAllUserAuthz(sess, user);\n+        //delete even inactive links\n+        usersManagerImpl.deleteSponsorLinks(sess, user);\n+\n+        //Remove all users bans\n+        List<BanOnFacility> bansOnFacility = getPerunBl().getFacilitiesManagerBl().getBansForUser(sess, user.getId());\n+        for (BanOnFacility banOnFacility : bansOnFacility) {\n+            try {\n+                getPerunBl().getFacilitiesManagerBl().removeBan(sess, banOnFacility.getId());\n+            } catch (BanNotExistsException ex) {\n+                //it is ok, we just want to remove it anyway\n+            }\n+        }\n+\n+        // Remove all sponsored user authz of his owners\n+        if (user.isSponsoredUser()) {\n+            AuthzResolverBlImpl.removeAllSponsoredUserAuthz(sess, user);\n+        }\n+        // Finally delete the user\n+        getUsersManagerImpl().deleteUser(sess, user);\n+        getPerunBl().getAuditer().log(sess, new UserDeleted(user));\n+    }\n+\n+    @Override\n+    public User updateUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+        //Convert user to version with no empty strings in object attributes (null instead)\n+        user = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n+\n+        User beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n+        User afterUpdatingUser = getUsersManagerImpl().updateUser(sess, user);\n+\n+        //Log only when something is changed\n+        if (!beforeUpdatingUser.equals(afterUpdatingUser)) {\n+            getPerunBl().getAuditer().log(sess, new UserUpdated(user));\n+        }\n+        return afterUpdatingUser;\n+    }\n+\n+    @Override\n+    public User updateNameTitles(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+        //Convert user to version with no empty strings in object attributes (null instead)\n+        user = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n+\n+        User beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n+        User afterUpdatingUser = getUsersManagerImpl().updateNameTitles(sess, user);\n+\n+        //Log only when something is changed\n+        // must audit like update user since it changes same object\n+        if (!beforeUpdatingUser.equals(afterUpdatingUser)) {\n+            getPerunBl().getAuditer().log(sess, new UserUpdated(user));\n+        }\n+        return afterUpdatingUser;\n+    }\n+\n+    @Override\n+    public UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n+        getPerunBl().getAuditer().log(sess, new UserExtSourceUpdated(userExtSource));\n+        return getUsersManagerImpl().updateUserExtSource(sess, userExtSource);\n+    }\n+\n+    @Override\n+    public void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+        getUsersManagerImpl().updateUserExtSourceLastAccess(sess, userExtSource);\n+    }\n+\n+    @Override\n+    public List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().getUserExtSources(sess, user);\n+    }\n+\n+    @Override\n+    public UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+        return getUsersManagerImpl().getUserExtSourceById(sess, id);\n+    }\n+\n+    @Override\n+    public List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n+        return getUsersManagerImpl().getAllUserExtSourcesByTypeAndLogin(sess, extType, extLogin);\n+    }\n+\n+    @Override\n+    public List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().getActiveUserExtSources(sess, user);\n+    }\n+\n+    @Override\n+    public UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n+        // Check if the userExtSource already exists\n+        if (usersManagerImpl.userExtSourceExists(sess, userExtSource)) {\n+            throw new UserExtSourceExistsException(\"UserExtSource \" + userExtSource + \" already exists.\");\n+        }\n+\n+        // Check if userExtsource is type of IDP (special testing behavior)\n+        if (userExtSource.getExtSource().getType().equals(ExtSourcesManager.EXTSOURCE_IDP)) {\n+            // If extSource of this userExtSource is type of IDP, test uniqueness of login in this extSource type for all users\n+            String login = userExtSource.getLogin();\n+            List<UserExtSource> userExtSources = getAllUserExtSourcesByTypeAndLogin(sess, ExtSourcesManager.EXTSOURCE_IDP, login);\n+            if (userExtSources.size() == 1) {\n+                throw new InternalErrorException(\"ExtLogin: \" + login + \" is already in used for extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n+            } else if (userExtSources.size() > 1) {\n+                throw new ConsistencyErrorException(\"There are \" + userExtSources.size() + \"   extLogins: \" + login + \" for  extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n+            }\n+        }\n+\n+        userExtSource = getUsersManagerImpl().addUserExtSource(sess, user, userExtSource);\n+        getPerunBl().getAuditer().log(sess, new UserExtSourceAddedToUser(userExtSource, user));\n+        return userExtSource;\n+    }\n+\n+    @Override\n+    public void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n+        //FIXME zkontrolovat zda na userExtSource neni navazan nejaky member\n+        //First remove all user extSource attributes before removing userExtSource\n+        try {\n+            getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, userExtSource);\n+        } catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n+            throw new InternalErrorException(\"Can't remove userExtSource because there is problem with removing all it's attributes.\", ex);\n+        }\n+        getUsersManagerImpl().removeUserExtSource(sess, user, userExtSource);\n+        getPerunBl().getAuditer().log(sess, new UserExtSourceRemovedFromUser(userExtSource, user));\n+    }\n+\n+    @Override\n+    public void moveUserExtSource(PerunSession sess, User sourceUser, User targetUser, UserExtSource userExtSource) throws InternalErrorException {\n+        List<Attribute> userExtSourceAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, userExtSource);\n+        Iterator<Attribute> iterator = userExtSourceAttributes.iterator();\n+        //remove all virtual attributes (we don't need to take care about them)\n+        while (iterator.hasNext()) {\n+            Attribute attribute = iterator.next();\n+            if (getPerunBl().getAttributesManagerBl().isVirtAttribute(sess, attribute)) {\n+                iterator.remove();\n+            }\n+        }\n+\n+        //remove userExtSource\n+        try {\n+            this.removeUserExtSource(sess, sourceUser, userExtSource);\n+        } catch (UserExtSourceAlreadyRemovedException ex) {\n+            //this is little weird, will be better to report exception\n+            throw new InternalErrorException(\"UserExtSource was unexpectedly removed while moving \" + userExtSource +\n+                    \" from \" + sourceUser + \" to \" + targetUser);\n+        }\n+\n+        //change userId for userExtSource\n+        userExtSource.setUserId(targetUser.getId());\n+        //add userExtSource to the targetUser\n+        try {\n+            userExtSource = this.addUserExtSource(sess, targetUser, userExtSource);\n+        } catch (UserExtSourceExistsException ex) {\n+            //someone moved this UserExtSource before us\n+            throw new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser +\n+                    \" failed because someone already moved this UserExtSource.\", ex);\n+        }\n+\n+        //set all attributes back to this UserExtSource when it is already assigned to the targetUser\n+        try {\n+            getPerunBl().getAttributesManagerBl().setAttributes(sess, userExtSource, userExtSourceAttributes);\n+        } catch (WrongAttributeAssignmentException | WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n+            throw new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser +\n+                    \" failed because of problem with setting removed attributes back to the UserExtSource.\", ex);\n+        }\n+    }\n+\n+    @Override\n+    public UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n+        return getUsersManagerImpl().getUserExtSourceByExtLogin(sess, source, extLogin);\n+    }\n+\n+    @Override\n+    public List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().getVosWhereUserIsAdmin(sess, user);\n+    }\n+\n+    @Override\n+    public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, user);\n+    }\n+\n+    @Override\n+    public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, vo, user);\n+    }\n+\n+    @Override\n+    public List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().getVosWhereUserIsMember(sess, user);\n+    }\n+\n+    @Override\n+    public List<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = this.getUsersWithoutVoAssigned(sess);\n+        return this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n+    }\n+\n+    @Override\n+    public List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException {\n+        return usersManagerImpl.getUsersWithoutVoAssigned(sess);\n+    }\n+\n+    @Override\n+    public List<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+        List<User> allSearchingUsers = new ArrayList<User>();\n+        List<User> allVoUsers = new ArrayList<User>();\n+        allSearchingUsers = this.findUsers(sess, searchString);\n+        allVoUsers = getUsersManagerImpl().getUsersByVo(sess, vo);\n+        allSearchingUsers.removeAll(allVoUsers);\n+        return allSearchingUsers;\n+    }\n+\n+    @Override\n+    public List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        return getPerunBl().getResourcesManagerBl().getAllowedResources(sess, facility, user);\n+    }\n+\n+    @Override\n+    public List<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        List<Resource> allowedResources = new ArrayList<Resource>();\n+\n+        List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+        for (Resource resource : resources) {\n+            if (getPerunBl().getResourcesManagerBl().isUserAssigned(sess, user, resource)) {\n+                allowedResources.add(resource);\n+            }\n+        }\n+        return allowedResources;\n+    }\n+\n+    @Override\n+    public List<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException {\n+        //TODO do this method in more efficient way\n+        Set<Resource> resources = new HashSet<Resource>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member member : members) {\n+            if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                resources.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member));\n+            }\n+        }\n+        return new ArrayList<Resource>(resources);\n+    }\n+\n+    @Override\n+    public List<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException {\n+        Set<Resource> resources = new HashSet<Resource>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+\n+        for (Member member : members) {\n+            resources.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member));\n+        }\n+        return new ArrayList<Resource>(resources);\n+    }\n+\n+    @Override\n+    public List<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException {\n+        Set<RichResource> resources = new HashSet<RichResource>();\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+\n+        for (Member member : members) {\n+            resources.addAll(getPerunBl().getResourcesManagerBl().getAssignedRichResources(sess, member));\n+        }\n+        return new ArrayList<RichResource>(resources);\n+    }\n+\n+    private List<User> getUsersByVirtualAttribute(PerunSession sess, AttributeDefinition attributeDef, String attributeValue) throws InternalErrorException {\n+        // try to find method in attribute module\n+        UserVirtualAttributesModuleImplApi attributeModule = perunBl.getAttributesManagerBl().getUserVirtualAttributeModule(sess, attributeDef);\n+        List<User> listOfUsers = attributeModule.searchInAttributesValues((PerunSessionImpl) sess, attributeValue);\n+\n+        if (listOfUsers != null) {\n+            return listOfUsers;\n+        }\n+\n+        // iterate over all users\n+        List<User> matchedUsers = new ArrayList<User>();\n+        for (User user : perunBl.getUsersManagerBl().getUsers(sess)) {\n+            Attribute userAttribute;\n+            try {\n+                userAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, user, attributeDef.getName());\n+            } catch (AttributeNotExistsException e) {\n+                throw new InternalErrorException(e);\n+            } catch (WrongAttributeAssignmentException e) {\n+                throw new InternalErrorException(e);\n+            }\n+            if (userAttribute.valueContains((String) attributeValue)) {\n+                matchedUsers.add(user);\n+            }\n+        }\n+        return matchedUsers;\n+    }\n+\n+    @Override\n+    public List<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n+        try {\n+            AttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+\n+            if (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n+                return this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n+            } else {\n+                return this.getUsersManagerImpl().getUsersByAttributeValue(sess, attributeDef, attributeValue);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new ConsistencyErrorException(\"Attribute name:'\" + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+        return this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n+    }\n+\n+    /**\n+     * Search attributes directly in the DB only if the attr is def or opt and value is type of String, otherwise load all users and search in a loop.\n+     */\n+    @Override\n+    public List<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n+        try {\n+            AttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+\n+            if (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n+                return this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n+            } else {\n+                Attribute attribute = new Attribute(attributeDef);\n+                attribute.setValue(attributeValue);\n+\n+                return this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new ConsistencyErrorException(\"Attribute name:'\" + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n+        }\n+    }\n+\n+    @Override\n+    public List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n+        return this.getUsersManagerImpl().findUsers(sess, searchString);\n+    }\n+\n+    @Override\n+    public List<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = this.getUsersManagerImpl().findUsers(sess, searchString);\n+        return this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n+    }\n+\n+    @Override\n+    public List<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n+        List<User> users = this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n+        return this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n+    }\n+\n+    @Override\n+    public List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n+        return this.getUsersManagerImpl().findUsersByName(sess, searchString);\n+    }\n+\n+    @Override\n+    public List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n+        // Convert to lower case\n+        titleBefore = titleBefore.toLowerCase();\n+        firstName = firstName.toLowerCase();\n+        middleName = middleName.toLowerCase();\n+        lastName = lastName.toLowerCase();\n+        titleAfter = titleAfter.toLowerCase();\n+\n+        return this.getUsersManagerImpl().findUsersByName(sess, titleBefore, firstName, middleName, lastName, titleAfter);\n+    }\n+\n+    @Override\n+    public List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n+        return this.getUsersManagerImpl().findUsersByExactName(sess, searchString);\n+    }\n+\n+    public List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n+        return this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n+    }\n+\n+    @Override\n+    public List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n+        return getUsersManagerImpl().getUsersByIds(sess, usersIds);\n+    }\n+\n+    @Override\n+    public boolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException {\n+        if (loginNamespace == null || login == null) {\n+            throw new InternalErrorException(new NullPointerException(\"loginNamespace cannot be null, nor login\"));\n+        }\n+\n+        // Create Attribute\n+        try {\n+            AttributeDefinition attributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+            Attribute attribute = new Attribute(attributeDefinition);\n+\n+            attribute.setValue(login);\n+\n+            // Create empty user\n+            User user = new User();\n+\n+            // Check attribute value, if the login is already occupied, then WrongAttributeValueException exception is thrown\n+            getPerunBl().getAttributesManagerBl().checkAttributeValue(sess, user, attribute);\n+\n+            return true;\n+        } catch (AttributeNotExistsException e) {\n+            throw new InternalErrorException(e);\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        } catch (WrongReferenceAttributeValueException e) {\n+            throw new InternalErrorException(e);\n+        } catch (WrongAttributeValueException e) {\n+            return false;\n+        }\n+\n+        //TODO Check also reserved logins in Registrar\n+    }\n+\n+    /**\n+     * Gets the usersManagerImpl for this instance.\n+     *\n+     * @return The usersManagerImpl.\n+     */\n+    public UsersManagerImplApi getUsersManagerImpl() {\n+        return this.usersManagerImpl;\n+    }\n+\n+    /**\n+     * Gets the perunBl for this instance.\n+     *\n+     * @return The perunBl.\n+     */\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n+\n+    @Override\n+    public void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+        getUsersManagerImpl().checkUserExists(sess, user);\n+    }\n+\n+    @Override\n+    public void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n+        getUsersManagerImpl().checkReservedLogins(sess, namespace, login);\n+    }\n+\n+    @Override\n+    public void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n+        getUsersManagerImpl().checkUserExtSourceExists(sess, userExtSource);\n+    }\n+\n+    @Override\n+    public void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+        getUsersManagerImpl().checkUserExtSourceExistsById(sess, id);\n+    }\n+\n+    @Override\n+    public boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+        return getUsersManagerImpl().userExtSourceExists(sess, userExtSource);\n+    }\n+\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n+\n+    @Override\n+    public boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n+        return getUsersManagerImpl().isUserPerunAdmin(sess, user);\n+    }\n+\n+    @Override\n+    public RichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException {\n+        if (richUser == null) {\n+            throw new InternalErrorException(\"RichUser can't be null.\");\n+        }\n+        //Filtering users attributes\n+        if (richUser.getUserAttributes() != null) {\n+            List<Attribute> userAttributes = richUser.getUserAttributes();\n+            List<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n+            for (Attribute userAttr : userAttributes) {\n+                if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richUser)) {\n+                    userAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richUser));\n+                    allowedUserAttributes.add(userAttr);\n+                }\n+            }\n+            richUser.setUserAttributes(allowedUserAttributes);\n+        }\n+        return richUser;\n+    }\n+\n+    @Override\n+    public List<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException {\n+        List<RichUser> filteredRichUsers = new ArrayList<RichUser>();\n+        if (richUsers == null || richUsers.isEmpty()) {\n+            return filteredRichUsers;\n+        }\n+\n+        for (RichUser ru : richUsers) {\n+            filteredRichUsers.add(this.filterOnlyAllowedAttributes(sess, ru));\n+        }\n+\n+        return filteredRichUsers;\n+    }\n+\n+    @Override\n+    public List<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException {\n+        List<User> users = new ArrayList<User>();\n+\n+        //All possible useful objects\n+        Vo vo = null;\n+        Facility facility = null;\n+        Group group = null;\n+        Member member = null;\n+        User user = null;\n+        Host host = null;\n+        Resource resource = null;\n+\n+        //Get object for primaryHolder of aidingAttr\n+        if (perunBean != null) {\n+            if (perunBean instanceof Vo) {\n+                vo = (Vo) perunBean;\n+            } else if (perunBean instanceof Facility) {\n+                facility = (Facility) perunBean;\n+            } else if (perunBean instanceof Group) {\n+                group = (Group) perunBean;\n+            } else if (perunBean instanceof Member) {\n+                member = (Member) perunBean;\n+            } else if (perunBean instanceof User) {\n+                user = (User) perunBean;\n+            } else if (perunBean instanceof Host) {\n+                host = (Host) perunBean;\n+            } else if (perunBean instanceof Resource) {\n+                resource = (Resource) perunBean;\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n+            }\n+        } else {\n+            throw new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n+        }\n+\n+        if (group != null) {\n+            List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+            List<User> usersFromGroup = new ArrayList<User>();\n+            for (Member memberElement : members) {\n+                usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+            }\n+            for (User userElement : usersFromGroup) {\n+                users.add(userElement);\n+            }\n+        } else if (member != null) {\n+            user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            users.add(user);\n+        } else if (resource != null) {\n+            List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+            users.addAll(usersFromResource);\n+        } else if (user != null) {\n+            users.add(user);\n+        } else if (host != null) {\n+            facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+            List<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+            for (User userElement : usersFromHost) {\n+                users.add(userElement);\n+            }\n+        } else if (facility != null) {\n+            List<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+            for (User userElement : usersFromFacility) {\n+                users.add(userElement);\n+            }\n+        } else if (vo != null) {\n+            List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+            List<User> usersFromVo = new ArrayList<User>();\n+            for (Member memberElement : members) {\n+                usersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+            }\n+            for (User userElement : usersFromVo) {\n+                users.add(userElement);\n+            }\n+        }\n+\n+        return users;\n+    }\n+\n+    /**\n+     * Method which calls external program for password reservation.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     */\n+    @Override\n+    public void reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+\n+        log.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+        // Get login.\n+        try {\n+            Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+\n+            if (attr.getValue() == null) {\n+                throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+            }\n+\n+            // Create the password\n+            try {\n+                this.managePassword(sess, PASSWORD_RESERVE_RANDOM, (String) attr.getValue(), loginNamespace, null);\n+            } catch (PasswordCreationFailedRuntimeException e) {\n+                throw new PasswordCreationFailedException(e);\n+            } catch (PasswordOperationTimeoutRuntimeException e) {\n+                throw new PasswordOperationTimeoutException(e);\n+            } catch (PasswordStrengthFailedRuntimeException e) {\n+                throw new PasswordStrengthFailedException(e);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new LoginNotExistsException(e);\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password reservation.\n+     *\n+     * @param sess\n+     * @param userLogin\n+     * @param loginNamespace\n+     * @param password\n+     */\n+    @Override\n+    public void reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException,\n+            PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+        log.info(\"Reserving password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+        // Reserve the password\n+        try {\n+            this.managePassword(sess, PASSWORD_RESERVE, (String) userLogin, loginNamespace, password);\n+        } catch (PasswordCreationFailedRuntimeException e) {\n+            throw new PasswordCreationFailedException(e);\n+        } catch (PasswordOperationTimeoutRuntimeException e) {\n+            throw new PasswordOperationTimeoutException(e);\n+        } catch (PasswordStrengthFailedRuntimeException e) {\n+            throw new PasswordStrengthFailedException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password reservation. User and login is already known.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     * @param password\n+     */\n+    @Override\n+    public void reservePassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException,\n+            PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+        log.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+        // Get login.\n+        try {\n+            Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+\n+            if (attr.getValue() == null) {\n+                throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+            }\n+\n+            // Create the password\n+            try {\n+                this.managePassword(sess, PASSWORD_RESERVE, (String) attr.getValue(), loginNamespace, password);\n+            } catch (PasswordCreationFailedRuntimeException e) {\n+                throw new PasswordCreationFailedException(e);\n+            } catch (PasswordOperationTimeoutRuntimeException e) {\n+                throw new PasswordOperationTimeoutException(e);\n+            } catch (PasswordStrengthFailedRuntimeException e) {\n+                throw new PasswordStrengthFailedException(e);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new LoginNotExistsException(e);\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password validation.\n+     *\n+     * @param sess\n+     * @param userLogin\n+     * @param loginNamespace\n+     */\n+    @Override\n+    public void validatePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException,\n+            PasswordCreationFailedException {\n+        log.info(\"Validating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+        // Validate the password\n+        try {\n+            this.managePassword(sess, PASSWORD_VALIDATE, (String) userLogin, loginNamespace, null);\n+        } catch (PasswordCreationFailedRuntimeException e) {\n+            throw new PasswordCreationFailedException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password validation. User and login is already known.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     */\n+    @Override\n+    public void validatePassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException,\n+            PasswordCreationFailedException, LoginNotExistsException {\n+        log.info(\"Validating password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+        // Get login.\n+        try {\n+            Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+\n+            if (attr.getValue() == null) {\n+                throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+            }\n+\n+            // Create the password\n+            try {\n+                this.managePassword(sess, PASSWORD_VALIDATE, (String) attr.getValue(), loginNamespace, null);\n+            } catch (PasswordCreationFailedRuntimeException e) {\n+                throw new PasswordCreationFailedException(e);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new LoginNotExistsException(e);\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password validation. User and login is already known.\n+     *\n+     * @param sess\n+     * @param userLogin\n+     * @param loginNamespace\n+     */\n+    @Override\n+    public void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace)\n+            throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        /*\n+         * FIXME This method is very badly writen - it should be rewrited or refactored\n+         */\n+\n+        try {\n+            if (loginNamespace.equals(\"einfra\")) {\n+                List<String> kerberosLogins = new ArrayList<String>();\n+\n+                // Set META and EINFRA userExtSources\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"META\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@META\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA\");\n+                ues = new UserExtSource(extSource, userLogin + \"@EINFRA\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://login.ics.muni.cz/idp/shibboleth\");\n+                ues = new UserExtSource(extSource, userLogin + \"@meta.cesnet.cz\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                // Store also Kerberos logins\n+                Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                    kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                }\n+\n+                boolean someChange = false;\n+                if (!kerberosLogins.contains(userLogin + \"@EINFRA\")) {\n+                    kerberosLogins.add(userLogin + \"@EINFRA\");\n+                    someChange = true;\n+                }\n+                if (!kerberosLogins.contains(userLogin + \"@META\")) {\n+                    kerberosLogins.add(userLogin + \"@META\");\n+                    someChange = true;\n+                }\n+\n+                if (someChange) {\n+                    kerberosLoginsAttr.setValue(kerberosLogins);\n+                    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                }\n+\n+            } else if (loginNamespace.equals(\"egi-ui\")) {\n+\n+                List<String> kerberosLogins = new ArrayList<String>();\n+\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EGI\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@EGI\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                // Store also Kerberos logins\n+                Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                    kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                }\n+\n+                if (!kerberosLogins.contains(userLogin + \"@EGI\")) {\n+                    kerberosLogins.add(userLogin + \"@EGI\");\n+                    kerberosLoginsAttr.setValue(kerberosLogins);\n+                    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                }\n+\n+            } else if (loginNamespace.equals(\"sitola\")) {\n+\n+                List<String> kerberosLogins = new ArrayList<String>();\n+\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"SITOLA.FI.MUNI.CZ\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@SITOLA.FI.MUNI.CZ\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                // Store also Kerberos logins\n+                Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                    kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                }\n+\n+                if (!kerberosLogins.contains(userLogin + \"@SITOLA.FI.MUNI.CZ\")) {\n+                    kerberosLogins.add(userLogin + \"@SITOLA.FI.MUNI.CZ\");\n+                    kerberosLoginsAttr.setValue(kerberosLogins);\n+                    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                }\n+\n+            } else if (loginNamespace.equals(\"ics-muni-cz\")) {\n+\n+                List<String> kerberosLogins = new ArrayList<String>();\n+\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ICS.MUNI.CZ\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@ICS.MUNI.CZ\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                // Store also Kerberos logins\n+                Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                    kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                }\n+\n+                if (!kerberosLogins.contains(userLogin + \"@ICS.MUNI.CZ\")) {\n+                    kerberosLogins.add(userLogin + \"@ICS.MUNI.CZ\");\n+                    kerberosLoginsAttr.setValue(kerberosLogins);\n+                    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                }\n+\n+            } else if (loginNamespace.equals(\"mu\")) {\n+\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://idp2.ics.muni.cz/idp/shibboleth\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@muni.cz\");\n+                ues.setLoa(2);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+            } else if (loginNamespace.equals(\"vsup\")) {\n+\n+                // Add UES in their ActiveDirectory to access Perun by it\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"AD\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin);\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+            } else if (loginNamespace.equals(\"elixir\")) {\n+\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ELIXIR-EUROPE.ORG\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@ELIXIR-EUROPE.ORG\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                List<String> kerberosLogins = new ArrayList<String>();\n+\n+                // Store also Kerberos logins\n+                Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                    kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                }\n+\n+                if (!kerberosLogins.contains(userLogin + \"@ELIXIR-EUROPE.ORG\")) {\n+                    kerberosLogins.add(userLogin + \"@ELIXIR-EUROPE.ORG\");\n+                    kerberosLoginsAttr.setValue(kerberosLogins);\n+                    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                }\n+\n+            } else if (loginNamespace.equals(\"einfra-services\")) {\n+\n+                ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA-SERVICES\");\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@EINFRA-SERVICES\");\n+                ues.setLoa(0);\n+\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+                List<String> kerberosLogins = new ArrayList<String>();\n+\n+                // Store also Kerberos logins\n+                Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                    kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                }\n+\n+                if (!kerberosLogins.contains(userLogin + \"@EINFRA-SERVICES\")) {\n+                    kerberosLogins.add(userLogin + \"@EINFRA-SERVICES\");\n+                    kerberosLoginsAttr.setValue(kerberosLogins);\n+                    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                }\n+\n+            } else if (loginNamespace.equals(\"dummy\")) {\n+                //dummy namespace for testing, it has accompanying DummyPasswordModule that just generates random numbers\n+                ExtSource extSource;\n+                try {\n+                    extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://dummy\");\n+                } catch (ExtSourceNotExistsException e) {\n+                    extSource = new ExtSource(\"https://dummy\", ExtSourcesManager.EXTSOURCE_IDP);\n+                    try {\n+                        extSource = getPerunBl().getExtSourcesManagerBl().createExtSource(sess, extSource, null);\n+                    } catch (ExtSourceExistsException e1) {\n+                        log.warn(\"impossible or race condition\", e1);\n+                    }\n+                }\n+                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@dummy\");\n+                ues.setLoa(2);\n+                try {\n+                    getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                } catch (UserExtSourceExistsException ex) {\n+                    //this is OK\n+                }\n+\n+            }\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        } catch (AttributeNotExistsException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        validatePassword(sess, user, loginNamespace);\n+\n+    }\n+\n+    /**\n+     * Method which calls external program for password creation.\n+     *\n+     * @param sess\n+     * @param userLogin\n+     * @param loginNamespace\n+     * @param password\n+     */\n+    @Override\n+    @Deprecated\n+    public void createPassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException,\n+            PasswordCreationFailedException {\n+        log.info(\"Creating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+        // Create the password\n+        try {\n+            this.managePassword(sess, PASSWORD_CREATE, (String) userLogin, loginNamespace, password);\n+        } catch (PasswordCreationFailedRuntimeException e) {\n+            throw new PasswordCreationFailedException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password creation. User and login is already known.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param loginNamespace\n+     * @param password\n+     */\n+    @Override\n+    @Deprecated\n+    public void createPassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException,\n+            PasswordCreationFailedException, LoginNotExistsException {\n+        log.info(\"Creating password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+        // Get login.\n+        try {\n+            Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+\n+            if (attr.getValue() == null) {\n+                throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+            }\n+\n+            // Create the password\n+            try {\n+                this.managePassword(sess, PASSWORD_CREATE, (String) attr.getValue(), loginNamespace, password);\n+            } catch (PasswordCreationFailedRuntimeException e) {\n+                throw new PasswordCreationFailedException(e);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new LoginNotExistsException(e);\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password deletion.\n+     *\n+     * @param sess\n+     * @param userLogin\n+     * @param loginNamespace\n+     */\n+    @Override\n+    public void deletePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException, LoginNotExistsException,\n+            PasswordDeletionFailedException, PasswordOperationTimeoutException {\n+        log.info(\"Deleting password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+        // Delete the password\n+        try {\n+            this.managePassword(sess, PASSWORD_DELETE, (String) userLogin, loginNamespace, null);\n+        } catch (PasswordDeletionFailedRuntimeException e) {\n+            throw new PasswordDeletionFailedException(e);\n+        } catch (LoginNotExistsRuntimeException e) {\n+            throw new LoginNotExistsException(e);\n+        } catch (PasswordOperationTimeoutRuntimeException e) {\n+            throw new PasswordOperationTimeoutException(e);\n+        }\n+    }\n+\n+    /**\n+     * Method which calls external program for password change.\n+     */\n+    @Override\n+    public void changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword)\n+            throws InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+        log.info(\"Changing password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+        // Get User login in loginNamespace\n+        Attribute userLogin;\n+        try {\n+            userLogin = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+        } catch (AttributeNotExistsException e) {\n+            throw new LoginNotExistsException(e);\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+        // Check password if it was requested\n+        if (checkOldPassword) {\n+            try {\n+                this.managePassword(sess, PASSWORD_CHECK, (String) userLogin.getValue(), loginNamespace, oldPassword);\n+            } catch (PasswordDoesntMatchRuntimeException e) {\n+                throw new PasswordDoesntMatchException(e);\n+            } catch (PasswordOperationTimeoutRuntimeException e) {\n+                throw new PasswordOperationTimeoutException(e);\n+            }\n+        }\n+\n+        // Change the password\n+        try {\n+            this.managePassword(sess, PASSWORD_CHANGE, (String) userLogin.getValue(), loginNamespace, newPassword);\n+        } catch (PasswordChangeFailedRuntimeException e) {\n+            throw new PasswordChangeFailedException(e);\n+        } catch (PasswordOperationTimeoutRuntimeException e) {\n+            throw new PasswordOperationTimeoutException(e);\n+        } catch (PasswordStrengthFailedRuntimeException e) {\n+            throw new PasswordStrengthFailedException(e);\n+        }\n+\n+        //validate and set user ext sources\n+        try {\n+            this.validatePasswordAndSetExtSources(sess, user, (String) userLogin.getValue(), loginNamespace);\n+        } catch (PasswordCreationFailedException ex) {\n+            throw new PasswordChangeFailedException(ex);\n+        } catch (ExtSourceNotExistsException ex) {\n+            throw new InternalErrorException(ex);\n+        } catch (AttributeValueException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Calls external program which do the job with the password.\n+     * <p>\n+     * Return codes of the external program\n+     * If password check fails then return 1\n+     * If there is no handler for loginNamespace return 2\n+     * If setting of the new password failed return 3\n+     *\n+     * @param sess\n+     * @param operation\n+     * @param userLogin\n+     * @param loginNamespace\n+     * @param password\n+     * @throws InternalErrorException\n+     */\n+    protected void managePassword(PerunSession sess, String operation, String userLogin, String loginNamespace, String password) throws InternalErrorException {\n+\n+        // If new PWDMGR module exists, use-it\n+        PasswordManagerModule module = null;\n+\n+        try {\n+            module = getPasswordManagerModule(sess, loginNamespace);\n+        } catch (Exception ex) {\n+            // silently skip\n+        }\n+\n+        if (module != null) {\n+\n+            if (operation.equals(PASSWORD_RESERVE)) {\n+                try {\n+                    module.reservePassword(sess, userLogin, password);\n+                    return;\n+                } catch (Exception ex) {\n+                    throw new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                }\n+            }\n+            if (operation.equals(PASSWORD_RESERVE_RANDOM)) {\n+                try {\n+                    module.reserveRandomPassword(sess, userLogin);\n+                    return;\n+                } catch (Exception ex) {\n+                    throw new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                }\n+            }\n+            if (operation.equals(PASSWORD_CHECK)) {\n+                try {\n+                    module.checkPassword(sess, userLogin, password);\n+                    return;\n+                } catch (Exception ex) {\n+                    throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n+                }\n+            }\n+            if (operation.equals(PASSWORD_VALIDATE)) {\n+                module.validatePassword(sess, userLogin);\n+                return;\n+            }\n+            if (operation.equals(PASSWORD_CHANGE)) {\n+                try {\n+                    module.changePassword(sess, userLogin, password);\n+                    return;\n+                } catch (Exception ex) {\n+                    throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                }\n+            }\n+            if (operation.equals(PASSWORD_DELETE)) {\n+                try {\n+                    module.deletePassword(sess, userLogin);\n+                    return;\n+                } catch (Exception ex) {\n+                    throw new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                }\n+            }\n+\n+        }\n+\n+        // use good old way\n+\n+        // Check validity of original password\n+        ProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getPasswordManagerProgram(),\n+                operation, loginNamespace, userLogin);\n+\n+        Process process;\n+        try {\n+            process = pb.start();\n+        } catch (IOException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+        InputStream es = process.getErrorStream();\n+\n+        if (operation.equals(PASSWORD_CHANGE) || operation.equals(PASSWORD_CHECK) || operation.equals(PASSWORD_RESERVE)) {\n+            OutputStream os = process.getOutputStream();\n+            if (password == null || password.isEmpty()) {\n+                throw new EmptyPasswordRuntimeException(\"Password for \" + loginNamespace + \":\" + userLogin + \" cannot be empty.\");\n+            }\n+            // Write password to the stdin of the program\n+            PrintWriter pw = new PrintWriter(os, true);\n+            pw.write(password);\n+            pw.close();\n+        }\n+\n+        // If non-zero exit code is returned, then try to read error output\n+        try {\n+            if (process.waitFor() != 0) {\n+                if (process.exitValue() == 1) {\n+                    throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n+                } else if (process.exitValue() == 3) {\n+                    throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                } else if (process.exitValue() == 4) {\n+                    throw new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                } else if (process.exitValue() == 5) {\n+                    throw new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                } else if (process.exitValue() == 6) {\n+                    throw new LoginNotExistsRuntimeException(\"User login doesn't exists in underlying system for \" + loginNamespace + \":\" + userLogin + \".\");\n+                } else if (process.exitValue() == 11) {\n+                    throw new PasswordStrengthFailedRuntimeException(\"Password to set doesn't match expected restrictions for \" + loginNamespace + \":\" + userLogin + \".\");\n+                } else if (process.exitValue() == 12) {\n+                    throw new PasswordOperationTimeoutRuntimeException(\"Operation with password exceeded expected limit for \" + loginNamespace + \":\" + userLogin + \".\");\n+                } else {\n+                    // Some other error occured\n+                    BufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n+                    StringBuffer errorMsg = new StringBuffer();\n+                    String line;\n+                    try {\n+                        while ((line = inReader.readLine()) != null) {\n+                            errorMsg.append(line);\n+                        }\n+                    } catch (IOException e) {\n+                        throw new InternalErrorException(e);\n+                    }\n+\n+                    throw new InternalErrorException(errorMsg.toString());\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void createAlternativePassword(PerunSession sess, User user, String description, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException {\n+        try {\n+            manageAlternativePassword(sess, user, PASSWORD_CREATE, loginNamespace, null, description, password);\n+        } catch (PasswordCreationFailedRuntimeException ex) {\n+            throw new PasswordCreationFailedException(ex);\n+        } catch (LoginNotExistsRuntimeException ex) {\n+            throw new LoginNotExistsException(ex);\n+        } catch (PasswordDeletionFailedException ex) {\n+            //This probably never happend, if yes, its some error in code of manageAlternativePassword method\n+            throw new InternalErrorException(ex);\n+        }\n+    }\n+\n+    @Override\n+    public void deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException {\n+        try {\n+            manageAlternativePassword(sess, user, PASSWORD_DELETE, loginNamespace, passwordId, null, null);\n+        } catch (PasswordDeletionFailedRuntimeException ex) {\n+            throw new PasswordDeletionFailedException(ex);\n+        } catch (LoginNotExistsRuntimeException ex) {\n+            throw new LoginNotExistsException(ex);\n+        }\n+    }\n+\n+    /**\n+     * Calls external program which do the job with the alternative passwords.\n+     * <p>\n+     * Return codes of the external program\n+     * If password check fails then return 1\n+     * If there is no handler for loginNamespace return 2\n+     * If setting of the new password failed return 3\n+     *\n+     * @param sess\n+     * @param operation\n+     * @param loginNamespace\n+     * @param password\n+     * @throws InternalErrorException\n+     */\n+    protected void manageAlternativePassword(PerunSession sess, User user, String operation, String loginNamespace, String passwordId, String description, String password) throws InternalErrorException, PasswordDeletionFailedException {\n+        //if password id == null\n+        if (passwordId == null) {\n+            passwordId = Long.toString(System.currentTimeMillis());\n+        }\n+\n+        //Prepare process builder\n+        ProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getAlternativePasswordManagerProgram(), operation, loginNamespace, Integer.toString(user.getId()), passwordId);\n+\n+        //Set password in Perun to attribute\n+        if (operation.equals(PASSWORD_CREATE)) {\n+            try {\n+                Attribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n+                Map<String, String> altPassValue = new LinkedHashMap<>();\n+                //Set not null value from altPassword attribute of this user\n+                if (userAlternativePassword.getValue() != null) {\n+                    altPassValue = (LinkedHashMap<String, String>) userAlternativePassword.getValue();\n+                }\n+                //If password already exists, throw an exception\n+                if (altPassValue.containsKey(description)) {\n+                    throw new ConsistencyErrorException(\"Password with this description already exists. Description: \" + description);\n+                }\n+                //set new value to attribute\n+                altPassValue.put(description, passwordId);\n+                userAlternativePassword.setValue(altPassValue);\n+                //set new attribute with value to perun\n+                getPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n+            } catch (WrongAttributeAssignmentException | WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            } catch (AttributeNotExistsException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+        } else if (operation.equals(PASSWORD_DELETE)) {\n+            try {\n+                Attribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n+                Map<String, String> altPassValue = new LinkedHashMap<>();\n+                //Set not null value from altPassword attribute of this user\n+                if (userAlternativePassword.getValue() != null) {\n+                    altPassValue = (LinkedHashMap<String, String>) userAlternativePassword.getValue();\n+                }\n+                //If password already exists, throw an exception\n+                if (!altPassValue.containsValue(passwordId)) {\n+                    throw new PasswordDeletionFailedException(\"Password not found by ID.\");\n+                }\n+                //remove key with this value from map\n+                Set<String> keys = altPassValue.keySet();\n+                description = null;\n+                for (String key : keys) {\n+                    String valueOfKey = altPassValue.get(key);\n+                    if (valueOfKey.equals(passwordId)) {\n+                        if (description != null) {\n+                            throw new ConsistencyErrorException(\"There is more than 1 password with same ID in value for user \" + user);\n+                        }\n+                        description = key;\n+                    }\n+                }\n+                if (description == null) {\n+                    throw new InternalErrorException(\"Password not found by ID.\");\n+                }\n+                altPassValue.remove(description);\n+                //set new value for altPassword attribute for this user\n+                userAlternativePassword.setValue(altPassValue);\n+                getPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n+            } catch (WrongAttributeAssignmentException ex) {\n+                throw new InternalErrorException(ex);\n+            } catch (AttributeNotExistsException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            } catch (WrongAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            throw new InternalErrorException(\"Not supported operation \" + operation);\n+        }\n+\n+        Process process;\n+        try {\n+            process = pb.start();\n+        } catch (IOException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+        InputStream es = process.getErrorStream();\n+\n+        //Set pasword in remote system\n+        if (operation.equals(PASSWORD_CREATE)) {\n+            OutputStream os = process.getOutputStream();\n+            if (password == null || password.isEmpty()) {\n+                throw new EmptyPasswordRuntimeException(\"Alternative password for \" + loginNamespace + \" cannot be empty.\");\n+            }\n+            // Write password to the stdin of the program\n+            PrintWriter pw = new PrintWriter(os, true);\n+            pw.write(password);\n+            pw.close();\n+        }\n+\n+        // If non-zero exit code is returned, then try to read error output\n+        try {\n+            if (process.waitFor() != 0) {\n+                if (process.exitValue() == 1) {\n+                    //throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n+                    throw new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n+                } else if (process.exitValue() == 3) {\n+                    //throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+                    throw new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n+                } else if (process.exitValue() == 4) {\n+                    throw new PasswordCreationFailedRuntimeException(\"Alternative password creation failed for \" + user + \". Namespace: \" + loginNamespace + \", description: \" + description + \".\");\n+                } else if (process.exitValue() == 5) {\n+                    throw new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + user + \". Namespace: \" + loginNamespace + \", passwordId: \" + passwordId + \".\");\n+                } else if (process.exitValue() == 6) {\n+                    throw new LoginNotExistsRuntimeException(\"User doesn't exists in underlying system for namespace \" + loginNamespace + \", user: \" + user + \".\");\n+                } else if (process.exitValue() == 7) {\n+                    throw new InternalErrorException(\"Problem with creating user entry in underlying system \" + loginNamespace + \", user: \" + user + \".\");\n+                } else {\n+                    // Some other error occured\n+                    BufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n+                    StringBuffer errorMsg = new StringBuffer();\n+                    String line;\n+                    try {\n+                        while ((line = inReader.readLine()) != null) {\n+                            errorMsg.append(line);\n+                        }\n+                    } catch (IOException e) {\n+                        throw new InternalErrorException(e);\n+                    }\n+\n+                    throw new InternalErrorException(errorMsg.toString());\n+                }\n+            }\n+        } catch (InterruptedException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+\n+    @Override\n+    public List<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException {\n+\n+        // TODO - optimzization needed - at least there should be single select on RichUser object in impl !!\n+        List<RichUser> result = new ArrayList<RichUser>();\n+        AttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n+        for (User u : users) {\n+            RichUser ru = new RichUser(u, getUserExtSources(sess, u));\n+            ru.setUserAttributes(attributesManagerBl.getAttributes(sess, u, attrNames));\n+            result.add(ru);\n+        }\n+        return result;\n+\n+    }\n+\n+    @Override\n+    public RichUser convertUserToRichUserWithAttributesByNames(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n+        AttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n+\n+        RichUser richUser = new RichUser(user, getUserExtSources(sess, user));\n+        richUser.setUserAttributes(attributesManagerBl.getAttributes(sess, user, attrNames));\n+\n+        return richUser;\n+    }\n+\n+    @Override\n+    public List<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n+\n+        if (attrsName == null || attrsName.isEmpty()) {\n+            return convertRichUsersToRichUsersWithAttributes(sess, findRichUsers(sess, searchString));\n+        } else {\n+            return convertUsersToRichUsersWithAttributesByNames(sess, findUsers(sess, searchString), attrsName);\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n+\n+        if (attrsName == null || attrsName.isEmpty()) {\n+            return convertRichUsersToRichUsersWithAttributes(sess, findRichUsersByExactMatch(sess, searchString));\n+        } else {\n+            return convertUsersToRichUsersWithAttributesByNames(sess, findUsersByExactMatch(sess, searchString), attrsName);\n+        }\n+\n+    }\n+\n+    @Override\n+    public List<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException {\n+\n+        if (attrsName == null || attrsName.isEmpty()) {\n+            return convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutSpecificVo(sess, vo, searchString)));\n+        } else {\n+            return convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutSpecificVo(sess, vo, searchString), attrsName);\n+        }\n+    }\n+\n+    @Override\n+    public List<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException {\n+\n+        if (attrsName == null || attrsName.isEmpty()) {\n+            return convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutVoAssigned(sess)));\n+        } else {\n+            return convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutVoAssigned(sess), attrsName);\n+        }\n+    }\n+\n+    @Override\n+    public List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n+\n+        List<User> users = getUsers(sess);\n+        // optionally exclude specific users\n+        if (!includedSpecificUsers) {\n+            Iterator<User> it = users.iterator();\n+            while (it.hasNext()) {\n+                User u = it.next();\n+                if (u.isSpecificUser()) {\n+                    it.remove();\n+                }\n+            }\n+        }\n+\n+        if (attrsName == null || attrsName.isEmpty()) {\n+            return convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, users));\n+        } else {\n+            return convertUsersToRichUsersWithAttributesByNames(sess, users, attrsName);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException {\n+\n+        // should always pass, since isLoginAvailable() in ENTRY does the same\n+        try {\n+\n+            List<String> names = new ArrayList<String>();\n+            names.add(AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+\n+            // will always get attribute (empty, if not set)\n+            List<Attribute> checked = getPerunBl().getAttributesManagerBl().getAttributes(sess, user, names);\n+            if (checked.size() != 1) {\n+                throw new InternalErrorException(\"User should have only one login (attribute) in namespace\");\n+            }\n+            // if user already has login\n+            if (checked.get(0).getValue() != null) {\n+                throw new InternalErrorException(\"Can't set new login. User already has login in namespace: \" + loginNamespace);\n+            }\n+\n+            checked.get(0).setValue(login);\n+\n+            getPerunBl().getAttributesManagerBl().setAttributes(sess, user, checked);\n+\n+        } catch (WrongAttributeAssignmentException e) {\n+            throw new InternalErrorException(e);\n+        } catch (WrongReferenceAttributeValueException e) {\n+            throw new InternalErrorException(e);\n+        } catch (WrongAttributeValueException e) {\n+            throw new InternalErrorException(e);\n+        }\n+\n+    }\n+\n+    @Override\n+    public void requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException {\n+\n+        int changeId = getUsersManagerImpl().requestPreferredEmailChange(sess, user, email);\n+        Utils.sendValidationEmail(user, url, email, changeId);\n+\n+    }\n+\n+    @Override\n+    public String validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, AttributeNotExistsException {\n+\n+        String email = getUsersManagerImpl().getPreferredEmailChangeRequest(sess, user, i, m);\n+\n+        AttributeDefinition def = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+        Attribute a = new Attribute(def);\n+        a.setValue(email);\n+\n+        // store attribute\n+        getPerunBl().getAttributesManagerBl().setAttribute(sess, user, a);\n+\n+        getUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n+\n+        return email;\n+\n+    }\n+\n+    @Override\n+    public List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+\n+        List<String> list = getUsersManagerImpl().getPendingPreferredEmailChanges(sess, user);\n+\n+        Attribute a = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+        if (a != null && a.getValue() != null) {\n+            Iterator<String> it = list.iterator();\n+            while (it.hasNext()) {\n+                String value = it.next();\n+                if (value.equals(BeansUtils.attributeValueToString(a))) {\n+                    // remove pending change requests if they are already set in attribute\n+                    it.remove();\n+                }\n+            }\n+        }\n+\n+        return list;\n+\n+    }\n+\n+    @Override\n+    public User convertUserEmptyStringsInObjectAttributesIntoNull(User user) {\n+        //if user is null, return it back without change\n+        if (user == null) {\n+            return user;\n+        }\n+\n+        //convert all empty strings to null\n+        if (user.getFirstName() != null && user.getFirstName().isEmpty()) {\n+            user.setFirstName(null);\n+        }\n+        if (user.getMiddleName() != null && user.getMiddleName().isEmpty()) {\n+            user.setMiddleName(null);\n+        }\n+        if (user.getLastName() != null && user.getLastName().isEmpty()) {\n+            user.setLastName(null);\n+        }\n+\n+        if (user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) {\n+            user.setTitleBefore(null);\n+        }\n+        if (user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) {\n+            user.setTitleAfter(null);\n+        }\n+\n+        return user;\n+    }\n+\n+    @Override\n+    public void changeNonAuthzPassword(PerunSession sess, User user, String m, String password, String lang) throws InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+\n+        String requestId = Utils.cipherInput(m, true);\n+        String namespace = getUsersManagerImpl().loadPasswordResetRequest(user, Integer.parseInt(requestId));\n+\n+        if (namespace.isEmpty()) {\n+            throw new InternalErrorException(\"Password reset request is not valid anymore or doesn't existed at all for User: \" + user);\n+        }\n+\n+        List<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n+        boolean found = false;\n+        for (Attribute a : logins) {\n+            if (a.getFriendlyNameParameter().equals(namespace)) {\n+                found = true;\n+            }\n+        }\n+        if (!found) {\n+            throw new InternalErrorException(user.toString() + \" doesn't have login in namespace: \" + namespace);\n+        }\n+\n+        // reset password without checking old\n+        try {\n+            changePassword(sess, user, namespace, \"\", password, false);\n+        } catch (PasswordDoesntMatchException ex) {\n+            // shouldn't happen\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        // was changed - send notification to all member's emails\n+        Set<String> emails = new HashSet<String>();\n+\n+        try {\n+            Attribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+            if (a != null && a.getValue() != null) {\n+                emails.add((String) a.getValue());\n+            }\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        } catch (AttributeNotExistsException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member member : members) {\n+\n+            try {\n+                Attribute a = perunBl.getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_DEF + \":mail\");\n+                if (a != null && a.getValue() != null) {\n+                    emails.add((String) a.getValue());\n+                }\n+            } catch (WrongAttributeAssignmentException ex) {\n+                throw new InternalErrorException(ex);\n+            } catch (AttributeNotExistsException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+\n+        }\n+\n+        // get template\n+\n+        String subject;\n+        try {\n+            Attribute subjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang,\n+                    AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n+            subject = (String) subjectTemplateAttribute.getValue();\n+            if (subject == null) {\n+                subjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\",\n+                        AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n+                subject = (String) subjectTemplateAttribute.getValue();\n+            }\n+        } catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        String message;\n+        try {\n+            Attribute messageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang,\n+                    AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n+            message = (String) messageTemplateAttribute.getValue();\n+            if (message == null) {\n+                messageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\",\n+                        AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n+                message = (String) messageTemplateAttribute.getValue();\n+            }\n+        } catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        for (String email : emails) {\n+            Utils.sendPasswordResetConfirmationEmail(user, email, namespace, subject, message);\n+        }\n+\n+    }\n+\n+    @Override\n+    public int getUsersCount(PerunSession sess) throws InternalErrorException {\n+        return getUsersManagerImpl().getUsersCount(sess);\n+    }\n+\n+    @Override\n+    public Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n+        return getUsersManagerImpl().generateAccount(session, namespace, parameters);\n+    }\n+\n+    @Override\n+    public List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n+        if (!sponsoredMember.isSponsored()) {\n+            throw new IllegalArgumentException(\"member \" + sponsoredMember.getId() + \" is not marked as sponsored\");\n+        }\n+        return getUsersManagerImpl().getSponsors(sess, sponsoredMember);\n+    }\n+\n+    private PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n+        return getUsersManagerImpl().getPasswordManagerModule(session, namespace);\n+    }\n+\n+    @Override\n+    public void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+        for (UserExtSource userExtSource : getUserExtSources(sess, user)) {\n+            try {\n+                removeUserExtSource(sess, user, userExtSource);\n+            } catch (UserExtSourceAlreadyRemovedException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws AttributeNotExistsException, InternalErrorException {\n+        AttributeDefinition adef = sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+        if ((!adef.getType().equals(\"java.lang.String\")) || (!adef.getNamespace().equals(AttributesManager.NS_UES_ATTR_DEF))) {\n+            throw new InternalErrorException(\"only ues attributes of type String can be used in findUsersWithExtSourceAttributeValueEnding()\");\n+        }\n+        return usersManagerImpl.findUsersWithExtSourceAttributeValueEnding(sess, attributeName, valueEnd, excludeValueEnds);\n+    }\n+\n+    @Override\n+    public String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n+\n+        char[] possibleCharacters =\n+                \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n+                        .toCharArray();\n+        int count = 12;\n+\n+        // FIXME - We will replace following logic once each login-namespace will implement\n+        // FIXME   pwd-manager module and have server side checks\n+        if (Objects.equals(loginNamespace, \"vsup\")) {\n+            count = 14;\n+            // removed O, l, specific only: +, -, *, /, .\n+            possibleCharacters = \"ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789+-*/.\".toCharArray();\n+        }\n+\n+        String newRandomPassword = RandomStringUtils.random(count, 0, possibleCharacters.length - 1, false,\n+                false, possibleCharacters, new SecureRandom());\n+\n+        try {\n+            changePassword(session, user, loginNamespace, null, newRandomPassword, false);\n+        } catch (PasswordDoesntMatchException | PasswordStrengthFailedException e) {\n+            // should not happen when we are not using the old password\n+            throw new InternalErrorException(e);\n+        }\n+\n+        String template = getPasswordResetTemplate(session, loginNamespace);\n+\n+        String userLogin;\n+        try {\n+            Attribute userLoginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(session, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+            userLogin = (String) userLoginAttribute.getValue();\n+        } catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n+            // should not happen since the changePassword method passed\n+            throw new InternalErrorException(e);\n+        }\n+\n+        return template\n+                .replace(\"{password}\", StringEscapeUtils.escapeHtml4(newRandomPassword))\n+                .replace(\"{login}\", StringEscapeUtils.escapeHtml4(userLogin));\n+    }\n+\n+    /**\n+     * Returns template for password reset.\n+     * <p>\n+     * It finds the template in entityless attribute randomPwdResetTemplate for given namespace.\n+     * If that fails, it falls back to default template.\n+     *\n+     * @param session        session\n+     * @param loginNamespace login namespace\n+     * @return String representing HTML template for password reset\n+     */\n+    private String getPasswordResetTemplate(PerunSession session, String loginNamespace) {\n+        String template =\n+                \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\" +\n+                        \"<head>\\n\" +\n+                        \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\"></meta>\\n\" +\n+                        \"</head>\" +\n+                        \"<body><div style=\\\"padding: 25px;color: black;text-align: center;\\\">\" +\n+                        \"<h1>Password reset</h1>\" +\n+                        \"<p>Password for user {login} has been reset by the administrator.<br />\" +\n+                        \"The new password is <br />\" +\n+                        \"<h2><b>{password}</b></h2>\" +\n+                        \"</p></div>\" +\n+                        \"</body>\" +\n+                        \"</html>\";\n+        try {\n+            Attribute templateAttribute = perunBl.getAttributesManagerBl().getAttribute(session, loginNamespace,\n+                    AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":randomPwdResetTemplate\");\n+            if (templateAttribute.getValue() != null) {\n+                template = (String) templateAttribute.getValue();\n+            }\n+        } catch (AttributeNotExistsException | WrongAttributeAssignmentException | InternalErrorException e) {\n+            log.warn(\"Failed to get template attribute for password reset in namespace {}, using default. Exception \" +\n+                    \"class: {}, Exception message: {}\", loginNamespace, e.getClass().getName(), e.getMessage());\n+        }\n+\n+        return template;\n+    }\n \n }\n",
            "diff_size": 2358
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/306/UsersManagerBlImpl.java\nindex 6c89dec0b85..e6c394d2e68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/306/UsersManagerBlImpl.java\n@@ -8,7 +8,6 @@ import java.io.OutputStream;\n import java.io.PrintWriter;\n import java.security.SecureRandom;\n import java.util.*;\n-\n import cz.metacentrum.perun.audit.events.UserManagerEvents.AllUserExtSourcesDeletedForUser;\n import cz.metacentrum.perun.audit.events.UserManagerEvents.OwnershipDisabledForSpecificUser;\n import cz.metacentrum.perun.audit.events.UserManagerEvents.OwnershipEnabledForSpecificUser;\n@@ -22,7 +21,6 @@ import cz.metacentrum.perun.audit.events.UserManagerEvents.UserExtSourceUpdated;\n import cz.metacentrum.perun.audit.events.UserManagerEvents.UserUpdated;\n import cz.metacentrum.perun.core.api.*;\n import cz.metacentrum.perun.core.api.exceptions.*;\n-\n import cz.metacentrum.perun.core.api.exceptions.IllegalArgumentException;\n import cz.metacentrum.perun.core.api.exceptions.rt.*;\n import cz.metacentrum.perun.core.bl.AttributesManagerBl;\n@@ -31,7 +29,6 @@ import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.text.StringEscapeUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import cz.metacentrum.perun.core.bl.PerunBl;\n import cz.metacentrum.perun.core.bl.UsersManagerBl;\n import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n@@ -46,2257 +43,2188 @@ import cz.metacentrum.perun.core.implApi.modules.attributes.UserVirtualAttribute\n  * @author Slavek Licehammer glory@ics.muni.cz\n  * @author Sona Mastrakova\n  */\n-public class UsersManagerBlImpl implements UsersManagerBl {\n-\n-\tprivate final static Logger log = LoggerFactory.getLogger(UsersManagerBlImpl.class);\n-\n-\tprivate UsersManagerImplApi usersManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\tprivate static final String A_USER_DEF_ALT_PASSWORD_NAMESPACE = AttributesManager.NS_USER_ATTR_DEF + \":altPasswords:\";\n-\n-\tprivate static final String PASSWORD_VALIDATE = \"validate\";\n-\tprivate static final String PASSWORD_CREATE = \"create\";\n-\tprivate static final String PASSWORD_RESERVE = \"reserve\";\n-\tprivate static final String PASSWORD_RESERVE_RANDOM = \"reserve_random\";\n-\tprivate static final String PASSWORD_CHANGE = \"change\";\n-\tprivate static final String PASSWORD_CHECK = \"check\";\n-\tprivate static final String PASSWORD_DELETE = \"delete\";\n-\n-\n-\t/**\n-\t * Constructor.\n-\t *\n-\t * @param usersManagerImpl connection pool\n-\t */\n-\tpublic UsersManagerBlImpl(UsersManagerImplApi usersManagerImpl) {\n-\t\tthis.usersManagerImpl = usersManagerImpl;\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserByUserExtSource(sess, userExtSource);\n-\t}\n-\n-\t// FIXME do this in IMPL\n-\t@Override\n-\tpublic User getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException {\n-\t\tfor (UserExtSource ues: userExtSources) {\n-\t\t\ttry {\n-\t\t\t\treturn getUsersManagerImpl().getUserByUserExtSource(sess, ues);\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\t// Ignore\n-\t\t\t}\n-\t\t}\n-\t\tthrow new UserNotExistsException(\"User with userExtSources \" + userExtSources + \" doesn't exists.\");\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n-\t\tif ((extSourceType == null) || (login == null)) return new ArrayList<User>();\n-\n-\t\treturn getUsersManagerImpl().getUsersByExtSourceTypeAndLogin(perunSession, extSourceType, login);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getSpecificUsersByUser(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\treturn getUsersManagerImpl().getUsersBySpecificUser(sess, specificUser);\n-\t}\n-\n-\t@Override\n-\tpublic void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n-\t\tthis.removeSpecificUserOwner(sess, user, specificUser, false);\n-\t}\n-\n-\tpublic void removeSpecificUserOwner(PerunSession sess, User user, User specificUser, boolean forceDelete) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\tif (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n-\n-\t\tList<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n-\t\tif(!specificUserOwners.remove(user)) throw new RelationNotExistsException(\"User is not the active owner of the specificUser.\");\n-\n-\t\tif(!getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n-\t\t\tthrow new RelationNotExistsException(\"User has no relationship to specificUser.\");\n-\t\t}\n-\n-\t\ttry {\n-\t\t\t// refresh authz for sponsors\n-\t\t\tif(specificUser.isSponsoredUser()) AuthzResolverBlImpl.unsetRole(sess, user, specificUser, Role.SPONSOR);\n-\t\t\t// refresh authz for service user owners\n-\t\t\tif(specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n-\t\t\t\tif(user.getId() == sess.getPerunPrincipal().getUserId()) {\n-\t\t\t\t\tAuthzResolverBlImpl.refreshAuthz(sess);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (UserNotAdminException ex) {\n-\t\t\tthrow new InternalErrorException(\"Can't remove role of sponsor for user \" + user + \" and sponsored user \" + specificUser);\n-\t\t}\n-\n-\t\tif(forceDelete) {\n-\t\t\t//getPerunBl().getAuditer().log(sess, \"{} ownership was removed for specificUser {}.\", user, specificUser);\n-\t\t\tgetPerunBl().getAuditer().log(sess, new OwnershipRemovedForSpecificUser(user, specificUser));\n-\t\t\tgetUsersManagerImpl().removeSpecificUserOwner(sess, user, specificUser);\n-\t\t} else {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new OwnershipDisabledForSpecificUser(user, specificUser));\n-\t\t\tgetUsersManagerImpl().disableOwnership(sess, user, specificUser);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\tif (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n-\t\tList<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n-\t\tif(specificUserOwners.remove(user)) throw new RelationExistsException(\"User is already the active owner of specific user.\");\n-\n-\t\tif(getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n-\t\t\tgetUsersManagerImpl().enableOwnership(sess, user, specificUser);\n-\t\t\tgetPerunBl().getAuditer().log(sess, new OwnershipEnabledForSpecificUser(user, specificUser));\n-\t\t} else {\n-\t\t\tgetPerunBl().getAuditer().log(sess, new UserAddedToOwnersOfSpecificUser(user, specificUser));\n-\t\t\tgetUsersManagerImpl().addSpecificUserOwner(sess, user, specificUser);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\t// refresh authz for sponsors\n-\t\t\tif(specificUser.isSponsoredUser()) AuthzResolverBlImpl.setRole(sess, user, specificUser, Role.SPONSOR);\n-\t\t\t// refresh authz for service user owners\n-\t\t\tif(specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n-\t\t\t\tif(user.getId() == sess.getPerunPrincipal().getUserId()) {\n-\t\t\t\t\tAuthzResolverBlImpl.refreshAuthz(sess);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (AlreadyAdminException ex) {\n-\t\t\tthrow new InternalErrorException(\"User \" + user + \" is already sponsor of sponsored user \" + specificUser);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\tif(specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n-\t\treturn getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getSpecificUsers(sess);\n-\t}\n-\n-\t@Override\n-\tpublic User setSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType, User owner) throws InternalErrorException, RelationExistsException {\n-\t\tif(specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n-\t\t\tthrow new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n-\t\t}\n-\n-\t\tif(specificUser.getMajorSpecificType().equals(specificUserType)) {\n-\t\t\tthrow new InternalErrorException(\"Can't set \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he has already set this flag.\");\n-\t\t}\n-\n-\t\t//Set specific type for user\n-\t\tspecificUser = getUsersManagerImpl().setSpecificUserType(sess, specificUser, specificUserType);\n-\n-\t\t//add owner for this new specific user\n-\t\tthis.addSpecificUserOwner(sess, owner, specificUser);\n-\n-\t\treturn specificUser;\n-\t}\n-\n-\t@Override\n-\tpublic User unsetSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType) throws InternalErrorException {\n-\t\tif(!specificUser.getMajorSpecificType().equals(specificUserType)) {\n-\t\t\tthrow new InternalErrorException(\"Can't unset \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he hasn't this flag yet.\");\n-\t\t}\n-\n-\t\t//remove all owners for this new specific user\n-\t\tList<User> owners = getPerunBl().getUsersManagerBl().getUsersBySpecificUser(sess, specificUser);\n-\t\tfor(User owner: owners) {\n-\t\t\ttry {\n-\t\t\t\tthis.removeSpecificUserOwner(sess, owner, specificUser, true);\n-\t\t\t} catch(SpecificUserMustHaveOwnerException | RelationNotExistsException | SpecificUserOwnerAlreadyRemovedException ex) {\n-\t\t\t\tthrow new InternalErrorException(\"Can't remove ownership of user \" + specificUser, ex);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Unset specific type for user\n-\t\tspecificUser = getUsersManagerImpl().unsetSpecificUserType(sess, specificUser, specificUserType);\n-\n-\n-\t\treturn specificUser;\n-\t}\n-\n-\t@Override\n-\tpublic User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserById(sess, id);\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n-\t\tif (member.getUserId() != 0) {\n-\t\t\ttry {\n-\t\t\t\t// TODO If the member object will contain also User object, here can be returned directly.\n-\t\t\t\treturn getUsersManagerImpl().getUserById(sess, member.getUserId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member \" + member + \"has non-existin user.\", e);\n-\t\t\t}\n-\t\t} else {\n-\t\t\treturn getUsersManagerImpl().getUserByMember(sess, member);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic User getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException {\n-\t\tExtSource extSource = perunBl.getExtSourcesManagerBl().getExtSourceByName(sess, extSourceName);\n-\t\tUserExtSource userExtSource = this.getUserExtSourceByExtLogin(sess, extSource, extLogin);\n-\n-\t\treturn this.getUserByUserExtSource(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsers(PerunSession sess) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUsers(sess);\n-\t}\n-\n-\t@Override\n-\tpublic RichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.add(user);\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\treturn richUsers.get(0);\n-\t}\n-\n-\t@Override\n-\tpublic RichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.add(user);\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\tList<RichUser> richUsersWithAttributes =  this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n-\t\treturn richUsersWithAttributes.get(0);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException {\n-\t\tList<RichUser> richUsers = new ArrayList<RichUser>();\n-\n-\t\tfor (User user: users) {\n-\t\t\tList<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n-\t\t\tRichUser richUser = new RichUser(user, userExtSources);\n-\t\t\trichUsers.add(richUser);\n-\t\t}\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers)  throws InternalErrorException, UserNotExistsException {\n-\t\tfor (RichUser richUser: richUsers) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserById(sess, richUser.getId());\n-\t\t\tList<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, user);\n-\n-\t\t\trichUser.setUserAttributes(userAttributes);\n-\t\t}\n-\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.addAll(this.getUsers(sess));\n-\t\tif(!includedSpecificUsers) users.removeAll(this.getSpecificUsers(sess));\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = new ArrayList<User>();\n-\t\tusers.addAll(this.getUsers(sess));\n-\t\tif(!includedSpecificUsers) users.removeAll(this.getSpecificUsers(sess));\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\tList<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n-\t\treturn richUsersWithAttributes;\n-\t}\n-\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n-\t\tList<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n-\t\tList<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n-\t\treturn richUsersWithAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef)  throws InternalErrorException {\n-\t\tList<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n-\n-\t\tfor(AttributeDefinition attrd: attrsDef) {\n-\t\t\tif(attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) usersAttributesDef.add(attrd);\n-\t\t\t//If not, skip this attribute, it is not user Attribute\n-\t\t}\n-\n-\t\tfor (RichUser richUser: richUsers) {\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<String> userAttrNames = new ArrayList<String>();\n-\t\t\tfor(AttributeDefinition ad: usersAttributesDef) {\n-\t\t\t\tuserAttrNames.add(ad.getName());\n-\t\t\t}\n-\t\t\tuserAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richUser, userAttrNames));\n-\n-\t\t\trichUser.setUserAttributes(userAttributes);\n-\t\t}\n-\n-\t\treturn richUsers;\n-\t}\n-\n-\t@Override\n-\tpublic User createUser(PerunSession sess, User user) throws InternalErrorException {\n-\n-\t\t// trim input\n-\t\tif(user.getFirstName() != null) user.setFirstName(user.getFirstName().trim());\n-\t\tif(user.getLastName() != null) user.setLastName(user.getLastName().trim());\n-\t\tif(user.getMiddleName() != null) user.setMiddleName(user.getMiddleName().trim());\n-\t\tif(user.getTitleBefore() != null) user.setTitleBefore(user.getTitleBefore().trim());\n-\t\tif(user.getTitleAfter() != null) user.setTitleAfter(user.getTitleAfter().trim());\n-\n-\t\t//Convert empty strings to null\n-\t\tif(user.getFirstName() != null && user.getFirstName().isEmpty()) user.setFirstName(null);\n-\t\tif(user.getLastName() != null && user.getLastName().isEmpty()) user.setLastName(null);\n-\t\tif(user.getMiddleName() != null && user.getMiddleName().isEmpty()) user.setMiddleName(null);\n-\t\tif(user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) user.setTitleBefore(null);\n-\t\tif(user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) user.setTitleAfter(null);\n-\n-\t\tuser = getUsersManagerImpl().createUser(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserCreated(user));\n-\n-\t\t// Add default userExtSource\n-\t\tExtSource es;\n-\t\ttry {\n-\t\t\tes = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, ExtSourcesManager.EXTSOURCE_NAME_PERUN);\n-\t\t} catch (ExtSourceNotExistsException e1) {\n-\t\t\tthrow new ConsistencyErrorException(\"Default extSource PERUN must exists! It is created in ExtSourcesManagerImpl.init function.\",e1);\n-\t\t}\n-\t\tUserExtSource ues = new UserExtSource(es, 0, String.valueOf(user.getId()));\n-\t\ttry {\n-\t\t\tthis.addUserExtSource(sess, user, ues);\n-\t\t} catch (UserExtSourceExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t}\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUser(PerunSession sess, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n-\t\tthis.deleteUser(sess, user, false);\n-\t}\n-\n-\t@Override\n-\tpublic void deleteUser(PerunSession sess, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\n-\t\tif (members != null && (members.size() > 0)) {\n-\t\t\tif (forceDelete) {\n-\t\t\t\tfor (Member member: members) {\n-\t\t\t\t\tgetPerunBl().getMembersManagerBl().deleteMember(sess, member);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RelationExistsException(\"Members exist\");\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Remove all information about user on facilities (facilities contacts)\n-\t\tList<ContactGroup> userContactGroups = getPerunBl().getFacilitiesManagerBl().getFacilityContactGroups(sess, user);\n-\t\tif(!userContactGroups.isEmpty()) {\n-\t\t\tif(forceDelete) {\n-\t\t\t\tgetPerunBl().getFacilitiesManagerBl().removeAllUserContacts(sess, user);\n-\t\t\t} else {\n-\t\t\t\tthrow new RelationExistsException(\"User has still some facilities contacts: \" + userContactGroups);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && forceDelete) {\n-\t\t\tgetPerunBl().getSecurityTeamsManagerBl().removeUserFromAllBlacklists(sess, user);\n-\t\t} else if (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && !forceDelete) {\n-\t\t\tthrow new RelationExistsException(\"User is blacklisted by some security team. Deletion would cause loss of this information.\");\n-\t\t}\n-\n-\t\t// First delete all associated external sources to the user\n-\t\tremoveAllUserExtSources(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, new AllUserExtSourcesDeletedForUser(user));\n-\n-\t\t// delete all authorships of users publications\n-\t\tgetUsersManagerImpl().removeAllAuthorships(sess, user);\n-\n-\t\t// delete all mailchange request related to user\n-\t\tgetUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n-\n-\t\t// delete all pwdreset request related to user\n-\t\tgetUsersManagerImpl().removeAllPasswordResetRequests(sess, user);\n-\n-\t\t// get all reserved logins of user\n-\t\tList<Pair<String,String>> logins = getUsersManagerImpl().getUsersReservedLogins(user);\n-\n-\t\t// delete them from KDC\n-\t\tfor (Pair<String,String> login : logins) {\n-\t\t\ttry {\n-\t\t\t\t// !! left = namespace / right = login\n-\t\t\t\tthis.deletePassword(sess, login.getRight(), login.getLeft());\n-\t\t\t} catch (LoginNotExistsException e) {\n-\t\t\t\t// OK - User hasn't assigned any password with this login\n-\t\t\t} catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tlog.error(\"Error during deletion of an account at {} for user {} with login {}.\", new Object[]{login.getLeft(), user, login.getRight()});\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RelationExistsException(\"Error during deletion of an account at \" + login.getLeft() +\n-\t\t\t\t\t\t\t\" for user \" + user + \" with login \" + login.getRight() + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// delete them from DB\n-\t\tgetUsersManagerImpl().deleteUsersReservedLogins(user);\n-\n-\t\t// all users applications and submitted data are deleted on cascade when \"deleteUser()\"\n-\n-\t\t// Remove all possible passwords associated with logins (stored in attributes)\n-\t\tfor (Attribute loginAttribute: getPerunBl().getAttributesManagerBl().getLogins(sess, user)) {\n-\t\t\ttry {\n-\t\t\t\tthis.deletePassword(sess, (String) loginAttribute.getValue(), loginAttribute.getFriendlyNameParameter());\n-\t\t\t} catch (LoginNotExistsException e) {\n-\t\t\t\t// OK - User hasn't assigned any password with this login\n-\t\t\t} catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n-\t\t\t\tif (forceDelete) {\n-\t\t\t\t\tlog.error(\"Error during deletion of the account at {} for user {} with login {}.\", new Object[]{loginAttribute.getFriendlyNameParameter(), user, (String) loginAttribute.getValue()});\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new RelationExistsException(\"Error during deletion of the account at \" + loginAttribute.getFriendlyNameParameter() +\n-\t\t\t\t\t\t\t\" for user \" + user + \" with login \" + (String) loginAttribute.getValue() + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\n-\t\t// Delete assigned attributes\n-\t\t// Users one\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, user);\n-\t\t\t// User-Facilities one\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllUserFacilityAttributes(sess, user);\n-\t\t} catch(WrongAttributeValueException ex) {\n-\t\t\t//All members are deleted => there are no required attribute => all atributes can be removed\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t} catch(WrongReferenceAttributeValueException ex) {\n-\t\t\t//All members are deleted => there are no required attribute => all atributes can be removed\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\t//Remove user authz\n-\t\tAuthzResolverBlImpl.removeAllUserAuthz(sess, user);\n-\t\t//delete even inactive links\n-\t\tusersManagerImpl.deleteSponsorLinks(sess, user);\n-\n-\t\t//Remove all users bans\n-\t\tList<BanOnFacility> bansOnFacility = getPerunBl().getFacilitiesManagerBl().getBansForUser(sess, user.getId());\n-\t\tfor(BanOnFacility banOnFacility : bansOnFacility) {\n-\t\t\ttry {\n-\t\t\t\tgetPerunBl().getFacilitiesManagerBl().removeBan(sess, banOnFacility.getId());\n-\t\t\t} catch (BanNotExistsException ex) {\n-\t\t\t\t//it is ok, we just want to remove it anyway\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Remove all sponsored user authz of his owners\n-\t\tif(user.isSponsoredUser()) AuthzResolverBlImpl.removeAllSponsoredUserAuthz(sess, user);\n-\t\t// Finally delete the user\n-\t\tgetUsersManagerImpl().deleteUser(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserDeleted(user));\n-\t}\n-\n-\t@Override\n-\tpublic User updateUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\t//Convert user to version with no empty strings in object attributes (null instead)\n-\t\tuser = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n-\n-\t\tUser beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n-\t\tUser afterUpdatingUser = getUsersManagerImpl().updateUser(sess, user);\n-\n-\t\t//Log only when something is changed\n-\t\tif(!beforeUpdatingUser.equals(afterUpdatingUser))\n-\t\t\tgetPerunBl().getAuditer().log(sess, new UserUpdated(user));\n-\t\treturn afterUpdatingUser;\n-\t}\n-\n-\t@Override\n-\tpublic User updateNameTitles(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\t//Convert user to version with no empty strings in object attributes (null instead)\n-\t\tuser = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n-\n-\t\tUser beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n-\t\tUser afterUpdatingUser = getUsersManagerImpl().updateNameTitles(sess, user);\n-\n-\t\t//Log only when something is changed\n-\t\t// must audit like update user since it changes same object\n-\t\tif(!beforeUpdatingUser.equals(afterUpdatingUser))\n-\t\t\tgetPerunBl().getAuditer().log(sess, new UserUpdated(user));\n-\t\treturn afterUpdatingUser;\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n-\t\tgetPerunBl().getAuditer().log(sess, new UserExtSourceUpdated(userExtSource));\n-\t\treturn getUsersManagerImpl().updateUserExtSource(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\tgetUsersManagerImpl().updateUserExtSourceLastAccess(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUserExtSources(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserExtSourceById(sess, id);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getAllUserExtSourcesByTypeAndLogin(sess, extType, extLogin);\n-\t}\n-\n-\t@Override\n-\tpublic List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getActiveUserExtSources(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n-\t\t// Check if the userExtSource already exists\n-\t\tif(usersManagerImpl.userExtSourceExists(sess,userExtSource)) {\n-\t\t\tthrow new UserExtSourceExistsException(\"UserExtSource \" + userExtSource + \" already exists.\");\n-\t\t}\n-\n-\t\t// Check if userExtsource is type of IDP (special testing behavior)\n-\t\tif (userExtSource.getExtSource().getType().equals(ExtSourcesManager.EXTSOURCE_IDP)) {\n-\t\t\t// If extSource of this userExtSource is type of IDP, test uniqueness of login in this extSource type for all users\n-\t\t\tString login = userExtSource.getLogin();\n-\t\t\tList<UserExtSource> userExtSources = getAllUserExtSourcesByTypeAndLogin(sess, ExtSourcesManager.EXTSOURCE_IDP, login);\n-\t\t\tif(userExtSources.size() == 1) throw new InternalErrorException(\"ExtLogin: \" + login + \" is already in used for extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n-\t\t\telse if(userExtSources.size() > 1) throw new ConsistencyErrorException(\"There are \" + userExtSources.size() + \"   extLogins: \" + login + \" for  extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n-\t\t}\n-\n-\t\tuserExtSource = getUsersManagerImpl().addUserExtSource(sess, user, userExtSource);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserExtSourceAddedToUser(userExtSource, user));\n-\t\treturn userExtSource;\n-\t}\n-\n-\t@Override\n-\tpublic void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n-\t\t//FIXME zkontrolovat zda na userExtSource neni navazan nejaky member\n-\t\t//First remove all user extSource attributes before removing userExtSource\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().removeAllAttributes(sess, userExtSource);\n-\t\t} catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(\"Can't remove userExtSource because there is problem with removing all it's attributes.\", ex);\n-\t\t}\n-\t\tgetUsersManagerImpl().removeUserExtSource(sess, user, userExtSource);\n-\t\tgetPerunBl().getAuditer().log(sess, new UserExtSourceRemovedFromUser(userExtSource, user));\n-\t}\n-\n-\t@Override\n-\tpublic void moveUserExtSource(PerunSession sess, User sourceUser, User targetUser, UserExtSource userExtSource) throws InternalErrorException {\n-\t\tList<Attribute> userExtSourceAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, userExtSource);\n-\t\tIterator<Attribute> iterator = userExtSourceAttributes.iterator();\n-\t\t//remove all virtual attributes (we don't need to take care about them)\n-\t\twhile(iterator.hasNext()) {\n-\t\t\tAttribute attribute = iterator.next();\n-\t\t\tif(getPerunBl().getAttributesManagerBl().isVirtAttribute(sess, attribute)) iterator.remove();\n-\t\t}\n-\n-\t\t//remove userExtSource\n-\t\ttry {\n-\t\t\tthis.removeUserExtSource(sess, sourceUser, userExtSource);\n-\t\t} catch (UserExtSourceAlreadyRemovedException ex) {\n-\t\t\t//this is little weird, will be better to report exception\n-\t\t\tthrow new InternalErrorException(\"UserExtSource was unexpectedly removed while moving \" + userExtSource +\n-\t\t\t\t\t\" from \" + sourceUser + \" to \" + targetUser);\n-\t\t}\n-\n-\t\t//change userId for userExtSource\n-\t\tuserExtSource.setUserId(targetUser.getId());\n-\t\t//add userExtSource to the targetUser\n-\t\ttry {\n-\t\t\tuserExtSource = this.addUserExtSource(sess, targetUser, userExtSource);\n-\t\t} catch (UserExtSourceExistsException ex) {\n-\t\t\t//someone moved this UserExtSource before us\n-\t\t\tthrow new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser +\n-\t\t\t\t\t\" failed because someone already moved this UserExtSource.\", ex);\n-\t\t}\n-\n-\t\t//set all attributes back to this UserExtSource when it is already assigned to the targetUser\n-\t\ttry {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttributes(sess, userExtSource, userExtSourceAttributes);\n-\t\t} catch (WrongAttributeAssignmentException | WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser +\n-\t\t\t\t\t\" failed because of problem with setting removed attributes back to the UserExtSource.\", ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\treturn getUsersManagerImpl().getUserExtSourceByExtLogin(sess, source, extLogin);\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getVosWhereUserIsAdmin(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, vo, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getVosWhereUserIsMember(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getUsersWithoutVoAssigned(sess);\n-\t\treturn this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException  {\n-\t\treturn usersManagerImpl.getUsersWithoutVoAssigned(sess);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n-\t\tList<User> allSearchingUsers = new ArrayList<User>();\n-\t\tList<User> allVoUsers = new ArrayList<User>();\n-\t\tallSearchingUsers = this.findUsers(sess, searchString);\n-\t\tallVoUsers = getUsersManagerImpl().getUsersByVo(sess, vo);\n-\t\tallSearchingUsers.removeAll(allVoUsers);\n-\t\treturn allSearchingUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getPerunBl().getResourcesManagerBl().getAllowedResources(sess, facility, user);\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Resource> allowedResources = new ArrayList<Resource>();\n-\n-\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\tfor(Resource resource : resources) {\n-\t\t\tif (getPerunBl().getResourcesManagerBl().isUserAssigned(sess, user, resource)) {\n-\t\t\t\tallowedResources.add(resource);\n-\t\t\t}\n-\t\t}\n-\t\treturn allowedResources;\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//TODO do this method in more efficient way\n-\t\tSet<Resource> resources = new HashSet<Resource>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor(Member member : members) {\n-\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member));\n-\t\t\t}\n-\t\t}\n-\t\treturn new ArrayList<Resource>(resources);\n-\t}\n-\n-\t@Override\n-\tpublic List<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException {\n-\t\tSet<Resource> resources = new HashSet<Resource>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\n-\t\tfor(Member member : members) {\n-\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member));\n-\t\t}\n-\t\treturn new ArrayList<Resource>(resources);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException {\n-\t\tSet<RichResource> resources = new HashSet<RichResource>();\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\n-\t\tfor(Member member : members) {\n-\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getAssignedRichResources(sess, member));\n-\t\t}\n-\t\treturn new ArrayList<RichResource>(resources);\n-\t}\n-\n-\tprivate List<User> getUsersByVirtualAttribute(PerunSession sess, AttributeDefinition attributeDef, String attributeValue) throws InternalErrorException {\n-\t\t// try to find method in attribute module\n-\t\tUserVirtualAttributesModuleImplApi attributeModule = perunBl.getAttributesManagerBl().getUserVirtualAttributeModule(sess, attributeDef);\n-\t\tList<User> listOfUsers = attributeModule.searchInAttributesValues((PerunSessionImpl) sess, attributeValue);\n-\n-\t\tif (listOfUsers != null) {\n-\t\t\treturn listOfUsers;\n-\t\t}\n-\n-\t\t// iterate over all users\n-\t\tList<User> matchedUsers = new ArrayList<User>();\n-\t\tfor (User user: perunBl.getUsersManagerBl().getUsers(sess)) {\n-\t\t\tAttribute userAttribute;\n-\t\t\ttry {\n-\t\t\t\tuserAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, user, attributeDef.getName());\n-\t\t\t} catch (AttributeNotExistsException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t\tif (userAttribute.valueContains((String) attributeValue)) {\n-\t\t\t\tmatchedUsers.add(user);\n-\t\t\t}\n-\t\t}\n-\t\treturn matchedUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tAttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\n-\t\t\tif (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n-\t\t\t\treturn this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n-\t\t\t} else {\n-\t\t\t\treturn this.getUsersManagerImpl().getUsersByAttributeValue(sess, attributeDef, attributeValue);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute name:'\"  + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n-\t}\n-\n-\t/**\n-\t * Search attributes directly in the DB only if the attr is def or opt and value is type of String, otherwise load all users and search in a loop.\n-\t */\n-\t@Override\n-\tpublic List<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n-\t\ttry {\n-\t\t\tAttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\n-\t\t\tif (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n-\t\t\t\treturn this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n-\t\t\t} else {\n-\t\t\t\tAttribute attribute = new Attribute(attributeDef);\n-\t\t\t\tattribute.setValue(attributeValue);\n-\n-\t\t\t\treturn this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(\"Attribute name:'\"  + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsers(sess, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getUsersManagerImpl().findUsers(sess, searchString);\n-\t\treturn this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n-\t\tList<User> users = this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n-\t\treturn this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsersByName(sess, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n-\t\t// Convert to lower case\n-\t\ttitleBefore = titleBefore.toLowerCase();\n-\t\tfirstName = firstName.toLowerCase();\n-\t\tmiddleName = middleName.toLowerCase();\n-\t\tlastName = lastName.toLowerCase();\n-\t\ttitleAfter = titleAfter.toLowerCase();\n-\n-\t\treturn this.getUsersManagerImpl().findUsersByName(sess, titleBefore, firstName, middleName, lastName, titleAfter);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsersByExactName(sess, searchString);\n-\t}\n-\n-\tpublic List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n-\t\treturn this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUsersByIds(sess, usersIds);\n-\t}\n-\n-\t@Override\n-\tpublic boolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException {\n-\t\tif (loginNamespace == null || login == null) {\n-\t\t\tthrow new InternalErrorException(new NullPointerException(\"loginNamespace cannot be null, nor login\"));\n-\t\t}\n-\n-\t\t// Create Attribute\n-\t\ttry {\n-\t\t\tAttributeDefinition attributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\t\t\tAttribute attribute = new Attribute(attributeDefinition);\n-\n-\t\t\tattribute.setValue(login);\n-\n-\t\t\t// Create empty user\n-\t\t\tUser user = new User();\n-\n-\t\t\t// Check attribute value, if the login is already occupied, then WrongAttributeValueException exception is thrown\n-\t\t\tgetPerunBl().getAttributesManagerBl().checkAttributeValue(sess, user, attribute);\n-\n-\t\t\treturn true;\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeValueException e) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\t//TODO Check also reserved logins in Registrar\n-\t}\n-\t/**\n-\t * Gets the usersManagerImpl for this instance.\n-\t *\n-\t * @return The usersManagerImpl.\n-\t */\n-\tpublic UsersManagerImplApi getUsersManagerImpl() {\n-\t\treturn this.usersManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl for this instance.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl()\n-\t{\n-\t\treturn this.perunBl;\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n-\t\tgetUsersManagerImpl().checkUserExists(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n-\t\tgetUsersManagerImpl().checkReservedLogins(sess, namespace, login);\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\tgetUsersManagerImpl().checkUserExtSourceExists(sess, userExtSource);\n-\t}\n-\n-\t@Override\n-\tpublic void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n-\t\tgetUsersManagerImpl().checkUserExtSourceExistsById(sess, id);\n-\t}\n-\n-\t@Override\n-\tpublic boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().userExtSourceExists(sess, userExtSource);\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().isUserPerunAdmin(sess, user);\n-\t}\n-\n-\t@Override\n-\tpublic RichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException {\n-\t\tif(richUser == null) throw new InternalErrorException(\"RichUser can't be null.\");\n-\t\t//Filtering users attributes\n-\t\tif(richUser.getUserAttributes() != null) {\n-\t\t\tList<Attribute> userAttributes = richUser.getUserAttributes();\n-\t\t\tList<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute userAttr: userAttributes) {\n-\t\t\t\tif(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richUser)) {\n-\t\t\t\t\tuserAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richUser));\n-\t\t\t\t\tallowedUserAttributes.add(userAttr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\trichUser.setUserAttributes(allowedUserAttributes);\n-\t\t}\n-\t\treturn richUser;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException {\n-\t\tList<RichUser> filteredRichUsers = new ArrayList<RichUser>();\n-\t\tif(richUsers == null || richUsers.isEmpty()) return filteredRichUsers;\n-\n-\t\tfor(RichUser ru: richUsers) {\n-\t\t\tfilteredRichUsers.add(this.filterOnlyAllowedAttributes(sess, ru));\n-\t\t}\n-\n-\t\treturn filteredRichUsers;\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException {\n-\t\tList<User> users = new ArrayList<User>();\n-\n-\t\t//All possible useful objects\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\n-\t\t//Get object for primaryHolder of aidingAttr\n-\t\tif(perunBean != null) {\n-\t\t\tif(perunBean instanceof Vo) vo = (Vo) perunBean;\n-\t\t\telse if(perunBean instanceof Facility) facility = (Facility) perunBean;\n-\t\t\telse if(perunBean instanceof Group) group = (Group) perunBean;\n-\t\t\telse if(perunBean instanceof Member) member = (Member) perunBean;\n-\t\t\telse if(perunBean instanceof User) user = (User) perunBean;\n-\t\t\telse if(perunBean instanceof Host) host = (Host) perunBean;\n-\t\t\telse if(perunBean instanceof Resource) resource = (Resource) perunBean;\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n-\t\t}\n-\n-\t\tif(group != null) {\n-\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\tfor(Member memberElement: members) {\n-\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t} else if(member != null) {\n-\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tusers.add(user);\n-\t\t} else if(resource != null) {\n-\t\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\t\tusers.addAll(usersFromResource);\n-\t\t} else if(user != null) {\n-\t\t\tusers.add(user);\n-\t\t} else if(host != null) {\n-\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\tList<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\tfor(User userElement: usersFromHost) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t} else if(facility != null) {\n-\t\t\tList<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\tfor(User userElement: usersFromFacility) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t} else if(vo != null) {\n-\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\tList<User> usersFromVo = new ArrayList<User>();\n-\t\t\tfor(Member memberElement: members) {\n-\t\t\t\tusersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t}\n-\t\t\tfor(User userElement: usersFromVo) {\n-\t\t\t\tusers.add(userElement);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn users;\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password reservation.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\n-\t\tlog.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_RESERVE_RANDOM, (String) attr.getValue(), loginNamespace, null);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password reservation.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\tpublic void reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\t\tlog.info(\"Reserving password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Reserve the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_RESERVE, (String) userLogin, loginNamespace, password);\n-\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password reservation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\tpublic void reservePassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\t\tlog.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_RESERVE, (String) attr.getValue(), loginNamespace, password);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password validation.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void validatePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException {\n-\t\tlog.info(\"Validating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Validate the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_VALIDATE, (String) userLogin, loginNamespace, null);\n-\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password validation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void validatePassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, LoginNotExistsException {\n-\t\tlog.info(\"Validating password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_VALIDATE, (String) attr.getValue(), loginNamespace, null);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password validation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t/*\n-\t\t * FIXME This method is very badly writen - it should be rewrited or refactored\n-\t\t */\n-\n-\t\ttry {\n-\t\t\tif (loginNamespace.equals(\"einfra\")) {\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\t// Set META and EINFRA userExtSources\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"META\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@META\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA\");\n-\t\t\t\tues = new UserExtSource(extSource, userLogin + \"@EINFRA\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://login.ics.muni.cz/idp/shibboleth\");\n-\t\t\t\tues = new UserExtSource(extSource, userLogin + \"@meta.cesnet.cz\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tboolean someChange = false;\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@EINFRA\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@EINFRA\");\n-\t\t\t\t\tsomeChange = true;\n-\t\t\t\t}\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@META\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@META\");\n-\t\t\t\t\tsomeChange = true;\n-\t\t\t\t}\n-\n-\t\t\t\tif (someChange) {\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"egi-ui\")) {\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EGI\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@EGI\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@EGI\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@EGI\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"sitola\")) {\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"SITOLA.FI.MUNI.CZ\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@SITOLA.FI.MUNI.CZ\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@SITOLA.FI.MUNI.CZ\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@SITOLA.FI.MUNI.CZ\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"ics-muni-cz\")) {\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ICS.MUNI.CZ\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@ICS.MUNI.CZ\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@ICS.MUNI.CZ\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@ICS.MUNI.CZ\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"mu\")) {\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://idp2.ics.muni.cz/idp/shibboleth\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@muni.cz\");\n-\t\t\t\tues.setLoa(2);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"vsup\")) {\n-\n-\t\t\t\t// Add UES in their ActiveDirectory to access Perun by it\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"AD\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin);\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\t\t\t} else if (loginNamespace.equals(\"elixir\")) {\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ELIXIR-EUROPE.ORG\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@ELIXIR-EUROPE.ORG\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@ELIXIR-EUROPE.ORG\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@ELIXIR-EUROPE.ORG\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"einfra-services\")) {\n-\n-\t\t\t\tExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA-SERVICES\");\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@EINFRA-SERVICES\");\n-\t\t\t\tues.setLoa(0);\n-\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t\tList<String> kerberosLogins = new ArrayList<String>();\n-\n-\t\t\t\t// Store also Kerberos logins\n-\t\t\t\tAttribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n-\t\t\t\tif (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n-\t\t\t\t\tkerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n-\t\t\t\t}\n-\n-\t\t\t\tif (!kerberosLogins.contains(userLogin + \"@EINFRA-SERVICES\")) {\n-\t\t\t\t\tkerberosLogins.add(userLogin + \"@EINFRA-SERVICES\");\n-\t\t\t\t\tkerberosLoginsAttr.setValue(kerberosLogins);\n-\t\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n-\t\t\t\t}\n-\n-\t\t\t} else if (loginNamespace.equals(\"dummy\")) {\n-\t\t\t\t//dummy namespace for testing, it has accompanying DummyPasswordModule that just generates random numbers\n-\t\t\t\tExtSource extSource;\n-\t\t\t\ttry {\n-\t\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://dummy\");\n-\t\t\t\t} catch (ExtSourceNotExistsException e) {\n-\t\t\t\t\textSource =  new ExtSource(\"https://dummy\",ExtSourcesManager.EXTSOURCE_IDP);\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\textSource = getPerunBl().getExtSourcesManagerBl().createExtSource(sess, extSource, null);\n-\t\t\t\t\t} catch (ExtSourceExistsException e1) {\n-\t\t\t\t\t\tlog.warn(\"impossible or race condition\",e1);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tUserExtSource ues = new UserExtSource(extSource, userLogin + \"@dummy\");\n-\t\t\t\tues.setLoa(2);\n-\t\t\t\ttry {\n-\t\t\t\t\tgetPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n-\t\t\t\t} catch(UserExtSourceExistsException ex) {\n-\t\t\t\t\t//this is OK\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tvalidatePassword(sess, user, loginNamespace);\n-\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password creation.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\t@Deprecated\n-\tpublic void createPassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException {\n-\t\tlog.info(\"Creating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Create the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_CREATE, (String) userLogin, loginNamespace, password);\n-\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password creation. User and login is already known.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param loginNamespace\n-\t * @param password\n-\t */\n-\t@Override\n-\t@Deprecated\n-\tpublic void createPassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException,\n-\t\t\tPasswordCreationFailedException, LoginNotExistsException {\n-\t\tlog.info(\"Creating password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get login.\n-\t\ttry {\n-\t\t\tAttribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n-\n-\t\t\tif (attr.getValue() == null) {\n-\t\t\t\tthrow new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n-\t\t\t}\n-\n-\t\t\t// Create the password\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_CREATE, (String) attr.getValue(), loginNamespace, password);\n-\t\t\t} catch (PasswordCreationFailedRuntimeException e) {\n-\t\t\t\tthrow new PasswordCreationFailedException(e);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password deletion.\n-\t *\n-\t * @param sess\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t */\n-\t@Override\n-\tpublic void deletePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException, LoginNotExistsException,\n-\t\t\tPasswordDeletionFailedException, PasswordOperationTimeoutException {\n-\t\tlog.info(\"Deleting password for {} in login-namespace {}.\", userLogin, loginNamespace);\n-\n-\t\t// Delete the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_DELETE, (String) userLogin, loginNamespace, null);\n-\t\t} catch (PasswordDeletionFailedRuntimeException e) {\n-\t\t\tthrow new PasswordDeletionFailedException(e);\n-\t\t} catch (LoginNotExistsRuntimeException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t}  catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Method which calls external program for password change.\n-\t */\n-\t@Override\n-\tpublic void changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword)\n-\t\t\tthrows InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\t\tlog.info(\"Changing password for {} in login-namespace {}.\", user, loginNamespace);\n-\n-\t\t// Get User login in loginNamespace\n-\t\tAttribute userLogin;\n-\t\ttry {\n-\t\t\tuserLogin = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new LoginNotExistsException(e);\n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\t// Check password if it was requested\n-\t\tif (checkOldPassword) {\n-\t\t\ttry {\n-\t\t\t\tthis.managePassword(sess, PASSWORD_CHECK, (String) userLogin.getValue(), loginNamespace, oldPassword);\n-\t\t\t} catch (PasswordDoesntMatchRuntimeException e) {\n-\t\t\t\tthrow new PasswordDoesntMatchException(e);\n-\t\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\t// Change the password\n-\t\ttry {\n-\t\t\tthis.managePassword(sess, PASSWORD_CHANGE, (String) userLogin.getValue(), loginNamespace, newPassword);\n-\t\t} catch (PasswordChangeFailedRuntimeException e) {\n-\t\t\tthrow new PasswordChangeFailedException(e);\n-\t\t} catch (PasswordOperationTimeoutRuntimeException e) {\n-\t\t\tthrow new PasswordOperationTimeoutException(e);\n-\t\t} catch (PasswordStrengthFailedRuntimeException e) {\n-\t\t\tthrow new PasswordStrengthFailedException(e);\n-\t\t}\n-\n-\t\t//validate and set user ext sources\n-\t\ttry {\n-\t\t\tthis.validatePasswordAndSetExtSources(sess, user, (String) userLogin.getValue(), loginNamespace);\n-\t\t} catch(PasswordCreationFailedException ex) {\n-\t\t\tthrow new PasswordChangeFailedException(ex);\n-\t\t} catch(ExtSourceNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch(AttributeValueException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Calls external program which do the job with the password.\n-\t *\n-\t * Return codes of the external program\n-\t * If password check fails then return 1\n-\t * If there is no handler for loginNamespace return 2\n-\t * If setting of the new password failed return 3\n-\t *\n-\t * @param sess\n-\t * @param operation\n-\t * @param userLogin\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t */\n-\tprotected void managePassword(PerunSession sess, String operation, String userLogin, String loginNamespace, String password) throws InternalErrorException {\n-\n-\t\t// If new PWDMGR module exists, use-it\n-\t\tPasswordManagerModule module = null;\n-\n-\t\ttry {\n-\t\t\tmodule = getPasswordManagerModule(sess, loginNamespace);\n-\t\t} catch (Exception ex) {\n-\t\t\t// silently skip\n-\t\t}\n-\n-\t\tif (module != null) {\n-\n-\t\t\tif (operation.equals(PASSWORD_RESERVE)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.reservePassword(sess, userLogin, password);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_RESERVE_RANDOM)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.reserveRandomPassword(sess, userLogin);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_CHECK)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.checkPassword(sess, userLogin, password);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_VALIDATE)) {\n-\t\t\t\tmodule.validatePassword(sess, userLogin);\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_CHANGE)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.changePassword(sess, userLogin, password);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (operation.equals(PASSWORD_DELETE)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tmodule.deletePassword(sess, userLogin);\n-\t\t\t\t\treturn;\n-\t\t\t\t} catch (Exception ex) {\n-\t\t\t\t\tthrow new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t// use good old way\n-\n-\t\t// Check validity of original password\n-\t\tProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getPasswordManagerProgram(),\n-\t\t\t\toperation, loginNamespace, userLogin);\n-\n-\t\tProcess process;\n-\t\ttry {\n-\t\t\tprocess = pb.start();\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tInputStream es = process.getErrorStream();\n-\n-\t\tif (operation.equals(PASSWORD_CHANGE) || operation.equals(PASSWORD_CHECK)  || operation.equals(PASSWORD_RESERVE)) {\n-\t\t\tOutputStream os = process.getOutputStream();\n-\t\t\tif (password == null || password.isEmpty()) {\n-\t\t\t\tthrow new EmptyPasswordRuntimeException(\"Password for \" + loginNamespace + \":\" + userLogin + \" cannot be empty.\");\n-\t\t\t}\n-\t\t\t// Write password to the stdin of the program\n-\t\t\tPrintWriter pw = new PrintWriter(os, true);\n-\t\t\tpw.write(password);\n-\t\t\tpw.close();\n-\t\t}\n-\n-\t\t// If non-zero exit code is returned, then try to read error output\n-\t\ttry {\n-\t\t\tif (process.waitFor() != 0) {\n-\t\t\t\tif (process.exitValue() == 1) {\n-\t\t\t\t\tthrow new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 3) {\n-\t\t\t\t\tthrow new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 4) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 5) {\n-\t\t\t\t\tthrow new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 6) {\n-\t\t\t\t\tthrow new LoginNotExistsRuntimeException(\"User login doesn't exists in underlying system for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 11) {\n-\t\t\t\t\tthrow new PasswordStrengthFailedRuntimeException(\"Password to set doesn't match expected restrictions for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else if (process.exitValue() == 12) {\n-\t\t\t\t\tthrow new PasswordOperationTimeoutRuntimeException(\"Operation with password exceeded expected limit for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\t// Some other error occured\n-\t\t\t\t\tBufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n-\t\t\t\t\tStringBuffer errorMsg = new StringBuffer();\n-\t\t\t\t\tString line;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\twhile ((line = inReader.readLine()) != null) {\n-\t\t\t\t\t\t\terrorMsg.append(line);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tthrow new InternalErrorException(errorMsg.toString());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void createAlternativePassword(PerunSession sess, User user, String description, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException {\n-\t\ttry {\n-\t\t\tmanageAlternativePassword(sess, user, PASSWORD_CREATE, loginNamespace, null, description, password);\n-\t\t} catch(PasswordCreationFailedRuntimeException ex) {\n-\t\t\tthrow new PasswordCreationFailedException(ex);\n-\t\t} catch(LoginNotExistsRuntimeException ex) {\n-\t\t\tthrow new LoginNotExistsException(ex);\n-\t\t} catch(PasswordDeletionFailedException ex) {\n-\t\t\t//This probably never happend, if yes, its some error in code of manageAlternativePassword method\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException {\n-\t\ttry {\n-\t\t\tmanageAlternativePassword(sess, user, PASSWORD_DELETE, loginNamespace, passwordId, null, null);\n-\t\t} catch(PasswordDeletionFailedRuntimeException ex) {\n-\t\t\tthrow new PasswordDeletionFailedException(ex);\n-\t\t} catch(LoginNotExistsRuntimeException ex) {\n-\t\t\tthrow new LoginNotExistsException(ex);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Calls external program which do the job with the alternative passwords.\n-\t *\n-\t * Return codes of the external program\n-\t * If password check fails then return 1\n-\t * If there is no handler for loginNamespace return 2\n-\t * If setting of the new password failed return 3\n-\t *\n-\t * @param sess\n-\t * @param operation\n-\t * @param loginNamespace\n-\t * @param password\n-\t * @throws InternalErrorException\n-\t */\n-\tprotected void manageAlternativePassword(PerunSession sess, User user, String operation, String loginNamespace, String passwordId, String description, String password) throws InternalErrorException, PasswordDeletionFailedException {\n-\t\t//if password id == null\n-\t\tif(passwordId == null) passwordId = Long.toString(System.currentTimeMillis());\n-\n-\t\t//Prepare process builder\n-\t\tProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getAlternativePasswordManagerProgram(), operation, loginNamespace, Integer.toString(user.getId()), passwordId);\n-\n-\t\t//Set password in Perun to attribute\n-\t\tif (operation.equals(PASSWORD_CREATE)) {\n-\t\t\ttry {\n-\t\t\t\tAttribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n-\t\t\t\tMap<String,String> altPassValue = new LinkedHashMap<>();\n-\t\t\t\t//Set not null value from altPassword attribute of this user\n-\t\t\t\tif (userAlternativePassword.getValue() != null) altPassValue = (LinkedHashMap<String,String>) userAlternativePassword.getValue();\n-\t\t\t\t//If password already exists, throw an exception\n-\t\t\t\tif (altPassValue.containsKey(description)) throw new ConsistencyErrorException(\"Password with this description already exists. Description: \" + description);\n-\t\t\t\t//set new value to attribute\n-\t\t\t\taltPassValue.put(description, passwordId);\n-\t\t\t\tuserAlternativePassword.setValue(altPassValue);\n-\t\t\t\t//set new attribute with value to perun\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n-\t\t\t} catch (WrongAttributeAssignmentException | WrongAttributeValueException | WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t} else if (operation.equals(PASSWORD_DELETE)) {\n-\t\t\ttry {\n-\t\t\t\tAttribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n-\t\t\t\tMap<String,String> altPassValue = new LinkedHashMap<>();\n-\t\t\t\t//Set not null value from altPassword attribute of this user\n-\t\t\t\tif (userAlternativePassword.getValue() != null) altPassValue = (LinkedHashMap<String,String>) userAlternativePassword.getValue();\n-\t\t\t\t//If password already exists, throw an exception\n-\t\t\t\tif (!altPassValue.containsValue(passwordId)) throw new PasswordDeletionFailedException(\"Password not found by ID.\");\n-\t\t\t\t//remove key with this value from map\n-\t\t\t\tSet<String> keys = altPassValue.keySet();\n-\t\t\t\tdescription = null;\n-\t\t\t\tfor(String key: keys) {\n-\t\t\t\t\tString valueOfKey = altPassValue.get(key);\n-\t\t\t\t\tif(valueOfKey.equals(passwordId)) {\n-\t\t\t\t\t\tif(description != null) throw new ConsistencyErrorException(\"There is more than 1 password with same ID in value for user \" + user);\n-\t\t\t\t\t\tdescription = key;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif(description == null) throw new InternalErrorException(\"Password not found by ID.\");\n-\t\t\t\taltPassValue.remove(description);\n-\t\t\t\t//set new value for altPassword attribute for this user\n-\t\t\t\tuserAlternativePassword.setValue(altPassValue);\n-\t\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Not supported operation \" + operation);\n-\t\t}\n-\n-\t\tProcess process;\n-\t\ttry {\n-\t\t\tprocess = pb.start();\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tInputStream es = process.getErrorStream();\n-\n-\t\t//Set pasword in remote system\n-\t\tif (operation.equals(PASSWORD_CREATE)) {\n-\t\t\tOutputStream os = process.getOutputStream();\n-\t\t\tif (password == null || password.isEmpty()) {\n-\t\t\t\tthrow new EmptyPasswordRuntimeException(\"Alternative password for \" + loginNamespace + \" cannot be empty.\");\n-\t\t\t}\n-\t\t\t// Write password to the stdin of the program\n-\t\t\tPrintWriter pw = new PrintWriter(os, true);\n-\t\t\tpw.write(password);\n-\t\t\tpw.close();\n-\t\t}\n-\n-\t\t// If non-zero exit code is returned, then try to read error output\n-\t\ttry {\n-\t\t\tif (process.waitFor() != 0) {\n-\t\t\t\tif (process.exitValue() == 1) {\n-\t\t\t\t\t//throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t\tthrow new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n-\t\t\t\t} else if (process.exitValue() == 3) {\n-\t\t\t\t\t//throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n-\t\t\t\t\tthrow new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n-\t\t\t\t} else if (process.exitValue() == 4) {\n-\t\t\t\t\tthrow new PasswordCreationFailedRuntimeException(\"Alternative password creation failed for \" + user + \". Namespace: \" + loginNamespace + \", description: \" + description + \".\");\n-\t\t\t\t} else if (process.exitValue() == 5) {\n-\t\t\t\t\tthrow new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + user + \". Namespace: \" + loginNamespace + \", passwordId: \" + passwordId + \".\");\n-\t\t\t\t} else if (process.exitValue() == 6) {\n-\t\t\t\t\tthrow new LoginNotExistsRuntimeException(\"User doesn't exists in underlying system for namespace \" + loginNamespace + \", user: \" + user + \".\");\n-\t\t\t\t} else if (process.exitValue() == 7) {\n-\t\t\t\t\tthrow new InternalErrorException(\"Problem with creating user entry in underlying system \" + loginNamespace + \", user: \" + user + \".\");\n-\t\t\t\t} else {\n-\t\t\t\t\t// Some other error occured\n-\t\t\t\t\tBufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n-\t\t\t\t\tStringBuffer errorMsg = new StringBuffer();\n-\t\t\t\t\tString line;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\twhile ((line = inReader.readLine()) != null) {\n-\t\t\t\t\t\t\terrorMsg.append(line);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tthrow new InternalErrorException(errorMsg.toString());\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (InterruptedException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\n-\t@Override\n-\tpublic List<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException {\n-\n-\t\t// TODO - optimzization needed - at least there should be single select on RichUser object in impl !!\n-\t\tList<RichUser> result = new ArrayList<RichUser>();\n-\t\tAttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n-\t\tfor (User u : users) {\n-\t\t\tRichUser ru = new RichUser(u, getUserExtSources(sess, u));\n-\t\t\tru.setUserAttributes(attributesManagerBl.getAttributes(sess, u, attrNames));\n-\t\t\tresult.add(ru);\n-\t\t}\n-\t\treturn result;\n-\n-\t}\n-\n-\t@Override\n-\tpublic RichUser convertUserToRichUserWithAttributesByNames(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n-\t\tAttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n-\n-\t\tRichUser richUser = new RichUser(user, getUserExtSources(sess, user));\n-\t\trichUser.setUserAttributes(attributesManagerBl.getAttributes(sess, user, attrNames));\n-\n-\t\treturn richUser;\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, findRichUsers(sess, searchString));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, findUsers(sess, searchString), attrsName);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, findRichUsersByExactMatch(sess, searchString));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, findUsersByExactMatch(sess, searchString), attrsName);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException{\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutSpecificVo(sess, vo, searchString)));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutSpecificVo(sess, vo, searchString), attrsName);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException{\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutVoAssigned(sess)));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutVoAssigned(sess), attrsName);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tList<User> users = getUsers(sess);\n-\t\t// optionally exclude specific users\n-\t\tif (!includedSpecificUsers) {\n-\t\t\tIterator<User> it = users.iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tUser u = it.next();\n-\t\t\t\tif (u.isSpecificUser()) {\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tif(attrsName == null || attrsName.isEmpty()) {\n-\t\t\treturn convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, users));\n-\t\t} else {\n-\t\t\treturn convertUsersToRichUsersWithAttributesByNames(sess, users, attrsName);\n-\t\t}\n \n-\t}\n \n-\t@Override\n-\tpublic void setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException {\n-\n-\t\t// should always pass, since isLoginAvailable() in ENTRY does the same\n-\t\ttry {\n-\n-\t\t\tList<String> names = new ArrayList<String>();\n-\t\t\tnames.add(AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\n-\t\t\t// will always get attribute (empty, if not set)\n-\t\t\tList<Attribute> checked = getPerunBl().getAttributesManagerBl().getAttributes(sess, user, names);\n-\t\t\tif (checked.size() != 1) {\n-\t\t\t\tthrow new InternalErrorException(\"User should have only one login (attribute) in namespace\");\n-\t\t\t}\n-\t\t\t// if user already has login\n-\t\t\tif (checked.get(0).getValue() != null) {\n-\t\t\t\tthrow new InternalErrorException(\"Can't set new login. User already has login in namespace: \"+loginNamespace);\n-\t\t\t}\n-\n-\t\t\tchecked.get(0).setValue(login);\n+public class UsersManagerBlImpl implements UsersManagerBl {\n \n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttributes(sess, user, checked);\n \n-\t\t} catch (WrongAttributeAssignmentException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongReferenceAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t} catch (WrongAttributeValueException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic void requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException {\n-\n-\t\tint changeId = getUsersManagerImpl().requestPreferredEmailChange(sess, user, email);\n-\t\tUtils.sendValidationEmail(user, url, email, changeId);\n-\n-\t}\n-\n-\t@Override\n-\tpublic String validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, AttributeNotExistsException {\n-\n-\t\tString email = getUsersManagerImpl().getPreferredEmailChangeRequest(sess, user, i, m);\n-\n-\t\tAttributeDefinition def = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\tAttribute a = new Attribute(def);\n-\t\ta.setValue(email);\n-\n-\t\t// store attribute\n-\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, user, a);\n-\n-\t\tgetUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n-\n-\t\treturn email;\n-\n-\t}\n-\n-\t@Override\n-\tpublic List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\n-\t\tList<String> list = getUsersManagerImpl().getPendingPreferredEmailChanges(sess, user);\n-\n-\t\tAttribute a = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\tif (a != null && a.getValue() != null) {\n-\t\t\tIterator<String> it = list.iterator();\n-\t\t\twhile (it.hasNext()) {\n-\t\t\t\tString value = it.next();\n-\t\t\t\tif (value.equals(BeansUtils.attributeValueToString(a))) {\n-\t\t\t\t\t// remove pending change requests if they are already set in attribute\n-\t\t\t\t\tit.remove();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn list;\n-\n-\t}\n-\n-\t@Override\n-\tpublic User convertUserEmptyStringsInObjectAttributesIntoNull(User user) {\n-\t\t//if user is null, return it back without change\n-\t\tif(user == null) return user;\n-\n-\t\t//convert all empty strings to null\n-\t\tif(user.getFirstName() != null && user.getFirstName().isEmpty()) user.setFirstName(null);\n-\t\tif(user.getMiddleName() != null && user.getMiddleName().isEmpty()) user.setMiddleName(null);\n-\t\tif(user.getLastName() != null && user.getLastName().isEmpty()) user.setLastName(null);\n-\n-\t\tif(user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) user.setTitleBefore(null);\n-\t\tif(user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) user.setTitleAfter(null);\n-\n-\t\treturn user;\n-\t}\n-\n-\t@Override\n-\tpublic void changeNonAuthzPassword(PerunSession sess, User user, String m, String password, String lang) throws InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n-\n-\t\tString requestId = Utils.cipherInput(m, true);\n-\t\tString namespace = getUsersManagerImpl().loadPasswordResetRequest(user, Integer.parseInt(requestId));\n-\n-\t\tif (namespace.isEmpty()) throw new InternalErrorException(\"Password reset request is not valid anymore or doesn't existed at all for User: \"+user);\n-\n-\t\tList<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n-\t\tboolean found = false;\n-\t\tfor (Attribute a : logins) {\n-\t\t\tif (a.getFriendlyNameParameter().equals(namespace)) found = true;\n-\t\t}\n-\t\tif (!found) throw new InternalErrorException(user.toString()+\" doesn't have login in namespace: \"+namespace);\n-\n-\t\t// reset password without checking old\n-\t\ttry {\n-\t\t\tchangePassword(sess, user, namespace, \"\", password, false);\n-\t\t} catch (PasswordDoesntMatchException ex) {\n-\t\t\t// shouldn't happen\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\t// was changed - send notification to all member's emails\n-\t\tSet<String> emails = new HashSet<String>();\n-\n-\t\ttry {\n-\t\t\tAttribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF+\":preferredMail\");\n-\t\t\tif (a != null && a.getValue() != null) {\n-\t\t\t\temails.add((String)a.getValue());\n-\t\t\t}\n-\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor (Member member : members) {\n-\n-\t\t\ttry {\n-\t\t\t\tAttribute a = perunBl.getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_DEF+\":mail\");\n-\t\t\t\tif (a != null && a.getValue() != null) {\n-\t\t\t\t\temails.add((String)a.getValue());\n-\t\t\t\t}\n-\t\t\t} catch (WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t}\n-\n-\t\t// get template\n-\n-\t\tString subject;\n-\t\ttry {\n-\t\t\tAttribute subjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang,\n-\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n-\t\t\tsubject = (String) subjectTemplateAttribute.getValue();\n-\t\t\tif (subject == null) {\n-\t\t\t\tsubjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\",\n-\t\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n-\t\t\t\tsubject = (String) subjectTemplateAttribute.getValue();\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tString message;\n-\t\ttry {\n-\t\t\tAttribute messageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang,\n-\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n-\t\t\tmessage = (String) messageTemplateAttribute.getValue();\n-\t\t\tif (message == null) {\n-\t\t\t\tmessageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\",\n-\t\t\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n-\t\t\t\tmessage = (String) messageTemplateAttribute.getValue();\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tfor (String email : emails) {\n-\t\t\tUtils.sendPasswordResetConfirmationEmail(user, email, namespace, subject, message);\n-\t\t}\n-\n-\t}\n-\n-\t@Override\n-\tpublic int getUsersCount(PerunSession sess) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getUsersCount(sess);\n-\t}\n-\n-\t@Override\n-\tpublic Map<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().generateAccount(session, namespace, parameters);\n-\t}\n-\n-\t@Override\n-\tpublic List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n-\t\tif(!sponsoredMember.isSponsored()) {\n-\t\t\tthrow new IllegalArgumentException(\"member \"+sponsoredMember.getId()+\" is not marked as sponsored\");\n-\t\t}\n-\t\treturn getUsersManagerImpl().getSponsors(sess, sponsoredMember);\n-\t}\n-\n-\tprivate PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n-\t\treturn getUsersManagerImpl().getPasswordManagerModule(session, namespace);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n-\t\tfor(UserExtSource userExtSource : getUserExtSources(sess, user)) {\n-\t\t\ttry {\n-\t\t\t\tremoveUserExtSource(sess, user, userExtSource);\n-\t\t\t} catch (UserExtSourceAlreadyRemovedException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws AttributeNotExistsException, InternalErrorException {\n-\t\tAttributeDefinition adef = sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n-\t\tif((!adef.getType().equals(\"java.lang.String\")) || (!adef.getNamespace().equals(AttributesManager.NS_UES_ATTR_DEF))) {\n-\t\t\tthrow new InternalErrorException(\"only ues attributes of type String can be used in findUsersWithExtSourceAttributeValueEnding()\");\n-\t\t}\n-\t\treturn usersManagerImpl.findUsersWithExtSourceAttributeValueEnding(sess,attributeName,valueEnd,excludeValueEnds);\n-\t}\n-\n-\t@Override\n-\tpublic String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n-\n-\t\tchar[] possibleCharacters =\n-\t\t\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n-\t\t\t\t.toCharArray();\n-\t\tint count = 12;\n-\n-\t\t// FIXME - We will replace following logic once each login-namespace will implement\n-\t\t// FIXME   pwd-manager module and have server side checks\n-\t\tif (Objects.equals(loginNamespace, \"vsup\")) {\n-\t\t\tcount = 14;\n-\t\t\t// removed O, l, specific only: +, -, *, /, .\n-\t\t\tpossibleCharacters = \"ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789+-*/.\".toCharArray();\n-\t\t}\n-\n-\t\tString newRandomPassword = RandomStringUtils.random(count, 0, possibleCharacters.length - 1, false,\n-\t\t\tfalse, possibleCharacters, new SecureRandom());\n-\n-\t\ttry {\n-\t\t\tchangePassword(session, user, loginNamespace, null, newRandomPassword, false);\n-\t\t} catch (PasswordDoesntMatchException | PasswordStrengthFailedException e) {\n-\t\t\t// should not happen when we are not using the old password\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\tString template = getPasswordResetTemplate(session, loginNamespace);\n-\n-\t\tString userLogin;\n-\t\ttry {\n-\t\t\tAttribute userLoginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(session, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n-\t\t\tuserLogin = (String) userLoginAttribute.getValue();\n-\t\t} catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n-\t\t\t// should not happen since the changePassword method passed\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\n-\t\treturn template\n-\t\t\t.replace(\"{password}\", StringEscapeUtils.escapeHtml4(newRandomPassword))\n-\t\t\t.replace(\"{login}\", StringEscapeUtils.escapeHtml4(userLogin));\n-\t}\n-\n-\t/**\n-\t * Returns template for password reset.\n-\t * <p>\n-\t * It finds the template in entityless attribute randomPwdResetTemplate for given namespace.\n-\t * If that fails, it falls back to default template.\n-\t *\n-\t * @param session        session\n-\t * @param loginNamespace login namespace\n-\t * @return String representing HTML template for password reset\n-\t */\n-\tprivate String getPasswordResetTemplate(PerunSession session, String loginNamespace) {\n-\t\tString template =\n-\t\t\t\t\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\" +\n-\t\t\t\t\t\t\"<head>\\n\" +\n-\t\t\t\t\t\t\"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\"></meta>\\n\" +\n-\t\t\t\t\t\t\"</head>\"+\n-\t\t\t\t\t\t\"<body><div style=\\\"padding: 25px;color: black;text-align: center;\\\">\" +\n-\t\t\t\t\t\t\"<h1>Password reset</h1>\" +\n-\t\t\t\t\t\t\"<p>Password for user {login} has been reset by the administrator.<br />\" +\n-\t\t\t\t\t\t\"The new password is <br />\" +\n-\t\t\t\t\t\t\"<h2><b>{password}</b></h2>\" +\n-\t\t\t\t\t\t\"</p></div>\" +\n-\t\t\t\t\t\t\"</body>\" +\n-\t\t\t\t\t\t\"</html>\";\n-\t\ttry {\n-\t\t\tAttribute templateAttribute = perunBl.getAttributesManagerBl().getAttribute(session, loginNamespace,\n-\t\t\t\tAttributesManager.NS_ENTITYLESS_ATTR_DEF + \":randomPwdResetTemplate\");\n-\t\t\tif (templateAttribute.getValue() != null) {\n-\t\t\t\ttemplate = (String) templateAttribute.getValue();\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException | InternalErrorException e) {\n-\t\t\tlog.warn(\"Failed to get template attribute for password reset in namespace {}, using default. Exception \" +\n-\t\t\t\t\"class: {}, Exception message: {}\", loginNamespace, e.getClass().getName(), e.getMessage());\n-\t\t}\n-\n-\t\treturn template;\n-\t}\n-\n-}\n+ private final static Logger log = LoggerFactory.getLogger(UsersManagerBlImpl.class);\n+ private UsersManagerImplApi usersManagerImpl;\n+ private PerunBl perunBl;\n+ private static final String A_USER_DEF_ALT_PASSWORD_NAMESPACE = AttributesManager.NS_USER_ATTR_DEF + \":altPasswords:\";\n+ private static final String PASSWORD_VALIDATE = \"validate\";\n+ private static final String PASSWORD_CREATE = \"create\";\n+ private static final String PASSWORD_RESERVE = \"reserve\";\n+ private static final String PASSWORD_RESERVE_RANDOM = \"reserve_random\";\n+ private static final String PASSWORD_CHANGE = \"change\";\n+ private static final String PASSWORD_CHECK = \"check\";\n+ private static final String PASSWORD_DELETE = \"delete\";\n+\n+\n+ /**\n+  * Constructor.\n+  *\n+  * @param usersManagerImpl connection pool\n+  */\n+\n+\n+ public UsersManagerBlImpl(UsersManagerImplApi usersManagerImpl) {\n+  this.usersManagerImpl = usersManagerImpl;\n+ }\n+\n+ @Override\n+ public User getUserByUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException {\n+  return getUsersManagerImpl().getUserByUserExtSource(sess, userExtSource);\n+ }\n+\n+ // FIXME do this in IMPL\n+\n+ @Override\n+ public User getUserByUserExtSources(PerunSession sess, List<UserExtSource> userExtSources) throws InternalErrorException, UserNotExistsException {\n+\n+  for (UserExtSource ues : userExtSources) {\n+   try {\n+    return getUsersManagerImpl().getUserByUserExtSource(sess, ues);\n+   } catch (UserNotExistsException e) {\n+    // Ignore\n+\n+   }\n+  }\n+\n+  throw new UserNotExistsException(\"User with userExtSources \" + userExtSources + \" doesn't exists.\");\n+ }\n+\n+ @Override\n+ public List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException {\n+  if ((extSourceType == null) || (login == null))\n+   return new ArrayList<User>();\n+  return getUsersManagerImpl().getUsersByExtSourceTypeAndLogin(perunSession, extSourceType, login);\n+ }\n+\n+ @Override\n+ public List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().getSpecificUsersByUser(sess, user);\n+ }\n+\n+ @Override\n+ public List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException {\n+  if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+  if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+  return getUsersManagerImpl().getUsersBySpecificUser(sess, specificUser);\n+ }\n+\n+ @Override\n+ public void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n+  this.removeSpecificUserOwner(sess, user, specificUser, false);\n+ }\n+\n+ public void removeSpecificUserOwner(PerunSession sess, User user, User specificUser, boolean forceDelete) throws InternalErrorException, RelationNotExistsException, SpecificUserMustHaveOwnerException, SpecificUserOwnerAlreadyRemovedException {\n+  if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+  if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+  if (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n+  List<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n+  if (!specificUserOwners.remove(user)) throw new RelationNotExistsException(\"User is not the active owner of the specificUser.\");\n+  if (!getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n+   throw new RelationNotExistsException(\"User has no relationship to specificUser.\");\n+  }\n+\n+  try {\n+   // refresh authz for sponsors\n+   if (specificUser.isSponsoredUser()) AuthzResolverBlImpl.unsetRole(sess, user, specificUser, Role.SPONSOR);\n+   // refresh authz for service user owners\n+   if (specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n+    if (user.getId() == sess.getPerunPrincipal().getUserId()) {\n+     AuthzResolverBlImpl.refreshAuthz(sess);\n+    }\n+   }\n+  } catch (UserNotAdminException ex) {\n+   throw new InternalErrorException(\"Can't remove role of sponsor for user \" + user + \" and sponsored user \" + specificUser);\n+  }\n+  if (forceDelete) {\n+   //getPerunBl().getAuditer().log(sess, \"{} ownership was removed for specificUser {}.\", user, specificUser);\n+   getPerunBl().getAuditer().log(sess, new OwnershipRemovedForSpecificUser(user, specificUser));\n+   getUsersManagerImpl().removeSpecificUserOwner(sess, user, specificUser);\n+  } else {\n+   getPerunBl().getAuditer().log(sess, new OwnershipDisabledForSpecificUser(user, specificUser));\n+   getUsersManagerImpl().disableOwnership(sess, user, specificUser);\n+  }\n+ }\n+\n+ @Override\n+ public void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, RelationExistsException {\n+  if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+  if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+  if (user.getMajorSpecificType().equals(SpecificUserType.SERVICE)) throw new InternalErrorException(\"Service user can`t own another account (service or guest)!\" + user);\n+  List<User> specificUserOwners = this.getUsersBySpecificUser(sess, specificUser);\n+  if (specificUserOwners.remove(user)) throw new RelationExistsException(\"User is already the active owner of specific user.\");\n+  if (getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser)) {\n+   getUsersManagerImpl().enableOwnership(sess, user, specificUser);\n+   getPerunBl().getAuditer().log(sess, new OwnershipEnabledForSpecificUser(user, specificUser));\n+  } else {\n+   getPerunBl().getAuditer().log(sess, new UserAddedToOwnersOfSpecificUser(user, specificUser));\n+   getUsersManagerImpl().addSpecificUserOwner(sess, user, specificUser);\n+  }\n+\n+  try {\n+   // refresh authz for sponsors\n+   if (specificUser.isSponsoredUser()) AuthzResolverBlImpl.setRole(sess, user, specificUser, Role.SPONSOR);\n+   // refresh authz for service user owners\n+   if (specificUser.isServiceUser() && sess.getPerunPrincipal() != null) {\n+    if (user.getId() == sess.getPerunPrincipal().getUserId()) {\n+     AuthzResolverBlImpl.refreshAuthz(sess);\n+    }\n+   }\n+  } catch (AlreadyAdminException ex) {\n+   throw new InternalErrorException(\"User \" + user + \" is already sponsor of sponsored user \" + specificUser);\n+  }\n+ }\n+\n+ @Override\n+ public boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException {\n+  if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+  if (specificUser.getMajorSpecificType().equals(SpecificUserType.NORMAL)) throw new InternalErrorException(\"Incorrect type of specification for specific user!\" + specificUser);\n+  return getUsersManagerImpl().specificUserOwnershipExists(sess, user, specificUser);\n+ }\n+\n+ @Override\n+ public List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException {\n+  return getUsersManagerImpl().getSpecificUsers(sess);\n+ }\n+\n+ @Override\n+ public User setSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType, User owner) throws InternalErrorException, RelationExistsException {\n+  if (specificUser.isServiceUser() && specificUser.isSponsoredUser()) {\n+   throw new InternalErrorException(\"We don't support specific and sponsored users together yet.\");\n+  }\n+  if (specificUser.getMajorSpecificType().equals(specificUserType)) {\n+   throw new InternalErrorException(\"Can't set \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he has already set this flag.\");\n+  }\n+\n+  //Set specific type for user\n+  specificUser = getUsersManagerImpl().setSpecificUserType(sess, specificUser, specificUserType);\n+\n+  //add owner for this new specific user\n+  this.addSpecificUserOwner(sess, owner, specificUser);\n+  return specificUser;\n+ }\n+\n+ @Override\n+ public User unsetSpecificUser(PerunSession sess, User specificUser, SpecificUserType specificUserType) throws InternalErrorException {\n+  if (!specificUser.getMajorSpecificType().equals(specificUserType)) {\n+   throw new InternalErrorException(\"Can't unset \" + specificUserType.getSpecificUserType() + \" for \" + specificUser + \", because he hasn't this flag yet.\");\n+  }\n+\n+  //remove all owners for this new specific user\n+  List<User> owners = getPerunBl().getUsersManagerBl().getUsersBySpecificUser(sess, specificUser);\n+  for (User owner : owners) {\n+   try {\n+    this.removeSpecificUserOwner(sess, owner, specificUser, true);\n+   } catch (SpecificUserMustHaveOwnerException |RelationNotExistsException| SpecificUserOwnerAlreadyRemovedException ex) {\n+    throw new InternalErrorException(\"Can't remove ownership of user \" + specificUser, ex);\n+   }\n+  }\n+\n+  //Unset specific type for user\n+  specificUser = getUsersManagerImpl().unsetSpecificUserType(sess, specificUser, specificUserType);\n+  return specificUser;\n+ }\n+\n+ @Override\n+ public User getUserById(PerunSession sess, int id) throws InternalErrorException, UserNotExistsException {\n+  return getUsersManagerImpl().getUserById(sess, id);\n+ }\n+\n+ @Override\n+ public User getUserByMember(PerunSession sess, Member member) throws InternalErrorException {\n+  if (member.getUserId() != 0) {\n+   try {\n+    // TODO If the member object will contain also User object, here can be returned directly.\n+    return getUsersManagerImpl().getUserById(sess, member.getUserId());\n+   } catch (UserNotExistsException e) {\n+    throw new ConsistencyErrorException(\"Member \" + member + \"has non-existin user.\", e);\n+   }\n+  } else {\n+   return getUsersManagerImpl().getUserByMember(sess, member);\n+  }\n+ }\n+\n+ @Override\n+ public User getUserByExtSourceNameAndExtLogin(PerunSession sess, String extSourceName, String extLogin) throws ExtSourceNotExistsException, UserExtSourceNotExistsException, UserNotExistsException, InternalErrorException {\n+  ExtSource extSource = perunBl.getExtSourcesManagerBl().getExtSourceByName(sess, extSourceName);\n+  UserExtSource userExtSource = this.getUserExtSourceByExtLogin(sess, extSource, extLogin);\n+  return this.getUserByUserExtSource(sess, userExtSource);\n+ }\n+\n+ @Override\n+ public List<User> getUsers(PerunSession sess) throws InternalErrorException {\n+  return getUsersManagerImpl().getUsers(sess);\n+ }\n+\n+ @Override\n+ public RichUser getRichUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = new ArrayList<User>();\n+  users.add(user);\n+  List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+  return richUsers.get(0);\n+ }\n+\n+ @Override\n+ public RichUser getRichUserWithAttributes(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = new ArrayList<User>();\n+  users.add(user);\n+  List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+  List<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n+  return richUsersWithAttributes.get(0);\n+ }\n+\n+ @Override\n+ public List<RichUser> convertUsersToRichUsers(PerunSession sess, List<User> users) throws InternalErrorException {\n+  List<RichUser> richUsers = new ArrayList<RichUser>();\n+  for (User user : users) {\n+   List<UserExtSource> userExtSources = getPerunBl().getUsersManagerBl().getUserExtSources(sess, user);\n+   RichUser richUser = new RichUser(user, userExtSources);\n+   richUsers.add(richUser);\n+  }\n+\n+  return richUsers;\n+ }\n+\n+ @Override\n+ public List<RichUser> convertRichUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException, UserNotExistsException {\n+\n+  for (RichUser richUser : richUsers) {\n+   User user = getPerunBl().getUsersManagerBl().getUserById(sess, richUser.getId());\n+   List<Attribute> userAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, user);\n+   richUser.setUserAttributes(userAttributes);\n+  }\n+\n+  return richUsers;\n+ }\n+\n+ @Override\n+ public List<RichUser> getAllRichUsers(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = new ArrayList<User>();\n+  users.addAll(this.getUsers(sess));\n+  if (!includedSpecificUsers) users.removeAll(this.getSpecificUsers(sess));\n+  List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+  return richUsers;\n+ }\n+\n+ @Override\n+ public List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = new ArrayList<User>();\n+  users.addAll(this.getUsers(sess));\n+  if (!includedSpecificUsers) users.removeAll(this.getSpecificUsers(sess));\n+  List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+  List<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n+  return richUsersWithAttributes;\n+ }\n+\n+ @Override\n+ public List<RichUser> getRichUsersFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n+  List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+  return richUsers;\n+ }\n+\n+ @Override\n+ public List<RichUser> getRichUsersWithAttributesFromListOfUsers(PerunSession sess, List<User> users) throws InternalErrorException, UserNotExistsException {\n+  List<RichUser> richUsers = this.convertUsersToRichUsers(sess, users);\n+  List<RichUser> richUsersWithAttributes = this.convertRichUsersToRichUsersWithAttributes(sess, richUsers);\n+  return richUsersWithAttributes;\n+ }\n+\n+ @Override\n+ public List<RichUser> convertUsersToRichUsersWithAttributes(PerunSession sess, List<RichUser> richUsers, List<AttributeDefinition> attrsDef) throws InternalErrorException {\n+  List<AttributeDefinition> usersAttributesDef = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attrd : attrsDef) {\n+   if (attrd.getName().startsWith(AttributesManager.NS_USER_ATTR)) usersAttributesDef.add(attrd);\n+   //If not, skip this attribute, it is not user Attribute\n+  }\n+\n+  for (RichUser richUser : richUsers) {\n+   List<Attribute> userAttributes = new ArrayList<Attribute>();\n+   List<String> userAttrNames = new ArrayList<String>();\n+   for (AttributeDefinition ad : usersAttributesDef) {\n+    userAttrNames.add(ad.getName());\n+   }\n+   userAttributes.addAll(getPerunBl().getAttributesManagerBl().getAttributes(sess, richUser, userAttrNames));\n+   richUser.setUserAttributes(userAttributes);\n+  }\n+\n+  return richUsers;\n+ }\n+\n+ @Override\n+ public User createUser(PerunSession sess, User user) throws InternalErrorException {\n+\n+  // trim input\n+  if (user.getFirstName() != null) user.setFirstName(user.getFirstName().trim());\n+  if (user.getLastName() != null) user.setLastName(user.getLastName().trim());\n+  if (user.getMiddleName() != null) user.setMiddleName(user.getMiddleName().trim());\n+  if (user.getTitleBefore() != null) user.setTitleBefore(user.getTitleBefore().trim());\n+  if (user.getTitleAfter() != null) user.setTitleAfter(user.getTitleAfter().trim());\n+\n+  //Convert empty strings to null\n+  if (user.getFirstName() != null && user.getFirstName().isEmpty()) user.setFirstName(null);\n+  if (user.getLastName() != null && user.getLastName().isEmpty()) user.setLastName(null);\n+  if (user.getMiddleName() != null && user.getMiddleName().isEmpty()) user.setMiddleName(null);\n+  if (user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) user.setTitleBefore(null);\n+  if (user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) user.setTitleAfter(null);\n+  user = getUsersManagerImpl().createUser(sess, user);\n+  getPerunBl().getAuditer().log(sess, new UserCreated(user));\n+\n+  // Add default userExtSource\n+  ExtSource es;\n+  try {\n+   es = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, ExtSourcesManager.EXTSOURCE_NAME_PERUN);\n+  } catch (ExtSourceNotExistsException e1) {\n+   throw new ConsistencyErrorException(\"Default extSource PERUN must exists! It is created in ExtSourcesManagerImpl.init function.\", e1);\n+  }\n+  UserExtSource ues = new UserExtSource(es, 0, String.valueOf(user.getId()));\n+  try {\n+   this.addUserExtSource(sess, user, ues);\n+  } catch (UserExtSourceExistsException e) {\n+   throw new ConsistencyErrorException(e);\n+  }\n+\n+  return user;\n+ }\n+\n+ @Override\n+ public void deleteUser(PerunSession sess, User user) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n+  this.deleteUser(sess, user, false);\n+ }\n+\n+ @Override\n+ public void deleteUser(PerunSession sess, User user, boolean forceDelete) throws InternalErrorException, RelationExistsException, MemberAlreadyRemovedException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException {\n+  List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+  if (members != null && (members.size() > 0)) {\n+   if (forceDelete) {\n+\n+    for (Member member : members) {\n+     getPerunBl().getMembersManagerBl().deleteMember(sess, member);\n+    }\n+   } else {\n+    throw new RelationExistsException(\"Members exist\");\n+   }\n+  }\n+\n+  //Remove all information about user on facilities (facilities contacts)\n+  List<ContactGroup> userContactGroups = getPerunBl().getFacilitiesManagerBl().getFacilityContactGroups(sess, user);\n+  if (!userContactGroups.isEmpty()) {\n+   if (forceDelete) {\n+    getPerunBl().getFacilitiesManagerBl().removeAllUserContacts(sess, user);\n+   } else {\n+    throw new RelationExistsException(\"User has still some facilities contacts: \" + userContactGroups);\n+   }\n+  }\n+  if (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && forceDelete) {\n+   getPerunBl().getSecurityTeamsManagerBl().removeUserFromAllBlacklists(sess, user);\n+  } else if (getPerunBl().getSecurityTeamsManagerBl().isUserBlacklisted(sess, user) && !forceDelete) {\n+   throw new RelationExistsException(\"User is blacklisted by some security team. Deletion would cause loss of this information.\");\n+  }\n+\n+  // First delete all associated external sources to the user\n+  removeAllUserExtSources(sess, user);\n+  getPerunBl().getAuditer().log(sess, new AllUserExtSourcesDeletedForUser(user));\n+\n+  // delete all authorships of users publications\n+  getUsersManagerImpl().removeAllAuthorships(sess, user);\n+\n+  // delete all mailchange request related to user\n+  getUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n+\n+  // delete all pwdreset request related to user\n+  getUsersManagerImpl().removeAllPasswordResetRequests(sess, user);\n+\n+  // get all reserved logins of user\n+  List<Pair<String, String>> logins = getUsersManagerImpl().getUsersReservedLogins(user);\n+\n+  // delete them from KDC\n+  for (Pair<String, String> login : logins) {\n+   try {\n+    // !! left = namespace / right = login\n+    this.deletePassword(sess, login.getRight(), login.getLeft());\n+   } catch (LoginNotExistsException e) {\n+    // OK - User hasn't assigned any password with this login\n+\n+   } catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n+    if (forceDelete) {\n+     log.error(\"Error during deletion of an account at {} for user {} with login {}.\",\n+      new Object[] {login.getLeft(), user, login.getRight()});\n+    } else {\n+     throw new RelationExistsException(\"Error during deletion of an account at \" + login.getLeft() + \" for user \" + user + \" with login \" + login.getRight() + \".\");\n+    }\n+   }\n+  }\n+\n+  // delete them from DB\n+  getUsersManagerImpl().deleteUsersReservedLogins(user);\n+\n+  // all users applications and submitted data are deleted on cascade when \"deleteUser()\"\n+\n+  // Remove all possible passwords associated with logins (stored in attributes)\n+  for (Attribute loginAttribute : getPerunBl().getAttributesManagerBl().getLogins(sess, user)) {\n+   try {\n+    this.deletePassword(sess, (String) loginAttribute.getValue(), loginAttribute.getFriendlyNameParameter());\n+   } catch (LoginNotExistsException e) {\n+    // OK - User hasn't assigned any password with this login\n+\n+   } catch (PasswordDeletionFailedException | PasswordOperationTimeoutException e) {\n+    if (forceDelete) {\n+     log.error(\"Error during deletion of the account at {} for user {} with login {}.\", new Object[] {loginAttribute.getFriendlyNameParameter(), user, (String) loginAttribute.getValue()});\n+    } else {\n+     throw new RelationExistsException(\"Error during deletion of the account at \" + loginAttribute.getFriendlyNameParameter() + \" for user \" + user + \" with login \" + (String) loginAttribute.getValue() + \".\");\n+    }\n+   }\n+  }\n+\n+\n+  // Delete assigned attributes\n+  // Users one\n+\n+  try {\n+   getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, user);\n+   // User-Facilities one\n+   getPerunBl().getAttributesManagerBl().removeAllUserFacilityAttributes(sess, user);\n+  } catch (WrongAttributeValueException ex) {\n+   //All members are deleted => there are no required attribute => all atributes can be removed\n+   throw new ConsistencyErrorException(ex);\n+  } catch (WrongReferenceAttributeValueException ex) {\n+   //All members are deleted => there are no required attribute => all atributes can be removed\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  //Remove user authz\n+  AuthzResolverBlImpl.removeAllUserAuthz(sess, user);\n+  //delete even inactive links\n+  usersManagerImpl.deleteSponsorLinks(sess, user);\n+\n+  //Remove all users bans\n+  List<BanOnFacility> bansOnFacility = getPerunBl().getFacilitiesManagerBl().getBansForUser(sess, user.getId());\n+  for (BanOnFacility banOnFacility : bansOnFacility) {\n+   try {\n+    getPerunBl().getFacilitiesManagerBl().removeBan(sess, banOnFacility.getId());\n+   } catch (BanNotExistsException ex) {\n+    //it is ok, we just want to remove it anyway\n+\n+   }\n+  }\n+\n+  // Remove all sponsored user authz of his owners\n+  if (user.isSponsoredUser()) AuthzResolverBlImpl.removeAllSponsoredUserAuthz(sess, user);\n+  // Finally delete the user\n+  getUsersManagerImpl().deleteUser(sess, user);\n+  getPerunBl().getAuditer().log(sess, new UserDeleted(user));\n+ }\n+\n+ @Override\n+ public User updateUser(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+  //Convert user to version with no empty strings in object attributes (null instead)\n+  user = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n+  User beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n+  User afterUpdatingUser = getUsersManagerImpl().updateUser(sess, user);\n+\n+  //Log only when something is changed\n+  if (!beforeUpdatingUser.equals(afterUpdatingUser)) getPerunBl().getAuditer().log(sess, new UserUpdated(user));\n+  return afterUpdatingUser;\n+ }\n+\n+ @Override\n+ public User updateNameTitles(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+  //Convert user to version with no empty strings in object attributes (null instead)\n+  user = this.convertUserEmptyStringsInObjectAttributesIntoNull(user);\n+  User beforeUpdatingUser = getPerunBl().getUsersManagerBl().getUserById(sess, user.getId());\n+  User afterUpdatingUser = getUsersManagerImpl().updateNameTitles(sess, user);\n+\n+  //Log only when something is changed\n+  // must audit like update user since it changes same object\n+  if (!beforeUpdatingUser.equals(afterUpdatingUser)) getPerunBl().getAuditer().log(sess, new UserUpdated(user));\n+  return afterUpdatingUser;\n+ }\n+\n+ @Override\n+ public UserExtSource updateUserExtSource(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n+  getPerunBl().getAuditer().log(sess, new UserExtSourceUpdated(userExtSource));\n+  return getUsersManagerImpl().updateUserExtSource(sess, userExtSource);\n+ }\n+\n+ @Override\n+ public void updateUserExtSourceLastAccess(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+  getUsersManagerImpl().updateUserExtSourceLastAccess(sess, userExtSource);\n+ }\n+\n+ @Override\n+ public List<UserExtSource> getUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().getUserExtSources(sess, user);\n+ }\n+\n+ @Override\n+ public UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+  return getUsersManagerImpl().getUserExtSourceById(sess, id);\n+ }\n+\n+ @Override\n+ public List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException {\n+  return getUsersManagerImpl().getAllUserExtSourcesByTypeAndLogin(sess, extType, extLogin);\n+ }\n+\n+ @Override\n+ public List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().getActiveUserExtSources(sess, user);\n+ }\n+\n+ @Override\n+ public UserExtSource addUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceExistsException {\n+  // Check if the userExtSource already exists\n+  if (usersManagerImpl.userExtSourceExists(sess, userExtSource)) {\n+   throw new UserExtSourceExistsException(\"UserExtSource \" + userExtSource + \" already exists.\");\n+  }\n+\n+  // Check if userExtsource is type of IDP (special testing behavior)\n+  if (userExtSource.getExtSource().getType().equals(ExtSourcesManager.EXTSOURCE_IDP)) {\n+   // If extSource of this userExtSource is type of IDP, test uniqueness of login in this extSource type for all users\n+   String login = userExtSource.getLogin();\n+   List<UserExtSource> userExtSources = getAllUserExtSourcesByTypeAndLogin(sess, ExtSourcesManager.EXTSOURCE_IDP, login);\n+   if (userExtSources.size() == 1) throw new InternalErrorException(\"ExtLogin: \" + login + \" is already in used for extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n+   else if (userExtSources.size() > 1) throw new ConsistencyErrorException(\"There are \" + userExtSources.size() + \"   extLogins: \" + login + \" for  extSourceType: \" + ExtSourcesManager.EXTSOURCE_IDP);\n+  }\n+  userExtSource = getUsersManagerImpl().addUserExtSource(sess, user, userExtSource);\n+  getPerunBl().getAuditer().log(sess, new UserExtSourceAddedToUser(userExtSource, user));\n+  return userExtSource;\n+ }\n+\n+ @Override\n+ public void removeUserExtSource(PerunSession sess, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException {\n+  //FIXME zkontrolovat zda na userExtSource neni navazan nejaky member\n+  //First remove all user extSource attributes before removing userExtSource\n+  try {\n+   getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, userExtSource);\n+  } catch (WrongReferenceAttributeValueException | WrongAttributeValueException ex) {\n+   throw new InternalErrorException(\"Can't remove userExtSource because there is problem with removing all it's attributes.\", ex);\n+  }\n+  getUsersManagerImpl().removeUserExtSource(sess, user, userExtSource);\n+  getPerunBl().getAuditer().log(sess, new UserExtSourceRemovedFromUser(userExtSource, user));\n+ }\n+\n+ @Override\n+ public void moveUserExtSource(PerunSession sess, User sourceUser, User targetUser, UserExtSource userExtSource) throws InternalErrorException {\n+  List<Attribute> userExtSourceAttributes = getPerunBl().getAttributesManagerBl().getAttributes(sess, userExtSource);\n+  Iterator<Attribute> iterator = userExtSourceAttributes.iterator();\n+  //remove all virtual attributes (we don't need to take care about them)\n+  while (iterator.hasNext()) {\n+   Attribute attribute = iterator.next();\n+   if (getPerunBl().getAttributesManagerBl().isVirtAttribute(sess, attribute)) iterator.remove();\n+  }\n+\n+  //remove userExtSource\n+\n+  try {\n+   this.removeUserExtSource(sess, sourceUser, userExtSource);\n+  } catch (UserExtSourceAlreadyRemovedException ex) {\n+   //this is little weird, will be better to report exception\n+   throw new InternalErrorException(\"UserExtSource was unexpectedly removed while moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser);\n+  }\n+\n+  //change userId for userExtSource\n+  userExtSource.setUserId(targetUser.getId());\n+  //add userExtSource to the targetUser\n+\n+  try {\n+   userExtSource = this.addUserExtSource(sess, targetUser, userExtSource);\n+  } catch (UserExtSourceExistsException ex) {\n+   //someone moved this UserExtSource before us\n+   throw new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser + \" failed because someone already moved this UserExtSource.\", ex);\n+  }\n+\n+  //set all attributes back to this UserExtSource when it is already assigned to the targetUser\n+\n+  try {\n+   getPerunBl().getAttributesManagerBl().setAttributes(sess, userExtSource, userExtSourceAttributes);\n+  } catch (WrongAttributeAssignmentException |WrongReferenceAttributeValueException| WrongAttributeValueException ex) {\n+   throw new InternalErrorException(\"Moving \" + userExtSource + \" from \" + sourceUser + \" to \" + targetUser + \" failed because of problem with setting removed attributes back to the UserExtSource.\", ex);\n+  }\n+ }\n+\n+ @Override\n+ public UserExtSource getUserExtSourceByExtLogin(PerunSession sess, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException {\n+  return getUsersManagerImpl().getUserExtSourceByExtLogin(sess, source, extLogin);\n+ }\n+\n+ @Override\n+ public List<Vo> getVosWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().getVosWhereUserIsAdmin(sess, user);\n+ }\n+\n+ @Override\n+ public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, user);\n+ }\n+\n+ @Override\n+ public List<Group> getGroupsWhereUserIsAdmin(PerunSession sess, Vo vo, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().getGroupsWhereUserIsAdmin(sess, vo, user);\n+ }\n+\n+ @Override\n+ public List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().getVosWhereUserIsMember(sess, user);\n+ }\n+\n+ @Override\n+ public List<RichUser> getRichUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = this.getUsersWithoutVoAssigned(sess);\n+  return this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n+ }\n+\n+ @Override\n+ public List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException {\n+  return usersManagerImpl.getUsersWithoutVoAssigned(sess);\n+ }\n+\n+ @Override\n+ public List<User> getUsersWithoutSpecificVo(PerunSession sess, Vo vo, String searchString) throws InternalErrorException {\n+  List<User> allSearchingUsers = new ArrayList<User>();\n+  List<User> allVoUsers = new ArrayList<User>();\n+  allSearchingUsers = this.findUsers(sess, searchString);\n+  allVoUsers = getUsersManagerImpl().getUsersByVo(sess, vo);\n+  allSearchingUsers.removeAll(allVoUsers);\n+  return allSearchingUsers;\n+ }\n+\n+ @Override\n+ public List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+  return getPerunBl().getResourcesManagerBl().getAllowedResources(sess, facility, user);\n+ }\n+\n+ @Override\n+ public List<Resource> getAssignedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+  List<Resource> allowedResources = new ArrayList<Resource>();\n+  List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+  for (Resource resource : resources) {\n+   if (getPerunBl().getResourcesManagerBl().isUserAssigned(sess, user, resource)) {\n+    allowedResources.add(resource);\n+   }\n+  }\n+\n+  return allowedResources;\n+ }\n+\n+ @Override\n+ public List<Resource> getAllowedResources(PerunSession sess, User user) throws InternalErrorException {\n+  //TODO do this method in more efficient way\n+  Set<Resource> resources = new HashSet<Resource>();\n+  List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+  for (Member member : members) {\n+   if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+    resources.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member));\n+   }\n+  }\n+\n+  return new ArrayList<Resource>(resources);\n+ }\n+\n+ @Override\n+ public List<Resource> getAssignedResources(PerunSession sess, User user) throws InternalErrorException {\n+  Set<Resource> resources = new HashSet<Resource>();\n+  List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+  for (Member member : members) {\n+   resources.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member));\n+  }\n+\n+  return new ArrayList<Resource>(resources);\n+ }\n+\n+ @Override\n+ public List<RichResource> getAssignedRichResources(PerunSession sess, User user) throws InternalErrorException {\n+  Set<RichResource> resources = new HashSet<RichResource>();\n+  List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+  for (Member member : members) {\n+   resources.addAll(getPerunBl().getResourcesManagerBl().getAssignedRichResources(sess, member));\n+  }\n+\n+  return new ArrayList<RichResource>(resources);\n+ }\n+\n+\n+ private List<User> getUsersByVirtualAttribute(PerunSession sess, AttributeDefinition attributeDef, String attributeValue) throws InternalErrorException {\n+  // try to find method in attribute module\n+  UserVirtualAttributesModuleImplApi attributeModule = perunBl.getAttributesManagerBl().getUserVirtualAttributeModule(sess, attributeDef);\n+  List<User> listOfUsers = attributeModule.searchInAttributesValues((PerunSessionImpl) sess, attributeValue);\n+  if (listOfUsers != null) {\n+   return listOfUsers;\n+  }\n+\n+  // iterate over all users\n+  List<User> matchedUsers = new ArrayList<User>();\n+  for (User user : perunBl.getUsersManagerBl().getUsers(sess)) {\n+   Attribute userAttribute;\n+   try {\n+    userAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, user, attributeDef.getName());\n+   } catch (AttributeNotExistsException e) {\n+    throw new InternalErrorException(e);\n+   } catch (WrongAttributeAssignmentException e) {\n+    throw new InternalErrorException(e);\n+   }\n+   if (userAttribute.valueContains((String) attributeValue)) {\n+    matchedUsers.add(user);\n+   }\n+  }\n+\n+  return matchedUsers;\n+ }\n+\n+ @Override\n+ public List<User> getUsersByAttributeValue(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n+  try {\n+   AttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+   if (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n+    return this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n+   } else {\n+    return this.getUsersManagerImpl().getUsersByAttributeValue(sess, attributeDef, attributeValue);\n+   }\n+  } catch (AttributeNotExistsException e) {\n+   throw new ConsistencyErrorException(\"Attribute name:'\" + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException {\n+  return this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n+ }\n+\n+ /**\n+  * Search attributes directly in the DB only if the attr is def or opt and value is type of String, otherwise load all users and search in a loop.\n+  */\n+\n+ @Override\n+ public List<User> getUsersByAttribute(PerunSession sess, String attributeName, String attributeValue) throws InternalErrorException {\n+  try {\n+   AttributeDefinition attributeDef = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+   if (perunBl.getAttributesManagerBl().isVirtAttribute(sess, attributeDef)) {\n+    return this.getUsersByVirtualAttribute(sess, attributeDef, attributeValue);\n+   } else {\n+    Attribute attribute = new Attribute(attributeDef);\n+    attribute.setValue(attributeValue);\n+    return this.getUsersManagerImpl().getUsersByAttribute(sess, attribute);\n+   }\n+  } catch (AttributeNotExistsException e) {\n+   throw new ConsistencyErrorException(\"Attribute name:'\" + attributeName + \"', value:'\" + attributeValue + \"' not exists \", e);\n+  }\n+ }\n+\n+ @Override\n+ public List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException {\n+  return this.getUsersManagerImpl().findUsers(sess, searchString);\n+ }\n+\n+ @Override\n+ public List<RichUser> findRichUsers(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = this.getUsersManagerImpl().findUsers(sess, searchString);\n+  return this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n+ }\n+\n+ @Override\n+ public List<RichUser> findRichUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n+  return this.convertRichUsersToRichUsersWithAttributes(sess, this.convertUsersToRichUsers(sess, users));\n+ }\n+\n+ @Override\n+ public List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException {\n+  return this.getUsersManagerImpl().findUsersByName(sess, searchString);\n+ }\n+\n+ @Override\n+ public List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException {\n+  // Convert to lower case\n+  titleBefore = titleBefore.toLowerCase();\n+  firstName = firstName.toLowerCase();\n+  middleName = middleName.toLowerCase();\n+  lastName = lastName.toLowerCase();\n+  titleAfter = titleAfter.toLowerCase();\n+  return this.getUsersManagerImpl().findUsersByName(sess, titleBefore, firstName, middleName, lastName, titleAfter);\n+ }\n+\n+ @Override\n+ public List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException {\n+  return this.getUsersManagerImpl().findUsersByExactName(sess, searchString);\n+ }\n+\n+ public List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException {\n+  return this.getUsersManagerImpl().findUsersByExactMatch(sess, searchString);\n+ }\n+\n+ @Override\n+ public List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException {\n+  return getUsersManagerImpl().getUsersByIds(sess, usersIds);\n+ }\n+\n+ @Override\n+ public boolean isLoginAvailable(PerunSession sess, String loginNamespace, String login) throws InternalErrorException {\n+  if (loginNamespace == null || login == null) {\n+   throw new InternalErrorException(new NullPointerException(\"loginNamespace cannot be null, nor login\"));\n+  }\n+\n+  // Create Attribute\n+\n+  try {\n+   AttributeDefinition attributeDefinition = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+   Attribute attribute = new Attribute(attributeDefinition);\n+   attribute.setValue(login);\n+\n+   // Create empty user\n+   User user = new User();\n+\n+   // Check attribute value, if the login is already occupied, then WrongAttributeValueException exception is thrown\n+   getPerunBl().getAttributesManagerBl().checkAttributeValue(sess, user, attribute);\n+   return true;\n+  } catch (AttributeNotExistsException e) {\n+   throw new InternalErrorException(e);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  } catch (WrongReferenceAttributeValueException e) {\n+   throw new InternalErrorException(e);\n+  } catch (WrongAttributeValueException e) {\n+   return false;\n+  }\n+\n+  //TODO Check also reserved logins in Registrar\n+ }\n+ /**\n+  * Gets the usersManagerImpl for this instance.\n+  *\n+  * @return The usersManagerImpl.\n+  */\n+\n+ public UsersManagerImplApi getUsersManagerImpl() {\n+  return this.usersManagerImpl;\n+ }\n+\n+ /**\n+  * Gets the perunBl for this instance.\n+  *\n+  * @return The perunBl.\n+  */\n+\n+ public PerunBl getPerunBl() {\n+  return this.perunBl;\n+ }\n+\n+ @Override\n+ public void checkUserExists(PerunSession sess, User user) throws InternalErrorException, UserNotExistsException {\n+  getUsersManagerImpl().checkUserExists(sess, user);\n+ }\n+\n+ @Override\n+ public void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException {\n+  getUsersManagerImpl().checkReservedLogins(sess, namespace, login);\n+ }\n+\n+ @Override\n+ public void checkUserExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException {\n+  getUsersManagerImpl().checkUserExtSourceExists(sess, userExtSource);\n+ }\n+\n+ @Override\n+ public void checkUserExtSourceExistsById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException {\n+  getUsersManagerImpl().checkUserExtSourceExistsById(sess, id);\n+ }\n+\n+ @Override\n+ public boolean userExtSourceExists(PerunSession sess, UserExtSource userExtSource) throws InternalErrorException {\n+  return getUsersManagerImpl().userExtSourceExists(sess, userExtSource);\n+ }\n+\n+ public void setPerunBl(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+ }\n+\n+ @Override\n+ public boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException {\n+  return getUsersManagerImpl().isUserPerunAdmin(sess, user);\n+ }\n+\n+ @Override\n+ public RichUser filterOnlyAllowedAttributes(PerunSession sess, RichUser richUser) throws InternalErrorException {\n+  if (richUser == null) throw new InternalErrorException(\"RichUser can't be null.\");\n+  //Filtering users attributes\n+  if (richUser.getUserAttributes() != null) {\n+   List<Attribute> userAttributes = richUser.getUserAttributes();\n+   List<Attribute> allowedUserAttributes = new ArrayList<Attribute>();\n+   for (Attribute userAttr : userAttributes) {\n+    if (AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, userAttr, richUser)) {\n+     userAttr.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, userAttr, richUser));\n+     allowedUserAttributes.add(userAttr);\n+    }\n+   }\n+   richUser.setUserAttributes(allowedUserAttributes);\n+  }\n+\n+  return richUser;\n+ }\n+\n+ @Override\n+ public List<RichUser> filterOnlyAllowedAttributes(PerunSession sess, List<RichUser> richUsers) throws InternalErrorException {\n+  List<RichUser> filteredRichUsers = new ArrayList<RichUser>();\n+  if (richUsers == null || richUsers.isEmpty())\n+   return filteredRichUsers;\n+  for (RichUser ru : richUsers) {\n+   filteredRichUsers.add(this.filterOnlyAllowedAttributes(sess, ru));\n+  }\n+\n+  return filteredRichUsers;\n+ }\n+\n+ @Override\n+ public List<User> getUsersByPerunBean(PerunSession sess, PerunBean perunBean) throws InternalErrorException {\n+  List<User> users = new ArrayList<User>();\n+\n+  //All possible useful objects\n+  Vo vo = null;\n+  Facility facility = null;\n+  Group group = null;\n+  Member member = null;\n+  User user = null;\n+  Host host = null;\n+  Resource resource = null;\n+\n+  //Get object for primaryHolder of aidingAttr\n+  if (perunBean != null) {\n+   if (perunBean instanceof Vo) vo = (Vo) perunBean;\n+   else if (perunBean instanceof Facility) facility = (Facility) perunBean;\n+   else if (perunBean instanceof Group) group = (Group) perunBean;\n+   else if (perunBean instanceof Member) member = (Member) perunBean;\n+   else if (perunBean instanceof User) user = (User) perunBean;\n+   else if (perunBean instanceof Host) host = (Host) perunBean;\n+   else if (perunBean instanceof Resource) resource = (Resource) perunBean;\n+   else {\n+         throw new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n+        }\n+  } else {\n+   throw new InternalErrorException(\"Aiding attribtue must have primaryHolder which is not null.\");\n+  }\n+  if (group != null) {\n+   List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+   List<User> usersFromGroup = new ArrayList<User>();\n+   for (Member memberElement : members) {\n+    usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+   }\n+\n+   for (User userElement : usersFromGroup) {\n+    users.add(userElement);\n+   }\n+  } else if (member != null) {\n+   user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   users.add(user);\n+  } else if (resource != null) {\n+          List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+          users.addAll(usersFromResource);\n+         } else if (user != null) {\n+          users.add(user);\n+         } else if (host != null) {\n+                 facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                 List<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                 for (User userElement : usersFromHost) {\n+                  users.add(userElement);\n+                 }\n+                } else if (facility != null) {\n+                 List<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                 for (User userElement : usersFromFacility) {\n+                  users.add(userElement);\n+                 }\n+                } else if (vo != null) {\n+                        List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                        List<User> usersFromVo = new ArrayList<User>();\n+                        for (Member memberElement : members) {\n+                         usersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                        }\n+\n+                        for (User userElement : usersFromVo) {\n+                         users.add(userElement);\n+                        }\n+                       }\n+\n+  return users;\n+ }\n+\n+ /**\n+  * Method which calls external program for password reservation.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  */\n+\n+ @Override\n+ public void reserveRandomPassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+  log.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+  // Get login.\n+\n+  try {\n+   Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess,\n+user,\n+AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+   if (attr.getValue() == null) {\n+    throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+   }\n+\n+   // Create the password\n+\n+   try {\n+    this.managePassword(sess, PASSWORD_RESERVE_RANDOM, (String) attr.getValue(), loginNamespace, null);\n+   } catch (PasswordCreationFailedRuntimeException e) {\n+    throw new PasswordCreationFailedException(e);\n+   } catch (PasswordOperationTimeoutRuntimeException e) {\n+    throw new PasswordOperationTimeoutException(e);\n+   } catch (PasswordStrengthFailedRuntimeException e) {\n+    throw new PasswordStrengthFailedException(e);\n+   }\n+  } catch (AttributeNotExistsException e) {\n+   throw new LoginNotExistsException(e);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password reservation.\n+  *\n+  * @param sess\n+  * @param userLogin\n+  * @param loginNamespace\n+  * @param password\n+  */\n+\n+ @Override\n+ public void reservePassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+  log.info(\"Reserving password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+  // Reserve the password\n+\n+  try {\n+   this.managePassword(sess, PASSWORD_RESERVE, (String) userLogin, loginNamespace, password);\n+  } catch (PasswordCreationFailedRuntimeException e) {\n+   throw new PasswordCreationFailedException(e);\n+  } catch (PasswordOperationTimeoutRuntimeException e) {\n+   throw new PasswordOperationTimeoutException(e);\n+  } catch (PasswordStrengthFailedRuntimeException e) {\n+   throw new PasswordStrengthFailedException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password reservation. User and login is already known.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  * @param password\n+  */\n+\n+ @Override\n+ public void reservePassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+  log.info(\"Reserving password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+  // Get login.\n+\n+  try {\n+   Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess,\n+user,\n+AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+   if (attr.getValue() == null) {\n+    throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+   }\n+\n+   // Create the password\n+\n+   try {\n+    this.managePassword(sess, PASSWORD_RESERVE, (String) attr.getValue(), loginNamespace, password);\n+   } catch (PasswordCreationFailedRuntimeException e) {\n+    throw new PasswordCreationFailedException(e);\n+   } catch (PasswordOperationTimeoutRuntimeException e) {\n+    throw new PasswordOperationTimeoutException(e);\n+   } catch (PasswordStrengthFailedRuntimeException e) {\n+    throw new PasswordStrengthFailedException(e);\n+   }\n+  } catch (AttributeNotExistsException e) {\n+   throw new LoginNotExistsException(e);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password validation.\n+  *\n+  * @param sess\n+  * @param userLogin\n+  * @param loginNamespace\n+  */\n+\n+ @Override\n+ public void validatePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException {\n+  log.info(\"Validating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+  // Validate the password\n+\n+  try {\n+   this.managePassword(sess, PASSWORD_VALIDATE, (String) userLogin, loginNamespace, null);\n+  } catch (PasswordCreationFailedRuntimeException e) {\n+   throw new PasswordCreationFailedException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password validation. User and login is already known.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  */\n+\n+ @Override\n+ public void validatePassword(PerunSession sess, User user, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException {\n+  log.info(\"Validating password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+  // Get login.\n+\n+  try {\n+   Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess,\n+user,\n+AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+   if (attr.getValue() == null) {\n+    throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+   }\n+\n+   // Create the password\n+\n+   try {\n+    this.managePassword(sess, PASSWORD_VALIDATE, (String) attr.getValue(), loginNamespace, null);\n+   } catch (PasswordCreationFailedRuntimeException e) {\n+    throw new PasswordCreationFailedException(e);\n+   }\n+  } catch (AttributeNotExistsException e) {\n+   throw new LoginNotExistsException(e);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password validation. User and login is already known.\n+  *\n+  * @param sess\n+  * @param userLogin\n+  * @param loginNamespace\n+  */\n+\n+ @Override\n+ public void validatePasswordAndSetExtSources(PerunSession sess, User user, String userLogin, String loginNamespace) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException, ExtSourceNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  /*\n+   * FIXME This method is very badly writen - it should be rewrited or refactored\n+   */\n+  try {\n+   if (loginNamespace.equals(\"einfra\")) {\n+    List<String> kerberosLogins = new ArrayList<String>();\n+\n+    // Set META and EINFRA userExtSources\n+    ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"META\");\n+    UserExtSource ues = new UserExtSource(extSource, userLogin + \"@META\");\n+    ues.setLoa(0);\n+\n+    try {\n+     getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+    } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+    }\n+    extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA\");\n+    ues = new UserExtSource(extSource, userLogin + \"@EINFRA\");\n+    ues.setLoa(0);\n+\n+    try {\n+     getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+    } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+    }\n+    extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://login.ics.muni.cz/idp/shibboleth\");\n+    ues = new UserExtSource(extSource, userLogin + \"@meta.cesnet.cz\");\n+    ues.setLoa(0);\n+\n+    try {\n+     getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+    } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+    }\n+\n+    // Store also Kerberos logins\n+    Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+    if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+     kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+    }\n+\n+    boolean someChange = false;\n+    if (!kerberosLogins.contains(userLogin + \"@EINFRA\")) {\n+     kerberosLogins.add(userLogin + \"@EINFRA\");\n+     someChange = true;\n+    }\n+    if (!kerberosLogins.contains(userLogin + \"@META\")) {\n+     kerberosLogins.add(userLogin + \"@META\");\n+     someChange = true;\n+    }\n+    if (someChange) {\n+     kerberosLoginsAttr.setValue(kerberosLogins);\n+     getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+    }\n+   } else if (loginNamespace.equals(\"egi-ui\")) {\n+    List<String> kerberosLogins = new ArrayList<String>();\n+    ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EGI\");\n+    UserExtSource ues = new UserExtSource(extSource, userLogin + \"@EGI\");\n+    ues.setLoa(0);\n+\n+    try {\n+     getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+    } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+    }\n+\n+    // Store also Kerberos logins\n+    Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+    if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+     kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+    }\n+    if (!kerberosLogins.contains(userLogin + \"@EGI\")) {\n+     kerberosLogins.add(userLogin + \"@EGI\");\n+     kerberosLoginsAttr.setValue(kerberosLogins);\n+     getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+    }\n+   } else if (loginNamespace.equals(\"sitola\")) {\n+           List<String> kerberosLogins = new ArrayList<String>();\n+           ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"SITOLA.FI.MUNI.CZ\");\n+           UserExtSource ues = new UserExtSource(extSource, userLogin + \"@SITOLA.FI.MUNI.CZ\");\n+           ues.setLoa(0);\n+\n+           try {\n+            getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+           } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+           }\n+\n+    // Store also Kerberos logins\n+           Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+           if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+            kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+           }\n+           if (!kerberosLogins.contains(userLogin + \"@SITOLA.FI.MUNI.CZ\")) {\n+            kerberosLogins.add(userLogin + \"@SITOLA.FI.MUNI.CZ\");\n+            kerberosLoginsAttr.setValue(kerberosLogins);\n+            getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+           }\n+          } else if (loginNamespace.equals(\"ics-muni-cz\")) {\n+           List<String> kerberosLogins = new ArrayList<String>();\n+           ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ICS.MUNI.CZ\");\n+           UserExtSource ues = new UserExtSource(extSource, userLogin + \"@ICS.MUNI.CZ\");\n+           ues.setLoa(0);\n+\n+           try {\n+            getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+           } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+           }\n+\n+    // Store also Kerberos logins\n+           Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+           if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+            kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+           }\n+           if (!kerberosLogins.contains(userLogin + \"@ICS.MUNI.CZ\")) {\n+            kerberosLogins.add(userLogin + \"@ICS.MUNI.CZ\");\n+            kerberosLoginsAttr.setValue(kerberosLogins);\n+            getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+           }\n+          } else if (loginNamespace.equals(\"mu\")) {\n+                  ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://idp2.ics.muni.cz/idp/shibboleth\");\n+                  UserExtSource ues = new UserExtSource(extSource, userLogin + \"@muni.cz\");\n+                  ues.setLoa(2);\n+\n+                  try {\n+                   getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                  } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+                  }\n+                 } else if (loginNamespace.equals(\"vsup\")) {\n+\n+    // Add UES in their ActiveDirectory to access Perun by it\n+                  ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"AD\");\n+                  UserExtSource ues = new UserExtSource(extSource, userLogin);\n+                  ues.setLoa(0);\n+\n+                  try {\n+                   getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                  } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+                  }\n+                 } else if (loginNamespace.equals(\"elixir\")) {\n+                         ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"ELIXIR-EUROPE.ORG\");\n+                         UserExtSource ues = new UserExtSource(extSource, userLogin + \"@ELIXIR-EUROPE.ORG\");\n+                         ues.setLoa(0);\n+\n+                         try {\n+                          getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                         } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+                         }\n+                         List<String> kerberosLogins = new ArrayList<String>();\n+\n+    // Store also Kerberos logins\n+                         Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                         if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                          kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                         }\n+                         if (!kerberosLogins.contains(userLogin + \"@ELIXIR-EUROPE.ORG\")) {\n+                          kerberosLogins.add(userLogin + \"@ELIXIR-EUROPE.ORG\");\n+                          kerberosLoginsAttr.setValue(kerberosLogins);\n+                          getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                         }\n+                        } else if (loginNamespace.equals(\"einfra-services\")) {\n+                         ExtSource extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"EINFRA-SERVICES\");\n+                         UserExtSource ues = new UserExtSource(extSource, userLogin + \"@EINFRA-SERVICES\");\n+                         ues.setLoa(0);\n+\n+                         try {\n+                          getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                         } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+                         }\n+                         List<String> kerberosLogins = new ArrayList<String>();\n+\n+    // Store also Kerberos logins\n+                         Attribute kerberosLoginsAttr = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":\" + \"kerberosLogins\");\n+                         if (kerberosLoginsAttr != null && kerberosLoginsAttr.getValue() != null) {\n+                          kerberosLogins.addAll((List<String>) kerberosLoginsAttr.getValue());\n+                         }\n+                         if (!kerberosLogins.contains(userLogin + \"@EINFRA-SERVICES\")) {\n+                          kerberosLogins.add(userLogin + \"@EINFRA-SERVICES\");\n+                          kerberosLoginsAttr.setValue(kerberosLogins);\n+                          getPerunBl().getAttributesManagerBl().setAttribute(sess, user, kerberosLoginsAttr);\n+                         }\n+                        } else if (loginNamespace.equals(\"dummy\")) {\n+    //dummy namespace for testing, it has accompanying DummyPasswordModule that just generates random numbers\n+                                ExtSource extSource;\n+                                try {\n+                                 extSource = getPerunBl().getExtSourcesManagerBl().getExtSourceByName(sess, \"https://dummy\");\n+                                } catch (ExtSourceNotExistsException e) {\n+                                 extSource = new ExtSource(\"https://dummy\", ExtSourcesManager.EXTSOURCE_IDP);\n+\n+                                 try {\n+                                  extSource = getPerunBl().getExtSourcesManagerBl().createExtSource(sess, extSource, null);\n+                                 } catch (ExtSourceExistsException e1) {\n+                                  log.warn(\"impossible or race condition\", e1);\n+                                 }\n+                                }\n+                                UserExtSource ues = new UserExtSource(extSource, userLogin + \"@dummy\");\n+                                ues.setLoa(2);\n+\n+                                try {\n+                                 getPerunBl().getUsersManagerBl().addUserExtSource(sess, user, ues);\n+                                } catch (UserExtSourceExistsException ex) {\n+     //this is OK\n+\n+                                }\n+                               }\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  } catch (AttributeNotExistsException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  validatePassword(sess, user, loginNamespace);\n+ }\n+\n+ /**\n+  * Method which calls external program for password creation.\n+  *\n+  * @param sess\n+  * @param userLogin\n+  * @param loginNamespace\n+  * @param password\n+  */\n+\n+ @Override\n+ @Deprecated\n+ public void createPassword(PerunSession sess, String userLogin, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException {\n+  log.info(\"Creating password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+  // Create the password\n+\n+  try {\n+   this.managePassword(sess, PASSWORD_CREATE, (String) userLogin, loginNamespace, password);\n+  } catch (PasswordCreationFailedRuntimeException e) {\n+   throw new PasswordCreationFailedException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password creation. User and login is already known.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param loginNamespace\n+  * @param password\n+  */\n+\n+ @Override\n+ @Deprecated\n+ public void createPassword(PerunSession sess, User user, String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException {\n+  log.info(\"Creating password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+  // Get login.\n+\n+  try {\n+   Attribute attr = getPerunBl().getAttributesManagerBl().getAttribute(sess,\n+user,\n+AttributesManager.NS_USER_ATTR_DEF + \":\" + AttributesManager.LOGIN_NAMESPACE + \":\" + loginNamespace);\n+   if (attr.getValue() == null) {\n+    throw new LoginNotExistsException(\"Attribute containing login has empty value. Namespace: \" + loginNamespace);\n+   }\n+\n+   // Create the password\n+\n+   try {\n+    this.managePassword(sess, PASSWORD_CREATE, (String) attr.getValue(), loginNamespace, password);\n+   } catch (PasswordCreationFailedRuntimeException e) {\n+    throw new PasswordCreationFailedException(e);\n+   }\n+  } catch (AttributeNotExistsException e) {\n+   throw new LoginNotExistsException(e);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password deletion.\n+  *\n+  * @param sess\n+  * @param userLogin\n+  * @param loginNamespace\n+  */\n+\n+ @Override\n+ public void deletePassword(PerunSession sess, String userLogin, String loginNamespace) throws InternalErrorException, LoginNotExistsException, PasswordDeletionFailedException, PasswordOperationTimeoutException {\n+  log.info(\"Deleting password for {} in login-namespace {}.\", userLogin, loginNamespace);\n+\n+  // Delete the password\n+\n+  try {\n+   this.managePassword(sess, PASSWORD_DELETE, (String) userLogin, loginNamespace, null);\n+  } catch (PasswordDeletionFailedRuntimeException e) {\n+   throw new PasswordDeletionFailedException(e);\n+  } catch (LoginNotExistsRuntimeException e) {\n+   throw new LoginNotExistsException(e);\n+  } catch (PasswordOperationTimeoutRuntimeException e) {\n+   throw new PasswordOperationTimeoutException(e);\n+  }\n+ }\n+\n+ /**\n+  * Method which calls external program for password change.\n+  */\n+\n+ @Override\n+ public void changePassword(PerunSession sess, User user, String loginNamespace, String oldPassword, String newPassword, boolean checkOldPassword) throws InternalErrorException, LoginNotExistsException, PasswordDoesntMatchException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+  log.info(\"Changing password for {} in login-namespace {}.\", user, loginNamespace);\n+\n+  // Get User login in loginNamespace\n+  Attribute userLogin;\n+  try {\n+   userLogin = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+  } catch (AttributeNotExistsException e) {\n+   throw new LoginNotExistsException(e);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  }\n+\n+  // Check password if it was requested\n+  if (checkOldPassword) {\n+   try {\n+    this.managePassword(sess, PASSWORD_CHECK, (String) userLogin.getValue(), loginNamespace, oldPassword);\n+   } catch (PasswordDoesntMatchRuntimeException e) {\n+    throw new PasswordDoesntMatchException(e);\n+   } catch (PasswordOperationTimeoutRuntimeException e) {\n+    throw new PasswordOperationTimeoutException(e);\n+   }\n+  }\n+\n+  // Change the password\n+\n+  try {\n+   this.managePassword(sess, PASSWORD_CHANGE, (String) userLogin.getValue(), loginNamespace, newPassword);\n+  } catch (PasswordChangeFailedRuntimeException e) {\n+   throw new PasswordChangeFailedException(e);\n+  } catch (PasswordOperationTimeoutRuntimeException e) {\n+   throw new PasswordOperationTimeoutException(e);\n+  } catch (PasswordStrengthFailedRuntimeException e) {\n+   throw new PasswordStrengthFailedException(e);\n+  }\n+\n+  //validate and set user ext sources\n+\n+  try {\n+   this.validatePasswordAndSetExtSources(sess, user, (String) userLogin.getValue(), loginNamespace);\n+  } catch (PasswordCreationFailedException ex) {\n+   throw new PasswordChangeFailedException(ex);\n+  } catch (ExtSourceNotExistsException ex) {\n+   throw new InternalErrorException(ex);\n+  } catch (AttributeValueException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ /**\n+  * Calls external program which do the job with the password.\n+  *\n+  * Return codes of the external program\n+  * If password check fails then return 1\n+  * If there is no handler for loginNamespace return 2\n+  * If setting of the new password failed return 3\n+  *\n+  * @param sess\n+  * @param operation\n+  * @param userLogin\n+  * @param loginNamespace\n+  * @param password\n+  * @throws InternalErrorException\n+  */\n+\n+ protected void managePassword(PerunSession sess, String operation, String userLogin, String loginNamespace, String password) throws InternalErrorException {\n+\n+  // If new PWDMGR module exists, use-it\n+  PasswordManagerModule module = null;\n+  try {\n+   module = getPasswordManagerModule(sess, loginNamespace);\n+  } catch (Exception ex) {\n+   // silently skip\n+\n+  }\n+  if (module != null) {\n+   if (operation.equals(PASSWORD_RESERVE)) {\n+    try {\n+     module.reservePassword(sess, userLogin, password);\n+     return;\n+    } catch (Exception ex) {\n+     throw new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+    }\n+   }\n+   if (operation.equals(PASSWORD_RESERVE_RANDOM)) {\n+    try {\n+     module.reserveRandomPassword(sess, userLogin);\n+     return;\n+    } catch (Exception ex) {\n+     throw new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+    }\n+   }\n+   if (operation.equals(PASSWORD_CHECK)) {\n+    try {\n+     module.checkPassword(sess, userLogin, password);\n+     return;\n+    } catch (Exception ex) {\n+     throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n+    }\n+   }\n+   if (operation.equals(PASSWORD_VALIDATE)) {\n+    module.validatePassword(sess, userLogin);\n+    return;\n+   }\n+   if (operation.equals(PASSWORD_CHANGE)) {\n+    try {\n+     module.changePassword(sess, userLogin, password);\n+     return;\n+    } catch (Exception ex) {\n+     throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+    }\n+   }\n+   if (operation.equals(PASSWORD_DELETE)) {\n+    try {\n+     module.deletePassword(sess, userLogin);\n+     return;\n+    } catch (Exception ex) {\n+     throw new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+    }\n+   }\n+  }\n+\n+  // use good old way\n+\n+  // Check validity of original password\n+  ProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getPasswordManagerProgram(), operation, loginNamespace, userLogin);\n+  Process process;\n+  try {\n+   process = pb.start();\n+  } catch (IOException e) {\n+   throw new InternalErrorException(e);\n+  }\n+  InputStream es = process.getErrorStream();\n+  if (operation.equals(PASSWORD_CHANGE) || operation.equals(PASSWORD_CHECK) || operation.equals(PASSWORD_RESERVE)) {\n+   OutputStream os = process.getOutputStream();\n+   if (password == null || password.isEmpty()) {\n+    throw new EmptyPasswordRuntimeException(\"Password for \" + loginNamespace + \":\" + userLogin + \" cannot be empty.\");\n+   }\n+   // Write password to the stdin of the program\n+   PrintWriter pw = new PrintWriter(os, true);\n+   pw.write(password);\n+   pw.close();\n+  }\n+\n+  // If non-zero exit code is returned, then try to read error output\n+\n+  try {\n+   if (process.waitFor() != 0) {\n+    if (process.exitValue() == 1) {\n+     throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n+    } else if (process.exitValue() == 3) {\n+     throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+    } else if (process.exitValue() == 4) {\n+            throw new PasswordCreationFailedRuntimeException(\"Password creation failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+           } else if (process.exitValue() == 5) {\n+            throw new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+           } else if (process.exitValue() == 6) {\n+                   throw new LoginNotExistsRuntimeException(\"User login doesn't exists in underlying system for \" + loginNamespace + \":\" + userLogin + \".\");\n+                  } else if (process.exitValue() == 11) {\n+                   throw new PasswordStrengthFailedRuntimeException(\"Password to set doesn't match expected restrictions for \" + loginNamespace + \":\" + userLogin + \".\");\n+                  } else if (process.exitValue() == 12) {\n+                          throw new PasswordOperationTimeoutRuntimeException(\"Operation with password exceeded expected limit for \" + loginNamespace + \":\" + userLogin + \".\");\n+                         } else {\n+     // Some other error occured\n+                          BufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n+                          StringBuffer errorMsg = new StringBuffer();\n+                          String line;\n+                          try {\n+                           while ((line = inReader.readLine()) != null) {\n+                            errorMsg.append(line);\n+                           }\n+                          } catch (IOException e) {\n+                           throw new InternalErrorException(e);\n+                          }\n+\n+                          throw new InternalErrorException(errorMsg.toString());\n+                         }\n+   }\n+  } catch (InterruptedException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void createAlternativePassword(PerunSession sess,\n+                                       User user,\n+                                       String description,\n+                                       String loginNamespace, String password) throws InternalErrorException, PasswordCreationFailedException, LoginNotExistsException {\n+  try {\n+   manageAlternativePassword(sess, user, PASSWORD_CREATE, loginNamespace, null, description, password);\n+  } catch (PasswordCreationFailedRuntimeException ex) {\n+   throw new PasswordCreationFailedException(ex);\n+  } catch (LoginNotExistsRuntimeException ex) {\n+   throw new LoginNotExistsException(ex);\n+  } catch (PasswordDeletionFailedException ex) {\n+   //This probably never happend, if yes, its some error in code of manageAlternativePassword method\n+   throw new InternalErrorException(ex);\n+  }\n+ }\n+\n+ @Override\n+ public void deleteAlternativePassword(PerunSession sess, User user, String loginNamespace, String passwordId) throws InternalErrorException, PasswordDeletionFailedException, LoginNotExistsException {\n+  try {\n+   manageAlternativePassword(sess, user, PASSWORD_DELETE, loginNamespace, passwordId, null, null);\n+  } catch (PasswordDeletionFailedRuntimeException ex) {\n+   throw new PasswordDeletionFailedException(ex);\n+  } catch (LoginNotExistsRuntimeException ex) {\n+   throw new LoginNotExistsException(ex);\n+  }\n+ }\n+\n+ /**\n+  * Calls external program which do the job with the alternative passwords.\n+  *\n+  * Return codes of the external program\n+  * If password check fails then return 1\n+  * If there is no handler for loginNamespace return 2\n+  * If setting of the new password failed return 3\n+  *\n+  * @param sess\n+  * @param operation\n+  * @param loginNamespace\n+  * @param password\n+  * @throws InternalErrorException\n+  */\n+\n+ protected void manageAlternativePassword(PerunSession sess, User user, String operation, String loginNamespace, String passwordId, String description, String password) throws InternalErrorException, PasswordDeletionFailedException {\n+  //if password id == null\n+  if (passwordId == null) passwordId = Long.toString(System.currentTimeMillis());\n+\n+  //Prepare process builder\n+  ProcessBuilder pb = new ProcessBuilder(BeansUtils.getCoreConfig().getAlternativePasswordManagerProgram(), operation, loginNamespace, Integer.toString(user.getId()), passwordId);\n+\n+  //Set password in Perun to attribute\n+  if (operation.equals(PASSWORD_CREATE)) {\n+   try {\n+    Attribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n+    Map<String, String> altPassValue = new LinkedHashMap<>();\n+    //Set not null value from altPassword attribute of this user\n+    if (userAlternativePassword.getValue() != null) altPassValue = (LinkedHashMap<String, String>) userAlternativePassword.getValue();\n+    //If password already exists, throw an exception\n+    if (altPassValue.containsKey(description)) throw new ConsistencyErrorException(\"Password with this description already exists. Description: \" + description);\n+    //set new value to attribute\n+    altPassValue.put(description, passwordId);\n+    userAlternativePassword.setValue(altPassValue);\n+    //set new attribute with value to perun\n+    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n+   } catch (WrongAttributeAssignmentException |WrongAttributeValueException| WrongReferenceAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   } catch (AttributeNotExistsException ex) {\n+    throw new ConsistencyErrorException(ex);\n+   }\n+  } else if (operation.equals(PASSWORD_DELETE)) {\n+   try {\n+    Attribute userAlternativePassword = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, A_USER_DEF_ALT_PASSWORD_NAMESPACE + loginNamespace);\n+    Map<String, String> altPassValue = new LinkedHashMap<>();\n+    //Set not null value from altPassword attribute of this user\n+    if (userAlternativePassword.getValue() != null) altPassValue = (LinkedHashMap<String, String>) userAlternativePassword.getValue();\n+    //If password already exists, throw an exception\n+    if (!altPassValue.containsValue(passwordId)) throw new PasswordDeletionFailedException(\"Password not found by ID.\");\n+    //remove key with this value from map\n+    Set<String> keys = altPassValue.keySet();\n+    description = null;\n+    for (String key : keys) {\n+     String valueOfKey = altPassValue.get(key);\n+     if (valueOfKey.equals(passwordId)) {\n+      if (description != null) throw new ConsistencyErrorException(\"There is more than 1 password with same ID in value for user \" + user);\n+      description = key;\n+     }\n+    }\n+    if (description == null) throw new InternalErrorException(\"Password not found by ID.\");\n+    altPassValue.remove(description);\n+    //set new value for altPassword attribute for this user\n+    userAlternativePassword.setValue(altPassValue);\n+    getPerunBl().getAttributesManagerBl().setAttribute(sess, user, userAlternativePassword);\n+   } catch (WrongAttributeAssignmentException ex) {\n+    throw new InternalErrorException(ex);\n+   } catch (AttributeNotExistsException ex) {\n+    throw new ConsistencyErrorException(ex);\n+   } catch (WrongAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+  } else {\n+   throw new InternalErrorException(\"Not supported operation \" + operation);\n+  }\n+  Process process;\n+  try {\n+   process = pb.start();\n+  } catch (IOException e) {\n+   throw new InternalErrorException(e);\n+  }\n+  InputStream es = process.getErrorStream();\n+\n+  //Set pasword in remote system\n+  if (operation.equals(PASSWORD_CREATE)) {\n+   OutputStream os = process.getOutputStream();\n+   if (password == null || password.isEmpty()) {\n+    throw new EmptyPasswordRuntimeException(\"Alternative password for \" + loginNamespace + \" cannot be empty.\");\n+   }\n+   // Write password to the stdin of the program\n+   PrintWriter pw = new PrintWriter(os, true);\n+   pw.write(password);\n+   pw.close();\n+  }\n+\n+  // If non-zero exit code is returned, then try to read error output\n+\n+  try {\n+   if (process.waitFor() != 0) {\n+    if (process.exitValue() == 1) {\n+     //throw new PasswordDoesntMatchRuntimeException(\"Old password doesn't match for \" + loginNamespace + \":\" + userLogin + \".\");\n+     throw new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n+    } else if (process.exitValue() == 3) {\n+     //throw new PasswordChangeFailedRuntimeException(\"Password change failed for \" + loginNamespace + \":\" + userLogin + \".\");\n+     throw new InternalErrorException(\"Alternative password manager returns unexpected return code: \" + process.exitValue());\n+    } else if (process.exitValue() == 4) {\n+            throw new PasswordCreationFailedRuntimeException(\"Alternative password creation failed for \" + user + \". Namespace: \" + loginNamespace + \", description: \" + description + \".\");\n+           } else if (process.exitValue() == 5) {\n+            throw new PasswordDeletionFailedRuntimeException(\"Password deletion failed for \" + user + \". Namespace: \" + loginNamespace + \", passwordId: \" + passwordId + \".\");\n+           } else if (process.exitValue() == 6) {\n+                   throw new LoginNotExistsRuntimeException(\"User doesn't exists in underlying system for namespace \" + loginNamespace + \", user: \" + user + \".\");\n+                  } else if (process.exitValue() == 7) {\n+                   throw new InternalErrorException(\"Problem with creating user entry in underlying system \" + loginNamespace + \", user: \" + user + \".\");\n+                  } else {\n+     // Some other error occured\n+                   BufferedReader inReader = new BufferedReader(new InputStreamReader(es));\n+                   StringBuffer errorMsg = new StringBuffer();\n+                   String line;\n+                   try {\n+                    while ((line = inReader.readLine()) != null) {\n+                     errorMsg.append(line);\n+                    }\n+                   } catch (IOException e) {\n+                    throw new InternalErrorException(e);\n+                   }\n+\n+                   throw new InternalErrorException(errorMsg.toString());\n+                  }\n+   }\n+  } catch (InterruptedException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<RichUser> convertUsersToRichUsersWithAttributesByNames(PerunSession sess, List<User> users, List<String> attrNames) throws InternalErrorException {\n+\n+  // TODO - optimzization needed - at least there should be single select on RichUser object in impl !!\n+  List<RichUser> result = new ArrayList<RichUser>();\n+  AttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n+  for (User u : users) {\n+   RichUser ru = new RichUser(u, getUserExtSources(sess, u));\n+   ru.setUserAttributes(attributesManagerBl.getAttributes(sess, u, attrNames));\n+   result.add(ru);\n+  }\n+\n+  return result;\n+ }\n+\n+ @Override\n+ public RichUser convertUserToRichUserWithAttributesByNames(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n+  AttributesManagerBl attributesManagerBl = this.getPerunBl().getAttributesManagerBl();\n+  RichUser richUser = new RichUser(user, getUserExtSources(sess, user));\n+  richUser.setUserAttributes(attributesManagerBl.getAttributes(sess, user, attrNames));\n+  return richUser;\n+ }\n+\n+ @Override\n+ public List<RichUser> findRichUsersWithAttributes(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n+  if (attrsName == null || attrsName.isEmpty()) {\n+   return convertRichUsersToRichUsersWithAttributes(sess, findRichUsers(sess, searchString));\n+  } else {\n+   return convertUsersToRichUsersWithAttributesByNames(sess, findUsers(sess, searchString), attrsName);\n+  }\n+ }\n+\n+ @Override\n+ public List<RichUser> findRichUsersWithAttributesByExactMatch(PerunSession sess, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n+  if (attrsName == null || attrsName.isEmpty()) {\n+   return convertRichUsersToRichUsersWithAttributes(sess, findRichUsersByExactMatch(sess, searchString));\n+  } else {\n+   return convertUsersToRichUsersWithAttributesByNames(sess, findUsersByExactMatch(sess, searchString), attrsName);\n+  }\n+ }\n+\n+ @Override\n+ public List<RichUser> findRichUsersWithoutSpecificVoWithAttributes(PerunSession sess, Vo vo, String searchString, List<String> attrsName) throws InternalErrorException, UserNotExistsException, VoNotExistsException {\n+  if (attrsName == null || attrsName.isEmpty()) {\n+   return convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutSpecificVo(sess, vo, searchString)));\n+  } else {\n+   return convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutSpecificVo(sess, vo, searchString), attrsName);\n+  }\n+ }\n+\n+ @Override\n+ public List<RichUser> getRichUsersWithoutVoWithAttributes(PerunSession sess, List<String> attrsName) throws InternalErrorException, VoNotExistsException, UserNotExistsException {\n+  if (attrsName == null || attrsName.isEmpty()) {\n+   return convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, getUsersWithoutVoAssigned(sess)));\n+  } else {\n+   return convertUsersToRichUsersWithAttributesByNames(sess, getUsersWithoutVoAssigned(sess), attrsName);\n+  }\n+ }\n+\n+ @Override\n+ public List<RichUser> getAllRichUsersWithAttributes(PerunSession sess, boolean includedSpecificUsers, List<String> attrsName) throws InternalErrorException, UserNotExistsException {\n+  List<User> users = getUsers(sess);\n+  // optionally exclude specific users\n+  if (!includedSpecificUsers) {\n+   Iterator<User> it = users.iterator();\n+   while (it.hasNext()) {\n+    User u = it.next();\n+    if (u.isSpecificUser()) {\n+     it.remove();\n+    }\n+   }\n+  }\n+  if (attrsName == null || attrsName.isEmpty()) {\n+   return convertRichUsersToRichUsersWithAttributes(sess, convertUsersToRichUsers(sess, users));\n+  } else {\n+   return convertUsersToRichUsersWithAttributesByNames(sess, users, attrsName);\n+  }\n+ }\n+\n+ @Override\n+ public void setLogin(PerunSession sess, User user, String loginNamespace, String login) throws InternalErrorException {\n+\n+  // should always pass, since isLoginAvailable() in ENTRY does the same\n+  try {\n+   List<String> names = new ArrayList<String>();\n+   names.add(AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+\n+   // will always get attribute (empty, if not set)\n+   List<Attribute> checked = getPerunBl().getAttributesManagerBl().getAttributes(sess, user, names);\n+   if (checked.size() != 1) {\n+    throw new InternalErrorException(\"User should have only one login (attribute) in namespace\");\n+   }\n+   // if user already has login\n+   if (checked.get(0).getValue() != null) {\n+    throw new InternalErrorException(\"Can't set new login. User already has login in namespace: \" + loginNamespace);\n+   }\n+   checked.get(0).setValue(login);\n+   getPerunBl().getAttributesManagerBl().setAttributes(sess, user, checked);\n+  } catch (WrongAttributeAssignmentException e) {\n+   throw new InternalErrorException(e);\n+  } catch (WrongReferenceAttributeValueException e) {\n+   throw new InternalErrorException(e);\n+  } catch (WrongAttributeValueException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void requestPreferredEmailChange(PerunSession sess, String url, User user, String email) throws InternalErrorException, UserNotExistsException {\n+  int changeId = getUsersManagerImpl().requestPreferredEmailChange(sess, user, email);\n+  Utils.sendValidationEmail(user, url, email, changeId);\n+ }\n+\n+ @Override\n+ public String validatePreferredEmailChange(PerunSession sess, User user, String i, String m) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, AttributeNotExistsException {\n+  String email = getUsersManagerImpl().getPreferredEmailChangeRequest(sess, user, i, m);\n+  AttributeDefinition def = getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+  Attribute a = new Attribute(def);\n+  a.setValue(email);\n+\n+  // store attribute\n+  getPerunBl().getAttributesManagerBl().setAttribute(sess, user, a);\n+  getUsersManagerImpl().removeAllPreferredEmailChangeRequests(sess, user);\n+  return email;\n+ }\n+\n+ @Override\n+ public List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  List<String> list = getUsersManagerImpl().getPendingPreferredEmailChanges(sess, user);\n+  Attribute a = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+  if (a != null && a.getValue() != null) {\n+   Iterator<String> it = list.iterator();\n+   while (it.hasNext()) {\n+    String value = it.next();\n+    if (value.equals(BeansUtils.attributeValueToString(a))) {\n+     // remove pending change requests if they are already set in attribute\n+     it.remove();\n+    }\n+   }\n+  }\n+\n+  return list;\n+ }\n+\n+ @Override\n+ public User convertUserEmptyStringsInObjectAttributesIntoNull(User user) {\n+  //if user is null, return it back without change\n+  if (user == null)\n+   return user;\n+\n+  //convert all empty strings to null\n+  if (user.getFirstName() != null && user.getFirstName().isEmpty()) user.setFirstName(null);\n+  if (user.getMiddleName() != null && user.getMiddleName().isEmpty()) user.setMiddleName(null);\n+  if (user.getLastName() != null && user.getLastName().isEmpty()) user.setLastName(null);\n+  if (user.getTitleBefore() != null && user.getTitleBefore().isEmpty()) user.setTitleBefore(null);\n+  if (user.getTitleAfter() != null && user.getTitleAfter().isEmpty()) user.setTitleAfter(null);\n+  return user;\n+ }\n+\n+ @Override\n+ public void changeNonAuthzPassword(PerunSession sess, User user, String m, String password, String lang) throws InternalErrorException, UserNotExistsException, LoginNotExistsException, PasswordChangeFailedException, PasswordOperationTimeoutException, PasswordStrengthFailedException {\n+  String requestId = Utils.cipherInput(m, true);\n+  String namespace = getUsersManagerImpl().loadPasswordResetRequest(user, Integer.parseInt(requestId));\n+  if (namespace.isEmpty()) throw new InternalErrorException(\"Password reset request is not valid anymore or doesn't existed at all for User: \" + user);\n+  List<Attribute> logins = perunBl.getAttributesManagerBl().getLogins(sess, user);\n+  boolean found = false;\n+  for (Attribute a : logins) {\n+   if (a.getFriendlyNameParameter().equals(namespace)) found = true;\n+  }\n+  if (!found) throw new InternalErrorException(user.toString() + \" doesn't have login in namespace: \" + namespace);\n+\n+  // reset password without checking old\n+\n+  try {\n+   changePassword(sess, user, namespace, \"\", password, false);\n+  } catch (PasswordDoesntMatchException ex) {\n+   // shouldn't happen\n+   throw new InternalErrorException(ex);\n+  }\n+\n+  // was changed - send notification to all member's emails\n+  Set<String> emails = new HashSet<String>();\n+  try {\n+   Attribute a = perunBl.getAttributesManagerBl().getAttribute(sess, user, AttributesManager.NS_USER_ATTR_DEF + \":preferredMail\");\n+   if (a != null && a.getValue() != null) {\n+    emails.add((String) a.getValue());\n+   }\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  } catch (AttributeNotExistsException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+  for (Member member : members) {\n+   try {\n+    Attribute a = perunBl.getAttributesManagerBl().getAttribute(sess, member, AttributesManager.NS_MEMBER_ATTR_DEF + \":mail\");\n+    if (a != null && a.getValue() != null) {\n+     emails.add((String) a.getValue());\n+    }\n+   } catch (WrongAttributeAssignmentException ex) {\n+    throw new InternalErrorException(ex);\n+   } catch (AttributeNotExistsException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+\n+  // get template\n+  String subject;\n+  try {\n+   Attribute subjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang, AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n+   subject = (String) subjectTemplateAttribute.getValue();\n+   if (subject == null) {\n+    subjectTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\", AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailSubject:\" + namespace);\n+    subject = (String) subjectTemplateAttribute.getValue();\n+   }\n+  } catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  String message;\n+  try {\n+   Attribute messageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, lang, AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n+   message = (String) messageTemplateAttribute.getValue();\n+   if (message == null) {\n+    messageTemplateAttribute = perunBl.getAttributesManagerBl().getAttribute(sess, \"en\", AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":nonAuthzPwdResetConfirmMailTemplate:\" + namespace);\n+    message = (String) messageTemplateAttribute.getValue();\n+   }\n+  } catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+\n+  for (String email : emails) {\n+   Utils.sendPasswordResetConfirmationEmail(user, email, namespace, subject, message);\n+  }\n+ }\n+\n+ @Override\n+ public int getUsersCount(PerunSession sess) throws InternalErrorException {\n+  return getUsersManagerImpl().getUsersCount(sess);\n+ }\n+\n+ @Override\n+ public Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException {\n+  return getUsersManagerImpl().generateAccount(session, namespace, parameters);\n+ }\n+\n+ @Override\n+ public List<User> getSponsors(PerunSession sess, Member sponsoredMember) throws InternalErrorException {\n+  if (!sponsoredMember.isSponsored()) {\n+   throw new IllegalArgumentException(\"member \" + sponsoredMember.getId() + \" is not marked as sponsored\");\n+  }\n+\n+  return getUsersManagerImpl().getSponsors(sess, sponsoredMember);\n+ }\n+\n+\n+ private PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException {\n+  return getUsersManagerImpl().getPasswordManagerModule(session, namespace);\n+ }\n+\n+ @Override\n+ public void removeAllUserExtSources(PerunSession sess, User user) throws InternalErrorException {\n+\n+  for (UserExtSource userExtSource : getUserExtSources(sess, user)) {\n+   try {\n+    removeUserExtSource(sess, user, userExtSource);\n+   } catch (UserExtSourceAlreadyRemovedException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ @Override\n+ public List<User> findUsersWithExtSourceAttributeValueEnding(PerunSessionImpl sess, String attributeName, String valueEnd, List<String> excludeValueEnds) throws AttributeNotExistsException, InternalErrorException {\n+  AttributeDefinition adef = sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, attributeName);\n+  if ((!adef.getType().equals(\"java.lang.String\")) || (!adef.getNamespace().equals(AttributesManager.NS_UES_ATTR_DEF))) {\n+   throw new InternalErrorException(\"only ues attributes of type String can be used in findUsersWithExtSourceAttributeValueEnding()\");\n+  }\n+\n+  return usersManagerImpl.findUsersWithExtSourceAttributeValueEnding(sess, attributeName, valueEnd, excludeValueEnds);\n+ }\n+\n+ @Override\n+ public String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n+  char[] possibleCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\".toCharArray();\n+  int count = 12;\n+\n+  // FIXME - We will replace following logic once each login-namespace will implement\n+  // FIXME   pwd-manager module and have server side checks\n+  if (Objects.equals(loginNamespace, \"vsup\")) {\n+   count = 14;\n+   // removed O, l, specific only: +, -, *, /, .\n+   possibleCharacters = \"ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789+-*/.\".toCharArray();\n+  }\n+  String newRandomPassword = RandomStringUtils.random(count, 0, possibleCharacters.length -1, false, false, possibleCharacters, new SecureRandom());\n+  try {\n+   changePassword(session, user, loginNamespace, null, newRandomPassword, false);\n+  } catch (PasswordDoesntMatchException | PasswordStrengthFailedException e) {\n+   // should not happen when we are not using the old password\n+   throw new InternalErrorException(e);\n+  }\n+  String template = getPasswordResetTemplate(session, loginNamespace);\n+  String userLogin;\n+  try {\n+   Attribute userLoginAttribute = getPerunBl().getAttributesManagerBl().getAttribute(session, user, AttributesManager.NS_USER_ATTR_DEF + \":login-namespace:\" + loginNamespace);\n+   userLogin = (String) userLoginAttribute.getValue();\n+  } catch (WrongAttributeAssignmentException | AttributeNotExistsException e) {\n+   // should not happen since the changePassword method passed\n+   throw new InternalErrorException(e);\n+  }\n+\n+  return template.replace(\"{password}\", StringEscapeUtils.escapeHtml4(newRandomPassword)).replace(\"{login}\", StringEscapeUtils.escapeHtml4(userLogin));\n+ }\n+\n+ /**\n+  * Returns template for password reset.\n+  * <p>\n+  * It finds the template in entityless attribute randomPwdResetTemplate for given namespace.\n+  * If that fails, it falls back to default template.\n+  *\n+  * @param session        session\n+  * @param loginNamespace login namespace\n+  * @return String representing HTML template for password reset\n+  */\n+\n+\n+ private String getPasswordResetTemplate(PerunSession session, String loginNamespace) {\n+  String template = \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\" + \"<head>\\n\" + \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=utf-8\\\"></meta>\\n\" + \"</head>\" + \"<body><div style=\\\"padding: 25px;color: black;text-align: center;\\\">\" + \"<h1>Password reset</h1>\" + \"<p>Password for user {login} has been reset by the administrator.<br />\" + \"The new password is <br />\" + \"<h2><b>{password}</b></h2>\" + \"</p></div>\" + \"</body>\" + \"</html>\";\n+  try {\n+   Attribute templateAttribute = perunBl.getAttributesManagerBl().getAttribute(session, loginNamespace, AttributesManager.NS_ENTITYLESS_ATTR_DEF + \":randomPwdResetTemplate\");\n+   if (templateAttribute.getValue() != null) {\n+    template = (String) templateAttribute.getValue();\n+   }\n+  } catch (AttributeNotExistsException |WrongAttributeAssignmentException| InternalErrorException e) {\n+   log.warn(\"Failed to get template attribute for password reset in namespace {}, using default. Exception \" + \"class: {}, Exception message: {}\", loginNamespace, e.getClass().getName(), e.getMessage());\n+  }\n+\n+  return template;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 4148
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/306/UsersManagerBlImpl.java\nindex 6c89dec0b85..65f5a365967 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/306/UsersManagerBlImpl.java\n@@ -2222,9 +2222,9 @@ public class UsersManagerBlImpl implements UsersManagerBl {\n \t@Override\n \tpublic String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n \n-\t\tchar[] possibleCharacters =\n-\t\t\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n-\t\t\t\t.toCharArray();\n+\t\tchar[] possibleCharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n+\n+\t\t\t.toCharArray();\n \t\tint count = 12;\n \n \t\t// FIXME - We will replace following logic once each login-namespace will implement\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/306/UsersManagerBlImpl.java\nindex 6c89dec0b85..982a0e0bbef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/306/UsersManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/306/UsersManagerBlImpl.java\n@@ -2223,8 +2223,7 @@ public class UsersManagerBlImpl implements UsersManagerBl {\n \tpublic String changePasswordRandom(PerunSession session, User user, String loginNamespace) throws PasswordOperationTimeoutException, LoginNotExistsException, InternalErrorException, PasswordChangeFailedException {\n \n \t\tchar[] possibleCharacters =\n-\t\t\t    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\"\n-\t\t\t\t.toCharArray();\n+\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%&*()-_=+;:,<.>/?\".toCharArray();\n \t\tint count = 12;\n \n \t\t// FIXME - We will replace following logic once each login-namespace will implement\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}