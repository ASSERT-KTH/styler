{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "952",
    "information": {
        "errors": [
            {
                "line": "61",
                "column": "10",
                "severity": "warning",
                "message": "WhitespaceAround: 'while' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "   */\n  public BlobInfo result() {\n    while(!isDone()) {\n      copyChunk();\n    }\n    return BlobInfo.fromPb(rewriteResponse.result);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/952/CopyWriter.java\nindex 592cd6e0289..85f70e60894 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/952/CopyWriter.java\n@@ -58,7 +58,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n    * @throws StorageException upon failure\n    */\n   public BlobInfo result() {\n-    while(!isDone()) {\n+    while (!isDone()) {\n       copyChunk();\n     }\n     return BlobInfo.fromPb(rewriteResponse.result);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/952/CopyWriter.java\nindex 592cd6e0289..1083175fd44 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/952/CopyWriter.java\n@@ -58,7 +58,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n    * @throws StorageException upon failure\n    */\n   public BlobInfo result() {\n-    while(!isDone()) {\n+    while (!isDone()) {\n       copyChunk();\n     }\n     return BlobInfo.fromPb(rewriteResponse.result);\n@@ -79,7 +79,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n   }\n \n   /**\n-   * Returns the number of bytes copied. \n+   * Returns the number of bytes copied.\n    */\n   public long totalBytesCopied() {\n     return rewriteResponse.totalBytesRewritten;\n@@ -167,8 +167,8 @@ public class CopyWriter implements Restorable<CopyWriter> {\n       private Long megabytesCopiedPerChunk;\n \n       private Builder(StorageOptions options, BlobId source,\n-          Map<StorageRpc.Option, ?> sourceOptions,\n-          BlobInfo target, Map<StorageRpc.Option, ?> targetOptions) {\n+                      Map<StorageRpc.Option, ?> sourceOptions,\n+                      BlobInfo target, Map<StorageRpc.Option, ?> targetOptions) {\n         this.serviceOptions = options;\n         this.source = source;\n         this.sourceOptions = sourceOptions;\n@@ -212,8 +212,8 @@ public class CopyWriter implements Restorable<CopyWriter> {\n     }\n \n     static Builder builder(StorageOptions options, BlobId source,\n-        Map<StorageRpc.Option, ?> sourceOptions, BlobInfo target,\n-        Map<StorageRpc.Option, ?> targetOptions) {\n+                           Map<StorageRpc.Option, ?> sourceOptions, BlobInfo target,\n+                           Map<StorageRpc.Option, ?> targetOptions) {\n       return new Builder(options, source, sourceOptions, target, targetOptions);\n     }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/952/CopyWriter.java\nindex 592cd6e0289..3a23cabfc78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/952/CopyWriter.java\n@@ -58,7 +58,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n    * @throws StorageException upon failure\n    */\n   public BlobInfo result() {\n-    while(!isDone()) {\n+    while (!isDone()) {\n       copyChunk();\n     }\n     return BlobInfo.fromPb(rewriteResponse.result);\n@@ -108,8 +108,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n \n   @Override\n   public RestorableState<CopyWriter> capture() {\n-    return StateImpl.builder(\n-        serviceOptions,\n+    return StateImpl.builder(serviceOptions,\n         BlobId.fromPb(rewriteResponse.rewriteRequest.source),\n         rewriteResponse.rewriteRequest.sourceOptions,\n         BlobInfo.fromPb(rewriteResponse.rewriteRequest.target),\n@@ -167,8 +166,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n       private Long megabytesCopiedPerChunk;\n \n       private Builder(StorageOptions options, BlobId source,\n-          Map<StorageRpc.Option, ?> sourceOptions,\n-          BlobInfo target, Map<StorageRpc.Option, ?> targetOptions) {\n+          Map<StorageRpc.Option, ?> sourceOptions, BlobInfo target, Map<StorageRpc.Option, ?> targetOptions) {\n         this.serviceOptions = options;\n         this.source = source;\n         this.sourceOptions = sourceOptions;\n@@ -222,8 +220,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n       RewriteRequest rewriteRequest = new RewriteRequest(\n           source.toPb(), sourceOptions, target.toPb(), targetOptions, megabytesCopiedPerChunk);\n       RewriteResponse rewriteResponse = new RewriteResponse(rewriteRequest,\n-          result != null ? result.toPb() : null, blobSize, isDone, rewriteToken,\n-          totalBytesCopied);\n+          result != null ? result.toPb() : null, blobSize, isDone, rewriteToken, totalBytesCopied);\n       return new CopyWriter(serviceOptions, rewriteResponse);\n     }\n \n@@ -266,4 +263,4 @@ public class CopyWriter implements Restorable<CopyWriter> {\n           .toString();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 458).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "212",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "242",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "243",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "244",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "245",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "246",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "247",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "248",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "249",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "250",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "251",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "256",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/952/CopyWriter.java\nindex 592cd6e0289..f4b34b22228 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/952/CopyWriter.java\n@@ -25,7 +25,6 @@ import com.google.gcloud.RetryHelper;\n import com.google.gcloud.spi.StorageRpc;\n import com.google.gcloud.spi.StorageRpc.RewriteRequest;\n import com.google.gcloud.spi.StorageRpc.RewriteResponse;\n-\n import java.io.Serializable;\n import java.util.Map;\n import java.util.Objects;\n@@ -39,6 +38,8 @@ import java.util.concurrent.Callable;\n  *\n  * @see <a href=\"https://cloud.google.com/storage/docs/json_api/v1/objects/rewrite\">Rewrite</a>\n  */\n+\n+\n public class CopyWriter implements Restorable<CopyWriter> {\n \n   private final StorageOptions serviceOptions;\n@@ -57,8 +58,9 @@ public class CopyWriter implements Restorable<CopyWriter> {\n    *\n    * @throws StorageException upon failure\n    */\n+\n   public BlobInfo result() {\n-    while(!isDone()) {\n+    while (!isDone()) {\n       copyChunk();\n     }\n     return BlobInfo.fromPb(rewriteResponse.result);\n@@ -67,6 +69,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n   /**\n    * Size of the blob being copied.\n    */\n+\n   public long blobSize() {\n     return rewriteResponse.blobSize;\n   }\n@@ -74,6 +77,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n   /**\n    * Returns {@code true} of blob rewrite finished, {@code false} otherwise.\n    */\n+\n   public boolean isDone() {\n     return rewriteResponse.isDone;\n   }\n@@ -81,6 +85,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n   /**\n    * Returns the number of bytes copied. \n    */\n+\n   public long totalBytesCopied() {\n     return rewriteResponse.totalBytesRewritten;\n   }\n@@ -91,6 +96,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n    *\n    * @throws StorageException upon failure\n    */\n+\n   public void copyChunk() {\n     if (!isDone()) {\n       try {\n@@ -108,24 +114,12 @@ public class CopyWriter implements Restorable<CopyWriter> {\n \n   @Override\n   public RestorableState<CopyWriter> capture() {\n-    return StateImpl.builder(\n-        serviceOptions,\n-        BlobId.fromPb(rewriteResponse.rewriteRequest.source),\n-        rewriteResponse.rewriteRequest.sourceOptions,\n-        BlobInfo.fromPb(rewriteResponse.rewriteRequest.target),\n-        rewriteResponse.rewriteRequest.targetOptions)\n-        .blobSize(blobSize())\n-        .isDone(isDone())\n-        .megabytesCopiedPerChunk(rewriteResponse.rewriteRequest.megabytesRewrittenPerCall)\n-        .rewriteToken(rewriteResponse.rewriteToken)\n-        .totalBytesRewritten(totalBytesCopied())\n-        .build();\n+    return StateImpl.builder(serviceOptions, BlobId.fromPb(rewriteResponse.rewriteRequest.source), rewriteResponse.rewriteRequest.sourceOptions, BlobInfo.fromPb(rewriteResponse.rewriteRequest.target), rewriteResponse.rewriteRequest.targetOptions).blobSize(blobSize()).isDone(isDone()).megabytesCopiedPerChunk(rewriteResponse.rewriteRequest.megabytesRewrittenPerCall).rewriteToken(rewriteResponse.rewriteToken).totalBytesRewritten(totalBytesCopied()).build();\n   }\n \n   static class StateImpl implements RestorableState<CopyWriter>, Serializable {\n \n     private static final long serialVersionUID = 8279287678903181701L;\n-\n     private final StorageOptions serviceOptions;\n     private final BlobId source;\n     private final Map<StorageRpc.Option, ?> sourceOptions;\n@@ -166,9 +160,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n       private long totalBytesCopied;\n       private Long megabytesCopiedPerChunk;\n \n-      private Builder(StorageOptions options, BlobId source,\n-          Map<StorageRpc.Option, ?> sourceOptions,\n-          BlobInfo target, Map<StorageRpc.Option, ?> targetOptions) {\n+      private Builder(StorageOptions options, BlobId source, Map<StorageRpc.Option, ?> sourceOptions, BlobInfo target, Map<StorageRpc.Option, ?> targetOptions) {\n         this.serviceOptions = options;\n         this.source = source;\n         this.sourceOptions = sourceOptions;\n@@ -211,26 +203,30 @@ public class CopyWriter implements Restorable<CopyWriter> {\n       }\n     }\n \n-    static Builder builder(StorageOptions options, BlobId source,\n-        Map<StorageRpc.Option, ?> sourceOptions, BlobInfo target,\n-        Map<StorageRpc.Option, ?> targetOptions) {\n+    static Builder builder(StorageOptions options, BlobId source, Map<StorageRpc.Option, ?> sourceOptions, BlobInfo target, Map<StorageRpc.Option, ?> targetOptions) {\n       return new Builder(options, source, sourceOptions, target, targetOptions);\n     }\n \n     @Override\n     public CopyWriter restore() {\n-      RewriteRequest rewriteRequest = new RewriteRequest(\n-          source.toPb(), sourceOptions, target.toPb(), targetOptions, megabytesCopiedPerChunk);\n-      RewriteResponse rewriteResponse = new RewriteResponse(rewriteRequest,\n-          result != null ? result.toPb() : null, blobSize, isDone, rewriteToken,\n-          totalBytesCopied);\n+      RewriteRequest rewriteRequest = new RewriteRequest(source.toPb(), sourceOptions, target.toPb(), targetOptions, megabytesCopiedPerChunk);\n+      RewriteResponse rewriteResponse = new RewriteResponse(rewriteRequest, result != null ? result.toPb() : null, blobSize, isDone, rewriteToken, totalBytesCopied);\n       return new CopyWriter(serviceOptions, rewriteResponse);\n     }\n \n     @Override\n     public int hashCode() {\n-      return Objects.hash(serviceOptions, source, sourceOptions, target, targetOptions, result,\n-          blobSize, isDone, megabytesCopiedPerChunk, rewriteToken, totalBytesCopied);\n+      return Objects.hash(serviceOptions,\n+        source,\n+          sourceOptions,\n+            target,\n+              targetOptions,\n+                result,\n+                  blobSize,\n+                    isDone,\n+                      megabytesCopiedPerChunk,\n+                        rewriteToken,\n+                          totalBytesCopied);\n     }\n \n     @Override\n@@ -243,27 +239,21 @@ public class CopyWriter implements Restorable<CopyWriter> {\n       }\n       final StateImpl other = (StateImpl) obj;\n       return Objects.equals(this.serviceOptions, other.serviceOptions)\n-          && Objects.equals(this.source, other.source)\n-          && Objects.equals(this.sourceOptions, other.sourceOptions)\n-          && Objects.equals(this.target, other.target)\n-          && Objects.equals(this.targetOptions, other.targetOptions)\n-          && Objects.equals(this.result, other.result)\n-          && Objects.equals(this.rewriteToken, other.rewriteToken)\n-          && Objects.equals(this.megabytesCopiedPerChunk, other.megabytesCopiedPerChunk)\n-          && this.blobSize == other.blobSize\n-          && this.isDone == other.isDone\n-          && this.totalBytesCopied == other.totalBytesCopied;\n+      && Objects.equals(this.source, other.source)\n+      && Objects.equals(this.sourceOptions, other.sourceOptions)\n+      && Objects.equals(this.target, other.target)\n+      && Objects.equals(this.targetOptions, other.targetOptions)\n+      && Objects.equals(this.result, other.result)\n+      && Objects.equals(this.rewriteToken, other.rewriteToken)\n+      && Objects.equals(this.megabytesCopiedPerChunk, other.megabytesCopiedPerChunk)\n+      && this.blobSize == other.blobSize\n+      && this.isDone == other.isDone\n+      && this.totalBytesCopied == other.totalBytesCopied;\n     }\n \n     @Override\n     public String toString() {\n-      return MoreObjects.toStringHelper(this)\n-          .add(\"source\", source)\n-          .add(\"target\", target)\n-          .add(\"isDone\", isDone)\n-          .add(\"totalBytesRewritten\", totalBytesCopied)\n-          .add(\"blobSize\", blobSize)\n-          .toString();\n+      return MoreObjects.toStringHelper(this).add(\"source\", source).add(\"target\", target).add(\"isDone\", isDone).add(\"totalBytesRewritten\", totalBytesCopied).add(\"blobSize\", blobSize).toString();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/952/CopyWriter.java\nindex 592cd6e0289..85f70e60894 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/952/CopyWriter.java\n@@ -58,7 +58,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n    * @throws StorageException upon failure\n    */\n   public BlobInfo result() {\n-    while(!isDone()) {\n+    while (!isDone()) {\n       copyChunk();\n     }\n     return BlobInfo.fromPb(rewriteResponse.result);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/952/CopyWriter.java\nindex 592cd6e0289..85f70e60894 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/952/CopyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/952/CopyWriter.java\n@@ -58,7 +58,7 @@ public class CopyWriter implements Restorable<CopyWriter> {\n    * @throws StorageException upon failure\n    */\n   public BlobInfo result() {\n-    while(!isDone()) {\n+    while (!isDone()) {\n       copyChunk();\n     }\n     return BlobInfo.fromPb(rewriteResponse.result);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}