{
    "project_name": "EMResearch-EMB",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    int pos = Integer.parseInt(getRequired(\"position\", arguments));\n    if (pos < 1 || pos > patternTokens.length) {\n      throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);\n    }\n    if (!patternTokens[pos - 1].getWhitespaceBefore().equals(wsChar)) {\n      return match;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "column": "135",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "34",
                    "column": "136",
                    "severity": "warning",
                    "message": "'}' at column 136 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "34",
                    "column": "136",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/28/WhitespaceCheckFilter.java\nindex 72ddb24367d..523c8bf46a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/28/WhitespaceCheckFilter.java\n@@ -31,8 +31,7 @@ public class WhitespaceCheckFilter extends RuleFilter  {\n     String wsChar = getRequired(\"whitespaceChar\", arguments);\n     int pos = Integer.parseInt(getRequired(\"position\", arguments));\n     if (pos < 1 || pos > patternTokens.length) {\n-      throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);\n-    }\n+      throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);}\n     if (!patternTokens[pos - 1].getWhitespaceBefore().equals(wsChar)) {\n       return match;\n     } else {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/28/WhitespaceCheckFilter.java\nindex 72ddb24367d..f51c1532ab4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/28/WhitespaceCheckFilter.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules;\n \n import java.util.Map;\n@@ -23,21 +24,22 @@ import java.util.Map;\n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.rules.patterns.RuleFilter;\n \n-public class WhitespaceCheckFilter extends RuleFilter  {\n+public class WhitespaceCheckFilter extends RuleFilter {\n \n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos,\n-      AnalyzedTokenReadings[] patternTokens) {\n-    String wsChar = getRequired(\"whitespaceChar\", arguments);\n-    int pos = Integer.parseInt(getRequired(\"position\", arguments));\n-    if (pos < 1 || pos > patternTokens.length) {\n-      throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);\n-    }\n-    if (!patternTokens[pos - 1].getWhitespaceBefore().equals(wsChar)) {\n-      return match;\n-    } else {\n-      return null;\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos,\n+                                     AnalyzedTokenReadings[] patternTokens) {\n+        String wsChar = getRequired(\"whitespaceChar\", arguments);\n+        int pos = Integer.parseInt(getRequired(\"position\", arguments));\n+        if (pos < 1 || pos > patternTokens.length) {\n+            throw new IllegalArgumentException(\n+                \"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);\n+        }\n+        if (!patternTokens[pos - 1].getWhitespaceBefore().equals(wsChar)) {\n+            return match;\n+        } else {\n+            return null;\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/28/WhitespaceCheckFilter.java\nindex 72ddb24367d..1e63bb18ecc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/28/WhitespaceCheckFilter.java\n@@ -23,7 +23,7 @@ import java.util.Map;\n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.rules.patterns.RuleFilter;\n \n-public class WhitespaceCheckFilter extends RuleFilter  {\n+public class WhitespaceCheckFilter extends RuleFilter {\n \n   @Override\n   public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos,\n@@ -40,4 +40,4 @@ public class WhitespaceCheckFilter extends RuleFilter  {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/28/WhitespaceCheckFilter.java\nindex 72ddb24367d..4e1c867903c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/28/WhitespaceCheckFilter.java\n@@ -19,25 +19,24 @@\n package org.languagetool.rules;\n \n import java.util.Map;\n-\n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.rules.patterns.RuleFilter;\n \n-public class WhitespaceCheckFilter extends RuleFilter  {\n \n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos,\n-      AnalyzedTokenReadings[] patternTokens) {\n-    String wsChar = getRequired(\"whitespaceChar\", arguments);\n-    int pos = Integer.parseInt(getRequired(\"position\", arguments));\n-    if (pos < 1 || pos > patternTokens.length) {\n-      throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);\n-    }\n-    if (!patternTokens[pos - 1].getWhitespaceBefore().equals(wsChar)) {\n-      return match;\n-    } else {\n-      return null;\n+public class WhitespaceCheckFilter extends RuleFilter {\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n+        String wsChar = getRequired(\"whitespaceChar\", arguments);\n+        int pos = Integer.parseInt(getRequired(\"position\", arguments));\n+        if (pos < 1 || pos > patternTokens.length) {\n+            throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \"\n+            + patternTokens.length);\n+        }\n+        if (!patternTokens[pos - 1].getWhitespaceBefore().equals(wsChar)) {\n+            return match;\n+        } else {\n+            return null;\n+        }\n     }\n-  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "column": "135",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "34",
                    "column": "136",
                    "severity": "warning",
                    "message": "'}' at column 136 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "34",
                    "column": "136",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/28/WhitespaceCheckFilter.java\nindex 72ddb24367d..523c8bf46a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/28/WhitespaceCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/28/WhitespaceCheckFilter.java\n@@ -31,8 +31,7 @@ public class WhitespaceCheckFilter extends RuleFilter  {\n     String wsChar = getRequired(\"whitespaceChar\", arguments);\n     int pos = Integer.parseInt(getRequired(\"position\", arguments));\n     if (pos < 1 || pos > patternTokens.length) {\n-      throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);\n-    }\n+      throw new IllegalArgumentException(\"Wrong position in WhitespaceCheckFilter: \" + pos + \", must be 1 to \" + patternTokens.length);}\n     if (!patternTokens[pos - 1].getWhitespaceBefore().equals(wsChar)) {\n       return match;\n     } else {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}