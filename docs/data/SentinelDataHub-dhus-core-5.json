{
    "project_name": "SentinelDataHub-dhus-core",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 83).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "         public Void doInHibernate (Session session) throws HibernateException\n         {\n            String sql = \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n            Query query = session.createNativeQuery (sql);\n            query.setParameter(1, search.getUUID(), StandardBasicTypes.STRING);\n            query.executeUpdate ();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/5/SearchDao.java\nindex 4f4fe025fab..abf46246451 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/5/SearchDao.java\n@@ -67,8 +67,9 @@ public class SearchDao extends HibernateDao<Search, String>\n          @Override\n          public Void doInHibernate (Session session) throws HibernateException\n          {\n-            String sql = \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n-            Query query = session.createNativeQuery (sql);\n+            String sql =\n+               \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n+             Query query = session.createNativeQuery (sql);\n             query.setParameter(1, search.getUUID(), StandardBasicTypes.STRING);\n             query.executeUpdate ();\n             return null;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/5/SearchDao.java\nindex 4f4fe025fab..6cd16f4666f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/5/SearchDao.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package fr.gael.dhus.database.dao;\n \n import java.util.List;\n@@ -35,62 +36,65 @@ import fr.gael.dhus.database.object.User;\n @Repository\n public class SearchDao extends HibernateDao<Search, String>\n {\n-   public List<Search> scrollSearchesOfUser (final User user, final int skip,\n-      final int top)\n-   {\n-      return getHibernateTemplate ().execute (\n-         new HibernateCallback<List<Search>> ()\n-         {\n+    public List<Search> scrollSearchesOfUser(final User user, final int skip,\n+                                             final int top)\n+    {\n+        return getHibernateTemplate().execute(\n+            new HibernateCallback<List<Search>>()\n+            {\n+                @Override\n+                @SuppressWarnings(\"unchecked\")\n+                public List<Search> doInHibernate(Session session)\n+                    throws HibernateException\n+                {\n+                    String hql =\n+                        \"SELECT s FROM User u LEFT OUTER JOIN u.preferences p \"\n+                            + \"LEFT OUTER JOIN p.searches s \"\n+                            + \"WHERE u.uuid like ?1 ORDER BY s.value\";\n+                    Query query = session.createQuery(hql).setReadOnly(true);\n+                    query.setParameter(1, user.getUUID(),\n+                        StandardBasicTypes.STRING);\n+                    query.setFirstResult(skip);\n+                    query.setMaxResults(top);\n+                    return (List<Search>) query.list();\n+                }\n+            });\n+    }\n+\n+    @Override\n+    public void delete(final Search search)\n+    {\n+        getHibernateTemplate().execute(new HibernateCallback<Void>()\n+        {\n             @Override\n-            @SuppressWarnings (\"unchecked\")\n-            public List<Search> doInHibernate (Session session)\n-               throws HibernateException\n+            public Void doInHibernate(Session session) throws HibernateException\n             {\n-               String hql =\n-                  \"SELECT s FROM User u LEFT OUTER JOIN u.preferences p \"\n-                     + \"LEFT OUTER JOIN p.searches s \"\n-                     + \"WHERE u.uuid like ?1 ORDER BY s.value\";\n-               Query query = session.createQuery (hql).setReadOnly (true);\n-               query.setParameter(1, user.getUUID(), StandardBasicTypes.STRING);\n-               query.setFirstResult (skip);\n-               query.setMaxResults (top);\n-               return (List<Search>) query.list ();\n+                String sql =\n+                    \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n+                Query query = session.createNativeQuery(sql);\n+                query.setParameter(1, search.getUUID(),\n+                    StandardBasicTypes.STRING);\n+                query.executeUpdate();\n+                return null;\n             }\n-         });\n-   }\n-\n-   @Override\n-   public void delete (final Search search)\n-   {\n-      getHibernateTemplate ().execute (new HibernateCallback<Void>()\n-      {\n-         @Override\n-         public Void doInHibernate (Session session) throws HibernateException\n-         {\n-            String sql = \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n-            Query query = session.createNativeQuery (sql);\n-            query.setParameter(1, search.getUUID(), StandardBasicTypes.STRING);\n-            query.executeUpdate ();\n-            return null;\n-         }\n-      });\n-      super.delete (search);\n-   }\n+        });\n+        super.delete(search);\n+    }\n \n-   /**\n-    * Inactive all saved search notifications of users.\n-    */\n-   public void disableAllSearchNotifications ()\n-   {\n-      getHibernateTemplate ().execute (new HibernateCallback<Void> ()\n-      {\n-         @Override\n-         public Void doInHibernate (Session session) throws HibernateException\n-         {\n-            String query = \"UPDATE SEARCHES SET NOTIFY = false\";\n-            session.createNativeQuery (query).executeUpdate ();\n-            return null;\n-         }\n-      });\n-   }\n+    /**\n+     * Inactive all saved search notifications of users.\n+     */\n+    public void disableAllSearchNotifications()\n+    {\n+        getHibernateTemplate().execute(new HibernateCallback<Void>()\n+        {\n+            @Override\n+            public Void doInHibernate(Session session) throws HibernateException\n+            {\n+                String query = \"UPDATE SEARCHES SET NOTIFY = false\";\n+                session.createNativeQuery(query).executeUpdate();\n+                return null;\n+            }\n+        });\n+    }\n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/5/SearchDao.java\nindex 4f4fe025fab..43f2ea64580 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/5/SearchDao.java\n@@ -35,8 +35,7 @@ import fr.gael.dhus.database.object.User;\n @Repository\n public class SearchDao extends HibernateDao<Search, String>\n {\n-   public List<Search> scrollSearchesOfUser (final User user, final int skip,\n-      final int top)\n+   public List<Search> scrollSearchesOfUser (final User user, final int skip, final int top)\n    {\n       return getHibernateTemplate ().execute (\n          new HibernateCallback<List<Search>> ()\n@@ -47,8 +46,7 @@ public class SearchDao extends HibernateDao<Search, String>\n                throws HibernateException\n             {\n                String hql =\n-                  \"SELECT s FROM User u LEFT OUTER JOIN u.preferences p \"\n-                     + \"LEFT OUTER JOIN p.searches s \"\n+                  \"SELECT s FROM User u LEFT OUTER JOIN u.preferences p \" + \"LEFT OUTER JOIN p.searches s \"\n                      + \"WHERE u.uuid like ?1 ORDER BY s.value\";\n                Query query = session.createQuery (hql).setReadOnly (true);\n                query.setParameter(1, user.getUUID(), StandardBasicTypes.STRING);\n@@ -93,4 +91,4 @@ public class SearchDao extends HibernateDao<Search, String>\n          }\n       });\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/5/SearchDao.java\nindex 4f4fe025fab..2def0cff226 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/5/SearchDao.java\n@@ -20,14 +20,12 @@\n package fr.gael.dhus.database.dao;\n \n import java.util.List;\n-\n import org.hibernate.HibernateException;\n import org.hibernate.query.Query;\n import org.hibernate.Session;\n import org.hibernate.type.StandardBasicTypes;\n import org.springframework.orm.hibernate5.HibernateCallback;\n import org.springframework.stereotype.Repository;\n-\n import fr.gael.dhus.database.dao.interfaces.HibernateDao;\n import fr.gael.dhus.database.object.Search;\n import fr.gael.dhus.database.object.User;\n@@ -35,62 +33,59 @@ import fr.gael.dhus.database.object.User;\n @Repository\n public class SearchDao extends HibernateDao<Search, String>\n {\n-   public List<Search> scrollSearchesOfUser (final User user, final int skip,\n-      final int top)\n+   public List<Search> scrollSearchesOfUser (final User user, final int skip, final int top)\n    {\n-      return getHibernateTemplate ().execute (\n-         new HibernateCallback<List<Search>> ()\n-         {\n-            @Override\n-            @SuppressWarnings (\"unchecked\")\n-            public List<Search> doInHibernate (Session session)\n-               throws HibernateException\n-            {\n-               String hql =\n-                  \"SELECT s FROM User u LEFT OUTER JOIN u.preferences p \"\n-                     + \"LEFT OUTER JOIN p.searches s \"\n-                     + \"WHERE u.uuid like ?1 ORDER BY s.value\";\n-               Query query = session.createQuery (hql).setReadOnly (true);\n-               query.setParameter(1, user.getUUID(), StandardBasicTypes.STRING);\n-               query.setFirstResult (skip);\n-               query.setMaxResults (top);\n-               return (List<Search>) query.list ();\n-            }\n-         });\n+      return getHibernateTemplate ().execute (new HibernateCallback<List<Search>> ()\n+                                              {\n+                                                 @Override\n+                                                 @SuppressWarnings (\"unchecked\")\n+                                                 public List<Search> doInHibernate (Session session) throws HibernateException\n+                                                 {\n+                                                    String hql = \"SELECT s FROM User u LEFT OUTER JOIN u.preferences p \" +\n+                                                 \"LEFT OUTER JOIN p.searches s \" +\n+                                                    \"WHERE u.uuid like ?1 ORDER BY s.value\";\n+                                                    Query query = session.createQuery (hql).setReadOnly (true);\n+                                                    query.setParameter (1, user.getUUID (), StandardBasicTypes.STRING);\n+                                                    query.setFirstResult(skip);\n+                                                    query.setMaxResults(top);\n+                                                    return (List<Search>) query.list ();\n+                                                 }\n+                                              });\n    }\n \n    @Override\n    public void delete (final Search search)\n    {\n-      getHibernateTemplate ().execute (new HibernateCallback<Void>()\n-      {\n-         @Override\n-         public Void doInHibernate (Session session) throws HibernateException\n-         {\n-            String sql = \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n-            Query query = session.createNativeQuery (sql);\n-            query.setParameter(1, search.getUUID(), StandardBasicTypes.STRING);\n-            query.executeUpdate ();\n-            return null;\n-         }\n-      });\n+      getHibernateTemplate ().execute (new HibernateCallback<Void> ()\n+                                       {\n+                                          @Override\n+                                          public Void doInHibernate (Session session) throws HibernateException\n+                                          {\n+                                             String sql = \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n+                                             Query query = session.createNativeQuery (sql);\n+                                             query.setParameter (1, search.getUUID (), StandardBasicTypes.STRING);\n+                                             query.executeUpdate();\n+                                             return null;\n+                                          }\n+                                       });\n       super.delete (search);\n    }\n \n    /**\n     * Inactive all saved search notifications of users.\n     */\n+\n    public void disableAllSearchNotifications ()\n    {\n       getHibernateTemplate ().execute (new HibernateCallback<Void> ()\n-      {\n-         @Override\n-         public Void doInHibernate (Session session) throws HibernateException\n-         {\n-            String query = \"UPDATE SEARCHES SET NOTIFY = false\";\n-            session.createNativeQuery (query).executeUpdate ();\n-            return null;\n-         }\n-      });\n+                                       {\n+                                          @Override\n+                                          public Void doInHibernate (Session session) throws HibernateException\n+                                          {\n+                                             String query = \"UPDATE SEARCHES SET NOTIFY = false\";\n+                                             session.createNativeQuery (query).executeUpdate ();\n+                                             return null;\n+                                          }\n+                                       });\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/5/SearchDao.java\nindex 4f4fe025fab..abf46246451 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/5/SearchDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/5/SearchDao.java\n@@ -67,8 +67,9 @@ public class SearchDao extends HibernateDao<Search, String>\n          @Override\n          public Void doInHibernate (Session session) throws HibernateException\n          {\n-            String sql = \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n-            Query query = session.createNativeQuery (sql);\n+            String sql =\n+               \"DELETE FROM SEARCH_PREFERENCES WHERE SEARCHES_UUID = ?1\";\n+             Query query = session.createNativeQuery (sql);\n             query.setParameter(1, search.getUUID(), StandardBasicTypes.STRING);\n             query.executeUpdate ();\n             return null;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}