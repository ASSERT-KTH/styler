{
    "project_name": "neo4j-neo4j",
    "error_id": "276",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "96",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "19",
                    "severity": "error",
                    "message": "'}' at column 19 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "273",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "285",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "288",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "291",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "302",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "332",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "359",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "359",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "372",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "425",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "430",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "461",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "150",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "464",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "142",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "473",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "525",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "527",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "544",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "615",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "615",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/276/FabricExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/276/FabricExecutor.java\nindex d1d73db1a03..07c227e173b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/276/FabricExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/276/FabricExecutor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.fabric.executor;\n \n import reactor.core.publisher.Flux;\n@@ -92,119 +93,115 @@ public class FabricExecutor\n     private final Executor fabricWorkerExecutor;\n     private final Optional<NormalizedDatabaseName> fabricDatabaseName;\n \n-    public FabricExecutor( FabricConfig config, FabricPlanner planner, UseEvaluation useEvaluation, CatalogManager catalogManager,\n-                           LogProvider internalLog, FabricStatementLifecycles statementLifecycles, Executor fabricWorkerExecutor )\n+    public FabricExecutor(FabricConfig config, FabricPlanner planner, UseEvaluation useEvaluation, CatalogManager catalogManager,\n+                          LogProvider internalLog, FabricStatementLifecycles statementLifecycles, Executor fabricWorkerExecutor)\n     {\n         this.fabricDatabaseName = config.getFabricDatabaseName();\n         this.dataStreamConfig = config.getDataStream();\n         this.planner = planner;\n         this.useEvaluation = useEvaluation;\n         this.catalogManager = catalogManager;\n-        this.log = internalLog.getLog( getClass() );\n+        this.log = internalLog.getLog(getClass());\n         this.statementLifecycles = statementLifecycles;\n         this.fabricWorkerExecutor = fabricWorkerExecutor;\n     }\n \n-    public StatementResult run( FabricTransaction fabricTransaction, String statement, MapValue parameters )\n+    public StatementResult run(FabricTransaction fabricTransaction, String statement, MapValue parameters)\n     {\n-        StatementLifecycle lifecycle = statementLifecycles.create( fabricTransaction.getTransactionInfo(), statement, parameters );\n+        StatementLifecycle lifecycle = statementLifecycles.create(fabricTransaction.getTransactionInfo(), statement, parameters);\n         lifecycle.startProcessing();\n \n-        fabricTransaction.setLastSubmittedStatement( lifecycle );\n+        fabricTransaction.setLastSubmittedStatement(lifecycle);\n \n         try\n         {\n             String defaultGraphName = fabricTransaction.getTransactionInfo().getDatabaseName();\n-            FabricPlanner.PlannerInstance plannerInstance = planner.instance( statement, parameters, defaultGraphName );\n-            UseEvaluation.Instance useEvaluator = useEvaluation.instance( statement );\n+            FabricPlanner.PlannerInstance plannerInstance = planner.instance(statement, parameters, defaultGraphName);\n+            UseEvaluation.Instance useEvaluator = useEvaluation.instance(statement);\n             FabricPlan plan = plannerInstance.plan();\n             Fragment query = plan.query();\n \n-            lifecycle.doneFabricProcessing( plan );\n+            lifecycle.doneFabricProcessing(plan);\n \n             AccessMode accessMode = fabricTransaction.getTransactionInfo().getAccessMode();\n             RoutingContext routingContext = fabricTransaction.getTransactionInfo().getRoutingContext();\n \n-            if ( plan.debugOptions().logPlan() )\n+            if (plan.debugOptions().logPlan())\n             {\n-                log.debug( String.format( \"Fabric plan: %s\", Fragment.pretty().asString( query ) ) );\n+                log.debug(String.format(\"Fabric plan: %s\", Fragment.pretty().asString(query)));\n             }\n             var statementResult = fabricTransaction.execute(\n-                    ctx ->\n-                    {\n-                        FabricStatementExecution execution;\n-                        if ( plan.debugOptions().logRecords() )\n-                        {\n-                            execution = new FabricLoggingStatementExecution(\n-                                    plan, plannerInstance, useEvaluator, parameters, accessMode, routingContext, ctx, log, lifecycle, dataStreamConfig\n-                            );\n-                        }\n-                        else\n-                        {\n-                            execution = new FabricStatementExecution(\n-                                    plan, plannerInstance, useEvaluator, parameters, accessMode, routingContext, ctx, lifecycle, dataStreamConfig\n-                            );\n-                        }\n-                        return execution.run();\n-                    } );\n-\n-            var resultWithErrorMapping = withErrorMapping( statementResult, FabricSecondaryException.class, FabricSecondaryException::getPrimaryException );\n-            return new FabricExecutionStatementResultImpl( resultWithErrorMapping, failure -> rollbackOnFailure( fabricTransaction, failure ) );\n-        }\n-        catch ( RuntimeException e )\n-        {\n-            lifecycle.endFailure( e );\n-            rollbackOnFailure( fabricTransaction, e );\n+              ctx ->\n+              {\n+                  FabricStatementExecution execution;\n+                  if (plan.debugOptions().logRecords())\n+                  {\n+                      execution = new FabricLoggingStatementExecution(\n+                        plan, plannerInstance, useEvaluator, parameters, accessMode, routingContext, ctx, log, lifecycle, dataStreamConfig\n+                      );\n+                  } else\n+                  {\n+                      execution = new FabricStatementExecution(\n+                        plan, plannerInstance, useEvaluator, parameters, accessMode, routingContext, ctx, lifecycle, dataStreamConfig\n+                      );\n+                  }\n+                  return execution.run();\n+              });\n+\n+            var resultWithErrorMapping = withErrorMapping(statementResult, FabricSecondaryException.class, FabricSecondaryException::getPrimaryException);\n+            return new FabricExecutionStatementResultImpl(resultWithErrorMapping, failure -> rollbackOnFailure(fabricTransaction, failure));\n+        } catch (RuntimeException e)\n+        {\n+            lifecycle.endFailure(e);\n+            rollbackOnFailure(fabricTransaction, e);\n             throw e;\n         }\n     }\n \n-    private void rollbackOnFailure( FabricTransaction fabricTransaction, Throwable failure )\n+    private void rollbackOnFailure(FabricTransaction fabricTransaction, Throwable failure)\n     {\n         try\n         {\n             fabricTransaction.rollback();\n-        }\n-        catch ( Exception rollbackFailure )\n+        } catch (Exception rollbackFailure)\n         {\n             // some components like throwing the original exception\n             // upon any further interaction\n-            if ( rollbackFailure != failure )\n+            if (rollbackFailure != failure)\n             {\n-                failure.addSuppressed( rollbackFailure );\n+                failure.addSuppressed(rollbackFailure);\n             }\n         }\n     }\n \n-    public boolean isPeriodicCommit( String query )\n+    public boolean isPeriodicCommit(String query)\n     {\n-        return planner.isPeriodicCommit( query );\n+        return planner.isPeriodicCommit(query);\n     }\n \n     /**\n      * This is a hack to be able to get an InternalTransaction for the TestFabricTransaction tx wrapper\n      */\n     @Deprecated\n-    public InternalTransaction forceKernelTxCreation( FabricTransaction fabricTransaction )\n+    public InternalTransaction forceKernelTxCreation(FabricTransaction fabricTransaction)\n     {\n         try\n         {\n             var dbName = fabricTransaction.getTransactionInfo().getDatabaseName();\n-            var graph = catalogManager.currentCatalog().resolve( CatalogName.apply( dbName, scala.collection.immutable.List.<String>empty() ) );\n-            var location = (Location.Local) catalogManager.locationOf( graph, false, false );\n+            var graph = catalogManager.currentCatalog().resolve(CatalogName.apply(dbName, scala.collection.immutable.List.<String>empty()));\n+            var location = (Location.Local) catalogManager.locationOf(graph, false, false);\n             var internalTransaction = new CompletableFuture<InternalTransaction>();\n-            fabricTransaction.execute( ctx ->\n-                                       {\n-                                           FabricKernelTransaction fabricKernelTransaction =\n-                                                   ctx.getLocal().getOrCreateTx( location, TransactionMode.MAYBE_WRITE );\n-                                           internalTransaction.complete( fabricKernelTransaction.getInternalTransaction() );\n-                                           return StatementResults.initial();\n-                                       } );\n+            fabricTransaction.execute(ctx ->\n+            {\n+                FabricKernelTransaction fabricKernelTransaction =\n+                  ctx.getLocal().getOrCreateTx(location, TransactionMode.MAYBE_WRITE);\n+                internalTransaction.complete(fabricKernelTransaction.getInternalTransaction());\n+                return StatementResults.initial();\n+            });\n             return internalTransaction.get();\n-        }\n-        catch ( Exception e )\n+        } catch (Exception e)\n         {\n-            throw new IllegalStateException( \"Failed to force open local transaction\", e );\n+            throw new IllegalStateException(\"Failed to force open local transaction\", e);\n         }\n     }\n \n@@ -223,15 +220,15 @@ public class FabricExecutor\n         private final RoutingContext routingContext;\n \n         FabricStatementExecution(\n-                FabricPlan plan,\n-                FabricPlanner.PlannerInstance plannerInstance,\n-                UseEvaluation.Instance useEvaluator,\n-                MapValue queryParams,\n-                AccessMode accessMode,\n-                RoutingContext routingContext,\n-                FabricTransaction.FabricExecutionContext ctx,\n-                StatementLifecycle lifecycle,\n-                FabricConfig.DataStream dataStreamConfig )\n+          FabricPlan plan,\n+          FabricPlanner.PlannerInstance plannerInstance,\n+          UseEvaluation.Instance useEvaluator,\n+          MapValue queryParams,\n+          AccessMode accessMode,\n+          RoutingContext routingContext,\n+          FabricTransaction.FabricExecutionContext ctx,\n+          StatementLifecycle lifecycle,\n+          FabricConfig.DataStream dataStreamConfig)\n         {\n             this.plan = plan;\n             this.plannerInstance = plannerInstance;\n@@ -239,314 +236,298 @@ public class FabricExecutor\n             this.queryParams = queryParams;\n             this.ctx = ctx;\n             this.lifecycle = lifecycle;\n-            this.prefetcher = new Prefetcher( dataStreamConfig );\n+            this.prefetcher = new Prefetcher(dataStreamConfig);\n             this.accessMode = accessMode;\n             this.routingContext = routingContext;\n         }\n \n         StatementResult run()\n         {\n-            notifications.addAll( seqAsJavaList( plan.notifications() ) );\n+            notifications.addAll(seqAsJavaList(plan.notifications()));\n \n             lifecycle.startExecution();\n             var query = plan.query();\n-            Flux<String> columns = Flux.fromIterable( asJavaIterable( query.outputColumns() ) );\n+            Flux<String> columns = Flux.fromIterable(asJavaIterable(query.outputColumns()));\n \n             // EXPLAIN for multi-graph queries returns only fabric plan,\n             // because it is very hard to produce anything better without actually executing the query\n-            if ( plan.executionType() == FabricPlan.EXPLAIN() && plan.inFabricContext() )\n+            if (plan.executionType() == FabricPlan.EXPLAIN() && plan.inFabricContext())\n             {\n                 lifecycle.endSuccess();\n                 return StatementResults.create(\n-                        columns,\n-                        Flux.empty(),\n-                        Mono.just( new MergedSummary( Mono.just( plan.query().description() ), statistics, notifications ) ),\n-                        Mono.just( EffectiveQueryType.queryExecutionType( plan, accessMode ) )\n+                  columns,\n+                  Flux.empty(),\n+                  Mono.just(new MergedSummary(Mono.just(plan.query().description()), statistics, notifications)),\n+                  Mono.just(EffectiveQueryType.queryExecutionType(plan, accessMode))\n                 );\n-            }\n-            else\n+            } else\n             {\n-                FragmentResult fragmentResult = run( query, null );\n+                FragmentResult fragmentResult = run(query, null);\n \n                 return StatementResults.create(\n-                        columns,\n-                        fragmentResult.records\n-                                .doOnComplete( lifecycle::endSuccess )\n-                                .doOnCancel( lifecycle::endSuccess )\n-                                .doOnError( lifecycle::endFailure ),\n-                        Mono.just( new MergedSummary( fragmentResult.planDescription, statistics, notifications ) ),\n-                        fragmentResult.executionType\n+                  columns,\n+                  fragmentResult.records\n+                    .doOnComplete(lifecycle::endSuccess)\n+                    .doOnCancel(lifecycle::endSuccess)\n+                    .doOnError(lifecycle::endFailure),\n+                  Mono.just(new MergedSummary(fragmentResult.planDescription, statistics, notifications)),\n+                  fragmentResult.executionType\n                 );\n             }\n         }\n \n-        FragmentResult run( Fragment fragment, Record argument )\n+        FragmentResult run(Fragment fragment, Record argument)\n         {\n \n-            if ( fragment instanceof Fragment.Init )\n+            if (fragment instanceof Fragment.Init)\n             {\n                 return runInit();\n-            }\n-            else if ( fragment instanceof Fragment.Apply )\n+            } else if (fragment instanceof Fragment.Apply)\n             {\n-                return runApply( (Fragment.Apply) fragment, argument );\n-            }\n-            else if ( fragment instanceof Fragment.Union )\n+                return runApply((Fragment.Apply) fragment, argument);\n+            } else if (fragment instanceof Fragment.Union)\n             {\n-                return runUnion( (Fragment.Union) fragment, argument );\n-            }\n-            else if ( fragment instanceof Fragment.Exec )\n+                return runUnion((Fragment.Union) fragment, argument);\n+            } else if (fragment instanceof Fragment.Exec)\n             {\n-                return runExec( (Fragment.Exec) fragment, argument );\n-            }\n-            else\n+                return runExec((Fragment.Exec) fragment, argument);\n+            } else\n             {\n-                throw notImplemented( \"Invalid query fragment\", fragment );\n+                throw notImplemented(\"Invalid query fragment\", fragment);\n             }\n         }\n \n         FragmentResult runInit()\n         {\n-            return new FragmentResult( Flux.just( Records.empty() ), Mono.empty(), Mono.empty() );\n+            return new FragmentResult(Flux.just(Records.empty()), Mono.empty(), Mono.empty());\n         }\n \n-        FragmentResult runApply( Fragment.Apply apply, Record argument )\n+        FragmentResult runApply(Fragment.Apply apply, Record argument)\n         {\n-            FragmentResult input = run( apply.input(), argument );\n+            FragmentResult input = run(apply.input(), argument);\n \n             var resultRecords = input.records.flatMap(\n-                    record -> run( apply.inner(), record ).records.map( outputRecord -> Records.join( record, outputRecord ) ),\n-                    dataStreamConfig.getConcurrency(), 1\n+              record -> run(apply.inner(), record).records.map(outputRecord -> Records.join(record, outputRecord)),\n+              dataStreamConfig.getConcurrency(), 1\n             );\n \n             // TODO: merge executionType here for subqueries\n             // For now, just return global value as seen by fabric\n-            Mono<QueryExecutionType> executionType = Mono.just( EffectiveQueryType.queryExecutionType( plan, accessMode ) );\n+            Mono<QueryExecutionType> executionType = Mono.just(EffectiveQueryType.queryExecutionType(plan, accessMode));\n \n-            return new FragmentResult( resultRecords, Mono.empty(), executionType );\n+            return new FragmentResult(resultRecords, Mono.empty(), executionType);\n         }\n \n-        FragmentResult runUnion( Fragment.Union union, Record argument )\n+        FragmentResult runUnion(Fragment.Union union, Record argument)\n         {\n-            FragmentResult lhs = run( union.lhs(), argument );\n-            FragmentResult rhs = run( union.rhs(), argument );\n-            Flux<Record> merged = Flux.merge( lhs.records, rhs.records );\n-            Mono<QueryExecutionType> executionType = mergeExecutionType( lhs.executionType, rhs.executionType );\n-            if ( union.distinct() )\n+            FragmentResult lhs = run(union.lhs(), argument);\n+            FragmentResult rhs = run(union.rhs(), argument);\n+            Flux<Record> merged = Flux.merge(lhs.records, rhs.records);\n+            Mono<QueryExecutionType> executionType = mergeExecutionType(lhs.executionType, rhs.executionType);\n+            if (union.distinct())\n             {\n-                return new FragmentResult( merged.distinct(), Mono.empty(), executionType );\n-            }\n-            else\n+                return new FragmentResult(merged.distinct(), Mono.empty(), executionType);\n+            } else\n             {\n-                return new FragmentResult( merged, Mono.empty(), executionType );\n+                return new FragmentResult(merged, Mono.empty(), executionType);\n             }\n         }\n \n-        FragmentResult runExec( Fragment.Exec fragment, Record argument )\n+        FragmentResult runExec(Fragment.Exec fragment, Record argument)\n         {\n-            ctx.validateStatementType( fragment.statementType() );\n-            Map<String,AnyValue> argumentValues = argumentValues( fragment, argument );\n-            MapValue parameters = addParamsFromRecord( queryParams, argumentValues, mapAsJavaMap( fragment.parameters() ) );\n+            ctx.validateStatementType(fragment.statementType());\n+            Map<String, AnyValue> argumentValues = argumentValues(fragment, argument);\n+            MapValue parameters = addParamsFromRecord(queryParams, argumentValues, mapAsJavaMap(fragment.parameters()));\n \n-            Catalog.Graph graph = evalUse( fragment.use().graphSelection(), argumentValues );\n-            var transactionMode = getTransactionMode( fragment.queryType(), graph.toString() );\n-            Location location = catalogManager.locationOf( graph, transactionMode.requiresWrite(), routingContext.isServerRoutingEnabled() );\n-            if ( location instanceof Location.Local )\n+            Catalog.Graph graph = evalUse(fragment.use().graphSelection(), argumentValues);\n+            var transactionMode = getTransactionMode(fragment.queryType(), graph.toString());\n+            Location location = catalogManager.locationOf(graph, transactionMode.requiresWrite(), routingContext.isServerRoutingEnabled());\n+            if (location instanceof Location.Local)\n             {\n                 Location.Local local = (Location.Local) location;\n-                FragmentResult input = run( fragment.input(), argument );\n-                if ( fragment.executable() )\n+                FragmentResult input = run(fragment.input(), argument);\n+                if (fragment.executable())\n                 {\n-                    FabricQuery.LocalQuery localQuery = plannerInstance.asLocal( fragment );\n-                    FragmentResult fragmentResult = runLocalQueryAt( local, transactionMode, localQuery.query(), parameters, input.records );\n-                    Mono<QueryExecutionType> executionType = mergeExecutionType( input.executionType, fragmentResult.executionType );\n-                    return new FragmentResult( fragmentResult.records, fragmentResult.planDescription, executionType );\n-                }\n-                else\n+                    FabricQuery.LocalQuery localQuery = plannerInstance.asLocal(fragment);\n+                    FragmentResult fragmentResult = runLocalQueryAt(local, transactionMode, localQuery.query(), parameters, input.records);\n+                    Mono<QueryExecutionType> executionType = mergeExecutionType(input.executionType, fragmentResult.executionType);\n+                    return new FragmentResult(fragmentResult.records, fragmentResult.planDescription, executionType);\n+                } else\n                 {\n                     return input;\n                 }\n-            }\n-            else if ( location instanceof Location.Remote )\n+            } else if (location instanceof Location.Remote)\n             {\n                 Location.Remote remote = (Location.Remote) location;\n-                FabricQuery.RemoteQuery remoteQuery = plannerInstance.asRemote( fragment );\n-                MapValue fullParams = addParams( parameters, mapAsJavaMap( remoteQuery.extractedLiterals() ) );\n+                FabricQuery.RemoteQuery remoteQuery = plannerInstance.asRemote(fragment);\n+                MapValue fullParams = addParams(parameters, mapAsJavaMap(remoteQuery.extractedLiterals()));\n \n-                return runRemoteQueryAt( remote, transactionMode, remoteQuery.query(), fullParams );\n-            }\n-            else\n+                return runRemoteQueryAt(remote, transactionMode, remoteQuery.query(), fullParams);\n+            } else\n             {\n-                throw notImplemented( \"Invalid graph location\", location );\n+                throw notImplemented(\"Invalid graph location\", location);\n             }\n         }\n \n-        FragmentResult runLocalQueryAt( Location.Local location, TransactionMode transactionMode, FullyParsedQuery query, MapValue parameters,\n-                                        Flux<Record> input )\n+        FragmentResult runLocalQueryAt(Location.Local location, TransactionMode transactionMode, FullyParsedQuery query, MapValue parameters,\n+                                       Flux<Record> input)\n         {\n \n-            ExecutionOptions executionOptions = plan.inFabricContext() && !isFabricDatabase( location )\n-                                                ? new ExecutionOptions( location.getGraphId() )\n-                                                : new ExecutionOptions();\n+            ExecutionOptions executionOptions = plan.inFabricContext() && !isFabricDatabase(location)\n+              ? new ExecutionOptions(location.getGraphId())\n+              : new ExecutionOptions();\n \n-            StatementResult localStatementResult = ctx.getLocal().run( location, transactionMode, lifecycle, query, parameters, input, executionOptions );\n-            Flux<Record> records = localStatementResult.records().doOnComplete( () -> localStatementResult.summary().subscribe( this::updateSummary ) );\n+            StatementResult localStatementResult = ctx.getLocal().run(location, transactionMode, lifecycle, query, parameters, input, executionOptions);\n+            Flux<Record> records = localStatementResult.records().doOnComplete(() -> localStatementResult.summary().subscribe(this::updateSummary));\n \n             Mono<ExecutionPlanDescription> planDescription =\n-                    localStatementResult.summary()\n-                                        .map( Summary::executionPlanDescription )\n-                                        .map( pd -> new TaggingPlanDescriptionWrapper( pd, location.getDatabaseName() ) );\n-            return new FragmentResult( records, planDescription, localStatementResult.executionType() );\n+              localStatementResult.summary()\n+                .map(Summary::executionPlanDescription)\n+                .map(pd -> new TaggingPlanDescriptionWrapper(pd, location.getDatabaseName()));\n+            return new FragmentResult(records, planDescription, localStatementResult.executionType());\n         }\n \n-        FragmentResult runRemoteQueryAt( Location.Remote location, TransactionMode transactionMode, String queryString, MapValue parameters )\n+        FragmentResult runRemoteQueryAt(Location.Remote location, TransactionMode transactionMode, String queryString, MapValue parameters)\n         {\n-            Mono<StatementResult> statementResult = ctx.getRemote().run( location, queryString, transactionMode, parameters );\n-            Flux<Record> records = statementResult.flatMapMany( sr -> sr.records().doOnComplete( () -> sr.summary().subscribe( this::updateSummary ) ) );\n+            Mono<StatementResult> statementResult = ctx.getRemote().run(location, queryString, transactionMode, parameters);\n+            Flux<Record> records = statementResult.flatMapMany(sr -> sr.records().doOnComplete(() -> sr.summary().subscribe(this::updateSummary)));\n \n             // 'onComplete' signal coming from an inner stream might cause more data being requested from an upstream operator\n             // and the request will be done using the thread that invoked 'onComplete'.\n             // Since 'onComplete' is invoked by driver IO thread ( Netty event loop ), this might cause the driver thread to block\n             // or perform a computationally intensive operation in an upstream operator if the upstream operator is Cypher local execution\n             // that produces records directly in 'request' call.\n-            Flux<Record> recordsWithCompletionDelegation = new CompletionDelegatingOperator( records, fabricWorkerExecutor );\n-            Flux<Record> prefetchedRecords = prefetcher.addPrefetch( recordsWithCompletionDelegation );\n+            Flux<Record> recordsWithCompletionDelegation = new CompletionDelegatingOperator(records, fabricWorkerExecutor);\n+            Flux<Record> prefetchedRecords = prefetcher.addPrefetch(recordsWithCompletionDelegation);\n             Mono<ExecutionPlanDescription> planDescription = statementResult\n-                    .flatMap( StatementResult::summary )\n-                    .map( Summary::executionPlanDescription )\n-                    .map( remotePlanDescription -> new RemoteExecutionPlanDescription( remotePlanDescription, location ) );\n+              .flatMap(StatementResult::summary)\n+              .map(Summary::executionPlanDescription)\n+              .map(remotePlanDescription -> new RemoteExecutionPlanDescription(remotePlanDescription, location));\n \n             // TODO: We currently need to override here since we can't get it from remote properly\n             // but our result here is not as accurate as what the remote might report.\n-            Mono<QueryExecutionType> executionType = Mono.just( EffectiveQueryType.queryExecutionType( plan, accessMode ) );\n+            Mono<QueryExecutionType> executionType = Mono.just(EffectiveQueryType.queryExecutionType(plan, accessMode));\n \n-            return new FragmentResult( prefetchedRecords, planDescription, executionType );\n+            return new FragmentResult(prefetchedRecords, planDescription, executionType);\n         }\n \n-        private Map<String,AnyValue> argumentValues( Fragment fragment, Record argument )\n+        private Map<String, AnyValue> argumentValues(Fragment fragment, Record argument)\n         {\n-            if ( argument == null )\n+            if (argument == null)\n             {\n                 return Map.of();\n-            }\n-            else\n+            } else\n             {\n-                return Records.asMap( argument, seqAsJavaList( fragment.argumentColumns() ) );\n+                return Records.asMap(argument, seqAsJavaList(fragment.argumentColumns()));\n             }\n         }\n \n-        private Catalog.Graph evalUse( GraphSelection selection, Map<String,AnyValue> record )\n+        private Catalog.Graph evalUse(GraphSelection selection, Map<String, AnyValue> record)\n         {\n-            return useEvaluator.evaluate( selection, queryParams, record );\n+            return useEvaluator.evaluate(selection, queryParams, record);\n         }\n \n-        private MapValue addParamsFromRecord( MapValue params, Map<String,AnyValue> record, Map<String,String> bindings )\n+        private MapValue addParamsFromRecord(MapValue params, Map<String, AnyValue> record, Map<String, String> bindings)\n         {\n             int resultSize = params.size() + bindings.size();\n-            if ( resultSize == 0 )\n+            if (resultSize == 0)\n             {\n                 return VirtualValues.EMPTY_MAP;\n             }\n-            MapValueBuilder builder = new MapValueBuilder( resultSize );\n-            params.foreach( builder::add );\n-            bindings.forEach( ( var, par ) -> builder.add( par, validateValue( record.get( var ) ) ) );\n+            MapValueBuilder builder = new MapValueBuilder(resultSize);\n+            params.foreach(builder::add);\n+            bindings.forEach((var, par) -> builder.add(par, validateValue(record.get(var))));\n             return builder.build();\n         }\n \n-        private MapValue addParams( MapValue params, Map<String,Object> newValues )\n+        private MapValue addParams(MapValue params, Map<String, Object> newValues)\n         {\n             int resultSize = params.size() + newValues.size();\n-            if ( resultSize == 0 || newValues.size() == 0 )\n+            if (resultSize == 0 || newValues.size() == 0)\n             {\n                 return params;\n             }\n-            MapValueBuilder builder = new MapValueBuilder( resultSize );\n-            params.foreach( builder::add );\n-            newValues.forEach( ( key, val ) -> builder.add( key, Values.of( val ) ) );\n+            MapValueBuilder builder = new MapValueBuilder(resultSize);\n+            params.foreach(builder::add);\n+            newValues.forEach((key, val) -> builder.add(key, Values.of(val)));\n             return builder.build();\n         }\n \n-        private AnyValue validateValue( AnyValue value )\n+        private AnyValue validateValue(AnyValue value)\n         {\n-            if ( value instanceof VirtualNodeValue )\n+            if (value instanceof VirtualNodeValue)\n             {\n-                throw new FabricException( Status.Statement.TypeError, \"Importing node values in remote subqueries is currently not supported\" );\n-            }\n-            else if ( value instanceof VirtualRelationshipValue )\n+                throw new FabricException(Status.Statement.TypeError, \"Importing node values in remote subqueries is currently not supported\");\n+            } else if (value instanceof VirtualRelationshipValue)\n             {\n-                throw new FabricException( Status.Statement.TypeError, \"Importing relationship values in remote subqueries is currently not supported\" );\n-            }\n-            else if ( value instanceof PathValue )\n+                throw new FabricException(Status.Statement.TypeError, \"Importing relationship values in remote subqueries is currently not supported\");\n+            } else if (value instanceof PathValue)\n             {\n-                throw new FabricException( Status.Statement.TypeError, \"Importing path values in remote subqueries is currently not supported\" );\n-            }\n-            else\n+                throw new FabricException(Status.Statement.TypeError, \"Importing path values in remote subqueries is currently not supported\");\n+            } else\n             {\n                 return value;\n             }\n         }\n \n-        private boolean isFabricDatabase( Location.Local location )\n+        private boolean isFabricDatabase(Location.Local location)\n         {\n             return fabricDatabaseName\n-                    .map( name -> name.name().equals( location.getDatabaseName() ) )\n-                    .orElse( false );\n+              .map(name -> name.name().equals(location.getDatabaseName()))\n+              .orElse(false);\n         }\n \n-        private void updateSummary( Summary summary )\n+        private void updateSummary(Summary summary)\n         {\n-            if ( summary != null )\n+            if (summary != null)\n             {\n-                this.statistics.add( summary.getQueryStatistics() );\n-                this.notifications.addAll( summary.getNotifications() );\n+                this.statistics.add(summary.getQueryStatistics());\n+                this.notifications.addAll(summary.getNotifications());\n             }\n         }\n \n-        private Mono<QueryExecutionType> mergeExecutionType( Mono<QueryExecutionType> lhs, Mono<QueryExecutionType> rhs )\n+        private Mono<QueryExecutionType> mergeExecutionType(Mono<QueryExecutionType> lhs, Mono<QueryExecutionType> rhs)\n         {\n-            return Mono.zip( lhs, rhs )\n-                       .map( both -> QueryTypes.merge( both.getT1(), both.getT2() ) )\n-                       .switchIfEmpty( lhs )\n-                       .switchIfEmpty( rhs );\n+            return Mono.zip(lhs, rhs)\n+              .map(both -> QueryTypes.merge(both.getT1(), both.getT2()))\n+              .switchIfEmpty(lhs)\n+              .switchIfEmpty(rhs);\n         }\n \n-        private RuntimeException notImplemented( String msg, Object object )\n+        private RuntimeException notImplemented(String msg, Object object)\n         {\n-            return notImplemented( msg, object.toString() );\n+            return notImplemented(msg, object.toString());\n         }\n \n-        private RuntimeException notImplemented( String msg, String info )\n+        private RuntimeException notImplemented(String msg, String info)\n         {\n-            return new InvalidSemanticsException( msg + \": \" + info );\n+            return new InvalidSemanticsException(msg + \": \" + info);\n         }\n \n-        private TransactionMode getTransactionMode( QueryType queryType, String graph )\n+        private TransactionMode getTransactionMode(QueryType queryType, String graph)\n         {\n-            if ( plan.executionType() == FabricPlan.EXPLAIN() )\n+            if (plan.executionType() == FabricPlan.EXPLAIN())\n             {\n                 return TransactionMode.DEFINITELY_READ;\n             }\n \n-            var queryMode = EffectiveQueryType.effectiveAccessMode( accessMode, queryType );\n+            var queryMode = EffectiveQueryType.effectiveAccessMode(accessMode, queryType);\n \n-            if ( accessMode == AccessMode.WRITE )\n+            if (accessMode == AccessMode.WRITE)\n             {\n-                if ( queryMode == AccessMode.WRITE )\n+                if (queryMode == AccessMode.WRITE)\n                 {\n                     return TransactionMode.DEFINITELY_WRITE;\n-                }\n-                else\n+                } else\n                 {\n                     return TransactionMode.MAYBE_WRITE;\n                 }\n-            }\n-            else\n+            } else\n             {\n-                if ( queryMode == AccessMode.WRITE )\n+                if (queryMode == AccessMode.WRITE)\n                 {\n-                    throw new FabricException( Status.Statement.AccessMode, \"Writing in read access mode not allowed. Attempted write to %s\", graph );\n-                }\n-                else\n+                    throw new FabricException(Status.Statement.AccessMode, \"Writing in read access mode not allowed. Attempted write to %s\", graph);\n+                } else\n                 {\n                     return TransactionMode.DEFINITELY_READ;\n                 }\n@@ -560,9 +541,9 @@ public class FabricExecutor\n         private final Mono<ExecutionPlanDescription> planDescription;\n         private final Mono<QueryExecutionType> executionType;\n \n-        FragmentResult( Flux<Record> records,\n-                        Mono<ExecutionPlanDescription> planDescription,\n-                        Mono<QueryExecutionType> executionType )\n+        FragmentResult(Flux<Record> records,\n+                       Mono<ExecutionPlanDescription> planDescription,\n+                       Mono<QueryExecutionType> executionType)\n         {\n             this.records = records;\n             this.planDescription = planDescription;\n@@ -576,79 +557,79 @@ public class FabricExecutor\n         private final Log log;\n \n         FabricLoggingStatementExecution(\n-                FabricPlan plan,\n-                FabricPlanner.PlannerInstance plannerInstance,\n-                UseEvaluation.Instance useEvaluator, MapValue params,\n-                AccessMode accessMode,\n-                RoutingContext routingContext,\n-                FabricTransaction.FabricExecutionContext ctx,\n-                Log log,\n-                StatementLifecycle lifecycle,\n-                FabricConfig.DataStream dataStreamConfig )\n-        {\n-            super( plan, plannerInstance, useEvaluator, params, accessMode, routingContext, ctx, lifecycle, dataStreamConfig );\n-            this.step = new AtomicInteger( 0 );\n+          FabricPlan plan,\n+          FabricPlanner.PlannerInstance plannerInstance,\n+          UseEvaluation.Instance useEvaluator, MapValue params,\n+          AccessMode accessMode,\n+          RoutingContext routingContext,\n+          FabricTransaction.FabricExecutionContext ctx,\n+          Log log,\n+          StatementLifecycle lifecycle,\n+          FabricConfig.DataStream dataStreamConfig)\n+        {\n+            super(plan, plannerInstance, useEvaluator, params, accessMode, routingContext, ctx, lifecycle, dataStreamConfig);\n+            this.step = new AtomicInteger(0);\n             this.log = log;\n         }\n \n         @Override\n-        FragmentResult runLocalQueryAt( Location.Local location, TransactionMode transactionMode, FullyParsedQuery query, MapValue parameters,\n-                                        Flux<Record> input )\n+        FragmentResult runLocalQueryAt(Location.Local location, TransactionMode transactionMode, FullyParsedQuery query, MapValue parameters,\n+                                       Flux<Record> input)\n         {\n             String id = executionId();\n-            trace( id, \"local \" + location.getGraphId(), compact( query.description() ) );\n-            return traceRecords( id, super.runLocalQueryAt( location, transactionMode, query, parameters, input ) );\n+            trace(id, \"local \" + location.getGraphId(), compact(query.description()));\n+            return traceRecords(id, super.runLocalQueryAt(location, transactionMode, query, parameters, input));\n         }\n \n         @Override\n-        FragmentResult runRemoteQueryAt( Location.Remote location, TransactionMode transactionMode, String queryString, MapValue parameters )\n+        FragmentResult runRemoteQueryAt(Location.Remote location, TransactionMode transactionMode, String queryString, MapValue parameters)\n         {\n             String id = executionId();\n-            trace( id, \"remote \" + location.getGraphId(), compact( queryString ) );\n-            return traceRecords( id, super.runRemoteQueryAt( location, transactionMode, queryString, parameters ) );\n+            trace(id, \"remote \" + location.getGraphId(), compact(queryString));\n+            return traceRecords(id, super.runRemoteQueryAt(location, transactionMode, queryString, parameters));\n         }\n \n-        private String compact( String in )\n+        private String compact(String in)\n         {\n-            return in.replaceAll( \"\\\\r?\\\\n\", \" \" ).replaceAll( \"\\\\s+\", \" \" );\n+            return in.replaceAll(\"\\\\r?\\\\n\", \" \").replaceAll(\"\\\\s+\", \" \");\n         }\n \n-        private FragmentResult traceRecords( String id, FragmentResult fragmentResult )\n+        private FragmentResult traceRecords(String id, FragmentResult fragmentResult)\n         {\n             var records = fragmentResult.records\n-                    .doOnNext( record ->\n-                               {\n-                                   String rec = IntStream.range( 0, record.size() )\n-                                                         .mapToObj( i -> record.getValue( i ).toString() )\n-                                                         .collect( Collectors.joining( \", \", \"[\", \"]\" ) );\n-                                   trace( id, \"output\", rec );\n-                               } )\n-                    .doOnError( err ->\n-                                {\n-                                    String rec = err.getClass().getSimpleName() + \": \" + err.getMessage();\n-                                    trace( id, \"error\", rec );\n-                                }\n-                    )\n-                    .doOnCancel( () -> trace( id, \"cancel\", \"cancel\" ) )\n-                    .doOnComplete( () -> trace( id, \"complete\", \"complete\" ) );\n-            return new FragmentResult( records, fragmentResult.planDescription, fragmentResult.executionType );\n+              .doOnNext(record ->\n+              {\n+                  String rec = IntStream.range(0, record.size())\n+                    .mapToObj(i -> record.getValue(i).toString())\n+                    .collect(Collectors.joining(\", \", \"[\", \"]\"));\n+                  trace(id, \"output\", rec);\n+              })\n+              .doOnError(err ->\n+                {\n+                    String rec = err.getClass().getSimpleName() + \": \" + err.getMessage();\n+                    trace(id, \"error\", rec);\n+                }\n+              )\n+              .doOnCancel(() -> trace(id, \"cancel\", \"cancel\"))\n+              .doOnComplete(() -> trace(id, \"complete\", \"complete\"));\n+            return new FragmentResult(records, fragmentResult.planDescription, fragmentResult.executionType);\n         }\n \n-        private void trace( String id, String event, String data )\n+        private void trace(String id, String event, String data)\n         {\n-            log.debug( String.format( \"%s: %s: %s\", id, event, data ) );\n+            log.debug(String.format(\"%s: %s: %s\", id, event, data));\n         }\n \n         private String executionId()\n         {\n-            String stmtId = idString( this.hashCode() );\n-            String step = idString( this.step.getAndIncrement() );\n-            return String.format( \"%s/%s\", stmtId, step );\n+            String stmtId = idString(this.hashCode());\n+            String step = idString(this.step.getAndIncrement());\n+            return String.format(\"%s/%s\", stmtId, step);\n         }\n \n-        private String idString( int code )\n+        private String idString(int code)\n         {\n-            return String.format( \"%08X\", code );\n+            return String.format(\"%08X\", code);\n         }\n     }\n }\n",
            "diff_size": 265
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}