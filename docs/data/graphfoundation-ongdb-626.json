{
    "project_name": "graphfoundation-ongdb",
    "error_id": "626",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/626/IndexDefinitionImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/626/IndexDefinitionImpl.java\nindex 5dbb9a2cc45..f8c4a103bab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/626/IndexDefinitionImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/626/IndexDefinitionImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.coreapi.schema;\n \n import java.util.Arrays;\n@@ -30,96 +31,95 @@ import static java.util.Arrays.asList;\n \n public class IndexDefinitionImpl implements IndexDefinition\n {\n-    private final InternalSchemaActions actions;\n+  private final InternalSchemaActions actions;\n \n-    private final Label label;\n-    private final String[] propertyKeys;\n-    private final boolean constraintIndex;\n+  private final Label label;\n+  private final String[] propertyKeys;\n+  private final boolean constraintIndex;\n \n-    public IndexDefinitionImpl( InternalSchemaActions actions, Label label, String[] propertyKeys,\n-            boolean constraintIndex )\n-    {\n-        this.actions = actions;\n-        this.label = label;\n-        this.propertyKeys = propertyKeys;\n-        this.constraintIndex = constraintIndex;\n+  public IndexDefinitionImpl(InternalSchemaActions actions, Label label, String[] propertyKeys,\n+                             boolean constraintIndex)\n+  {\n+    this.actions = actions;\n+    this.label = label;\n+    this.propertyKeys = propertyKeys;\n+    this.constraintIndex = constraintIndex;\n \n-        assertInUnterminatedTransaction();\n-    }\n+    assertInUnterminatedTransaction();\n+  }\n \n-    @Override\n-    public Label getLabel()\n-    {\n-        assertInUnterminatedTransaction();\n-        return label;\n-    }\n+  @Override\n+  public Label getLabel()\n+  {\n+    assertInUnterminatedTransaction();\n+    return label;\n+  }\n \n-    @Override\n-    public Iterable<String> getPropertyKeys()\n-    {\n-        assertInUnterminatedTransaction();\n-        return asList( propertyKeys );\n-    }\n+  @Override\n+  public Iterable<String> getPropertyKeys()\n+  {\n+    assertInUnterminatedTransaction();\n+    return asList(propertyKeys);\n+  }\n \n-    @Override\n-    public void drop()\n+  @Override\n+  public void drop()\n+  {\n+    try\n     {\n-        try\n-        {\n-            actions.dropIndexDefinitions( this );\n-        }\n-        catch ( ConstraintViolationException e )\n-        {\n-            if ( this.isConstraintIndex() )\n-            {\n-                throw new IllegalStateException( \"Constraint indexes cannot be dropped directly, \" +\n-                                                 \"instead drop the owning uniqueness constraint.\", e );\n-            }\n-            throw e;\n-        }\n-    }\n-\n-    @Override\n-    public boolean isConstraintIndex()\n+      actions.dropIndexDefinitions(this);\n+    } catch (ConstraintViolationException e)\n     {\n-        assertInUnterminatedTransaction();\n-        return constraintIndex;\n+      if (this.isConstraintIndex())\n+      {\n+        throw new IllegalStateException(\"Constraint indexes cannot be dropped directly, \" +\n+            \"instead drop the owning uniqueness constraint.\", e);\n+      }\n+      throw e;\n     }\n+  }\n \n-    @Override\n-    public int hashCode()\n-    {\n-        return 31 * label.name().hashCode() + Arrays.hashCode( propertyKeys );\n-    }\n+  @Override\n+  public boolean isConstraintIndex()\n+  {\n+    assertInUnterminatedTransaction();\n+    return constraintIndex;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return 31 * label.name().hashCode() + Arrays.hashCode(propertyKeys);\n+  }\n \n-    @Override\n-    public boolean equals( Object obj )\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (this == obj)\n     {\n-        if ( this == obj )\n-        {\n-            return true;\n-        }\n-        if ( obj == null )\n-        {\n-            return false;\n-        }\n-        if ( getClass() != obj.getClass() )\n-        {\n-            return false;\n-        }\n-        IndexDefinitionImpl other = (IndexDefinitionImpl) obj;\n-        return label.name().equals( other.label.name() ) && Arrays.equals( propertyKeys, other.propertyKeys );\n+      return true;\n     }\n-\n-    @Override\n-    public String toString()\n+    if (obj == null)\n     {\n-        return \"IndexDefinition[label:\" + label + \", on:\" +\n-               Arrays.stream( propertyKeys ).collect( Collectors.joining( \",\" ) ) + \"]\";\n+      return false;\n     }\n-\n-    private void assertInUnterminatedTransaction()\n+    if (getClass() != obj.getClass())\n     {\n-        actions.assertInOpenTransaction();\n+      return false;\n     }\n+    IndexDefinitionImpl other = (IndexDefinitionImpl) obj;\n+    return label.name().equals(other.label.name()) && Arrays.equals(propertyKeys, other.propertyKeys);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"IndexDefinition[label:\" + label + \", on:\" +\n+        Arrays.stream(propertyKeys).collect(Collectors.joining(\",\")) + \"]\";\n+  }\n+\n+  private void assertInUnterminatedTransaction()\n+  {\n+    actions.assertInOpenTransaction();\n+  }\n }\n",
            "diff_size": 107
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/626/IndexDefinitionImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/626/IndexDefinitionImpl.java\nindex 5dbb9a2cc45..4abd4dc2dd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/626/IndexDefinitionImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/626/IndexDefinitionImpl.java\n@@ -72,9 +72,8 @@ public class IndexDefinitionImpl implements IndexDefinition\n         {\n             if ( this.isConstraintIndex() )\n             {\n-                throw new IllegalStateException( \"Constraint indexes cannot be dropped directly, \" +\n-                                                 \"instead drop the owning uniqueness constraint.\", e );\n-            }\n+                throw new IllegalStateException( \"Constraint indexes cannot be dropped directly, \" + \"instead drop the owning uniqueness constraint.\", e );\n+    }\n             throw e;\n         }\n     }\n@@ -99,27 +98,29 @@ public class IndexDefinitionImpl implements IndexDefinition\n         {\n             return true;\n         }\n-        if ( obj == null )\n+\n+if ( obj == null )\n         {\n             return false;\n         }\n-        if ( getClass() != obj.getClass() )\n+\n+if ( getClass() != obj.getClass() )\n         {\n             return false;\n         }\n-        IndexDefinitionImpl other = (IndexDefinitionImpl) obj;\n+\n+IndexDefinitionImpl other = (IndexDefinitionImpl) obj;\n         return label.name().equals( other.label.name() ) && Arrays.equals( propertyKeys, other.propertyKeys );\n     }\n \n     @Override\n     public String toString()\n     {\n-        return \"IndexDefinition[label:\" + label + \", on:\" +\n-               Arrays.stream( propertyKeys ).collect( Collectors.joining( \",\" ) ) + \"]\";\n+        return \"IndexDefinition[label:\" + label + \", on:\" + Arrays.stream( propertyKeys ).collect( Collectors.joining( \",\" ) ) + \"]\";\n     }\n \n     private void assertInUnterminatedTransaction()\n     {\n         actions.assertInOpenTransaction();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}