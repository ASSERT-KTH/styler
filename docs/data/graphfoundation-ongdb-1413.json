{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1413",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1413/FileNames.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1413/FileNames.java\nindex 16072f370d9..c55a2b58af5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1413/FileNames.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1413/FileNames.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus.log.segmented;\n \n import java.io.File;\n@@ -30,72 +31,70 @@ import org.neo4j.logging.Log;\n \n /**\n  * Deals with file names for the RAFT log. The files are named as\n- *\n- *   raft.log.0\n- *   raft.log.1\n- *   ...\n- *   raft.log.23\n- *   ...\n- *\n+ * <p>\n+ * raft.log.0\n+ * raft.log.1\n+ * ...\n+ * raft.log.23\n+ * ...\n+ * <p>\n  * where the suffix represents the version, which is a strictly monotonic sequence.\n  */\n public class FileNames\n {\n-    static final String BASE_FILE_NAME = \"raft.log.\";\n-    private static final String VERSION_MATCH = \"(0|[1-9]\\\\d*)\";\n+  static final String BASE_FILE_NAME = \"raft.log.\";\n+  private static final String VERSION_MATCH = \"(0|[1-9]\\\\d*)\";\n \n-    private final File baseDirectory;\n-    private final Pattern logFilePattern;\n+  private final File baseDirectory;\n+  private final Pattern logFilePattern;\n \n-    /**\n-     * Creates an object useful for managing RAFT log file names.\n-     *\n-     * @param baseDirectory The base directory in which the RAFT log files reside.\n-     */\n-    public FileNames( File baseDirectory )\n-    {\n-        this.baseDirectory = baseDirectory;\n-        this.logFilePattern = Pattern.compile( BASE_FILE_NAME + VERSION_MATCH );\n-    }\n+  /**\n+   * Creates an object useful for managing RAFT log file names.\n+   *\n+   * @param baseDirectory The base directory in which the RAFT log files reside.\n+   */\n+  public FileNames(File baseDirectory)\n+  {\n+    this.baseDirectory = baseDirectory;\n+    this.logFilePattern = Pattern.compile(BASE_FILE_NAME + VERSION_MATCH);\n+  }\n \n-    /**\n-     * Creates a file object for the specific version.\n-     *\n-     * @param version The version.\n-     *\n-     * @return A file for the specific version.\n-     */\n-    File getForVersion( long version )\n-    {\n-        return new File( baseDirectory, BASE_FILE_NAME + version );\n-    }\n-\n-    /**\n-     * Looks in the base directory for all suitable RAFT log files and returns a sorted map\n-     * with the version as key and File as value.\n-     *\n-     * @param fileSystem The filesystem.\n-     * @param log The message log.\n-     *\n-     * @return The sorted version to file map.\n-     */\n-    public SortedMap<Long,File> getAllFiles( FileSystemAbstraction fileSystem, Log log )\n-    {\n-        SortedMap<Long,File> versionFileMap = new TreeMap<>();\n+  /**\n+   * Creates a file object for the specific version.\n+   *\n+   * @param version The version.\n+   * @return A file for the specific version.\n+   */\n+  File getForVersion(long version)\n+  {\n+    return new File(baseDirectory, BASE_FILE_NAME + version);\n+  }\n \n-        for ( File file : fileSystem.listFiles( baseDirectory ) )\n-        {\n-            Matcher matcher = logFilePattern.matcher( file.getName() );\n+  /**\n+   * Looks in the base directory for all suitable RAFT log files and returns a sorted map\n+   * with the version as key and File as value.\n+   *\n+   * @param fileSystem The filesystem.\n+   * @param log        The message log.\n+   * @return The sorted version to file map.\n+   */\n+  public SortedMap<Long, File> getAllFiles(FileSystemAbstraction fileSystem, Log log)\n+  {\n+    SortedMap<Long, File> versionFileMap = new TreeMap<>();\n \n-            if ( !matcher.matches() )\n-            {\n-                log.warn( \"Found out of place file: \" + file.getName() );\n-                continue;\n-            }\n+    for (File file : fileSystem.listFiles(baseDirectory))\n+    {\n+      Matcher matcher = logFilePattern.matcher(file.getName());\n \n-            versionFileMap.put( Long.valueOf( matcher.group( 1 ) ), file );\n-        }\n+      if (!matcher.matches())\n+      {\n+        log.warn(\"Found out of place file: \" + file.getName());\n+        continue;\n+      }\n \n-        return versionFileMap;\n+      versionFileMap.put(Long.valueOf(matcher.group(1)), file);\n     }\n+\n+    return versionFileMap;\n+  }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1413/FileNames.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1413/FileNames.java\nindex 16072f370d9..5c1d85d4d22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1413/FileNames.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1413/FileNames.java\n@@ -43,8 +43,7 @@ public class FileNames\n {\n     static final String BASE_FILE_NAME = \"raft.log.\";\n     private static final String VERSION_MATCH = \"(0|[1-9]\\\\d*)\";\n-\n-    private final File baseDirectory;\n+private final File baseDirectory;\n     private final Pattern logFilePattern;\n \n     /**\n@@ -82,12 +81,10 @@ public class FileNames\n     public SortedMap<Long,File> getAllFiles( FileSystemAbstraction fileSystem, Log log )\n     {\n         SortedMap<Long,File> versionFileMap = new TreeMap<>();\n-\n-        for ( File file : fileSystem.listFiles( baseDirectory ) )\n+for ( File file : fileSystem.listFiles( baseDirectory ) )\n         {\n             Matcher matcher = logFilePattern.matcher( file.getName() );\n-\n-            if ( !matcher.matches() )\n+if ( !matcher.matches() )\n             {\n                 log.warn( \"Found out of place file: \" + file.getName() );\n                 continue;\n@@ -98,4 +95,4 @@ public class FileNames\n \n         return versionFileMap;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}