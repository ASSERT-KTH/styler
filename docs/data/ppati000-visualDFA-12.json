{
    "project_name": "ppati000-visualDFA",
    "error_id": "12",
    "information": {
        "errors": [
            {
                "line": "10",
                "column": "4",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " * \n * @author Anika Nietzer \n * \t\t\tCentral unit, that is responsible for the communication\n *       \tbetween the GUI and the remaining packages of the program.\n *\n */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "10",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/12/Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/12/Controller.java\nindex 39fd43ae204..59bd4adc233 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/12/Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/intellij/12/Controller.java\n@@ -5,148 +5,144 @@ import javax.swing.JPanel;\n import gui.ProgramFrame;\n \n /**\n- * \n- * @author Anika Nietzer \n- * \t\t\tCentral unit, that is responsible for the communication\n- *       \tbetween the GUI and the remaining packages of the program.\n- *\n+ * @author Anika Nietzer\n+ * Central unit, that is responsible for the communication\n+ * between the GUI and the remaining packages of the program.\n  */\n public class Controller {\n \n-\tprivate ProgramFrame programFrame;\n-\n-\t/**\n-\t * Creates a new {@code Controller} and additionally an\n-\t * {@code AnalysisLoader} and a {@code GraphUIController}.\n-\t */\n-\tpublic Controller() {\n-\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the next block by the DFAFramework and\n-\t * ensures that the {@code GraphUIController} actualizes the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return weather there was a next block to show or not\n-\t */\n-\tpublic boolean nextBlock() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the next line by the DFAFramework and ensures\n-\t * that the {@code GraphUIController} updates the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return weather there was a next line to show or not\n-\t */\n-\tpublic boolean nextLine() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the previous line by the DFAFramework and\n-\t * ensures that the {@code GraphUIController} updates the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return weather there was a previous line to show or not\n-\t */\n-\tpublic boolean previousLine() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the previous block by the DFAFramework and\n-\t * ensures that the {@code GraphUIController} updates the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return whether there was a previous block to show or not\n-\t */\n-\tpublic boolean previousBlock() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of a given step in the analysis from the\n-\t * DFAFramework and ensures that the {@code GraphUIController} updates\n-\t * the {@code VisualGraphPanel}.\n-\t * \n-\t * @param step\n-\t *            step to show in the animation\n-\t * @return weather the step can be shown or not\n-\t */\n-\tpublic boolean jumpToStep(int step) {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Creates a new {@code AutoplayDriver} to replay the different steps of the\n-\t * analysis if a delay bigger than zero is selected or jumps to the last\n-\t * step of the analysis if the chosen delay is zero.\n-\t */\n-\tpublic void play() {\n-\n-\t}\n-\n-\t/**\n-\t * Stops the {@code AutoplayDriver}.\n-\t */\n-\tpublic void pause() {\n-\n-\t}\n-\n-\t/**\n-\t * Creates a new {@code CodeProcessor} to process the input of the user and\n-\t * creates a {@code SimpleBlockGraph} of the chosen method. Precalculates the steps of the\n-\t * analysis with the {@code DFAPrecalculator}. The {@code GraphUIController}\n-\t * is invoked to display the CFG. The {@code ControlPanel}, the\n-\t * {@code StatePanel} and the {@code VisualGraphPanel} are activated and the\n-\t * {@code InputPanel} is deactivated.\n-\t */\n-\tpublic void startAnalysis() {\n-\n-\t}\n-\n-\t/**\n-\t * Deletes the actual {@code DFAExecution} and the content of the\n-\t * {@code VisualGraphPanel} through the {@code GraphUIController}. The\n-\t * {@code ControlPanel}, the {@code StatePanel} and the\n-\t * {@code VisualGraphPanel} are deactivated and the {@code InputPanel}\n-\t * is activated.\n-\t */\n-\tpublic void stopAnalysis() {\n-\n-\t}\n-\n-\t/**\n-\t * Sets the {@code ProgramFrame} to programFrame.\n-\t * \n-\t * @param programFrame\n-\t *            programFrame that should be set\n-\t */\n-\tpublic void setProgramFrame(ProgramFrame programFrame) {\n-\t\tthis.programFrame = programFrame;\n-\t}\n-\n-\t/**\n-\t * Returns a list of the names of the analyses that were found during\n-\t * program start by the {@code AnalysisLoader}.\n-\t * \n-\t * @return list of names of the found analyses\n-\t */\n-\tpublic List<String> getAnalysis() {\n-\t\tList<String> list = null;\n-\t\treturn list;\n-\t}\n-\n-\t/**\n-\t * Returns the {@code VisualGraphPanel} created by the\n-\t * {@code GraphUIController).\n-\t * \n-\t * @return the instance of {@code VisualGraphPanel}\n-\t */\n-\tpublic JPanel getVisualGraphPanel() {\n-\t\treturn null;\n-\t}\n+  private ProgramFrame programFrame;\n+\n+  /**\n+   * Creates a new {@code Controller} and additionally an\n+   * {@code AnalysisLoader} and a {@code GraphUIController}.\n+   */\n+  public Controller() {\n+\n+  }\n+\n+  /**\n+   * Leads to the calculation of the next block by the DFAFramework and\n+   * ensures that the {@code GraphUIController} actualizes the\n+   * {@code VisualGraphPanel}.\n+   *\n+   * @return weather there was a next block to show or not\n+   */\n+  public boolean nextBlock() {\n+    return false;\n+  }\n+\n+  /**\n+   * Leads to the calculation of the next line by the DFAFramework and ensures\n+   * that the {@code GraphUIController} updates the\n+   * {@code VisualGraphPanel}.\n+   *\n+   * @return weather there was a next line to show or not\n+   */\n+  public boolean nextLine() {\n+    return false;\n+  }\n+\n+  /**\n+   * Leads to the calculation of the previous line by the DFAFramework and\n+   * ensures that the {@code GraphUIController} updates the\n+   * {@code VisualGraphPanel}.\n+   *\n+   * @return weather there was a previous line to show or not\n+   */\n+  public boolean previousLine() {\n+    return false;\n+  }\n+\n+  /**\n+   * Leads to the calculation of the previous block by the DFAFramework and\n+   * ensures that the {@code GraphUIController} updates the\n+   * {@code VisualGraphPanel}.\n+   *\n+   * @return whether there was a previous block to show or not\n+   */\n+  public boolean previousBlock() {\n+    return false;\n+  }\n+\n+  /**\n+   * Leads to the calculation of a given step in the analysis from the\n+   * DFAFramework and ensures that the {@code GraphUIController} updates\n+   * the {@code VisualGraphPanel}.\n+   *\n+   * @param step step to show in the animation\n+   * @return weather the step can be shown or not\n+   */\n+  public boolean jumpToStep(int step) {\n+    return false;\n+  }\n+\n+  /**\n+   * Creates a new {@code AutoplayDriver} to replay the different steps of the\n+   * analysis if a delay bigger than zero is selected or jumps to the last\n+   * step of the analysis if the chosen delay is zero.\n+   */\n+  public void play() {\n+\n+  }\n+\n+  /**\n+   * Stops the {@code AutoplayDriver}.\n+   */\n+  public void pause() {\n+\n+  }\n+\n+  /**\n+   * Creates a new {@code CodeProcessor} to process the input of the user and\n+   * creates a {@code SimpleBlockGraph} of the chosen method. Precalculates the steps of the\n+   * analysis with the {@code DFAPrecalculator}. The {@code GraphUIController}\n+   * is invoked to display the CFG. The {@code ControlPanel}, the\n+   * {@code StatePanel} and the {@code VisualGraphPanel} are activated and the\n+   * {@code InputPanel} is deactivated.\n+   */\n+  public void startAnalysis() {\n+\n+  }\n+\n+  /**\n+   * Deletes the actual {@code DFAExecution} and the content of the\n+   * {@code VisualGraphPanel} through the {@code GraphUIController}. The\n+   * {@code ControlPanel}, the {@code StatePanel} and the\n+   * {@code VisualGraphPanel} are deactivated and the {@code InputPanel}\n+   * is activated.\n+   */\n+  public void stopAnalysis() {\n+\n+  }\n+\n+  /**\n+   * Sets the {@code ProgramFrame} to programFrame.\n+   *\n+   * @param programFrame programFrame that should be set\n+   */\n+  public void setProgramFrame(ProgramFrame programFrame) {\n+    this.programFrame = programFrame;\n+  }\n+\n+  /**\n+   * Returns a list of the names of the analyses that were found during\n+   * program start by the {@code AnalysisLoader}.\n+   *\n+   * @return list of names of the found analyses\n+   */\n+  public List<String> getAnalysis() {\n+    List<String> list = null;\n+    return list;\n+  }\n+\n+  /**\n+   * Returns the {@code VisualGraphPanel} created by the\n+   * {@code GraphUIController).\n+   *\n+   * @return the instance of {@code VisualGraphPanel}\n+   */\n+  public JPanel getVisualGraphPanel() {\n+    return null;\n+  }\n }\n",
            "diff_size": 141
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "10",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/12/Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/12/Controller.java\nindex 39fd43ae204..a7557e9d632 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/12/Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/naturalize/12/Controller.java\n@@ -13,7 +13,7 @@ import gui.ProgramFrame;\n  */\n public class Controller {\n \n-\tprivate ProgramFrame programFrame;\n+    private ProgramFrame programFrame;\n \n \t/**\n \t * Creates a new {@code Controller} and additionally an\n@@ -31,8 +31,8 @@ public class Controller {\n \t * @return weather there was a next block to show or not\n \t */\n \tpublic boolean nextBlock() {\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \t/**\n \t * Leads to the calculation of the next line by the DFAFramework and ensures\n@@ -42,8 +42,8 @@ public class Controller {\n \t * @return weather there was a next line to show or not\n \t */\n \tpublic boolean nextLine() {\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \t/**\n \t * Leads to the calculation of the previous line by the DFAFramework and\n@@ -53,8 +53,8 @@ public class Controller {\n \t * @return weather there was a previous line to show or not\n \t */\n \tpublic boolean previousLine() {\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \t/**\n \t * Leads to the calculation of the previous block by the DFAFramework and\n@@ -64,8 +64,8 @@ public class Controller {\n \t * @return whether there was a previous block to show or not\n \t */\n \tpublic boolean previousBlock() {\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \t/**\n \t * Leads to the calculation of a given step in the analysis from the\n@@ -77,8 +77,8 @@ public class Controller {\n \t * @return weather the step can be shown or not\n \t */\n \tpublic boolean jumpToStep(int step) {\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \t/**\n \t * Creates a new {@code AutoplayDriver} to replay the different steps of the\n@@ -126,8 +126,8 @@ public class Controller {\n \t *            programFrame that should be set\n \t */\n \tpublic void setProgramFrame(ProgramFrame programFrame) {\n-\t\tthis.programFrame = programFrame;\n-\t}\n+    this.programFrame = programFrame;\n+    }\n \n \t/**\n \t * Returns a list of the names of the analyses that were found during\n@@ -136,9 +136,9 @@ public class Controller {\n \t * @return list of names of the found analyses\n \t */\n \tpublic List<String> getAnalysis() {\n-\t\tList<String> list = null;\n+    List<String> list = null;\n \t\treturn list;\n-\t}\n+    }\n \n \t/**\n \t * Returns the {@code VisualGraphPanel} created by the\n@@ -147,6 +147,7 @@ public class Controller {\n \t * @return the instance of {@code VisualGraphPanel}\n \t */\n \tpublic JPanel getVisualGraphPanel() {\n-\t\treturn null;\n-\t}\n-}\n+    return null;\n+    }\n+\n+    }\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/12/Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/12/Controller.java\nindex 39fd43ae204..31f232d0050 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/errored/1/12/Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ppati000-visualDFA/codebuff/12/Controller.java\n@@ -7,146 +7,170 @@ import gui.ProgramFrame;\n /**\n  * \n  * @author Anika Nietzer \n- * \t\t\tCentral unit, that is responsible for the communication\n- *       \tbetween the GUI and the remaining packages of the program.\n+ *          Central unit, that is responsible for the communication\n+ *          between the GUI and the remaining packages of the program.\n  *\n  */\n+\n+\n public class Controller {\n \n-\tprivate ProgramFrame programFrame;\n-\n-\t/**\n-\t * Creates a new {@code Controller} and additionally an\n-\t * {@code AnalysisLoader} and a {@code GraphUIController}.\n-\t */\n-\tpublic Controller() {\n-\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the next block by the DFAFramework and\n-\t * ensures that the {@code GraphUIController} actualizes the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return weather there was a next block to show or not\n-\t */\n-\tpublic boolean nextBlock() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the next line by the DFAFramework and ensures\n-\t * that the {@code GraphUIController} updates the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return weather there was a next line to show or not\n-\t */\n-\tpublic boolean nextLine() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the previous line by the DFAFramework and\n-\t * ensures that the {@code GraphUIController} updates the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return weather there was a previous line to show or not\n-\t */\n-\tpublic boolean previousLine() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of the previous block by the DFAFramework and\n-\t * ensures that the {@code GraphUIController} updates the\n-\t * {@code VisualGraphPanel}.\n-\t * \n-\t * @return whether there was a previous block to show or not\n-\t */\n-\tpublic boolean previousBlock() {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Leads to the calculation of a given step in the analysis from the\n-\t * DFAFramework and ensures that the {@code GraphUIController} updates\n-\t * the {@code VisualGraphPanel}.\n-\t * \n-\t * @param step\n-\t *            step to show in the animation\n-\t * @return weather the step can be shown or not\n-\t */\n-\tpublic boolean jumpToStep(int step) {\n-\t\treturn false;\n-\t}\n-\n-\t/**\n-\t * Creates a new {@code AutoplayDriver} to replay the different steps of the\n-\t * analysis if a delay bigger than zero is selected or jumps to the last\n-\t * step of the analysis if the chosen delay is zero.\n-\t */\n-\tpublic void play() {\n-\n-\t}\n-\n-\t/**\n-\t * Stops the {@code AutoplayDriver}.\n-\t */\n-\tpublic void pause() {\n-\n-\t}\n-\n-\t/**\n-\t * Creates a new {@code CodeProcessor} to process the input of the user and\n-\t * creates a {@code SimpleBlockGraph} of the chosen method. Precalculates the steps of the\n-\t * analysis with the {@code DFAPrecalculator}. The {@code GraphUIController}\n-\t * is invoked to display the CFG. The {@code ControlPanel}, the\n-\t * {@code StatePanel} and the {@code VisualGraphPanel} are activated and the\n-\t * {@code InputPanel} is deactivated.\n-\t */\n-\tpublic void startAnalysis() {\n-\n-\t}\n-\n-\t/**\n-\t * Deletes the actual {@code DFAExecution} and the content of the\n-\t * {@code VisualGraphPanel} through the {@code GraphUIController}. The\n-\t * {@code ControlPanel}, the {@code StatePanel} and the\n-\t * {@code VisualGraphPanel} are deactivated and the {@code InputPanel}\n-\t * is activated.\n-\t */\n-\tpublic void stopAnalysis() {\n-\n-\t}\n-\n-\t/**\n-\t * Sets the {@code ProgramFrame} to programFrame.\n-\t * \n-\t * @param programFrame\n-\t *            programFrame that should be set\n-\t */\n-\tpublic void setProgramFrame(ProgramFrame programFrame) {\n-\t\tthis.programFrame = programFrame;\n-\t}\n-\n-\t/**\n-\t * Returns a list of the names of the analyses that were found during\n-\t * program start by the {@code AnalysisLoader}.\n-\t * \n-\t * @return list of names of the found analyses\n-\t */\n-\tpublic List<String> getAnalysis() {\n-\t\tList<String> list = null;\n-\t\treturn list;\n-\t}\n-\n-\t/**\n-\t * Returns the {@code VisualGraphPanel} created by the\n-\t * {@code GraphUIController).\n-\t * \n-\t * @return the instance of {@code VisualGraphPanel}\n-\t */\n-\tpublic JPanel getVisualGraphPanel() {\n-\t\treturn null;\n-\t}\n-}\n+    private ProgramFrame programFrame;\n+\n+    /**\n+     * Creates a new {@code Controller} and additionally an\n+     * {@code AnalysisLoader} and a {@code GraphUIController}.\n+     */\n+\n+\n+    public Controller() {\n+    }\n+\n+    /**\n+     * Leads to the calculation of the next block by the DFAFramework and\n+     * ensures that the {@code GraphUIController} actualizes the\n+     * {@code VisualGraphPanel}.\n+     * \n+     * @return weather there was a next block to show or not\n+     */\n+\n+\n+    public boolean nextBlock() {\n+        return false;\n+    }\n+\n+    /**\n+     * Leads to the calculation of the next line by the DFAFramework and ensures\n+     * that the {@code GraphUIController} updates the\n+     * {@code VisualGraphPanel}.\n+     * \n+     * @return weather there was a next line to show or not\n+     */\n+\n+\n+    public boolean nextLine() {\n+        return false;\n+    }\n+\n+    /**\n+     * Leads to the calculation of the previous line by the DFAFramework and\n+     * ensures that the {@code GraphUIController} updates the\n+     * {@code VisualGraphPanel}.\n+     * \n+     * @return weather there was a previous line to show or not\n+     */\n+\n+\n+    public boolean previousLine() {\n+        return false;\n+    }\n+\n+    /**\n+     * Leads to the calculation of the previous block by the DFAFramework and\n+     * ensures that the {@code GraphUIController} updates the\n+     * {@code VisualGraphPanel}.\n+     * \n+     * @return whether there was a previous block to show or not\n+     */\n+\n+\n+    public boolean previousBlock() {\n+        return false;\n+    }\n+\n+    /**\n+     * Leads to the calculation of a given step in the analysis from the\n+     * DFAFramework and ensures that the {@code GraphUIController} updates\n+     * the {@code VisualGraphPanel}.\n+     * \n+     * @param step\n+     *            step to show in the animation\n+     * @return weather the step can be shown or not\n+     */\n+\n+\n+    public boolean jumpToStep(int step) {\n+        return false;\n+    }\n+\n+    /**\n+     * Creates a new {@code AutoplayDriver} to replay the different steps of the\n+     * analysis if a delay bigger than zero is selected or jumps to the last\n+     * step of the analysis if the chosen delay is zero.\n+     */\n+\n+\n+    public void play() {\n+    }\n+\n+    /**\n+     * Stops the {@code AutoplayDriver}.\n+     */\n+\n+\n+    public void pause() {\n+    }\n+\n+    /**\n+     * Creates a new {@code CodeProcessor} to process the input of the user and\n+     * creates a {@code SimpleBlockGraph} of the chosen method. Precalculates the steps of the\n+     * analysis with the {@code DFAPrecalculator}. The {@code GraphUIController}\n+     * is invoked to display the CFG. The {@code ControlPanel}, the\n+     * {@code StatePanel} and the {@code VisualGraphPanel} are activated and the\n+     * {@code InputPanel} is deactivated.\n+     */\n+\n+\n+    public void startAnalysis() {\n+    }\n+\n+    /**\n+     * Deletes the actual {@code DFAExecution} and the content of the\n+     * {@code VisualGraphPanel} through the {@code GraphUIController}. The\n+     * {@code ControlPanel}, the {@code StatePanel} and the\n+     * {@code VisualGraphPanel} are deactivated and the {@code InputPanel}\n+     * is activated.\n+     */\n+\n+\n+    public void stopAnalysis() {\n+    }\n+\n+    /**\n+     * Sets the {@code ProgramFrame} to programFrame.\n+     * \n+     * @param programFrame\n+     *            programFrame that should be set\n+     */\n+\n+\n+    public void setProgramFrame(ProgramFrame programFrame) {\n+        this.programFrame = programFrame;\n+    }\n+\n+    /**\n+     * Returns a list of the names of the analyses that were found during\n+     * program start by the {@code AnalysisLoader}.\n+     * \n+     * @return list of names of the found analyses\n+     */\n+\n+\n+    public List<String> getAnalysis() {\n+        List<String> list = null;\n+        return list;\n+    }\n+\n+    /**\n+     * Returns the {@code VisualGraphPanel} created by the\n+     * {@code GraphUIController).\n+     * \n+     * @return the instance of {@code VisualGraphPanel}\n+     */\n+\n+\n+    public JPanel getVisualGraphPanel() {\n+        return null;\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 163
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "10",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "10",
                    "column": "4",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}