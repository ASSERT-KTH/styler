{
    "project_name": "neo4j-neo4j",
    "error_id": "1570",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1570/GatheringMemoryStatsVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1570/GatheringMemoryStatsVisitor.java\nindex 6bcc77ca9fb..b12df1c4062 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1570/GatheringMemoryStatsVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1570/GatheringMemoryStatsVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.cache;\n \n import org.neo4j.io.ByteUnit;\n@@ -32,13 +33,13 @@ public class GatheringMemoryStatsVisitor implements MemoryStatsVisitor\n     private long offHeapUsage;\n \n     @Override\n-    public void heapUsage( long bytes )\n+    public void heapUsage(long bytes)\n     {\n         heapUsage += bytes;\n     }\n \n     @Override\n-    public void offHeapUsage( long bytes )\n+    public void offHeapUsage(long bytes)\n     {\n         offHeapUsage += bytes;\n     }\n@@ -61,25 +62,25 @@ public class GatheringMemoryStatsVisitor implements MemoryStatsVisitor\n     @Override\n     public String toString()\n     {\n-        return \"Memory usage[heap:\" + ByteUnit.bytesToString( heapUsage ) + \", off-heap:\" + ByteUnit.bytesToString( offHeapUsage ) + \"]\";\n+        return \"Memory usage[heap:\" + ByteUnit.bytesToString(heapUsage) + \", off-heap:\" + ByteUnit.bytesToString(offHeapUsage) + \"]\";\n     }\n \n-    public static long totalMemoryUsageOf( MemoryStatsVisitor.Visitable... memoryUsers )\n+    public static long totalMemoryUsageOf(MemoryStatsVisitor.Visitable... memoryUsers)\n     {\n         GatheringMemoryStatsVisitor memoryVisitor = new GatheringMemoryStatsVisitor();\n-        for ( MemoryStatsVisitor.Visitable memoryUser : memoryUsers )\n+        for (MemoryStatsVisitor.Visitable memoryUser : memoryUsers)\n         {\n-            memoryUser.acceptMemoryStatsVisitor( memoryVisitor );\n+            memoryUser.acceptMemoryStatsVisitor(memoryVisitor);\n         }\n         return memoryVisitor.getTotalUsage();\n     }\n \n-    public static long highestMemoryUsageOf( MemoryStatsVisitor.Visitable... memoryUsers )\n+    public static long highestMemoryUsageOf(MemoryStatsVisitor.Visitable... memoryUsers)\n     {\n         long max = 0;\n-        for ( MemoryStatsVisitor.Visitable visitable : memoryUsers )\n+        for (MemoryStatsVisitor.Visitable visitable : memoryUsers)\n         {\n-            max = max( max, totalMemoryUsageOf( visitable ) );\n+            max = max(max, totalMemoryUsageOf(visitable));\n         }\n         return max;\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}