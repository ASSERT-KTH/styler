{
    "project_name": "graphfoundation-ongdb",
    "error_id": "795",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "89",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/795/StoreStatement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/795/StoreStatement.java\nindex 8cecb1e0483..0b067379d63 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/795/StoreStatement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/795/StoreStatement.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.storageengine.impl.recordstorage;\n \n import java.util.function.IntPredicate;\n@@ -61,257 +62,257 @@ import org.neo4j.storageengine.api.schema.LabelScanReader;\n  */\n public class StoreStatement implements StorageStatement\n {\n-    private final InstanceCache<StoreSingleNodeCursor> singleNodeCursor;\n-    private final InstanceCache<StoreSingleRelationshipCursor> singleRelationshipCursor;\n-    private final InstanceCache<StoreIteratorRelationshipCursor> iteratorRelationshipCursor;\n-    private final InstanceCache<StoreNodeRelationshipCursor> nodeRelationshipsCursor;\n-    private final InstanceCache<StoreSinglePropertyCursor> singlePropertyCursorCache;\n-    private final InstanceCache<StorePropertyCursor> propertyCursorCache;\n-\n-    private final NeoStores neoStores;\n-    private final NodeStore nodeStore;\n-    private final RelationshipStore relationshipStore;\n-    private final RelationshipGroupStore relationshipGroupStore;\n-    private final PropertyStore propertyStore;\n-\n-    private final Supplier<IndexReaderFactory> indexReaderFactorySupplier;\n-    private final RecordCursors recordCursors;\n-    private final Supplier<LabelScanReader> labelScanStore;\n-    private final RecordStorageCommandCreationContext commandCreationContext;\n-\n-    private IndexReaderFactory indexReaderFactory;\n-    private LabelScanReader labelScanReader;\n-\n-    private boolean acquired;\n-    private boolean closed;\n-\n-    public StoreStatement( NeoStores neoStores, Supplier<IndexReaderFactory> indexReaderFactory,\n-            Supplier<LabelScanReader> labelScanReaderSupplier, LockService lockService,\n-            RecordStorageCommandCreationContext commandCreationContext )\n-    {\n-        this.neoStores = neoStores;\n-        this.indexReaderFactorySupplier = indexReaderFactory;\n-        this.labelScanStore = labelScanReaderSupplier;\n-        this.commandCreationContext = commandCreationContext;\n-\n-        this.nodeStore = neoStores.getNodeStore();\n-        this.relationshipStore = neoStores.getRelationshipStore();\n-        this.relationshipGroupStore = neoStores.getRelationshipGroupStore();\n-        this.propertyStore = neoStores.getPropertyStore();\n-        this.recordCursors = new RecordCursors( neoStores );\n-\n-        singleNodeCursor = new InstanceCache<StoreSingleNodeCursor>()\n-        {\n-            @Override\n-            protected StoreSingleNodeCursor create()\n-            {\n-                return new StoreSingleNodeCursor( nodeStore.newRecord(), this, recordCursors, lockService );\n-            }\n-        };\n-        singleRelationshipCursor = new InstanceCache<StoreSingleRelationshipCursor>()\n-        {\n-            @Override\n-            protected StoreSingleRelationshipCursor create()\n-            {\n-                return new StoreSingleRelationshipCursor( relationshipStore.newRecord(), this, recordCursors,\n-                        lockService );\n-            }\n-        };\n-        iteratorRelationshipCursor = new InstanceCache<StoreIteratorRelationshipCursor>()\n-        {\n-            @Override\n-            protected StoreIteratorRelationshipCursor create()\n-            {\n-                return new StoreIteratorRelationshipCursor( relationshipStore.newRecord(), this, recordCursors,\n-                        lockService );\n-            }\n-        };\n-        nodeRelationshipsCursor = new InstanceCache<StoreNodeRelationshipCursor>()\n-        {\n-            @Override\n-            protected StoreNodeRelationshipCursor create()\n-            {\n-                return new StoreNodeRelationshipCursor( relationshipStore.newRecord(),\n-                        relationshipGroupStore.newRecord(), this, recordCursors, lockService );\n-            }\n-        };\n-\n-        singlePropertyCursorCache = new InstanceCache<StoreSinglePropertyCursor>()\n-        {\n-            @Override\n-            protected StoreSinglePropertyCursor create()\n-            {\n-                return new StoreSinglePropertyCursor( recordCursors, this );\n-            }\n-        };\n-        propertyCursorCache = new InstanceCache<StorePropertyCursor>()\n-        {\n-            @Override\n-            protected StorePropertyCursor create()\n-            {\n-                return new StorePropertyCursor( recordCursors, this );\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public void acquire()\n-    {\n-        assert !closed;\n-        assert !acquired;\n-        this.acquired = true;\n-    }\n-\n-    @Override\n-    public Cursor<NodeItem> acquireSingleNodeCursor( long nodeId )\n-    {\n-        neoStores.assertOpen();\n-        return singleNodeCursor.get().init( nodeId );\n-    }\n-\n-    @Override\n-    public Cursor<RelationshipItem> acquireSingleRelationshipCursor( long relId )\n-    {\n-        neoStores.assertOpen();\n-        return singleRelationshipCursor.get().init( relId );\n-    }\n-\n-    @Override\n-    public Cursor<RelationshipItem> acquireNodeRelationshipCursor( boolean isDense, long nodeId, long relationshipId,\n-            Direction direction, IntPredicate relTypeFilter )\n-    {\n-        neoStores.assertOpen();\n-        return nodeRelationshipsCursor.get().init( isDense, relationshipId, nodeId, direction, relTypeFilter );\n-    }\n-\n-    @Override\n-    public Cursor<RelationshipItem> relationshipsGetAllCursor()\n-    {\n-        neoStores.assertOpen();\n-        return iteratorRelationshipCursor.get().init( new AllIdIterator( relationshipStore ) );\n-    }\n-\n-    @Override\n-    public Cursor<PropertyItem> acquirePropertyCursor( long propertyId, Lock lock, AssertOpen assertOpen )\n-    {\n-        return propertyCursorCache.get().init( propertyId, lock, assertOpen );\n-    }\n-\n-    @Override\n-    public Cursor<PropertyItem> acquireSinglePropertyCursor( long propertyId, int propertyKeyId, Lock lock,\n-            AssertOpen assertOpen )\n-    {\n-        return singlePropertyCursorCache.get().init( propertyId, propertyKeyId, lock, assertOpen );\n-    }\n-\n-    @Override\n-    public void release()\n-    {\n-        assert !closed;\n-        assert acquired;\n-        closeSchemaResources();\n-        acquired = false;\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        assert !closed;\n-        closeSchemaResources();\n-        recordCursors.close();\n-        commandCreationContext.close();\n-        closed = true;\n-    }\n-\n-    private void closeSchemaResources()\n+  private final InstanceCache<StoreSingleNodeCursor> singleNodeCursor;\n+  private final InstanceCache<StoreSingleRelationshipCursor> singleRelationshipCursor;\n+  private final InstanceCache<StoreIteratorRelationshipCursor> iteratorRelationshipCursor;\n+  private final InstanceCache<StoreNodeRelationshipCursor> nodeRelationshipsCursor;\n+  private final InstanceCache<StoreSinglePropertyCursor> singlePropertyCursorCache;\n+  private final InstanceCache<StorePropertyCursor> propertyCursorCache;\n+\n+  private final NeoStores neoStores;\n+  private final NodeStore nodeStore;\n+  private final RelationshipStore relationshipStore;\n+  private final RelationshipGroupStore relationshipGroupStore;\n+  private final PropertyStore propertyStore;\n+\n+  private final Supplier<IndexReaderFactory> indexReaderFactorySupplier;\n+  private final RecordCursors recordCursors;\n+  private final Supplier<LabelScanReader> labelScanStore;\n+  private final RecordStorageCommandCreationContext commandCreationContext;\n+\n+  private IndexReaderFactory indexReaderFactory;\n+  private LabelScanReader labelScanReader;\n+\n+  private boolean acquired;\n+  private boolean closed;\n+\n+  public StoreStatement(NeoStores neoStores, Supplier<IndexReaderFactory> indexReaderFactory,\n+                        Supplier<LabelScanReader> labelScanReaderSupplier, LockService lockService,\n+                        RecordStorageCommandCreationContext commandCreationContext)\n+  {\n+    this.neoStores = neoStores;\n+    this.indexReaderFactorySupplier = indexReaderFactory;\n+    this.labelScanStore = labelScanReaderSupplier;\n+    this.commandCreationContext = commandCreationContext;\n+\n+    this.nodeStore = neoStores.getNodeStore();\n+    this.relationshipStore = neoStores.getRelationshipStore();\n+    this.relationshipGroupStore = neoStores.getRelationshipGroupStore();\n+    this.propertyStore = neoStores.getPropertyStore();\n+    this.recordCursors = new RecordCursors(neoStores);\n+\n+    singleNodeCursor = new InstanceCache<StoreSingleNodeCursor>()\n     {\n-        if ( indexReaderFactory != null )\n-        {\n-            indexReaderFactory.close();\n-            // we can actually keep this object around\n-        }\n-        if ( labelScanReader != null )\n-        {\n-            labelScanReader.close();\n-            labelScanReader = null;\n-        }\n-    }\n-\n-    @Override\n-    public LabelScanReader getLabelScanReader()\n-    {\n-        return labelScanReader != null ?\n-                labelScanReader : (labelScanReader = labelScanStore.get());\n-    }\n-\n-    private IndexReaderFactory indexReaderFactory()\n+      @Override\n+      protected StoreSingleNodeCursor create()\n+      {\n+        return new StoreSingleNodeCursor(nodeStore.newRecord(), this, recordCursors, lockService);\n+      }\n+    };\n+    singleRelationshipCursor = new InstanceCache<StoreSingleRelationshipCursor>()\n     {\n-        return indexReaderFactory != null ?\n-                indexReaderFactory : (indexReaderFactory = indexReaderFactorySupplier.get());\n-    }\n-\n-    @Override\n-    public IndexReader getIndexReader( SchemaIndexDescriptor descriptor ) throws IndexNotFoundKernelException\n+      @Override\n+      protected StoreSingleRelationshipCursor create()\n+      {\n+        return new StoreSingleRelationshipCursor(relationshipStore.newRecord(), this, recordCursors,\n+            lockService);\n+      }\n+    };\n+    iteratorRelationshipCursor = new InstanceCache<StoreIteratorRelationshipCursor>()\n     {\n-        return indexReaderFactory().newReader( descriptor );\n-    }\n-\n-    @Override\n-    public IndexReader getFreshIndexReader( SchemaIndexDescriptor descriptor ) throws IndexNotFoundKernelException\n+      @Override\n+      protected StoreIteratorRelationshipCursor create()\n+      {\n+        return new StoreIteratorRelationshipCursor(relationshipStore.newRecord(), this, recordCursors,\n+            lockService);\n+      }\n+    };\n+    nodeRelationshipsCursor = new InstanceCache<StoreNodeRelationshipCursor>()\n     {\n-        return indexReaderFactory().newUnCachedReader( descriptor );\n-    }\n-\n-    @Override\n-    public RecordCursors recordCursors()\n+      @Override\n+      protected StoreNodeRelationshipCursor create()\n+      {\n+        return new StoreNodeRelationshipCursor(relationshipStore.newRecord(),\n+            relationshipGroupStore.newRecord(), this, recordCursors, lockService);\n+      }\n+    };\n+\n+    singlePropertyCursorCache = new InstanceCache<StoreSinglePropertyCursor>()\n     {\n-        return recordCursors;\n-    }\n-\n-    RecordStorageCommandCreationContext getCommandCreationContext()\n+      @Override\n+      protected StoreSinglePropertyCursor create()\n+      {\n+        return new StoreSinglePropertyCursor(recordCursors, this);\n+      }\n+    };\n+    propertyCursorCache = new InstanceCache<StorePropertyCursor>()\n     {\n-        return commandCreationContext;\n-    }\n-\n-    @Override\n-    public long reserveNode()\n+      @Override\n+      protected StorePropertyCursor create()\n+      {\n+        return new StorePropertyCursor(recordCursors, this);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void acquire()\n+  {\n+    assert !closed;\n+    assert !acquired;\n+    this.acquired = true;\n+  }\n+\n+  @Override\n+  public Cursor<NodeItem> acquireSingleNodeCursor(long nodeId)\n+  {\n+    neoStores.assertOpen();\n+    return singleNodeCursor.get().init(nodeId);\n+  }\n+\n+  @Override\n+  public Cursor<RelationshipItem> acquireSingleRelationshipCursor(long relId)\n+  {\n+    neoStores.assertOpen();\n+    return singleRelationshipCursor.get().init(relId);\n+  }\n+\n+  @Override\n+  public Cursor<RelationshipItem> acquireNodeRelationshipCursor(boolean isDense, long nodeId, long relationshipId,\n+                                                                Direction direction, IntPredicate relTypeFilter)\n+  {\n+    neoStores.assertOpen();\n+    return nodeRelationshipsCursor.get().init(isDense, relationshipId, nodeId, direction, relTypeFilter);\n+  }\n+\n+  @Override\n+  public Cursor<RelationshipItem> relationshipsGetAllCursor()\n+  {\n+    neoStores.assertOpen();\n+    return iteratorRelationshipCursor.get().init(new AllIdIterator(relationshipStore));\n+  }\n+\n+  @Override\n+  public Cursor<PropertyItem> acquirePropertyCursor(long propertyId, Lock lock, AssertOpen assertOpen)\n+  {\n+    return propertyCursorCache.get().init(propertyId, lock, assertOpen);\n+  }\n+\n+  @Override\n+  public Cursor<PropertyItem> acquireSinglePropertyCursor(long propertyId, int propertyKeyId, Lock lock,\n+                                                          AssertOpen assertOpen)\n+  {\n+    return singlePropertyCursorCache.get().init(propertyId, propertyKeyId, lock, assertOpen);\n+  }\n+\n+  @Override\n+  public void release()\n+  {\n+    assert !closed;\n+    assert acquired;\n+    closeSchemaResources();\n+    acquired = false;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    assert !closed;\n+    closeSchemaResources();\n+    recordCursors.close();\n+    commandCreationContext.close();\n+    closed = true;\n+  }\n+\n+  private void closeSchemaResources()\n+  {\n+    if (indexReaderFactory != null)\n     {\n-        return commandCreationContext.nextId( StoreType.NODE );\n+      indexReaderFactory.close();\n+      // we can actually keep this object around\n     }\n-\n-    @Override\n-    public long reserveRelationship()\n-    {\n-        return commandCreationContext.nextId( StoreType.RELATIONSHIP );\n-    }\n-\n-    @Override\n-    public Nodes nodes()\n-    {\n-        return nodeStore;\n-    }\n-\n-    @Override\n-    public Relationships relationships()\n-    {\n-        return relationshipStore;\n-    }\n-\n-    @Override\n-    public Groups groups()\n-    {\n-        return relationshipGroupStore;\n-    }\n-\n-    @Override\n-    public Properties properties()\n-    {\n-        return propertyStore;\n-    }\n-\n-    @Override\n-    public long getGraphPropertyReference()\n+    if (labelScanReader != null)\n     {\n-        return neoStores.getMetaDataStore().getGraphNextProp();\n+      labelScanReader.close();\n+      labelScanReader = null;\n     }\n+  }\n+\n+  @Override\n+  public LabelScanReader getLabelScanReader()\n+  {\n+    return labelScanReader != null ?\n+        labelScanReader : (labelScanReader = labelScanStore.get());\n+  }\n+\n+  private IndexReaderFactory indexReaderFactory()\n+  {\n+    return indexReaderFactory != null ?\n+        indexReaderFactory : (indexReaderFactory = indexReaderFactorySupplier.get());\n+  }\n+\n+  @Override\n+  public IndexReader getIndexReader(SchemaIndexDescriptor descriptor) throws IndexNotFoundKernelException\n+  {\n+    return indexReaderFactory().newReader(descriptor);\n+  }\n+\n+  @Override\n+  public IndexReader getFreshIndexReader(SchemaIndexDescriptor descriptor) throws IndexNotFoundKernelException\n+  {\n+    return indexReaderFactory().newUnCachedReader(descriptor);\n+  }\n+\n+  @Override\n+  public RecordCursors recordCursors()\n+  {\n+    return recordCursors;\n+  }\n+\n+  RecordStorageCommandCreationContext getCommandCreationContext()\n+  {\n+    return commandCreationContext;\n+  }\n+\n+  @Override\n+  public long reserveNode()\n+  {\n+    return commandCreationContext.nextId(StoreType.NODE);\n+  }\n+\n+  @Override\n+  public long reserveRelationship()\n+  {\n+    return commandCreationContext.nextId(StoreType.RELATIONSHIP);\n+  }\n+\n+  @Override\n+  public Nodes nodes()\n+  {\n+    return nodeStore;\n+  }\n+\n+  @Override\n+  public Relationships relationships()\n+  {\n+    return relationshipStore;\n+  }\n+\n+  @Override\n+  public Groups groups()\n+  {\n+    return relationshipGroupStore;\n+  }\n+\n+  @Override\n+  public Properties properties()\n+  {\n+    return propertyStore;\n+  }\n+\n+  @Override\n+  public long getGraphPropertyReference()\n+  {\n+    return neoStores.getMetaDataStore().getGraphNextProp();\n+  }\n }\n",
            "diff_size": 412
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/795/StoreStatement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/795/StoreStatement.java\nindex 8cecb1e0483..7846d52eb89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/795/StoreStatement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/795/StoreStatement.java\n@@ -85,22 +85,19 @@ public class StoreStatement implements StorageStatement\n     private boolean acquired;\n     private boolean closed;\n \n-    public StoreStatement( NeoStores neoStores, Supplier<IndexReaderFactory> indexReaderFactory,\n-            Supplier<LabelScanReader> labelScanReaderSupplier, LockService lockService,\n+    public StoreStatement( NeoStores neoStores, Supplier<IndexReaderFactory> indexReaderFactory, Supplier<LabelScanReader> labelScanReaderSupplier, LockService lockService,\n             RecordStorageCommandCreationContext commandCreationContext )\n     {\n         this.neoStores = neoStores;\n         this.indexReaderFactorySupplier = indexReaderFactory;\n         this.labelScanStore = labelScanReaderSupplier;\n         this.commandCreationContext = commandCreationContext;\n-\n-        this.nodeStore = neoStores.getNodeStore();\n+this.nodeStore = neoStores.getNodeStore();\n         this.relationshipStore = neoStores.getRelationshipStore();\n         this.relationshipGroupStore = neoStores.getRelationshipGroupStore();\n         this.propertyStore = neoStores.getPropertyStore();\n         this.recordCursors = new RecordCursors( neoStores );\n-\n-        singleNodeCursor = new InstanceCache<StoreSingleNodeCursor>()\n+singleNodeCursor = new InstanceCache<StoreSingleNodeCursor>()\n         {\n             @Override\n             protected StoreSingleNodeCursor create()\n@@ -115,7 +112,7 @@ public class StoreStatement implements StorageStatement\n             {\n                 return new StoreSingleRelationshipCursor( relationshipStore.newRecord(), this, recordCursors,\n                         lockService );\n-            }\n+    }\n         };\n         iteratorRelationshipCursor = new InstanceCache<StoreIteratorRelationshipCursor>()\n         {\n@@ -124,16 +121,15 @@ public class StoreStatement implements StorageStatement\n             {\n                 return new StoreIteratorRelationshipCursor( relationshipStore.newRecord(), this, recordCursors,\n                         lockService );\n-            }\n+    }\n         };\n         nodeRelationshipsCursor = new InstanceCache<StoreNodeRelationshipCursor>()\n         {\n             @Override\n             protected StoreNodeRelationshipCursor create()\n             {\n-                return new StoreNodeRelationshipCursor( relationshipStore.newRecord(),\n-                        relationshipGroupStore.newRecord(), this, recordCursors, lockService );\n-            }\n+                return new StoreNodeRelationshipCursor( relationshipStore.newRecord(), relationshipGroupStore.newRecord(), this, recordCursors, lockService );\n+    }\n         };\n \n         singlePropertyCursorCache = new InstanceCache<StoreSinglePropertyCursor>()\n@@ -230,7 +226,8 @@ public class StoreStatement implements StorageStatement\n             indexReaderFactory.close();\n             // we can actually keep this object around\n         }\n-        if ( labelScanReader != null )\n+\n+if ( labelScanReader != null )\n         {\n             labelScanReader.close();\n             labelScanReader = null;\n@@ -240,14 +237,12 @@ public class StoreStatement implements StorageStatement\n     @Override\n     public LabelScanReader getLabelScanReader()\n     {\n-        return labelScanReader != null ?\n-                labelScanReader : (labelScanReader = labelScanStore.get());\n+        return labelScanReader != null ? labelScanReader : (labelScanReader = labelScanStore.get() );\n     }\n \n     private IndexReaderFactory indexReaderFactory()\n     {\n-        return indexReaderFactory != null ?\n-                indexReaderFactory : (indexReaderFactory = indexReaderFactorySupplier.get());\n+        return indexReaderFactory != null ? indexReaderFactory : (indexReaderFactory = indexReaderFactorySupplier.get() );\n     }\n \n     @Override\n@@ -314,4 +309,4 @@ public class StoreStatement implements StorageStatement\n     {\n         return neoStores.getMetaDataStore().getGraphNextProp();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}