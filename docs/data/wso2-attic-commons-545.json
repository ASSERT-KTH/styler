{
    "project_name": "wso2-attic-commons",
    "error_id": "545",
    "information": {
        "errors": [
            {
                "line": "48",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n        if (currentEvent != null) {\n            if (currentEvent instanceof ListEvent) {\n                for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/545/LastGroupByPerTimeOutputRateManager.java\nindex 007de9cb0c5..858db9f3d24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/545/LastGroupByPerTimeOutputRateManager.java\n@@ -44,9 +44,9 @@ public class LastGroupByPerTimeOutputRateManager extends OutputRateManager {\n \n     }\n \n-    @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-        if (currentEvent != null) {\n+    @Override public synchronized void send(long timeStamp, StreamEvent currentEvent,\n+            StreamEvent expiredEvent, String groupByKey) {\n+         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n                     currentGroupByKeyEvents.put(groupByKey, (InEvent) ((ListEvent) currentEvent).getEvent(i));\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/545/LastGroupByPerTimeOutputRateManager.java\nindex 007de9cb0c5..888d1c30142 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/545/LastGroupByPerTimeOutputRateManager.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.output.ratelimit.time;\n \n import org.apache.log4j.Logger;\n@@ -30,94 +31,94 @@ import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n public class LastGroupByPerTimeOutputRateManager extends OutputRateManager {\n-    private final Long value;\n+  private final Long value;\n \n-    private Map<String, InEvent> currentGroupByKeyEvents = new LinkedHashMap<String, InEvent>();\n-    private Map<String, InEvent> expiredGroupByKeyEvents = new LinkedHashMap<String, InEvent>();\n-    private Map<String, InEvent> allGroupByKeyEvents = new LinkedHashMap<String, InEvent>();\n-    static final Logger log = Logger.getLogger(LastGroupByPerTimeOutputRateManager.class);\n+  private Map<String, InEvent> currentGroupByKeyEvents = new LinkedHashMap<String, InEvent>();\n+  private Map<String, InEvent> expiredGroupByKeyEvents = new LinkedHashMap<String, InEvent>();\n+  private Map<String, InEvent> allGroupByKeyEvents = new LinkedHashMap<String, InEvent>();\n+  static final Logger log = Logger.getLogger(LastGroupByPerTimeOutputRateManager.class);\n \n \n-    public LastGroupByPerTimeOutputRateManager(Long value, ScheduledExecutorService scheduledExecutorService) {\n-        this.value = value;\n-        scheduledExecutorService.scheduleAtFixedRate(new EventSender(), 0, value.longValue(), TimeUnit.MILLISECONDS);\n+  public LastGroupByPerTimeOutputRateManager(Long value, ScheduledExecutorService scheduledExecutorService) {\n+    this.value = value;\n+    scheduledExecutorService.scheduleAtFixedRate(new EventSender(), 0, value.longValue(), TimeUnit.MILLISECONDS);\n \n-    }\n+  }\n \n-    @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-        if (currentEvent != null) {\n-            if (currentEvent instanceof ListEvent) {\n-                for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n-                    currentGroupByKeyEvents.put(groupByKey, (InEvent) ((ListEvent) currentEvent).getEvent(i));\n-                    allGroupByKeyEvents.put(groupByKey + \"-current\", (InEvent) ((ListEvent) currentEvent).getEvent(i));\n-                }\n-            } else {\n-                currentGroupByKeyEvents.put(groupByKey, (InEvent) currentEvent);\n-                allGroupByKeyEvents.put(groupByKey + \"-current\", (InEvent) currentEvent);\n-            }\n+  @Override\n+  public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n+    if (currentEvent != null) {\n+      if (currentEvent instanceof ListEvent) {\n+        for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n+          currentGroupByKeyEvents.put(groupByKey, (InEvent) ((ListEvent) currentEvent).getEvent(i));\n+          allGroupByKeyEvents.put(groupByKey + \"-current\", (InEvent) ((ListEvent) currentEvent).getEvent(i));\n         }\n-        if (expiredEvent != null) {\n-            if (expiredEvent instanceof ListEvent) {\n-                for (int i = 0, size = ((ListEvent) expiredEvent).getActiveEvents(); i < size; i++) {\n-                    expiredGroupByKeyEvents.put(groupByKey, (InEvent) ((ListEvent) expiredEvent).getEvent(i));\n-                    allGroupByKeyEvents.put(groupByKey + \"-expired\", (InEvent) ((ListEvent) expiredEvent).getEvent(i));\n-                }\n-            } else {\n-                expiredGroupByKeyEvents.put(groupByKey, (InEvent) expiredEvent);\n-                allGroupByKeyEvents.put(groupByKey + \"-expired\", (InEvent) expiredEvent);\n-            }\n+      } else {\n+        currentGroupByKeyEvents.put(groupByKey, (InEvent) currentEvent);\n+        allGroupByKeyEvents.put(groupByKey + \"-current\", (InEvent) currentEvent);\n+      }\n+    }\n+    if (expiredEvent != null) {\n+      if (expiredEvent instanceof ListEvent) {\n+        for (int i = 0, size = ((ListEvent) expiredEvent).getActiveEvents(); i < size; i++) {\n+          expiredGroupByKeyEvents.put(groupByKey, (InEvent) ((ListEvent) expiredEvent).getEvent(i));\n+          allGroupByKeyEvents.put(groupByKey + \"-expired\", (InEvent) ((ListEvent) expiredEvent).getEvent(i));\n         }\n+      } else {\n+        expiredGroupByKeyEvents.put(groupByKey, (InEvent) expiredEvent);\n+        allGroupByKeyEvents.put(groupByKey + \"-expired\", (InEvent) expiredEvent);\n+      }\n     }\n+  }\n+\n+  private synchronized void sendEvents(long timeStamp) {\n+    if (allGroupByKeyEvents.size() != 0) {\n+      if (allGroupByKeyEvents.size() == 1) {\n+        if (currentGroupByKeyEvents.size() > 0) {\n+          InEvent event = currentGroupByKeyEvents.values().iterator().next();\n+          sendToCallBacks(timeStamp, event, null, event);\n+        } else {\n+          InEvent event = expiredGroupByKeyEvents.values().iterator().next();\n+          sendToCallBacks(timeStamp, null, event, event);\n+        }\n+      } else {\n+        StreamEvent allEvent;\n+        StreamEvent currentEvent = null;\n+        StreamEvent expiredEvent = null;\n \n-    private synchronized void sendEvents(long timeStamp) {\n-        if (allGroupByKeyEvents.size() != 0) {\n-            if (allGroupByKeyEvents.size() == 1) {\n-                if (currentGroupByKeyEvents.size() > 0) {\n-                    InEvent event=currentGroupByKeyEvents.values().iterator().next();\n-                    sendToCallBacks(timeStamp, event, null, event);\n-                } else {\n-                    InEvent event=expiredGroupByKeyEvents.values().iterator().next();\n-                    sendToCallBacks(timeStamp, null, event, event);\n-                }\n-            } else {\n-                StreamEvent allEvent;\n-                StreamEvent currentEvent = null;\n-                StreamEvent expiredEvent = null;\n-\n-                if (currentGroupByKeyEvents.size() > 0) {\n-                    InEvent[] currentEvents = new InEvent[currentGroupByKeyEvents.size()];\n-                    currentGroupByKeyEvents.values().toArray(currentEvents);\n-                    currentEvent = new InListEvent(currentEvents);\n-                }\n-                if (expiredGroupByKeyEvents.size() > 0) {\n-                    InEvent[] expiredEvents = new InEvent[expiredGroupByKeyEvents.size()];\n-                    expiredGroupByKeyEvents.values().toArray(expiredEvents);\n-                    expiredEvent = new InListEvent(expiredEvents);\n-                }\n-\n-                InEvent[] allEvents = new InEvent[allGroupByKeyEvents.size()];\n-                allGroupByKeyEvents.values().toArray(allEvents);\n-                allEvent = new InListEvent(allEvents);\n-                sendToCallBacks(timeStamp, currentEvent, expiredEvent, allEvent);\n-\n-            }\n-\n-            allGroupByKeyEvents.clear();\n-            currentGroupByKeyEvents.clear();\n-            expiredGroupByKeyEvents.clear();\n+        if (currentGroupByKeyEvents.size() > 0) {\n+          InEvent[] currentEvents = new InEvent[currentGroupByKeyEvents.size()];\n+          currentGroupByKeyEvents.values().toArray(currentEvents);\n+          currentEvent = new InListEvent(currentEvents);\n         }\n+        if (expiredGroupByKeyEvents.size() > 0) {\n+          InEvent[] expiredEvents = new InEvent[expiredGroupByKeyEvents.size()];\n+          expiredGroupByKeyEvents.values().toArray(expiredEvents);\n+          expiredEvent = new InListEvent(expiredEvents);\n+        }\n+\n+        InEvent[] allEvents = new InEvent[allGroupByKeyEvents.size()];\n+        allGroupByKeyEvents.values().toArray(allEvents);\n+        allEvent = new InListEvent(allEvents);\n+        sendToCallBacks(timeStamp, currentEvent, expiredEvent, allEvent);\n+\n+      }\n+\n+      allGroupByKeyEvents.clear();\n+      currentGroupByKeyEvents.clear();\n+      expiredGroupByKeyEvents.clear();\n     }\n+  }\n \n \n-    private class EventSender implements Runnable {\n-        @Override\n-        public void run() {\n-            try {\n-                sendEvents(System.currentTimeMillis());\n-            }catch (Throwable t){\n-                log.error(t.getMessage(), t) ;\n-            }\n-        }\n+  private class EventSender implements Runnable {\n+    @Override\n+    public void run() {\n+      try {\n+        sendEvents(System.currentTimeMillis());\n+      } catch (Throwable t) {\n+        log.error(t.getMessage(), t);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/545/LastGroupByPerTimeOutputRateManager.java\nindex 007de9cb0c5..25acc01a56b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/545/LastGroupByPerTimeOutputRateManager.java\n@@ -116,8 +116,8 @@ public class LastGroupByPerTimeOutputRateManager extends OutputRateManager {\n             try {\n                 sendEvents(System.currentTimeMillis());\n             }catch (Throwable t){\n-                log.error(t.getMessage(), t) ;\n+                log.error(t.getMessage(), t);\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/545/LastGroupByPerTimeOutputRateManager.java\nindex 007de9cb0c5..858db9f3d24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/545/LastGroupByPerTimeOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/545/LastGroupByPerTimeOutputRateManager.java\n@@ -44,9 +44,9 @@ public class LastGroupByPerTimeOutputRateManager extends OutputRateManager {\n \n     }\n \n-    @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-        if (currentEvent != null) {\n+    @Override public synchronized void send(long timeStamp, StreamEvent currentEvent,\n+            StreamEvent expiredEvent, String groupByKey) {\n+         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n                     currentGroupByKeyEvents.put(groupByKey, (InEvent) ((ListEvent) currentEvent).getEvent(i));\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}