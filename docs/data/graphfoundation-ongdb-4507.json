{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4507",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "151",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "158",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4507/TransactionStateMachineSPI.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4507/TransactionStateMachineSPI.java\nindex 655e98b8846..eb65d5c9c5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4507/TransactionStateMachineSPI.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4507/TransactionStateMachineSPI.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.runtime;\n \n import java.time.Clock;\n@@ -53,129 +54,126 @@ import static org.neo4j.internal.kernel.api.Transaction.Type.implicit;\n \n class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n {\n-    private final GraphDatabaseAPI db;\n-    private final ThreadToStatementContextBridge txBridge;\n-    private final QueryExecutionEngine queryExecutionEngine;\n-    private final TransactionIdTracker transactionIdTracker;\n-    private static final PropertyContainerLocker locker = new PropertyContainerLocker();\n-    private final TransactionalContextFactory contextFactory;\n-    private final GraphDatabaseQueryService queryService;\n-    private final Duration txAwaitDuration;\n-    private final Clock clock;\n-\n-    TransactionStateMachineSPI( GraphDatabaseAPI db,\n-                                ThreadToStatementContextBridge txBridge,\n-                                QueryExecutionEngine queryExecutionEngine,\n-                                AvailabilityGuard availabilityGuard,\n-                                GraphDatabaseQueryService queryService,\n-                                Duration txAwaitDuration,\n-                                Clock clock )\n-    {\n-        this.db = db;\n-        this.txBridge = txBridge;\n-        this.queryExecutionEngine = queryExecutionEngine;\n-\n-        Supplier<TransactionIdStore> transactionIdStoreSupplier = db.getDependencyResolver().provideDependency( TransactionIdStore.class );\n-        this.transactionIdTracker = new TransactionIdTracker( transactionIdStoreSupplier, availabilityGuard );\n-\n-        this.contextFactory = Neo4jTransactionalContextFactory.create( queryService, locker );\n-        this.queryService = queryService;\n-        this.txAwaitDuration = txAwaitDuration;\n-        this.clock = clock;\n-    }\n-\n-    @Override\n-    public void awaitUpToDate( long oldestAcceptableTxId ) throws TransactionFailureException\n+  private final GraphDatabaseAPI db;\n+  private final ThreadToStatementContextBridge txBridge;\n+  private final QueryExecutionEngine queryExecutionEngine;\n+  private final TransactionIdTracker transactionIdTracker;\n+  private static final PropertyContainerLocker locker = new PropertyContainerLocker();\n+  private final TransactionalContextFactory contextFactory;\n+  private final GraphDatabaseQueryService queryService;\n+  private final Duration txAwaitDuration;\n+  private final Clock clock;\n+\n+  TransactionStateMachineSPI(GraphDatabaseAPI db,\n+                             ThreadToStatementContextBridge txBridge,\n+                             QueryExecutionEngine queryExecutionEngine,\n+                             AvailabilityGuard availabilityGuard,\n+                             GraphDatabaseQueryService queryService,\n+                             Duration txAwaitDuration,\n+                             Clock clock)\n+  {\n+    this.db = db;\n+    this.txBridge = txBridge;\n+    this.queryExecutionEngine = queryExecutionEngine;\n+\n+    Supplier<TransactionIdStore> transactionIdStoreSupplier = db.getDependencyResolver().provideDependency(TransactionIdStore.class);\n+    this.transactionIdTracker = new TransactionIdTracker(transactionIdStoreSupplier, availabilityGuard);\n+\n+    this.contextFactory = Neo4jTransactionalContextFactory.create(queryService, locker);\n+    this.queryService = queryService;\n+    this.txAwaitDuration = txAwaitDuration;\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public void awaitUpToDate(long oldestAcceptableTxId) throws TransactionFailureException\n+  {\n+    transactionIdTracker.awaitUpToDate(oldestAcceptableTxId, txAwaitDuration);\n+  }\n+\n+  @Override\n+  public long newestEncounteredTxId()\n+  {\n+    return transactionIdTracker.newestEncounteredTxId();\n+  }\n+\n+  @Override\n+  public KernelTransaction beginTransaction(LoginContext loginContext)\n+  {\n+    db.beginTransaction(KernelTransaction.Type.explicit, loginContext);\n+    return txBridge.getKernelTransactionBoundToThisThread(false);\n+  }\n+\n+  @Override\n+  public void bindTransactionToCurrentThread(KernelTransaction tx)\n+  {\n+    txBridge.bindTransactionToCurrentThread(tx);\n+  }\n+\n+  @Override\n+  public void unbindTransactionFromCurrentThread()\n+  {\n+    txBridge.unbindTransactionFromCurrentThread();\n+  }\n+\n+  @Override\n+  public boolean isPeriodicCommit(String query)\n+  {\n+    return queryExecutionEngine.isPeriodicCommit(query);\n+  }\n+\n+  @Override\n+  public BoltResultHandle executeQuery(BoltQuerySource querySource,\n+                                       LoginContext loginContext, String statement, MapValue params)\n+  {\n+    InternalTransaction internalTransaction = queryService.beginTransaction(implicit, loginContext);\n+    ClientConnectionInfo sourceDetails = new BoltConnectionInfo(querySource.principalName,\n+        querySource.clientName,\n+        querySource.connectionDescriptor.clientAddress(),\n+        querySource.connectionDescriptor.serverAddress());\n+    TransactionalContext transactionalContext =\n+        contextFactory.newContext(sourceDetails, internalTransaction, statement, params);\n+\n+    return new BoltResultHandle()\n     {\n-        transactionIdTracker.awaitUpToDate( oldestAcceptableTxId, txAwaitDuration );\n-    }\n \n-    @Override\n-    public long newestEncounteredTxId()\n-    {\n-        return transactionIdTracker.newestEncounteredTxId();\n-    }\n-\n-    @Override\n-    public KernelTransaction beginTransaction( LoginContext loginContext )\n-    {\n-        db.beginTransaction( KernelTransaction.Type.explicit, loginContext );\n-        return txBridge.getKernelTransactionBoundToThisThread( false );\n-    }\n-\n-    @Override\n-    public void bindTransactionToCurrentThread( KernelTransaction tx )\n-    {\n-        txBridge.bindTransactionToCurrentThread( tx );\n-    }\n-\n-    @Override\n-    public void unbindTransactionFromCurrentThread()\n-    {\n-        txBridge.unbindTransactionFromCurrentThread();\n-    }\n-\n-    @Override\n-    public boolean isPeriodicCommit( String query )\n-    {\n-        return queryExecutionEngine.isPeriodicCommit( query );\n-    }\n-\n-    @Override\n-    public BoltResultHandle executeQuery( BoltQuerySource querySource,\n-            LoginContext loginContext, String statement, MapValue params )\n-    {\n-        InternalTransaction internalTransaction = queryService.beginTransaction( implicit, loginContext );\n-        ClientConnectionInfo sourceDetails = new BoltConnectionInfo( querySource.principalName,\n-                querySource.clientName,\n-                querySource.connectionDescriptor.clientAddress(),\n-                querySource.connectionDescriptor.serverAddress() );\n-        TransactionalContext transactionalContext =\n-                contextFactory.newContext( sourceDetails, internalTransaction, statement, params );\n-\n-        return new BoltResultHandle()\n+      @Override\n+      public BoltResult start() throws KernelException\n+      {\n+        try\n         {\n-\n-            @Override\n-            public BoltResult start() throws KernelException\n-            {\n-                try\n-                {\n-                    Result result = queryExecutionEngine.executeQuery( statement, params, transactionalContext );\n-                    if ( result instanceof QueryResultProvider )\n-                    {\n-                        return new CypherAdapterStream( ((QueryResultProvider) result).queryResult(), clock );\n-                    }\n-                    else\n-                    {\n-                        throw new IllegalStateException( format( \"Unexpected query execution result. Expected to get instance of %s but was %s.\",\n-                                                                  QueryResultProvider.class.getName(), result.getClass().getName() ) );\n-                    }\n-                }\n-                catch ( KernelException e )\n-                {\n-                    close( false );\n-                    throw new QueryExecutionKernelException( e );\n-                }\n-                catch ( Throwable e )\n-                {\n-                    close( false );\n-                    throw e;\n-                }\n-            }\n-\n-            @Override\n-            public void close( boolean success )\n-            {\n-                transactionalContext.close( success );\n-            }\n-\n-            @Override\n-            public void terminate()\n-            {\n-                transactionalContext.terminate();\n-            }\n-\n-        };\n-    }\n+          Result result = queryExecutionEngine.executeQuery(statement, params, transactionalContext);\n+          if (result instanceof QueryResultProvider)\n+          {\n+            return new CypherAdapterStream(((QueryResultProvider) result).queryResult(), clock);\n+          } else\n+          {\n+            throw new IllegalStateException(format(\"Unexpected query execution result. Expected to get instance of %s but was %s.\",\n+                QueryResultProvider.class.getName(), result.getClass().getName()));\n+          }\n+        } catch (KernelException e)\n+        {\n+          close(false);\n+          throw new QueryExecutionKernelException(e);\n+        } catch (Throwable e)\n+        {\n+          close(false);\n+          throw e;\n+        }\n+      }\n+\n+      @Override\n+      public void close(boolean success)\n+      {\n+        transactionalContext.close(success);\n+      }\n+\n+      @Override\n+      public void terminate()\n+      {\n+        transactionalContext.terminate();\n+      }\n+\n+    };\n+  }\n }\n",
            "diff_size": 171
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4507/TransactionStateMachineSPI.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4507/TransactionStateMachineSPI.java\nindex 655e98b8846..9c0b3c16abd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4507/TransactionStateMachineSPI.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4507/TransactionStateMachineSPI.java\n@@ -63,22 +63,20 @@ class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n     private final Duration txAwaitDuration;\n     private final Clock clock;\n \n-    TransactionStateMachineSPI( GraphDatabaseAPI db,\n-                                ThreadToStatementContextBridge txBridge,\n+    TransactionStateMachineSPI( GraphDatabaseAPI db, ThreadToStatementContextBridge txBridge,\n                                 QueryExecutionEngine queryExecutionEngine,\n                                 AvailabilityGuard availabilityGuard,\n                                 GraphDatabaseQueryService queryService,\n                                 Duration txAwaitDuration,\n                                 Clock clock )\n-    {\n+{\n         this.db = db;\n         this.txBridge = txBridge;\n         this.queryExecutionEngine = queryExecutionEngine;\n \n         Supplier<TransactionIdStore> transactionIdStoreSupplier = db.getDependencyResolver().provideDependency( TransactionIdStore.class );\n         this.transactionIdTracker = new TransactionIdTracker( transactionIdStoreSupplier, availabilityGuard );\n-\n-        this.contextFactory = Neo4jTransactionalContextFactory.create( queryService, locker );\n+this.contextFactory = Neo4jTransactionalContextFactory.create( queryService, locker );\n         this.queryService = queryService;\n         this.txAwaitDuration = txAwaitDuration;\n         this.clock = clock;\n@@ -128,15 +126,12 @@ class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n         InternalTransaction internalTransaction = queryService.beginTransaction( implicit, loginContext );\n         ClientConnectionInfo sourceDetails = new BoltConnectionInfo( querySource.principalName,\n                 querySource.clientName,\n-                querySource.connectionDescriptor.clientAddress(),\n-                querySource.connectionDescriptor.serverAddress() );\n-        TransactionalContext transactionalContext =\n-                contextFactory.newContext( sourceDetails, internalTransaction, statement, params );\n-\n-        return new BoltResultHandle()\n+                querySource.connectionDescriptor.clientAddress(), querySource.connectionDescriptor.serverAddress() );\n+TransactionalContext transactionalContext = contextFactory.newContext( sourceDetails, internalTransaction, statement, params );\n+return new BoltResultHandle()\n         {\n \n-            @Override\n+@Override\n             public BoltResult start() throws KernelException\n             {\n                 try\n@@ -148,9 +143,8 @@ class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n                     }\n                     else\n                     {\n-                        throw new IllegalStateException( format( \"Unexpected query execution result. Expected to get instance of %s but was %s.\",\n-                                                                  QueryResultProvider.class.getName(), result.getClass().getName() ) );\n-                    }\n+                        throw new IllegalStateException( format( \"Unexpected query execution result. Expected to get instance of %s but was %s.\", QueryResultProvider.class.getName(), result.getClass().getName() ) );\n+    }\n                 }\n                 catch ( KernelException e )\n                 {\n@@ -175,7 +169,6 @@ class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n             {\n                 transactionalContext.terminate();\n             }\n-\n-        };\n+    };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 253).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4507/TransactionStateMachineSPI.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4507/TransactionStateMachineSPI.java\nindex 655e98b8846..cad26ef91f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4507/TransactionStateMachineSPI.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4507/TransactionStateMachineSPI.java\n@@ -22,7 +22,6 @@ package org.neo4j.bolt.v1.runtime;\n import java.time.Clock;\n import java.time.Duration;\n import java.util.function.Supplier;\n-\n import org.neo4j.bolt.v1.runtime.TransactionStateMachine.BoltResultHandle;\n import org.neo4j.bolt.v1.runtime.spi.BoltResult;\n import org.neo4j.cypher.internal.javacompat.QueryResultProvider;\n@@ -47,8 +46,8 @@ import org.neo4j.kernel.impl.query.clientconnection.ClientConnectionInfo;\n import org.neo4j.kernel.impl.transaction.log.TransactionIdStore;\n import org.neo4j.kernel.internal.GraphDatabaseAPI;\n import org.neo4j.values.virtual.MapValue;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.internal.kernel.api.Transaction.Type.implicit;\n \n class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n@@ -63,21 +62,13 @@ class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n     private final Duration txAwaitDuration;\n     private final Clock clock;\n \n-    TransactionStateMachineSPI( GraphDatabaseAPI db,\n-                                ThreadToStatementContextBridge txBridge,\n-                                QueryExecutionEngine queryExecutionEngine,\n-                                AvailabilityGuard availabilityGuard,\n-                                GraphDatabaseQueryService queryService,\n-                                Duration txAwaitDuration,\n-                                Clock clock )\n+    TransactionStateMachineSPI( GraphDatabaseAPI db, ThreadToStatementContextBridge txBridge, QueryExecutionEngine queryExecutionEngine, AvailabilityGuard availabilityGuard, GraphDatabaseQueryService queryService, Duration txAwaitDuration, Clock clock )\n     {\n         this.db = db;\n         this.txBridge = txBridge;\n         this.queryExecutionEngine = queryExecutionEngine;\n-\n         Supplier<TransactionIdStore> transactionIdStoreSupplier = db.getDependencyResolver().provideDependency( TransactionIdStore.class );\n         this.transactionIdTracker = new TransactionIdTracker( transactionIdStoreSupplier, availabilityGuard );\n-\n         this.contextFactory = Neo4jTransactionalContextFactory.create( queryService, locker );\n         this.queryService = queryService;\n         this.txAwaitDuration = txAwaitDuration;\n@@ -122,60 +113,52 @@ class TransactionStateMachineSPI implements TransactionStateMachine.SPI\n     }\n \n     @Override\n-    public BoltResultHandle executeQuery( BoltQuerySource querySource,\n-            LoginContext loginContext, String statement, MapValue params )\n+    public BoltResultHandle executeQuery( BoltQuerySource querySource, LoginContext loginContext, String statement, MapValue params )\n     {\n         InternalTransaction internalTransaction = queryService.beginTransaction( implicit, loginContext );\n-        ClientConnectionInfo sourceDetails = new BoltConnectionInfo( querySource.principalName,\n-                querySource.clientName,\n-                querySource.connectionDescriptor.clientAddress(),\n-                querySource.connectionDescriptor.serverAddress() );\n-        TransactionalContext transactionalContext =\n-                contextFactory.newContext( sourceDetails, internalTransaction, statement, params );\n-\n+        ClientConnectionInfo sourceDetails = new BoltConnectionInfo( querySource.principalName, querySource.clientName, querySource.connectionDescriptor.clientAddress(), querySource.connectionDescriptor.serverAddress() );\n+        TransactionalContext transactionalContext = contextFactory.newContext( sourceDetails, internalTransaction, statement, params );\n         return new BoltResultHandle()\n+{\n+    @Override\n+    public BoltResult start() throws KernelException\n+    {\n+        try\n         {\n-\n-            @Override\n-            public BoltResult start() throws KernelException\n+            Result result = queryExecutionEngine.executeQuery( statement, params, transactionalContext );\n+            if ( result instanceof QueryResultProvider )\n             {\n-                try\n-                {\n-                    Result result = queryExecutionEngine.executeQuery( statement, params, transactionalContext );\n-                    if ( result instanceof QueryResultProvider )\n-                    {\n-                        return new CypherAdapterStream( ((QueryResultProvider) result).queryResult(), clock );\n-                    }\n-                    else\n-                    {\n-                        throw new IllegalStateException( format( \"Unexpected query execution result. Expected to get instance of %s but was %s.\",\n-                                                                  QueryResultProvider.class.getName(), result.getClass().getName() ) );\n-                    }\n-                }\n-                catch ( KernelException e )\n-                {\n-                    close( false );\n-                    throw new QueryExecutionKernelException( e );\n-                }\n-                catch ( Throwable e )\n-                {\n-                    close( false );\n-                    throw e;\n-                }\n+                return new CypherAdapterStream( ((QueryResultProvider) result).queryResult(), clock );\n             }\n-\n-            @Override\n-            public void close( boolean success )\n+            else\n             {\n-                transactionalContext.close( success );\n+                throw new IllegalStateException( format( \"Unexpected query execution result. Expected to get instance of %s but was %s.\", QueryResultProvider.class.getName(), result.getClass().getName() ) );\n             }\n+        }\n+        catch ( KernelException e )\n+        {\n+            close( false );\n+            throw new QueryExecutionKernelException( e );\n+        }\n \n-            @Override\n-            public void terminate()\n+            catch ( Throwable e )\n             {\n-                transactionalContext.terminate();\n+                close( false );\n+                throw e;\n             }\n+    }\n+\n+    @Override\n+    public void close( boolean success )\n+    {\n+        transactionalContext.close( success );\n+    }\n \n-        };\n+    @Override\n+    public void terminate()\n+    {\n+        transactionalContext.terminate();\n+    }\n+};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}